

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Jan 05 21:14:56 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 1.40
    22                           ; Generated 01/12/2016 GMT
    23                           ; 
    24                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  0105                     	;# 
   119  0107                     	;# 
   120  0108                     	;# 
   121  0109                     	;# 
   122  010C                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  0185                     	;# 
   128  0187                     	;# 
   129  0188                     	;# 
   130  0189                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  008F                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  0105                     	;# 
   197  0107                     	;# 
   198  0108                     	;# 
   199  0109                     	;# 
   200  010C                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0187                     	;# 
   207  0188                     	;# 
   208  0189                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211                           
   212                           	psect	idataBANK0
   213  0653                     __pidataBANK0:	
   214                           
   215                           ;initializer for _intNumberOfBlinks
   216  0653  3458               	retlw	88
   217  0654  3402               	retlw	2
   218                           
   219                           ;initializer for _bValueFromPot
   220  0655  3401               	retlw	1
   221                           
   222                           	psect	strings
   223  0015                     __pstrings:	
   224  0015                     stringtab:	
   225  0015                     __stringtab:	
   226  0015                     stringcode:	
   227                           ;	String table - string pointers are 1 byte each
   228                           
   229  0015                     stringdir:	
   230  0015  3000               	movlw	high stringdir
   231  0016  008A               	movwf	10
   232  0017  0804               	movf	4,w
   233  0018  0A84               	incf	4,f
   234  0019  0782               	addwf	2,f
   235  001A                     __stringbase:	
   236  001A  3400               	retlw	0
   237  001B                     __end_of__stringtab:	
   238  001B                     _ChannelP:	
   239  001B  343F               	retlw	63
   240  001C  3447               	retlw	71
   241  001D  344F               	retlw	79
   242  001E  3457               	retlw	87
   243  001F  345F               	retlw	95
   244  0020  3477               	retlw	119
   245  0021  347E               	retlw	126
   246  0022  347F               	retlw	127
   247  0023  3486               	retlw	134
   248  0024  3487               	retlw	135
   249  0025  3437               	retlw	55
   250  0026  3467               	retlw	103
   251  0027  346F               	retlw	111
   252  0028                     __end_of_ChannelP:	
   253  0028                     _ChannelR:	
   254  0028  344F               	retlw	79
   255  0029  3459               	retlw	89
   256  002A  3463               	retlw	99
   257  002B  346D               	retlw	109
   258  002C  3477               	retlw	119
   259  002D  3495               	retlw	149
   260  002E  349F               	retlw	159
   261  002F  349F               	retlw	159
   262  0030  34A9               	retlw	169
   263  0031  34A9               	retlw	169
   264  0032  3445               	retlw	69
   265  0033  3481               	retlw	129
   266  0034  348B               	retlw	139
   267  0035                     __end_of_ChannelR:	
   268  0035                     _ChannelS:	
   269  0035  3418               	retlw	24
   270  0036  341B               	retlw	27
   271  0037  341E               	retlw	30
   272  0038  3421               	retlw	33
   273  0039  3424               	retlw	36
   274  003A  342D               	retlw	45
   275  003B  347B               	retlw	123
   276  003C  3430               	retlw	48
   277  003D  347E               	retlw	126
   278  003E  3433               	retlw	51
   279  003F  3415               	retlw	21
   280  0040  3427               	retlw	39
   281  0041  342A               	retlw	42
   282  0042                     __end_of_ChannelS:	
   283  001F                     _ADCON0bits	set	31
   284  001E                     _ADRESH	set	30
   285  000B                     _INTCONbits	set	11
   286  000C                     _PIR1bits	set	12
   287  0005                     _PORTA	set	5
   288  0006                     _PORTB	set	6
   289  0007                     _PORTC	set	7
   290  0008                     _PORTD	set	8
   291  0009                     _PORTE	set	9
   292  0013                     _SSPBUF	set	19
   293  0014                     _SSPCONbits	set	20
   294  0010                     _T1CON	set	16
   295  0010                     _T1CONbits	set	16
   296  000F                     _TMR1H	set	15
   297  000E                     _TMR1L	set	14
   298  005F                     _GIE	set	95
   299  0029                     _RA1	set	41
   300  002C                     _RA4	set	44
   301  002D                     _RA5	set	45
   302  0030                     _RB0	set	48
   303  0033                     _RB3	set	51
   304  0034                     _RB4	set	52
   305  0035                     _RB5	set	53
   306  0058                     _RBIF	set	88
   307  0038                     _RC0	set	56
   308  0039                     _RC1	set	57
   309  003A                     _RC2	set	58
   310  0043                     _RD3	set	67
   311  0044                     _RD4	set	68
   312  0060                     _TMR1IF	set	96
   313  0080                     _TMR1ON	set	128
   314  009F                     _ADCON1bits	set	159
   315  0096                     _IOCBbits	set	150
   316  0081                     _OPTION_REGbits	set	129
   317  008F                     _OSCCONbits	set	143
   318  008C                     _PIE1bits	set	140
   319  0094                     _SSPSTATbits	set	148
   320  0086                     _TRISB	set	134
   321  0087                     _TRISC	set	135
   322  0095                     _WPUBbits	set	149
   323  0463                     _SSPIE	set	1123
   324  010D                     _EEADR	set	269
   325  010C                     _EEDATA	set	268
   326  0188                     _ANSEL	set	392
   327  0189                     _ANSELH	set	393
   328  018C                     _EECON1	set	396
   329  0C60                     _RD	set	3168
   330  0C61                     _WR	set	3169
   331                           
   332                           ; #config settings
   333  0000                     
   334                           	psect	cinit
   335  07E2                     start_initialization:	
   336  07E2                     __initialization:	
   337                           
   338                           ; Initialize objects allocated to BANK0
   339  07E2  120A  118A  2653  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   340  07E7  00E9               	movwf	__pdataBANK0& (0+127)
   341  07E8  120A  118A  2654  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   342  07ED  00EA               	movwf	(__pdataBANK0+1)& (0+127)
   343  07EE  120A  118A  2655  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   344  07F3  00EB               	movwf	(__pdataBANK0+2)& (0+127)
   345                           
   346                           ; Clear objects allocated to BANK0
   347  07F4  1383               	bcf	3,7	;select IRP bank0
   348  07F5  3020               	movlw	low __pbssBANK0
   349  07F6  0084               	movwf	4
   350  07F7  3069               	movlw	low (__pbssBANK0+73)
   351  07F8  120A  118A  2656   	fcall	clear_ram0
   352                           
   353                           ; Clear objects allocated to COMMON
   354  07FB  01FD               	clrf	__pbssCOMMON& (0+127)
   355  07FC                     end_of_initialization:	
   356                           ;End of C runtime variable initialization code
   357                           
   358  07FC                     __end_of__initialization:	
   359  07FC  0183               	clrf	3
   360  07FD  120A  118A  2E67   	ljmp	_main	;jump to C main() function
   361                           
   362                           	psect	bssCOMMON
   363  007D                     __pbssCOMMON:	
   364  007D                     _bDark:	
   365  007D                     	ds	1
   366                           
   367                           	psect	bssBANK0
   368  0020                     __pbssBANK0:	
   369  0020                     _ReceivedData:	
   370  0020                     	ds	40
   371  0048                     _intClockTimer:	
   372  0048                     	ds	10
   373  0052                     _bTimerComplete:	
   374  0052                     	ds	5
   375  0057                     _addressDarknessValue:	
   376  0057                     	ds	2
   377  0059                     _channelFound:	
   378  0059                     	ds	2
   379  005B                     _intBlinkCounter:	
   380  005B                     	ds	2
   381  005D                     _intBlinkCycle:	
   382  005D                     	ds	2
   383  005F                     _intDarkCheckIntervall:	
   384  005F                     	ds	2
   385  0061                     _intHalfSecondCounter:	
   386  0061                     	ds	2
   387  0063                     _intMinuteCounter:	
   388  0063                     	ds	2
   389  0065                     _intSecondCounter:	
   390  0065                     	ds	2
   391  0067                     _bChannelFound:	
   392  0067                     	ds	1
   393  0068                     _bTransiverModeReceive:	
   394  0068                     	ds	1
   395                           
   396                           	psect	dataBANK0
   397  0069                     __pdataBANK0:	
   398  0069                     _intNumberOfBlinks:	
   399  0069                     	ds	2
   400  006B                     _bValueFromPot:	
   401  006B                     	ds	1
   402                           
   403                           	psect	clrtext
   404  0656                     clear_ram0:	
   405                           ;	Called with FSR containing the base address, and
   406                           ;	W with the last address+1
   407                           
   408  0656  0064               	clrwdt	;clear the watchdog before getting into this loop
   409  0657                     clrloop0:	
   410  0657  0180               	clrf	0	;clear RAM location pointed to by FSR
   411  0658  0A84               	incf	4,f	;increment pointer
   412  0659  0604               	xorwf	4,w	;XOR with final address
   413  065A  1903               	btfsc	3,2	;have we reached the end yet?
   414  065B  3400               	retlw	0	;all done for this memory range, return
   415  065C  0604               	xorwf	4,w	;XOR again to restore value
   416  065D  2E57               	goto	clrloop0	;do the next byte
   417                           
   418                           	psect	cstackCOMMON
   419  0071                     __pcstackCOMMON:	
   420  0071                     ?_init:	
   421  0071                     ?_OperationMode:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0071                     ??_OperationMode:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0071                     ?_TimerCounter:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0071                     ??_TimerCounter:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0071                     ?_tc_int:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0071                     ?_main:	
   437                           ; 1 bytes @ 0x0
   438                           
   439                           
   440                           ; 2 bytes @ 0x0
   441  0071                     	ds	1
   442  0072                     OperationMode@bracketStatus:	
   443                           
   444                           ; 1 bytes @ 0x1
   445  0072                     	ds	2
   446  0074                     TimerCounter@i:	
   447                           
   448                           ; 2 bytes @ 0x3
   449  0074                     	ds	2
   450  0076                     ??_tc_int:	
   451                           
   452                           ; 1 bytes @ 0x5
   453  0076                     	ds	7
   454                           
   455                           	psect	cstackBANK0
   456  006C                     __pcstackBANK0:	
   457  006C                     ??_init:	
   458  006C                     ??_main:	
   459                           ; 1 bytes @ 0x0
   460                           
   461                           
   462                           ; 1 bytes @ 0x0
   463  006C                     	ds	3
   464                           
   465                           	psect	maintext
   466  0667                     __pmaintext:	
   467 ;;
   468 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   469 ;;
   470 ;; *************** function _main *****************
   471 ;; Defined at:
   472 ;;		line 28 in file "main.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;		None
   475 ;; Auto vars:     Size  Location     Type
   476 ;;		None
   477 ;; Return value:  Size  Location     Type
   478 ;;                  2   46[None  ] int 
   479 ;; Registers used:
   480 ;;		wreg, status,2, status,0, pclath, cstack
   481 ;; Tracked objects:
   482 ;;		On entry : B00/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   486 ;;      Params:         0       0       0       0       0
   487 ;;      Locals:         0       0       0       0       0
   488 ;;      Temps:          0       3       0       0       0
   489 ;;      Totals:         0       3       0       0       0
   490 ;;Total ram usage:        3 bytes
   491 ;; Hardware stack levels required when called:    3
   492 ;; This function calls:
   493 ;;		_init
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           
   500                           ;psect for function _main
   501  0667                     _main:	
   502                           
   503                           ;main.c: 31: init();
   504                           
   505                           ;incstack = 0
   506                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   507  0667  120A  118A  26D3  120A  118A  	fcall	_init
   508  066C                     l1613:	
   509                           ;main.c: 34: while(1)
   510                           
   511                           
   512                           ;main.c: 35: {
   513                           ;main.c: 36: _delay((unsigned long)((200)*(4000000/4000.0)));
   514  066C  3002               	movlw	2
   515  066D  1283               	bcf	3,5	;RP0=0, select bank0
   516  066E  1303               	bcf	3,6	;RP1=0, select bank0
   517  066F  00EE               	movwf	??_main+2
   518  0670  3004               	movlw	4
   519  0671  00ED               	movwf	??_main+1
   520  0672  30B9               	movlw	185
   521  0673  00EC               	movwf	??_main
   522  0674                     u1347:	
   523  0674  0BEC               	decfsz	??_main,f
   524  0675  2E74               	goto	u1347
   525  0676  0BED               	decfsz	??_main+1,f
   526  0677  2E74               	goto	u1347
   527  0678  0BEE               	decfsz	??_main+2,f
   528  0679  2E74               	goto	u1347
   529  067A  2E7B               	nop2
   530                           
   531                           ;main.c: 37: RC1 = 1;
   532  067B  1283               	bcf	3,5	;RP0=0, select bank0
   533  067C  1303               	bcf	3,6	;RP1=0, select bank0
   534  067D  1487               	bsf	7,1	;volatile
   535                           
   536                           ;main.c: 38: _delay((unsigned long)((200)*(4000000/4000.0)));
   537  067E  3002               	movlw	2
   538  067F  1283               	bcf	3,5	;RP0=0, select bank0
   539  0680  1303               	bcf	3,6	;RP1=0, select bank0
   540  0681  00EE               	movwf	??_main+2
   541  0682  3004               	movlw	4
   542  0683  00ED               	movwf	??_main+1
   543  0684  30B9               	movlw	185
   544  0685  00EC               	movwf	??_main
   545  0686                     u1357:	
   546  0686  0BEC               	decfsz	??_main,f
   547  0687  2E86               	goto	u1357
   548  0688  0BED               	decfsz	??_main+1,f
   549  0689  2E86               	goto	u1357
   550  068A  0BEE               	decfsz	??_main+2,f
   551  068B  2E86               	goto	u1357
   552  068C  2E8D               	nop2
   553                           
   554                           ;main.c: 39: RC1 = 0;
   555  068D  1283               	bcf	3,5	;RP0=0, select bank0
   556  068E  1303               	bcf	3,6	;RP1=0, select bank0
   557  068F  1087               	bcf	7,1	;volatile
   558  0690  2E6C               	goto	l1613
   559  0691                     __end_of_main:	
   560                           
   561                           	psect	text1
   562  06D3                     __ptext1:	
   563 ;; *************** function _init *****************
   564 ;; Defined at:
   565 ;;		line 382 in file "functions.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;		None
   568 ;; Auto vars:     Size  Location     Type
   569 ;;		None
   570 ;; Return value:  Size  Location     Type
   571 ;;                  1    wreg      void 
   572 ;; Registers used:
   573 ;;		wreg, status,2, status,0
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   579 ;;      Params:         0       0       0       0       0
   580 ;;      Locals:         0       0       0       0       0
   581 ;;      Temps:          0       0       0       0       0
   582 ;;      Totals:         0       0       0       0       0
   583 ;;Total ram usage:        0 bytes
   584 ;; Hardware stack levels used:    1
   585 ;; Hardware stack levels required when called:    2
   586 ;; This function calls:
   587 ;;		Nothing
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           
   594                           ;psect for function _init
   595  06D3                     _init:	
   596                           
   597                           ;functions.c: 385: OSCCONbits.IRCF2 = 1;
   598                           
   599                           ;incstack = 0
   600                           ; Regs used in _init: [wreg+status,2+status,0]
   601  06D3  1683               	bsf	3,5	;RP0=1, select bank1
   602  06D4  1303               	bcf	3,6	;RP1=0, select bank1
   603  06D5  170F               	bsf	15,6	;volatile
   604                           
   605                           ;functions.c: 386: OSCCONbits.IRCF1 = 1;
   606  06D6  168F               	bsf	15,5	;volatile
   607                           
   608                           ;functions.c: 387: OSCCONbits.IRCF0 = 0;
   609  06D7  120F               	bcf	15,4	;volatile
   610                           
   611                           ;functions.c: 388: OSCCONbits.SCS = 1;
   612  06D8  140F               	bsf	15,0	;volatile
   613                           
   614                           ;functions.c: 391: PORTA = 0x00;
   615  06D9  1283               	bcf	3,5	;RP0=0, select bank0
   616  06DA  1303               	bcf	3,6	;RP1=0, select bank0
   617  06DB  0185               	clrf	5	;volatile
   618                           
   619                           ;functions.c: 392: PORTB = 0x00;
   620  06DC  0186               	clrf	6	;volatile
   621                           
   622                           ;functions.c: 393: PORTC = 0x00;
   623  06DD  0187               	clrf	7	;volatile
   624                           
   625                           ;functions.c: 394: PORTD = 0x00;
   626  06DE  0188               	clrf	8	;volatile
   627                           
   628                           ;functions.c: 395: PORTE = 0x00;
   629  06DF  0189               	clrf	9	;volatile
   630                           
   631                           ;functions.c: 401: TRISB = 0b11111111;
   632  06E0  30FF               	movlw	255
   633  06E1  1683               	bsf	3,5	;RP0=1, select bank1
   634  06E2  1303               	bcf	3,6	;RP1=0, select bank1
   635  06E3  0086               	movwf	6	;volatile
   636                           
   637                           ;functions.c: 402: TRISC = 0x00;
   638  06E4  0187               	clrf	7	;volatile
   639                           
   640                           ;functions.c: 403: ANSEL = 0b00000000;
   641  06E5  1683               	bsf	3,5	;RP0=1, select bank3
   642  06E6  1703               	bsf	3,6	;RP1=1, select bank3
   643  06E7  0188               	clrf	8	;volatile
   644                           
   645                           ;functions.c: 404: ANSELH = 0b00000000;
   646  06E8  0189               	clrf	9	;volatile
   647                           
   648                           ;functions.c: 406: OPTION_REGbits.nRBPU = 0;
   649  06E9  1683               	bsf	3,5	;RP0=1, select bank1
   650  06EA  1303               	bcf	3,6	;RP1=0, select bank1
   651  06EB  1381               	bcf	1,7	;volatile
   652                           
   653                           ;functions.c: 407: WPUBbits.WPUB0 = 0;
   654  06EC  1015               	bcf	21,0	;volatile
   655  06ED                     l315:	
   656                           ;functions.c: 408: while(!RB0);
   657                           
   658  06ED  1283               	bcf	3,5	;RP0=0, select bank0
   659  06EE  1C06               	btfss	6,0	;volatile
   660  06EF  2EED               	goto	l315
   661                           
   662                           ;functions.c: 436: SSPCONbits.SSPM=0x00;
   663  06F0  30F0               	movlw	-16
   664  06F1  0594               	andwf	20,f	;volatile
   665                           
   666                           ;functions.c: 437: SSPCONbits.CKP=0;
   667  06F2  1214               	bcf	20,4	;volatile
   668                           
   669                           ;functions.c: 438: SSPSTATbits.CKE=1;
   670  06F3  1683               	bsf	3,5	;RP0=1, select bank1
   671  06F4  1303               	bcf	3,6	;RP1=0, select bank1
   672  06F5  1714               	bsf	20,6	;volatile
   673                           
   674                           ;functions.c: 439: SSPSTATbits.SMP=0;
   675  06F6  1394               	bcf	20,7	;volatile
   676                           
   677                           ;functions.c: 440: SSPCONbits.SSPEN=0x01;
   678  06F7  1283               	bcf	3,5	;RP0=0, select bank0
   679  06F8  1303               	bcf	3,6	;RP1=0, select bank0
   680  06F9  1694               	bsf	20,5	;volatile
   681                           
   682                           ;functions.c: 441: SSPIE = 0;
   683  06FA  1683               	bsf	3,5	;RP0=1, select bank1
   684  06FB  1303               	bcf	3,6	;RP1=0, select bank1
   685  06FC  118C               	bcf	12,3	;volatile
   686                           
   687                           ;functions.c: 444: RA5 = 1;
   688  06FD  1283               	bcf	3,5	;RP0=0, select bank0
   689  06FE  1303               	bcf	3,6	;RP1=0, select bank0
   690  06FF  1685               	bsf	5,5	;volatile
   691                           
   692                           ;functions.c: 445: RA4 = 1;
   693  0700  1605               	bsf	5,4	;volatile
   694                           
   695                           ;functions.c: 446: RD4 = 1;
   696  0701  1608               	bsf	8,4	;volatile
   697                           
   698                           ;functions.c: 447: RD3 = 1;
   699  0702  1588               	bsf	8,3	;volatile
   700                           
   701                           ;functions.c: 451: INTCONbits.RBIE = 1;
   702  0703  158B               	bsf	11,3	;volatile
   703                           
   704                           ;functions.c: 452: INTCONbits.PEIE = 1;
   705  0704  170B               	bsf	11,6	;volatile
   706                           
   707                           ;functions.c: 453: PIE1bits.TMR1IE = 1;
   708  0705  1683               	bsf	3,5	;RP0=1, select bank1
   709  0706  1303               	bcf	3,6	;RP1=0, select bank1
   710  0707  140C               	bsf	12,0	;volatile
   711                           
   712                           ;functions.c: 455: IOCBbits.IOCB5 = 1;
   713  0708  1696               	bsf	22,5	;volatile
   714                           
   715                           ;functions.c: 458: T1CON = 0b00110000;
   716  0709  3030               	movlw	48
   717  070A  1283               	bcf	3,5	;RP0=0, select bank0
   718  070B  1303               	bcf	3,6	;RP1=0, select bank0
   719  070C  0090               	movwf	16	;volatile
   720                           
   721                           ;functions.c: 459: TMR1H = 0x0B;
   722  070D  300B               	movlw	11
   723  070E  008F               	movwf	15	;volatile
   724                           
   725                           ;functions.c: 460: TMR1L = 0xDB;
   726  070F  30DB               	movlw	219
   727  0710  008E               	movwf	14	;volatile
   728                           
   729                           ;functions.c: 461: T1CONbits.TMR1ON = 1;
   730  0711  1410               	bsf	16,0	;volatile
   731                           
   732                           ;functions.c: 464: ADCON0bits.ADCS0 = 0;
   733  0712  131F               	bcf	31,6	;volatile
   734                           
   735                           ;functions.c: 465: ADCON0bits.ADCS1 = 0;
   736  0713  139F               	bcf	31,7	;volatile
   737                           
   738                           ;functions.c: 466: ADCON1bits.ADFM = 0;
   739  0714  1683               	bsf	3,5	;RP0=1, select bank1
   740  0715  1303               	bcf	3,6	;RP1=0, select bank1
   741  0716  139F               	bcf	31,7	;volatile
   742                           
   743                           ;functions.c: 467: ADCON1bits.VCFG1 = 0;
   744  0717  129F               	bcf	31,5	;volatile
   745                           
   746                           ;functions.c: 468: ADCON1bits.VCFG0 = 0;
   747  0718  121F               	bcf	31,4	;volatile
   748                           
   749                           ;functions.c: 471: intSecondCounter = 0;
   750  0719  1283               	bcf	3,5	;RP0=0, select bank0
   751  071A  1303               	bcf	3,6	;RP1=0, select bank0
   752  071B  01E5               	clrf	_intSecondCounter
   753  071C  01E6               	clrf	_intSecondCounter+1
   754                           
   755                           ;functions.c: 472: intHalfSecondCounter = 0;
   756  071D  01E1               	clrf	_intHalfSecondCounter
   757  071E  01E2               	clrf	_intHalfSecondCounter+1
   758                           
   759                           ;functions.c: 473: intMinuteCounter = 0;
   760  071F  01E3               	clrf	_intMinuteCounter
   761  0720  01E4               	clrf	_intMinuteCounter+1
   762  0721  0008               	return
   763  0722                     __end_of_init:	
   764                           
   765                           	psect	text2
   766  0722                     __ptext2:	
   767 ;; *************** function _tc_int *****************
   768 ;; Defined at:
   769 ;;		line 793 in file "functions.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   783 ;;      Params:         0       0       0       0       0
   784 ;;      Locals:         0       0       0       0       0
   785 ;;      Temps:          7       0       0       0       0
   786 ;;      Totals:         7       0       0       0       0
   787 ;;Total ram usage:        7 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    1
   790 ;; This function calls:
   791 ;;		_OperationMode
   792 ;;		_TimerCounter
   793 ;; This function is called by:
   794 ;;		Interrupt level 1
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _tc_int
   800  0722                     _tc_int:	
   801                           
   802                           ;functions.c: 796: if((RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2)){
   803  0722  1A86               	btfsc	6,5	;volatile
   804  0723  2F3A               	goto	i1l1959
   805  0724  085D               	movf	_intBlinkCycle,w
   806  0725  045E               	iorwf	_intBlinkCycle+1,w
   807  0726  1D03               	btfss	3,2
   808  0727  2F3A               	goto	i1l1959
   809  0728  120A  118A  265E  120A  118A  	fcall	_OperationMode
   810  072D  00F6               	movwf	??_tc_int
   811  072E  3002               	movlw	2
   812  072F  0276               	subwf	??_tc_int,w
   813  0730  1803               	skipnc
   814  0731  2F3A               	goto	i1l1959
   815                           
   816                           ;functions.c: 797: intBlinkCycle = 1;
   817  0732  3001               	movlw	1
   818  0733  1283               	bcf	3,5	;RP0=0, select bank0
   819  0734  1303               	bcf	3,6	;RP1=0, select bank0
   820  0735  00DD               	movwf	_intBlinkCycle
   821  0736  3000               	movlw	0
   822  0737  00DE               	movwf	_intBlinkCycle+1
   823                           
   824                           ;functions.c: 798: intBlinkCounter = 0;
   825  0738  01DB               	clrf	_intBlinkCounter
   826  0739  01DC               	clrf	_intBlinkCounter+1
   827  073A                     i1l1959:	
   828                           
   829                           ;functions.c: 800: }
   830                           ;functions.c: 801: if(TMR1IF ==1){
   831  073A  1283               	bcf	3,5	;RP0=0, select bank0
   832  073B  1303               	bcf	3,6	;RP1=0, select bank0
   833  073C  1C0C               	btfss	12,0	;volatile
   834  073D  2FD5               	goto	L1
   835                           
   836                           ;functions.c: 802: TMR1ON = 0;
   837  073E  1010               	bcf	16,0	;volatile
   838                           
   839                           ;functions.c: 803: TMR1H = 0x0B;
   840  073F  300B               	movlw	11
   841  0740  008F               	movwf	15	;volatile
   842                           
   843                           ;functions.c: 804: TMR1L = 0xDB;
   844  0741  30DB               	movlw	219
   845  0742  008E               	movwf	14	;volatile
   846                           
   847                           ;functions.c: 806: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
   848  0743  035D               	decf	_intBlinkCycle,w
   849  0744  045E               	iorwf	_intBlinkCycle+1,w
   850  0745  1D03               	btfss	3,2
   851  0746  2F69               	goto	i1l1977
   852  0747  086A               	movf	_intNumberOfBlinks+1,w
   853  0748  00F7               	movwf	??_tc_int+1
   854  0749  0869               	movf	_intNumberOfBlinks,w
   855  074A  00F6               	movwf	??_tc_int
   856  074B  1003               	clrc
   857  074C  0DF6               	rlf	??_tc_int,f
   858  074D  0DF7               	rlf	??_tc_int+1,f
   859  074E  085C               	movf	_intBlinkCounter+1,w
   860  074F  3A80               	xorlw	128
   861  0750  00F8               	movwf	??_tc_int+2
   862  0751  0877               	movf	??_tc_int+1,w
   863  0752  3A80               	xorlw	128
   864  0753  0278               	subwf	??_tc_int+2,w
   865  0754  1D03               	skipz
   866  0755  2F58               	goto	u126_25
   867  0756  0876               	movf	??_tc_int,w
   868  0757  025B               	subwf	_intBlinkCounter,w
   869  0758                     u126_25:	
   870  0758  1803               	skipnc
   871  0759  2F69               	goto	i1l1977
   872                           
   873                           ;functions.c: 807: intBlinkCounter++;
   874  075A  3001               	movlw	1
   875  075B  1283               	bcf	3,5	;RP0=0, select bank0
   876  075C  1303               	bcf	3,6	;RP1=0, select bank0
   877  075D  07DB               	addwf	_intBlinkCounter,f
   878  075E  1803               	skipnc
   879  075F  0ADC               	incf	_intBlinkCounter+1,f
   880  0760  3000               	movlw	0
   881  0761  07DC               	addwf	_intBlinkCounter+1,f
   882                           
   883                           ;functions.c: 809: if(RC1 == 0)
   884  0762  1887               	btfsc	7,1	;volatile
   885  0763  2F66               	goto	i1l380
   886                           
   887                           ;functions.c: 810: RC1 = 1;
   888  0764  1487               	bsf	7,1	;volatile
   889  0765  2F87               	goto	i1l1985
   890  0766                     i1l380:	
   891                           
   892                           ;functions.c: 811: else if(RC1 == 1)
   893  0766  1C87               	btfss	7,1	;volatile
   894  0767  2F87               	goto	i1l1985
   895  0768  2F86               	goto	i1l1983
   896  0769                     i1l1977:	
   897                           ;functions.c: 813: }
   898                           
   899                           ;functions.c: 812: RC1 = 0;
   900                           
   901                           
   902                           ;functions.c: 815: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
   903  0769  1283               	bcf	3,5	;RP0=0, select bank0
   904  076A  1303               	bcf	3,6	;RP1=0, select bank0
   905  076B  035D               	decf	_intBlinkCycle,w
   906  076C  045E               	iorwf	_intBlinkCycle+1,w
   907  076D  1D03               	btfss	3,2
   908  076E  2F87               	goto	i1l1985
   909  076F  086A               	movf	_intNumberOfBlinks+1,w
   910  0770  00F7               	movwf	??_tc_int+1
   911  0771  0869               	movf	_intNumberOfBlinks,w
   912  0772  00F6               	movwf	??_tc_int
   913  0773  1003               	clrc
   914  0774  0DF6               	rlf	??_tc_int,f
   915  0775  0DF7               	rlf	??_tc_int+1,f
   916  0776  085C               	movf	_intBlinkCounter+1,w
   917  0777  3A80               	xorlw	128
   918  0778  00F8               	movwf	??_tc_int+2
   919  0779  0877               	movf	??_tc_int+1,w
   920  077A  3A80               	xorlw	128
   921  077B  0278               	subwf	??_tc_int+2,w
   922  077C  1D03               	skipz
   923  077D  2F80               	goto	u130_25
   924  077E  0876               	movf	??_tc_int,w
   925  077F  025B               	subwf	_intBlinkCounter,w
   926  0780                     u130_25:	
   927  0780  1C03               	skipc
   928  0781  2F87               	goto	i1l1985
   929                           
   930                           ;functions.c: 816: intBlinkCycle = 0;
   931  0782  1283               	bcf	3,5	;RP0=0, select bank0
   932  0783  1303               	bcf	3,6	;RP1=0, select bank0
   933  0784  01DD               	clrf	_intBlinkCycle
   934  0785  01DE               	clrf	_intBlinkCycle+1
   935  0786                     i1l1983:	
   936                           
   937                           ;functions.c: 817: RC1 = 0;
   938  0786  1087               	bcf	7,1	;volatile
   939  0787                     i1l1985:	
   940                           
   941                           ;functions.c: 818: }
   942                           ;functions.c: 821: intHalfSecondCounter++;
   943  0787  3001               	movlw	1
   944  0788  1283               	bcf	3,5	;RP0=0, select bank0
   945  0789  1303               	bcf	3,6	;RP1=0, select bank0
   946  078A  07E1               	addwf	_intHalfSecondCounter,f
   947  078B  1803               	skipnc
   948  078C  0AE2               	incf	_intHalfSecondCounter+1,f
   949  078D  3000               	movlw	0
   950  078E  07E2               	addwf	_intHalfSecondCounter+1,f
   951                           
   952                           ;functions.c: 822: if(intHalfSecondCounter>=2)
   953  078F  0862               	movf	_intHalfSecondCounter+1,w
   954  0790  3A80               	xorlw	128
   955  0791  00FF               	movwf	127
   956  0792  3080               	movlw	128
   957  0793  027F               	subwf	127,w
   958  0794  1D03               	skipz
   959  0795  2F98               	goto	u131_25
   960  0796  3002               	movlw	2
   961  0797  0261               	subwf	_intHalfSecondCounter,w
   962  0798                     u131_25:	
   963  0798  1C03               	skipc
   964  0799  2FA9               	goto	i1l1995
   965                           
   966                           ;functions.c: 823: {
   967                           ;functions.c: 824: intHalfSecondCounter = 0;
   968  079A  1283               	bcf	3,5	;RP0=0, select bank0
   969  079B  1303               	bcf	3,6	;RP1=0, select bank0
   970  079C  01E1               	clrf	_intHalfSecondCounter
   971  079D  01E2               	clrf	_intHalfSecondCounter+1
   972                           
   973                           ;functions.c: 825: intSecondCounter++;
   974  079E  3001               	movlw	1
   975  079F  07E5               	addwf	_intSecondCounter,f
   976  07A0  1803               	skipnc
   977  07A1  0AE6               	incf	_intSecondCounter+1,f
   978  07A2  3000               	movlw	0
   979  07A3  07E6               	addwf	_intSecondCounter+1,f
   980                           
   981                           ;functions.c: 826: TimerCounter();
   982  07A4  120A  118A  2691  120A  118A  	fcall	_TimerCounter
   983  07A9                     i1l1995:	
   984                           
   985                           ;functions.c: 827: }
   986                           ;functions.c: 828: if(intSecondCounter >=60)
   987  07A9  1283               	bcf	3,5	;RP0=0, select bank0
   988  07AA  1303               	bcf	3,6	;RP1=0, select bank0
   989  07AB  0866               	movf	_intSecondCounter+1,w
   990  07AC  3A80               	xorlw	128
   991  07AD  00FF               	movwf	127
   992  07AE  3080               	movlw	128
   993  07AF  027F               	subwf	127,w
   994  07B0  1D03               	skipz
   995  07B1  2FB4               	goto	u132_25
   996  07B2  303C               	movlw	60
   997  07B3  0265               	subwf	_intSecondCounter,w
   998  07B4                     u132_25:	
   999  07B4  1C03               	skipc
  1000  07B5  2FC0               	goto	i1l2001
  1001                           
  1002                           ;functions.c: 829: {
  1003                           ;functions.c: 830: intSecondCounter = 0;
  1004  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  1005  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  1006  07B8  01E5               	clrf	_intSecondCounter
  1007  07B9  01E6               	clrf	_intSecondCounter+1
  1008                           
  1009                           ;functions.c: 831: intMinuteCounter++;
  1010  07BA  3001               	movlw	1
  1011  07BB  07E3               	addwf	_intMinuteCounter,f
  1012  07BC  1803               	skipnc
  1013  07BD  0AE4               	incf	_intMinuteCounter+1,f
  1014  07BE  3000               	movlw	0
  1015  07BF  07E4               	addwf	_intMinuteCounter+1,f
  1016  07C0                     i1l2001:	
  1017                           
  1018                           ;functions.c: 832: }
  1019                           ;functions.c: 833: if(intMinuteCounter >= 60)
  1020  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  1021  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  1022  07C2  0864               	movf	_intMinuteCounter+1,w
  1023  07C3  3A80               	xorlw	128
  1024  07C4  00FF               	movwf	127
  1025  07C5  3080               	movlw	128
  1026  07C6  027F               	subwf	127,w
  1027  07C7  1D03               	skipz
  1028  07C8  2FCB               	goto	u133_25
  1029  07C9  303C               	movlw	60
  1030  07CA  0263               	subwf	_intMinuteCounter,w
  1031  07CB                     u133_25:	
  1032  07CB  1C03               	skipc
  1033  07CC  2FD1               	goto	i1l2005
  1034                           
  1035                           ;functions.c: 834: {
  1036                           ;functions.c: 835: intMinuteCounter = 0;
  1037  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  1038  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  1039  07CF  01E3               	clrf	_intMinuteCounter
  1040  07D0  01E4               	clrf	_intMinuteCounter+1
  1041  07D1                     i1l2005:	
  1042                           
  1043                           ;functions.c: 836: }
  1044                           ;functions.c: 839: TMR1ON = 1;
  1045  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  1046  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  1047  07D3  1410               	bsf	16,0	;volatile
  1048                           
  1049                           ;functions.c: 840: }
  1050                           ;functions.c: 841: TMR1IF = 0;
  1051  07D4  100C               	bcf	12,0	;volatile
  1052  07D5                     L1:	
  1053                           
  1054                           ;functions.c: 842: RBIF = 0;
  1055  07D5  100B               	bcf	11,0	;volatile
  1056                           
  1057                           ;functions.c: 843: GIE = 1;
  1058  07D6  178B               	bsf	11,7	;volatile
  1059                           
  1060                           ;functions.c: 844: return;
  1061  07D7  087C               	movf	??_tc_int+6,w
  1062  07D8  00FF               	movwf	127
  1063  07D9  087B               	movf	??_tc_int+5,w
  1064  07DA  008A               	movwf	10
  1065  07DB  087A               	movf	??_tc_int+4,w
  1066  07DC  0084               	movwf	4
  1067  07DD  0E79               	swapf	(??_tc_int+3)^(0+-128),w
  1068  07DE  0083               	movwf	3
  1069  07DF  0EFE               	swapf	126,f
  1070  07E0  0E7E               	swapf	126,w
  1071  07E1  0009               	retfie
  1072  07E2                     __end_of_tc_int:	
  1073                           
  1074                           	psect	intentry
  1075  0004                     __pintentry:	
  1076                           ;incstack = 0
  1077                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1078                           
  1079  0004                     interrupt_function:	
  1080  007E                     saved_w	set	btemp
  1081  0004  00FE               	movwf	btemp
  1082  0005  0E03               	swapf	3,w
  1083  0006  00F9               	movwf	??_tc_int+3
  1084  0007  0804               	movf	4,w
  1085  0008  00FA               	movwf	??_tc_int+4
  1086  0009  080A               	movf	10,w
  1087  000A  00FB               	movwf	??_tc_int+5
  1088  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1089  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1090  000D  087F               	movf	btemp+1,w
  1091  000E  00FC               	movwf	??_tc_int+6
  1092  000F  120A  118A  2F22   	ljmp	_tc_int
  1093                           
  1094                           	psect	text3
  1095  0691                     __ptext3:	
  1096 ;; *************** function _TimerCounter *****************
  1097 ;; Defined at:
  1098 ;;		line 369 in file "functions.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;  i               2    3[COMMON] int 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1112 ;;      Params:         0       0       0       0       0
  1113 ;;      Locals:         2       0       0       0       0
  1114 ;;      Temps:          3       0       0       0       0
  1115 ;;      Totals:         5       0       0       0       0
  1116 ;;Total ram usage:        5 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; This function calls:
  1119 ;;		Nothing
  1120 ;; This function is called by:
  1121 ;;		_tc_int
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           
  1126                           ;psect for function _TimerCounter
  1127  0691                     _TimerCounter:	
  1128                           
  1129                           ;functions.c: 371: for (int i = 0; i < 5; i++)
  1130                           
  1131                           ;incstack = 0
  1132                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  1133  0691  01F4               	clrf	TimerCounter@i
  1134  0692  01F5               	clrf	TimerCounter@i+1
  1135  0693                     L2:	
  1136  0693  0875               	movf	TimerCounter@i+1,w
  1137  0694  3A80               	xorlw	128
  1138  0695  00FF               	movwf	127
  1139  0696  3080               	movlw	128
  1140  0697  027F               	subwf	127,w
  1141  0698  1D03               	skipz
  1142  0699  2E9C               	goto	u74_25
  1143  069A  3005               	movlw	5
  1144  069B  0274               	subwf	TimerCounter@i,w
  1145  069C                     u74_25:	
  1146  069C  1803               	btfsc	3,0
  1147  069D  0008               	return
  1148                           
  1149                           ;functions.c: 372: {
  1150                           ;functions.c: 373: if(intClockTimer[i]>0)
  1151  069E  0874               	movf	TimerCounter@i,w
  1152  069F  00F1               	movwf	??_TimerCounter
  1153  06A0  0771               	addwf	??_TimerCounter,w
  1154  06A1  3E48               	addlw	(low (_intClockTimer| 0))& (0+255)
  1155  06A2  0084               	movwf	4
  1156  06A3  1383               	bcf	3,7	;select IRP bank0
  1157  06A4  0800               	movf	0,w
  1158  06A5  00F2               	movwf	??_TimerCounter+1
  1159  06A6  0A84               	incf	4,f
  1160  06A7  0800               	movf	0,w
  1161  06A8  00F3               	movwf	??_TimerCounter+2
  1162  06A9  0873               	movf	??_TimerCounter+2,w
  1163  06AA  3A80               	xorlw	128
  1164  06AB  00FF               	movwf	127
  1165  06AC  3080               	movlw	128
  1166  06AD  027F               	subwf	127,w
  1167  06AE  1D03               	skipz
  1168  06AF  2EB2               	goto	u75_25
  1169  06B0  3001               	movlw	1
  1170  06B1  0272               	subwf	??_TimerCounter+1,w
  1171  06B2                     u75_25:	
  1172  06B2  1C03               	skipc
  1173  06B3  2EC6               	goto	i1l1595
  1174                           
  1175                           ;functions.c: 374: intClockTimer[i]--;
  1176  06B4  0874               	movf	TimerCounter@i,w
  1177  06B5  00F1               	movwf	??_TimerCounter
  1178  06B6  0771               	addwf	??_TimerCounter,w
  1179  06B7  3E48               	addlw	(low (_intClockTimer| 0))& (0+255)
  1180  06B8  0084               	movwf	4
  1181  06B9  30FF               	movlw	255
  1182  06BA  1383               	bcf	3,7	;select IRP bank0
  1183  06BB  0780               	addwf	0,f
  1184  06BC  0F84               	incfsz	4,f
  1185  06BD  0800               	movf	0,w
  1186  06BE  1803               	skipnc
  1187  06BF  0A00               	incf	0,w
  1188  06C0  00FF               	movwf	127
  1189  06C1  30FF               	movlw	255
  1190  06C2  077F               	addwf	127,w
  1191  06C3  0080               	movwf	0
  1192  06C4  0384               	decf	4,f
  1193  06C5  2ECC               	goto	i1l1597
  1194  06C6                     i1l1595:	
  1195                           
  1196                           ;functions.c: 375: else
  1197                           ;functions.c: 376: bTimerComplete[i] = 1;
  1198  06C6  0874               	movf	TimerCounter@i,w
  1199  06C7  3E52               	addlw	(low (_bTimerComplete| 0))& (0+255)
  1200  06C8  0084               	movwf	4
  1201  06C9  1383               	bcf	3,7	;select IRP bank0
  1202  06CA  0180               	clrf	0
  1203  06CB  0A80               	incf	0,f
  1204  06CC                     i1l1597:	
  1205  06CC  3001               	movlw	1
  1206  06CD  07F4               	addwf	TimerCounter@i,f
  1207  06CE  1803               	skipnc
  1208  06CF  0AF5               	incf	TimerCounter@i+1,f
  1209  06D0  3000               	movlw	0
  1210  06D1  07F5               	addwf	TimerCounter@i+1,f
  1211  06D2  2E93               	goto	L2
  1212  06D3                     __end_of_TimerCounter:	
  1213                           
  1214                           	psect	text4
  1215  065E                     __ptext4:	
  1216 ;; *************** function _OperationMode *****************
  1217 ;; Defined at:
  1218 ;;		line 924 in file "functions.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  bracketStatu    1    1[COMMON] unsigned char 
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      unsigned char 
  1225 ;; Registers used:
  1226 ;;		wreg, status,2
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1232 ;;      Params:         0       0       0       0       0
  1233 ;;      Locals:         1       0       0       0       0
  1234 ;;      Temps:          1       0       0       0       0
  1235 ;;      Totals:         2       0       0       0       0
  1236 ;;Total ram usage:        2 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; This function calls:
  1239 ;;		Nothing
  1240 ;; This function is called by:
  1241 ;;		_tc_int
  1242 ;;		_ReceivedPacketHandler
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           
  1247                           ;psect for function _OperationMode
  1248  065E                     _OperationMode:	
  1249                           
  1250                           ;functions.c: 926: unsigned char bracketStatus;
  1251                           ;functions.c: 927: bracketStatus = ((~PORTB) & 0b00000111) ;
  1252                           
  1253                           ;incstack = 0
  1254                           ; Regs used in _OperationMode: [wreg+status,2]
  1255  065E  1283               	bcf	3,5	;RP0=0, select bank0
  1256  065F  1303               	bcf	3,6	;RP1=0, select bank0
  1257  0660  0906               	comf	6,w	;volatile
  1258  0661  3907               	andlw	7
  1259  0662  00F1               	movwf	??_OperationMode
  1260  0663  0871               	movf	??_OperationMode,w
  1261  0664  00F2               	movwf	OperationMode@bracketStatus
  1262                           
  1263                           ;functions.c: 929: return bracketStatus;
  1264  0665  0872               	movf	OperationMode@bracketStatus,w
  1265  0666  0008               	return
  1266  0667                     __end_of_OperationMode:	
  1267  007E                     btemp	set	126	;btemp
  1268  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    39
    Data        3
    BSS         74
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     12      13
    BANK0            80      3      79
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_TimerCounter

Critical Paths under _main in BANK0

    None.

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              0 BANK0      3     3      0
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _tc_int                                               7     7      0     135
                                              5 COMMON     7     7      0
                      _OperationMode
                       _TimerCounter
 ---------------------------------------------------------------------------------
 (3) _TimerCounter                                         5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init

 _tc_int (ROOT)
   _OperationMode
   _TimerCounter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0       0       9        0.0%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      3      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      C       D       1      100.0%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5C      12        0.0%
ABS                  0      0      5C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Jan 05 21:14:56 2017

                __CFG_CP$ON 0000                           pc 0002       _bTransiverModeReceive 0068  
               _SSPSTATbits 0094                          _RD 0C60                 __CFG_CPD$ON 0000  
                        _WR 0C61                          fsr 0004                         l315 06ED  
                       _GIE 005F                         _RA1 0029                         _RB0 0030  
                       _RC0 0038                         _RA4 002C                         _RC1 0039  
                       _RB3 0033                         _RA5 002D                         _RC2 003A  
                       _RB4 0034                         _RB5 0035                         _RD3 0043  
                       _RD4 0044                         fsr0 0004                         indf 0000  
              __CFG_LVP$OFF 0000                        l1613 066C                        u1347 0674  
                      u1357 0686                        _RBIF 0058                        _main 0667  
                      _init 06D3                        btemp 007E                        start 0012  
             __CFG_IESO$OFF 0000                       ?_main 0071                       ?_init 0071  
                     _EEADR 010D               __CFG_WDTE$OFF 0000                       _ANSEL 0188  
     __end_of_OperationMode 0667                       _T1CON 0010              __CFG_DEBUG$OFF 0000  
                     i1l380 0766                       _TMR1H 000F                       _TMR1L 000E  
                     _PORTA 0005                       _PORTB 0006                       _PORTC 0007  
                     _PORTD 0008                       _PORTE 0009                       _TRISB 0086  
                     _TRISC 0087                       _SSPIE 0463                       u74_25 069C  
                     u75_25 06B2                       _bDark 007D              __CFG_FCMEN$OFF 0000  
            __CFG_BOREN$OFF 0000                       pclath 000A                       status 0003  
             _intBlinkCycle 005D                       wtemp0 007E            __end_of_ChannelP 0028  
          __end_of_ChannelR 0035            __end_of_ChannelS 0042              __CFG_MCLRE$OFF 0000  
             _intClockTimer 0048           _intNumberOfBlinks 0069             __initialization 07E2  
              __end_of_main 0691                __end_of_init 0722                      ??_main 006C  
                    ??_init 006C                      _ADRESH 001E                      _EEDATA 010C  
                    _EECON1 018C                      _ANSELH 0189                      i1l2001 07C0  
                    i1l2005 07D1                      i1l1595 06C6                      i1l1597 06CC  
                    u130_25 0780                      u131_25 0798                      i1l1983 0786  
                    i1l1959 073A                      i1l1985 0787                      i1l1977 0769  
                    i1l1995 07A9                      u132_25 07B4                      u133_25 07CB  
                    u126_25 0758                      _TMR1IF 0060                      _TMR1ON 0080  
                    _SSPBUF 0013              __CFG_PWRTE$OFF 0000                      _tc_int 0722  
                    saved_w 007E     __end_of__initialization 07FC               _bChannelFound 0067  
            __pcstackCOMMON 0071                __pidataBANK0 0653                _channelFound 0059  
            _OPTION_REGbits 0081                  __pbssBANK0 0020                  __pmaintext 0667  
                __pintentry 0004                     ?_tc_int 0071               ?_TimerCounter 0071  
                __stringtab 0015  OperationMode@bracketStatus 0072             __size_of_tc_int 00C0  
                   __ptext1 06D3                     __ptext2 0722                     __ptext3 0691  
                   __ptext4 065E                   _T1CONbits 0010              ??_TimerCounter 0071  
                   clrloop0 0657        end_of_initialization 07FC      __size_of_OperationMode 0009  
           _intBlinkCounter 005B              __end_of_tc_int 07E2               _OperationMode 065E  
       start_initialization 07E2       _intDarkCheckIntervall 005F    __CFG_FOSC$INTRC_NOCLKOUT 0000  
      __end_of_TimerCounter 06D3               TimerCounter@i 0074                 __pdataBANK0 0069  
                  ??_tc_int 0076              ?_OperationMode 0071                 __pbssCOMMON 007D  
                 ___latbits 0002               __pcstackBANK0 006C                _ReceivedData 0020  
                 __pstrings 0015           interrupt_function 0004                    _IOCBbits 0096  
                 clear_ram0 0656                    _PIE1bits 008C                    _PIR1bits 000C  
           ??_OperationMode 0071                  _ADCON0bits 001F                 __stringbase 001A  
                _ADCON1bits 009F                    _WPUBbits 0095                    _ChannelP 001B  
                  _ChannelR 0028                    _ChannelS 0035       __size_of_TimerCounter 0042  
            _bTimerComplete 0052            _intMinuteCounter 0063          __end_of__stringtab 001B  
          _intSecondCounter 0065                _TimerCounter 0691               __size_of_main 002A  
             __size_of_init 004F               _bValueFromPot 006B        _intHalfSecondCounter 0061  
                _INTCONbits 000B                    intlevel1 0000                   stringcode 0015  
                _OSCCONbits 008F                    stringdir 0015                    stringtab 0015  
                _SSPCONbits 0014        _addressDarknessValue 0057  
