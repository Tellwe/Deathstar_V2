

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 29 13:29:50 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	intentry,global,class=CODE,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	dabs	1,0x7E,2
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  008F                     	;# 
   101  0090                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0094                     	;# 
   108  0095                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  0105                     	;# 
   120  0107                     	;# 
   121  0108                     	;# 
   122  0109                     	;# 
   123  010C                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  010F                     	;# 
   128  0185                     	;# 
   129  0187                     	;# 
   130  0188                     	;# 
   131  0189                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0089                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  008F                     	;# 
   177  0090                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  0105                     	;# 
   196  0107                     	;# 
   197  0108                     	;# 
   198  0109                     	;# 
   199  010C                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  010F                     	;# 
   204  0185                     	;# 
   205  0187                     	;# 
   206  0188                     	;# 
   207  0189                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210                           
   211                           	psect	idataBANK0
   212  07FF                     __pidataBANK0:	
   213                           
   214                           ;initializer for _bValueFromPot
   215  07FF  3401               	retlw	1
   216                           
   217                           	psect	idataBANK1
   218  0C1B                     __pidataBANK1:	
   219                           
   220                           ;initializer for _intNumberOfBlinks
   221  0C1B  3458               	retlw	88
   222  0C1C  3402               	retlw	2
   223                           
   224                           	psect	strings
   225  0600                     __pstrings:	
   226  0600                     stringtab:	
   227  0600                     __stringtab:	
   228                           
   229                           ;	String table - string pointers are 1 byte each
   230  0600  1BFF               	btfsc	btemp+1,7
   231  0601  2E0A               	ljmp	stringcode
   232  0602  1383               	bcf	3,7
   233  0603  187F               	btfsc	btemp+1,0
   234  0604  1783               	bsf	3,7
   235  0605  0800               	movf	0,w
   236  0606  0A84               	incf	4,f
   237  0607  1903               	skipnz
   238  0608  0AFF               	incf	btemp+1,f
   239  0609  0008               	return
   240  060A                     stringcode:	
   241  060A                     stringdir:	
   242  060A  3006               	movlw	high stringdir
   243  060B  008A               	movwf	10
   244  060C  0804               	movf	4,w
   245  060D  0A84               	incf	4,f
   246  060E  0782               	addwf	2,f
   247  060F                     __stringbase:	
   248  060F  3400               	retlw	0
   249  0610                     __end_of__stringtab:	
   250  0610                     _ChannelP:	
   251  0610  343F               	retlw	63
   252  0611  3447               	retlw	71
   253  0612  344F               	retlw	79
   254  0613  3457               	retlw	87
   255  0614  345F               	retlw	95
   256  0615  3477               	retlw	119
   257  0616  347E               	retlw	126
   258  0617  347F               	retlw	127
   259  0618  3486               	retlw	134
   260  0619  3487               	retlw	135
   261  061A  3437               	retlw	55
   262  061B  3467               	retlw	103
   263  061C  346F               	retlw	111
   264  061D                     __end_of_ChannelP:	
   265  061D                     _ChannelR:	
   266  061D  344F               	retlw	79
   267  061E  3459               	retlw	89
   268  061F  3463               	retlw	99
   269  0620  346D               	retlw	109
   270  0621  3477               	retlw	119
   271  0622  3495               	retlw	149
   272  0623  349F               	retlw	159
   273  0624  349F               	retlw	159
   274  0625  34A9               	retlw	169
   275  0626  34A9               	retlw	169
   276  0627  3445               	retlw	69
   277  0628  3481               	retlw	129
   278  0629  348B               	retlw	139
   279  062A                     __end_of_ChannelR:	
   280  062A                     _ChannelS:	
   281  062A  3418               	retlw	24
   282  062B  341B               	retlw	27
   283  062C  341E               	retlw	30
   284  062D  3421               	retlw	33
   285  062E  3424               	retlw	36
   286  062F  342D               	retlw	45
   287  0630  347B               	retlw	123
   288  0631  3430               	retlw	48
   289  0632  347E               	retlw	126
   290  0633  3433               	retlw	51
   291  0634  3415               	retlw	21
   292  0635  3427               	retlw	39
   293  0636  342A               	retlw	42
   294  0637                     __end_of_ChannelS:	
   295  001F                     _ADCON0bits	set	31
   296  001E                     _ADRESH	set	30
   297  000B                     _INTCONbits	set	11
   298  000C                     _PIR1bits	set	12
   299  0005                     _PORTA	set	5
   300  0005                     _PORTAbits	set	5
   301  0006                     _PORTB	set	6
   302  0006                     _PORTBbits	set	6
   303  0007                     _PORTC	set	7
   304  0007                     _PORTCbits	set	7
   305  0013                     _SSPBUF	set	19
   306  0014                     _SSPCONbits	set	20
   307  0010                     _T1CON	set	16
   308  0010                     _T1CONbits	set	16
   309  000F                     _TMR1H	set	15
   310  000E                     _TMR1L	set	14
   311  0018                     _CARRY	set	24
   312  005F                     _GIE	set	95
   313  0058                     _RBIF	set	88
   314  0060                     _TMR1IF	set	96
   315  0080                     _TMR1ON	set	128
   316  009F                     _ADCON1bits	set	159
   317  0096                     _IOCBbits	set	150
   318  0081                     _OPTION_REGbits	set	129
   319  008F                     _OSCCONbits	set	143
   320  008C                     _PIE1bits	set	140
   321  0094                     _SSPSTATbits	set	148
   322  0085                     _TRISA	set	133
   323  0086                     _TRISB	set	134
   324  0087                     _TRISC	set	135
   325  0095                     _WPUBbits	set	149
   326  0463                     _SSPIE	set	1123
   327  010D                     _EEADR	set	269
   328  010C                     _EEDATA	set	268
   329  0188                     _ANSEL	set	392
   330  0189                     _ANSELH	set	393
   331  0188                     _ANSELbits	set	392
   332  018C                     _EECON1	set	396
   333  018D                     _EECON2	set	397
   334  0C60                     _RD	set	3168
   335  0C61                     _WR	set	3169
   336  0C62                     _WREN	set	3170
   337  0637                     STR_9:	
   338  0637  344E               	retlw	78	;'N'
   339  0638  346F               	retlw	111	;'o'
   340  0639  3474               	retlw	116	;'t'
   341  063A  3420               	retlw	32	;' '
   342  063B  3444               	retlw	68	;'D'
   343  063C  3461               	retlw	97	;'a'
   344  063D  3472               	retlw	114	;'r'
   345  063E  346B               	retlw	107	;'k'
   346  063F  3420               	retlw	32	;' '
   347  0640  3420               	retlw	32	;' '
   348  0641  3420               	retlw	32	;' '
   349  0642  3420               	retlw	32	;' '
   350  0643  3420               	retlw	32	;' '
   351  0644  3400               	retlw	0
   352  0645                     STR_8:	
   353  0645  3449               	retlw	73	;'I'
   354  0646  3474               	retlw	116	;'t'
   355  0647  3427               	retlw	39	;'''
   356  0648  3473               	retlw	115	;'s'
   357  0649  3420               	retlw	32	;' '
   358  064A  3444               	retlw	68	;'D'
   359  064B  3461               	retlw	97	;'a'
   360  064C  3472               	retlw	114	;'r'
   361  064D  346B               	retlw	107	;'k'
   362  064E  3420               	retlw	32	;' '
   363  064F  3420               	retlw	32	;' '
   364  0650  3420               	retlw	32	;' '
   365  0651  3420               	retlw	32	;' '
   366  0652  3400               	retlw	0
   367  0653                     STR_7:	
   368  0653  3444               	retlw	68	;'D'
   369  0654  3441               	retlw	65	;'A'
   370  0655  3452               	retlw	82	;'R'
   371  0656  344B               	retlw	75	;'K'
   372  0657  3443               	retlw	67	;'C'
   373  0658  3441               	retlw	65	;'A'
   374  0659  344C               	retlw	76	;'L'
   375  065A  3443               	retlw	67	;'C'
   376  065B  3400               	retlw	0
   377  065C                     STR_13:	
   378  065C  3443               	retlw	67	;'C'
   379  065D  3448               	retlw	72	;'H'
   380  065E  3453               	retlw	83	;'S'
   381  065F  3454               	retlw	84	;'T'
   382  0660  3441               	retlw	65	;'A'
   383  0661  3454               	retlw	84	;'T'
   384  0662  3445               	retlw	69	;'E'
   385  0663  3400               	retlw	0
   386  0664                     STR_1:	
   387  0664  344E               	retlw	78	;'N'
   388  0665  3431               	retlw	49	;'1'
   389  0666  3442               	retlw	66	;'B'
   390  0667  344C               	retlw	76	;'L'
   391  0668  3449               	retlw	73	;'I'
   392  0669  344E               	retlw	78	;'N'
   393  066A  344B               	retlw	75	;'K'
   394  066B  3400               	retlw	0
   395  066C                     STR_2:	
   396  066C  344E               	retlw	78	;'N'
   397  066D  3432               	retlw	50	;'2'
   398  066E  3442               	retlw	66	;'B'
   399  066F  344C               	retlw	76	;'L'
   400  0670  3449               	retlw	73	;'I'
   401  0671  344E               	retlw	78	;'N'
   402  0672  344B               	retlw	75	;'K'
   403  0673  3400               	retlw	0
   404  0674                     STR_5:	
   405  0674  3453               	retlw	83	;'S'
   406  0675  3445               	retlw	69	;'E'
   407  0676  344E               	retlw	78	;'N'
   408  0677  3453               	retlw	83	;'S'
   409  0678  3456               	retlw	86	;'V'
   410  0679  3441               	retlw	65	;'A'
   411  067A  344C               	retlw	76	;'L'
   412  067B  3400               	retlw	0
   413  067C                     STR_10:	
   414  067C  3453               	retlw	83	;'S'
   415  067D  3454               	retlw	84	;'T'
   416  067E  3441               	retlw	65	;'A'
   417  067F  3454               	retlw	84	;'T'
   418  0680  3445               	retlw	69	;'E'
   419  0681  343F               	retlw	63	;'?'
   420  0682  3400               	retlw	0
   421  0683                     STR_4:	
   422  0683  3446               	retlw	70	;'F'
   423  0684  344C               	retlw	76	;'L'
   424  0685  3441               	retlw	65	;'A'
   425  0686  3453               	retlw	83	;'S'
   426  0687  3448               	retlw	72	;'H'
   427  0688  3442               	retlw	66	;'B'
   428  0689  3400               	retlw	0
   429  068A                     STR_6:	
   430  068A  3450               	retlw	80	;'P'
   431  068B  344F               	retlw	79	;'O'
   432  068C  3454               	retlw	84	;'T'
   433  068D  3456               	retlw	86	;'V'
   434  068E  3441               	retlw	65	;'A'
   435  068F  344C               	retlw	76	;'L'
   436  0690  3400               	retlw	0
   437  0691                     STR_3:	
   438  0691  3446               	retlw	70	;'F'
   439  0692  344C               	retlw	76	;'L'
   440  0693  3441               	retlw	65	;'A'
   441  0694  3453               	retlw	83	;'S'
   442  0695  3448               	retlw	72	;'H'
   443  0696  344C               	retlw	76	;'L'
   444  0697  3400               	retlw	0
   445  0698                     STR_15:	
   446  0698  3453               	retlw	83	;'S'
   447  0699  3445               	retlw	69	;'E'
   448  069A  3454               	retlw	84	;'T'
   449  069B  3444               	retlw	68	;'D'
   450  069C  3456               	retlw	86	;'V'
   451  069D  3400               	retlw	0
   452  069E                     STR_14:	
   453  069E  3452               	retlw	82	;'R'
   454  069F  344D               	retlw	77	;'M'
   455  06A0  3444               	retlw	68	;'D'
   456  06A1  3456               	retlw	86	;'V'
   457  06A2  3400               	retlw	0
   458  06A3                     STR_12:	
   459  06A3  3450               	retlw	80	;'P'
   460  06A4  3449               	retlw	73	;'I'
   461  06A5  3443               	retlw	67	;'C'
   462  06A6  3400               	retlw	0
   463  06A7                     STR_11:	
   464  06A7  3450               	retlw	80	;'P'
   465  06A8  346F               	retlw	111	;'o'
   466  06A9  3474               	retlw	116	;'t'
   467  06AA  3400               	retlw	0
   468  0664                     
   469                           ; #config settings
   470  0000                     
   471                           	psect	cinit
   472  0015                     start_initialization:	
   473  0015                     __initialization:	
   474                           
   475                           ; Initialize objects allocated to BANK1
   476  0015  1683               	bsf	3,5	;RP0=1, select bank1
   477  0016  1303               	bcf	3,6	;RP1=0, select bank1
   478  0017  120A  158A  241B  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   479  001C  00D7               	movwf	__pdataBANK1& (0+127)
   480  001D  120A  158A  241C  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   481  0022  00D8               	movwf	(__pdataBANK1+1)& (0+127)
   482                           
   483                           ; Initialize objects allocated to BANK0
   484  0023  1283               	bcf	3,5	;RP0=0, select bank0
   485  0024  1303               	bcf	3,6	;RP1=0, select bank0
   486  0025  120A  118A  27FF  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   487  002A  00EF               	movwf	__pdataBANK0& (0+127)
   488                           
   489                           ; Clear objects allocated to BANK3
   490  002B  1783               	bsf	3,7	;select IRP bank2
   491  002C  3090               	movlw	low __pbssBANK3
   492  002D  0084               	movwf	4
   493  002E  30B8               	movlw	low (__pbssBANK3+40)
   494  002F  120A  158A  2425  120A  118A  	fcall	clear_ram0
   495                           
   496                           ; Clear objects allocated to BANK1
   497  0034  1383               	bcf	3,7	;select IRP bank0
   498  0035  30A0               	movlw	low __pbssBANK1
   499  0036  0084               	movwf	4
   500  0037  30D7               	movlw	low (__pbssBANK1+55)
   501  0038  120A  158A  2425   	fcall	clear_ram0
   502                           
   503                           ; Clear objects allocated to BANK0
   504  003B  01E8               	clrf	__pbssBANK0& (0+127)
   505  003C  01E9               	clrf	(__pbssBANK0+1)& (0+127)
   506  003D  01EA               	clrf	(__pbssBANK0+2)& (0+127)
   507  003E  01EB               	clrf	(__pbssBANK0+3)& (0+127)
   508  003F  01EC               	clrf	(__pbssBANK0+4)& (0+127)
   509  0040  01ED               	clrf	(__pbssBANK0+5)& (0+127)
   510  0041  01EE               	clrf	(__pbssBANK0+6)& (0+127)
   511                           
   512                           ; Clear objects allocated to COMMON
   513  0042  01FC               	clrf	__pbssCOMMON& (0+127)
   514  0043  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   515  0044                     end_of_initialization:	
   516                           ;End of C runtime variable initialization code
   517                           
   518  0044                     __end_of__initialization:	
   519  0044  0183               	clrf	3
   520  0045  120A  118A  2F1C   	ljmp	_main	;jump to C main() function
   521                           
   522                           	psect	bssCOMMON
   523  007C                     __pbssCOMMON:	
   524  007C                     _addressDarknessValue:	
   525  007C                     	ds	2
   526                           
   527                           	psect	bssBANK0
   528  0068                     __pbssBANK0:	
   529  0068                     _intBlinkCycle:	
   530  0068                     	ds	2
   531  006A                     _intSecondCounter:	
   532  006A                     	ds	2
   533  006C                     _bChannelFound:	
   534  006C                     	ds	1
   535  006D                     _bDark:	
   536  006D                     	ds	1
   537  006E                     _bTransiverModeReceive:	
   538  006E                     	ds	1
   539                           
   540                           	psect	dataBANK0
   541  006F                     __pdataBANK0:	
   542  006F                     _bValueFromPot:	
   543  006F                     	ds	1
   544                           
   545                           	psect	bssBANK1
   546  00A0                     __pbssBANK1:	
   547  00A0                     _intClockTimer:	
   548  00A0                     	ds	10
   549  00AA                     _bTimerComplete:	
   550  00AA                     	ds	5
   551  00AF                     _channelFound:	
   552  00AF                     	ds	2
   553  00B1                     _intBlinkCounter:	
   554  00B1                     	ds	2
   555  00B3                     _intDarkCheckIntervall:	
   556  00B3                     	ds	2
   557  00B5                     _intHalfSecondCounter:	
   558  00B5                     	ds	2
   559  00B7                     _intMinuteCounter:	
   560  00B7                     	ds	2
   561  00B9                     _TransmittedString:	
   562  00B9                     	ds	30
   563                           
   564                           	psect	dataBANK1
   565  00D7                     __pdataBANK1:	
   566  00D7                     _intNumberOfBlinks:	
   567  00D7                     	ds	2
   568                           
   569                           	psect	bssBANK3
   570  0190                     __pbssBANK3:	
   571  0190                     _ReceivedData:	
   572  0190                     	ds	40
   573                           
   574                           	psect	clrtext
   575  0C25                     clear_ram0:	
   576                           ;	Called with FSR containing the base address, and
   577                           ;	W with the last address+1
   578                           
   579  0C25  0064               	clrwdt	;clear the watchdog before getting into this loop
   580  0C26                     clrloop0:	
   581  0C26  0180               	clrf	0	;clear RAM location pointed to by FSR
   582  0C27  0A84               	incf	4,f	;increment pointer
   583  0C28  0604               	xorwf	4,w	;XOR with final address
   584  0C29  1903               	btfsc	3,2	;have we reached the end yet?
   585  0C2A  3400               	retlw	0	;all done for this memory range, return
   586  0C2B  0604               	xorwf	4,w	;XOR again to restore value
   587  0C2C  2C26               	goto	clrloop0	;do the next byte
   588                           
   589                           	psect	cstackCOMMON
   590  0070                     __pcstackCOMMON:	
   591  0070                     ?_isdigit:	
   592  0070                     ?_init:	
   593                           ; 1 bit 
   594                           
   595  0070                     ?_TransiverInit:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ?_OperationMode:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_Mode_0:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_Mode_1:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_Mode_2:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_Mode_4:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_Mode_5:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?_TransiverToReceive:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_TransiverReadFIFO:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_SetRFMode:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_RegisterRead:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_FindChannel:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?_ReadFIFO:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_TransmittedDataHandler:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ?_AnalogValue:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_DarknessCheck:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ?_eeprom_read:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ?_WriteFIFO:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ?_LightWithSensController:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_main:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     ?_TimerCounter:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ??_TimerCounter:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ?_WriteSPI:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?_ReadSPI:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ?_tc_int:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?i1_OperationMode:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ??i1_OperationMode:	
   674                           ; 1 bytes @ 0x0
   675                           
   676                           
   677                           ; 1 bytes @ 0x0
   678  0070                     	ds	1
   679  0071                     i1OperationMode@bracketStatus:	
   680                           
   681                           ; 1 bytes @ 0x1
   682  0071                     	ds	2
   683  0073                     TimerCounter@i:	
   684                           
   685                           ; 2 bytes @ 0x3
   686  0073                     	ds	2
   687  0075                     ??_tc_int:	
   688                           
   689                           ; 1 bytes @ 0x5
   690  0075                     	ds	7
   691                           
   692                           	psect	cstackBANK0
   693  0020                     __pcstackBANK0:	
   694  0020                     ??_init:	
   695  0020                     ??_OperationMode:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0020                     ?_timerFunction:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0020                     ?_DelayDs:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0020                     ??_eeprom_read:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0020                     ?_eeprom_write:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0020                     ??_isdigit:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0020                     ?_strchr:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0020                     ??_WriteSPI:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0020                     ?_strlen:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0020                     ?___wmul:	
   723                           ; 2 bytes @ 0x0
   724                           
   725  0020                     eeprom_write@value:	
   726                           ; 2 bytes @ 0x0
   727                           
   728  0020                     _isdigit$1118:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0020                     timerFunction@intTimerNumber:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0020                     DelayDs@cnt:	
   735                           ; 2 bytes @ 0x0
   736                           
   737  0020                     ___wmul@multiplier:	
   738                           ; 2 bytes @ 0x0
   739                           
   740  0020                     strchr@chr:	
   741                           ; 2 bytes @ 0x0
   742                           
   743                           
   744                           ; 2 bytes @ 0x0
   745  0020                     	ds	1
   746  0021                     ??_eeprom_write:	
   747  0021                     WriteSPI@buffer:	
   748                           ; 1 bytes @ 0x1
   749                           
   750  0021                     OperationMode@bracketStatus:	
   751                           ; 1 bytes @ 0x1
   752                           
   753  0021                     eeprom_read@addr:	
   754                           ; 1 bytes @ 0x1
   755                           
   756  0021                     isdigit@c:	
   757                           ; 1 bytes @ 0x1
   758                           
   759                           
   760                           ; 1 bytes @ 0x1
   761  0021                     	ds	1
   762  0022                     ??_DelayDs:	
   763  0022                     ??_strlen:	
   764                           ; 1 bytes @ 0x2
   765                           
   766  0022                     ??_strchr:	
   767                           ; 1 bytes @ 0x2
   768                           
   769  0022                     WriteSPI@databyte:	
   770                           ; 1 bytes @ 0x2
   771                           
   772  0022                     eeprom_write@addr:	
   773                           ; 1 bytes @ 0x2
   774                           
   775  0022                     strchr@ptr:	
   776                           ; 1 bytes @ 0x2
   777                           
   778  0022                     timerFunction@intSetSeconds:	
   779                           ; 1 bytes @ 0x2
   780                           
   781  0022                     ___wmul@multiplicand:	
   782                           ; 2 bytes @ 0x2
   783                           
   784                           
   785                           ; 2 bytes @ 0x2
   786  0022                     	ds	1
   787  0023                     ??_RegisterRead:	
   788  0023                     ??_ReadFIFO:	
   789                           ; 1 bytes @ 0x3
   790                           
   791  0023                     ??_WriteFIFO:	
   792                           ; 1 bytes @ 0x3
   793                           
   794  0023                     ??_ReadSPI:	
   795                           ; 1 bytes @ 0x3
   796                           
   797  0023                     WriteFIFO@Data:	
   798                           ; 1 bytes @ 0x3
   799                           
   800                           
   801                           ; 1 bytes @ 0x3
   802  0023                     	ds	1
   803  0024                     ??_timerFunction:	
   804  0024                     ??___wmul:	
   805                           ; 1 bytes @ 0x4
   806                           
   807  0024                     ReadFIFO@value:	
   808                           ; 1 bytes @ 0x4
   809                           
   810  0024                     DelayDs@i:	
   811                           ; 1 bytes @ 0x4
   812                           
   813  0024                     ___wmul@product:	
   814                           ; 2 bytes @ 0x4
   815                           
   816                           
   817                           ; 2 bytes @ 0x4
   818  0024                     	ds	1
   819  0025                     RegisterRead@value:	
   820                           
   821                           ; 1 bytes @ 0x5
   822  0025                     	ds	1
   823  0026                     ??_AnalogValue:	
   824  0026                     ?_Blink:	
   825                           ; 1 bytes @ 0x6
   826                           
   827  0026                     ?_atoi:	
   828                           ; 1 bytes @ 0x6
   829                           
   830  0026                     RegisterRead@adress:	
   831                           ; 2 bytes @ 0x6
   832                           
   833  0026                     strlen@s:	
   834                           ; 1 bytes @ 0x6
   835                           
   836  0026                     Blink@n:	
   837                           ; 1 bytes @ 0x6
   838                           
   839                           
   840                           ; 2 bytes @ 0x6
   841  0026                     	ds	1
   842  0027                     ?_RegisterSet:	
   843  0027                     RegisterSet@value:	
   844                           ; 1 bytes @ 0x7
   845                           
   846  0027                     AnalogValue@channel:	
   847                           ; 1 bytes @ 0x7
   848                           
   849  0027                     strlen@cp:	
   850                           ; 1 bytes @ 0x7
   851                           
   852                           
   853                           ; 1 bytes @ 0x7
   854  0027                     	ds	1
   855  0028                     ??_RegisterSet:	
   856  0028                     ??_DarknessCheck:	
   857                           ; 1 bytes @ 0x8
   858                           
   859  0028                     ??_atoi:	
   860                           ; 1 bytes @ 0x8
   861                           
   862  0028                     ??_Blink:	
   863                           ; 1 bytes @ 0x8
   864                           
   865  0028                     ?_strncmp:	
   866                           ; 1 bytes @ 0x8
   867                           
   868  0028                     strncmp@s2:	
   869                           ; 2 bytes @ 0x8
   870                           
   871                           
   872                           ; 1 bytes @ 0x8
   873  0028                     	ds	1
   874  0029                     DarknessCheck@darknessValue:	
   875  0029                     Blink@i:	
   876                           ; 1 bytes @ 0x9
   877                           
   878  0029                     strncmp@len:	
   879                           ; 2 bytes @ 0x9
   880                           
   881                           
   882                           ; 2 bytes @ 0x9
   883  0029                     	ds	1
   884  002A                     ??_Mode_0:	
   885  002A                     ??_Mode_1:	
   886                           ; 1 bytes @ 0xA
   887                           
   888  002A                     ??_Mode_2:	
   889                           ; 1 bytes @ 0xA
   890                           
   891  002A                     ??_LightWithSensController:	
   892                           ; 1 bytes @ 0xA
   893                           
   894  002A                     RegisterSet@adress:	
   895                           ; 1 bytes @ 0xA
   896                           
   897  002A                     atoi@sign:	
   898                           ; 1 bytes @ 0xA
   899                           
   900                           
   901                           ; 1 bytes @ 0xA
   902  002A                     	ds	1
   903  002B                     ??_SetRFMode:	
   904  002B                     ??_strncmp:	
   905                           ; 1 bytes @ 0xB
   906                           
   907  002B                     atoi@a:	
   908                           ; 1 bytes @ 0xB
   909                           
   910                           
   911                           ; 2 bytes @ 0xB
   912  002B                     	ds	1
   913  002C                     SetRFMode@mode:	
   914                           
   915                           ; 1 bytes @ 0xC
   916  002C                     	ds	1
   917  002D                     SetRFMode@mcparam0_read:	
   918  002D                     atoi@s:	
   919                           ; 1 bytes @ 0xD
   920                           
   921  002D                     strncmp@s1:	
   922                           ; 1 bytes @ 0xD
   923                           
   924                           
   925                           ; 1 bytes @ 0xD
   926  002D                     	ds	1
   927  002E                     ??_FindChannel:	
   928  002E                     ?_strstr:	
   929                           ; 1 bytes @ 0xE
   930                           
   931  002E                     strstr@s2:	
   932                           ; 1 bytes @ 0xE
   933                           
   934                           
   935                           ; 1 bytes @ 0xE
   936  002E                     	ds	1
   937  002F                     ??_strstr:	
   938                           
   939                           ; 1 bytes @ 0xF
   940  002F                     	ds	2
   941  0031                     FindChannel@cnt:	
   942                           
   943                           ; 2 bytes @ 0x11
   944  0031                     	ds	1
   945  0032                     strstr@s1:	
   946                           
   947                           ; 1 bytes @ 0x12
   948  0032                     	ds	1
   949  0033                     FindChannel@i:	
   950                           
   951                           ; 2 bytes @ 0x13
   952  0033                     	ds	2
   953  0035                     ??_TransiverInit:	
   954  0035                     ??_TransiverToReceive:	
   955                           ; 1 bytes @ 0x15
   956                           
   957  0035                     ?_TransmittString:	
   958                           ; 1 bytes @ 0x15
   959                           
   960  0035                     TransmittString@dataString:	
   961                           ; 1 bytes @ 0x15
   962                           
   963                           
   964                           ; 2 bytes @ 0x15
   965  0035                     	ds	2
   966  0037                     ??_TransmittString:	
   967                           
   968                           ; 1 bytes @ 0x17
   969  0037                     	ds	3
   970  003A                     TransmittString@i:	
   971                           
   972                           ; 2 bytes @ 0x1A
   973  003A                     	ds	2
   974  003C                     ??_Mode_4:	
   975  003C                     ??_Mode_5:	
   976                           ; 1 bytes @ 0x1C
   977                           
   978  003C                     ??_TransmittedDataHandler:	
   979                           ; 1 bytes @ 0x1C
   980                           
   981                           
   982                           ; 1 bytes @ 0x1C
   983  003C                     	ds	1
   984  003D                     TransmittedDataHandler@slask:	
   985                           
   986                           ; 8 bytes @ 0x1D
   987  003D                     	ds	8
   988  0045                     TransmittedDataHandler@slask_734:	
   989                           
   990                           ; 8 bytes @ 0x25
   991  0045                     	ds	8
   992  004D                     TransmittedDataHandler@slask_743:	
   993                           
   994                           ; 8 bytes @ 0x2D
   995  004D                     	ds	8
   996  0055                     TransmittedDataHandler@slask_746:	
   997                           
   998                           ; 8 bytes @ 0x35
   999  0055                     	ds	8
  1000  005D                     TransmittedDataHandler@value:	
  1001                           
  1002                           ; 2 bytes @ 0x3D
  1003  005D                     	ds	2
  1004  005F                     ??_TransiverReadFIFO:	
  1005                           
  1006                           ; 1 bytes @ 0x3F
  1007  005F                     	ds	2
  1008  0061                     TransiverReadFIFO@i:	
  1009                           
  1010                           ; 2 bytes @ 0x41
  1011  0061                     	ds	2
  1012  0063                     TransiverReadFIFO@j:	
  1013                           
  1014                           ; 2 bytes @ 0x43
  1015  0063                     	ds	2
  1016  0065                     ??_main:	
  1017                           
  1018                           ; 1 bytes @ 0x45
  1019  0065                     	ds	3
  1020                           
  1021                           	psect	maintext
  1022  071C                     __pmaintext:	
  1023 ;;
  1024 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1025 ;;
  1026 ;; *************** function _main *****************
  1027 ;; Defined at:
  1028 ;;		line 27 in file "main.c"
  1029 ;; Parameters:    Size  Location     Type
  1030 ;;		None
  1031 ;; Auto vars:     Size  Location     Type
  1032 ;;		None
  1033 ;; Return value:  Size  Location     Type
  1034 ;;                  1    wreg      void 
  1035 ;; Registers used:
  1036 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : B00/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1042 ;;      Params:         0       0       0       0       0
  1043 ;;      Locals:         0       0       0       0       0
  1044 ;;      Temps:          0       3       0       0       0
  1045 ;;      Totals:         0       3       0       0       0
  1046 ;;Total ram usage:        3 bytes
  1047 ;; Hardware stack levels required when called:   10
  1048 ;; This function calls:
  1049 ;;		_Mode_0
  1050 ;;		_Mode_1
  1051 ;;		_Mode_2
  1052 ;;		_Mode_4
  1053 ;;		_Mode_5
  1054 ;;		_OperationMode
  1055 ;;		_TransiverInit
  1056 ;;		_TransiverReadFIFO
  1057 ;;		_TransiverToReceive
  1058 ;;		_init
  1059 ;; This function is called by:
  1060 ;;		Startup code after reset
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           
  1065                           ;psect for function _main
  1066  071C                     _main:	
  1067                           
  1068                           ;main.c: 30: init();
  1069                           
  1070                           ;incstack = 0
  1071 ;; hardware stack exceeded
  1072                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1073  071C  120A  158A  2750  120A  118A  	fcall	_init
  1074                           
  1075                           ;main.c: 32: _delay((unsigned long)((800)*(4000000/4000.0)));
  1076  0721  3005               	movlw	5
  1077  0722  1283               	bcf	3,5	;RP0=0, select bank0
  1078  0723  1303               	bcf	3,6	;RP1=0, select bank0
  1079  0724  00E7               	movwf	??_main+2
  1080  0725  300F               	movlw	15
  1081  0726  00E6               	movwf	??_main+1
  1082  0727  30F4               	movlw	244
  1083  0728  00E5               	movwf	??_main
  1084  0729                     u2117:	
  1085  0729  0BE5               	decfsz	??_main,f
  1086  072A  2F29               	goto	u2117
  1087  072B  0BE6               	decfsz	??_main+1,f
  1088  072C  2F29               	goto	u2117
  1089  072D  0BE7               	decfsz	??_main+2,f
  1090  072E  2F29               	goto	u2117
  1091                           
  1092                           ;main.c: 33: TransiverInit();
  1093  072F  120A  118A  22ED  120A  118A  	fcall	_TransiverInit
  1094  0734                     l2378:	
  1095                           ;main.c: 35: while(1)
  1096                           
  1097                           
  1098                           ;main.c: 36: {
  1099                           ;main.c: 37: if(OperationMode() == 0)
  1100  0734  120A  158A  2436  120A  118A  	fcall	_OperationMode
  1101  0739  3A00               	xorlw	0
  1102  073A  1D03               	skipz
  1103  073B  2F41               	goto	l2382
  1104                           
  1105                           ;main.c: 38: {
  1106                           ;main.c: 39: Mode_0();
  1107  073C  120A  118A  27FB  120A  118A  	fcall	_Mode_0
  1108  0741                     l2382:	
  1109                           
  1110                           ;main.c: 40: }
  1111                           ;main.c: 41: if(OperationMode() == 1)
  1112  0741  120A  158A  2436  120A  118A  	fcall	_OperationMode
  1113  0746  3A01               	xorlw	1
  1114  0747  1D03               	skipz
  1115  0748  2F4E               	goto	l2386
  1116                           
  1117                           ;main.c: 42: {
  1118                           ;main.c: 43: Mode_1();
  1119  0749  120A  158A  24CD  120A  118A  	fcall	_Mode_1
  1120  074E                     l2386:	
  1121                           
  1122                           ;main.c: 44: }
  1123                           ;main.c: 46: if(OperationMode() == 2)
  1124  074E  120A  158A  2436  120A  118A  	fcall	_OperationMode
  1125  0753  3A02               	xorlw	2
  1126  0754  1D03               	skipz
  1127  0755  2F5B               	goto	l2390
  1128                           
  1129                           ;main.c: 47: {
  1130                           ;main.c: 48: Mode_2();
  1131  0756  120A  158A  244B  120A  118A  	fcall	_Mode_2
  1132  075B                     l2390:	
  1133                           
  1134                           ;main.c: 49: }
  1135                           ;main.c: 51: if(OperationMode() == 4)
  1136  075B  120A  158A  2436  120A  118A  	fcall	_OperationMode
  1137  0760  3A04               	xorlw	4
  1138  0761  1D03               	skipz
  1139  0762  2F68               	goto	l2394
  1140                           
  1141                           ;main.c: 52: {
  1142                           ;main.c: 53: Mode_4();
  1143  0763  120A  158A  2484  120A  118A  	fcall	_Mode_4
  1144  0768                     l2394:	
  1145                           
  1146                           ;main.c: 54: }
  1147                           ;main.c: 56: if(OperationMode() == 5)
  1148  0768  120A  158A  2436  120A  118A  	fcall	_OperationMode
  1149  076D  3A05               	xorlw	5
  1150  076E  1D03               	skipz
  1151  076F  2F75               	goto	l2398
  1152                           
  1153                           ;main.c: 57: {
  1154                           ;main.c: 58: Mode_5();
  1155  0770  120A  158A  2495  120A  118A  	fcall	_Mode_5
  1156  0775                     l2398:	
  1157                           
  1158                           ;main.c: 59: }
  1159                           ;main.c: 63: if(!bTransiverModeReceive)
  1160  0775  1283               	bcf	3,5	;RP0=0, select bank0
  1161  0776  1303               	bcf	3,6	;RP1=0, select bank0
  1162  0777  086E               	movf	_bTransiverModeReceive,w
  1163  0778  1D03               	btfss	3,2
  1164  0779  2F7F               	goto	l2402
  1165                           
  1166                           ;main.c: 64: TransiverToReceive();
  1167  077A  120A  158A  27A3  120A  118A  	fcall	_TransiverToReceive
  1168  077F                     l2402:	
  1169                           
  1170                           ;main.c: 65: if(PORTBbits.RB4 && bTransiverModeReceive)
  1171  077F  1283               	bcf	3,5	;RP0=0, select bank0
  1172  0780  1303               	bcf	3,6	;RP1=0, select bank0
  1173  0781  1E06               	btfss	6,4	;volatile
  1174  0782  2F34               	goto	l2378
  1175  0783  086E               	movf	_bTransiverModeReceive,w
  1176  0784  1903               	btfsc	3,2
  1177  0785  2F34               	goto	l2378
  1178                           
  1179                           ;main.c: 66: TransiverReadFIFO();
  1180  0786  120A  118A  2575  120A  118A  	fcall	_TransiverReadFIFO
  1181  078B  2F34               	goto	l2378
  1182  078C                     __end_of_main:	
  1183                           
  1184                           	psect	text1
  1185  0F50                     __ptext1:	
  1186 ;; *************** function _init *****************
  1187 ;; Defined at:
  1188 ;;		line 368 in file "functions.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;		None
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, status,2, status,0
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1202 ;;      Params:         0       0       0       0       0
  1203 ;;      Locals:         0       0       0       0       0
  1204 ;;      Temps:          0       0       0       0       0
  1205 ;;      Totals:         0       0       0       0       0
  1206 ;;Total ram usage:        0 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    2
  1209 ;; This function calls:
  1210 ;;		Nothing
  1211 ;; This function is called by:
  1212 ;;		_main
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           
  1217                           ;psect for function _init
  1218  0F50                     _init:	
  1219                           
  1220                           ;functions.c: 371: OSCCONbits.IRCF2 = 1;
  1221                           
  1222                           ;incstack = 0
  1223                           ; Regs used in _init: [wreg+status,2+status,0]
  1224  0F50  1683               	bsf	3,5	;RP0=1, select bank1
  1225  0F51  1303               	bcf	3,6	;RP1=0, select bank1
  1226  0F52  170F               	bsf	15,6	;volatile
  1227                           
  1228                           ;functions.c: 372: OSCCONbits.IRCF1 = 1;
  1229  0F53  168F               	bsf	15,5	;volatile
  1230                           
  1231                           ;functions.c: 373: OSCCONbits.IRCF0 = 0;
  1232  0F54  120F               	bcf	15,4	;volatile
  1233                           
  1234                           ;functions.c: 374: OSCCONbits.SCS = 1;
  1235  0F55  140F               	bsf	15,0	;volatile
  1236                           
  1237                           ;functions.c: 377: PORTA = 0x00;
  1238  0F56  1283               	bcf	3,5	;RP0=0, select bank0
  1239  0F57  1303               	bcf	3,6	;RP1=0, select bank0
  1240  0F58  0185               	clrf	5	;volatile
  1241                           
  1242                           ;functions.c: 378: PORTB = 0x00;
  1243  0F59  0186               	clrf	6	;volatile
  1244                           
  1245                           ;functions.c: 379: PORTC = 0x00;
  1246  0F5A  0187               	clrf	7	;volatile
  1247                           
  1248                           ;functions.c: 380: TRISA = 0b00001011;
  1249  0F5B  300B               	movlw	11
  1250  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  1251  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  1252  0F5E  0085               	movwf	5	;volatile
  1253                           
  1254                           ;functions.c: 381: TRISB = 0b00111111;
  1255  0F5F  303F               	movlw	63
  1256  0F60  0086               	movwf	6	;volatile
  1257                           
  1258                           ;functions.c: 382: TRISC = 0b00010000;
  1259  0F61  3010               	movlw	16
  1260  0F62  0087               	movwf	7	;volatile
  1261                           
  1262                           ;functions.c: 383: ANSEL = 0b00000000;
  1263  0F63  1683               	bsf	3,5	;RP0=1, select bank3
  1264  0F64  1703               	bsf	3,6	;RP1=1, select bank3
  1265  0F65  0188               	clrf	8	;volatile
  1266                           
  1267                           ;functions.c: 384: ANSELH = 0b00000000;
  1268  0F66  0189               	clrf	9	;volatile
  1269                           
  1270                           ;functions.c: 385: ANSELbits.ANS0 = 1;
  1271  0F67  1408               	bsf	8,0	;volatile
  1272                           
  1273                           ;functions.c: 386: ANSELbits.ANS3 = 1;
  1274  0F68  1588               	bsf	8,3	;volatile
  1275                           
  1276                           ;functions.c: 387: OPTION_REGbits.nRBPU = 0;
  1277  0F69  1683               	bsf	3,5	;RP0=1, select bank1
  1278  0F6A  1303               	bcf	3,6	;RP1=0, select bank1
  1279  0F6B  1381               	bcf	1,7	;volatile
  1280                           
  1281                           ;functions.c: 388: WPUBbits.WPUB5 = 0;
  1282  0F6C  1295               	bcf	21,5	;volatile
  1283  0F6D                     l332:	
  1284                           ;functions.c: 389: while(!PORTBbits.RB5);
  1285                           
  1286  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  1287  0F6E  1E86               	btfss	6,5	;volatile
  1288  0F6F  2F6D               	goto	l332
  1289                           
  1290                           ;functions.c: 392: SSPCONbits.SSPM=0x00;
  1291  0F70  30F0               	movlw	-16
  1292  0F71  0594               	andwf	20,f	;volatile
  1293                           
  1294                           ;functions.c: 393: SSPCONbits.CKP=0;
  1295  0F72  1214               	bcf	20,4	;volatile
  1296                           
  1297                           ;functions.c: 394: SSPSTATbits.CKE=1;
  1298  0F73  1683               	bsf	3,5	;RP0=1, select bank1
  1299  0F74  1303               	bcf	3,6	;RP1=0, select bank1
  1300  0F75  1714               	bsf	20,6	;volatile
  1301                           
  1302                           ;functions.c: 395: SSPSTATbits.SMP=0;
  1303  0F76  1394               	bcf	20,7	;volatile
  1304                           
  1305                           ;functions.c: 396: SSPCONbits.SSPEN=0x01;
  1306  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  1307  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  1308  0F79  1694               	bsf	20,5	;volatile
  1309                           
  1310                           ;functions.c: 397: SSPIE = 0;
  1311  0F7A  1683               	bsf	3,5	;RP0=1, select bank1
  1312  0F7B  1303               	bcf	3,6	;RP1=0, select bank1
  1313  0F7C  118C               	bcf	12,3	;volatile
  1314                           
  1315                           ;functions.c: 400: PORTAbits.RA5 = 1;
  1316  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  1317  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  1318  0F7F  1685               	bsf	5,5	;volatile
  1319                           
  1320                           ;functions.c: 401: PORTAbits.RA4 = 1;
  1321  0F80  1605               	bsf	5,4	;volatile
  1322                           
  1323                           ;functions.c: 404: INTCONbits.RBIE = 1;
  1324  0F81  158B               	bsf	11,3	;volatile
  1325                           
  1326                           ;functions.c: 405: INTCONbits.PEIE = 1;
  1327  0F82  170B               	bsf	11,6	;volatile
  1328                           
  1329                           ;functions.c: 406: PIE1bits.TMR1IE = 1;
  1330  0F83  1683               	bsf	3,5	;RP0=1, select bank1
  1331  0F84  1303               	bcf	3,6	;RP1=0, select bank1
  1332  0F85  140C               	bsf	12,0	;volatile
  1333                           
  1334                           ;functions.c: 407: INTCONbits.GIE = 1;
  1335  0F86  178B               	bsf	11,7	;volatile
  1336                           
  1337                           ;functions.c: 408: IOCBbits.IOCB5 = 1;
  1338  0F87  1696               	bsf	22,5	;volatile
  1339                           
  1340                           ;functions.c: 411: T1CON = 0b00110000;
  1341  0F88  3030               	movlw	48
  1342  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  1343  0F8A  1303               	bcf	3,6	;RP1=0, select bank0
  1344  0F8B  0090               	movwf	16	;volatile
  1345                           
  1346                           ;functions.c: 412: TMR1H = 0x0B;
  1347  0F8C  300B               	movlw	11
  1348  0F8D  008F               	movwf	15	;volatile
  1349                           
  1350                           ;functions.c: 413: TMR1L = 0xDB;
  1351  0F8E  30DB               	movlw	219
  1352  0F8F  008E               	movwf	14	;volatile
  1353                           
  1354                           ;functions.c: 414: T1CONbits.TMR1ON = 1;
  1355  0F90  1410               	bsf	16,0	;volatile
  1356                           
  1357                           ;functions.c: 417: ADCON0bits.ADCS0 = 0;
  1358  0F91  131F               	bcf	31,6	;volatile
  1359                           
  1360                           ;functions.c: 418: ADCON0bits.ADCS1 = 0;
  1361  0F92  139F               	bcf	31,7	;volatile
  1362                           
  1363                           ;functions.c: 419: ADCON1bits.ADFM = 0;
  1364  0F93  1683               	bsf	3,5	;RP0=1, select bank1
  1365  0F94  1303               	bcf	3,6	;RP1=0, select bank1
  1366  0F95  139F               	bcf	31,7	;volatile
  1367                           
  1368                           ;functions.c: 420: ADCON1bits.VCFG1 = 0;
  1369  0F96  129F               	bcf	31,5	;volatile
  1370                           
  1371                           ;functions.c: 421: ADCON1bits.VCFG0 = 0;
  1372  0F97  121F               	bcf	31,4	;volatile
  1373                           
  1374                           ;functions.c: 424: intSecondCounter = 0;
  1375  0F98  1283               	bcf	3,5	;RP0=0, select bank0
  1376  0F99  1303               	bcf	3,6	;RP1=0, select bank0
  1377  0F9A  01EA               	clrf	_intSecondCounter
  1378  0F9B  01EB               	clrf	_intSecondCounter+1
  1379                           
  1380                           ;functions.c: 425: intHalfSecondCounter = 0;
  1381  0F9C  1683               	bsf	3,5	;RP0=1, select bank1
  1382  0F9D  1303               	bcf	3,6	;RP1=0, select bank1
  1383  0F9E  01B5               	clrf	_intHalfSecondCounter^(0+128)
  1384  0F9F  01B6               	clrf	(_intHalfSecondCounter+1)^(0+128)
  1385                           
  1386                           ;functions.c: 426: intMinuteCounter = 0;
  1387  0FA0  01B7               	clrf	_intMinuteCounter^(0+128)
  1388  0FA1  01B8               	clrf	(_intMinuteCounter+1)^(0+128)
  1389  0FA2  0008               	return
  1390  0FA3                     __end_of_init:	
  1391                           
  1392                           	psect	text2
  1393  0FA3                     __ptext2:	
  1394 ;; *************** function _TransiverToReceive *****************
  1395 ;; Defined at:
  1396 ;;		line 12 in file "functions.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;		None
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;		None
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1410 ;;      Params:         0       0       0       0       0
  1411 ;;      Locals:         0       0       0       0       0
  1412 ;;      Temps:          0       2       0       0       0
  1413 ;;      Totals:         0       2       0       0       0
  1414 ;;Total ram usage:        2 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; Hardware stack levels required when called:    7
  1417 ;; This function calls:
  1418 ;;		_FindChannel
  1419 ;;		_RegisterRead
  1420 ;;		_RegisterSet
  1421 ;;		_SetRFMode
  1422 ;;		_timerFunction
  1423 ;; This function is called by:
  1424 ;;		_main
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           
  1429                           ;psect for function _TransiverToReceive
  1430  0FA3                     _TransiverToReceive:	
  1431                           
  1432                           ;functions.c: 14: timerFunction(2, 5);
  1433                           
  1434                           ;incstack = 0
  1435                           ; Regs used in _TransiverToReceive: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1436  0FA3  3002               	movlw	2
  1437  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  1439  0FA6  00A0               	movwf	timerFunction@intTimerNumber
  1440  0FA7  3000               	movlw	0
  1441  0FA8  00A1               	movwf	timerFunction@intTimerNumber+1
  1442  0FA9  3005               	movlw	5
  1443  0FAA  00A2               	movwf	timerFunction@intSetSeconds
  1444  0FAB  3000               	movlw	0
  1445  0FAC  00A3               	movwf	timerFunction@intSetSeconds+1
  1446  0FAD  120A  158A  24A6  120A  158A  	fcall	_timerFunction
  1447                           
  1448                           ;functions.c: 18: SetRFMode(0x20);
  1449  0FB2  3020               	movlw	32
  1450  0FB3  120A  118A  278C  120A  158A  	fcall	_SetRFMode
  1451                           
  1452                           ;functions.c: 19: _delay((unsigned long)((10)*(4000000/4000.0)));
  1453  0FB8  300D               	movlw	13
  1454  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  1455  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  1456  0FBB  00B6               	movwf	??_TransiverToReceive+1
  1457  0FBC  30FB               	movlw	251
  1458  0FBD  00B5               	movwf	??_TransiverToReceive
  1459  0FBE                     u2127:	
  1460  0FBE  0BB5               	decfsz	??_TransiverToReceive,f
  1461  0FBF  2FBE               	goto	u2127
  1462  0FC0  0BB6               	decfsz	??_TransiverToReceive+1,f
  1463  0FC1  2FBE               	goto	u2127
  1464  0FC2  2FC3               	nop2
  1465                           
  1466                           ;functions.c: 20: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  1467  0FC3  300E               	movlw	14
  1468  0FC4  120A  158A  2501  120A  158A  	fcall	_RegisterRead
  1469  0FC9  3802               	iorlw	2
  1470  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  1471  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  1472  0FCC  00B5               	movwf	??_TransiverToReceive
  1473  0FCD  0835               	movf	??_TransiverToReceive,w
  1474  0FCE  00A7               	movwf	RegisterSet@value
  1475  0FCF  300E               	movlw	14
  1476  0FD0  120A  158A  24E7  120A  158A  	fcall	_RegisterSet
  1477                           
  1478                           ;functions.c: 21: SetRFMode(0x40);
  1479  0FD5  3040               	movlw	64
  1480  0FD6  120A  118A  278C  120A  158A  	fcall	_SetRFMode
  1481  0FDB                     l2310:	
  1482                           ;functions.c: 22: while((RegisterRead(0x0E) & 0b00000010) == 0)
  1483                           
  1484  0FDB  300E               	movlw	14
  1485  0FDC  120A  158A  2501  120A  158A  	fcall	_RegisterRead
  1486  0FE1  3902               	andlw	2
  1487  0FE2  1D03               	btfss	3,2
  1488  0FE3  2FEE               	goto	l2312
  1489                           
  1490                           ;functions.c: 23: {
  1491                           ;functions.c: 24: if(bTimerComplete[2])
  1492  0FE4  1683               	bsf	3,5	;RP0=1, select bank1
  1493  0FE5  1303               	bcf	3,6	;RP1=0, select bank1
  1494  0FE6  082C               	movf	(_bTimerComplete^(0+128)+2),w
  1495  0FE7  1903               	btfsc	3,2
  1496  0FE8  2FDB               	goto	l2310
  1497                           
  1498                           ;functions.c: 25: {
  1499                           ;functions.c: 26: FindChannel();
  1500  0FE9  120A  118A  21ED  120A  158A  	fcall	_FindChannel
  1501  0FEE                     l2312:	
  1502                           ;functions.c: 27: break;
  1503                           
  1504                           
  1505                           ;functions.c: 28: }
  1506                           ;functions.c: 29: }
  1507                           ;functions.c: 31: SetRFMode(0x60);
  1508  0FEE  3060               	movlw	96
  1509  0FEF  120A  118A  278C  120A  158A  	fcall	_SetRFMode
  1510                           
  1511                           ;functions.c: 32: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1512  0FF4  30A6               	movlw	166
  1513  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  1514  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  1515  0FF7  00B5               	movwf	??_TransiverToReceive
  1516  0FF8                     u2137:	
  1517  0FF8  0BB5               	decfsz	??_TransiverToReceive,f
  1518  0FF9  2FF8               	goto	u2137
  1519  0FFA  0000               	nop
  1520                           
  1521                           ;functions.c: 33: bTransiverModeReceive = 1;
  1522  0FFB  1283               	bcf	3,5	;RP0=0, select bank0
  1523  0FFC  1303               	bcf	3,6	;RP1=0, select bank0
  1524  0FFD  01EE               	clrf	_bTransiverModeReceive
  1525  0FFE  0AEE               	incf	_bTransiverModeReceive,f
  1526  0FFF  0008               	return
  1527  1000                     __end_of_TransiverToReceive:	
  1528                           
  1529                           	psect	text3
  1530  0575                     __ptext3:	
  1531 ;; *************** function _TransiverReadFIFO *****************
  1532 ;; Defined at:
  1533 ;;		line 38 in file "functions.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  j               2   67[BANK0 ] int 
  1538 ;;  i               2   65[BANK0 ] int 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1548 ;;      Params:         0       0       0       0       0
  1549 ;;      Locals:         0       4       0       0       0
  1550 ;;      Temps:          0       2       0       0       0
  1551 ;;      Totals:         0       6       0       0       0
  1552 ;;Total ram usage:        6 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; Hardware stack levels required when called:    9
  1555 ;; This function calls:
  1556 ;;		_ReadFIFO
  1557 ;;		_SetRFMode
  1558 ;;		_TransmittedDataHandler
  1559 ;;		_timerFunction
  1560 ;; This function is called by:
  1561 ;;		_main
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           
  1566                           ;psect for function _TransiverReadFIFO
  1567  0575                     _TransiverReadFIFO:	
  1568                           
  1569                           ;functions.c: 40: timerFunction(3, 5);
  1570                           
  1571                           ;incstack = 0
  1572 ;; hardware stack exceeded
  1573                           ; Regs used in _TransiverReadFIFO: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1574  0575  3003               	movlw	3
  1575  0576  1283               	bcf	3,5	;RP0=0, select bank0
  1576  0577  1303               	bcf	3,6	;RP1=0, select bank0
  1577  0578  00A0               	movwf	timerFunction@intTimerNumber
  1578  0579  3000               	movlw	0
  1579  057A  00A1               	movwf	timerFunction@intTimerNumber+1
  1580  057B  3005               	movlw	5
  1581  057C  00A2               	movwf	timerFunction@intSetSeconds
  1582  057D  3000               	movlw	0
  1583  057E  00A3               	movwf	timerFunction@intSetSeconds+1
  1584  057F  120A  158A  24A6  120A  118A  	fcall	_timerFunction
  1585                           
  1586                           ;functions.c: 42: SetRFMode(0x20);
  1587  0584  3020               	movlw	32
  1588  0585  120A  118A  278C  120A  118A  	fcall	_SetRFMode
  1589                           
  1590                           ;functions.c: 43: bTransiverModeReceive = 0;
  1591  058A  1283               	bcf	3,5	;RP0=0, select bank0
  1592  058B  1303               	bcf	3,6	;RP1=0, select bank0
  1593  058C  01EE               	clrf	_bTransiverModeReceive
  1594                           
  1595                           ;functions.c: 44: int i = 0;
  1596  058D  01E1               	clrf	TransiverReadFIFO@i
  1597  058E  01E2               	clrf	TransiverReadFIFO@i+1
  1598                           
  1599                           ;functions.c: 45: for (int j = 0; j < 30; ++j)
  1600  058F  01E3               	clrf	TransiverReadFIFO@j
  1601  0590  01E4               	clrf	TransiverReadFIFO@j+1
  1602  0591                     L1:	
  1603  0591  0864               	movf	TransiverReadFIFO@j+1,w
  1604  0592  3A80               	xorlw	128
  1605  0593  00FF               	movwf	127
  1606  0594  3080               	movlw	128
  1607  0595  027F               	subwf	127,w
  1608  0596  1D03               	skipz
  1609  0597  2D9A               	goto	u1835
  1610  0598  301E               	movlw	30
  1611  0599  0263               	subwf	TransiverReadFIFO@j,w
  1612  059A                     u1835:	
  1613  059A  1803               	btfsc	3,0
  1614  059B  2DBE               	goto	l2340
  1615                           
  1616                           ;functions.c: 46: {
  1617                           ;functions.c: 47: TransmittedString[j] = 0;
  1618  059C  1283               	bcf	3,5	;RP0=0, select bank0
  1619  059D  1303               	bcf	3,6	;RP1=0, select bank0
  1620  059E  0863               	movf	TransiverReadFIFO@j,w
  1621  059F  3EB9               	addlw	(low (_TransmittedString| 0))& (0+255)
  1622  05A0  0084               	movwf	4
  1623  05A1  1383               	bcf	3,7	;select IRP bank1
  1624  05A2  0180               	clrf	0
  1625  05A3  3001               	movlw	1
  1626  05A4  07E3               	addwf	TransiverReadFIFO@j,f
  1627  05A5  1803               	skipnc
  1628  05A6  0AE4               	incf	TransiverReadFIFO@j+1,f
  1629  05A7  3000               	movlw	0
  1630  05A8  07E4               	addwf	TransiverReadFIFO@j+1,f
  1631  05A9  2D91               	goto	L1
  1632  05AA                     l2336:	
  1633                           ;functions.c: 48: }
  1634                           ;functions.c: 49: while((PORTBbits.RB3)&&(!bTimerComplete[3]))
  1635                           
  1636                           
  1637                           ;functions.c: 50: {
  1638                           ;functions.c: 51: TransmittedString[i] = ReadFIFO();
  1639  05AA  120A  158A  2466  120A  118A  	fcall	_ReadFIFO
  1640  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  1641  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  1642  05B1  00DF               	movwf	??_TransiverReadFIFO
  1643  05B2  0861               	movf	TransiverReadFIFO@i,w
  1644  05B3  3EB9               	addlw	(low (_TransmittedString| 0))& (0+255)
  1645  05B4  0084               	movwf	4
  1646  05B5  085F               	movf	??_TransiverReadFIFO,w
  1647  05B6  1383               	bcf	3,7	;select IRP bank1
  1648  05B7  0080               	movwf	0
  1649                           
  1650                           ;functions.c: 52: i++;
  1651  05B8  3001               	movlw	1
  1652  05B9  07E1               	addwf	TransiverReadFIFO@i,f
  1653  05BA  1803               	skipnc
  1654  05BB  0AE2               	incf	TransiverReadFIFO@i+1,f
  1655  05BC  3000               	movlw	0
  1656  05BD  07E2               	addwf	TransiverReadFIFO@i+1,f
  1657  05BE                     l2340:	
  1658  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  1659  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  1660  05C0  1D86               	btfss	6,3	;volatile
  1661  05C1  2DC7               	goto	l2344
  1662  05C2  1683               	bsf	3,5	;RP0=1, select bank1
  1663  05C3  1303               	bcf	3,6	;RP1=0, select bank1
  1664  05C4  082D               	movf	(_bTimerComplete^(0+128)+3),w
  1665  05C5  1903               	btfsc	3,2
  1666  05C6  2DAA               	goto	l2336
  1667  05C7                     l2344:	
  1668                           
  1669                           ;functions.c: 53: }
  1670                           ;functions.c: 55: _delay((unsigned long)((10)*(4000000/4000.0)));
  1671  05C7  300D               	movlw	13
  1672  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  1673  05C9  00E0               	movwf	??_TransiverReadFIFO+1
  1674  05CA  30FB               	movlw	251
  1675  05CB  00DF               	movwf	??_TransiverReadFIFO
  1676  05CC                     u2147:	
  1677  05CC  0BDF               	decfsz	??_TransiverReadFIFO,f
  1678  05CD  2DCC               	goto	u2147
  1679  05CE  0BE0               	decfsz	??_TransiverReadFIFO+1,f
  1680  05CF  2DCC               	goto	u2147
  1681  05D0  2DD1               	nop2
  1682                           
  1683                           ;functions.c: 56: SetRFMode(0x00);
  1684  05D1  3000               	movlw	0
  1685  05D2  120A  118A  278C  120A  118A  	fcall	_SetRFMode
  1686                           
  1687                           ;functions.c: 57: TransmittedDataHandler();
  1688  05D7  120A  118A  2048   	fcall	_TransmittedDataHandler
  1689  05DA  0008               	return
  1690  05DB                     __end_of_TransiverReadFIFO:	
  1691                           
  1692                           	psect	text4
  1693  0048                     __ptext4:	
  1694 ;; *************** function _TransmittedDataHandler *****************
  1695 ;; Defined at:
  1696 ;;		line 59 in file "functions.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  slask           8   53[BANK0 ] unsigned char [8]
  1701 ;;  value           2   61[BANK0 ] int 
  1702 ;;  slask           8   45[BANK0 ] unsigned char [8]
  1703 ;;  slask           8   37[BANK0 ] unsigned char [8]
  1704 ;;  slask           8   29[BANK0 ] unsigned char [8]
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      void 
  1707 ;; Registers used:
  1708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1714 ;;      Params:         0       0       0       0       0
  1715 ;;      Locals:         0      34       0       0       0
  1716 ;;      Temps:          0       1       0       0       0
  1717 ;;      Totals:         0      35       0       0       0
  1718 ;;Total ram usage:       35 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    8
  1721 ;; This function calls:
  1722 ;;		_AnalogValue
  1723 ;;		_DarknessCheck
  1724 ;;		_DelayDs
  1725 ;;		_OperationMode
  1726 ;;		_TransmittString
  1727 ;;		_atoi
  1728 ;;		_eeprom_read
  1729 ;;		_eeprom_write
  1730 ;;		_strstr
  1731 ;; This function is called by:
  1732 ;;		_TransiverReadFIFO
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           
  1737                           ;psect for function _TransmittedDataHandler
  1738  0048                     _TransmittedDataHandler:	
  1739                           
  1740                           ;functions.c: 62: if((strstr(TransmittedString, "N1BLINK")) && (OperationMode() == 6))
  1741                           
  1742                           ;incstack = 0
  1743 ;; hardware stack exceeded
  1744                           ; Regs used in _TransmittedDataHandler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1745  0048  3055               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1746  0049  1283               	bcf	3,5	;RP0=0, select bank0
  1747  004A  1303               	bcf	3,6	;RP1=0, select bank0
  1748  004B  00BC               	movwf	??_TransmittedDataHandler
  1749  004C  083C               	movf	??_TransmittedDataHandler,w
  1750  004D  00AE               	movwf	strstr@s2
  1751  004E  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  1752  004F  120A  158A  270A  120A  118A  	fcall	_strstr
  1753  0054  3A00               	xorlw	0
  1754  0055  1903               	skipnz
  1755  0056  2873               	goto	l2072
  1756  0057  120A  158A  2436  120A  118A  	fcall	_OperationMode
  1757  005C  3A06               	xorlw	6
  1758  005D  1D03               	skipz
  1759  005E  2873               	goto	l2072
  1760                           
  1761                           ;functions.c: 63: {
  1762                           ;functions.c: 64: intBlinkCycle = 1;
  1763  005F  3001               	movlw	1
  1764  0060  1283               	bcf	3,5	;RP0=0, select bank0
  1765  0061  1303               	bcf	3,6	;RP1=0, select bank0
  1766  0062  00E8               	movwf	_intBlinkCycle
  1767  0063  3000               	movlw	0
  1768  0064  00E9               	movwf	_intBlinkCycle+1
  1769                           
  1770                           ;functions.c: 65: intBlinkCounter = 0;
  1771  0065  1683               	bsf	3,5	;RP0=1, select bank1
  1772  0066  1303               	bcf	3,6	;RP1=0, select bank1
  1773  0067  01B1               	clrf	_intBlinkCounter^(0+128)
  1774  0068  01B2               	clrf	(_intBlinkCounter+1)^(0+128)
  1775                           
  1776                           ;functions.c: 66: DelayDs(100);
  1777  0069  3064               	movlw	100
  1778  006A  1283               	bcf	3,5	;RP0=0, select bank0
  1779  006B  1303               	bcf	3,6	;RP1=0, select bank0
  1780  006C  00A0               	movwf	DelayDs@cnt
  1781  006D  3000               	movlw	0
  1782  006E  00A1               	movwf	DelayDs@cnt+1
  1783  006F  120A  158A  2540   	fcall	_DelayDs
  1784                           
  1785                           ;functions.c: 67: }
  1786  0072  0008               	return
  1787  0073                     l2072:	
  1788                           
  1789                           ;functions.c: 68: else if((strstr(TransmittedString, "N2BLINK")) && (OperationMode() == 
      +                          7))
  1790  0073  305D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1791  0074  1283               	bcf	3,5	;RP0=0, select bank0
  1792  0075  1303               	bcf	3,6	;RP1=0, select bank0
  1793  0076  00BC               	movwf	??_TransmittedDataHandler
  1794  0077  083C               	movf	??_TransmittedDataHandler,w
  1795  0078  00AE               	movwf	strstr@s2
  1796  0079  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  1797  007A  120A  158A  270A  120A  118A  	fcall	_strstr
  1798  007F  3A00               	xorlw	0
  1799  0080  1903               	skipnz
  1800  0081  289E               	goto	l2082
  1801  0082  120A  158A  2436  120A  118A  	fcall	_OperationMode
  1802  0087  3A07               	xorlw	7
  1803  0088  1D03               	skipz
  1804  0089  289E               	goto	l2082
  1805                           
  1806                           ;functions.c: 69: {
  1807                           ;functions.c: 70: intBlinkCycle = 1;
  1808  008A  3001               	movlw	1
  1809  008B  1283               	bcf	3,5	;RP0=0, select bank0
  1810  008C  1303               	bcf	3,6	;RP1=0, select bank0
  1811  008D  00E8               	movwf	_intBlinkCycle
  1812  008E  3000               	movlw	0
  1813  008F  00E9               	movwf	_intBlinkCycle+1
  1814                           
  1815                           ;functions.c: 71: intBlinkCounter = 0;
  1816  0090  1683               	bsf	3,5	;RP0=1, select bank1
  1817  0091  1303               	bcf	3,6	;RP1=0, select bank1
  1818  0092  01B1               	clrf	_intBlinkCounter^(0+128)
  1819  0093  01B2               	clrf	(_intBlinkCounter+1)^(0+128)
  1820                           
  1821                           ;functions.c: 72: DelayDs(100);
  1822  0094  3064               	movlw	100
  1823  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1824  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1825  0097  00A0               	movwf	DelayDs@cnt
  1826  0098  3000               	movlw	0
  1827  0099  00A1               	movwf	DelayDs@cnt+1
  1828  009A  120A  158A  2540   	fcall	_DelayDs
  1829                           
  1830                           ;functions.c: 73: }
  1831  009D  0008               	return
  1832  009E                     l2082:	
  1833                           
  1834                           ;functions.c: 74: else if((strstr(TransmittedString,"FLASHL")))
  1835  009E  3082               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1836  009F  1283               	bcf	3,5	;RP0=0, select bank0
  1837  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  1838  00A1  00BC               	movwf	??_TransmittedDataHandler
  1839  00A2  083C               	movf	??_TransmittedDataHandler,w
  1840  00A3  00AE               	movwf	strstr@s2
  1841  00A4  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  1842  00A5  120A  158A  270A  120A  118A  	fcall	_strstr
  1843  00AA  3A00               	xorlw	0
  1844  00AB  1903               	skipnz
  1845  00AC  28C4               	goto	l2090
  1846                           
  1847                           ;functions.c: 75: {
  1848                           ;functions.c: 76: PORTCbits.RC2 = 1;
  1849  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1850  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1851  00AF  1507               	bsf	7,2	;volatile
  1852                           
  1853                           ;functions.c: 77: DelayDs(10);
  1854  00B0  300A               	movlw	10
  1855  00B1  00A0               	movwf	DelayDs@cnt
  1856  00B2  3000               	movlw	0
  1857  00B3  00A1               	movwf	DelayDs@cnt+1
  1858  00B4  120A  158A  2540  120A  118A  	fcall	_DelayDs
  1859                           
  1860                           ;functions.c: 78: PORTCbits.RC2 = 0;
  1861  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1862  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1863  00BB  1107               	bcf	7,2	;volatile
  1864                           
  1865                           ;functions.c: 79: DelayDs(5);
  1866  00BC  3005               	movlw	5
  1867  00BD  00A0               	movwf	DelayDs@cnt
  1868  00BE  3000               	movlw	0
  1869  00BF  00A1               	movwf	DelayDs@cnt+1
  1870  00C0  120A  158A  2540   	fcall	_DelayDs
  1871                           
  1872                           ;functions.c: 80: }
  1873  00C3  0008               	return
  1874  00C4                     l2090:	
  1875                           
  1876                           ;functions.c: 81: else if((strstr(TransmittedString,"FLASHB")))
  1877  00C4  3074               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1878  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1879  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  1880  00C7  00BC               	movwf	??_TransmittedDataHandler
  1881  00C8  083C               	movf	??_TransmittedDataHandler,w
  1882  00C9  00AE               	movwf	strstr@s2
  1883  00CA  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  1884  00CB  120A  158A  270A  120A  118A  	fcall	_strstr
  1885  00D0  3A00               	xorlw	0
  1886  00D1  1903               	skipnz
  1887  00D2  28EA               	goto	l2098
  1888                           
  1889                           ;functions.c: 82: {
  1890                           ;functions.c: 83: PORTCbits.RC1 = 1;
  1891  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1892  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  1893  00D5  1487               	bsf	7,1	;volatile
  1894                           
  1895                           ;functions.c: 84: DelayDs(10);
  1896  00D6  300A               	movlw	10
  1897  00D7  00A0               	movwf	DelayDs@cnt
  1898  00D8  3000               	movlw	0
  1899  00D9  00A1               	movwf	DelayDs@cnt+1
  1900  00DA  120A  158A  2540  120A  118A  	fcall	_DelayDs
  1901                           
  1902                           ;functions.c: 85: PORTCbits.RC1 = 0;
  1903  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  1904  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  1905  00E1  1087               	bcf	7,1	;volatile
  1906                           
  1907                           ;functions.c: 86: DelayDs(5);
  1908  00E2  3005               	movlw	5
  1909  00E3  00A0               	movwf	DelayDs@cnt
  1910  00E4  3000               	movlw	0
  1911  00E5  00A1               	movwf	DelayDs@cnt+1
  1912  00E6  120A  158A  2540   	fcall	_DelayDs
  1913                           
  1914                           ;functions.c: 87: }
  1915  00E9  0008               	return
  1916  00EA                     l2098:	
  1917                           
  1918                           ;functions.c: 88: else if((strstr(TransmittedString,"SENSVAL")))
  1919  00EA  3065               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1920  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1921  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1922  00ED  00BC               	movwf	??_TransmittedDataHandler
  1923  00EE  083C               	movf	??_TransmittedDataHandler,w
  1924  00EF  00AE               	movwf	strstr@s2
  1925  00F0  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  1926  00F1  120A  158A  270A  120A  118A  	fcall	_strstr
  1927  00F6  3A00               	xorlw	0
  1928  00F7  1903               	skipnz
  1929  00F8  290C               	goto	l2104
  1930                           
  1931                           ;functions.c: 89: {
  1932                           ;functions.c: 90: unsigned char slask[8];
  1933                           ;functions.c: 91: slask[0] = AnalogValue(0);
  1934  00F9  3000               	movlw	0
  1935  00FA  120A  158A  2564  120A  118A  	fcall	_AnalogValue
  1936  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1938  0101  00BC               	movwf	??_TransmittedDataHandler
  1939  0102  083C               	movf	??_TransmittedDataHandler,w
  1940  0103  00BD               	movwf	TransmittedDataHandler@slask
  1941                           
  1942                           ;functions.c: 92: TransmittString(slask);
  1943  0104  303D               	movlw	(low (TransmittedDataHandler@slask| 0))& (0+255)
  1944  0105  00B5               	movwf	TransmittString@dataString
  1945  0106  3000               	movlw	0
  1946  0107  00B6               	movwf	TransmittString@dataString+1
  1947  0108  120A  118A  23D7   	fcall	_TransmittString
  1948                           
  1949                           ;functions.c: 93: }
  1950  010B  0008               	return
  1951  010C                     l2104:	
  1952                           
  1953                           ;functions.c: 94: else if((strstr(TransmittedString,"POTVAL")))
  1954  010C  307B               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1955  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1956  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1957  010F  00BC               	movwf	??_TransmittedDataHandler
  1958  0110  083C               	movf	??_TransmittedDataHandler,w
  1959  0111  00AE               	movwf	strstr@s2
  1960  0112  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  1961  0113  120A  158A  270A  120A  118A  	fcall	_strstr
  1962  0118  3A00               	xorlw	0
  1963  0119  1903               	skipnz
  1964  011A  292E               	goto	l2110
  1965                           
  1966                           ;functions.c: 95: {
  1967                           ;functions.c: 96: unsigned char slask[8];
  1968                           ;functions.c: 97: slask[0] = AnalogValue(3);
  1969  011B  3003               	movlw	3
  1970  011C  120A  158A  2564  120A  118A  	fcall	_AnalogValue
  1971  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1972  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1973  0123  00BC               	movwf	??_TransmittedDataHandler
  1974  0124  083C               	movf	??_TransmittedDataHandler,w
  1975  0125  00C5               	movwf	TransmittedDataHandler@slask_734
  1976                           
  1977                           ;functions.c: 98: TransmittString(slask);
  1978  0126  3045               	movlw	(low (TransmittedDataHandler@slask_734| 0))& (0+255)
  1979  0127  00B5               	movwf	TransmittString@dataString
  1980  0128  3000               	movlw	0
  1981  0129  00B6               	movwf	TransmittString@dataString+1
  1982  012A  120A  118A  23D7   	fcall	_TransmittString
  1983                           
  1984                           ;functions.c: 99: }
  1985  012D  0008               	return
  1986  012E                     l2110:	
  1987                           
  1988                           ;functions.c: 100: else if((strstr(TransmittedString,"DARKCALC")))
  1989  012E  3044               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1990  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1991  0130  1303               	bcf	3,6	;RP1=0, select bank0
  1992  0131  00BC               	movwf	??_TransmittedDataHandler
  1993  0132  083C               	movf	??_TransmittedDataHandler,w
  1994  0133  00AE               	movwf	strstr@s2
  1995  0134  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  1996  0135  120A  158A  270A  120A  118A  	fcall	_strstr
  1997  013A  3A00               	xorlw	0
  1998  013B  1903               	skipnz
  1999  013C  2959               	goto	l2120
  2000                           
  2001                           ;functions.c: 101: {
  2002                           ;functions.c: 102: DarknessCheck();
  2003  013D  120A  158A  258D  120A  118A  	fcall	_DarknessCheck
  2004                           
  2005                           ;functions.c: 103: if(bDark)
  2006  0142  1283               	bcf	3,5	;RP0=0, select bank0
  2007  0143  1303               	bcf	3,6	;RP1=0, select bank0
  2008  0144  086D               	movf	_bDark,w
  2009  0145  1903               	btfsc	3,2
  2010  0146  294F               	goto	l2118
  2011                           
  2012                           ;functions.c: 104: TransmittString("It's Dark    ");
  2013  0147  3036               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2014  0148  00B5               	movwf	TransmittString@dataString
  2015  0149  3080               	movlw	128
  2016  014A  00B6               	movwf	TransmittString@dataString+1
  2017  014B  120A  118A  23D7   	fcall	_TransmittString
  2018  014E  0008               	return
  2019  014F                     l2118:	
  2020                           
  2021                           ;functions.c: 105: else
  2022                           ;functions.c: 106: TransmittString("Not Dark     ");
  2023  014F  3028               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2024  0150  1283               	bcf	3,5	;RP0=0, select bank0
  2025  0151  1303               	bcf	3,6	;RP1=0, select bank0
  2026  0152  00B5               	movwf	TransmittString@dataString
  2027  0153  3080               	movlw	128
  2028  0154  00B6               	movwf	TransmittString@dataString+1
  2029  0155  120A  118A  23D7   	fcall	_TransmittString
  2030                           
  2031                           ;functions.c: 107: }
  2032  0158  0008               	return
  2033  0159                     l2120:	
  2034                           
  2035                           ;functions.c: 108: else if((strstr(TransmittedString,"STATE?")))
  2036  0159  306D               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2037  015A  1283               	bcf	3,5	;RP0=0, select bank0
  2038  015B  1303               	bcf	3,6	;RP1=0, select bank0
  2039  015C  00BC               	movwf	??_TransmittedDataHandler
  2040  015D  083C               	movf	??_TransmittedDataHandler,w
  2041  015E  00AE               	movwf	strstr@s2
  2042  015F  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  2043  0160  120A  158A  270A  120A  118A  	fcall	_strstr
  2044  0165  3A00               	xorlw	0
  2045  0166  1903               	skipnz
  2046  0167  297F               	goto	l2128
  2047                           
  2048                           ;functions.c: 109: {
  2049                           ;functions.c: 110: if(bValueFromPot == TRUE)
  2050  0168  1283               	bcf	3,5	;RP0=0, select bank0
  2051  0169  1303               	bcf	3,6	;RP1=0, select bank0
  2052  016A  036F               	decf	_bValueFromPot,w
  2053  016B  1D03               	btfss	3,2
  2054  016C  2975               	goto	l2126
  2055                           
  2056                           ;functions.c: 111: TransmittString("Pot");
  2057  016D  3098               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2058  016E  00B5               	movwf	TransmittString@dataString
  2059  016F  3080               	movlw	128
  2060  0170  00B6               	movwf	TransmittString@dataString+1
  2061  0171  120A  118A  23D7   	fcall	_TransmittString
  2062  0174  0008               	return
  2063  0175                     l2126:	
  2064                           
  2065                           ;functions.c: 112: else
  2066                           ;functions.c: 113: TransmittString("PIC");
  2067  0175  3094               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2068  0176  1283               	bcf	3,5	;RP0=0, select bank0
  2069  0177  1303               	bcf	3,6	;RP1=0, select bank0
  2070  0178  00B5               	movwf	TransmittString@dataString
  2071  0179  3080               	movlw	128
  2072  017A  00B6               	movwf	TransmittString@dataString+1
  2073  017B  120A  118A  23D7   	fcall	_TransmittString
  2074                           
  2075                           ;functions.c: 115: }
  2076  017E  0008               	return
  2077  017F                     l2128:	
  2078                           
  2079                           ;functions.c: 116: else if((strstr(TransmittedString,"CHSTATE")))
  2080  017F  304D               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2081  0180  1283               	bcf	3,5	;RP0=0, select bank0
  2082  0181  1303               	bcf	3,6	;RP1=0, select bank0
  2083  0182  00BC               	movwf	??_TransmittedDataHandler
  2084  0183  083C               	movf	??_TransmittedDataHandler,w
  2085  0184  00AE               	movwf	strstr@s2
  2086  0185  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  2087  0186  120A  158A  270A  120A  118A  	fcall	_strstr
  2088  018B  3A00               	xorlw	0
  2089  018C  1903               	skipnz
  2090  018D  2998               	goto	l2134
  2091                           
  2092                           ;functions.c: 117: {
  2093                           ;functions.c: 118: if(bValueFromPot== TRUE)
  2094  018E  1283               	bcf	3,5	;RP0=0, select bank0
  2095  018F  1303               	bcf	3,6	;RP1=0, select bank0
  2096  0190  036F               	decf	_bValueFromPot,w
  2097  0191  1D03               	btfss	3,2
  2098  0192  2995               	goto	l266
  2099                           
  2100                           ;functions.c: 119: bValueFromPot= FALSE;
  2101  0193  01EF               	clrf	_bValueFromPot
  2102  0194  0008               	return
  2103  0195                     l266:	
  2104                           
  2105                           ;functions.c: 120: else
  2106                           ;functions.c: 121: bValueFromPot=TRUE;
  2107  0195  01EF               	clrf	_bValueFromPot
  2108  0196  0AEF               	incf	_bValueFromPot,f
  2109                           
  2110                           ;functions.c: 122: }
  2111  0197  0008               	return
  2112  0198                     l2134:	
  2113                           
  2114                           ;functions.c: 124: else if((strstr(TransmittedString,"RMDV")))
  2115  0198  308F               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2116  0199  1283               	bcf	3,5	;RP0=0, select bank0
  2117  019A  1303               	bcf	3,6	;RP1=0, select bank0
  2118  019B  00BC               	movwf	??_TransmittedDataHandler
  2119  019C  083C               	movf	??_TransmittedDataHandler,w
  2120  019D  00AE               	movwf	strstr@s2
  2121  019E  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  2122  019F  120A  158A  270A  120A  118A  	fcall	_strstr
  2123  01A4  3A00               	xorlw	0
  2124  01A5  1903               	skipnz
  2125  01A6  29BA               	goto	l2140
  2126                           
  2127                           ;functions.c: 125: {
  2128                           ;functions.c: 126: unsigned char slask[8];
  2129                           ;functions.c: 127: slask[0] = eeprom_read(addressDarknessValue);
  2130  01A7  087C               	movf	_addressDarknessValue,w
  2131  01A8  120A  118A  25DB  120A  118A  	fcall	_eeprom_read
  2132  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  2133  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  2134  01AF  00BC               	movwf	??_TransmittedDataHandler
  2135  01B0  083C               	movf	??_TransmittedDataHandler,w
  2136  01B1  00CD               	movwf	TransmittedDataHandler@slask_743
  2137                           
  2138                           ;functions.c: 128: TransmittString(slask);
  2139  01B2  304D               	movlw	(low (TransmittedDataHandler@slask_743| 0))& (0+255)
  2140  01B3  00B5               	movwf	TransmittString@dataString
  2141  01B4  3000               	movlw	0
  2142  01B5  00B6               	movwf	TransmittString@dataString+1
  2143  01B6  120A  118A  23D7   	fcall	_TransmittString
  2144                           
  2145                           ;functions.c: 130: }
  2146  01B9  0008               	return
  2147  01BA                     l2140:	
  2148                           
  2149                           ;functions.c: 132: else if((strstr(TransmittedString,"SETDV")))
  2150  01BA  3089               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2151  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  2152  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  2153  01BD  00BC               	movwf	??_TransmittedDataHandler
  2154  01BE  083C               	movf	??_TransmittedDataHandler,w
  2155  01BF  00AE               	movwf	strstr@s2
  2156  01C0  30B9               	movlw	(low (_TransmittedString| 0))& (0+255)
  2157  01C1  120A  158A  270A  120A  118A  	fcall	_strstr
  2158  01C6  3A00               	xorlw	0
  2159  01C7  1903               	skipnz
  2160  01C8  0008               	return
  2161                           
  2162                           ;functions.c: 133: {
  2163                           ;functions.c: 135: int value;
  2164                           ;functions.c: 136: unsigned char slask[8];
  2165                           ;functions.c: 137: value = atoi(&TransmittedString[6]);
  2166  01C9  30BF               	movlw	(low ((_TransmittedString| 0+6)))& (0+255)
  2167  01CA  120A  118A  26AB  120A  118A  	fcall	_atoi
  2168  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  2169  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  2170  01D1  0827               	movf	?_atoi+1,w
  2171  01D2  00DE               	movwf	TransmittedDataHandler@value+1
  2172  01D3  0826               	movf	?_atoi,w
  2173  01D4  00DD               	movwf	TransmittedDataHandler@value
  2174                           
  2175                           ;functions.c: 138: slask[0] = (unsigned char)value;
  2176  01D5  085D               	movf	TransmittedDataHandler@value,w
  2177  01D6  00BC               	movwf	??_TransmittedDataHandler
  2178  01D7  083C               	movf	??_TransmittedDataHandler,w
  2179  01D8  00D5               	movwf	TransmittedDataHandler@slask_746
  2180                           
  2181                           ;functions.c: 139: TransmittString(slask);
  2182  01D9  3055               	movlw	(low (TransmittedDataHandler@slask_746| 0))& (0+255)
  2183  01DA  00B5               	movwf	TransmittString@dataString
  2184  01DB  3000               	movlw	0
  2185  01DC  00B6               	movwf	TransmittString@dataString+1
  2186  01DD  120A  118A  23D7  120A  118A  	fcall	_TransmittString
  2187                           
  2188                           ;functions.c: 140: eeprom_write(addressDarknessValue,(unsigned char)value);
  2189  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  2190  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  2191  01E4  085D               	movf	TransmittedDataHandler@value,w
  2192  01E5  00BC               	movwf	??_TransmittedDataHandler
  2193  01E6  083C               	movf	??_TransmittedDataHandler,w
  2194  01E7  00A0               	movwf	eeprom_write@value
  2195  01E8  087C               	movf	_addressDarknessValue,w
  2196  01E9  120A  158A  25E2   	fcall	_eeprom_write
  2197  01EC  0008               	return
  2198  01ED                     __end_of_TransmittedDataHandler:	
  2199                           
  2200                           	psect	text5
  2201  0F0A                     __ptext5:	
  2202 ;; *************** function _strstr *****************
  2203 ;; Defined at:
  2204 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strstr.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  s1              1    wreg     PTR const unsigned char 
  2207 ;;		 -> NULL(0), TransmittedString(30), 
  2208 ;;  s2              1   14[BANK0 ] PTR const unsigned char 
  2209 ;;		 -> STR_15(6), STR_14(5), STR_13(8), STR_10(7), 
  2210 ;;		 -> STR_7(9), STR_6(7), STR_5(8), STR_4(7), 
  2211 ;;		 -> STR_3(7), STR_2(8), STR_1(8), 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  s1              1   18[BANK0 ] PTR const unsigned char 
  2214 ;;		 -> NULL(0), TransmittedString(30), 
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      PTR unsigned char 
  2217 ;; Registers used:
  2218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2224 ;;      Params:         0       1       0       0       0
  2225 ;;      Locals:         0       1       0       0       0
  2226 ;;      Temps:          0       3       0       0       0
  2227 ;;      Totals:         0       5       0       0       0
  2228 ;;Total ram usage:        5 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    3
  2231 ;; This function calls:
  2232 ;;		_strchr
  2233 ;;		_strlen
  2234 ;;		_strncmp
  2235 ;; This function is called by:
  2236 ;;		_TransmittedDataHandler
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           
  2241                           ;psect for function _strstr
  2242  0F0A                     _strstr:	
  2243                           
  2244                           ;incstack = 0
  2245                           ; Regs used in _strstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2246                           ;strstr@s1 stored from wreg
  2247  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  2248  0F0B  1303               	bcf	3,6	;RP1=0, select bank0
  2249  0F0C  00B2               	movwf	strstr@s1
  2250  0F0D  2F45               	goto	l1930
  2251  0F0E                     l1922:	
  2252  0F0E  082E               	movf	strstr@s2,w
  2253  0F0F  00AF               	movwf	??_strstr
  2254  0F10  082F               	movf	??_strstr,w
  2255  0F11  00A8               	movwf	strncmp@s2
  2256  0F12  082E               	movf	strstr@s2,w
  2257  0F13  120A  158A  25B6  120A  158A  	fcall	_strlen
  2258  0F18  1283               	bcf	3,5	;RP0=0, select bank0
  2259  0F19  1303               	bcf	3,6	;RP1=0, select bank0
  2260  0F1A  0821               	movf	?_strlen+1,w
  2261  0F1B  00AA               	movwf	strncmp@len+1
  2262  0F1C  0820               	movf	?_strlen,w
  2263  0F1D  00A9               	movwf	strncmp@len
  2264  0F1E  0832               	movf	strstr@s1,w
  2265  0F1F  120A  158A  26C6  120A  158A  	fcall	_strncmp
  2266  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  2267  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  2268  0F26  0828               	movf	?_strncmp,w
  2269  0F27  0429               	iorwf	?_strncmp+1,w
  2270  0F28  1D03               	btfss	3,2
  2271  0F29  2F2C               	goto	l1928
  2272  0F2A  0832               	movf	strstr@s1,w
  2273  0F2B  0008               	return
  2274  0F2C                     l1928:	
  2275  0F2C  082E               	movf	strstr@s2,w
  2276  0F2D  0084               	movwf	4
  2277  0F2E  120A  118A  260A  120A  158A  	fcall	stringdir
  2278  0F33  00AF               	movwf	??_strstr
  2279  0F34  01B0               	clrf	??_strstr+1
  2280  0F35  082F               	movf	??_strstr,w
  2281  0F36  00A0               	movwf	strchr@chr
  2282  0F37  0830               	movf	??_strstr+1,w
  2283  0F38  00A1               	movwf	strchr@chr+1
  2284  0F39  0832               	movf	strstr@s1,w
  2285  0F3A  3E01               	addlw	1
  2286  0F3B  120A  158A  24B8  120A  158A  	fcall	_strchr
  2287  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  2288  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  2289  0F42  00B1               	movwf	??_strstr+2
  2290  0F43  0831               	movf	??_strstr+2,w
  2291  0F44  00B2               	movwf	strstr@s1
  2292  0F45                     l1930:	
  2293  0F45  0832               	movf	strstr@s1,w
  2294  0F46  1903               	btfsc	3,2
  2295  0F47  2F4E               	goto	l1934
  2296  0F48  0832               	movf	strstr@s1,w
  2297  0F49  0084               	movwf	4
  2298  0F4A  1383               	bcf	3,7	;select IRP bank0
  2299  0F4B  0800               	movf	0,w
  2300  0F4C  1D03               	btfss	3,2
  2301  0F4D  2F0E               	goto	l1922
  2302  0F4E                     l1934:	
  2303  0F4E  3000               	movlw	0
  2304  0F4F  0008               	return
  2305  0F50                     __end_of_strstr:	
  2306                           
  2307                           	psect	text6
  2308  0EC6                     __ptext6:	
  2309 ;; *************** function _strncmp *****************
  2310 ;; Defined at:
  2311 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strncmp.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;  s1              1    wreg     PTR const unsigned char 
  2314 ;;		 -> NULL(0), TransmittedString(30), 
  2315 ;;  s2              1    8[BANK0 ] PTR const unsigned char 
  2316 ;;		 -> STR_15(6), STR_14(5), STR_13(8), STR_10(7), 
  2317 ;;		 -> STR_7(9), STR_6(7), STR_5(8), STR_4(7), 
  2318 ;;		 -> STR_3(7), STR_2(8), STR_1(8), 
  2319 ;;  len             2    9[BANK0 ] unsigned int 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  2322 ;;		 -> NULL(0), TransmittedString(30), 
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  2    8[BANK0 ] int 
  2325 ;; Registers used:
  2326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2332 ;;      Params:         0       3       0       0       0
  2333 ;;      Locals:         0       1       0       0       0
  2334 ;;      Temps:          0       2       0       0       0
  2335 ;;      Totals:         0       6       0       0       0
  2336 ;;Total ram usage:        6 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    2
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_strstr
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           
  2347                           ;psect for function _strncmp
  2348  0EC6                     _strncmp:	
  2349                           
  2350                           ;incstack = 0
  2351                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
  2352                           ;strncmp@s1 stored from wreg
  2353  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  2354  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  2355  0EC8  00AD               	movwf	strncmp@s1
  2356  0EC9                     l950:	
  2357  0EC9  3001               	movlw	1
  2358  0ECA  02A9               	subwf	strncmp@len,f
  2359  0ECB  3000               	movlw	0
  2360  0ECC  1C03               	skipc
  2361  0ECD  03AA               	decf	strncmp@len+1,f
  2362  0ECE  02AA               	subwf	strncmp@len+1,f
  2363  0ECF  0A29               	incf	strncmp@len,w
  2364  0ED0  1903               	btfsc	3,2
  2365  0ED1  0A2A               	incf	strncmp@len+1,w
  2366  0ED2  1903               	btfsc	3,2
  2367  0ED3  2F07               	goto	l1898
  2368  0ED4  082D               	movf	strncmp@s1,w
  2369  0ED5  0084               	movwf	4
  2370  0ED6  1383               	bcf	3,7	;select IRP bank0
  2371  0ED7  0800               	movf	0,w
  2372  0ED8  1903               	btfsc	3,2
  2373  0ED9  2EE8               	goto	l1892
  2374  0EDA  0828               	movf	strncmp@s2,w
  2375  0EDB  0084               	movwf	4
  2376  0EDC  120A  118A  260A  120A  158A  	fcall	stringdir
  2377  0EE1  00AB               	movwf	??_strncmp
  2378  0EE2  082D               	movf	strncmp@s1,w
  2379  0EE3  0084               	movwf	4
  2380  0EE4  0800               	movf	0,w
  2381  0EE5  062B               	xorwf	??_strncmp,w
  2382  0EE6  1903               	skipnz
  2383  0EE7  2EFE               	goto	l1896
  2384  0EE8                     l1892:	
  2385  0EE8  0828               	movf	strncmp@s2,w
  2386  0EE9  0084               	movwf	4
  2387  0EEA  120A  118A  260A   	fcall	stringdir
  2388  0EED  00AB               	movwf	??_strncmp
  2389  0EEE  01AC               	clrf	??_strncmp+1
  2390  0EEF  09AB               	comf	??_strncmp,f
  2391  0EF0  09AC               	comf	??_strncmp+1,f
  2392  0EF1  0AAB               	incf	??_strncmp,f
  2393  0EF2  1903               	skipnz
  2394  0EF3  0AAC               	incf	??_strncmp+1,f
  2395  0EF4  082D               	movf	strncmp@s1,w
  2396  0EF5  0084               	movwf	4
  2397  0EF6  0800               	movf	0,w
  2398  0EF7  072B               	addwf	??_strncmp,w
  2399  0EF8  00A8               	movwf	?_strncmp
  2400  0EF9  082C               	movf	??_strncmp+1,w
  2401  0EFA  1803               	skipnc
  2402  0EFB  0A2C               	incf	??_strncmp+1,w
  2403  0EFC  00A9               	movwf	?_strncmp+1
  2404  0EFD  0008               	return
  2405  0EFE                     l1896:	
  2406  0EFE  3001               	movlw	1
  2407  0EFF  00AB               	movwf	??_strncmp
  2408  0F00  082B               	movf	??_strncmp,w
  2409  0F01  07AD               	addwf	strncmp@s1,f
  2410  0F02  3001               	movlw	1
  2411  0F03  00AB               	movwf	??_strncmp
  2412  0F04  082B               	movf	??_strncmp,w
  2413  0F05  07A8               	addwf	strncmp@s2,f
  2414  0F06  2EC9               	goto	l950
  2415  0F07                     l1898:	
  2416  0F07  01A8               	clrf	?_strncmp
  2417  0F08  01A9               	clrf	?_strncmp+1
  2418  0F09  0008               	return
  2419  0F0A                     __end_of_strncmp:	
  2420                           
  2421                           	psect	text7
  2422  0DB6                     __ptext7:	
  2423 ;; *************** function _strlen *****************
  2424 ;; Defined at:
  2425 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strlen.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;  s               1    wreg     PTR const unsigned char 
  2428 ;;		 -> STR_15(6), STR_14(5), STR_13(8), STR_10(7), 
  2429 ;;		 -> STR_7(9), STR_6(7), STR_5(8), STR_4(7), 
  2430 ;;		 -> STR_3(7), STR_2(8), STR_1(8), 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  s               1    6[BANK0 ] PTR const unsigned char 
  2433 ;;		 -> STR_15(6), STR_14(5), STR_13(8), STR_10(7), 
  2434 ;;		 -> STR_7(9), STR_6(7), STR_5(8), STR_4(7), 
  2435 ;;		 -> STR_3(7), STR_2(8), STR_1(8), 
  2436 ;;  cp              1    7[BANK0 ] PTR const unsigned char 
  2437 ;;		 -> STR_15(6), STR_14(5), STR_13(8), STR_10(7), 
  2438 ;;		 -> STR_7(9), STR_6(7), STR_5(8), STR_4(7), 
  2439 ;;		 -> STR_3(7), STR_2(8), STR_1(8), 
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  2    0[BANK0 ] unsigned int 
  2442 ;; Registers used:
  2443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2449 ;;      Params:         0       2       0       0       0
  2450 ;;      Locals:         0       2       0       0       0
  2451 ;;      Temps:          0       4       0       0       0
  2452 ;;      Totals:         0       8       0       0       0
  2453 ;;Total ram usage:        8 bytes
  2454 ;; Hardware stack levels used:    1
  2455 ;; Hardware stack levels required when called:    2
  2456 ;; This function calls:
  2457 ;;		Nothing
  2458 ;; This function is called by:
  2459 ;;		_strstr
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           
  2464                           ;psect for function _strlen
  2465  0DB6                     _strlen:	
  2466                           
  2467                           ;incstack = 0
  2468                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
  2469                           ;strlen@s stored from wreg
  2470  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  2471  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  2472  0DB8  00A6               	movwf	strlen@s
  2473  0DB9  0826               	movf	strlen@s,w
  2474  0DBA  00A2               	movwf	??_strlen
  2475  0DBB  0822               	movf	??_strlen,w
  2476  0DBC  00A7               	movwf	strlen@cp
  2477  0DBD                     l1880:	
  2478  0DBD  0827               	movf	strlen@cp,w
  2479  0DBE  0084               	movwf	4
  2480  0DBF  120A  118A  260A  120A  158A  	fcall	stringdir
  2481  0DC4  3A00               	xorlw	0
  2482  0DC5  1903               	btfsc	3,2
  2483  0DC6  2DCC               	goto	l1882
  2484  0DC7  3001               	movlw	1
  2485  0DC8  00A2               	movwf	??_strlen
  2486  0DC9  0822               	movf	??_strlen,w
  2487  0DCA  07A7               	addwf	strlen@cp,f
  2488  0DCB  2DBD               	goto	l1880
  2489  0DCC                     l1882:	
  2490  0DCC  0826               	movf	strlen@s,w
  2491  0DCD  00A2               	movwf	??_strlen
  2492  0DCE  3080               	movlw	128
  2493  0DCF  00A3               	movwf	??_strlen+1
  2494  0DD0  09A2               	comf	??_strlen,f
  2495  0DD1  09A3               	comf	??_strlen+1,f
  2496  0DD2  0AA2               	incf	??_strlen,f
  2497  0DD3  1903               	skipnz
  2498  0DD4  0AA3               	incf	??_strlen+1,f
  2499  0DD5  0827               	movf	strlen@cp,w
  2500  0DD6  00A4               	movwf	??_strlen+2
  2501  0DD7  3080               	movlw	128
  2502  0DD8  00A5               	movwf	??_strlen+3
  2503  0DD9  0822               	movf	??_strlen,w
  2504  0DDA  0724               	addwf	??_strlen+2,w
  2505  0DDB  00A0               	movwf	?_strlen
  2506  0DDC  0823               	movf	??_strlen+1,w
  2507  0DDD  1803               	skipnc
  2508  0DDE  0A23               	incf	??_strlen+1,w
  2509  0DDF  0725               	addwf	??_strlen+3,w
  2510  0DE0  00A1               	movwf	?_strlen+1
  2511  0DE1  0008               	return
  2512  0DE2                     __end_of_strlen:	
  2513                           
  2514                           	psect	text8
  2515  0CB8                     __ptext8:	
  2516 ;; *************** function _strchr *****************
  2517 ;; Defined at:
  2518 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strchr.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  ptr             1    wreg     PTR const unsigned char 
  2521 ;;		 -> NULL(0), TransmittedString(30), 
  2522 ;;  chr             2    0[BANK0 ] int 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  ptr             1    2[BANK0 ] PTR const unsigned char 
  2525 ;;		 -> NULL(0), TransmittedString(30), 
  2526 ;; Return value:  Size  Location     Type
  2527 ;;                  1    wreg      PTR unsigned char 
  2528 ;; Registers used:
  2529 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2530 ;; Tracked objects:
  2531 ;;		On entry : 0/0
  2532 ;;		On exit  : 0/0
  2533 ;;		Unchanged: 0/0
  2534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2535 ;;      Params:         0       2       0       0       0
  2536 ;;      Locals:         0       1       0       0       0
  2537 ;;      Temps:          0       0       0       0       0
  2538 ;;      Totals:         0       3       0       0       0
  2539 ;;Total ram usage:        3 bytes
  2540 ;; Hardware stack levels used:    1
  2541 ;; Hardware stack levels required when called:    2
  2542 ;; This function calls:
  2543 ;;		Nothing
  2544 ;; This function is called by:
  2545 ;;		_strstr
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           
  2550                           ;psect for function _strchr
  2551  0CB8                     _strchr:	
  2552                           
  2553                           ;incstack = 0
  2554                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0]
  2555                           ;strchr@ptr stored from wreg
  2556  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0CBA  00A2               	movwf	strchr@ptr
  2559  0CBB                     l938:	
  2560  0CBB  0822               	movf	strchr@ptr,w
  2561  0CBC  0084               	movwf	4
  2562  0CBD  1383               	bcf	3,7	;select IRP bank0
  2563  0CBE  0800               	movf	0,w
  2564  0CBF  0620               	xorwf	strchr@chr,w
  2565  0CC0  1D03               	skipz
  2566  0CC1  2CC4               	goto	l1908
  2567  0CC2  0822               	movf	strchr@ptr,w
  2568  0CC3  0008               	return
  2569  0CC4                     l1908:	
  2570  0CC4  0822               	movf	strchr@ptr,w
  2571  0CC5  0084               	movwf	4
  2572  0CC6  3001               	movlw	1
  2573  0CC7  07A2               	addwf	strchr@ptr,f
  2574  0CC8  0800               	movf	0,w
  2575  0CC9  1D03               	btfss	3,2
  2576  0CCA  2CBB               	goto	l938
  2577  0CCB  3000               	movlw	0
  2578  0CCC  0008               	return
  2579  0CCD                     __end_of_strchr:	
  2580                           
  2581                           	psect	text9
  2582  0DE2                     __ptext9:	
  2583 ;; *************** function _eeprom_write *****************
  2584 ;; Defined at:
  2585 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eewrite.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  addr            1    wreg     unsigned char 
  2588 ;;  value           1    0[BANK0 ] unsigned char 
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;  addr            1    2[BANK0 ] unsigned char 
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  1    wreg      void 
  2593 ;; Registers used:
  2594 ;;		wreg, status,2, status,0
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2600 ;;      Params:         0       1       0       0       0
  2601 ;;      Locals:         0       1       0       0       0
  2602 ;;      Temps:          0       1       0       0       0
  2603 ;;      Totals:         0       3       0       0       0
  2604 ;;Total ram usage:        3 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    2
  2607 ;; This function calls:
  2608 ;;		Nothing
  2609 ;; This function is called by:
  2610 ;;		_TransmittedDataHandler
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           
  2615                           ;psect for function _eeprom_write
  2616  0DE2                     _eeprom_write:	
  2617                           
  2618                           ;incstack = 0
  2619                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2620                           ;eeprom_write@addr stored from wreg
  2621  0DE2  1283               	bcf	3,5	;RP0=0, select bank0
  2622  0DE3  1303               	bcf	3,6	;RP1=0, select bank0
  2623  0DE4  00A2               	movwf	eeprom_write@addr
  2624  0DE5                     l456:	
  2625  0DE5  1683               	bsf	3,5	;RP0=1, select bank3
  2626  0DE6  1703               	bsf	3,6	;RP1=1, select bank3
  2627  0DE7  188C               	btfsc	12,1	;volsfr
  2628  0DE8  2DE5               	goto	l456
  2629  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  2630  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  2631  0DEB  0822               	movf	eeprom_write@addr,w
  2632  0DEC  1283               	bcf	3,5	;RP0=0, select bank2
  2633  0DED  1703               	bsf	3,6	;RP1=1, select bank2
  2634  0DEE  008D               	movwf	13	;volatile
  2635  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  2636  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  2637  0DF1  0820               	movf	eeprom_write@value,w
  2638  0DF2  1283               	bcf	3,5	;RP0=0, select bank2
  2639  0DF3  1703               	bsf	3,6	;RP1=1, select bank2
  2640  0DF4  008C               	movwf	12	;volatile
  2641  0DF5  303F               	movlw	63
  2642  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  2643  0DF7  1303               	bcf	3,6	;RP1=0, select bank0
  2644  0DF8  00A1               	movwf	??_eeprom_write
  2645  0DF9  0821               	movf	??_eeprom_write,w
  2646  0DFA  1683               	bsf	3,5	;RP0=1, select bank3
  2647  0DFB  1703               	bsf	3,6	;RP1=1, select bank3
  2648  0DFC  058C               	andwf	12,f	;volsfr
  2649  0DFD  1283               	bcf	3,5	;RP0=0, select bank0
  2650  0DFE  1303               	bcf	3,6	;RP1=0, select bank0
  2651  0DFF  1003               	bcf	3,0	;volatile
  2652  0E00  1B8B               	btfsc	11,7	;volatile
  2653  0E01  1403               	bsf	3,0	;volatile
  2654  0E02  138B               	bcf	11,7	;volatile
  2655  0E03  1683               	bsf	3,5	;RP0=1, select bank3
  2656  0E04  1703               	bsf	3,6	;RP1=1, select bank3
  2657  0E05  150C               	bsf	12,2	;volsfr
  2658  0E06  3055               	movlw	85
  2659  0E07  008D               	movwf	13	;volsfr
  2660  0E08  30AA               	movlw	170
  2661  0E09  008D               	movwf	13	;volsfr
  2662  0E0A  148C               	bsf	12,1	;volsfr
  2663  0E0B  110C               	bcf	12,2	;volsfr
  2664  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0E0D  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0E0E  1C03               	btfss	3,0	;volatile
  2667  0E0F  0008               	return
  2668  0E10  178B               	bsf	11,7	;volatile
  2669  0E11  0008               	return
  2670  0E12                     __end_of_eeprom_write:	
  2671                           
  2672                           	psect	text10
  2673  06AB                     __ptext10:	
  2674 ;; *************** function _atoi *****************
  2675 ;; Defined at:
  2676 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\atoi.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;  s               1    wreg     PTR const unsigned char 
  2679 ;;		 -> TransmittedString(30), 
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  2682 ;;		 -> TransmittedString(30), 
  2683 ;;  a               2   11[BANK0 ] int 
  2684 ;;  sign            1   10[BANK0 ] unsigned char 
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  2    6[BANK0 ] int 
  2687 ;; Registers used:
  2688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2694 ;;      Params:         0       2       0       0       0
  2695 ;;      Locals:         0       4       0       0       0
  2696 ;;      Temps:          0       2       0       0       0
  2697 ;;      Totals:         0       8       0       0       0
  2698 ;;Total ram usage:        8 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    3
  2701 ;; This function calls:
  2702 ;;		___wmul
  2703 ;;		_isdigit
  2704 ;; This function is called by:
  2705 ;;		_TransmittedDataHandler
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           
  2710                           ;psect for function _atoi
  2711  06AB                     _atoi:	
  2712                           
  2713                           ;incstack = 0
  2714                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2715                           ;atoi@s stored from wreg
  2716  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  2717  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  2718  06AD  00AD               	movwf	atoi@s
  2719  06AE                     l2002:	
  2720  06AE  082D               	movf	atoi@s,w
  2721  06AF  0084               	movwf	4
  2722  06B0  3020               	movlw	32
  2723  06B1  1383               	bcf	3,7	;select IRP bank0
  2724  06B2  0600               	xorwf	0,w
  2725  06B3  1D03               	btfss	3,2
  2726  06B4  2EBA               	goto	l2004
  2727  06B5                     l2000:	
  2728  06B5  3001               	movlw	1
  2729  06B6  00A8               	movwf	??_atoi
  2730  06B7  0828               	movf	??_atoi,w
  2731  06B8  07AD               	addwf	atoi@s,f
  2732  06B9  2EAE               	goto	l2002
  2733  06BA                     l2004:	
  2734  06BA  082D               	movf	atoi@s,w
  2735  06BB  0084               	movwf	4
  2736  06BC  3009               	movlw	9
  2737  06BD  0600               	xorwf	0,w
  2738  06BE  1903               	btfsc	3,2
  2739  06BF  2EB5               	goto	l2000
  2740  06C0  01AB               	clrf	atoi@a
  2741  06C1  01AC               	clrf	atoi@a+1
  2742  06C2  01AA               	clrf	atoi@sign
  2743  06C3  082D               	movf	atoi@s,w
  2744  06C4  0084               	movwf	4
  2745  06C5  302D               	movlw	45
  2746  06C6  0600               	xorwf	0,w
  2747  06C7  1D03               	btfss	3,2
  2748  06C8  2ECE               	goto	l2012
  2749  06C9  3001               	movlw	1
  2750  06CA  00A8               	movwf	??_atoi
  2751  06CB  0828               	movf	??_atoi,w
  2752  06CC  07AA               	addwf	atoi@sign,f
  2753  06CD  2ED4               	goto	l2018
  2754  06CE                     l2012:	
  2755  06CE  082D               	movf	atoi@s,w
  2756  06CF  0084               	movwf	4
  2757  06D0  302B               	movlw	43
  2758  06D1  0600               	xorwf	0,w
  2759  06D2  1D03               	btfss	3,2
  2760  06D3  2ED8               	goto	l2020
  2761  06D4                     l2018:	
  2762  06D4  3001               	movlw	1
  2763  06D5  00A8               	movwf	??_atoi
  2764  06D6  0828               	movf	??_atoi,w
  2765  06D7  07AD               	addwf	atoi@s,f
  2766  06D8                     l2020:	
  2767  06D8  082D               	movf	atoi@s,w
  2768  06D9  0084               	movwf	4
  2769  06DA  0800               	movf	0,w
  2770  06DB  120A  158A  2474  120A  118A  	fcall	_isdigit
  2771  06E0  1C03               	btfss	3,0
  2772  06E1  2F06               	goto	l2022
  2773  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  2774  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  2775  06E4  082C               	movf	atoi@a+1,w
  2776  06E5  00A1               	movwf	___wmul@multiplier+1
  2777  06E6  082B               	movf	atoi@a,w
  2778  06E7  00A0               	movwf	___wmul@multiplier
  2779  06E8  300A               	movlw	10
  2780  06E9  00A2               	movwf	___wmul@multiplicand
  2781  06EA  3000               	movlw	0
  2782  06EB  00A3               	movwf	___wmul@multiplicand+1
  2783  06EC  120A  158A  251D  120A  118A  	fcall	___wmul
  2784  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  2785  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  2786  06F3  082D               	movf	atoi@s,w
  2787  06F4  0084               	movwf	4
  2788  06F5  1383               	bcf	3,7	;select IRP bank0
  2789  06F6  0800               	movf	0,w
  2790  06F7  0720               	addwf	?___wmul,w
  2791  06F8  00A8               	movwf	??_atoi
  2792  06F9  0821               	movf	?___wmul+1,w
  2793  06FA  1803               	skipnc
  2794  06FB  0A21               	incf	?___wmul+1,w
  2795  06FC  00A9               	movwf	??_atoi+1
  2796  06FD  0828               	movf	??_atoi,w
  2797  06FE  3ED0               	addlw	208
  2798  06FF  00AB               	movwf	atoi@a
  2799  0700  0829               	movf	??_atoi+1,w
  2800  0701  1803               	skipnc
  2801  0702  3E01               	addlw	1
  2802  0703  3EFF               	addlw	255
  2803  0704  00AC               	movwf	atoi@a+1
  2804  0705  2ED4               	goto	l2018
  2805  0706                     l2022:	
  2806  0706  1283               	bcf	3,5	;RP0=0, select bank0
  2807  0707  1303               	bcf	3,6	;RP1=0, select bank0
  2808  0708  082A               	movf	atoi@sign,w
  2809  0709  1903               	btfsc	3,2
  2810  070A  2F17               	goto	l2028
  2811  070B  092B               	comf	atoi@a,w
  2812  070C  00A8               	movwf	??_atoi
  2813  070D  092C               	comf	atoi@a+1,w
  2814  070E  00A9               	movwf	??_atoi+1
  2815  070F  0AA8               	incf	??_atoi,f
  2816  0710  1903               	skipnz
  2817  0711  0AA9               	incf	??_atoi+1,f
  2818  0712  0828               	movf	??_atoi,w
  2819  0713  00A6               	movwf	?_atoi
  2820  0714  0829               	movf	??_atoi+1,w
  2821  0715  00A7               	movwf	?_atoi+1
  2822  0716  0008               	return
  2823  0717                     l2028:	
  2824  0717  082C               	movf	atoi@a+1,w
  2825  0718  00A7               	movwf	?_atoi+1
  2826  0719  082B               	movf	atoi@a,w
  2827  071A  00A6               	movwf	?_atoi
  2828  071B  0008               	return
  2829  071C                     __end_of_atoi:	
  2830                           
  2831                           	psect	text11
  2832  0C74                     __ptext11:	
  2833 ;; *************** function _isdigit *****************
  2834 ;; Defined at:
  2835 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;  c               1    wreg     unsigned char 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  c               1    1[BANK0 ] unsigned char 
  2840 ;; Return value:  Size  Location     Type
  2841 ;;		None               void
  2842 ;; Registers used:
  2843 ;;		wreg, status,2, status,0
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2849 ;;      Params:         0       0       0       0       0
  2850 ;;      Locals:         0       2       0       0       0
  2851 ;;      Temps:          0       0       0       0       0
  2852 ;;      Totals:         0       2       0       0       0
  2853 ;;Total ram usage:        2 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    2
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_atoi
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           
  2864                           ;psect for function _isdigit
  2865  0C74                     _isdigit:	
  2866                           
  2867                           ;incstack = 0
  2868                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2869                           ;isdigit@c stored from wreg
  2870  0C74  1283               	bcf	3,5	;RP0=0, select bank0
  2871  0C75  1303               	bcf	3,6	;RP1=0, select bank0
  2872  0C76  00A1               	movwf	isdigit@c
  2873  0C77  01A0               	clrf	_isdigit$1118
  2874  0C78  303A               	movlw	58
  2875  0C79  0221               	subwf	isdigit@c,w
  2876  0C7A  1803               	skipnc
  2877  0C7B  2C82               	goto	l1872
  2878  0C7C  3030               	movlw	48
  2879  0C7D  0221               	subwf	isdigit@c,w
  2880  0C7E  1C03               	skipc
  2881  0C7F  2C82               	goto	l1872
  2882  0C80  01A0               	clrf	_isdigit$1118
  2883  0C81  0AA0               	incf	_isdigit$1118,f
  2884  0C82                     l1872:	
  2885  0C82  0C20               	rrf	_isdigit$1118,w
  2886  0C83  0008               	return
  2887  0C84                     __end_of_isdigit:	
  2888                           
  2889                           	psect	text12
  2890  0D1D                     __ptext12:	
  2891 ;; *************** function ___wmul *****************
  2892 ;; Defined at:
  2893 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2896 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  product         2    4[BANK0 ] unsigned int 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  2    0[BANK0 ] unsigned int 
  2901 ;; Registers used:
  2902 ;;		wreg, status,2, status,0
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2908 ;;      Params:         0       4       0       0       0
  2909 ;;      Locals:         0       2       0       0       0
  2910 ;;      Temps:          0       0       0       0       0
  2911 ;;      Totals:         0       6       0       0       0
  2912 ;;Total ram usage:        6 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    2
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_atoi
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function ___wmul
  2924  0D1D                     ___wmul:	
  2925                           
  2926                           ;incstack = 0
  2927                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2928  0D1D  1283               	bcf	3,5	;RP0=0, select bank0
  2929  0D1E  1303               	bcf	3,6	;RP1=0, select bank0
  2930  0D1F  01A4               	clrf	___wmul@product
  2931  0D20  01A5               	clrf	___wmul@product+1
  2932  0D21                     l1852:	
  2933  0D21  1C20               	btfss	___wmul@multiplier,0
  2934  0D22  2D29               	goto	l546
  2935  0D23  0822               	movf	___wmul@multiplicand,w
  2936  0D24  07A4               	addwf	___wmul@product,f
  2937  0D25  1803               	skipnc
  2938  0D26  0AA5               	incf	___wmul@product+1,f
  2939  0D27  0823               	movf	___wmul@multiplicand+1,w
  2940  0D28  07A5               	addwf	___wmul@product+1,f
  2941  0D29                     l546:	
  2942  0D29  3001               	movlw	1
  2943  0D2A                     u1155:	
  2944  0D2A  1003               	clrc
  2945  0D2B  0DA2               	rlf	___wmul@multiplicand,f
  2946  0D2C  0DA3               	rlf	___wmul@multiplicand+1,f
  2947  0D2D  3EFF               	addlw	-1
  2948  0D2E  1D03               	skipz
  2949  0D2F  2D2A               	goto	u1155
  2950  0D30  3001               	movlw	1
  2951  0D31                     u1165:	
  2952  0D31  1003               	clrc
  2953  0D32  0CA1               	rrf	___wmul@multiplier+1,f
  2954  0D33  0CA0               	rrf	___wmul@multiplier,f
  2955  0D34  3EFF               	addlw	-1
  2956  0D35  1D03               	skipz
  2957  0D36  2D31               	goto	u1165
  2958  0D37  0820               	movf	___wmul@multiplier,w
  2959  0D38  0421               	iorwf	___wmul@multiplier+1,w
  2960  0D39  1D03               	btfss	3,2
  2961  0D3A  2D21               	goto	l1852
  2962  0D3B  0825               	movf	___wmul@product+1,w
  2963  0D3C  00A1               	movwf	?___wmul+1
  2964  0D3D  0824               	movf	___wmul@product,w
  2965  0D3E  00A0               	movwf	?___wmul
  2966  0D3F  0008               	return
  2967  0D40                     __end_of___wmul:	
  2968                           
  2969                           	psect	text13
  2970  0C36                     __ptext13:	
  2971 ;; *************** function _OperationMode *****************
  2972 ;; Defined at:
  2973 ;;		line 878 in file "functions.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;		None
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;  bracketStatu    1    1[BANK0 ] unsigned char 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      unsigned char 
  2980 ;; Registers used:
  2981 ;;		wreg, status,2
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2987 ;;      Params:         0       0       0       0       0
  2988 ;;      Locals:         0       1       0       0       0
  2989 ;;      Temps:          0       1       0       0       0
  2990 ;;      Totals:         0       2       0       0       0
  2991 ;;Total ram usage:        2 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    2
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		_main
  2998 ;;		_TransmittedDataHandler
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           
  3003                           ;psect for function _OperationMode
  3004  0C36                     _OperationMode:	
  3005                           
  3006                           ;functions.c: 880: unsigned char bracketStatus;
  3007                           ;functions.c: 881: bracketStatus = ((~PORTB) & 0b00000111) ;
  3008                           
  3009                           ;incstack = 0
  3010                           ; Regs used in _OperationMode: [wreg+status,2]
  3011  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  3012  0C37  1303               	bcf	3,6	;RP1=0, select bank0
  3013  0C38  0906               	comf	6,w	;volatile
  3014  0C39  3907               	andlw	7
  3015  0C3A  00A0               	movwf	??_OperationMode
  3016  0C3B  0820               	movf	??_OperationMode,w
  3017  0C3C  00A1               	movwf	OperationMode@bracketStatus
  3018                           
  3019                           ;functions.c: 883: return bracketStatus;
  3020  0C3D  0821               	movf	OperationMode@bracketStatus,w
  3021  0C3E  0008               	return
  3022  0C3F                     __end_of_OperationMode:	
  3023                           
  3024                           	psect	text14
  3025  0C66                     __ptext14:	
  3026 ;; *************** function _ReadFIFO *****************
  3027 ;; Defined at:
  3028 ;;		line 695 in file "functions.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  value           1    4[BANK0 ] unsigned char 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      unsigned char 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2, status,0, pclath, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3042 ;;      Params:         0       0       0       0       0
  3043 ;;      Locals:         0       1       0       0       0
  3044 ;;      Temps:          0       1       0       0       0
  3045 ;;      Totals:         0       2       0       0       0
  3046 ;;Total ram usage:        2 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    4
  3049 ;; This function calls:
  3050 ;;		_ReadSPI
  3051 ;; This function is called by:
  3052 ;;		_TransiverReadFIFO
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           
  3057                           ;psect for function _ReadFIFO
  3058  0C66                     _ReadFIFO:	
  3059                           
  3060                           ;functions.c: 697: BYTE value;
  3061                           ;functions.c: 698: PORTAbits.RA5 = 0;
  3062                           
  3063                           ;incstack = 0
  3064                           ; Regs used in _ReadFIFO: [wreg+status,2+status,0+pclath+cstack]
  3065  0C66  1283               	bcf	3,5	;RP0=0, select bank0
  3066  0C67  1303               	bcf	3,6	;RP1=0, select bank0
  3067  0C68  1285               	bcf	5,5	;volatile
  3068                           
  3069                           ;functions.c: 699: value = ReadSPI();
  3070  0C69  120A  158A  241D   	fcall	_ReadSPI
  3071  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  3072  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  3073  0C6E  00A3               	movwf	??_ReadFIFO
  3074  0C6F  0823               	movf	??_ReadFIFO,w
  3075  0C70  00A4               	movwf	ReadFIFO@value
  3076                           
  3077                           ;functions.c: 700: PORTAbits.RA5 = 1;
  3078  0C71  1685               	bsf	5,5	;volatile
  3079                           
  3080                           ;functions.c: 701: return value;
  3081  0C72  0824               	movf	ReadFIFO@value,w
  3082  0C73  0008               	return
  3083  0C74                     __end_of_ReadFIFO:	
  3084                           
  3085                           	psect	text15
  3086  02ED                     __ptext15:	
  3087 ;; *************** function _TransiverInit *****************
  3088 ;; Defined at:
  3089 ;;		line 460 in file "functions.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;		None
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;		None
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      void 
  3096 ;; Registers used:
  3097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3103 ;;      Params:         0       0       0       0       0
  3104 ;;      Locals:         0       0       0       0       0
  3105 ;;      Temps:          0       1       0       0       0
  3106 ;;      Totals:         0       1       0       0       0
  3107 ;;Total ram usage:        1 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    7
  3110 ;; This function calls:
  3111 ;;		_Blink
  3112 ;;		_FindChannel
  3113 ;;		_RegisterRead
  3114 ;;		_RegisterSet
  3115 ;;		_SetRFMode
  3116 ;; This function is called by:
  3117 ;;		_main
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           
  3122                           ;psect for function _TransiverInit
  3123  02ED                     _TransiverInit:	
  3124                           
  3125                           ;functions.c: 463: RegisterSet(0x00, 0x30);
  3126                           
  3127                           ;incstack = 0
  3128                           ; Regs used in _TransiverInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3129  02ED  3030               	movlw	48
  3130  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  3131  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  3132  02F0  00B5               	movwf	??_TransiverInit
  3133  02F1  0835               	movf	??_TransiverInit,w
  3134  02F2  00A7               	movwf	RegisterSet@value
  3135  02F3  3000               	movlw	0
  3136  02F4  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3137                           
  3138                           ;functions.c: 464: RegisterSet(0x01,(0xA8));
  3139  02F9  30A8               	movlw	168
  3140  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  3141  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  3142  02FC  00B5               	movwf	??_TransiverInit
  3143  02FD  0835               	movf	??_TransiverInit,w
  3144  02FE  00A7               	movwf	RegisterSet@value
  3145  02FF  3001               	movlw	1
  3146  0300  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3147                           
  3148                           ;functions.c: 465: RegisterSet(0x02, 0x09);
  3149  0305  3009               	movlw	9
  3150  0306  1283               	bcf	3,5	;RP0=0, select bank0
  3151  0307  1303               	bcf	3,6	;RP1=0, select bank0
  3152  0308  00B5               	movwf	??_TransiverInit
  3153  0309  0835               	movf	??_TransiverInit,w
  3154  030A  00A7               	movwf	RegisterSet@value
  3155  030B  3002               	movlw	2
  3156  030C  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3157                           
  3158                           ;functions.c: 466: RegisterSet(0x03, 0x07);
  3159  0311  3007               	movlw	7
  3160  0312  1283               	bcf	3,5	;RP0=0, select bank0
  3161  0313  1303               	bcf	3,6	;RP1=0, select bank0
  3162  0314  00B5               	movwf	??_TransiverInit
  3163  0315  0835               	movf	??_TransiverInit,w
  3164  0316  00A7               	movwf	RegisterSet@value
  3165  0317  3003               	movlw	3
  3166  0318  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3167                           
  3168                           ;functions.c: 467: RegisterSet(0x05,(0x0A));
  3169  031D  300A               	movlw	10
  3170  031E  1283               	bcf	3,5	;RP0=0, select bank0
  3171  031F  1303               	bcf	3,6	;RP1=0, select bank0
  3172  0320  00B5               	movwf	??_TransiverInit
  3173  0321  0835               	movf	??_TransiverInit,w
  3174  0322  00A7               	movwf	RegisterSet@value
  3175  0323  3005               	movlw	5
  3176  0324  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3177                           
  3178                           ;functions.c: 468: RegisterSet(0x0D,(0x00|0xB0|0x09));
  3179  0329  30B9               	movlw	185
  3180  032A  1283               	bcf	3,5	;RP0=0, select bank0
  3181  032B  1303               	bcf	3,6	;RP1=0, select bank0
  3182  032C  00B5               	movwf	??_TransiverInit
  3183  032D  0835               	movf	??_TransiverInit,w
  3184  032E  00A7               	movwf	RegisterSet@value
  3185  032F  300D               	movlw	13
  3186  0330  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3187                           
  3188                           ;functions.c: 469: RegisterSet(0x0E,(0x01|0x10|0x01));
  3189  0335  3011               	movlw	17
  3190  0336  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0337  1303               	bcf	3,6	;RP1=0, select bank0
  3192  0338  00B5               	movwf	??_TransiverInit
  3193  0339  0835               	movf	??_TransiverInit,w
  3194  033A  00A7               	movwf	RegisterSet@value
  3195  033B  300E               	movlw	14
  3196  033C  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3197                           
  3198                           ;functions.c: 470: RegisterSet(0x10, 0xA3);
  3199  0341  30A3               	movlw	163
  3200  0342  1283               	bcf	3,5	;RP0=0, select bank0
  3201  0343  1303               	bcf	3,6	;RP1=0, select bank0
  3202  0344  00B5               	movwf	??_TransiverInit
  3203  0345  0835               	movf	??_TransiverInit,w
  3204  0346  00A7               	movwf	RegisterSet@value
  3205  0347  3010               	movlw	16
  3206  0348  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3207                           
  3208                           ;functions.c: 471: RegisterSet(0x12,(0x18|0x20|0x06));
  3209  034D  303E               	movlw	62
  3210  034E  1283               	bcf	3,5	;RP0=0, select bank0
  3211  034F  1303               	bcf	3,6	;RP1=0, select bank0
  3212  0350  00B5               	movwf	??_TransiverInit
  3213  0351  0835               	movf	??_TransiverInit,w
  3214  0352  00A7               	movwf	RegisterSet@value
  3215  0353  3012               	movlw	18
  3216  0354  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3217                           
  3218                           ;functions.c: 472: RegisterSet(0x16,('S'));
  3219  0359  3053               	movlw	83
  3220  035A  1283               	bcf	3,5	;RP0=0, select bank0
  3221  035B  1303               	bcf	3,6	;RP1=0, select bank0
  3222  035C  00B5               	movwf	??_TransiverInit
  3223  035D  0835               	movf	??_TransiverInit,w
  3224  035E  00A7               	movwf	RegisterSet@value
  3225  035F  3016               	movlw	22
  3226  0360  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3227                           
  3228                           ;functions.c: 473: RegisterSet(0x17,('Y'));
  3229  0365  3059               	movlw	89
  3230  0366  1283               	bcf	3,5	;RP0=0, select bank0
  3231  0367  1303               	bcf	3,6	;RP1=0, select bank0
  3232  0368  00B5               	movwf	??_TransiverInit
  3233  0369  0835               	movf	??_TransiverInit,w
  3234  036A  00A7               	movwf	RegisterSet@value
  3235  036B  3017               	movlw	23
  3236  036C  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3237                           
  3238                           ;functions.c: 474: RegisterSet(0x18,('N'));
  3239  0371  304E               	movlw	78
  3240  0372  1283               	bcf	3,5	;RP0=0, select bank0
  3241  0373  1303               	bcf	3,6	;RP1=0, select bank0
  3242  0374  00B5               	movwf	??_TransiverInit
  3243  0375  0835               	movf	??_TransiverInit,w
  3244  0376  00A7               	movwf	RegisterSet@value
  3245  0377  3018               	movlw	24
  3246  0378  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3247                           
  3248                           ;functions.c: 475: RegisterSet(0x19,('C'));
  3249  037D  3043               	movlw	67
  3250  037E  1283               	bcf	3,5	;RP0=0, select bank0
  3251  037F  1303               	bcf	3,6	;RP1=0, select bank0
  3252  0380  00B5               	movwf	??_TransiverInit
  3253  0381  0835               	movf	??_TransiverInit,w
  3254  0382  00A7               	movwf	RegisterSet@value
  3255  0383  3019               	movlw	25
  3256  0384  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3257                           
  3258                           ;functions.c: 476: RegisterSet(0x1A, 0x72);
  3259  0389  3072               	movlw	114
  3260  038A  1283               	bcf	3,5	;RP0=0, select bank0
  3261  038B  1303               	bcf	3,6	;RP1=0, select bank0
  3262  038C  00B5               	movwf	??_TransiverInit
  3263  038D  0835               	movf	??_TransiverInit,w
  3264  038E  00A7               	movwf	RegisterSet@value
  3265  038F  301A               	movlw	26
  3266  0390  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3267                           
  3268                           ;functions.c: 477: RegisterSet(0x1B, 0x3C);
  3269  0395  303C               	movlw	60
  3270  0396  1283               	bcf	3,5	;RP0=0, select bank0
  3271  0397  1303               	bcf	3,6	;RP1=0, select bank0
  3272  0398  00B5               	movwf	??_TransiverInit
  3273  0399  0835               	movf	??_TransiverInit,w
  3274  039A  00A7               	movwf	RegisterSet@value
  3275  039B  301B               	movlw	27
  3276  039C  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3277                           
  3278                           ;functions.c: 478: RegisterSet(0x1F, 0x80);
  3279  03A1  3080               	movlw	128
  3280  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  3281  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  3282  03A4  00B5               	movwf	??_TransiverInit
  3283  03A5  0835               	movf	??_TransiverInit,w
  3284  03A6  00A7               	movwf	RegisterSet@value
  3285  03A7  301F               	movlw	31
  3286  03A8  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3287                           
  3288                           ;functions.c: 479: RegisterSet(0x00, (RegisterRead(0x00)|0x01));
  3289  03AD  3000               	movlw	0
  3290  03AE  120A  158A  2501  120A  118A  	fcall	_RegisterRead
  3291  03B3  3801               	iorlw	1
  3292  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  3293  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  3294  03B6  00B5               	movwf	??_TransiverInit
  3295  03B7  0835               	movf	??_TransiverInit,w
  3296  03B8  00A7               	movwf	RegisterSet@value
  3297  03B9  3000               	movlw	0
  3298  03BA  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3299                           
  3300                           ;functions.c: 481: if(FindChannel() == 1)
  3301  03BF  120A  118A  21ED  120A  118A  	fcall	_FindChannel
  3302  03C4  3A01               	xorlw	1
  3303  03C5  1D03               	skipz
  3304  03C6  2BD2               	goto	l2264
  3305                           
  3306                           ;functions.c: 482: Blink(1);
  3307  03C7  3001               	movlw	1
  3308  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  3309  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  3310  03CA  00A6               	movwf	Blink@n
  3311  03CB  3000               	movlw	0
  3312  03CC  00A7               	movwf	Blink@n+1
  3313  03CD  120A  158A  2612  120A  118A  	fcall	_Blink
  3314  03D2                     l2264:	
  3315                           
  3316                           ;functions.c: 483: SetRFMode(0x00);
  3317  03D2  3000               	movlw	0
  3318  03D3  120A  118A  278C   	fcall	_SetRFMode
  3319  03D6  0008               	return
  3320  03D7                     __end_of_TransiverInit:	
  3321                           
  3322                           	psect	text16
  3323  0E12                     __ptext16:	
  3324 ;; *************** function _Blink *****************
  3325 ;; Defined at:
  3326 ;;		line 608 in file "functions.c"
  3327 ;; Parameters:    Size  Location     Type
  3328 ;;  n               2    6[BANK0 ] int 
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;  i               2    9[BANK0 ] int 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      void 
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0, pclath, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3340 ;;      Params:         0       2       0       0       0
  3341 ;;      Locals:         0       2       0       0       0
  3342 ;;      Temps:          0       1       0       0       0
  3343 ;;      Totals:         0       5       0       0       0
  3344 ;;Total ram usage:        5 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    3
  3347 ;; This function calls:
  3348 ;;		_DelayDs
  3349 ;; This function is called by:
  3350 ;;		_TransiverInit
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           
  3355                           ;psect for function _Blink
  3356  0E12                     _Blink:	
  3357                           
  3358                           ;functions.c: 610: for(int i = 1;i<=n;i++)
  3359                           
  3360                           ;incstack = 0
  3361                           ; Regs used in _Blink: [wreg+status,2+status,0+pclath+cstack]
  3362  0E12  3001               	movlw	1
  3363  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  3364  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  3365  0E15  00A9               	movwf	Blink@i
  3366  0E16  3000               	movlw	0
  3367  0E17  00AA               	movwf	Blink@i+1
  3368  0E18                     l2184:	
  3369  0E18  0827               	movf	Blink@n+1,w
  3370  0E19  3A80               	xorlw	128
  3371  0E1A  00A8               	movwf	??_Blink
  3372  0E1B  082A               	movf	Blink@i+1,w
  3373  0E1C  3A80               	xorlw	128
  3374  0E1D  0228               	subwf	??_Blink,w
  3375  0E1E  1D03               	skipz
  3376  0E1F  2E22               	goto	u1715
  3377  0E20  0829               	movf	Blink@i,w
  3378  0E21  0226               	subwf	Blink@n,w
  3379  0E22                     u1715:	
  3380  0E22  1C03               	btfss	3,0
  3381  0E23  0008               	return
  3382                           
  3383                           ;functions.c: 611: {
  3384                           ;functions.c: 612: PORTCbits.RC1 = 1;
  3385  0E24  1283               	bcf	3,5	;RP0=0, select bank0
  3386  0E25  1303               	bcf	3,6	;RP1=0, select bank0
  3387  0E26  1487               	bsf	7,1	;volatile
  3388                           
  3389                           ;functions.c: 613: DelayDs(2);
  3390  0E27  3002               	movlw	2
  3391  0E28  00A0               	movwf	DelayDs@cnt
  3392  0E29  3000               	movlw	0
  3393  0E2A  00A1               	movwf	DelayDs@cnt+1
  3394  0E2B  120A  158A  2540  120A  158A  	fcall	_DelayDs
  3395                           
  3396                           ;functions.c: 614: PORTCbits.RC1 = 0;
  3397  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  3398  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  3399  0E32  1087               	bcf	7,1	;volatile
  3400                           
  3401                           ;functions.c: 615: DelayDs(6);
  3402  0E33  3006               	movlw	6
  3403  0E34  00A0               	movwf	DelayDs@cnt
  3404  0E35  3000               	movlw	0
  3405  0E36  00A1               	movwf	DelayDs@cnt+1
  3406  0E37  120A  158A  2540  120A  158A  	fcall	_DelayDs
  3407  0E3C  3001               	movlw	1
  3408  0E3D  1283               	bcf	3,5	;RP0=0, select bank0
  3409  0E3E  1303               	bcf	3,6	;RP1=0, select bank0
  3410  0E3F  07A9               	addwf	Blink@i,f
  3411  0E40  1803               	skipnc
  3412  0E41  0AAA               	incf	Blink@i+1,f
  3413  0E42  3000               	movlw	0
  3414  0E43  07AA               	addwf	Blink@i+1,f
  3415  0E44  2E18               	goto	l2184
  3416  0E45                     __end_of_Blink:	
  3417                           
  3418                           	psect	text17
  3419  0C95                     __ptext17:	
  3420 ;; *************** function _Mode_5 *****************
  3421 ;; Defined at:
  3422 ;;		line 269 in file "functions.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;		None
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      void 
  3429 ;; Registers used:
  3430 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3436 ;;      Params:         0       0       0       0       0
  3437 ;;      Locals:         0       0       0       0       0
  3438 ;;      Temps:          0       0       0       0       0
  3439 ;;      Totals:         0       0       0       0       0
  3440 ;;Total ram usage:        0 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    8
  3443 ;; This function calls:
  3444 ;;		_LightWithSensController
  3445 ;;		_TransmittString
  3446 ;; This function is called by:
  3447 ;;		_main
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           
  3452                           ;psect for function _Mode_5
  3453  0C95                     _Mode_5:	
  3454                           
  3455                           ;functions.c: 271: if(!PORTBbits.RB5)
  3456                           
  3457                           ;incstack = 0
  3458 ;; hardware stack exceeded
  3459                           ; Regs used in _Mode_5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3460  0C95  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0C96  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0C97  1A86               	btfsc	6,5	;volatile
  3463  0C98  2CA2               	goto	l2296
  3464                           
  3465                           ;functions.c: 272: {
  3466                           ;functions.c: 273: TransmittString("N2BLINK");
  3467  0C99  305D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3468  0C9A  00B5               	movwf	TransmittString@dataString
  3469  0C9B  3080               	movlw	128
  3470  0C9C  00B6               	movwf	TransmittString@dataString+1
  3471  0C9D  120A  118A  23D7  120A  158A  	fcall	_TransmittString
  3472  0CA2                     l2296:	
  3473                           
  3474                           ;functions.c: 274: }
  3475                           ;functions.c: 275: LightWithSensController();
  3476  0CA2  120A  158A  2645   	fcall	_LightWithSensController
  3477  0CA5  0008               	return
  3478  0CA6                     __end_of_Mode_5:	
  3479                           
  3480                           	psect	text18
  3481  0C84                     __ptext18:	
  3482 ;; *************** function _Mode_4 *****************
  3483 ;; Defined at:
  3484 ;;		line 257 in file "functions.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;		None
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;		None
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  1    wreg      void 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3498 ;;      Params:         0       0       0       0       0
  3499 ;;      Locals:         0       0       0       0       0
  3500 ;;      Temps:          0       0       0       0       0
  3501 ;;      Totals:         0       0       0       0       0
  3502 ;;Total ram usage:        0 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; Hardware stack levels required when called:    8
  3505 ;; This function calls:
  3506 ;;		_LightWithSensController
  3507 ;;		_TransmittString
  3508 ;; This function is called by:
  3509 ;;		_main
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           
  3514                           ;psect for function _Mode_4
  3515  0C84                     _Mode_4:	
  3516                           
  3517                           ;functions.c: 259: if(!PORTBbits.RB5)
  3518                           
  3519                           ;incstack = 0
  3520 ;; hardware stack exceeded
  3521                           ; Regs used in _Mode_4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3522  0C84  1283               	bcf	3,5	;RP0=0, select bank0
  3523  0C85  1303               	bcf	3,6	;RP1=0, select bank0
  3524  0C86  1A86               	btfsc	6,5	;volatile
  3525  0C87  2C91               	goto	l2290
  3526                           
  3527                           ;functions.c: 260: {
  3528                           ;functions.c: 261: TransmittString("N1BLINK");
  3529  0C88  3055               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3530  0C89  00B5               	movwf	TransmittString@dataString
  3531  0C8A  3080               	movlw	128
  3532  0C8B  00B6               	movwf	TransmittString@dataString+1
  3533  0C8C  120A  118A  23D7  120A  158A  	fcall	_TransmittString
  3534  0C91                     l2290:	
  3535                           
  3536                           ;functions.c: 262: }
  3537                           ;functions.c: 263: LightWithSensController();
  3538  0C91  120A  158A  2645   	fcall	_LightWithSensController
  3539  0C94  0008               	return
  3540  0C95                     __end_of_Mode_4:	
  3541                           
  3542                           	psect	text19
  3543  03D7                     __ptext19:	
  3544 ;; *************** function _TransmittString *****************
  3545 ;; Defined at:
  3546 ;;		line 163 in file "functions.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  dataString      2   21[BANK0 ] PTR const unsigned char 
  3549 ;;		 -> STR_17(8), STR_16(8), TransmittedDataHandler@slask_746(8), TransmittedDataHandler@slask_743(8), 
  3550 ;;		 -> STR_12(4), STR_11(4), STR_9(14), STR_8(14), 
  3551 ;;		 -> TransmittedDataHandler@slask_734(8), TransmittedDataHandler@slask(8), 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  i               2   26[BANK0 ] int 
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3563 ;;      Params:         0       2       0       0       0
  3564 ;;      Locals:         0       2       0       0       0
  3565 ;;      Temps:          0       3       0       0       0
  3566 ;;      Totals:         0       7       0       0       0
  3567 ;;Total ram usage:        7 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    7
  3570 ;; This function calls:
  3571 ;;		_FindChannel
  3572 ;;		_RegisterRead
  3573 ;;		_RegisterSet
  3574 ;;		_SetRFMode
  3575 ;;		_WriteFIFO
  3576 ;;		_timerFunction
  3577 ;; This function is called by:
  3578 ;;		_TransmittedDataHandler
  3579 ;;		_Mode_4
  3580 ;;		_Mode_5
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           
  3585                           ;psect for function _TransmittString
  3586  03D7                     _TransmittString:	
  3587                           
  3588                           ;functions.c: 165: timerFunction(4, 5);
  3589                           
  3590                           ;incstack = 0
  3591 ;; hardware stack exceeded
  3592                           ; Regs used in _TransmittString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3593  03D7  3004               	movlw	4
  3594  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  3595  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  3596  03DA  00A0               	movwf	timerFunction@intTimerNumber
  3597  03DB  3000               	movlw	0
  3598  03DC  00A1               	movwf	timerFunction@intTimerNumber+1
  3599  03DD  3005               	movlw	5
  3600  03DE  00A2               	movwf	timerFunction@intSetSeconds
  3601  03DF  3000               	movlw	0
  3602  03E0  00A3               	movwf	timerFunction@intSetSeconds+1
  3603  03E1  120A  158A  24A6  120A  118A  	fcall	_timerFunction
  3604                           
  3605                           ;functions.c: 167: int i = 0;
  3606  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  3607  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  3608  03E8  01BA               	clrf	TransmittString@i
  3609  03E9  01BB               	clrf	TransmittString@i+1
  3610                           
  3611                           ;functions.c: 170: SetRFMode(0x20);
  3612  03EA  3020               	movlw	32
  3613  03EB  120A  118A  278C  120A  118A  	fcall	_SetRFMode
  3614                           
  3615                           ;functions.c: 171: _delay((unsigned long)((10)*(4000000/4000.0)));
  3616  03F0  300D               	movlw	13
  3617  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  3618  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  3619  03F3  00B8               	movwf	??_TransmittString+1
  3620  03F4  30FB               	movlw	251
  3621  03F5  00B7               	movwf	??_TransmittString
  3622  03F6                     u2157:	
  3623  03F6  0BB7               	decfsz	??_TransmittString,f
  3624  03F7  2BF6               	goto	u2157
  3625  03F8  0BB8               	decfsz	??_TransmittString+1,f
  3626  03F9  2BF6               	goto	u2157
  3627  03FA  2BFB               	nop2
  3628                           
  3629                           ;functions.c: 172: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  3630  03FB  300E               	movlw	14
  3631  03FC  120A  158A  2501  120A  118A  	fcall	_RegisterRead
  3632  0401  3802               	iorlw	2
  3633  0402  1283               	bcf	3,5	;RP0=0, select bank0
  3634  0403  1303               	bcf	3,6	;RP1=0, select bank0
  3635  0404  00B7               	movwf	??_TransmittString
  3636  0405  0837               	movf	??_TransmittString,w
  3637  0406  00A7               	movwf	RegisterSet@value
  3638  0407  300E               	movlw	14
  3639  0408  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3640                           
  3641                           ;functions.c: 173: SetRFMode(0x40);
  3642  040D  3040               	movlw	64
  3643  040E  120A  118A  278C  120A  118A  	fcall	_SetRFMode
  3644  0413                     l1954:	
  3645                           ;functions.c: 174: while((RegisterRead(0x0E) & 0b00000010) == 0)
  3646                           
  3647  0413  300E               	movlw	14
  3648  0414  120A  158A  2501  120A  118A  	fcall	_RegisterRead
  3649  0419  3902               	andlw	2
  3650  041A  1D03               	btfss	3,2
  3651  041B  2C26               	goto	l1956
  3652                           
  3653                           ;functions.c: 175: {
  3654                           ;functions.c: 176: if(bTimerComplete[4])
  3655  041C  1683               	bsf	3,5	;RP0=1, select bank1
  3656  041D  1303               	bcf	3,6	;RP1=0, select bank1
  3657  041E  082E               	movf	(_bTimerComplete^(0+128)+4),w
  3658  041F  1903               	btfsc	3,2
  3659  0420  2C13               	goto	l1954
  3660                           
  3661                           ;functions.c: 177: {
  3662                           ;functions.c: 178: FindChannel();
  3663  0421  120A  118A  21ED  120A  118A  	fcall	_FindChannel
  3664  0426                     l1956:	
  3665                           ;functions.c: 179: break;
  3666                           
  3667                           
  3668                           ;functions.c: 180: }
  3669                           ;functions.c: 182: }
  3670                           ;functions.c: 183: SetRFMode(0x80);
  3671  0426  3080               	movlw	128
  3672  0427  120A  118A  278C  120A  118A  	fcall	_SetRFMode
  3673                           
  3674                           ;functions.c: 184: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3675  042C  30A6               	movlw	166
  3676  042D  1283               	bcf	3,5	;RP0=0, select bank0
  3677  042E  1303               	bcf	3,6	;RP1=0, select bank0
  3678  042F  00B7               	movwf	??_TransmittString
  3679  0430                     u2167:	
  3680  0430  0BB7               	decfsz	??_TransmittString,f
  3681  0431  2C30               	goto	u2167
  3682  0432  0000               	nop
  3683                           
  3684                           ;functions.c: 187: WriteFIFO('S');
  3685  0433  3053               	movlw	83
  3686  0434  120A  158A  243F  120A  118A  	fcall	_WriteFIFO
  3687                           
  3688                           ;functions.c: 188: WriteFIFO('Y');
  3689  0439  3059               	movlw	89
  3690  043A  120A  158A  243F  120A  118A  	fcall	_WriteFIFO
  3691                           
  3692                           ;functions.c: 189: WriteFIFO('N');
  3693  043F  304E               	movlw	78
  3694  0440  120A  158A  243F  120A  118A  	fcall	_WriteFIFO
  3695                           
  3696                           ;functions.c: 190: WriteFIFO('C');
  3697  0445  3043               	movlw	67
  3698  0446  120A  158A  243F  120A  118A  	fcall	_WriteFIFO
  3699  044B                     l1972:	
  3700                           ;functions.c: 193: while(dataString[i] != 0)
  3701                           
  3702  044B  1283               	bcf	3,5	;RP0=0, select bank0
  3703  044C  1303               	bcf	3,6	;RP1=0, select bank0
  3704  044D  083A               	movf	TransmittString@i,w
  3705  044E  0735               	addwf	TransmittString@dataString,w
  3706  044F  00B8               	movwf	??_TransmittString+1
  3707  0450  0836               	movf	TransmittString@dataString+1,w
  3708  0451  00B7               	movwf	??_TransmittString
  3709  0452  1803               	skipnc
  3710  0453  0AB7               	incf	??_TransmittString,f
  3711  0454  1BBA               	btfsc	TransmittString@i,7
  3712  0455  03B7               	decf	??_TransmittString,f
  3713  0456  1283               	bcf	3,5	;RP0=0, select bank0
  3714  0457  1303               	bcf	3,6	;RP1=0, select bank0
  3715  0458  0837               	movf	??_TransmittString,w
  3716  0459  00B9               	movwf	??_TransmittString+2
  3717  045A  0839               	movf	??_TransmittString+2,w
  3718  045B  00FF               	movwf	127
  3719  045C  0838               	movf	??_TransmittString+1,w
  3720  045D  0084               	movwf	4
  3721  045E  120A  118A  2600  120A  118A  	fcall	stringtab
  3722  0463  3A00               	xorlw	0
  3723  0464  1903               	btfsc	3,2
  3724  0465  2C91               	goto	l282
  3725                           
  3726                           ;functions.c: 194: {
  3727                           ;functions.c: 195: WriteFIFO(dataString[i]);
  3728  0466  1283               	bcf	3,5	;RP0=0, select bank0
  3729  0467  1303               	bcf	3,6	;RP1=0, select bank0
  3730  0468  083A               	movf	TransmittString@i,w
  3731  0469  0735               	addwf	TransmittString@dataString,w
  3732  046A  00B8               	movwf	??_TransmittString+1
  3733  046B  0836               	movf	TransmittString@dataString+1,w
  3734  046C  00B7               	movwf	??_TransmittString
  3735  046D  1803               	skipnc
  3736  046E  0AB7               	incf	??_TransmittString,f
  3737  046F  1BBA               	btfsc	TransmittString@i,7
  3738  0470  03B7               	decf	??_TransmittString,f
  3739  0471  1283               	bcf	3,5	;RP0=0, select bank0
  3740  0472  1303               	bcf	3,6	;RP1=0, select bank0
  3741  0473  0837               	movf	??_TransmittString,w
  3742  0474  00B9               	movwf	??_TransmittString+2
  3743  0475  0839               	movf	??_TransmittString+2,w
  3744  0476  00FF               	movwf	127
  3745  0477  0838               	movf	??_TransmittString+1,w
  3746  0478  0084               	movwf	4
  3747  0479  120A  118A  2600  120A  118A  	fcall	stringtab
  3748  047E  120A  158A  243F  120A  118A  	fcall	_WriteFIFO
  3749                           
  3750                           ;functions.c: 196: i++;
  3751  0483  3001               	movlw	1
  3752  0484  1283               	bcf	3,5	;RP0=0, select bank0
  3753  0485  1303               	bcf	3,6	;RP1=0, select bank0
  3754  0486  07BA               	addwf	TransmittString@i,f
  3755  0487  1803               	skipnc
  3756  0488  0ABB               	incf	TransmittString@i+1,f
  3757  0489  3000               	movlw	0
  3758  048A  07BB               	addwf	TransmittString@i+1,f
  3759  048B  2C4B               	goto	l1972
  3760  048C                     l1974:	
  3761                           ;functions.c: 197: }
  3762                           ;functions.c: 200: while(!PORTBbits.RB4)
  3763                           
  3764                           
  3765                           ;functions.c: 201: {
  3766                           ;functions.c: 202: if(bTimerComplete[4])
  3767  048C  1683               	bsf	3,5	;RP0=1, select bank1
  3768  048D  1303               	bcf	3,6	;RP1=0, select bank1
  3769  048E  082E               	movf	(_bTimerComplete^(0+128)+4),w
  3770  048F  1D03               	btfss	3,2
  3771  0490  2C94               	goto	l1978
  3772  0491                     l282:	
  3773                           ;functions.c: 203: break;
  3774                           
  3775  0491  1283               	bcf	3,5	;RP0=0, select bank0
  3776  0492  1E06               	btfss	6,4	;volatile
  3777  0493  2C8C               	goto	l1974
  3778  0494                     l1978:	
  3779                           
  3780                           ;functions.c: 204: }
  3781                           ;functions.c: 205: _delay((unsigned long)((10)*(4000000/4000000.0)));
  3782  0494  3003               	movlw	3
  3783  0495  1283               	bcf	3,5	;RP0=0, select bank0
  3784  0496  00B7               	movwf	??_TransmittString
  3785  0497                     u2177:	
  3786  0497  0BB7               	decfsz	??_TransmittString,f
  3787  0498  2C97               	goto	u2177
  3788                           
  3789                           ;functions.c: 206: SetRFMode(0x00);
  3790  0499  3000               	movlw	0
  3791  049A  120A  118A  278C  120A  118A  	fcall	_SetRFMode
  3792                           
  3793                           ;functions.c: 207: _delay((unsigned long)((1)*(4000000/4000.0)));
  3794  049F  30F9               	movlw	249
  3795  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  3796  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  3797  04A2  00B7               	movwf	??_TransmittString
  3798  04A3                     u2187:	
  3799  04A3  0000               	nop
  3800  04A4  0BB7               	decfsz	??_TransmittString,f
  3801  04A5  2CA3               	goto	u2187
  3802  04A6  2CA7               	nop2	;nop
  3803  04A7  0000               	nop
  3804  04A8  0008               	return
  3805  04A9                     __end_of_TransmittString:	
  3806                           
  3807                           	psect	text20
  3808  0C3F                     __ptext20:	
  3809 ;; *************** function _WriteFIFO *****************
  3810 ;; Defined at:
  3811 ;;		line 722 in file "functions.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;  Data            1    wreg     unsigned char 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  Data            1    3[BANK0 ] unsigned char 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      void 
  3818 ;; Registers used:
  3819 ;;		wreg, status,2, status,0, pclath, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3825 ;;      Params:         0       0       0       0       0
  3826 ;;      Locals:         0       1       0       0       0
  3827 ;;      Temps:          0       0       0       0       0
  3828 ;;      Totals:         0       1       0       0       0
  3829 ;;Total ram usage:        1 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    3
  3832 ;; This function calls:
  3833 ;;		_WriteSPI
  3834 ;; This function is called by:
  3835 ;;		_TransmittString
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           
  3840                           ;psect for function _WriteFIFO
  3841  0C3F                     _WriteFIFO:	
  3842                           
  3843                           ;incstack = 0
  3844                           ; Regs used in _WriteFIFO: [wreg+status,2+status,0+pclath+cstack]
  3845                           ;WriteFIFO@Data stored from wreg
  3846  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  3847  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  3848  0C41  00A3               	movwf	WriteFIFO@Data
  3849                           
  3850                           ;functions.c: 724: PORTAbits.RA5 = 0;
  3851  0C42  1285               	bcf	5,5	;volatile
  3852                           
  3853                           ;functions.c: 725: WriteSPI(Data);
  3854  0C43  0823               	movf	WriteFIFO@Data,w
  3855  0C44  120A  158A  2458   	fcall	_WriteSPI
  3856                           
  3857                           ;functions.c: 726: PORTAbits.RA5 = 1;
  3858  0C47  1283               	bcf	3,5	;RP0=0, select bank0
  3859  0C48  1303               	bcf	3,6	;RP1=0, select bank0
  3860  0C49  1685               	bsf	5,5	;volatile
  3861  0C4A  0008               	return
  3862  0C4B                     __end_of_WriteFIFO:	
  3863                           
  3864                           	psect	text21
  3865  01ED                     __ptext21:	
  3866 ;; *************** function _FindChannel *****************
  3867 ;; Defined at:
  3868 ;;		line 505 in file "functions.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;  i               2   19[BANK0 ] int 
  3873 ;;  cnt             2   17[BANK0 ] int 
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  1    wreg      unsigned char 
  3876 ;; Registers used:
  3877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3883 ;;      Params:         0       0       0       0       0
  3884 ;;      Locals:         0       4       0       0       0
  3885 ;;      Temps:          0       3       0       0       0
  3886 ;;      Totals:         0       7       0       0       0
  3887 ;;Total ram usage:        7 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    6
  3890 ;; This function calls:
  3891 ;;		_RegisterRead
  3892 ;;		_RegisterSet
  3893 ;;		_SetRFMode
  3894 ;; This function is called by:
  3895 ;;		_TransiverToReceive
  3896 ;;		_TransmittString
  3897 ;;		_TransiverInit
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           
  3902                           ;psect for function _FindChannel
  3903  01ED                     _FindChannel:	
  3904                           
  3905                           ;functions.c: 507: int cnt = 0;
  3906                           
  3907                           ;incstack = 0
  3908 ;; using string table level
  3909                           ; Regs used in _FindChannel: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3910  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  3911  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  3912  01EF  01B1               	clrf	FindChannel@cnt
  3913  01F0  01B2               	clrf	FindChannel@cnt+1
  3914                           
  3915                           ;functions.c: 508: bChannelFound = 0;
  3916  01F1  01EC               	clrf	_bChannelFound
  3917                           
  3918                           ;functions.c: 509: channelFound = 0;
  3919  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  3920  01F3  1303               	bcf	3,6	;RP1=0, select bank1
  3921  01F4  01AF               	clrf	_channelFound^(0+128)
  3922  01F5  01B0               	clrf	(_channelFound+1)^(0+128)
  3923                           
  3924                           ;functions.c: 511: _delay((unsigned long)((1000)*(4000000/4000.0)));
  3925  01F6  3006               	movlw	6
  3926  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  3927  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  3928  01F9  00B0               	movwf	??_FindChannel+2
  3929  01FA  3013               	movlw	19
  3930  01FB  00AF               	movwf	??_FindChannel+1
  3931  01FC  30B1               	movlw	177
  3932  01FD  00AE               	movwf	??_FindChannel
  3933  01FE                     u2197:	
  3934  01FE  0BAE               	decfsz	??_FindChannel,f
  3935  01FF  29FE               	goto	u2197
  3936  0200  0BAF               	decfsz	??_FindChannel+1,f
  3937  0201  29FE               	goto	u2197
  3938  0202  0BB0               	decfsz	??_FindChannel+2,f
  3939  0203  29FE               	goto	u2197
  3940  0204  2A05               	nop2
  3941                           
  3942                           ;functions.c: 512: for (int i = 0; i < 13; i++)
  3943  0205  1283               	bcf	3,5	;RP0=0, select bank0
  3944  0206  1303               	bcf	3,6	;RP1=0, select bank0
  3945  0207  01B3               	clrf	FindChannel@i
  3946  0208  01B4               	clrf	FindChannel@i+1
  3947  0209  0834               	movf	FindChannel@i+1,w
  3948  020A  3A80               	xorlw	128
  3949  020B  00FF               	movwf	127
  3950  020C  3080               	movlw	128
  3951  020D  027F               	subwf	127,w
  3952  020E  1D03               	skipz
  3953  020F  2A12               	goto	u1085
  3954  0210  300D               	movlw	13
  3955  0211  0233               	subwf	FindChannel@i,w
  3956  0212                     u1085:	
  3957  0212  1803               	btfsc	3,0
  3958  0213  2AEB               	goto	l1822
  3959  0214                     l1798:	
  3960                           
  3961                           ;functions.c: 513: {
  3962                           ;functions.c: 514: RegisterSet(0x06,ChannelR[i]);
  3963  0214  1283               	bcf	3,5	;RP0=0, select bank0
  3964  0215  1303               	bcf	3,6	;RP1=0, select bank0
  3965  0216  0833               	movf	FindChannel@i,w
  3966  0217  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  3967  0218  0084               	movwf	4
  3968  0219  120A  118A  260A  120A  118A  	fcall	stringdir
  3969  021E  00AE               	movwf	??_FindChannel
  3970  021F  082E               	movf	??_FindChannel,w
  3971  0220  00A7               	movwf	RegisterSet@value
  3972  0221  3006               	movlw	6
  3973  0222  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3974                           
  3975                           ;functions.c: 515: RegisterSet(0x07,ChannelP[i]);
  3976  0227  1283               	bcf	3,5	;RP0=0, select bank0
  3977  0228  1303               	bcf	3,6	;RP1=0, select bank0
  3978  0229  0833               	movf	FindChannel@i,w
  3979  022A  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  3980  022B  0084               	movwf	4
  3981  022C  120A  118A  260A  120A  118A  	fcall	stringdir
  3982  0231  00AE               	movwf	??_FindChannel
  3983  0232  082E               	movf	??_FindChannel,w
  3984  0233  00A7               	movwf	RegisterSet@value
  3985  0234  3007               	movlw	7
  3986  0235  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  3987                           
  3988                           ;functions.c: 516: RegisterSet(0x08,ChannelS[i]);
  3989  023A  1283               	bcf	3,5	;RP0=0, select bank0
  3990  023B  1303               	bcf	3,6	;RP1=0, select bank0
  3991  023C  0833               	movf	FindChannel@i,w
  3992  023D  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  3993  023E  0084               	movwf	4
  3994  023F  120A  118A  260A  120A  118A  	fcall	stringdir
  3995  0244  00AE               	movwf	??_FindChannel
  3996  0245  082E               	movf	??_FindChannel,w
  3997  0246  00A7               	movwf	RegisterSet@value
  3998  0247  3008               	movlw	8
  3999  0248  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  4000                           
  4001                           ;functions.c: 517: RegisterSet(0x09,ChannelR[i]);
  4002  024D  1283               	bcf	3,5	;RP0=0, select bank0
  4003  024E  1303               	bcf	3,6	;RP1=0, select bank0
  4004  024F  0833               	movf	FindChannel@i,w
  4005  0250  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  4006  0251  0084               	movwf	4
  4007  0252  120A  118A  260A  120A  118A  	fcall	stringdir
  4008  0257  00AE               	movwf	??_FindChannel
  4009  0258  082E               	movf	??_FindChannel,w
  4010  0259  00A7               	movwf	RegisterSet@value
  4011  025A  3009               	movlw	9
  4012  025B  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  4013                           
  4014                           ;functions.c: 518: RegisterSet(0x0A,ChannelP[i]);
  4015  0260  1283               	bcf	3,5	;RP0=0, select bank0
  4016  0261  1303               	bcf	3,6	;RP1=0, select bank0
  4017  0262  0833               	movf	FindChannel@i,w
  4018  0263  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  4019  0264  0084               	movwf	4
  4020  0265  120A  118A  260A  120A  118A  	fcall	stringdir
  4021  026A  00AE               	movwf	??_FindChannel
  4022  026B  082E               	movf	??_FindChannel,w
  4023  026C  00A7               	movwf	RegisterSet@value
  4024  026D  300A               	movlw	10
  4025  026E  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  4026                           
  4027                           ;functions.c: 519: RegisterSet(0x0B,ChannelS[i]);
  4028  0273  1283               	bcf	3,5	;RP0=0, select bank0
  4029  0274  1303               	bcf	3,6	;RP1=0, select bank0
  4030  0275  0833               	movf	FindChannel@i,w
  4031  0276  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  4032  0277  0084               	movwf	4
  4033  0278  120A  118A  260A  120A  118A  	fcall	stringdir
  4034  027D  00AE               	movwf	??_FindChannel
  4035  027E  082E               	movf	??_FindChannel,w
  4036  027F  00A7               	movwf	RegisterSet@value
  4037  0280  300B               	movlw	11
  4038  0281  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  4039                           
  4040                           ;functions.c: 520: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  4041  0286  300E               	movlw	14
  4042  0287  120A  158A  2501  120A  118A  	fcall	_RegisterRead
  4043  028C  3802               	iorlw	2
  4044  028D  1283               	bcf	3,5	;RP0=0, select bank0
  4045  028E  1303               	bcf	3,6	;RP1=0, select bank0
  4046  028F  00AE               	movwf	??_FindChannel
  4047  0290  082E               	movf	??_FindChannel,w
  4048  0291  00A7               	movwf	RegisterSet@value
  4049  0292  300E               	movlw	14
  4050  0293  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  4051                           
  4052                           ;functions.c: 521: SetRFMode(0x40);
  4053  0298  3040               	movlw	64
  4054  0299  120A  118A  278C  120A  118A  	fcall	_SetRFMode
  4055                           
  4056                           ;functions.c: 522: cnt = 0;
  4057  029E  1283               	bcf	3,5	;RP0=0, select bank0
  4058  029F  1303               	bcf	3,6	;RP1=0, select bank0
  4059  02A0  01B1               	clrf	FindChannel@cnt
  4060  02A1  01B2               	clrf	FindChannel@cnt+1
  4061  02A2                     l1816:	
  4062                           ;functions.c: 523: while(cnt < 5)
  4063                           
  4064  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  4065  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  4066  02A4  0832               	movf	FindChannel@cnt+1,w
  4067  02A5  3A80               	xorlw	128
  4068  02A6  00FF               	movwf	127
  4069  02A7  3080               	movlw	128
  4070  02A8  027F               	subwf	127,w
  4071  02A9  1D03               	skipz
  4072  02AA  2AAD               	goto	u1105
  4073  02AB  3005               	movlw	5
  4074  02AC  0231               	subwf	FindChannel@cnt,w
  4075  02AD                     u1105:	
  4076  02AD  1803               	btfsc	3,0
  4077  02AE  2AD8               	goto	l1818
  4078                           
  4079                           ;functions.c: 524: {
  4080                           ;functions.c: 526: if((RegisterRead(0x0E) & 0b00000010) != 0)
  4081  02AF  300E               	movlw	14
  4082  02B0  120A  158A  2501  120A  118A  	fcall	_RegisterRead
  4083  02B5  3902               	andlw	2
  4084  02B6  1903               	btfsc	3,2
  4085  02B7  2AC8               	goto	l1814
  4086                           
  4087                           ;functions.c: 527: {
  4088                           ;functions.c: 528: bChannelFound = 1;
  4089  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  4090  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  4091  02BA  01EC               	clrf	_bChannelFound
  4092  02BB  0AEC               	incf	_bChannelFound,f
  4093                           
  4094                           ;functions.c: 529: channelFound = i;
  4095  02BC  0834               	movf	FindChannel@i+1,w
  4096  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  4097  02BE  1303               	bcf	3,6	;RP1=0, select bank1
  4098  02BF  00B0               	movwf	(_channelFound+1)^(0+128)
  4099  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  4100  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  4101  02C2  0833               	movf	FindChannel@i,w
  4102  02C3  1683               	bsf	3,5	;RP0=1, select bank1
  4103  02C4  1303               	bcf	3,6	;RP1=0, select bank1
  4104  02C5  00AF               	movwf	_channelFound^(0+128)
  4105                           
  4106                           ;functions.c: 530: return 1;
  4107  02C6  3001               	movlw	1
  4108  02C7  0008               	return
  4109  02C8                     l1814:	
  4110                           
  4111                           ;functions.c: 531: }
  4112                           ;functions.c: 532: cnt++;
  4113  02C8  3001               	movlw	1
  4114  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  4115  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  4116  02CB  07B1               	addwf	FindChannel@cnt,f
  4117  02CC  1803               	skipnc
  4118  02CD  0AB2               	incf	FindChannel@cnt+1,f
  4119  02CE  3000               	movlw	0
  4120  02CF  07B2               	addwf	FindChannel@cnt+1,f
  4121                           
  4122                           ;functions.c: 533: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  4123  02D0  30F9               	movlw	249
  4124  02D1  00AE               	movwf	??_FindChannel
  4125  02D2                     u2207:	
  4126  02D2  0000               	nop
  4127  02D3  0BAE               	decfsz	??_FindChannel,f
  4128  02D4  2AD2               	goto	u2207
  4129  02D5  2AD6               	nop2	;nop
  4130  02D6  0000               	nop
  4131  02D7  2AA2               	goto	l1816
  4132  02D8                     l1818:	
  4133  02D8  3001               	movlw	1
  4134  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  4135  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  4136  02DB  07B3               	addwf	FindChannel@i,f
  4137  02DC  1803               	skipnc
  4138  02DD  0AB4               	incf	FindChannel@i+1,f
  4139  02DE  3000               	movlw	0
  4140  02DF  07B4               	addwf	FindChannel@i+1,f
  4141  02E0  0834               	movf	FindChannel@i+1,w
  4142  02E1  3A80               	xorlw	128
  4143  02E2  00FF               	movwf	127
  4144  02E3  3080               	movlw	128
  4145  02E4  027F               	subwf	127,w
  4146  02E5  1D03               	skipz
  4147  02E6  2AE9               	goto	u1115
  4148  02E7  300D               	movlw	13
  4149  02E8  0233               	subwf	FindChannel@i,w
  4150  02E9                     u1115:	
  4151  02E9  1C03               	skipc
  4152  02EA  2A14               	goto	l1798
  4153  02EB                     l1822:	
  4154                           
  4155                           ;functions.c: 534: }
  4156                           ;functions.c: 537: }
  4157                           ;functions.c: 538: return 0;
  4158  02EB  3000               	movlw	0
  4159  02EC  0008               	return
  4160  02ED                     __end_of_FindChannel:	
  4161                           
  4162                           	psect	text22
  4163  078C                     __ptext22:	
  4164 ;; *************** function _SetRFMode *****************
  4165 ;; Defined at:
  4166 ;;		line 560 in file "functions.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;  mode            1    wreg     unsigned char 
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;  mode            1   12[BANK0 ] unsigned char 
  4171 ;;  mcparam0_rea    1   13[BANK0 ] unsigned char 
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  1    wreg      void 
  4174 ;; Registers used:
  4175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4181 ;;      Params:         0       0       0       0       0
  4182 ;;      Locals:         0       2       0       0       0
  4183 ;;      Temps:          0       1       0       0       0
  4184 ;;      Totals:         0       3       0       0       0
  4185 ;;Total ram usage:        3 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    5
  4188 ;; This function calls:
  4189 ;;		_RegisterRead
  4190 ;;		_RegisterSet
  4191 ;; This function is called by:
  4192 ;;		_TransiverToReceive
  4193 ;;		_TransiverReadFIFO
  4194 ;;		_TransmittString
  4195 ;;		_TransiverInit
  4196 ;;		_FindChannel
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function _SetRFMode
  4202  078C                     _SetRFMode:	
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in _SetRFMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4206                           ;SetRFMode@mode stored from wreg
  4207  078C  1283               	bcf	3,5	;RP0=0, select bank0
  4208  078D  1303               	bcf	3,6	;RP1=0, select bank0
  4209  078E  00AC               	movwf	SetRFMode@mode
  4210                           
  4211                           ;functions.c: 562: PORTAbits.RA4 = 0;
  4212  078F  1205               	bcf	5,4	;volatile
  4213                           
  4214                           ;functions.c: 563: BYTE mcparam0_read;
  4215                           ;functions.c: 564: mcparam0_read = RegisterRead(0);
  4216  0790  3000               	movlw	0
  4217  0791  120A  158A  2501  120A  118A  	fcall	_RegisterRead
  4218  0796  1283               	bcf	3,5	;RP0=0, select bank0
  4219  0797  1303               	bcf	3,6	;RP1=0, select bank0
  4220  0798  00AB               	movwf	??_SetRFMode
  4221  0799  082B               	movf	??_SetRFMode,w
  4222  079A  00AD               	movwf	SetRFMode@mcparam0_read
  4223                           
  4224                           ;functions.c: 565: switch (mode) {
  4225  079B  2FE4               	goto	l1778
  4226  079C                     l1766:	
  4227                           ;functions.c: 566: case 0x80:
  4228                           
  4229                           
  4230                           ;functions.c: 567: RegisterSet(0, (mcparam0_read & 0x1F) | 0x80);
  4231  079C  082D               	movf	SetRFMode@mcparam0_read,w
  4232  079D  391F               	andlw	31
  4233  079E  3880               	iorlw	128
  4234  079F  00AB               	movwf	??_SetRFMode
  4235  07A0  082B               	movf	??_SetRFMode,w
  4236  07A1  00A7               	movwf	RegisterSet@value
  4237  07A2  3000               	movlw	0
  4238  07A3  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  4239                           
  4240                           ;functions.c: 569: break;
  4241  07A8  2FF7               	goto	l368
  4242  07A9                     l1768:	
  4243                           ;functions.c: 570: case 0x60:
  4244                           
  4245                           
  4246                           ;functions.c: 571: RegisterSet(0, (mcparam0_read & 0x1F) | 0x60);
  4247  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  4248  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  4249  07AB  082D               	movf	SetRFMode@mcparam0_read,w
  4250  07AC  391F               	andlw	31
  4251  07AD  3860               	iorlw	96
  4252  07AE  00AB               	movwf	??_SetRFMode
  4253  07AF  082B               	movf	??_SetRFMode,w
  4254  07B0  00A7               	movwf	RegisterSet@value
  4255  07B1  3000               	movlw	0
  4256  07B2  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  4257                           
  4258                           ;functions.c: 573: break;
  4259  07B7  2FF7               	goto	l368
  4260  07B8                     l1770:	
  4261                           ;functions.c: 574: case 0x40:
  4262                           
  4263                           
  4264                           ;functions.c: 575: RegisterSet(0, (mcparam0_read & 0x1F) | 0x40);
  4265  07B8  1283               	bcf	3,5	;RP0=0, select bank0
  4266  07B9  1303               	bcf	3,6	;RP1=0, select bank0
  4267  07BA  082D               	movf	SetRFMode@mcparam0_read,w
  4268  07BB  391F               	andlw	31
  4269  07BC  3840               	iorlw	64
  4270  07BD  00AB               	movwf	??_SetRFMode
  4271  07BE  082B               	movf	??_SetRFMode,w
  4272  07BF  00A7               	movwf	RegisterSet@value
  4273  07C0  3000               	movlw	0
  4274  07C1  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  4275                           
  4276                           ;functions.c: 577: break;
  4277  07C6  2FF7               	goto	l368
  4278  07C7                     l1772:	
  4279                           ;functions.c: 578: case 0x20:
  4280                           
  4281                           
  4282                           ;functions.c: 579: RegisterSet(0, (mcparam0_read & 0x1F) | 0x20);
  4283  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  4284  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  4285  07C9  082D               	movf	SetRFMode@mcparam0_read,w
  4286  07CA  391F               	andlw	31
  4287  07CB  3820               	iorlw	32
  4288  07CC  00AB               	movwf	??_SetRFMode
  4289  07CD  082B               	movf	??_SetRFMode,w
  4290  07CE  00A7               	movwf	RegisterSet@value
  4291  07CF  3000               	movlw	0
  4292  07D0  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  4293                           
  4294                           ;functions.c: 581: break;
  4295  07D5  2FF7               	goto	l368
  4296  07D6                     l1774:	
  4297                           ;functions.c: 582: case 0x00:
  4298                           
  4299                           
  4300                           ;functions.c: 583: RegisterSet(0, (mcparam0_read & 0x1F) | 0x00);
  4301  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  4302  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  4303  07D8  082D               	movf	SetRFMode@mcparam0_read,w
  4304  07D9  391F               	andlw	31
  4305  07DA  00AB               	movwf	??_SetRFMode
  4306  07DB  082B               	movf	??_SetRFMode,w
  4307  07DC  00A7               	movwf	RegisterSet@value
  4308  07DD  3000               	movlw	0
  4309  07DE  120A  158A  24E7  120A  118A  	fcall	_RegisterSet
  4310                           
  4311                           ;functions.c: 586: }
  4312                           
  4313                           ;functions.c: 585: break;
  4314  07E3  2FF7               	goto	l368
  4315  07E4                     l1778:	
  4316  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  4317  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  4318  07E6  082C               	movf	SetRFMode@mode,w
  4319                           
  4320                           ; Switch size 1, requested type "space"
  4321                           ; Number of cases is 5, Range of values is 0 to 128
  4322                           ; switch strategies available:
  4323                           ; Name         Instructions Cycles
  4324                           ; simple_byte           16     9 (average)
  4325                           ; jumptable            260     6 (fixed)
  4326                           ;	Chosen strategy is simple_byte
  4327  07E7  3A00               	xorlw	0	; case 0
  4328  07E8  1903               	skipnz
  4329  07E9  2FD6               	goto	l1774
  4330  07EA  3A20               	xorlw	32	; case 32
  4331  07EB  1903               	skipnz
  4332  07EC  2FC7               	goto	l1772
  4333  07ED  3A60               	xorlw	96	; case 64
  4334  07EE  1903               	skipnz
  4335  07EF  2FB8               	goto	l1770
  4336  07F0  3A20               	xorlw	32	; case 96
  4337  07F1  1903               	skipnz
  4338  07F2  2FA9               	goto	l1768
  4339  07F3  3AE0               	xorlw	224	; case 128
  4340  07F4  1903               	skipnz
  4341  07F5  2F9C               	goto	l1766
  4342  07F6  2FF7               	goto	l368
  4343  07F7                     l368:	
  4344                           
  4345                           ;functions.c: 587: PORTAbits.RA4 = 1;
  4346  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  4347  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  4348  07F9  1605               	bsf	5,4	;volatile
  4349  07FA  0008               	return
  4350  07FB                     __end_of_SetRFMode:	
  4351                           
  4352                           	psect	text23
  4353  0CE7                     __ptext23:	
  4354 ;; *************** function _RegisterSet *****************
  4355 ;; Defined at:
  4356 ;;		line 669 in file "functions.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;  adress          1    wreg     unsigned char 
  4359 ;;  value           1    7[BANK0 ] unsigned char 
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;  adress          1   10[BANK0 ] unsigned char 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  1    wreg      void 
  4364 ;; Registers used:
  4365 ;;		wreg, status,2, status,0, pclath, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4371 ;;      Params:         0       1       0       0       0
  4372 ;;      Locals:         0       1       0       0       0
  4373 ;;      Temps:          0       2       0       0       0
  4374 ;;      Totals:         0       4       0       0       0
  4375 ;;Total ram usage:        4 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    3
  4378 ;; This function calls:
  4379 ;;		_WriteSPI
  4380 ;; This function is called by:
  4381 ;;		_TransiverToReceive
  4382 ;;		_TransmittString
  4383 ;;		_TransiverInit
  4384 ;;		_FindChannel
  4385 ;;		_SetRFMode
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           
  4390                           ;psect for function _RegisterSet
  4391  0CE7                     _RegisterSet:	
  4392                           
  4393                           ;incstack = 0
  4394                           ; Regs used in _RegisterSet: [wreg+status,2+status,0+pclath+cstack]
  4395                           ;RegisterSet@adress stored from wreg
  4396  0CE7  1283               	bcf	3,5	;RP0=0, select bank0
  4397  0CE8  1303               	bcf	3,6	;RP1=0, select bank0
  4398  0CE9  00AA               	movwf	RegisterSet@adress
  4399                           
  4400                           ;functions.c: 671: PORTAbits.RA4 = 0;
  4401  0CEA  1205               	bcf	5,4	;volatile
  4402                           
  4403                           ;functions.c: 672: adress = (adress<<1);
  4404  0CEB  082A               	movf	RegisterSet@adress,w
  4405  0CEC  00A8               	movwf	??_RegisterSet
  4406  0CED  0728               	addwf	??_RegisterSet,w
  4407  0CEE  00A9               	movwf	??_RegisterSet+1
  4408  0CEF  0829               	movf	??_RegisterSet+1,w
  4409  0CF0  00AA               	movwf	RegisterSet@adress
  4410                           
  4411                           ;functions.c: 673: WriteSPI(adress);
  4412  0CF1  082A               	movf	RegisterSet@adress,w
  4413  0CF2  120A  158A  2458  120A  158A  	fcall	_WriteSPI
  4414                           
  4415                           ;functions.c: 674: WriteSPI(value);
  4416  0CF7  1283               	bcf	3,5	;RP0=0, select bank0
  4417  0CF8  1303               	bcf	3,6	;RP1=0, select bank0
  4418  0CF9  0827               	movf	RegisterSet@value,w
  4419  0CFA  120A  158A  2458   	fcall	_WriteSPI
  4420                           
  4421                           ;functions.c: 675: PORTAbits.RA4 = 1;
  4422  0CFD  1283               	bcf	3,5	;RP0=0, select bank0
  4423  0CFE  1303               	bcf	3,6	;RP1=0, select bank0
  4424  0CFF  1605               	bsf	5,4	;volatile
  4425  0D00  0008               	return
  4426  0D01                     __end_of_RegisterSet:	
  4427                           
  4428                           	psect	text24
  4429  0D01                     __ptext24:	
  4430 ;; *************** function _RegisterRead *****************
  4431 ;; Defined at:
  4432 ;;		line 639 in file "functions.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  adress          1    wreg     unsigned char 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  adress          1    6[BANK0 ] unsigned char 
  4437 ;;  value           1    5[BANK0 ] unsigned char 
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      unsigned char 
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, status,0, pclath, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4447 ;;      Params:         0       0       0       0       0
  4448 ;;      Locals:         0       2       0       0       0
  4449 ;;      Temps:          0       2       0       0       0
  4450 ;;      Totals:         0       4       0       0       0
  4451 ;;Total ram usage:        4 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    4
  4454 ;; This function calls:
  4455 ;;		_ReadSPI
  4456 ;;		_WriteSPI
  4457 ;; This function is called by:
  4458 ;;		_TransiverToReceive
  4459 ;;		_TransmittString
  4460 ;;		_TransiverInit
  4461 ;;		_FindChannel
  4462 ;;		_SetRFMode
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           
  4467                           ;psect for function _RegisterRead
  4468  0D01                     _RegisterRead:	
  4469                           
  4470                           ;incstack = 0
  4471                           ; Regs used in _RegisterRead: [wreg+status,2+status,0+pclath+cstack]
  4472                           ;RegisterRead@adress stored from wreg
  4473  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  4474  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  4475  0D03  00A6               	movwf	RegisterRead@adress
  4476                           
  4477                           ;functions.c: 641: BYTE value;
  4478                           ;functions.c: 642: PORTAbits.RA4 = 0;
  4479  0D04  1205               	bcf	5,4	;volatile
  4480                           
  4481                           ;functions.c: 643: adress = ((adress<<1)|0x40);
  4482  0D05  0826               	movf	RegisterRead@adress,w
  4483  0D06  00A3               	movwf	??_RegisterRead
  4484  0D07  0723               	addwf	??_RegisterRead,w
  4485  0D08  3840               	iorlw	64
  4486  0D09  00A4               	movwf	??_RegisterRead+1
  4487  0D0A  0824               	movf	??_RegisterRead+1,w
  4488  0D0B  00A6               	movwf	RegisterRead@adress
  4489                           
  4490                           ;functions.c: 644: WriteSPI(adress);
  4491  0D0C  0826               	movf	RegisterRead@adress,w
  4492  0D0D  120A  158A  2458  120A  158A  	fcall	_WriteSPI
  4493                           
  4494                           ;functions.c: 645: value = ReadSPI();
  4495  0D12  120A  158A  241D   	fcall	_ReadSPI
  4496  0D15  1283               	bcf	3,5	;RP0=0, select bank0
  4497  0D16  1303               	bcf	3,6	;RP1=0, select bank0
  4498  0D17  00A3               	movwf	??_RegisterRead
  4499  0D18  0823               	movf	??_RegisterRead,w
  4500  0D19  00A5               	movwf	RegisterRead@value
  4501                           
  4502                           ;functions.c: 646: PORTAbits.RA4 = 1;
  4503  0D1A  1605               	bsf	5,4	;volatile
  4504                           
  4505                           ;functions.c: 647: return value;
  4506  0D1B  0825               	movf	RegisterRead@value,w
  4507  0D1C  0008               	return
  4508  0D1D                     __end_of_RegisterRead:	
  4509                           
  4510                           	psect	text25
  4511  0C1D                     __ptext25:	
  4512 ;; *************** function _ReadSPI *****************
  4513 ;; Defined at:
  4514 ;;		line 452 in file "functions.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;		None
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;		None
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      unsigned char 
  4521 ;; Registers used:
  4522 ;;		wreg, status,2, status,0, pclath, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4528 ;;      Params:         0       0       0       0       0
  4529 ;;      Locals:         0       0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0
  4531 ;;      Totals:         0       0       0       0       0
  4532 ;;Total ram usage:        0 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    3
  4535 ;; This function calls:
  4536 ;;		_WriteSPI
  4537 ;; This function is called by:
  4538 ;;		_RegisterRead
  4539 ;;		_ReadFIFO
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           
  4544                           ;psect for function _ReadSPI
  4545  0C1D                     _ReadSPI:	
  4546                           
  4547                           ;functions.c: 454: WriteSPI(0x00);
  4548                           
  4549                           ;incstack = 0
  4550                           ; Regs used in _ReadSPI: [wreg+status,2+status,0+pclath+cstack]
  4551  0C1D  3000               	movlw	0
  4552  0C1E  120A  158A  2458   	fcall	_WriteSPI
  4553                           
  4554                           ;functions.c: 455: return SSPBUF;
  4555  0C21  1283               	bcf	3,5	;RP0=0, select bank0
  4556  0C22  1303               	bcf	3,6	;RP1=0, select bank0
  4557  0C23  0813               	movf	19,w	;volatile
  4558  0C24  0008               	return
  4559  0C25                     __end_of_ReadSPI:	
  4560                           
  4561                           	psect	text26
  4562  0C58                     __ptext26:	
  4563 ;; *************** function _WriteSPI *****************
  4564 ;; Defined at:
  4565 ;;		line 440 in file "functions.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;  databyte        1    wreg     unsigned char 
  4568 ;; Auto vars:     Size  Location     Type
  4569 ;;  databyte        1    2[BANK0 ] unsigned char 
  4570 ;;  buffer          1    1[BANK0 ] unsigned char 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		wreg
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4580 ;;      Params:         0       0       0       0       0
  4581 ;;      Locals:         0       2       0       0       0
  4582 ;;      Temps:          0       1       0       0       0
  4583 ;;      Totals:         0       3       0       0       0
  4584 ;;Total ram usage:        3 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    2
  4587 ;; This function calls:
  4588 ;;		Nothing
  4589 ;; This function is called by:
  4590 ;;		_ReadSPI
  4591 ;;		_RegisterRead
  4592 ;;		_RegisterSet
  4593 ;;		_WriteFIFO
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           
  4598                           ;psect for function _WriteSPI
  4599  0C58                     _WriteSPI:	
  4600                           
  4601                           ;incstack = 0
  4602                           ; Regs used in _WriteSPI: [wreg]
  4603                           ;WriteSPI@databyte stored from wreg
  4604  0C58  1283               	bcf	3,5	;RP0=0, select bank0
  4605  0C59  1303               	bcf	3,6	;RP1=0, select bank0
  4606  0C5A  00A2               	movwf	WriteSPI@databyte
  4607                           
  4608                           ;functions.c: 442: unsigned char buffer;
  4609                           ;functions.c: 443: buffer = SSPBUF;
  4610  0C5B  0813               	movf	19,w	;volatile
  4611  0C5C  00A0               	movwf	??_WriteSPI
  4612  0C5D  0820               	movf	??_WriteSPI,w
  4613  0C5E  00A1               	movwf	WriteSPI@buffer
  4614                           
  4615                           ;functions.c: 444: PIR1bits.SSPIF=0;
  4616  0C5F  118C               	bcf	12,3	;volatile
  4617                           
  4618                           ;functions.c: 445: SSPBUF = databyte;
  4619  0C60  0822               	movf	WriteSPI@databyte,w
  4620  0C61  0093               	movwf	19	;volatile
  4621  0C62                     l344:	
  4622                           ;functions.c: 446: while(PIR1bits.SSPIF == 0);
  4623                           
  4624  0C62  1D8C               	btfss	12,3	;volatile
  4625  0C63  2C62               	goto	l344
  4626                           
  4627                           ;functions.c: 447: PIR1bits.SSPIF = 0;
  4628  0C64  118C               	bcf	12,3	;volatile
  4629  0C65  0008               	return
  4630  0C66                     __end_of_WriteSPI:	
  4631                           
  4632                           	psect	text27
  4633  0C4B                     __ptext27:	
  4634 ;; *************** function _Mode_2 *****************
  4635 ;; Defined at:
  4636 ;;		line 238 in file "functions.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;		None
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;		None
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4650 ;;      Params:         0       0       0       0       0
  4651 ;;      Locals:         0       0       0       0       0
  4652 ;;      Temps:          0       0       0       0       0
  4653 ;;      Totals:         0       0       0       0       0
  4654 ;;Total ram usage:        0 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    6
  4657 ;; This function calls:
  4658 ;;		_LightWithSensController
  4659 ;; This function is called by:
  4660 ;;		_main
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           
  4665                           ;psect for function _Mode_2
  4666  0C4B                     _Mode_2:	
  4667                           
  4668                           ;functions.c: 240: LightWithSensController();
  4669                           
  4670                           ;incstack = 0
  4671                           ; Regs used in _Mode_2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4672  0C4B  120A  158A  2645  120A  158A  	fcall	_LightWithSensController
  4673                           
  4674                           ;functions.c: 241: if(PORTCbits.RC2)
  4675  0C50  1283               	bcf	3,5	;RP0=0, select bank0
  4676  0C51  1303               	bcf	3,6	;RP1=0, select bank0
  4677  0C52  1D07               	btfss	7,2	;volatile
  4678  0C53  2C56               	goto	l298
  4679                           
  4680                           ;functions.c: 242: PORTCbits.RC1 = 1;
  4681  0C54  1487               	bsf	7,1	;volatile
  4682  0C55  0008               	return
  4683  0C56                     l298:	
  4684                           
  4685                           ;functions.c: 243: else
  4686                           ;functions.c: 244: PORTCbits.RC1 = 0;
  4687  0C56  1087               	bcf	7,1	;volatile
  4688  0C57  0008               	return
  4689  0C58                     __end_of_Mode_2:	
  4690                           
  4691                           	psect	text28
  4692  0CCD                     __ptext28:	
  4693 ;; *************** function _Mode_1 *****************
  4694 ;; Defined at:
  4695 ;;		line 224 in file "functions.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;		None
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg, status,2, status,0, pclath, cstack
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4709 ;;      Params:         0       0       0       0       0
  4710 ;;      Locals:         0       0       0       0       0
  4711 ;;      Temps:          0       0       0       0       0
  4712 ;;      Totals:         0       0       0       0       0
  4713 ;;Total ram usage:        0 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    5
  4716 ;; This function calls:
  4717 ;;		_DarknessCheck
  4718 ;; This function is called by:
  4719 ;;		_main
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           
  4724                           ;psect for function _Mode_1
  4725  0CCD                     _Mode_1:	
  4726                           
  4727                           ;functions.c: 227: if((intSecondCounter == 30)&&(!PORTCbits.RC2))
  4728                           
  4729                           ;incstack = 0
  4730                           ; Regs used in _Mode_1: [wreg+status,2+status,0+pclath+cstack]
  4731  0CCD  301E               	movlw	30
  4732  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  4733  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
  4734  0CD0  066A               	xorwf	_intSecondCounter,w
  4735  0CD1  046B               	iorwf	_intSecondCounter+1,w
  4736  0CD2  1903               	btfsc	3,2
  4737  0CD3  1907               	btfsc	7,2	;volatile
  4738  0CD4  2CDA               	goto	l2274
  4739                           
  4740                           ;functions.c: 228: DarknessCheck();
  4741  0CD5  120A  158A  258D  120A  158A  	fcall	_DarknessCheck
  4742  0CDA                     l2274:	
  4743                           
  4744                           ;functions.c: 229: if((intBlinkCycle == 1)&&(bDark == 1))
  4745  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  4746  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  4747  0CDC  0368               	decf	_intBlinkCycle,w
  4748  0CDD  0469               	iorwf	_intBlinkCycle+1,w
  4749  0CDE  1D03               	btfss	3,2
  4750  0CDF  2CE5               	goto	l293
  4751  0CE0  036D               	decf	_bDark,w
  4752  0CE1  1D03               	btfss	3,2
  4753  0CE2  2CE5               	goto	l293
  4754                           
  4755                           ;functions.c: 230: PORTCbits.RC2 = 1;
  4756  0CE3  1507               	bsf	7,2	;volatile
  4757  0CE4  0008               	return
  4758  0CE5                     l293:	
  4759                           
  4760                           ;functions.c: 231: else
  4761                           ;functions.c: 232: PORTCbits.RC2 = 0;
  4762  0CE5  1107               	bcf	7,2	;volatile
  4763  0CE6  0008               	return
  4764  0CE7                     __end_of_Mode_1:	
  4765                           
  4766                           	psect	text29
  4767  07FB                     __ptext29:	
  4768 ;; *************** function _Mode_0 *****************
  4769 ;; Defined at:
  4770 ;;		line 216 in file "functions.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4784 ;;      Params:         0       0       0       0       0
  4785 ;;      Locals:         0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0
  4787 ;;      Totals:         0       0       0       0       0
  4788 ;;Total ram usage:        0 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    6
  4791 ;; This function calls:
  4792 ;;		_LightWithSensController
  4793 ;; This function is called by:
  4794 ;;		_main
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           
  4799                           ;psect for function _Mode_0
  4800  07FB                     _Mode_0:	
  4801                           
  4802                           ;functions.c: 218: LightWithSensController();
  4803                           
  4804                           ;incstack = 0
  4805                           ; Regs used in _Mode_0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4806  07FB  120A  158A  2645   	fcall	_LightWithSensController
  4807  07FE  0008               	return
  4808  07FF                     __end_of_Mode_0:	
  4809                           
  4810                           	psect	text30
  4811  0E45                     __ptext30:	
  4812 ;; *************** function _LightWithSensController *****************
  4813 ;; Defined at:
  4814 ;;		line 282 in file "functions.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;		None
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;		None
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  1    wreg      void 
  4821 ;; Registers used:
  4822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4828 ;;      Params:         0       0       0       0       0
  4829 ;;      Locals:         0       0       0       0       0
  4830 ;;      Temps:          0       0       0       0       0
  4831 ;;      Totals:         0       0       0       0       0
  4832 ;;Total ram usage:        0 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    5
  4835 ;; This function calls:
  4836 ;;		_DarknessCheck
  4837 ;;		_timerFunction
  4838 ;; This function is called by:
  4839 ;;		_Mode_0
  4840 ;;		_Mode_2
  4841 ;;		_Mode_4
  4842 ;;		_Mode_5
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           
  4847                           ;psect for function _LightWithSensController
  4848  0E45                     _LightWithSensController:	
  4849                           
  4850                           ;functions.c: 286: if((intSecondCounter == 30)&&(!PORTCbits.RC2))
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in _LightWithSensController: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4854  0E45  301E               	movlw	30
  4855  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  4856  0E47  1303               	bcf	3,6	;RP1=0, select bank0
  4857  0E48  066A               	xorwf	_intSecondCounter,w
  4858  0E49  046B               	iorwf	_intSecondCounter+1,w
  4859  0E4A  1903               	btfsc	3,2
  4860  0E4B  1907               	btfsc	7,2	;volatile
  4861  0E4C  2E52               	goto	l2156
  4862                           
  4863                           ;functions.c: 287: DarknessCheck();
  4864  0E4D  120A  158A  258D  120A  158A  	fcall	_DarknessCheck
  4865  0E52                     l2156:	
  4866                           
  4867                           ;functions.c: 291: if((bDark == 1)&&(PORTAbits.RA1)&&(!PORTCbits.RC2))
  4868  0E52  1283               	bcf	3,5	;RP0=0, select bank0
  4869  0E53  1303               	bcf	3,6	;RP1=0, select bank0
  4870  0E54  036D               	decf	_bDark,w
  4871  0E55  1903               	btfsc	3,2
  4872  0E56  1C85               	btfss	5,1	;volatile
  4873  0E57  2E67               	goto	l2166
  4874  0E58  1907               	btfsc	7,2	;volatile
  4875  0E59  2E67               	goto	l2166
  4876                           
  4877                           ;functions.c: 292: {
  4878                           ;functions.c: 294: PORTCbits.RC2 = 1;
  4879  0E5A  1507               	bsf	7,2	;volatile
  4880                           
  4881                           ;functions.c: 296: timerFunction(0,120);
  4882  0E5B  3000               	movlw	0
  4883  0E5C  00A0               	movwf	timerFunction@intTimerNumber
  4884  0E5D  00A1               	movwf	timerFunction@intTimerNumber+1
  4885  0E5E  3078               	movlw	120
  4886  0E5F  00A2               	movwf	timerFunction@intSetSeconds
  4887  0E60  3000               	movlw	0
  4888  0E61  00A3               	movwf	timerFunction@intSetSeconds+1
  4889  0E62  120A  158A  24A6  120A  158A  	fcall	_timerFunction
  4890  0E67                     l2166:	
  4891                           
  4892                           ;functions.c: 297: }
  4893                           ;functions.c: 300: if(bTimerComplete[0])
  4894  0E67  1683               	bsf	3,5	;RP0=1, select bank1
  4895  0E68  1303               	bcf	3,6	;RP1=0, select bank1
  4896  0E69  082A               	movf	_bTimerComplete^(0+128),w
  4897  0E6A  1903               	btfsc	3,2
  4898  0E6B  0008               	return
  4899                           
  4900                           ;functions.c: 301: {
  4901                           ;functions.c: 302: DarknessCheck();
  4902  0E6C  120A  158A  258D  120A  158A  	fcall	_DarknessCheck
  4903                           
  4904                           ;functions.c: 303: if((bDark)&&(PORTAbits.RA1))
  4905  0E71  1283               	bcf	3,5	;RP0=0, select bank0
  4906  0E72  1303               	bcf	3,6	;RP1=0, select bank0
  4907  0E73  086D               	movf	_bDark,w
  4908  0E74  1D03               	btfss	3,2
  4909  0E75  1C85               	btfss	5,1	;volatile
  4910  0E76  2E82               	goto	l317
  4911                           
  4912                           ;functions.c: 304: {
  4913                           ;functions.c: 305: timerFunction(0,120);
  4914  0E77  3000               	movlw	0
  4915  0E78  00A0               	movwf	timerFunction@intTimerNumber
  4916  0E79  00A1               	movwf	timerFunction@intTimerNumber+1
  4917  0E7A  3078               	movlw	120
  4918  0E7B  00A2               	movwf	timerFunction@intSetSeconds
  4919  0E7C  3000               	movlw	0
  4920  0E7D  00A3               	movwf	timerFunction@intSetSeconds+1
  4921  0E7E  120A  158A  24A6   	fcall	_timerFunction
  4922                           
  4923                           ;functions.c: 306: }
  4924  0E81  0008               	return
  4925  0E82                     l317:	
  4926                           
  4927                           ;functions.c: 307: else
  4928                           ;functions.c: 308: PORTCbits.RC2 = 0;
  4929  0E82  1107               	bcf	7,2	;volatile
  4930  0E83  0008               	return
  4931  0E84                     __end_of_LightWithSensController:	
  4932                           
  4933                           	psect	text31
  4934  0CA6                     __ptext31:	
  4935 ;; *************** function _timerFunction *****************
  4936 ;; Defined at:
  4937 ;;		line 333 in file "functions.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  intTimerNumb    2    0[BANK0 ] int 
  4940 ;;  intSetSecond    2    2[BANK0 ] int 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;		None
  4943 ;; Return value:  Size  Location     Type
  4944 ;;                  1    wreg      unsigned char 
  4945 ;; Registers used:
  4946 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4947 ;; Tracked objects:
  4948 ;;		On entry : 0/0
  4949 ;;		On exit  : 0/0
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4952 ;;      Params:         0       4       0       0       0
  4953 ;;      Locals:         0       0       0       0       0
  4954 ;;      Temps:          0       1       0       0       0
  4955 ;;      Totals:         0       5       0       0       0
  4956 ;;Total ram usage:        5 bytes
  4957 ;; Hardware stack levels used:    1
  4958 ;; Hardware stack levels required when called:    2
  4959 ;; This function calls:
  4960 ;;		Nothing
  4961 ;; This function is called by:
  4962 ;;		_TransiverToReceive
  4963 ;;		_TransiverReadFIFO
  4964 ;;		_TransmittString
  4965 ;;		_LightWithSensController
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           
  4970                           ;psect for function _timerFunction
  4971  0CA6                     _timerFunction:	
  4972                           
  4973                           ;functions.c: 335: intClockTimer[intTimerNumber] = intSetSeconds;
  4974                           
  4975                           ;incstack = 0
  4976                           ; Regs used in _timerFunction: [wreg-fsr0h+status,2+status,0]
  4977  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  4978  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  4979  0CA8  0820               	movf	timerFunction@intTimerNumber,w
  4980  0CA9  00A4               	movwf	??_timerFunction
  4981  0CAA  0724               	addwf	??_timerFunction,w
  4982  0CAB  3EA0               	addlw	(low (_intClockTimer| 0))& (0+255)
  4983  0CAC  0084               	movwf	4
  4984  0CAD  0822               	movf	timerFunction@intSetSeconds,w
  4985  0CAE  1383               	bcf	3,7	;select IRP bank1
  4986  0CAF  0080               	movwf	0
  4987  0CB0  0A84               	incf	4,f
  4988  0CB1  0823               	movf	timerFunction@intSetSeconds+1,w
  4989  0CB2  0080               	movwf	0
  4990                           
  4991                           ;functions.c: 336: bTimerComplete[intTimerNumber] = 0;
  4992  0CB3  0820               	movf	timerFunction@intTimerNumber,w
  4993  0CB4  3EAA               	addlw	(low (_bTimerComplete| 0))& (0+255)
  4994  0CB5  0084               	movwf	4
  4995  0CB6  0180               	clrf	0
  4996  0CB7  0008               	return
  4997  0CB8                     __end_of_timerFunction:	
  4998                           ;functions.c: 337: return 1;
  4999                           ;	Return value of _timerFunction is never used
  5000                           
  5001                           
  5002                           	psect	text32
  5003  0D8D                     __ptext32:	
  5004 ;; *************** function _DarknessCheck *****************
  5005 ;; Defined at:
  5006 ;;		line 844 in file "functions.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;		None
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  darknessValu    1    9[BANK0 ] unsigned char 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, status,2, status,0, pclath, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5020 ;;      Params:         0       0       0       0       0
  5021 ;;      Locals:         0       1       0       0       0
  5022 ;;      Temps:          0       1       0       0       0
  5023 ;;      Totals:         0       2       0       0       0
  5024 ;;Total ram usage:        2 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    4
  5027 ;; This function calls:
  5028 ;;		_AnalogValue
  5029 ;;		_eeprom_read
  5030 ;; This function is called by:
  5031 ;;		_TransmittedDataHandler
  5032 ;;		_Mode_1
  5033 ;;		_LightWithSensController
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           
  5038                           ;psect for function _DarknessCheck
  5039  0D8D                     _DarknessCheck:	
  5040                           
  5041                           ;functions.c: 846: unsigned char darknessValue;
  5042                           ;functions.c: 847: PORTCbits.RC0 = 0;
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _DarknessCheck: [wreg+status,2+status,0+pclath+cstack]
  5046  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  5047  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  5048  0D8F  1007               	bcf	7,0	;volatile
  5049                           
  5050                           ;functions.c: 849: if(bValueFromPot == TRUE)
  5051  0D90  036F               	decf	_bValueFromPot,w
  5052  0D91  1D03               	btfss	3,2
  5053  0D92  2D9A               	goto	l1990
  5054                           
  5055                           ;functions.c: 850: darknessValue= AnalogValue(3);
  5056  0D93  3003               	movlw	3
  5057  0D94  120A  158A  2564  120A  158A  	fcall	_AnalogValue
  5058  0D99  2DA0               	goto	L2
  5059  0D9A                     l1990:	
  5060                           
  5061                           ;functions.c: 851: else
  5062                           ;functions.c: 852: darknessValue=eeprom_read(addressDarknessValue);
  5063  0D9A  087C               	movf	_addressDarknessValue,w
  5064  0D9B  120A  118A  25DB  120A  158A  	fcall	_eeprom_read
  5065  0DA0                     L2:	
  5066  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  5067  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  5068  0DA2  00A8               	movwf	??_DarknessCheck
  5069  0DA3  0828               	movf	??_DarknessCheck,w
  5070  0DA4  00A9               	movwf	DarknessCheck@darknessValue
  5071                           
  5072                           ;functions.c: 854: if(AnalogValue(0)>darknessValue)
  5073  0DA5  3000               	movlw	0
  5074  0DA6  120A  158A  2564  120A  158A  	fcall	_AnalogValue
  5075  0DAB  1283               	bcf	3,5	;RP0=0, select bank0
  5076  0DAC  1303               	bcf	3,6	;RP1=0, select bank0
  5077  0DAD  0229               	subwf	DarknessCheck@darknessValue,w
  5078  0DAE  1803               	skipnc
  5079  0DAF  2DB3               	goto	l1994
  5080                           
  5081                           ;functions.c: 855: bDark = 1;
  5082  0DB0  01ED               	clrf	_bDark
  5083  0DB1  0AED               	incf	_bDark,f
  5084  0DB2  2DB4               	goto	l1996
  5085  0DB3                     l1994:	
  5086                           
  5087                           ;functions.c: 856: else
  5088                           ;functions.c: 857: bDark = 0;
  5089  0DB3  01ED               	clrf	_bDark
  5090  0DB4                     l1996:	
  5091                           
  5092                           ;functions.c: 858: PORTCbits.RC0 = 0;
  5093  0DB4  1007               	bcf	7,0	;volatile
  5094  0DB5  0008               	return
  5095  0DB6                     __end_of_DarknessCheck:	
  5096                           
  5097                           	psect	text33
  5098  05DB                     __ptext33:	
  5099 ;; *************** function _eeprom_read *****************
  5100 ;; Defined at:
  5101 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eeread.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;  addr            1    wreg     unsigned char 
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;  addr            1    1[BANK0 ] unsigned char 
  5106 ;; Return value:  Size  Location     Type
  5107 ;;                  1    wreg      unsigned char 
  5108 ;; Registers used:
  5109 ;;		wreg, status,2, status,0
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5115 ;;      Params:         0       0       0       0       0
  5116 ;;      Locals:         0       1       0       0       0
  5117 ;;      Temps:          0       1       0       0       0
  5118 ;;      Totals:         0       2       0       0       0
  5119 ;;Total ram usage:        2 bytes
  5120 ;; Hardware stack levels used:    1
  5121 ;; Hardware stack levels required when called:    2
  5122 ;; This function calls:
  5123 ;;		Nothing
  5124 ;; This function is called by:
  5125 ;;		_TransmittedDataHandler
  5126 ;;		_DarknessCheck
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           
  5131                           ;psect for function _eeprom_read
  5132  05DB                     _eeprom_read:	
  5133                           
  5134                           ;incstack = 0
  5135                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5136                           ;eeprom_read@addr stored from wreg
  5137  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  5138  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  5139  05DD  00A1               	movwf	eeprom_read@addr
  5140  05DE  2DE1               	goto	l434
  5141  05DF                     u1131:	
  5142  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  5143  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  5144  05E1                     l434:	
  5145  05E1  0064               	clrwdt	;# 
  5146  05E2  1683               	bsf	3,5	;RP0=1, select bank3
  5147  05E3  1703               	bsf	3,6	;RP1=1, select bank3
  5148  05E4  188C               	btfsc	12,1	;volsfr
  5149  05E5  2DDF               	goto	u1131
  5150  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  5151  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  5152  05E8  0821               	movf	eeprom_read@addr,w
  5153  05E9  1283               	bcf	3,5	;RP0=0, select bank2
  5154  05EA  1703               	bsf	3,6	;RP1=1, select bank2
  5155  05EB  008D               	movwf	13	;volatile
  5156  05EC  303F               	movlw	63
  5157  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  5158  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  5159  05EF  00A0               	movwf	??_eeprom_read
  5160  05F0  0820               	movf	??_eeprom_read,w
  5161  05F1  1683               	bsf	3,5	;RP0=1, select bank3
  5162  05F2  1703               	bsf	3,6	;RP1=1, select bank3
  5163  05F3  058C               	andwf	12,f	;volsfr
  5164  05F4  140C               	bsf	12,0	;volsfr
  5165  05F5  1003               	clrc
  5166  05F6  180C               	btfsc	12,0	;volsfr
  5167  05F7  1403               	setc
  5168  05F8  3000               	movlw	0
  5169  05F9  1803               	skipnc
  5170  05FA  3001               	movlw	1
  5171  05FB  1283               	bcf	3,5	;RP0=0, select bank2
  5172  05FC  1703               	bsf	3,6	;RP1=1, select bank2
  5173  05FD  080C               	movf	12,w	;volatile
  5174  05FE  0008               	return
  5175  05FF                     __end_of_eeprom_read:	
  5176                           
  5177                           	psect	text34
  5178  0D64                     __ptext34:	
  5179 ;; *************** function _AnalogValue *****************
  5180 ;; Defined at:
  5181 ;;		line 817 in file "functions.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  channel         1    wreg     unsigned char 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  channel         1    7[BANK0 ] unsigned char 
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  1    wreg      unsigned char 
  5188 ;; Registers used:
  5189 ;;		wreg, status,2, status,0, pclath, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5195 ;;      Params:         0       0       0       0       0
  5196 ;;      Locals:         0       1       0       0       0
  5197 ;;      Temps:          0       1       0       0       0
  5198 ;;      Totals:         0       2       0       0       0
  5199 ;;Total ram usage:        2 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:    3
  5202 ;; This function calls:
  5203 ;;		_DelayDs
  5204 ;; This function is called by:
  5205 ;;		_TransmittedDataHandler
  5206 ;;		_DarknessCheck
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           
  5211                           ;psect for function _AnalogValue
  5212  0D64                     _AnalogValue:	
  5213                           
  5214                           ;incstack = 0
  5215                           ; Regs used in _AnalogValue: [wreg+status,2+status,0+pclath+cstack]
  5216                           ;AnalogValue@channel stored from wreg
  5217  0D64  1283               	bcf	3,5	;RP0=0, select bank0
  5218  0D65  1303               	bcf	3,6	;RP1=0, select bank0
  5219  0D66  00A7               	movwf	AnalogValue@channel
  5220                           
  5221                           ;functions.c: 819: ADCON0bits.CHS = channel;
  5222  0D67  0827               	movf	AnalogValue@channel,w
  5223  0D68  00A6               	movwf	??_AnalogValue
  5224  0D69  0DA6               	rlf	??_AnalogValue,f
  5225  0D6A  0DA6               	rlf	??_AnalogValue,f
  5226  0D6B  081F               	movf	31,w	;volatile
  5227  0D6C  0626               	xorwf	??_AnalogValue,w
  5228  0D6D  39C3               	andlw	-61
  5229  0D6E  0626               	xorwf	??_AnalogValue,w
  5230  0D6F  009F               	movwf	31	;volatile
  5231                           
  5232                           ;functions.c: 820: ADCON0bits.ADON = 1;
  5233  0D70  141F               	bsf	31,0	;volatile
  5234                           
  5235                           ;functions.c: 821: DelayDs(1);
  5236  0D71  3001               	movlw	1
  5237  0D72  00A0               	movwf	DelayDs@cnt
  5238  0D73  3000               	movlw	0
  5239  0D74  00A1               	movwf	DelayDs@cnt+1
  5240  0D75  120A  158A  2540  120A  158A  	fcall	_DelayDs
  5241                           
  5242                           ;functions.c: 822: ADCON0bits.GO = 1;
  5243  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  5244  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  5245  0D7C  149F               	bsf	31,1	;volatile
  5246                           
  5247                           ;functions.c: 823: DelayDs(1);
  5248  0D7D  3001               	movlw	1
  5249  0D7E  00A0               	movwf	DelayDs@cnt
  5250  0D7F  3000               	movlw	0
  5251  0D80  00A1               	movwf	DelayDs@cnt+1
  5252  0D81  120A  158A  2540  120A  158A  	fcall	_DelayDs
  5253  0D86                     l408:	
  5254                           ;functions.c: 824: while(ADCON0bits.GO);
  5255                           
  5256  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  5257  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  5258  0D88  189F               	btfsc	31,1	;volatile
  5259  0D89  2D86               	goto	l408
  5260                           
  5261                           ;functions.c: 825: ADCON0bits.ADON = 0;
  5262  0D8A  101F               	bcf	31,0	;volatile
  5263                           
  5264                           ;functions.c: 826: return ADRESH;
  5265  0D8B  081E               	movf	30,w	;volatile
  5266  0D8C  0008               	return
  5267  0D8D                     __end_of_AnalogValue:	
  5268                           
  5269                           	psect	text35
  5270  0D40                     __ptext35:	
  5271 ;; *************** function _DelayDs *****************
  5272 ;; Defined at:
  5273 ;;		line 431 in file "functions.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  cnt             2    0[BANK0 ] int 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;  i               2    4[BANK0 ] int 
  5278 ;; Return value:  Size  Location     Type
  5279 ;;                  1    wreg      void 
  5280 ;; Registers used:
  5281 ;;		wreg, status,2
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5287 ;;      Params:         0       2       0       0       0
  5288 ;;      Locals:         0       2       0       0       0
  5289 ;;      Temps:          0       2       0       0       0
  5290 ;;      Totals:         0       6       0       0       0
  5291 ;;Total ram usage:        6 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    2
  5294 ;; This function calls:
  5295 ;;		Nothing
  5296 ;; This function is called by:
  5297 ;;		_TransmittedDataHandler
  5298 ;;		_Blink
  5299 ;;		_AnalogValue
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           
  5304                           ;psect for function _DelayDs
  5305  0D40                     _DelayDs:	
  5306                           
  5307                           ;functions.c: 432: int i;
  5308                           ;functions.c: 433: for(i=0;i<cnt;i++){
  5309                           
  5310                           ;incstack = 0
  5311                           ; Regs used in _DelayDs: [wreg+status,2]
  5312  0D40  1283               	bcf	3,5	;RP0=0, select bank0
  5313  0D41  1303               	bcf	3,6	;RP1=0, select bank0
  5314  0D42  01A4               	clrf	DelayDs@i
  5315  0D43  01A5               	clrf	DelayDs@i+1
  5316  0D44                     l338:	
  5317  0D44  0825               	movf	DelayDs@i+1,w
  5318  0D45  3A80               	xorlw	128
  5319  0D46  00A2               	movwf	??_DelayDs
  5320  0D47  0821               	movf	DelayDs@cnt+1,w
  5321  0D48  3A80               	xorlw	128
  5322  0D49  0222               	subwf	??_DelayDs,w
  5323  0D4A  1D03               	skipz
  5324  0D4B  2D4E               	goto	u1075
  5325  0D4C  0820               	movf	DelayDs@cnt,w
  5326  0D4D  0224               	subwf	DelayDs@i,w
  5327  0D4E                     u1075:	
  5328  0D4E  1803               	btfsc	3,0
  5329  0D4F  0008               	return
  5330                           
  5331                           ;functions.c: 434: _delay((unsigned long)((100)*(4000000/4000.0)));
  5332  0D50  3082               	movlw	130
  5333  0D51  1283               	bcf	3,5	;RP0=0, select bank0
  5334  0D52  1303               	bcf	3,6	;RP1=0, select bank0
  5335  0D53  00A3               	movwf	??_DelayDs+1
  5336  0D54  30DD               	movlw	221
  5337  0D55  00A2               	movwf	??_DelayDs
  5338  0D56                     u2217:	
  5339  0D56  0BA2               	decfsz	??_DelayDs,f
  5340  0D57  2D56               	goto	u2217
  5341  0D58  0BA3               	decfsz	??_DelayDs+1,f
  5342  0D59  2D56               	goto	u2217
  5343  0D5A  2D5B               	nop2
  5344  0D5B  3001               	movlw	1
  5345  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  5346  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  5347  0D5E  07A4               	addwf	DelayDs@i,f
  5348  0D5F  1803               	skipnc
  5349  0D60  0AA5               	incf	DelayDs@i+1,f
  5350  0D61  3000               	movlw	0
  5351  0D62  07A5               	addwf	DelayDs@i+1,f
  5352  0D63  2D44               	goto	l338
  5353  0D64                     __end_of_DelayDs:	
  5354                           
  5355                           	psect	text36
  5356  04A9                     __ptext36:	
  5357 ;; *************** function _tc_int *****************
  5358 ;; Defined at:
  5359 ;;		line 746 in file "functions.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      void 
  5366 ;; Registers used:
  5367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5373 ;;      Params:         0       0       0       0       0
  5374 ;;      Locals:         0       0       0       0       0
  5375 ;;      Temps:          7       0       0       0       0
  5376 ;;      Totals:         7       0       0       0       0
  5377 ;;Total ram usage:        7 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    1
  5380 ;; This function calls:
  5381 ;;		_TimerCounter
  5382 ;;		i1_OperationMode
  5383 ;; This function is called by:
  5384 ;;		Interrupt level 1
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           
  5389                           ;psect for function _tc_int
  5390  04A9                     _tc_int:	
  5391                           
  5392                           ;functions.c: 750: if((PORTBbits.RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2))
      +                          {
  5393  04A9  1A86               	btfsc	6,5	;volatile
  5394  04AA  2CC3               	goto	i1l2418
  5395  04AB  0868               	movf	_intBlinkCycle,w
  5396  04AC  0469               	iorwf	_intBlinkCycle+1,w
  5397  04AD  1D03               	btfss	3,2
  5398  04AE  2CC3               	goto	i1l2418
  5399  04AF  120A  158A  242D  120A  118A  	fcall	i1_OperationMode
  5400  04B4  00F5               	movwf	??_tc_int
  5401  04B5  3002               	movlw	2
  5402  04B6  0275               	subwf	??_tc_int,w
  5403  04B7  1803               	skipnc
  5404  04B8  2CC3               	goto	i1l2418
  5405                           
  5406                           ;functions.c: 751: intBlinkCycle = 1;
  5407  04B9  3001               	movlw	1
  5408  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  5409  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  5410  04BC  00E8               	movwf	_intBlinkCycle
  5411  04BD  3000               	movlw	0
  5412  04BE  00E9               	movwf	_intBlinkCycle+1
  5413                           
  5414                           ;functions.c: 752: intBlinkCounter = 0;
  5415  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  5416  04C0  1303               	bcf	3,6	;RP1=0, select bank1
  5417  04C1  01B1               	clrf	_intBlinkCounter^(0+128)
  5418  04C2  01B2               	clrf	(_intBlinkCounter+1)^(0+128)
  5419  04C3                     i1l2418:	
  5420                           
  5421                           ;functions.c: 754: }
  5422                           ;functions.c: 755: if(TMR1IF ==1){
  5423  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  5424  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  5425  04C5  1C0C               	btfss	12,0	;volatile
  5426  04C6  2D68               	goto	L3
  5427                           
  5428                           ;functions.c: 756: TMR1ON = 0;
  5429  04C7  1010               	bcf	16,0	;volatile
  5430                           
  5431                           ;functions.c: 757: TMR1H = 0x0B;
  5432  04C8  300B               	movlw	11
  5433  04C9  008F               	movwf	15	;volatile
  5434                           
  5435                           ;functions.c: 758: TMR1L = 0xDB;
  5436  04CA  30DB               	movlw	219
  5437  04CB  008E               	movwf	14	;volatile
  5438                           
  5439                           ;functions.c: 760: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
  5440  04CC  0368               	decf	_intBlinkCycle,w
  5441  04CD  0469               	iorwf	_intBlinkCycle+1,w
  5442  04CE  1D03               	btfss	3,2
  5443  04CF  2CF6               	goto	i1l2436
  5444  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  5445  04D1  1303               	bcf	3,6	;RP1=0, select bank1
  5446  04D2  0858               	movf	(_intNumberOfBlinks+1)^(0+128),w
  5447  04D3  00F6               	movwf	??_tc_int+1
  5448  04D4  0857               	movf	_intNumberOfBlinks^(0+128),w
  5449  04D5  00F5               	movwf	??_tc_int
  5450  04D6  1003               	clrc
  5451  04D7  0DF5               	rlf	??_tc_int,f
  5452  04D8  0DF6               	rlf	??_tc_int+1,f
  5453  04D9  0832               	movf	(_intBlinkCounter+1)^(0+128),w
  5454  04DA  3A80               	xorlw	128
  5455  04DB  00F7               	movwf	??_tc_int+2
  5456  04DC  0876               	movf	??_tc_int+1,w
  5457  04DD  3A80               	xorlw	128
  5458  04DE  0277               	subwf	??_tc_int+2,w
  5459  04DF  1D03               	skipz
  5460  04E0  2CE3               	goto	u203_25
  5461  04E1  0875               	movf	??_tc_int,w
  5462  04E2  0231               	subwf	_intBlinkCounter^(0+128),w
  5463  04E3                     u203_25:	
  5464  04E3  1803               	skipnc
  5465  04E4  2CF6               	goto	i1l2436
  5466                           
  5467                           ;functions.c: 761: intBlinkCounter++;
  5468  04E5  3001               	movlw	1
  5469  04E6  1683               	bsf	3,5	;RP0=1, select bank1
  5470  04E7  1303               	bcf	3,6	;RP1=0, select bank1
  5471  04E8  07B1               	addwf	_intBlinkCounter^(0+128),f
  5472  04E9  1803               	skipnc
  5473  04EA  0AB2               	incf	(_intBlinkCounter+1)^(0+128),f
  5474  04EB  3000               	movlw	0
  5475  04EC  07B2               	addwf	(_intBlinkCounter+1)^(0+128),f
  5476                           
  5477                           ;functions.c: 763: if(PORTCbits.RC1 == 0)
  5478  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  5479  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  5480  04EF  1887               	btfsc	7,1	;volatile
  5481  04F0  2CF3               	goto	i1l397
  5482                           
  5483                           ;functions.c: 764: PORTCbits.RC1 = 1;
  5484  04F1  1487               	bsf	7,1	;volatile
  5485  04F2  2D16               	goto	i1l2444
  5486  04F3                     i1l397:	
  5487                           
  5488                           ;functions.c: 765: else if(PORTCbits.RC1 == 1)
  5489  04F3  1C87               	btfss	7,1	;volatile
  5490  04F4  2D16               	goto	i1l2444
  5491  04F5  2D15               	goto	i1l2442
  5492  04F6                     i1l2436:	
  5493                           ;functions.c: 767: }
  5494                           
  5495                           ;functions.c: 766: PORTCbits.RC1 = 0;
  5496                           
  5497                           
  5498                           ;functions.c: 769: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
  5499  04F6  1283               	bcf	3,5	;RP0=0, select bank0
  5500  04F7  1303               	bcf	3,6	;RP1=0, select bank0
  5501  04F8  0368               	decf	_intBlinkCycle,w
  5502  04F9  0469               	iorwf	_intBlinkCycle+1,w
  5503  04FA  1D03               	btfss	3,2
  5504  04FB  2D16               	goto	i1l2444
  5505  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  5506  04FD  1303               	bcf	3,6	;RP1=0, select bank1
  5507  04FE  0858               	movf	(_intNumberOfBlinks+1)^(0+128),w
  5508  04FF  00F6               	movwf	??_tc_int+1
  5509  0500  0857               	movf	_intNumberOfBlinks^(0+128),w
  5510  0501  00F5               	movwf	??_tc_int
  5511  0502  1003               	clrc
  5512  0503  0DF5               	rlf	??_tc_int,f
  5513  0504  0DF6               	rlf	??_tc_int+1,f
  5514  0505  0832               	movf	(_intBlinkCounter+1)^(0+128),w
  5515  0506  3A80               	xorlw	128
  5516  0507  00F7               	movwf	??_tc_int+2
  5517  0508  0876               	movf	??_tc_int+1,w
  5518  0509  3A80               	xorlw	128
  5519  050A  0277               	subwf	??_tc_int+2,w
  5520  050B  1D03               	skipz
  5521  050C  2D0F               	goto	u207_25
  5522  050D  0875               	movf	??_tc_int,w
  5523  050E  0231               	subwf	_intBlinkCounter^(0+128),w
  5524  050F                     u207_25:	
  5525  050F  1C03               	skipc
  5526  0510  2D16               	goto	i1l2444
  5527                           
  5528                           ;functions.c: 770: intBlinkCycle = 0;
  5529  0511  1283               	bcf	3,5	;RP0=0, select bank0
  5530  0512  1303               	bcf	3,6	;RP1=0, select bank0
  5531  0513  01E8               	clrf	_intBlinkCycle
  5532  0514  01E9               	clrf	_intBlinkCycle+1
  5533  0515                     i1l2442:	
  5534                           
  5535                           ;functions.c: 771: PORTCbits.RC1 = 0;
  5536  0515  1087               	bcf	7,1	;volatile
  5537  0516                     i1l2444:	
  5538                           
  5539                           ;functions.c: 772: }
  5540                           ;functions.c: 775: intHalfSecondCounter++;
  5541  0516  3001               	movlw	1
  5542  0517  1683               	bsf	3,5	;RP0=1, select bank1
  5543  0518  1303               	bcf	3,6	;RP1=0, select bank1
  5544  0519  07B5               	addwf	_intHalfSecondCounter^(0+128),f
  5545  051A  1803               	skipnc
  5546  051B  0AB6               	incf	(_intHalfSecondCounter+1)^(0+128),f
  5547  051C  3000               	movlw	0
  5548  051D  07B6               	addwf	(_intHalfSecondCounter+1)^(0+128),f
  5549                           
  5550                           ;functions.c: 776: if(intHalfSecondCounter>=2)
  5551  051E  0836               	movf	(_intHalfSecondCounter+1)^(0+128),w
  5552  051F  3A80               	xorlw	128
  5553  0520  00FF               	movwf	127
  5554  0521  3080               	movlw	128
  5555  0522  027F               	subwf	127,w
  5556  0523  1D03               	skipz
  5557  0524  2D27               	goto	u208_25
  5558  0525  3002               	movlw	2
  5559  0526  0235               	subwf	_intHalfSecondCounter^(0+128),w
  5560  0527                     u208_25:	
  5561  0527  1C03               	skipc
  5562  0528  2D3A               	goto	i1l2454
  5563                           
  5564                           ;functions.c: 777: {
  5565                           ;functions.c: 778: intHalfSecondCounter = 0;
  5566  0529  1683               	bsf	3,5	;RP0=1, select bank1
  5567  052A  1303               	bcf	3,6	;RP1=0, select bank1
  5568  052B  01B5               	clrf	_intHalfSecondCounter^(0+128)
  5569  052C  01B6               	clrf	(_intHalfSecondCounter+1)^(0+128)
  5570                           
  5571                           ;functions.c: 779: intSecondCounter++;
  5572  052D  3001               	movlw	1
  5573  052E  1283               	bcf	3,5	;RP0=0, select bank0
  5574  052F  1303               	bcf	3,6	;RP1=0, select bank0
  5575  0530  07EA               	addwf	_intSecondCounter,f
  5576  0531  1803               	skipnc
  5577  0532  0AEB               	incf	_intSecondCounter+1,f
  5578  0533  3000               	movlw	0
  5579  0534  07EB               	addwf	_intSecondCounter+1,f
  5580                           
  5581                           ;functions.c: 780: TimerCounter();
  5582  0535  120A  158A  2684  120A  118A  	fcall	_TimerCounter
  5583  053A                     i1l2454:	
  5584                           
  5585                           ;functions.c: 781: }
  5586                           ;functions.c: 782: if(intSecondCounter >=60)
  5587  053A  1283               	bcf	3,5	;RP0=0, select bank0
  5588  053B  1303               	bcf	3,6	;RP1=0, select bank0
  5589  053C  086B               	movf	_intSecondCounter+1,w
  5590  053D  3A80               	xorlw	128
  5591  053E  00FF               	movwf	127
  5592  053F  3080               	movlw	128
  5593  0540  027F               	subwf	127,w
  5594  0541  1D03               	skipz
  5595  0542  2D45               	goto	u209_25
  5596  0543  303C               	movlw	60
  5597  0544  026A               	subwf	_intSecondCounter,w
  5598  0545                     u209_25:	
  5599  0545  1C03               	skipc
  5600  0546  2D53               	goto	i1l2460
  5601                           
  5602                           ;functions.c: 783: {
  5603                           ;functions.c: 784: intSecondCounter = 0;
  5604  0547  1283               	bcf	3,5	;RP0=0, select bank0
  5605  0548  1303               	bcf	3,6	;RP1=0, select bank0
  5606  0549  01EA               	clrf	_intSecondCounter
  5607  054A  01EB               	clrf	_intSecondCounter+1
  5608                           
  5609                           ;functions.c: 785: intMinuteCounter++;
  5610  054B  3001               	movlw	1
  5611  054C  1683               	bsf	3,5	;RP0=1, select bank1
  5612  054D  1303               	bcf	3,6	;RP1=0, select bank1
  5613  054E  07B7               	addwf	_intMinuteCounter^(0+128),f
  5614  054F  1803               	skipnc
  5615  0550  0AB8               	incf	(_intMinuteCounter+1)^(0+128),f
  5616  0551  3000               	movlw	0
  5617  0552  07B8               	addwf	(_intMinuteCounter+1)^(0+128),f
  5618  0553                     i1l2460:	
  5619                           
  5620                           ;functions.c: 786: }
  5621                           ;functions.c: 787: if(intMinuteCounter >= 60)
  5622  0553  1683               	bsf	3,5	;RP0=1, select bank1
  5623  0554  1303               	bcf	3,6	;RP1=0, select bank1
  5624  0555  0838               	movf	(_intMinuteCounter+1)^(0+128),w
  5625  0556  3A80               	xorlw	128
  5626  0557  00FF               	movwf	127
  5627  0558  3080               	movlw	128
  5628  0559  027F               	subwf	127,w
  5629  055A  1D03               	skipz
  5630  055B  2D5E               	goto	u210_25
  5631  055C  303C               	movlw	60
  5632  055D  0237               	subwf	_intMinuteCounter^(0+128),w
  5633  055E                     u210_25:	
  5634  055E  1C03               	skipc
  5635  055F  2D64               	goto	i1l2464
  5636                           
  5637                           ;functions.c: 788: {
  5638                           ;functions.c: 789: intMinuteCounter = 0;
  5639  0560  1683               	bsf	3,5	;RP0=1, select bank1
  5640  0561  1303               	bcf	3,6	;RP1=0, select bank1
  5641  0562  01B7               	clrf	_intMinuteCounter^(0+128)
  5642  0563  01B8               	clrf	(_intMinuteCounter+1)^(0+128)
  5643  0564                     i1l2464:	
  5644                           
  5645                           ;functions.c: 790: }
  5646                           ;functions.c: 793: TMR1ON = 1;
  5647  0564  1283               	bcf	3,5	;RP0=0, select bank0
  5648  0565  1303               	bcf	3,6	;RP1=0, select bank0
  5649  0566  1410               	bsf	16,0	;volatile
  5650                           
  5651                           ;functions.c: 794: }
  5652                           ;functions.c: 795: TMR1IF = 0;
  5653  0567  100C               	bcf	12,0	;volatile
  5654  0568                     L3:	
  5655                           
  5656                           ;functions.c: 796: RBIF = 0;
  5657  0568  100B               	bcf	11,0	;volatile
  5658                           
  5659                           ;functions.c: 797: GIE = 1;
  5660  0569  178B               	bsf	11,7	;volatile
  5661                           
  5662                           ;functions.c: 798: return;
  5663  056A  087B               	movf	??_tc_int+6,w
  5664  056B  00FF               	movwf	127
  5665  056C  087A               	movf	??_tc_int+5,w
  5666  056D  008A               	movwf	10
  5667  056E  0879               	movf	??_tc_int+4,w
  5668  056F  0084               	movwf	4
  5669  0570  0E78               	swapf	(??_tc_int+3)^(0+-128),w
  5670  0571  0083               	movwf	3
  5671  0572  0EFE               	swapf	126,f
  5672  0573  0E7E               	swapf	126,w
  5673  0574  0009               	retfie
  5674  0575                     __end_of_tc_int:	
  5675                           
  5676                           	psect	intentry
  5677  0004                     __pintentry:	
  5678                           ;incstack = 0
  5679 ;; hardware stack exceeded
  5680                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5681                           
  5682  0004                     interrupt_function:	
  5683  007E                     saved_w	set	btemp
  5684  0004  00FE               	movwf	btemp
  5685  0005  0E03               	swapf	3,w
  5686  0006  00F8               	movwf	??_tc_int+3
  5687  0007  0804               	movf	4,w
  5688  0008  00F9               	movwf	??_tc_int+4
  5689  0009  080A               	movf	10,w
  5690  000A  00FA               	movwf	??_tc_int+5
  5691  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5692  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5693  000D  087F               	movf	btemp+1,w
  5694  000E  00FB               	movwf	??_tc_int+6
  5695  000F  120A  118A  2CA9   	ljmp	_tc_int
  5696                           
  5697                           	psect	text37
  5698  0C2D                     __ptext37:	
  5699 ;; *************** function i1_OperationMode *****************
  5700 ;; Defined at:
  5701 ;;		line 878 in file "functions.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;		None
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;  OperationMod    1    1[COMMON] unsigned char 
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  1    wreg      unsigned char 
  5708 ;; Registers used:
  5709 ;;		wreg, status,2
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5715 ;;      Params:         0       0       0       0       0
  5716 ;;      Locals:         1       0       0       0       0
  5717 ;;      Temps:          1       0       0       0       0
  5718 ;;      Totals:         2       0       0       0       0
  5719 ;;Total ram usage:        2 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; This function calls:
  5722 ;;		Nothing
  5723 ;; This function is called by:
  5724 ;;		_tc_int
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           
  5729                           ;psect for function i1_OperationMode
  5730  0C2D                     i1_OperationMode:	
  5731                           
  5732                           ;functions.c: 880: unsigned char bracketStatus;
  5733                           ;functions.c: 881: bracketStatus = ((~PORTB) & 0b00000111) ;
  5734                           
  5735                           ;incstack = 0
  5736 ;; hardware stack exceeded
  5737                           ; Regs used in i1_OperationMode: [wreg+status,2]
  5738  0C2D  1283               	bcf	3,5	;RP0=0, select bank0
  5739  0C2E  1303               	bcf	3,6	;RP1=0, select bank0
  5740  0C2F  0906               	comf	6,w	;volatile
  5741  0C30  3907               	andlw	7
  5742  0C31  00F0               	movwf	??i1_OperationMode
  5743  0C32  0870               	movf	??i1_OperationMode,w
  5744  0C33  00F1               	movwf	i1OperationMode@bracketStatus
  5745                           
  5746                           ;functions.c: 883: return bracketStatus;
  5747  0C34  0871               	movf	i1OperationMode@bracketStatus,w
  5748  0C35  0008               	return
  5749  0C36                     __end_ofi1_OperationMode:	
  5750                           
  5751                           	psect	text38
  5752  0E84                     __ptext38:	
  5753 ;; *************** function _TimerCounter *****************
  5754 ;; Defined at:
  5755 ;;		line 355 in file "functions.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;		None
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  i               2    3[COMMON] int 
  5760 ;; Return value:  Size  Location     Type
  5761 ;;                  1    wreg      void 
  5762 ;; Registers used:
  5763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5769 ;;      Params:         0       0       0       0       0
  5770 ;;      Locals:         2       0       0       0       0
  5771 ;;      Temps:          3       0       0       0       0
  5772 ;;      Totals:         5       0       0       0       0
  5773 ;;Total ram usage:        5 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; This function calls:
  5776 ;;		Nothing
  5777 ;; This function is called by:
  5778 ;;		_tc_int
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           
  5783                           ;psect for function _TimerCounter
  5784  0E84                     _TimerCounter:	
  5785                           
  5786                           ;functions.c: 357: for (int i = 0; i < 5; i++)
  5787                           
  5788                           ;incstack = 0
  5789 ;; hardware stack exceeded
  5790                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  5791  0E84  01F3               	clrf	TimerCounter@i
  5792  0E85  01F4               	clrf	TimerCounter@i+1
  5793  0E86                     L4:	
  5794  0E86  0874               	movf	TimerCounter@i+1,w
  5795  0E87  3A80               	xorlw	128
  5796  0E88  00FF               	movwf	127
  5797  0E89  3080               	movlw	128
  5798  0E8A  027F               	subwf	127,w
  5799  0E8B  1D03               	skipz
  5800  0E8C  2E8F               	goto	u187_25
  5801  0E8D  3005               	movlw	5
  5802  0E8E  0273               	subwf	TimerCounter@i,w
  5803  0E8F                     u187_25:	
  5804  0E8F  1803               	btfsc	3,0
  5805  0E90  0008               	return
  5806                           
  5807                           ;functions.c: 358: {
  5808                           ;functions.c: 359: if(intClockTimer[i]>0)
  5809  0E91  0873               	movf	TimerCounter@i,w
  5810  0E92  00F0               	movwf	??_TimerCounter
  5811  0E93  0770               	addwf	??_TimerCounter,w
  5812  0E94  3EA0               	addlw	(low (_intClockTimer| 0))& (0+255)
  5813  0E95  0084               	movwf	4
  5814  0E96  1383               	bcf	3,7	;select IRP bank1
  5815  0E97  0800               	movf	0,w
  5816  0E98  00F1               	movwf	??_TimerCounter+1
  5817  0E99  0A84               	incf	4,f
  5818  0E9A  0800               	movf	0,w
  5819  0E9B  00F2               	movwf	??_TimerCounter+2
  5820  0E9C  0872               	movf	??_TimerCounter+2,w
  5821  0E9D  3A80               	xorlw	128
  5822  0E9E  00FF               	movwf	127
  5823  0E9F  3080               	movlw	128
  5824  0EA0  027F               	subwf	127,w
  5825  0EA1  1D03               	skipz
  5826  0EA2  2EA5               	goto	u188_25
  5827  0EA3  3001               	movlw	1
  5828  0EA4  0271               	subwf	??_TimerCounter+1,w
  5829  0EA5                     u188_25:	
  5830  0EA5  1C03               	skipc
  5831  0EA6  2EB9               	goto	i1l2360
  5832                           
  5833                           ;functions.c: 360: intClockTimer[i]--;
  5834  0EA7  0873               	movf	TimerCounter@i,w
  5835  0EA8  00F0               	movwf	??_TimerCounter
  5836  0EA9  0770               	addwf	??_TimerCounter,w
  5837  0EAA  3EA0               	addlw	(low (_intClockTimer| 0))& (0+255)
  5838  0EAB  0084               	movwf	4
  5839  0EAC  30FF               	movlw	255
  5840  0EAD  1383               	bcf	3,7	;select IRP bank1
  5841  0EAE  0780               	addwf	0,f
  5842  0EAF  0F84               	incfsz	4,f
  5843  0EB0  0800               	movf	0,w
  5844  0EB1  1803               	skipnc
  5845  0EB2  0A00               	incf	0,w
  5846  0EB3  00FF               	movwf	127
  5847  0EB4  30FF               	movlw	255
  5848  0EB5  077F               	addwf	127,w
  5849  0EB6  0080               	movwf	0
  5850  0EB7  0384               	decf	4,f
  5851  0EB8  2EBF               	goto	i1l2362
  5852  0EB9                     i1l2360:	
  5853                           
  5854                           ;functions.c: 361: else
  5855                           ;functions.c: 362: bTimerComplete[i] = 1;
  5856  0EB9  0873               	movf	TimerCounter@i,w
  5857  0EBA  3EAA               	addlw	(low (_bTimerComplete| 0))& (0+255)
  5858  0EBB  0084               	movwf	4
  5859  0EBC  1383               	bcf	3,7	;select IRP bank1
  5860  0EBD  0180               	clrf	0
  5861  0EBE  0A80               	incf	0,f
  5862  0EBF                     i1l2362:	
  5863  0EBF  3001               	movlw	1
  5864  0EC0  07F3               	addwf	TimerCounter@i,f
  5865  0EC1  1803               	skipnc
  5866  0EC2  0AF4               	incf	TimerCounter@i+1,f
  5867  0EC3  3000               	movlw	0
  5868  0EC4  07F4               	addwf	TimerCounter@i+1,f
  5869  0EC5  2E86               	goto	L4
  5870  0EC6                     __end_of_TimerCounter:	
  5871  007E                     btemp	set	126	;btemp
  5872  007E                     wtemp	set	126
  5873  007E                     wtemp0	set	126
  5874  0080                     wtemp1	set	128
  5875  0082                     wtemp2	set	130
  5876  0084                     wtemp3	set	132
  5877  0086                     wtemp4	set	134
  5878  0088                     wtemp5	set	136
  5879  007F                     wtemp6	set	127
  5880  007E                     ttemp	set	126
  5881  007E                     ttemp0	set	126
  5882  0081                     ttemp1	set	129
  5883  0084                     ttemp2	set	132
  5884  0087                     ttemp3	set	135
  5885  007F                     ttemp4	set	127
  5886  007E                     ltemp	set	126
  5887  007E                     ltemp0	set	126
  5888  0082                     ltemp1	set	130
  5889  0086                     ltemp2	set	134
  5890  0080                     ltemp3	set	128


Data Sizes:
    Strings     116
    Constant    39
    Data        3
    BSS         104
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     72      80
    BANK1            80      0      57
    BANK3            96      0      40
    BANK2            96      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_15(CODE[6]), STR_14(CODE[5]), STR_13(CODE[8]), STR_10(CODE[7]), 
		 -> STR_7(CODE[9]), STR_6(CODE[7]), STR_5(CODE[8]), STR_4(CODE[7]), 
		 -> STR_3(CODE[7]), STR_2(CODE[8]), STR_1(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransmittedString(BANK1[30]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_15(CODE[6]), STR_14(CODE[5]), STR_13(CODE[8]), STR_10(CODE[7]), 
		 -> STR_7(CODE[9]), STR_6(CODE[7]), STR_5(CODE[8]), STR_4(CODE[7]), 
		 -> STR_3(CODE[7]), STR_2(CODE[8]), STR_1(CODE[8]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_15(CODE[6]), STR_14(CODE[5]), STR_13(CODE[8]), STR_10(CODE[7]), 
		 -> STR_7(CODE[9]), STR_6(CODE[7]), STR_5(CODE[8]), STR_4(CODE[7]), 
		 -> STR_3(CODE[7]), STR_2(CODE[8]), STR_1(CODE[8]), 

    strchr@ptr	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransmittedString(BANK1[30]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransmittedString(BANK1[30]), 

    strstr@s2	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_15(CODE[6]), STR_14(CODE[5]), STR_13(CODE[8]), STR_10(CODE[7]), 
		 -> STR_7(CODE[9]), STR_6(CODE[7]), STR_5(CODE[8]), STR_4(CODE[7]), 
		 -> STR_3(CODE[7]), STR_2(CODE[8]), STR_1(CODE[8]), 

    strstr@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransmittedString(BANK1[30]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 30
		 -> TransmittedString(BANK1[30]), 

    TransmittString@dataString	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_17(CODE[8]), STR_16(CODE[8]), TransmittedDataHandler@slask_746(BANK0[8]), TransmittedDataHandler@slask_743(BANK0[8]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_9(CODE[14]), STR_8(CODE[14]), 
		 -> TransmittedDataHandler@slask_734(BANK0[8]), TransmittedDataHandler@slask(BANK0[8]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransmittedString(BANK1[30]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_TimerCounter

Critical Paths under _main in BANK0

    _main->_TransiverReadFIFO
    _TransiverToReceive->_FindChannel
    _TransiverReadFIFO->_TransmittedDataHandler
    _TransmittedDataHandler->_TransmittString
    _strstr->_strncmp
    _strncmp->_strlen
    _atoi->___wmul
    _TransiverInit->_FindChannel
    _Blink->_DelayDs
    _Mode_5->_TransmittString
    _Mode_4->_TransmittString
    _TransmittString->_FindChannel
    _WriteFIFO->_WriteSPI
    _FindChannel->_SetRFMode
    _SetRFMode->_RegisterSet
    _RegisterSet->_RegisterRead
    _RegisterRead->_WriteSPI
    _ReadSPI->_WriteSPI
    _Mode_1->_DarknessCheck
    _LightWithSensController->_DarknessCheck
    _DarknessCheck->_AnalogValue
    _AnalogValue->_DelayDs

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   66739
                                             69 BANK0      3     3      0
                             _Mode_0
                             _Mode_1
                             _Mode_2
                             _Mode_4
                             _Mode_5
                      _OperationMode
                      _TransiverInit
                  _TransiverReadFIFO
                 _TransiverToReceive
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TransiverToReceive                                   2     2      0    9949
                                             21 BANK0      2     2      0
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (1) _TransiverReadFIFO                                    6     6      0   18686
                                             63 BANK0      6     6      0
                           _ReadFIFO
                          _SetRFMode
             _TransmittedDataHandler
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _TransmittedDataHandler                              35    35      0   15521
                                             28 BANK0     35    35      0
                        _AnalogValue
                      _DarknessCheck
                            _DelayDs
                      _OperationMode
                    _TransmittString
                               _atoi
                        _eeprom_read
                       _eeprom_write
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               5     4      1    1805
                                             14 BANK0      5     4      1
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              6     3      3     292
                                              8 BANK0      6     3      3
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               8     6      2     120
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               3     1      2     182
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     108
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 8     6      2     546
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadFIFO                                             2     2      0      46
                                              3 BANK0      2     2      0
                            _ReadSPI
 ---------------------------------------------------------------------------------
 (1) _TransiverInit                                        1     1      0   10039
                                             21 BANK0      1     1      0
                              _Blink
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _Blink                                                5     3      2     796
                                              6 BANK0      5     3      2
                            _DelayDs
 ---------------------------------------------------------------------------------
 (1) _Mode_5                                               0     0      0   12184
            _LightWithSensController
                    _TransmittString
 ---------------------------------------------------------------------------------
 (1) _Mode_4                                               0     0      0   12184
            _LightWithSensController
                    _TransmittString
 ---------------------------------------------------------------------------------
 (3) _TransmittString                                      7     5      2   10724
                                             21 BANK0      7     5      2
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                          _WriteFIFO
                      _timerFunction
 ---------------------------------------------------------------------------------
 (4) _WriteFIFO                                            1     1      0      45
                                              3 BANK0      1     1      0
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _FindChannel                                          7     7      0    4734
                                             14 BANK0      7     7      0
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _SetRFMode                                            3     3      0    2321
                                             11 BANK0      3     3      0
                       _RegisterRead
                        _RegisterSet
 ---------------------------------------------------------------------------------
 (3) _RegisterSet                                          4     3      1    2074
                                              7 BANK0      4     3      1
                       _RegisterRead (ARG)
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _RegisterRead                                         4     4      0     114
                                              3 BANK0      4     4      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _ReadSPI                                              0     0      0      23
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _WriteSPI                                             3     3      0      23
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Mode_2                                               0     0      0    1460
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (1) _Mode_1                                               0     0      0     754
                      _DarknessCheck
 ---------------------------------------------------------------------------------
 (1) _Mode_0                                               0     0      0    1460
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (2) _LightWithSensController                              0     0      0    1460
                      _DarknessCheck
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _timerFunction                                        5     1      4     706
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _DarknessCheck                                        2     2      0     754
                                              8 BANK0      2     2      0
                        _AnalogValue
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _AnalogValue                                          2     2      0     708
                                              6 BANK0      2     2      0
                            _DelayDs
 ---------------------------------------------------------------------------------
 (3) _DelayDs                                              6     4      2     686
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _tc_int                                               7     7      0     135
                                              5 COMMON     7     7      0
                       _TimerCounter
                    i1_OperationMode
 ---------------------------------------------------------------------------------
 (10) i1_OperationMode                                     2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _TimerCounter                                        5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Mode_0
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_1
     _DarknessCheck
       _AnalogValue
         _DelayDs
       _eeprom_read
   _Mode_2
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_4
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittString
       _FindChannel
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO
         _WriteSPI
       _timerFunction
   _Mode_5
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittString
       _FindChannel
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO
         _WriteSPI
       _timerFunction
   _OperationMode
   _TransiverInit
     _Blink
       _DelayDs
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
   _TransiverReadFIFO
     _ReadFIFO
       _ReadSPI
         _WriteSPI
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _TransmittedDataHandler
       _AnalogValue
         _DelayDs
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _DelayDs
       _OperationMode
       _TransmittString
         _FindChannel
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
         _WriteFIFO
           _WriteSPI
         _timerFunction
       _atoi
         ___wmul
         _isdigit
       _eeprom_read
       _eeprom_write
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
     _timerFunction
   _TransiverToReceive
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _init

 _tc_int (ROOT)
   _TimerCounter
   i1_OperationMode

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      28       9       41.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      39       7       71.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     48      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      BF      12        0.0%
ABS                  0      0      BF       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 29 13:29:50 2016

                      __CFG_CP$ON 0000                                 pc 0002        __size_of_TransiverReadFIFO 0066  
           _bTransiverModeReceive 006E                       _SSPSTATbits 0094                                _RD 0C60  
                     __CFG_CPD$ON 0000                                _WR 0C61                                fsr 0004  
             ___wmul@multiplicand 0022                               l332 0F6D                               l317 0E82  
                             l408 0D86                               l344 0C62                               l338 0D44  
                             l434 05E1                               l282 0491                               l266 0195  
                             l293 0CE5                               l368 07F7                               l456 0DE5  
                             l298 0C56                               l546 0D29                               l950 0EC9  
                             l938 0CBB                               _GIE 005F             __end_of_DarknessCheck 0DB6  
                             fsr0 0004                               indf 0000               __end_of_FindChannel 02ED  
  __end_of_TransmittedDataHandler 01ED                   ??_timerFunction 0024                      __CFG_LVP$OFF 0000  
                            l2000 06B5                              l2002 06AE                              l2020 06D8  
                            l2012 06CE                              l2004 06BA                              l2022 0706  
                            l2110 012E                              l2120 0159                              l2104 010C  
                            l2018 06D4                              l2028 0717                              l2140 01BA  
                            l2134 0198                              l2126 0175                              l2118 014F  
                            l2310 0FDB                              l2128 017F                              l2072 0073  
                            l2312 0FEE                              l2090 00C4                              l2082 009E  
                            l2402 077F                              l2156 0E52                              l2340 05BE  
                            l2166 0E67                              l2184 0E18                              l2264 03D2  
                            l2344 05C7                              l2336 05AA                              l2274 0CDA  
                            l2290 0C91                              l2098 00EA                              l1814 02C8  
                            l1822 02EB                              l2390 075B                              l2382 0741  
                            l1816 02A2                              l2296 0CA2                              l1770 07B8  
                            l1818 02D8                              l1922 0F0E                              l1930 0F45  
                            l2394 0768                              l2386 074E                              l2378 0734  
                            l1772 07C7                              l1852 0D21                              l1908 0CC4  
                            l1774 07D6                              l1766 079C                              l1934 0F4E  
                            l2398 0775                              l1768 07A9                              l1872 0C82  
                            l1880 0DBD                              l1928 0F2C                              l1778 07E4  
                            l1954 0413                              l1882 0DCC                              l1972 044B  
                            l1956 0426                              l1892 0EE8                              l1990 0D9A  
                            l1798 0214                              l1974 048C                              l1896 0EFE  
                            l1994 0DB3                              l1978 0494                              l1898 0F07  
                            l1996 0DB4       __size_of_TransiverToReceive 005D                              STR_1 0664  
                            STR_2 066C                              STR_3 0691                              STR_4 0683  
                            STR_5 0674                              STR_6 068A                              STR_7 0653  
                            STR_8 0645                              STR_9 0637                              u1105 02AD  
                            u1131 05DF                              u1115 02E9                              u1075 0D4E  
                            u1155 0D2A                              u1085 0212                              u1165 0D31  
                            u2117 0729                              u2207 02D2                              u2127 0FBE  
                            u2217 0D56                              u2137 0FF8                              u2147 05CC  
                            u2157 03F6                              u2167 0430                              u2177 0497  
                            u2187 04A3                              u1715 0E22                              u2197 01FE  
                            u1835 059A                              _RBIF 0058                              _WREN 0C62  
                  ??_eeprom_write 0021                              _atoi 06AB                              _main 071C  
                            _init 0F50                              btemp 007E                              ltemp 007E  
                            start 0012                              ttemp 007E                              wtemp 007E  
                   __CFG_IESO$OFF 0000                   __end_of_DelayDs 0D64                  TransmittString@i 003A  
__size_of_LightWithSensController 003F                   __end_of_ReadSPI 0C25                             ?_atoi 0026  
                           ?_main 0070                             ?_init 0070                             _EEADR 010D  
                           STR_10 067C                             STR_11 06A7                             STR_12 06A3  
                           STR_13 065C                             STR_14 069E                             STR_15 0698  
                           STR_16 0664                             STR_17 066C                     __CFG_WDTE$OFF 0000  
                           _CARRY 0018                             _ANSEL 0188             __end_of_OperationMode 0C3F  
                           _T1CON 0010                             i1l397 04F3                             _TMR1H 000F  
                           _TMR1L 000E                             _PORTA 0005                             _PORTB 0006  
                           _PORTC 0007                             _TRISA 0085                             _TRISB 0086  
                           _TRISC 0087                             _SSPIE 0463                             _Blink 0E12  
                           _bDark 006D                    __CFG_FCMEN$OFF 0000                   __end_of_isdigit 0C84  
                     _AnalogValue 0D64                             atoi@a 002B                             atoi@s 002D  
                  __CFG_BOREN$OFF 0000                             pclath 000A                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 ??_TransiverInit 0035                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003                     _intBlinkCycle 0068                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
                  WriteSPI@buffer 0021                  __end_of_ChannelP 061D                  __end_of_ChannelR 062A  
                __end_of_ChannelS 0637                   __end_of_strncmp 0F0A                    __CFG_MCLRE$OFF 0000  
                   _intClockTimer 00A0                 _intNumberOfBlinks 00D7                   __initialization 0015  
                    __end_of_atoi 071C                      __end_of_main 078C                      __end_of_init 0FA3  
                __end_of_ReadFIFO 0C74                     ReadFIFO@value 0024                       _FindChannel 01ED  
                   ??_RegisterSet 0028                            ??_atoi 0028                            ??_main 0065  
                          ??_init 0020                            ?_Blink 0026                            _ADRESH 001E  
                          _EEDATA 010C                            _EECON1 018C                            _EECON2 018D  
                          _ANSELH 0189                  __end_of_WriteSPI 0C66                            i1l2360 0EB9  
                          i1l2362 0EBF                            i1l2442 0515                            i1l2418 04C3  
                          i1l2460 0553                            i1l2444 0516                            i1l2436 04F6  
                          i1l2454 053A                            i1l2464 0564                            u210_25 055E  
                          u203_25 04E3                            u207_25 050F                            u208_25 0527  
                          u209_25 0545                         ??_DelayDs 0022                            Blink@i 0029  
                          Blink@n 0026                            u187_25 0E8F                            u188_25 0EA5  
                          _TMR1IF 0060                            _TMR1ON 0080      i1OperationMode@bracketStatus 0071  
                          _SSPBUF 0013                         ??_ReadSPI 0023                            _Mode_0 07FB  
                          _Mode_1 0CCD                            _Mode_2 0C4B                            _Mode_4 0C84  
                          _Mode_5 0C95                __size_of_SetRFMode 006F              __size_of_eeprom_read 0024  
                          ___wmul 0D1D                            _tc_int 04A9              __end_of_eeprom_write 0E12  
                          _strchr 0CB8                            _strlen 0DB6                            _strstr 0F0A  
                       ??_isdigit 0020                            saved_w 007E               __end_of_RegisterSet 0D01  
                   ?_RegisterRead 0070                RegisterRead@adress 0026       TransmittedDataHandler@slask 003D  
     TransmittedDataHandler@value 005D                         ??_strncmp 002B                __size_of_WriteFIFO 000C  
         __end_of__initialization 0044                   eeprom_read@addr 0021           _LightWithSensController 0E45  
                   _bChannelFound 006C                     __end_of_Blink 0E45                    __pcstackCOMMON 0070  
                    __pidataBANK0 07FF                      __pidataBANK1 0C1B                      _channelFound 00AF  
                  _OPTION_REGbits 0081                           ??_Blink 0028                 __end_of_SetRFMode 07FB  
               eeprom_write@value 0020                    ??_RegisterRead 0023                        __pbssBANK0 0068  
                      __pbssBANK1 00A0                        __pbssBANK3 0190          __size_ofi1_OperationMode 0009  
                       ?_ReadFIFO 0070        timerFunction@intSetSeconds 0022                AnalogValue@channel 0027  
                         ?_Mode_0 0070                           ?_Mode_1 0070                           ?_Mode_2 0070  
                         ?_Mode_4 0070                           ?_Mode_5 0070          __size_of_TransmittString 00D2  
                      __pmaintext 071C                           ?___wmul 0020                        __pintentry 0004  
                         ?_tc_int 0070                         ?_WriteSPI 0070                 __end_of_WriteFIFO 0C4B  
                         ?_strchr 0020                           ?_strlen 0020                       _RegisterSet 0CE7  
                         ?_strstr 002E                     ?_TimerCounter 0070        __end_of_TransiverToReceive 1000  
           __end_of_timerFunction 0CB8                      ?_AnalogValue 0070                        __stringtab 0600  
                      ??_ReadFIFO 0023                           _DelayDs 0D40         ??_LightWithSensController 002A  
                         _ReadSPI 0C1D            __size_of_DarknessCheck 0029                   __size_of_Mode_0 0004  
                 __size_of_Mode_1 001A                   __size_of_Mode_2 000D                   __size_of_Mode_4 0011  
                 __size_of_Mode_5 0011        OperationMode@bracketStatus 0021             __size_of_eeprom_write 0030  
                 __size_of___wmul 0023                      ?_FindChannel 0070                         _ANSELbits 0188  
                      ??_WriteSPI 0020                   __size_of_tc_int 00CC                           __ptext1 0F50  
                         __ptext2 0FA3                           __ptext3 0575                           __ptext4 0048  
                         __ptext5 0F0A                           __ptext6 0EC6                           __ptext7 0DB6  
                         __ptext8 0CB8                           __ptext9 0DE2                   __size_of_strchr 0015  
                 __size_of_strlen 002C                         _T1CONbits 0010                   __size_of_strstr 0046  
                         _isdigit 0C74                    ??_TimerCounter 0070                           clrloop0 0C26  
                         _strncmp 0EC6              end_of_initialization 0044                      _eeprom_write 0DE2  
           __end_of_TransiverInit 03D7            __size_of_OperationMode 0009                 ??i1_OperationMode 0070  
                WriteSPI@databyte 0022              __end_of_RegisterRead 0D1D                     WriteFIFO@Data 0023  
        ??_TransmittedDataHandler 003C                           strlen@s 0026                   _intBlinkCounter 00B1  
               ??_TransmittString 0037                         _PORTAbits 0005                         _PORTBbits 0006  
                       _PORTCbits 0007                     _DarknessCheck 0D8D                     ??_eeprom_read 0020  
                  __end_of_Mode_0 07FF                    __end_of_Mode_1 0CE7                    __end_of_Mode_2 0C58  
                  __end_of_Mode_4 0C95                    __end_of_Mode_5 0CA6                    __end_of___wmul 0D40  
                  __end_of_tc_int 0575                    ?_DarknessCheck 0070                     _OperationMode 0C36  
                  __end_of_strchr 0CCD                    __end_of_strlen 0DE2                    __end_of_strstr 0F50  
             start_initialization 0015             _intDarkCheckIntervall 00B3        DarknessCheck@darknessValue 0029  
                       _SetRFMode 078C              __size_of_AnalogValue 0029                 __size_of_ReadFIFO 000E  
        __CFG_FOSC$INTRC_NOCLKOUT 0000                          ??_Mode_0 002A                          ??_Mode_1 002A  
                        ??_Mode_2 002A                          ??_Mode_4 003C                          ??_Mode_5 003C  
            __end_of_TimerCounter 0EC6                          ??___wmul 0024               __end_of_eeprom_read 05FF  
                   TimerCounter@i 0073                       __pdataBANK0 006F                       __pdataBANK1 00D7  
                        ??_tc_int 0075   __size_of_TransmittedDataHandler 01A5                      ?_RegisterSet 0027  
                        ??_strchr 0022                          ??_strlen 0022                          ??_strstr 002F  
                  ?_OperationMode 0070              __size_of_FindChannel 0100         TransmittString@dataString 0035  
               RegisterRead@value 0025                 __size_of_WriteSPI 000E                       __pbssCOMMON 007C  
                       ___latbits 0002                         _WriteFIFO 0C3F                     __pcstackBANK0 0020  
                    _ReceivedData 0190            SetRFMode@mcparam0_read 002D                      _isdigit$1118 0020  
                      ?_SetRFMode 0070                  eeprom_write@addr 0022                          ?_DelayDs 0020  
               RegisterSet@adress 002A                          ?_ReadSPI 0070             __size_of_RegisterRead 001C  
              _TransiverToReceive 0FA3               ?_TransiverToReceive 0070                   ??_DarknessCheck 0028  
                       __pstrings 0600                          ?_isdigit 0070       timerFunction@intTimerNumber 0020  
                  __size_of_Blink 0033                        ?_WriteFIFO 0070                   i1_OperationMode 0C2D  
            ??_TransiverToReceive 0035                      _RegisterRead 0D01                          ?_strncmp 0028  
          _TransmittedDataHandler 0048                 interrupt_function 0004                    ___wmul@product 0024  
                        _IOCBbits 0096                          DelayDs@i 0024                      FindChannel@i 0033  
                       clear_ram0 0C25                       _eeprom_read 05DB                          _PIE1bits 008C  
                 _TransmittString 03D7                          _PIR1bits 000C            __size_of_timerFunction 0012  
                 ??_OperationMode 0020                     SetRFMode@mode 002C                        _ADCON0bits 001F  
                     __stringbase 060F                        _ADCON1bits 009F                 ___wmul@multiplier 0020  
                        _WPUBbits 0095                          _ChannelP 0610                          _ChannelR 061D  
                        _ChannelS 062A          ?_LightWithSensController 0070                       ??_SetRFMode 002B  
                        _ReadFIFO 0C66             __size_of_TimerCounter 0042                  __size_of_DelayDs 0024  
                __size_of_ReadSPI 0008                    _bTimerComplete 00AA                  _intMinuteCounter 00B7  
               _TransiverReadFIFO 0575                          _WriteSPI 0C58                __end_of__stringtab 0610  
                _intSecondCounter 006A                ?_TransiverReadFIFO 0070           __end_ofi1_OperationMode 0C36  
          __size_of_TransiverInit 00EA              __size_of_RegisterSet 001A                  RegisterSet@value 0027  
                     ??_WriteFIFO 0023                  __size_of_isdigit 0010                      _TimerCounter 0E84  
                        __ptext10 06AB                          __ptext11 0C74                          __ptext20 0C3F  
                        __ptext12 0D1D                          __ptext21 01ED                          __ptext13 0C36  
                        __ptext30 0E45                          __ptext22 078C                          __ptext14 0C66  
                        __ptext31 0CA6                          __ptext23 0CE7                          __ptext15 02ED  
                        __ptext32 0D8D                          __ptext24 0D01                          __ptext16 0E12  
                        __ptext33 05DB                          __ptext25 0C1D                          __ptext17 0C95  
                        __ptext34 0D64                          __ptext26 0C58                          __ptext18 0C84  
                        __ptext35 0D40                          __ptext27 0C4B                          __ptext19 03D7  
                        __ptext36 04A9                          __ptext28 0CCD                          __ptext37 0C2D  
                        __ptext29 07FB                          __ptext38 0E84               ??_TransiverReadFIFO 005F  
                   _timerFunction 0CA6           __end_of_TransmittString 04A9   TransmittedDataHandler@slask_734 0045  
 TransmittedDataHandler@slask_743 004D   TransmittedDataHandler@slask_746 0055                  __size_of_strncmp 0044  
                   __size_of_atoi 0071                     __size_of_main 0070                     __size_of_init 0053  
                      strncmp@len 0029                     _bValueFromPot 006F         __end_of_TransiverReadFIFO 05DB  
                        atoi@sign 002A                        DelayDs@cnt 0020                    FindChannel@cnt 0031  
 __end_of_LightWithSensController 0E84              _intHalfSecondCounter 00B5                        _INTCONbits 000B  
              TransiverReadFIFO@i 0061                TransiverReadFIFO@j 0063                          isdigit@c 0021  
                  ?_timerFunction 0020                     ??_AnalogValue 0026                 _TransmittedString 00B9  
                        intlevel1 0000                         strchr@chr 0020                         strchr@ptr 0022  
                   _TransiverInit 02ED                         strncmp@s1 002D                         strncmp@s2 0028  
                       stringcode 060A                        _OSCCONbits 008F                     ??_FindChannel 002E  
                ?i1_OperationMode 0070                          strlen@cp 0027                          stringdir 060A  
                        stringtab 0600           ?_TransmittedDataHandler 0070                          strstr@s1 0032  
                        strstr@s2 002E                  ?_TransmittString 0035                     ?_eeprom_write 0020  
                  ?_TransiverInit 0070                      ?_eeprom_read 0070               __end_of_AnalogValue 0D8D  
                      _SSPCONbits 0014              _addressDarknessValue 007C  
