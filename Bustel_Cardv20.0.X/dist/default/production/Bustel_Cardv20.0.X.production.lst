

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Jan 06 17:08:49 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 1.40
    24                           ; Generated 01/12/2016 GMT
    25                           ; 
    26                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F887 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  008F                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  0105                     	;# 
   121  0107                     	;# 
   122  0108                     	;# 
   123  0109                     	;# 
   124  010C                     	;# 
   125  010C                     	;# 
   126  010D                     	;# 
   127  010E                     	;# 
   128  010F                     	;# 
   129  0185                     	;# 
   130  0187                     	;# 
   131  0188                     	;# 
   132  0189                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000D                     	;# 
   149  000E                     	;# 
   150  000E                     	;# 
   151  000F                     	;# 
   152  0010                     	;# 
   153  0011                     	;# 
   154  0012                     	;# 
   155  0013                     	;# 
   156  0014                     	;# 
   157  0015                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0017                     	;# 
   161  0018                     	;# 
   162  0019                     	;# 
   163  001A                     	;# 
   164  001B                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  001D                     	;# 
   168  001E                     	;# 
   169  001F                     	;# 
   170  0081                     	;# 
   171  0085                     	;# 
   172  0086                     	;# 
   173  0087                     	;# 
   174  0088                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  008F                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  0105                     	;# 
   199  0107                     	;# 
   200  0108                     	;# 
   201  0109                     	;# 
   202  010C                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  0185                     	;# 
   208  0187                     	;# 
   209  0188                     	;# 
   210  0189                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213                           
   214                           	psect	idataCOMMON
   215  01E4                     __pidataCOMMON:	
   216                           
   217                           ;initializer for _bValueFromPot
   218  01E4  3401               	retlw	1
   219                           
   220                           	psect	idataBANK0
   221  01E2                     __pidataBANK0:	
   222                           
   223                           ;initializer for _intNumberOfBlinks
   224  01E2  3458               	retlw	88
   225  01E3  3402               	retlw	2
   226                           
   227                           	psect	strings
   228  0197                     __pstrings:	
   229  0197                     stringtab:	
   230  0197                     __stringtab:	
   231  0197                     stringcode:	
   232                           ;	String table - string pointers are 1 byte each
   233                           
   234  0197                     stringdir:	
   235  0197  3001               	movlw	high stringdir
   236  0198  008A               	movwf	10
   237  0199  0804               	movf	4,w
   238  019A  0A84               	incf	4,f
   239  019B  0782               	addwf	2,f
   240  019C                     __stringbase:	
   241  019C  3400               	retlw	0
   242  019D                     __end_of__stringtab:	
   243  019D                     _ChannelP:	
   244  019D  343F               	retlw	63
   245  019E  3447               	retlw	71
   246  019F  344F               	retlw	79
   247  01A0  3457               	retlw	87
   248  01A1  345F               	retlw	95
   249  01A2  3477               	retlw	119
   250  01A3  347E               	retlw	126
   251  01A4  347F               	retlw	127
   252  01A5  3486               	retlw	134
   253  01A6  3487               	retlw	135
   254  01A7  3437               	retlw	55
   255  01A8  3467               	retlw	103
   256  01A9  346F               	retlw	111
   257  01AA                     __end_of_ChannelP:	
   258  01AA                     _ChannelR:	
   259  01AA  344F               	retlw	79
   260  01AB  3459               	retlw	89
   261  01AC  3463               	retlw	99
   262  01AD  346D               	retlw	109
   263  01AE  3477               	retlw	119
   264  01AF  3495               	retlw	149
   265  01B0  349F               	retlw	159
   266  01B1  349F               	retlw	159
   267  01B2  34A9               	retlw	169
   268  01B3  34A9               	retlw	169
   269  01B4  3445               	retlw	69
   270  01B5  3481               	retlw	129
   271  01B6  348B               	retlw	139
   272  01B7                     __end_of_ChannelR:	
   273  01B7                     _ChannelS:	
   274  01B7  3418               	retlw	24
   275  01B8  341B               	retlw	27
   276  01B9  341E               	retlw	30
   277  01BA  3421               	retlw	33
   278  01BB  3424               	retlw	36
   279  01BC  342D               	retlw	45
   280  01BD  347B               	retlw	123
   281  01BE  3430               	retlw	48
   282  01BF  347E               	retlw	126
   283  01C0  3433               	retlw	51
   284  01C1  3415               	retlw	21
   285  01C2  3427               	retlw	39
   286  01C3  342A               	retlw	42
   287  01C4                     __end_of_ChannelS:	
   288  001F                     _ADCON0bits	set	31
   289  001E                     _ADRESH	set	30
   290  000B                     _INTCONbits	set	11
   291  000C                     _PIR1bits	set	12
   292  0005                     _PORTA	set	5
   293  0006                     _PORTB	set	6
   294  0007                     _PORTC	set	7
   295  0008                     _PORTD	set	8
   296  0009                     _PORTE	set	9
   297  0013                     _SSPBUF	set	19
   298  0014                     _SSPCONbits	set	20
   299  0010                     _T1CON	set	16
   300  0010                     _T1CONbits	set	16
   301  000F                     _TMR1H	set	15
   302  000E                     _TMR1L	set	14
   303  005F                     _GIE	set	95
   304  0029                     _RA1	set	41
   305  002C                     _RA4	set	44
   306  002D                     _RA5	set	45
   307  0031                     _RB1	set	49
   308  0033                     _RB3	set	51
   309  0034                     _RB4	set	52
   310  0035                     _RB5	set	53
   311  0058                     _RBIF	set	88
   312  0038                     _RC0	set	56
   313  0039                     _RC1	set	57
   314  003A                     _RC2	set	58
   315  0043                     _RD3	set	67
   316  0044                     _RD4	set	68
   317  0060                     _TMR1IF	set	96
   318  0080                     _TMR1ON	set	128
   319  009F                     _ADCON1bits	set	159
   320  0096                     _IOCBbits	set	150
   321  0081                     _OPTION_REGbits	set	129
   322  008F                     _OSCCONbits	set	143
   323  008C                     _PIE1bits	set	140
   324  0094                     _SSPSTATbits	set	148
   325  0085                     _TRISA	set	133
   326  0086                     _TRISB	set	134
   327  0087                     _TRISC	set	135
   328  0088                     _TRISD	set	136
   329  0089                     _TRISE	set	137
   330  0095                     _WPUBbits	set	149
   331  0463                     _SSPIE	set	1123
   332  010D                     _EEADR	set	269
   333  010C                     _EEDATA	set	268
   334  0188                     _ANSEL	set	392
   335  0189                     _ANSELH	set	393
   336  0189                     _ANSELHbits	set	393
   337  0188                     _ANSELbits	set	392
   338  018C                     _EECON1	set	396
   339  0C60                     _RD	set	3168
   340  0C61                     _WR	set	3169
   341                           
   342                           ; #config settings
   343  0000                     
   344                           	psect	cinit
   345  0015                     start_initialization:	
   346  0015                     __initialization:	
   347                           
   348                           ; Initialize objects allocated to BANK0
   349  0015  120A  118A  21E2  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   350  001A  00E9               	movwf	__pdataBANK0& (0+127)
   351  001B  120A  118A  21E3  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   352  0020  00EA               	movwf	(__pdataBANK0+1)& (0+127)
   353                           
   354                           ; Initialize objects allocated to COMMON
   355  0021  120A  118A  21E4  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   356  0026  00FD               	movwf	__pdataCOMMON& (0+127)
   357                           
   358                           ; Clear objects allocated to BANK0
   359  0027  1383               	bcf	3,7	;select IRP bank0
   360  0028  3020               	movlw	low __pbssBANK0
   361  0029  0084               	movwf	4
   362  002A  3069               	movlw	low (__pbssBANK0+73)
   363  002B  120A  118A  21DA   	fcall	clear_ram0
   364                           
   365                           ; Clear objects allocated to COMMON
   366  002E  01FC               	clrf	__pbssCOMMON& (0+127)
   367  002F                     end_of_initialization:	
   368                           ;End of C runtime variable initialization code
   369                           
   370  002F                     __end_of__initialization:	
   371  002F  0183               	clrf	3
   372  0030  120A  118A  29C4   	ljmp	_main	;jump to C main() function
   373                           
   374                           	psect	bssCOMMON
   375  007C                     __pbssCOMMON:	
   376  007C                     _bDark:	
   377  007C                     	ds	1
   378                           
   379                           	psect	dataCOMMON
   380  007D                     __pdataCOMMON:	
   381  007D                     _bValueFromPot:	
   382  007D                     	ds	1
   383                           
   384                           	psect	bssBANK0
   385  0020                     __pbssBANK0:	
   386  0020                     _ReceivedData:	
   387  0020                     	ds	40
   388  0048                     _intClockTimer:	
   389  0048                     	ds	10
   390  0052                     _bTimerComplete:	
   391  0052                     	ds	5
   392  0057                     _addressDarknessValue:	
   393  0057                     	ds	2
   394  0059                     _channelFound:	
   395  0059                     	ds	2
   396  005B                     _intBlinkCounter:	
   397  005B                     	ds	2
   398  005D                     _intBlinkCycle:	
   399  005D                     	ds	2
   400  005F                     _intDarkCheckIntervall:	
   401  005F                     	ds	2
   402  0061                     _intHalfSecondCounter:	
   403  0061                     	ds	2
   404  0063                     _intMinuteCounter:	
   405  0063                     	ds	2
   406  0065                     _intSecondCounter:	
   407  0065                     	ds	2
   408  0067                     _bChannelFound:	
   409  0067                     	ds	1
   410  0068                     _bTransiverModeReceive:	
   411  0068                     	ds	1
   412                           
   413                           	psect	dataBANK0
   414  0069                     __pdataBANK0:	
   415  0069                     _intNumberOfBlinks:	
   416  0069                     	ds	2
   417                           
   418                           	psect	clrtext
   419  01DA                     clear_ram0:	
   420                           ;	Called with FSR containing the base address, and
   421                           ;	W with the last address+1
   422                           
   423  01DA  0064               	clrwdt	;clear the watchdog before getting into this loop
   424  01DB                     clrloop0:	
   425  01DB  0180               	clrf	0	;clear RAM location pointed to by FSR
   426  01DC  0A84               	incf	4,f	;increment pointer
   427  01DD  0604               	xorwf	4,w	;XOR with final address
   428  01DE  1903               	btfsc	3,2	;have we reached the end yet?
   429  01DF  3400               	retlw	0	;all done for this memory range, return
   430  01E0  0604               	xorwf	4,w	;XOR again to restore value
   431  01E1  29DB               	goto	clrloop0	;do the next byte
   432                           
   433                           	psect	cstackCOMMON
   434  0070                     __pcstackCOMMON:	
   435  0070                     ?_init:	
   436  0070                     ?_OperationMode:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ??_OperationMode:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ?_TimerCounter:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ??_TimerCounter:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?_tc_int:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ?_main:	
   452                           ; 1 bytes @ 0x0
   453                           
   454                           
   455                           ; 2 bytes @ 0x0
   456  0070                     	ds	1
   457  0071                     OperationMode@bracketStatus:	
   458                           
   459                           ; 1 bytes @ 0x1
   460  0071                     	ds	2
   461  0073                     TimerCounter@i:	
   462                           
   463                           ; 2 bytes @ 0x3
   464  0073                     	ds	2
   465  0075                     ??_tc_int:	
   466                           
   467                           ; 1 bytes @ 0x5
   468  0075                     	ds	7
   469                           
   470                           	psect	cstackBANK0
   471  0000                     __pcstackBANK0:	
   472  0000                     ??_init:	
   473  0000                     ??_main:	
   474                           ; 1 bytes @ 0x0
   475                           
   476                           
   477                           	psect	maintext
   478  01C4                     __pmaintext:	
   479                           ; 1 bytes @ 0x0
   480 ;;
   481 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   482 ;;
   483 ;; *************** function _main *****************
   484 ;; Defined at:
   485 ;;		line 28 in file "main.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;		None
   490 ;; Return value:  Size  Location     Type
   491 ;;                  2   46[None  ] int 
   492 ;; Registers used:
   493 ;;		wreg, status,2, status,0, pclath, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : B00/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   499 ;;      Params:         0       0       0       0       0
   500 ;;      Locals:         0       0       0       0       0
   501 ;;      Temps:          0       0       0       0       0
   502 ;;      Totals:         0       0       0       0       0
   503 ;;Total ram usage:        0 bytes
   504 ;; Hardware stack levels required when called:    3
   505 ;; This function calls:
   506 ;;		_init
   507 ;; This function is called by:
   508 ;;		Startup code after reset
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           
   513                           ;psect for function _main
   514  01C4                     _main:	
   515                           
   516                           ;main.c: 31: init();
   517                           
   518                           ;incstack = 0
   519                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   520  01C4  120A  118A  20F3  120A  118A  	fcall	_init
   521  01C9  29CB               	goto	l1660
   522  01CA                     l1662:	
   523                           
   524                           ;main.c: 37: RC1 = 0;
   525  01CA  1087               	bcf	7,1	;volatile
   526  01CB                     l1660:	
   527                           ;main.c: 34: while(1)
   528                           
   529                           
   530                           ;main.c: 35: {
   531                           ;main.c: 36: if(RB1)
   532  01CB  1283               	bcf	3,5	;RP0=0, select bank0
   533  01CC  1303               	bcf	3,6	;RP1=0, select bank0
   534  01CD  1886               	btfsc	6,1	;volatile
   535  01CE  29CA               	goto	l1662
   536                           
   537                           ;main.c: 38: else
   538                           ;main.c: 39: RC1 = 1;
   539  01CF  1487               	bsf	7,1	;volatile
   540  01D0  29CB               	goto	l1660
   541  01D1                     __end_of_main:	
   542                           
   543                           	psect	text1
   544  00F3                     __ptext1:	
   545 ;; *************** function _init *****************
   546 ;; Defined at:
   547 ;;		line 382 in file "functions.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, status,2, status,0
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   561 ;;      Params:         0       0       0       0       0
   562 ;;      Locals:         0       0       0       0       0
   563 ;;      Temps:          0       0       0       0       0
   564 ;;      Totals:         0       0       0       0       0
   565 ;;Total ram usage:        0 bytes
   566 ;; Hardware stack levels used:    1
   567 ;; Hardware stack levels required when called:    2
   568 ;; This function calls:
   569 ;;		Nothing
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           
   576                           ;psect for function _init
   577  00F3                     _init:	
   578                           
   579                           ;functions.c: 385: OSCCONbits.IRCF2 = 1;
   580                           
   581                           ;incstack = 0
   582                           ; Regs used in _init: [wreg+status,2+status,0]
   583  00F3  1683               	bsf	3,5	;RP0=1, select bank1
   584  00F4  1303               	bcf	3,6	;RP1=0, select bank1
   585  00F5  170F               	bsf	15,6	;volatile
   586                           
   587                           ;functions.c: 386: OSCCONbits.IRCF1 = 1;
   588  00F6  168F               	bsf	15,5	;volatile
   589                           
   590                           ;functions.c: 387: OSCCONbits.IRCF0 = 0;
   591  00F7  120F               	bcf	15,4	;volatile
   592                           
   593                           ;functions.c: 388: OSCCONbits.SCS = 1;
   594  00F8  140F               	bsf	15,0	;volatile
   595                           
   596                           ;functions.c: 391: PORTA = 0x00;
   597  00F9  1283               	bcf	3,5	;RP0=0, select bank0
   598  00FA  1303               	bcf	3,6	;RP1=0, select bank0
   599  00FB  0185               	clrf	5	;volatile
   600                           
   601                           ;functions.c: 392: PORTB = 0x00;
   602  00FC  0186               	clrf	6	;volatile
   603                           
   604                           ;functions.c: 393: PORTC = 0x00;
   605  00FD  0187               	clrf	7	;volatile
   606                           
   607                           ;functions.c: 394: PORTD = 0x00;
   608  00FE  0188               	clrf	8	;volatile
   609                           
   610                           ;functions.c: 395: PORTE = 0x00;
   611  00FF  0189               	clrf	9	;volatile
   612                           
   613                           ;functions.c: 397: TRISA = 0b00001011;
   614  0100  300B               	movlw	11
   615  0101  1683               	bsf	3,5	;RP0=1, select bank1
   616  0102  1303               	bcf	3,6	;RP1=0, select bank1
   617  0103  0085               	movwf	5	;volatile
   618                           
   619                           ;functions.c: 398: TRISB = 0b00110110;
   620  0104  3036               	movlw	54
   621  0105  0086               	movwf	6	;volatile
   622                           
   623                           ;functions.c: 399: TRISC = 0b00010000;
   624  0106  3010               	movlw	16
   625  0107  0087               	movwf	7	;volatile
   626                           
   627                           ;functions.c: 400: TRISD = 0b00000111;
   628  0108  3007               	movlw	7
   629  0109  0088               	movwf	8	;volatile
   630                           
   631                           ;functions.c: 401: TRISE = 0b00000111;
   632  010A  3007               	movlw	7
   633  010B  0089               	movwf	9	;volatile
   634                           
   635                           ;functions.c: 403: ANSEL = 0b00000000;
   636  010C  1683               	bsf	3,5	;RP0=1, select bank3
   637  010D  1703               	bsf	3,6	;RP1=1, select bank3
   638  010E  0188               	clrf	8	;volatile
   639                           
   640                           ;functions.c: 404: ANSELH = 0b00000000;
   641  010F  0189               	clrf	9	;volatile
   642                           
   643                           ;functions.c: 405: ANSELbits.ANS0 = 1;
   644  0110  1408               	bsf	8,0	;volatile
   645                           
   646                           ;functions.c: 406: ANSELbits.ANS3 = 1;
   647  0111  1588               	bsf	8,3	;volatile
   648                           
   649                           ;functions.c: 407: ANSELbits.ANS5 = 1;
   650  0112  1688               	bsf	8,5	;volatile
   651                           
   652                           ;functions.c: 408: ANSELbits.ANS6 = 1;
   653  0113  1708               	bsf	8,6	;volatile
   654                           
   655                           ;functions.c: 409: ANSELbits.ANS7 = 1;
   656  0114  1788               	bsf	8,7	;volatile
   657                           
   658                           ;functions.c: 410: ANSELHbits.ANS9 = 1;
   659  0115  1489               	bsf	9,1	;volatile
   660                           
   661                           ;functions.c: 412: OPTION_REGbits.nRBPU = 0;
   662  0116  1683               	bsf	3,5	;RP0=1, select bank1
   663  0117  1303               	bcf	3,6	;RP1=0, select bank1
   664  0118  1381               	bcf	1,7	;volatile
   665                           
   666                           ;functions.c: 413: WPUBbits.WPUB1 = 1;
   667  0119  1495               	bsf	21,1	;volatile
   668  011A                     l327:	
   669                           ;functions.c: 414: while(!RB1);
   670                           
   671  011A  1283               	bcf	3,5	;RP0=0, select bank0
   672  011B  1C86               	btfss	6,1	;volatile
   673  011C  291A               	goto	l327
   674                           
   675                           ;functions.c: 415: WPUBbits.WPUB5 = 1;
   676  011D  1683               	bsf	3,5	;RP0=1, select bank1
   677  011E  1303               	bcf	3,6	;RP1=0, select bank1
   678  011F  1695               	bsf	21,5	;volatile
   679  0120                     l330:	
   680                           ;functions.c: 416: while(!RB5);
   681                           
   682  0120  1283               	bcf	3,5	;RP0=0, select bank0
   683  0121  1E86               	btfss	6,5	;volatile
   684  0122  2920               	goto	l330
   685                           
   686                           ;functions.c: 419: SSPCONbits.SSPM=0x00;
   687  0123  30F0               	movlw	-16
   688  0124  0594               	andwf	20,f	;volatile
   689                           
   690                           ;functions.c: 420: SSPCONbits.CKP=0;
   691  0125  1214               	bcf	20,4	;volatile
   692                           
   693                           ;functions.c: 421: SSPSTATbits.CKE=1;
   694  0126  1683               	bsf	3,5	;RP0=1, select bank1
   695  0127  1303               	bcf	3,6	;RP1=0, select bank1
   696  0128  1714               	bsf	20,6	;volatile
   697                           
   698                           ;functions.c: 422: SSPSTATbits.SMP=0;
   699  0129  1394               	bcf	20,7	;volatile
   700                           
   701                           ;functions.c: 423: SSPCONbits.SSPEN=0x01;
   702  012A  1283               	bcf	3,5	;RP0=0, select bank0
   703  012B  1303               	bcf	3,6	;RP1=0, select bank0
   704  012C  1694               	bsf	20,5	;volatile
   705                           
   706                           ;functions.c: 424: SSPIE = 0;
   707  012D  1683               	bsf	3,5	;RP0=1, select bank1
   708  012E  1303               	bcf	3,6	;RP1=0, select bank1
   709  012F  118C               	bcf	12,3	;volatile
   710                           
   711                           ;functions.c: 427: RA5 = 1;
   712  0130  1283               	bcf	3,5	;RP0=0, select bank0
   713  0131  1303               	bcf	3,6	;RP1=0, select bank0
   714  0132  1685               	bsf	5,5	;volatile
   715                           
   716                           ;functions.c: 428: RA4 = 1;
   717  0133  1605               	bsf	5,4	;volatile
   718                           
   719                           ;functions.c: 429: RD4 = 1;
   720  0134  1608               	bsf	8,4	;volatile
   721                           
   722                           ;functions.c: 430: RD3 = 1;
   723  0135  1588               	bsf	8,3	;volatile
   724                           
   725                           ;functions.c: 434: INTCONbits.RBIE = 1;
   726  0136  158B               	bsf	11,3	;volatile
   727                           
   728                           ;functions.c: 435: INTCONbits.PEIE = 1;
   729  0137  170B               	bsf	11,6	;volatile
   730                           
   731                           ;functions.c: 436: PIE1bits.TMR1IE = 1;
   732  0138  1683               	bsf	3,5	;RP0=1, select bank1
   733  0139  1303               	bcf	3,6	;RP1=0, select bank1
   734  013A  140C               	bsf	12,0	;volatile
   735                           
   736                           ;functions.c: 438: IOCBbits.IOCB5 = 1;
   737  013B  1696               	bsf	22,5	;volatile
   738                           
   739                           ;functions.c: 441: T1CON = 0b00110000;
   740  013C  3030               	movlw	48
   741  013D  1283               	bcf	3,5	;RP0=0, select bank0
   742  013E  1303               	bcf	3,6	;RP1=0, select bank0
   743  013F  0090               	movwf	16	;volatile
   744                           
   745                           ;functions.c: 442: TMR1H = 0x0B;
   746  0140  300B               	movlw	11
   747  0141  008F               	movwf	15	;volatile
   748                           
   749                           ;functions.c: 443: TMR1L = 0xDB;
   750  0142  30DB               	movlw	219
   751  0143  008E               	movwf	14	;volatile
   752                           
   753                           ;functions.c: 444: T1CONbits.TMR1ON = 1;
   754  0144  1410               	bsf	16,0	;volatile
   755                           
   756                           ;functions.c: 447: ADCON0bits.ADCS0 = 0;
   757  0145  131F               	bcf	31,6	;volatile
   758                           
   759                           ;functions.c: 448: ADCON0bits.ADCS1 = 0;
   760  0146  139F               	bcf	31,7	;volatile
   761                           
   762                           ;functions.c: 449: ADCON1bits.ADFM = 0;
   763  0147  1683               	bsf	3,5	;RP0=1, select bank1
   764  0148  1303               	bcf	3,6	;RP1=0, select bank1
   765  0149  139F               	bcf	31,7	;volatile
   766                           
   767                           ;functions.c: 450: ADCON1bits.VCFG1 = 0;
   768  014A  129F               	bcf	31,5	;volatile
   769                           
   770                           ;functions.c: 451: ADCON1bits.VCFG0 = 0;
   771  014B  121F               	bcf	31,4	;volatile
   772                           
   773                           ;functions.c: 454: intSecondCounter = 0;
   774  014C  1283               	bcf	3,5	;RP0=0, select bank0
   775  014D  1303               	bcf	3,6	;RP1=0, select bank0
   776  014E  01E5               	clrf	_intSecondCounter
   777  014F  01E6               	clrf	_intSecondCounter+1
   778                           
   779                           ;functions.c: 455: intHalfSecondCounter = 0;
   780  0150  01E1               	clrf	_intHalfSecondCounter
   781  0151  01E2               	clrf	_intHalfSecondCounter+1
   782                           
   783                           ;functions.c: 456: intMinuteCounter = 0;
   784  0152  01E3               	clrf	_intMinuteCounter
   785  0153  01E4               	clrf	_intMinuteCounter+1
   786  0154  0008               	return
   787  0155                     __end_of_init:	
   788                           
   789                           	psect	text2
   790  0033                     __ptext2:	
   791 ;; *************** function _tc_int *****************
   792 ;; Defined at:
   793 ;;		line 776 in file "functions.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   807 ;;      Params:         0       0       0       0       0
   808 ;;      Locals:         0       0       0       0       0
   809 ;;      Temps:          7       0       0       0       0
   810 ;;      Totals:         7       0       0       0       0
   811 ;;Total ram usage:        7 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    1
   814 ;; This function calls:
   815 ;;		_OperationMode
   816 ;;		_TimerCounter
   817 ;; This function is called by:
   818 ;;		Interrupt level 1
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           
   823                           ;psect for function _tc_int
   824  0033                     _tc_int:	
   825                           
   826                           ;functions.c: 779: if((RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2)){
   827  0033  1A86               	btfsc	6,5	;volatile
   828  0034  284B               	goto	i1l2002
   829  0035  085D               	movf	_intBlinkCycle,w
   830  0036  045E               	iorwf	_intBlinkCycle+1,w
   831  0037  1D03               	btfss	3,2
   832  0038  284B               	goto	i1l2002
   833  0039  120A  118A  21D1  120A  118A  	fcall	_OperationMode
   834  003E  00F5               	movwf	??_tc_int
   835  003F  3002               	movlw	2
   836  0040  0275               	subwf	??_tc_int,w
   837  0041  1803               	skipnc
   838  0042  284B               	goto	i1l2002
   839                           
   840                           ;functions.c: 780: intBlinkCycle = 1;
   841  0043  3001               	movlw	1
   842  0044  1283               	bcf	3,5	;RP0=0, select bank0
   843  0045  1303               	bcf	3,6	;RP1=0, select bank0
   844  0046  00DD               	movwf	_intBlinkCycle
   845  0047  3000               	movlw	0
   846  0048  00DE               	movwf	_intBlinkCycle+1
   847                           
   848                           ;functions.c: 781: intBlinkCounter = 0;
   849  0049  01DB               	clrf	_intBlinkCounter
   850  004A  01DC               	clrf	_intBlinkCounter+1
   851  004B                     i1l2002:	
   852                           
   853                           ;functions.c: 783: }
   854                           ;functions.c: 784: if(TMR1IF ==1){
   855  004B  1283               	bcf	3,5	;RP0=0, select bank0
   856  004C  1303               	bcf	3,6	;RP1=0, select bank0
   857  004D  1C0C               	btfss	12,0	;volatile
   858  004E  28E6               	goto	L1
   859                           
   860                           ;functions.c: 785: TMR1ON = 0;
   861  004F  1010               	bcf	16,0	;volatile
   862                           
   863                           ;functions.c: 786: TMR1H = 0x0B;
   864  0050  300B               	movlw	11
   865  0051  008F               	movwf	15	;volatile
   866                           
   867                           ;functions.c: 787: TMR1L = 0xDB;
   868  0052  30DB               	movlw	219
   869  0053  008E               	movwf	14	;volatile
   870                           
   871                           ;functions.c: 789: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
   872  0054  035D               	decf	_intBlinkCycle,w
   873  0055  045E               	iorwf	_intBlinkCycle+1,w
   874  0056  1D03               	btfss	3,2
   875  0057  287A               	goto	i1l2020
   876  0058  086A               	movf	_intNumberOfBlinks+1,w
   877  0059  00F6               	movwf	??_tc_int+1
   878  005A  0869               	movf	_intNumberOfBlinks,w
   879  005B  00F5               	movwf	??_tc_int
   880  005C  1003               	clrc
   881  005D  0DF5               	rlf	??_tc_int,f
   882  005E  0DF6               	rlf	??_tc_int+1,f
   883  005F  085C               	movf	_intBlinkCounter+1,w
   884  0060  3A80               	xorlw	128
   885  0061  00F7               	movwf	??_tc_int+2
   886  0062  0876               	movf	??_tc_int+1,w
   887  0063  3A80               	xorlw	128
   888  0064  0277               	subwf	??_tc_int+2,w
   889  0065  1D03               	skipz
   890  0066  2869               	goto	u130_25
   891  0067  0875               	movf	??_tc_int,w
   892  0068  025B               	subwf	_intBlinkCounter,w
   893  0069                     u130_25:	
   894  0069  1803               	skipnc
   895  006A  287A               	goto	i1l2020
   896                           
   897                           ;functions.c: 790: intBlinkCounter++;
   898  006B  3001               	movlw	1
   899  006C  1283               	bcf	3,5	;RP0=0, select bank0
   900  006D  1303               	bcf	3,6	;RP1=0, select bank0
   901  006E  07DB               	addwf	_intBlinkCounter,f
   902  006F  1803               	skipnc
   903  0070  0ADC               	incf	_intBlinkCounter+1,f
   904  0071  3000               	movlw	0
   905  0072  07DC               	addwf	_intBlinkCounter+1,f
   906                           
   907                           ;functions.c: 792: if(RC1 == 0)
   908  0073  1887               	btfsc	7,1	;volatile
   909  0074  2877               	goto	i1l395
   910                           
   911                           ;functions.c: 793: RC1 = 1;
   912  0075  1487               	bsf	7,1	;volatile
   913  0076  2898               	goto	i1l2028
   914  0077                     i1l395:	
   915                           
   916                           ;functions.c: 794: else if(RC1 == 1)
   917  0077  1C87               	btfss	7,1	;volatile
   918  0078  2898               	goto	i1l2028
   919  0079  2897               	goto	i1l2026
   920  007A                     i1l2020:	
   921                           ;functions.c: 796: }
   922                           
   923                           ;functions.c: 795: RC1 = 0;
   924                           
   925                           
   926                           ;functions.c: 798: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
   927  007A  1283               	bcf	3,5	;RP0=0, select bank0
   928  007B  1303               	bcf	3,6	;RP1=0, select bank0
   929  007C  035D               	decf	_intBlinkCycle,w
   930  007D  045E               	iorwf	_intBlinkCycle+1,w
   931  007E  1D03               	btfss	3,2
   932  007F  2898               	goto	i1l2028
   933  0080  086A               	movf	_intNumberOfBlinks+1,w
   934  0081  00F6               	movwf	??_tc_int+1
   935  0082  0869               	movf	_intNumberOfBlinks,w
   936  0083  00F5               	movwf	??_tc_int
   937  0084  1003               	clrc
   938  0085  0DF5               	rlf	??_tc_int,f
   939  0086  0DF6               	rlf	??_tc_int+1,f
   940  0087  085C               	movf	_intBlinkCounter+1,w
   941  0088  3A80               	xorlw	128
   942  0089  00F7               	movwf	??_tc_int+2
   943  008A  0876               	movf	??_tc_int+1,w
   944  008B  3A80               	xorlw	128
   945  008C  0277               	subwf	??_tc_int+2,w
   946  008D  1D03               	skipz
   947  008E  2891               	goto	u134_25
   948  008F  0875               	movf	??_tc_int,w
   949  0090  025B               	subwf	_intBlinkCounter,w
   950  0091                     u134_25:	
   951  0091  1C03               	skipc
   952  0092  2898               	goto	i1l2028
   953                           
   954                           ;functions.c: 799: intBlinkCycle = 0;
   955  0093  1283               	bcf	3,5	;RP0=0, select bank0
   956  0094  1303               	bcf	3,6	;RP1=0, select bank0
   957  0095  01DD               	clrf	_intBlinkCycle
   958  0096  01DE               	clrf	_intBlinkCycle+1
   959  0097                     i1l2026:	
   960                           
   961                           ;functions.c: 800: RC1 = 0;
   962  0097  1087               	bcf	7,1	;volatile
   963  0098                     i1l2028:	
   964                           
   965                           ;functions.c: 801: }
   966                           ;functions.c: 804: intHalfSecondCounter++;
   967  0098  3001               	movlw	1
   968  0099  1283               	bcf	3,5	;RP0=0, select bank0
   969  009A  1303               	bcf	3,6	;RP1=0, select bank0
   970  009B  07E1               	addwf	_intHalfSecondCounter,f
   971  009C  1803               	skipnc
   972  009D  0AE2               	incf	_intHalfSecondCounter+1,f
   973  009E  3000               	movlw	0
   974  009F  07E2               	addwf	_intHalfSecondCounter+1,f
   975                           
   976                           ;functions.c: 805: if(intHalfSecondCounter>=2)
   977  00A0  0862               	movf	_intHalfSecondCounter+1,w
   978  00A1  3A80               	xorlw	128
   979  00A2  00FF               	movwf	127
   980  00A3  3080               	movlw	128
   981  00A4  027F               	subwf	127,w
   982  00A5  1D03               	skipz
   983  00A6  28A9               	goto	u135_25
   984  00A7  3002               	movlw	2
   985  00A8  0261               	subwf	_intHalfSecondCounter,w
   986  00A9                     u135_25:	
   987  00A9  1C03               	skipc
   988  00AA  28BA               	goto	i1l2038
   989                           
   990                           ;functions.c: 806: {
   991                           ;functions.c: 807: intHalfSecondCounter = 0;
   992  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   993  00AC  1303               	bcf	3,6	;RP1=0, select bank0
   994  00AD  01E1               	clrf	_intHalfSecondCounter
   995  00AE  01E2               	clrf	_intHalfSecondCounter+1
   996                           
   997                           ;functions.c: 808: intSecondCounter++;
   998  00AF  3001               	movlw	1
   999  00B0  07E5               	addwf	_intSecondCounter,f
  1000  00B1  1803               	skipnc
  1001  00B2  0AE6               	incf	_intSecondCounter+1,f
  1002  00B3  3000               	movlw	0
  1003  00B4  07E6               	addwf	_intSecondCounter+1,f
  1004                           
  1005                           ;functions.c: 809: TimerCounter();
  1006  00B5  120A  118A  2155  120A  118A  	fcall	_TimerCounter
  1007  00BA                     i1l2038:	
  1008                           
  1009                           ;functions.c: 810: }
  1010                           ;functions.c: 811: if(intSecondCounter >=60)
  1011  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1012  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1013  00BC  0866               	movf	_intSecondCounter+1,w
  1014  00BD  3A80               	xorlw	128
  1015  00BE  00FF               	movwf	127
  1016  00BF  3080               	movlw	128
  1017  00C0  027F               	subwf	127,w
  1018  00C1  1D03               	skipz
  1019  00C2  28C5               	goto	u136_25
  1020  00C3  303C               	movlw	60
  1021  00C4  0265               	subwf	_intSecondCounter,w
  1022  00C5                     u136_25:	
  1023  00C5  1C03               	skipc
  1024  00C6  28D1               	goto	i1l2044
  1025                           
  1026                           ;functions.c: 812: {
  1027                           ;functions.c: 813: intSecondCounter = 0;
  1028  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1029  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1030  00C9  01E5               	clrf	_intSecondCounter
  1031  00CA  01E6               	clrf	_intSecondCounter+1
  1032                           
  1033                           ;functions.c: 814: intMinuteCounter++;
  1034  00CB  3001               	movlw	1
  1035  00CC  07E3               	addwf	_intMinuteCounter,f
  1036  00CD  1803               	skipnc
  1037  00CE  0AE4               	incf	_intMinuteCounter+1,f
  1038  00CF  3000               	movlw	0
  1039  00D0  07E4               	addwf	_intMinuteCounter+1,f
  1040  00D1                     i1l2044:	
  1041                           
  1042                           ;functions.c: 815: }
  1043                           ;functions.c: 816: if(intMinuteCounter >= 60)
  1044  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1045  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1046  00D3  0864               	movf	_intMinuteCounter+1,w
  1047  00D4  3A80               	xorlw	128
  1048  00D5  00FF               	movwf	127
  1049  00D6  3080               	movlw	128
  1050  00D7  027F               	subwf	127,w
  1051  00D8  1D03               	skipz
  1052  00D9  28DC               	goto	u137_25
  1053  00DA  303C               	movlw	60
  1054  00DB  0263               	subwf	_intMinuteCounter,w
  1055  00DC                     u137_25:	
  1056  00DC  1C03               	skipc
  1057  00DD  28E2               	goto	i1l2048
  1058                           
  1059                           ;functions.c: 817: {
  1060                           ;functions.c: 818: intMinuteCounter = 0;
  1061  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  1062  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  1063  00E0  01E3               	clrf	_intMinuteCounter
  1064  00E1  01E4               	clrf	_intMinuteCounter+1
  1065  00E2                     i1l2048:	
  1066                           
  1067                           ;functions.c: 819: }
  1068                           ;functions.c: 822: TMR1ON = 1;
  1069  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1070  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1071  00E4  1410               	bsf	16,0	;volatile
  1072                           
  1073                           ;functions.c: 823: }
  1074                           ;functions.c: 824: TMR1IF = 0;
  1075  00E5  100C               	bcf	12,0	;volatile
  1076  00E6                     L1:	
  1077                           
  1078                           ;functions.c: 825: RBIF = 0;
  1079  00E6  100B               	bcf	11,0	;volatile
  1080                           
  1081                           ;functions.c: 826: GIE = 1;
  1082  00E7  178B               	bsf	11,7	;volatile
  1083                           
  1084                           ;functions.c: 827: return;
  1085  00E8  087B               	movf	??_tc_int+6,w
  1086  00E9  00FF               	movwf	127
  1087  00EA  087A               	movf	??_tc_int+5,w
  1088  00EB  008A               	movwf	10
  1089  00EC  0879               	movf	??_tc_int+4,w
  1090  00ED  0084               	movwf	4
  1091  00EE  0E78               	swapf	(??_tc_int+3)^(0+-128),w
  1092  00EF  0083               	movwf	3
  1093  00F0  0EFE               	swapf	126,f
  1094  00F1  0E7E               	swapf	126,w
  1095  00F2  0009               	retfie
  1096  00F3                     __end_of_tc_int:	
  1097                           
  1098                           	psect	intentry
  1099  0004                     __pintentry:	
  1100                           ;incstack = 0
  1101                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1102                           
  1103  0004                     interrupt_function:	
  1104  007E                     saved_w	set	btemp
  1105  0004  00FE               	movwf	btemp
  1106  0005  0E03               	swapf	3,w
  1107  0006  00F8               	movwf	??_tc_int+3
  1108  0007  0804               	movf	4,w
  1109  0008  00F9               	movwf	??_tc_int+4
  1110  0009  080A               	movf	10,w
  1111  000A  00FA               	movwf	??_tc_int+5
  1112  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1113  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1114  000D  087F               	movf	btemp+1,w
  1115  000E  00FB               	movwf	??_tc_int+6
  1116  000F  120A  118A  2833   	ljmp	_tc_int
  1117                           
  1118                           	psect	text3
  1119  0155                     __ptext3:	
  1120 ;; *************** function _TimerCounter *****************
  1121 ;; Defined at:
  1122 ;;		line 369 in file "functions.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;		None
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  i               2    3[COMMON] int 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  1    wreg      void 
  1129 ;; Registers used:
  1130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1136 ;;      Params:         0       0       0       0       0
  1137 ;;      Locals:         2       0       0       0       0
  1138 ;;      Temps:          3       0       0       0       0
  1139 ;;      Totals:         5       0       0       0       0
  1140 ;;Total ram usage:        5 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; This function calls:
  1143 ;;		Nothing
  1144 ;; This function is called by:
  1145 ;;		_tc_int
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           
  1150                           ;psect for function _TimerCounter
  1151  0155                     _TimerCounter:	
  1152                           
  1153                           ;functions.c: 371: for (int i = 0; i < 5; i++)
  1154                           
  1155                           ;incstack = 0
  1156                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  1157  0155  01F3               	clrf	TimerCounter@i
  1158  0156  01F4               	clrf	TimerCounter@i+1
  1159  0157                     L2:	
  1160  0157  0874               	movf	TimerCounter@i+1,w
  1161  0158  3A80               	xorlw	128
  1162  0159  00FF               	movwf	127
  1163  015A  3080               	movlw	128
  1164  015B  027F               	subwf	127,w
  1165  015C  1D03               	skipz
  1166  015D  2960               	goto	u77_25
  1167  015E  3005               	movlw	5
  1168  015F  0273               	subwf	TimerCounter@i,w
  1169  0160                     u77_25:	
  1170  0160  1803               	btfsc	3,0
  1171  0161  0008               	return
  1172                           
  1173                           ;functions.c: 372: {
  1174                           ;functions.c: 373: if(intClockTimer[i]>0)
  1175  0162  0873               	movf	TimerCounter@i,w
  1176  0163  00F0               	movwf	??_TimerCounter
  1177  0164  0770               	addwf	??_TimerCounter,w
  1178  0165  3E48               	addlw	(low (_intClockTimer| 0))& (0+255)
  1179  0166  0084               	movwf	4
  1180  0167  1383               	bcf	3,7	;select IRP bank0
  1181  0168  0800               	movf	0,w
  1182  0169  00F1               	movwf	??_TimerCounter+1
  1183  016A  0A84               	incf	4,f
  1184  016B  0800               	movf	0,w
  1185  016C  00F2               	movwf	??_TimerCounter+2
  1186  016D  0872               	movf	??_TimerCounter+2,w
  1187  016E  3A80               	xorlw	128
  1188  016F  00FF               	movwf	127
  1189  0170  3080               	movlw	128
  1190  0171  027F               	subwf	127,w
  1191  0172  1D03               	skipz
  1192  0173  2976               	goto	u78_25
  1193  0174  3001               	movlw	1
  1194  0175  0271               	subwf	??_TimerCounter+1,w
  1195  0176                     u78_25:	
  1196  0176  1C03               	skipc
  1197  0177  298A               	goto	i1l1642
  1198                           
  1199                           ;functions.c: 374: intClockTimer[i]--;
  1200  0178  0873               	movf	TimerCounter@i,w
  1201  0179  00F0               	movwf	??_TimerCounter
  1202  017A  0770               	addwf	??_TimerCounter,w
  1203  017B  3E48               	addlw	(low (_intClockTimer| 0))& (0+255)
  1204  017C  0084               	movwf	4
  1205  017D  30FF               	movlw	255
  1206  017E  1383               	bcf	3,7	;select IRP bank0
  1207  017F  0780               	addwf	0,f
  1208  0180  0F84               	incfsz	4,f
  1209  0181  0800               	movf	0,w
  1210  0182  1803               	skipnc
  1211  0183  0A00               	incf	0,w
  1212  0184  00FF               	movwf	127
  1213  0185  30FF               	movlw	255
  1214  0186  077F               	addwf	127,w
  1215  0187  0080               	movwf	0
  1216  0188  0384               	decf	4,f
  1217  0189  2990               	goto	i1l1644
  1218  018A                     i1l1642:	
  1219                           
  1220                           ;functions.c: 375: else
  1221                           ;functions.c: 376: bTimerComplete[i] = 1;
  1222  018A  0873               	movf	TimerCounter@i,w
  1223  018B  3E52               	addlw	(low (_bTimerComplete| 0))& (0+255)
  1224  018C  0084               	movwf	4
  1225  018D  1383               	bcf	3,7	;select IRP bank0
  1226  018E  0180               	clrf	0
  1227  018F  0A80               	incf	0,f
  1228  0190                     i1l1644:	
  1229  0190  3001               	movlw	1
  1230  0191  07F3               	addwf	TimerCounter@i,f
  1231  0192  1803               	skipnc
  1232  0193  0AF4               	incf	TimerCounter@i+1,f
  1233  0194  3000               	movlw	0
  1234  0195  07F4               	addwf	TimerCounter@i+1,f
  1235  0196  2957               	goto	L2
  1236  0197                     __end_of_TimerCounter:	
  1237                           
  1238                           	psect	text4
  1239  01D1                     __ptext4:	
  1240 ;; *************** function _OperationMode *****************
  1241 ;; Defined at:
  1242 ;;		line 907 in file "functions.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;  bracketStatu    1    1[COMMON] unsigned char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      unsigned char 
  1249 ;; Registers used:
  1250 ;;		wreg, status,2
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1256 ;;      Params:         0       0       0       0       0
  1257 ;;      Locals:         1       0       0       0       0
  1258 ;;      Temps:          1       0       0       0       0
  1259 ;;      Totals:         2       0       0       0       0
  1260 ;;Total ram usage:        2 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; This function calls:
  1263 ;;		Nothing
  1264 ;; This function is called by:
  1265 ;;		_tc_int
  1266 ;;		_ReceivedPacketHandler
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           
  1271                           ;psect for function _OperationMode
  1272  01D1                     _OperationMode:	
  1273                           
  1274                           ;functions.c: 909: unsigned char bracketStatus;
  1275                           ;functions.c: 910: bracketStatus = ((~PORTB) & 0b00000111) ;
  1276                           
  1277                           ;incstack = 0
  1278                           ; Regs used in _OperationMode: [wreg+status,2]
  1279  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  1280  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  1281  01D3  0906               	comf	6,w	;volatile
  1282  01D4  3907               	andlw	7
  1283  01D5  00F0               	movwf	??_OperationMode
  1284  01D6  0870               	movf	??_OperationMode,w
  1285  01D7  00F1               	movwf	OperationMode@bracketStatus
  1286                           
  1287                           ;functions.c: 912: return bracketStatus;
  1288  01D8  0871               	movf	OperationMode@bracketStatus,w
  1289  01D9  0008               	return
  1290  01DA                     __end_of_OperationMode:	
  1291  007E                     btemp	set	126	;btemp
  1292  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    39
    Data        3
    BSS         74
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80      0      75
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_TimerCounter

Critical Paths under _main in BANK0

    None.

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _tc_int                                               7     7      0     135
                                              5 COMMON     7     7      0
                      _OperationMode
                       _TimerCounter
 ---------------------------------------------------------------------------------
 (3) _TimerCounter                                         5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init

 _tc_int (ROOT)
   _OperationMode
   _TimerCounter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      4B       5       93.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      59      12        0.0%
ABS                  0      0      59       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Jan 06 17:08:49 2017

                __CFG_CP$ON 0000                           pc 0002       _bTransiverModeReceive 0068  
               _SSPSTATbits 0094                          _RD 0C60                 __CFG_CPD$ON 0000  
                        _WR 0C61                          fsr 0004                         l330 0120  
                       l327 011A                         _GIE 005F                         _RA1 0029  
                       _RB1 0031                         _RC0 0038                         _RA4 002C  
                       _RC1 0039                         _RB3 0033                         _RA5 002D  
                       _RC2 003A                         _RB4 0034                         _RB5 0035  
                       _RD3 0043                         _RD4 0044                         fsr0 0004  
                       indf 0000                __CFG_LVP$OFF 0000                        l1660 01CB  
                      l1662 01CA                        _RBIF 0058                        _main 01C4  
                      _init 00F3                        btemp 007E                        start 0012  
             __CFG_IESO$OFF 0000                       ?_main 0070                       ?_init 0070  
                     _EEADR 010D               __CFG_WDTE$OFF 0000                       _ANSEL 0188  
     __end_of_OperationMode 01DA                       _T1CON 0010              __CFG_DEBUG$OFF 0000  
                     i1l395 0077                       _TMR1H 000F                       _TMR1L 000E  
                     _PORTA 0005                       _PORTB 0006                       _PORTC 0007  
                     _PORTD 0008                       _PORTE 0009                       _TRISA 0085  
                     _TRISB 0086                       _TRISC 0087                       _TRISD 0088  
                     _SSPIE 0463                       _TRISE 0089                       u77_25 0160  
                     u78_25 0176                       _bDark 007C              __CFG_FCMEN$OFF 0000  
            __CFG_BOREN$OFF 0000                       pclath 000A                       status 0003  
             _intBlinkCycle 005D                       wtemp0 007E            __end_of_ChannelP 01AA  
          __end_of_ChannelR 01B7            __end_of_ChannelS 01C4              __CFG_MCLRE$OFF 0000  
             _intClockTimer 0048           _intNumberOfBlinks 0069             __initialization 0015  
              __end_of_main 01D1                __end_of_init 0155                      ??_main 0000  
                    ??_init 0000                      _ADRESH 001E                      _EEDATA 010C  
                    _EECON1 018C                      _ANSELH 0189                      i1l2002 004B  
                    i1l2020 007A                      i1l2026 0097                      i1l2044 00D1  
                    i1l2028 0098                      i1l2038 00BA                      i1l2048 00E2  
                    i1l1642 018A                      i1l1644 0190                      u130_25 0069  
                    u134_25 0091                      u135_25 00A9                      u136_25 00C5  
                    u137_25 00DC                      _TMR1IF 0060                      _TMR1ON 0080  
                    _SSPBUF 0013              __CFG_PWRTE$OFF 0000                      _tc_int 0033  
              __pdataCOMMON 007D                      saved_w 007E     __end_of__initialization 002F  
             _bChannelFound 0067              __pcstackCOMMON 0070                __pidataBANK0 01E2  
              _channelFound 0059              _OPTION_REGbits 0081                  __pbssBANK0 0020  
                __pmaintext 01C4                  __pintentry 0004                     ?_tc_int 0070  
             ?_TimerCounter 0070                  __stringtab 0197  OperationMode@bracketStatus 0071  
                 _ANSELbits 0188             __size_of_tc_int 00C0                     __ptext1 00F3  
                   __ptext2 0033                     __ptext3 0155                     __ptext4 01D1  
                 _T1CONbits 0010              ??_TimerCounter 0070                     clrloop0 01DB  
      end_of_initialization 002F      __size_of_OperationMode 0009             _intBlinkCounter 005B  
             __pidataCOMMON 01E4              __end_of_tc_int 00F3               _OperationMode 01D1  
       start_initialization 0015       _intDarkCheckIntervall 005F    __CFG_FOSC$INTRC_NOCLKOUT 0000  
      __end_of_TimerCounter 0197               TimerCounter@i 0073                 __pdataBANK0 0069  
                  ??_tc_int 0075              ?_OperationMode 0070                 __pbssCOMMON 007C  
                 ___latbits 0002               __pcstackBANK0 0000                _ReceivedData 0020  
                 __pstrings 0197           interrupt_function 0004                    _IOCBbits 0096  
                 clear_ram0 01DA                    _PIE1bits 008C                    _PIR1bits 000C  
           ??_OperationMode 0070                  _ADCON0bits 001F                 __stringbase 019C  
                _ADCON1bits 009F                    _WPUBbits 0095                    _ChannelP 019D  
                  _ChannelR 01AA                    _ChannelS 01B7       __size_of_TimerCounter 0042  
            _bTimerComplete 0052            _intMinuteCounter 0063          __end_of__stringtab 019D  
          _intSecondCounter 0065                  _ANSELHbits 0189                _TimerCounter 0155  
             __size_of_main 000D               __size_of_init 0062               _bValueFromPot 007D  
      _intHalfSecondCounter 0061                  _INTCONbits 000B                    intlevel1 0000  
                 stringcode 0197                  _OSCCONbits 008F                    stringdir 0197  
                  stringtab 0197                  _SSPCONbits 0014        _addressDarknessValue 0057  
