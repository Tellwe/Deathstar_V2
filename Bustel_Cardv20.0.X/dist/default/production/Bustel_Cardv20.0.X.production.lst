

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Mar 22 15:44:49 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	dabs	1,0x7E,2
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  0008                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0013                     	;# 
    88  0014                     	;# 
    89  0015                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001D                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  0081                     	;# 
   103  0085                     	;# 
   104  0086                     	;# 
   105  0087                     	;# 
   106  0088                     	;# 
   107  0089                     	;# 
   108  008C                     	;# 
   109  008D                     	;# 
   110  008E                     	;# 
   111  008F                     	;# 
   112  0090                     	;# 
   113  0091                     	;# 
   114  0092                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0094                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0097                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009A                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  0105                     	;# 
   131  0107                     	;# 
   132  0108                     	;# 
   133  0109                     	;# 
   134  010C                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  010F                     	;# 
   139  0185                     	;# 
   140  0187                     	;# 
   141  0188                     	;# 
   142  0189                     	;# 
   143  018C                     	;# 
   144  018D                     	;# 
   145  0000                     	;# 
   146  0001                     	;# 
   147  0002                     	;# 
   148  0003                     	;# 
   149  0004                     	;# 
   150  0005                     	;# 
   151  0006                     	;# 
   152  0007                     	;# 
   153  0008                     	;# 
   154  0009                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000D                     	;# 
   159  000E                     	;# 
   160  000E                     	;# 
   161  000F                     	;# 
   162  0010                     	;# 
   163  0011                     	;# 
   164  0012                     	;# 
   165  0013                     	;# 
   166  0014                     	;# 
   167  0015                     	;# 
   168  0015                     	;# 
   169  0016                     	;# 
   170  0017                     	;# 
   171  0018                     	;# 
   172  0019                     	;# 
   173  001A                     	;# 
   174  001B                     	;# 
   175  001B                     	;# 
   176  001C                     	;# 
   177  001D                     	;# 
   178  001E                     	;# 
   179  001F                     	;# 
   180  0081                     	;# 
   181  0085                     	;# 
   182  0086                     	;# 
   183  0087                     	;# 
   184  0088                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  0105                     	;# 
   209  0107                     	;# 
   210  0108                     	;# 
   211  0109                     	;# 
   212  010C                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  0185                     	;# 
   218  0187                     	;# 
   219  0188                     	;# 
   220  0189                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0008                     	;# 
   232  0009                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000D                     	;# 
   237  000E                     	;# 
   238  000E                     	;# 
   239  000F                     	;# 
   240  0010                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0014                     	;# 
   245  0015                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001B                     	;# 
   253  001B                     	;# 
   254  001C                     	;# 
   255  001D                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  0081                     	;# 
   259  0085                     	;# 
   260  0086                     	;# 
   261  0087                     	;# 
   262  0088                     	;# 
   263  0089                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  008F                     	;# 
   268  0090                     	;# 
   269  0091                     	;# 
   270  0092                     	;# 
   271  0093                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0094                     	;# 
   275  0095                     	;# 
   276  0096                     	;# 
   277  0097                     	;# 
   278  0098                     	;# 
   279  0099                     	;# 
   280  009A                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  0105                     	;# 
   287  0107                     	;# 
   288  0108                     	;# 
   289  0109                     	;# 
   290  010C                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0187                     	;# 
   297  0188                     	;# 
   298  0189                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  0000                     	;# 
   302  0001                     	;# 
   303  0002                     	;# 
   304  0003                     	;# 
   305  0004                     	;# 
   306  0005                     	;# 
   307  0006                     	;# 
   308  0007                     	;# 
   309  0008                     	;# 
   310  0009                     	;# 
   311  000A                     	;# 
   312  000B                     	;# 
   313  000C                     	;# 
   314  000D                     	;# 
   315  000E                     	;# 
   316  000E                     	;# 
   317  000F                     	;# 
   318  0010                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0014                     	;# 
   323  0015                     	;# 
   324  0015                     	;# 
   325  0016                     	;# 
   326  0017                     	;# 
   327  0018                     	;# 
   328  0019                     	;# 
   329  001A                     	;# 
   330  001B                     	;# 
   331  001B                     	;# 
   332  001C                     	;# 
   333  001D                     	;# 
   334  001E                     	;# 
   335  001F                     	;# 
   336  0081                     	;# 
   337  0085                     	;# 
   338  0086                     	;# 
   339  0087                     	;# 
   340  0088                     	;# 
   341  0089                     	;# 
   342  008C                     	;# 
   343  008D                     	;# 
   344  008E                     	;# 
   345  008F                     	;# 
   346  0090                     	;# 
   347  0091                     	;# 
   348  0092                     	;# 
   349  0093                     	;# 
   350  0093                     	;# 
   351  0093                     	;# 
   352  0094                     	;# 
   353  0095                     	;# 
   354  0096                     	;# 
   355  0097                     	;# 
   356  0098                     	;# 
   357  0099                     	;# 
   358  009A                     	;# 
   359  009B                     	;# 
   360  009C                     	;# 
   361  009D                     	;# 
   362  009E                     	;# 
   363  009F                     	;# 
   364  0105                     	;# 
   365  0107                     	;# 
   366  0108                     	;# 
   367  0109                     	;# 
   368  010C                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  010F                     	;# 
   373  0185                     	;# 
   374  0187                     	;# 
   375  0188                     	;# 
   376  0189                     	;# 
   377  018C                     	;# 
   378  018D                     	;# 
   379                           
   380                           	psect	idataBANK0
   381  083D                     __pidataBANK0:	
   382                           
   383                           ;initializer for _intNumberOfBlinks
   384  083D  3458               	retlw	88
   385  083E  3402               	retlw	2
   386                           
   387                           ;initializer for _bValueFromPot
   388  083F  3401               	retlw	1
   389                           
   390                           	psect	strings
   391  0800                     __pstrings:	
   392  0800                     stringtab:	
   393  0800                     __stringtab:	
   394  0800                     stringcode:	
   395                           ;	String table - string pointers are 1 byte each
   396                           
   397  0800                     stringdir:	
   398  0800  3008               	movlw	high stringdir
   399  0801  008A               	movwf	10
   400  0802  0804               	movf	4,w
   401  0803  0A84               	incf	4,f
   402  0804  0782               	addwf	2,f
   403  0805                     __stringbase:	
   404  0805  3400               	retlw	0
   405  0806                     __end_of__stringtab:	
   406  0806                     _ChannelP:	
   407  0806  343F               	retlw	63
   408  0807  3447               	retlw	71
   409  0808  344F               	retlw	79
   410  0809  3457               	retlw	87
   411  080A  345F               	retlw	95
   412  080B  3477               	retlw	119
   413  080C  347E               	retlw	126
   414  080D  347F               	retlw	127
   415  080E  3486               	retlw	134
   416  080F  3487               	retlw	135
   417  0810  3437               	retlw	55
   418  0811  3467               	retlw	103
   419  0812  346F               	retlw	111
   420  0813                     __end_of_ChannelP:	
   421  0813                     _ChannelR:	
   422  0813  344F               	retlw	79
   423  0814  3459               	retlw	89
   424  0815  3463               	retlw	99
   425  0816  346D               	retlw	109
   426  0817  3477               	retlw	119
   427  0818  3495               	retlw	149
   428  0819  349F               	retlw	159
   429  081A  349F               	retlw	159
   430  081B  34A9               	retlw	169
   431  081C  34A9               	retlw	169
   432  081D  3445               	retlw	69
   433  081E  3481               	retlw	129
   434  081F  348B               	retlw	139
   435  0820                     __end_of_ChannelR:	
   436  0820                     _ChannelS:	
   437  0820  3418               	retlw	24
   438  0821  341B               	retlw	27
   439  0822  341E               	retlw	30
   440  0823  3421               	retlw	33
   441  0824  3424               	retlw	36
   442  0825  342D               	retlw	45
   443  0826  347B               	retlw	123
   444  0827  3430               	retlw	48
   445  0828  347E               	retlw	126
   446  0829  3433               	retlw	51
   447  082A  3415               	retlw	21
   448  082B  3427               	retlw	39
   449  082C  342A               	retlw	42
   450  082D                     __end_of_ChannelS:	
   451  001F                     _ADCON0bits	set	31
   452  001E                     _ADRESH	set	30
   453  000B                     _INTCONbits	set	11
   454  000C                     _PIR1bits	set	12
   455  0005                     _PORTA	set	5
   456  0006                     _PORTB	set	6
   457  0007                     _PORTC	set	7
   458  0008                     _PORTD	set	8
   459  0009                     _PORTE	set	9
   460  0013                     _SSPBUF	set	19
   461  0014                     _SSPCONbits	set	20
   462  0010                     _T1CON	set	16
   463  0010                     _T1CONbits	set	16
   464  000F                     _TMR1H	set	15
   465  000E                     _TMR1L	set	14
   466  0018                     _CARRY	set	24
   467  005F                     _GIE	set	95
   468  0029                     _RA1	set	41
   469  002C                     _RA4	set	44
   470  002D                     _RA5	set	45
   471  0030                     _RB0	set	48
   472  0031                     _RB1	set	49
   473  0033                     _RB3	set	51
   474  0034                     _RB4	set	52
   475  0035                     _RB5	set	53
   476  0058                     _RBIF	set	88
   477  0038                     _RC0	set	56
   478  0039                     _RC1	set	57
   479  003A                     _RC2	set	58
   480  0043                     _RD3	set	67
   481  0044                     _RD4	set	68
   482  0060                     _TMR1IF	set	96
   483  0080                     _TMR1ON	set	128
   484  009F                     _ADCON1bits	set	159
   485  0096                     _IOCBbits	set	150
   486  0081                     _OPTION_REGbits	set	129
   487  008F                     _OSCCONbits	set	143
   488  008C                     _PIE1bits	set	140
   489  0094                     _SSPSTATbits	set	148
   490  0085                     _TRISA	set	133
   491  0086                     _TRISB	set	134
   492  0087                     _TRISC	set	135
   493  0088                     _TRISD	set	136
   494  0089                     _TRISE	set	137
   495  0095                     _WPUBbits	set	149
   496  0463                     _SSPIE	set	1123
   497  010D                     _EEADR	set	269
   498  010C                     _EEDATA	set	268
   499  0188                     _ANSEL	set	392
   500  0189                     _ANSELH	set	393
   501  0189                     _ANSELHbits	set	393
   502  0188                     _ANSELbits	set	392
   503  018C                     _EECON1	set	396
   504  018D                     _EECON2	set	397
   505  0C60                     _RD	set	3168
   506  0C61                     _WR	set	3169
   507  0C62                     _WREN	set	3170
   508  082D                     STR_1:	
   509  082D  344E               	retlw	78	;'N'
   510  082E  3431               	retlw	49	;'1'
   511  082F  3442               	retlw	66	;'B'
   512  0830  344C               	retlw	76	;'L'
   513  0831  3449               	retlw	73	;'I'
   514  0832  344E               	retlw	78	;'N'
   515  0833  344B               	retlw	75	;'K'
   516  0834  3400               	retlw	0
   517  0835                     STR_2:	
   518  0835  344E               	retlw	78	;'N'
   519  0836  3432               	retlw	50	;'2'
   520  0837  3442               	retlw	66	;'B'
   521  0838  344C               	retlw	76	;'L'
   522  0839  3449               	retlw	73	;'I'
   523  083A  344E               	retlw	78	;'N'
   524  083B  344B               	retlw	75	;'K'
   525  083C  3400               	retlw	0
   526                           
   527                           ; #config settings
   528  0000                     
   529                           	psect	cinit
   530  0015                     start_initialization:	
   531  0015                     __initialization:	
   532                           
   533                           ; Initialize objects allocated to BANK0
   534  0015  120A  158A  203D  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   535  001A  00EB               	movwf	__pdataBANK0& (0+127)
   536  001B  120A  158A  203E  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   537  0020  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   538  0021  120A  158A  203F  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   539  0026  00ED               	movwf	(__pdataBANK0+2)& (0+127)
   540                           
   541                           ; Clear objects allocated to BANK3
   542  0027  1783               	bsf	3,7	;select IRP bank2
   543  0028  3090               	movlw	low __pbssBANK3
   544  0029  0084               	movwf	4
   545  002A  30B8               	movlw	low (__pbssBANK3+40)
   546  002B  160A  118A  255E  120A  118A  	fcall	clear_ram0
   547                           
   548                           ; Clear objects allocated to BANK1
   549  0030  1383               	bcf	3,7	;select IRP bank0
   550  0031  30C2               	movlw	low __pbssBANK1
   551  0032  0084               	movwf	4
   552  0033  30CC               	movlw	low (__pbssBANK1+10)
   553  0034  160A  118A  255E  120A  118A  	fcall	clear_ram0
   554                           
   555                           ; Clear objects allocated to BANK0
   556  0039  3056               	movlw	low __pbssBANK0
   557  003A  0084               	movwf	4
   558  003B  306B               	movlw	low (__pbssBANK0+21)
   559  003C  160A  118A  255E   	fcall	clear_ram0
   560                           
   561                           ; Clear objects allocated to COMMON
   562  003F  01FC               	clrf	__pbssCOMMON& (0+127)
   563  0040  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   564  0041                     end_of_initialization:	
   565                           ;End of C runtime variable initialization code
   566                           
   567  0041                     __end_of__initialization:	
   568  0041  0183               	clrf	3
   569  0042  120A  158A  2E2D   	ljmp	_main	;jump to C main() function
   570                           
   571                           	psect	bssCOMMON
   572  007C                     __pbssCOMMON:	
   573  007C                     _intBlinkCounter:	
   574  007C                     	ds	2
   575                           
   576                           	psect	bssBANK0
   577  0056                     __pbssBANK0:	
   578  0056                     _bTimerComplete:	
   579  0056                     	ds	5
   580  005B                     _channelFound:	
   581  005B                     	ds	2
   582  005D                     _intBlinkCycle:	
   583  005D                     	ds	2
   584  005F                     _intDarkCheckIntervall:	
   585  005F                     	ds	2
   586  0061                     _intHalfSecondCounter:	
   587  0061                     	ds	2
   588  0063                     _intMinuteCounter:	
   589  0063                     	ds	2
   590  0065                     _intSecondCounter:	
   591  0065                     	ds	2
   592  0067                     _bChannelFound:	
   593  0067                     	ds	1
   594  0068                     _bDark:	
   595  0068                     	ds	1
   596  0069                     _bSaveDataToFlash:	
   597  0069                     	ds	1
   598  006A                     _bTransiverModeReceive:	
   599  006A                     	ds	1
   600                           
   601                           	psect	dataBANK0
   602  006B                     __pdataBANK0:	
   603  006B                     _intNumberOfBlinks:	
   604  006B                     	ds	2
   605  006D                     _bValueFromPot:	
   606  006D                     	ds	1
   607                           
   608                           	psect	bssBANK1
   609  00C2                     __pbssBANK1:	
   610  00C2                     _intClockTimer:	
   611  00C2                     	ds	10
   612                           
   613                           	psect	bssBANK3
   614  0190                     __pbssBANK3:	
   615  0190                     _ReceivedData:	
   616  0190                     	ds	40
   617                           
   618                           	psect	clrtext
   619  155E                     clear_ram0:	
   620                           ;	Called with FSR containing the base address, and
   621                           ;	W with the last address+1
   622                           
   623  155E  0064               	clrwdt	;clear the watchdog before getting into this loop
   624  155F                     clrloop0:	
   625  155F  0180               	clrf	0	;clear RAM location pointed to by FSR
   626  1560  0A84               	incf	4,f	;increment pointer
   627  1561  0604               	xorwf	4,w	;XOR with final address
   628  1562  1903               	btfsc	3,2	;have we reached the end yet?
   629  1563  3400               	retlw	0	;all done for this memory range, return
   630  1564  0604               	xorwf	4,w	;XOR again to restore value
   631  1565  2D5F               	goto	clrloop0	;do the next byte
   632                           
   633                           	psect	cstackBANK1
   634  00A0                     __pcstackBANK1:	
   635  00A0                     TransiverReadFIFO@ReceivedString:	
   636                           
   637                           ; 30 bytes @ 0x0
   638  00A0                     	ds	30
   639  00BE                     TransiverReadFIFO@i:	
   640                           
   641                           ; 2 bytes @ 0x1E
   642  00BE                     	ds	2
   643  00C0                     TransiverReadFIFO@j:	
   644                           
   645                           ; 2 bytes @ 0x20
   646  00C0                     	ds	2
   647                           
   648                           	psect	cstackCOMMON
   649  0070                     __pcstackCOMMON:	
   650  0070                     ?_PICInit:	
   651  0070                     ?_TransiverInit:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0070                     ?_ClockInit:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0070                     ?_write_ram_status:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0070                     ?_read_ram_status:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0070                     ?_ResetMemoryAdress:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0070                     ?_ram_bulk_erase:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ?_OperationMode:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ?_Mode_0:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     ?_Mode_1:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ?_Mode_2:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ?_Mode_4:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0070                     ?_Mode_5:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0070                     ?_TransiverToReceive:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     ?_TransiverReadFIFO:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     ?_saveDataToFlash:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     ?_SetRFMode:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     ?_RegisterRead:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0070                     ?_FindChannel:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0070                     ?_ReadFIFO:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0070                     ?_ReceivedPacketHandler:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0070                     ?_AnalogValue:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0070                     ?_eeprom_read:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0070                     ?_DarknessCheck:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0070                     ?_SendMemoryData:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0070                     ?_WriteFIFO:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ?_LightWithSensController:	
   727                           ; 1 bytes @ 0x0
   728                           
   729  0070                     ?_TimerCounter:	
   730                           ; 1 bytes @ 0x0
   731                           
   732  0070                     ??_TimerCounter:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0070                     ?_WriteSPI:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0070                     ?_ReadSPI:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0070                     ?_tc_int:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0070                     ?_IncreaseMemoryAdress:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0070                     ?i1_OperationMode:	
   748                           ; 1 bytes @ 0x0
   749                           
   750  0070                     ??i1_OperationMode:	
   751                           ; 1 bytes @ 0x0
   752                           
   753  0070                     ?_main:	
   754                           ; 1 bytes @ 0x0
   755                           
   756                           
   757                           ; 2 bytes @ 0x0
   758  0070                     	ds	1
   759  0071                     i1OperationMode@bracketStatus:	
   760                           
   761                           ; 1 bytes @ 0x1
   762  0071                     	ds	2
   763  0073                     TimerCounter@i:	
   764                           
   765                           ; 2 bytes @ 0x3
   766  0073                     	ds	2
   767  0075                     ??_tc_int:	
   768                           
   769                           ; 1 bytes @ 0x5
   770  0075                     	ds	7
   771                           
   772                           	psect	cstackBANK0
   773  0020                     __pcstackBANK0:	
   774  0020                     ??_PICInit:	
   775  0020                     ??_OperationMode:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0020                     ?_timerFunction:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0020                     ?_DelayDs:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0020                     ?_eeprom_write:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0020                     ??_eeprom_read:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0020                     ?_strchr:	
   791                           ; 1 bytes @ 0x0
   792                           
   793  0020                     ??_WriteSPI:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0020                     ?___bmul:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0020                     ?_strlen:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0020                     ?___llmod:	
   803                           ; 2 bytes @ 0x0
   804                           
   805  0020                     eeprom_write@value:	
   806                           ; 4 bytes @ 0x0
   807                           
   808  0020                     ___bmul@multiplicand:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0020                     timerFunction@intTimerNumber:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0020                     DelayDs@cnt:	
   815                           ; 2 bytes @ 0x0
   816                           
   817  0020                     strchr@chr:	
   818                           ; 2 bytes @ 0x0
   819                           
   820  0020                     ___llmod@divisor:	
   821                           ; 2 bytes @ 0x0
   822                           
   823                           
   824                           ; 4 bytes @ 0x0
   825  0020                     	ds	1
   826  0021                     ??_eeprom_write:	
   827  0021                     ??___bmul:	
   828                           ; 1 bytes @ 0x1
   829                           
   830  0021                     WriteSPI@buffer:	
   831                           ; 1 bytes @ 0x1
   832                           
   833  0021                     OperationMode@bracketStatus:	
   834                           ; 1 bytes @ 0x1
   835                           
   836  0021                     eeprom_read@addr:	
   837                           ; 1 bytes @ 0x1
   838                           
   839                           
   840                           ; 1 bytes @ 0x1
   841  0021                     	ds	1
   842  0022                     ??_DelayDs:	
   843  0022                     ??_strlen:	
   844                           ; 1 bytes @ 0x2
   845                           
   846  0022                     ??_strchr:	
   847                           ; 1 bytes @ 0x2
   848                           
   849  0022                     ?_ReadMemoryAdress:	
   850                           ; 1 bytes @ 0x2
   851                           
   852  0022                     WriteSPI@databyte:	
   853                           ; 1 bytes @ 0x2
   854                           
   855  0022                     ReadMemoryAdress@var2:	
   856                           ; 1 bytes @ 0x2
   857                           
   858  0022                     eeprom_write@addr:	
   859                           ; 1 bytes @ 0x2
   860                           
   861  0022                     ___bmul@product:	
   862                           ; 1 bytes @ 0x2
   863                           
   864  0022                     strchr@ptr:	
   865                           ; 1 bytes @ 0x2
   866                           
   867  0022                     timerFunction@intSetSeconds:	
   868                           ; 1 bytes @ 0x2
   869                           
   870                           
   871                           ; 2 bytes @ 0x2
   872  0022                     	ds	1
   873  0023                     ??_ClockInit:	
   874  0023                     ??_read_ram_status:	
   875                           ; 1 bytes @ 0x3
   876                           
   877  0023                     ??_ResetMemoryAdress:	
   878                           ; 1 bytes @ 0x3
   879                           
   880  0023                     ??_RegisterRead:	
   881                           ; 1 bytes @ 0x3
   882                           
   883  0023                     ??_ReadFIFO:	
   884                           ; 1 bytes @ 0x3
   885                           
   886  0023                     ??_WriteFIFO:	
   887                           ; 1 bytes @ 0x3
   888                           
   889  0023                     ??_ReadSPI:	
   890                           ; 1 bytes @ 0x3
   891                           
   892  0023                     ??_IncreaseMemoryAdress:	
   893                           ; 1 bytes @ 0x3
   894                           
   895  0023                     WriteFIFO@Data:	
   896                           ; 1 bytes @ 0x3
   897                           
   898  0023                     ReadMemoryAdress@var1:	
   899                           ; 1 bytes @ 0x3
   900                           
   901  0023                     ___bmul@multiplier:	
   902                           ; 1 bytes @ 0x3
   903                           
   904                           
   905                           ; 1 bytes @ 0x3
   906  0023                     	ds	1
   907  0024                     ??_timerFunction:	
   908  0024                     ?_ReadClock:	
   909                           ; 1 bytes @ 0x4
   910                           
   911  0024                     ??_ReadMemoryAdress:	
   912                           ; 1 bytes @ 0x4
   913                           
   914  0024                     ReadFIFO@value:	
   915                           ; 1 bytes @ 0x4
   916                           
   917  0024                     IncreaseMemoryAdress@var1:	
   918                           ; 1 bytes @ 0x4
   919                           
   920  0024                     read_ram_status@status:	
   921                           ; 1 bytes @ 0x4
   922                           
   923  0024                     ClockInit@cnt:	
   924                           ; 1 bytes @ 0x4
   925                           
   926  0024                     ReadClock@minutes:	
   927                           ; 1 bytes @ 0x4
   928                           
   929  0024                     DelayDs@i:	
   930                           ; 1 bytes @ 0x4
   931                           
   932  0024                     ___llmod@dividend:	
   933                           ; 2 bytes @ 0x4
   934                           
   935                           
   936                           ; 4 bytes @ 0x4
   937  0024                     	ds	1
   938  0025                     ??_write_ram_status:	
   939  0025                     ??_ram_bulk_erase:	
   940                           ; 1 bytes @ 0x5
   941                           
   942  0025                     ?_read_write_flash_ram:	
   943                           ; 1 bytes @ 0x5
   944                           
   945  0025                     RegisterRead@value:	
   946                           ; 1 bytes @ 0x5
   947                           
   948  0025                     ReadMemoryAdress@var3:	
   949                           ; 1 bytes @ 0x5
   950                           
   951  0025                     IncreaseMemoryAdress@var2:	
   952                           ; 1 bytes @ 0x5
   953                           
   954  0025                     write_ram_status@status:	
   955                           ; 1 bytes @ 0x5
   956                           
   957  0025                     ReadClock@hour:	
   958                           ; 1 bytes @ 0x5
   959                           
   960  0025                     read_write_flash_ram@bytes_to_readwrite:	
   961                           ; 1 bytes @ 0x5
   962                           
   963                           
   964                           ; 2 bytes @ 0x5
   965  0025                     	ds	1
   966  0026                     ??_AnalogValue:	
   967  0026                     ?_Blink:	
   968                           ; 1 bytes @ 0x6
   969                           
   970  0026                     RegisterRead@adress:	
   971                           ; 1 bytes @ 0x6
   972                           
   973  0026                     IncreaseMemoryAdress@var3:	
   974                           ; 1 bytes @ 0x6
   975                           
   976  0026                     ReadClock@date:	
   977                           ; 1 bytes @ 0x6
   978                           
   979  0026                     strlen@s:	
   980                           ; 1 bytes @ 0x6
   981                           
   982  0026                     Blink@n:	
   983                           ; 1 bytes @ 0x6
   984                           
   985                           
   986                           ; 2 bytes @ 0x6
   987  0026                     	ds	1
   988  0027                     ?_RegisterSet:	
   989  0027                     RegisterSet@value:	
   990                           ; 1 bytes @ 0x7
   991                           
   992  0027                     AnalogValue@channel:	
   993                           ; 1 bytes @ 0x7
   994                           
   995  0027                     read_write_flash_ram@flash_sector:	
   996                           ; 1 bytes @ 0x7
   997                           
   998  0027                     ReadClock@month:	
   999                           ; 1 bytes @ 0x7
  1000                           
  1001  0027                     strlen@cp:	
  1002                           ; 1 bytes @ 0x7
  1003                           
  1004                           
  1005                           ; 1 bytes @ 0x7
  1006  0027                     	ds	1
  1007  0028                     ??_RegisterSet:	
  1008  0028                     ??_DarknessCheck:	
  1009                           ; 1 bytes @ 0x8
  1010                           
  1011  0028                     ??_Blink:	
  1012                           ; 1 bytes @ 0x8
  1013                           
  1014  0028                     ??___llmod:	
  1015                           ; 1 bytes @ 0x8
  1016                           
  1017  0028                     ?_strncmp:	
  1018                           ; 1 bytes @ 0x8
  1019                           
  1020  0028                     read_write_flash_ram@flash_page:	
  1021                           ; 2 bytes @ 0x8
  1022                           
  1023  0028                     ReadClock@year:	
  1024                           ; 1 bytes @ 0x8
  1025                           
  1026  0028                     strncmp@s2:	
  1027                           ; 1 bytes @ 0x8
  1028                           
  1029                           
  1030                           ; 1 bytes @ 0x8
  1031  0028                     	ds	1
  1032  0029                     ??_ReadClock:	
  1033  0029                     DarknessCheck@darknessValue:	
  1034                           ; 1 bytes @ 0x9
  1035                           
  1036  0029                     read_write_flash_ram@offset:	
  1037                           ; 1 bytes @ 0x9
  1038                           
  1039  0029                     ___llmod@counter:	
  1040                           ; 1 bytes @ 0x9
  1041                           
  1042  0029                     Blink@i:	
  1043                           ; 1 bytes @ 0x9
  1044                           
  1045  0029                     strncmp@len:	
  1046                           ; 2 bytes @ 0x9
  1047                           
  1048                           
  1049                           ; 2 bytes @ 0x9
  1050  0029                     	ds	1
  1051  002A                     ??_Mode_0:	
  1052  002A                     ??_Mode_1:	
  1053                           ; 1 bytes @ 0xA
  1054                           
  1055  002A                     ??_Mode_2:	
  1056                           ; 1 bytes @ 0xA
  1057                           
  1058  002A                     ??_LightWithSensController:	
  1059                           ; 1 bytes @ 0xA
  1060                           
  1061  002A                     RegisterSet@adress:	
  1062                           ; 1 bytes @ 0xA
  1063                           
  1064  002A                     read_write_flash_ram@mem_ptr:	
  1065                           ; 1 bytes @ 0xA
  1066                           
  1067                           
  1068                           ; 1 bytes @ 0xA
  1069  002A                     	ds	1
  1070  002B                     ??_SetRFMode:	
  1071  002B                     ??_read_write_flash_ram:	
  1072                           ; 1 bytes @ 0xB
  1073                           
  1074  002B                     ??_strncmp:	
  1075                           ; 1 bytes @ 0xB
  1076                           
  1077  002B                     ReadClock@sec10:	
  1078                           ; 1 bytes @ 0xB
  1079                           
  1080                           
  1081                           ; 1 bytes @ 0xB
  1082  002B                     	ds	1
  1083  002C                     SetRFMode@mode:	
  1084  002C                     ReadClock@min10:	
  1085                           ; 1 bytes @ 0xC
  1086                           
  1087                           
  1088                           ; 1 bytes @ 0xC
  1089  002C                     	ds	1
  1090  002D                     SetRFMode@mcparam0_read:	
  1091  002D                     read_write_flash_ram@one_read_zero_write:	
  1092                           ; 1 bytes @ 0xD
  1093                           
  1094  002D                     ReadClock@hour10:	
  1095                           ; 1 bytes @ 0xD
  1096                           
  1097  002D                     strncmp@s1:	
  1098                           ; 1 bytes @ 0xD
  1099                           
  1100                           
  1101                           ; 1 bytes @ 0xD
  1102  002D                     	ds	1
  1103  002E                     ??_FindChannel:	
  1104  002E                     ?_strstr:	
  1105                           ; 1 bytes @ 0xE
  1106                           
  1107  002E                     ReadClock@date10:	
  1108                           ; 1 bytes @ 0xE
  1109                           
  1110  002E                     strstr@s2:	
  1111                           ; 1 bytes @ 0xE
  1112                           
  1113  002E                     read_write_flash_ram@i:	
  1114                           ; 1 bytes @ 0xE
  1115                           
  1116                           
  1117                           ; 2 bytes @ 0xE
  1118  002E                     	ds	1
  1119  002F                     ??_strstr:	
  1120  002F                     ReadClock@month10:	
  1121                           ; 1 bytes @ 0xF
  1122                           
  1123                           
  1124                           ; 1 bytes @ 0xF
  1125  002F                     	ds	1
  1126  0030                     ReadClock@year10:	
  1127                           
  1128                           ; 1 bytes @ 0x10
  1129  0030                     	ds	1
  1130  0031                     ReadClock@seconds:	
  1131  0031                     FindChannel@cnt:	
  1132                           ; 1 bytes @ 0x11
  1133                           
  1134                           
  1135                           ; 2 bytes @ 0x11
  1136  0031                     	ds	1
  1137  0032                     ReadClock@sec1:	
  1138  0032                     strstr@s1:	
  1139                           ; 1 bytes @ 0x12
  1140                           
  1141                           
  1142                           ; 1 bytes @ 0x12
  1143  0032                     	ds	1
  1144  0033                     ReadClock@min1:	
  1145  0033                     FindChannel@i:	
  1146                           ; 1 bytes @ 0x13
  1147                           
  1148                           
  1149                           ; 2 bytes @ 0x13
  1150  0033                     	ds	1
  1151  0034                     ReadClock@hour1:	
  1152                           
  1153                           ; 1 bytes @ 0x14
  1154  0034                     	ds	1
  1155  0035                     ??_TransiverInit:	
  1156  0035                     ??_TransiverToReceive:	
  1157                           ; 1 bytes @ 0x15
  1158                           
  1159  0035                     ?_TransmittPacket:	
  1160                           ; 1 bytes @ 0x15
  1161                           
  1162  0035                     TransmittPacket@value:	
  1163                           ; 1 bytes @ 0x15
  1164                           
  1165  0035                     ReadClock@month1:	
  1166                           ; 1 bytes @ 0x15
  1167                           
  1168                           
  1169                           ; 1 bytes @ 0x15
  1170  0035                     	ds	1
  1171  0036                     ??_TransmittPacket:	
  1172  0036                     ReadClock@year1:	
  1173                           ; 1 bytes @ 0x16
  1174                           
  1175                           
  1176                           ; 1 bytes @ 0x16
  1177  0036                     	ds	1
  1178  0037                     ReadClock@date1:	
  1179                           
  1180                           ; 1 bytes @ 0x17
  1181  0037                     	ds	1
  1182  0038                     ??_saveDataToFlash:	
  1183  0038                     TransmittPacket@i:	
  1184                           ; 1 bytes @ 0x18
  1185                           
  1186                           
  1187                           ; 2 bytes @ 0x18
  1188  0038                     	ds	2
  1189  003A                     TransmittPacket@topic:	
  1190                           
  1191                           ; 1 bytes @ 0x1A
  1192  003A                     	ds	1
  1193  003B                     ??_Mode_4:	
  1194  003B                     ??_Mode_5:	
  1195                           ; 1 bytes @ 0x1B
  1196                           
  1197  003B                     ??_SendMemoryData:	
  1198                           ; 1 bytes @ 0x1B
  1199                           
  1200                           
  1201                           ; 1 bytes @ 0x1B
  1202  003B                     	ds	2
  1203  003D                     saveDataToFlash@seconds:	
  1204                           
  1205                           ; 1 bytes @ 0x1D
  1206  003D                     	ds	1
  1207  003E                     saveDataToFlash@minutes:	
  1208                           
  1209                           ; 1 bytes @ 0x1E
  1210  003E                     	ds	1
  1211  003F                     saveDataToFlash@hours:	
  1212                           
  1213                           ; 1 bytes @ 0x1F
  1214  003F                     	ds	1
  1215  0040                     saveDataToFlash@date:	
  1216                           
  1217                           ; 1 bytes @ 0x20
  1218  0040                     	ds	1
  1219  0041                     saveDataToFlash@month:	
  1220                           
  1221                           ; 1 bytes @ 0x21
  1222  0041                     	ds	1
  1223  0042                     saveDataToFlash@year:	
  1224                           
  1225                           ; 1 bytes @ 0x22
  1226  0042                     	ds	1
  1227  0043                     saveDataToFlash@value:	
  1228  0043                     SendMemoryData@value:	
  1229                           ; 1 bytes @ 0x23
  1230                           
  1231                           
  1232                           ; 1 bytes @ 0x23
  1233  0043                     	ds	1
  1234  0044                     saveDataToFlash@addr1:	
  1235  0044                     SendMemoryData@addr3:	
  1236                           ; 1 bytes @ 0x24
  1237                           
  1238                           
  1239                           ; 1 bytes @ 0x24
  1240  0044                     	ds	1
  1241  0045                     saveDataToFlash@addr2:	
  1242  0045                     SendMemoryData@addr2:	
  1243                           ; 1 bytes @ 0x25
  1244                           
  1245                           
  1246                           ; 1 bytes @ 0x25
  1247  0045                     	ds	1
  1248  0046                     saveDataToFlash@addr3:	
  1249  0046                     SendMemoryData@addr1:	
  1250                           ; 1 bytes @ 0x26
  1251                           
  1252                           
  1253                           ; 1 bytes @ 0x26
  1254  0046                     	ds	1
  1255  0047                     SendMemoryData@finalAddress:	
  1256                           
  1257                           ; 4 bytes @ 0x27
  1258  0047                     	ds	4
  1259  004B                     SendMemoryData@address:	
  1260                           
  1261                           ; 4 bytes @ 0x2B
  1262  004B                     	ds	4
  1263  004F                     ??_ReceivedPacketHandler:	
  1264                           
  1265                           ; 1 bytes @ 0x2F
  1266  004F                     	ds	1
  1267  0050                     ReceivedPacketHandler@Data:	
  1268                           
  1269                           ; 1 bytes @ 0x30
  1270  0050                     	ds	1
  1271  0051                     ??_TransiverReadFIFO:	
  1272                           
  1273                           ; 1 bytes @ 0x31
  1274  0051                     	ds	2
  1275  0053                     ??_main:	
  1276                           
  1277                           ; 1 bytes @ 0x33
  1278  0053                     	ds	3
  1279                           
  1280                           	psect	maintext
  1281  0E2D                     __pmaintext:	
  1282 ;;
  1283 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1284 ;;
  1285 ;; *************** function _main *****************
  1286 ;; Defined at:
  1287 ;;		line 21 in file "main.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;		None
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;		None
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  2   80[None  ] int 
  1294 ;; Registers used:
  1295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1296 ;; Tracked objects:
  1297 ;;		On entry : B00/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1301 ;;      Params:         0       0       0       0       0
  1302 ;;      Locals:         0       0       0       0       0
  1303 ;;      Temps:          0       3       0       0       0
  1304 ;;      Totals:         0       3       0       0       0
  1305 ;;Total ram usage:        3 bytes
  1306 ;; Hardware stack levels required when called:   11
  1307 ;; This function calls:
  1308 ;;		_ClockInit
  1309 ;;		_Mode_0
  1310 ;;		_Mode_1
  1311 ;;		_Mode_2
  1312 ;;		_Mode_4
  1313 ;;		_Mode_5
  1314 ;;		_OperationMode
  1315 ;;		_PICInit
  1316 ;;		_ResetMemoryAdress
  1317 ;;		_TransiverInit
  1318 ;;		_TransiverReadFIFO
  1319 ;;		_TransiverToReceive
  1320 ;;		_ram_bulk_erase
  1321 ;;		_read_ram_status
  1322 ;;		_saveDataToFlash
  1323 ;;		_write_ram_status
  1324 ;; This function is called by:
  1325 ;;		Startup code after reset
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           
  1330                           ;psect for function _main
  1331  0E2D                     _main:	
  1332                           
  1333                           ;main.c: 24: PICInit();
  1334                           
  1335                           ;incstack = 0
  1336 ;; hardware stack exceeded
  1337                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1338  0E2D  120A  158A  226E  120A  158A  	fcall	_PICInit
  1339                           
  1340                           ;main.c: 25: TransiverInit();
  1341  0E32  120A  158A  2716  120A  158A  	fcall	_TransiverInit
  1342                           
  1343                           ;main.c: 26: ClockInit();
  1344  0E37  120A  158A  242A  120A  158A  	fcall	_ClockInit
  1345                           
  1346                           ;main.c: 30: RB1 = 0;
  1347  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
  1348  0E3D  1303               	bcf	3,6	;RP1=0, select bank0
  1349  0E3E  1086               	bcf	6,1	;volatile
  1350                           
  1351                           ;main.c: 31: _delay((unsigned long)((300)*(4000000/4000.0)));
  1352  0E3F  3002               	movlw	2
  1353  0E40  00D5               	movwf	??_main+2
  1354  0E41  3086               	movlw	134
  1355  0E42  00D4               	movwf	??_main+1
  1356  0E43  3099               	movlw	153
  1357  0E44  00D3               	movwf	??_main
  1358  0E45                     u2657:	
  1359  0E45  0BD3               	decfsz	??_main,f
  1360  0E46  2E45               	goto	u2657
  1361  0E47  0BD4               	decfsz	??_main+1,f
  1362  0E48  2E45               	goto	u2657
  1363  0E49  0BD5               	decfsz	??_main+2,f
  1364  0E4A  2E45               	goto	u2657
  1365                           
  1366                           ;main.c: 32: RB1 = 1;
  1367  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  1368  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  1369  0E4D  1486               	bsf	6,1	;volatile
  1370                           
  1371                           ;main.c: 33: _delay((unsigned long)((300)*(4000000/4000.0)));
  1372  0E4E  3002               	movlw	2
  1373  0E4F  00D5               	movwf	??_main+2
  1374  0E50  3086               	movlw	134
  1375  0E51  00D4               	movwf	??_main+1
  1376  0E52  3099               	movlw	153
  1377  0E53  00D3               	movwf	??_main
  1378  0E54                     u2667:	
  1379  0E54  0BD3               	decfsz	??_main,f
  1380  0E55  2E54               	goto	u2667
  1381  0E56  0BD4               	decfsz	??_main+1,f
  1382  0E57  2E54               	goto	u2667
  1383  0E58  0BD5               	decfsz	??_main+2,f
  1384  0E59  2E54               	goto	u2667
  1385  0E5A                     l3346:	
  1386                           ;main.c: 35: while(1)
  1387                           
  1388                           
  1389                           ;main.c: 36: {
  1390                           ;main.c: 37: if(!RB0)
  1391  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  1392  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  1393  0E5C  1806               	btfsc	6,0	;volatile
  1394  0E5D  2EB1               	goto	l3368
  1395                           
  1396                           ;main.c: 38: {
  1397                           ;main.c: 39: RB1 = 0;
  1398  0E5E  1086               	bcf	6,1	;volatile
  1399                           
  1400                           ;main.c: 40: _delay((unsigned long)((300)*(4000000/4000.0)));
  1401  0E5F  3002               	movlw	2
  1402  0E60  00D5               	movwf	??_main+2
  1403  0E61  3086               	movlw	134
  1404  0E62  00D4               	movwf	??_main+1
  1405  0E63  3099               	movlw	153
  1406  0E64  00D3               	movwf	??_main
  1407  0E65                     u2677:	
  1408  0E65  0BD3               	decfsz	??_main,f
  1409  0E66  2E65               	goto	u2677
  1410  0E67  0BD4               	decfsz	??_main+1,f
  1411  0E68  2E65               	goto	u2677
  1412  0E69  0BD5               	decfsz	??_main+2,f
  1413  0E6A  2E65               	goto	u2677
  1414                           
  1415                           ;main.c: 41: RB1 = 1;
  1416  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  1417  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  1418  0E6D  1486               	bsf	6,1	;volatile
  1419                           
  1420                           ;main.c: 42: _delay((unsigned long)((300)*(4000000/4000.0)));
  1421  0E6E  3002               	movlw	2
  1422  0E6F  00D5               	movwf	??_main+2
  1423  0E70  3086               	movlw	134
  1424  0E71  00D4               	movwf	??_main+1
  1425  0E72  3099               	movlw	153
  1426  0E73  00D3               	movwf	??_main
  1427  0E74                     u2687:	
  1428  0E74  0BD3               	decfsz	??_main,f
  1429  0E75  2E74               	goto	u2687
  1430  0E76  0BD4               	decfsz	??_main+1,f
  1431  0E77  2E74               	goto	u2687
  1432  0E78  0BD5               	decfsz	??_main+2,f
  1433  0E79  2E74               	goto	u2687
  1434                           
  1435                           ;main.c: 43: write_ram_status(read_ram_status() & 0b11100011);
  1436  0E7A  160A  118A  25E6  120A  158A  	fcall	_read_ram_status
  1437  0E7F  39E3               	andlw	227
  1438  0E80  160A  118A  2771  120A  158A  	fcall	_write_ram_status
  1439                           
  1440                           ;main.c: 44: ResetMemoryAdress();
  1441  0E85  160A  118A  2643  120A  158A  	fcall	_ResetMemoryAdress
  1442                           
  1443                           ;main.c: 45: ram_bulk_erase();
  1444  0E8A  160A  118A  265D  120A  158A  	fcall	_ram_bulk_erase
  1445                           
  1446                           ;main.c: 46: RB1 = 0;
  1447  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  1448  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  1449  0E91  1086               	bcf	6,1	;volatile
  1450                           
  1451                           ;main.c: 47: _delay((unsigned long)((300)*(4000000/4000.0)));
  1452  0E92  3002               	movlw	2
  1453  0E93  00D5               	movwf	??_main+2
  1454  0E94  3086               	movlw	134
  1455  0E95  00D4               	movwf	??_main+1
  1456  0E96  3099               	movlw	153
  1457  0E97  00D3               	movwf	??_main
  1458  0E98                     u2697:	
  1459  0E98  0BD3               	decfsz	??_main,f
  1460  0E99  2E98               	goto	u2697
  1461  0E9A  0BD4               	decfsz	??_main+1,f
  1462  0E9B  2E98               	goto	u2697
  1463  0E9C  0BD5               	decfsz	??_main+2,f
  1464  0E9D  2E98               	goto	u2697
  1465                           
  1466                           ;main.c: 48: RB1 = 1;
  1467  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  1468  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  1469  0EA0  1486               	bsf	6,1	;volatile
  1470                           
  1471                           ;main.c: 49: _delay((unsigned long)((300)*(4000000/4000.0)));
  1472  0EA1  3002               	movlw	2
  1473  0EA2  00D5               	movwf	??_main+2
  1474  0EA3  3086               	movlw	134
  1475  0EA4  00D4               	movwf	??_main+1
  1476  0EA5  3099               	movlw	153
  1477  0EA6  00D3               	movwf	??_main
  1478  0EA7                     u2707:	
  1479  0EA7  0BD3               	decfsz	??_main,f
  1480  0EA8  2EA7               	goto	u2707
  1481  0EA9  0BD4               	decfsz	??_main+1,f
  1482  0EAA  2EA7               	goto	u2707
  1483  0EAB  0BD5               	decfsz	??_main+2,f
  1484  0EAC  2EA7               	goto	u2707
  1485  0EAD                     l83:	
  1486                           ;main.c: 50: while(!RB0);
  1487                           
  1488  0EAD  1283               	bcf	3,5	;RP0=0, select bank0
  1489  0EAE  1303               	bcf	3,6	;RP1=0, select bank0
  1490  0EAF  1C06               	btfss	6,0	;volatile
  1491  0EB0  2EAD               	goto	l83
  1492  0EB1                     l3368:	
  1493                           
  1494                           ;main.c: 53: }
  1495                           ;main.c: 55: if(OperationMode() == 0)
  1496  0EB1  160A  118A  256F  120A  158A  	fcall	_OperationMode
  1497  0EB6  3A00               	xorlw	0
  1498  0EB7  1D03               	skipz
  1499  0EB8  2EBE               	goto	l3372
  1500                           
  1501                           ;main.c: 56: {
  1502                           ;main.c: 57: Mode_0();
  1503  0EB9  160A  118A  2552  120A  158A  	fcall	_Mode_0
  1504  0EBE                     l3372:	
  1505                           
  1506                           ;main.c: 58: }
  1507                           ;main.c: 59: if(OperationMode() == 1)
  1508  0EBE  160A  118A  256F  120A  158A  	fcall	_OperationMode
  1509  0EC3  3A01               	xorlw	1
  1510  0EC4  1D03               	skipz
  1511  0EC5  2ECB               	goto	l3376
  1512                           
  1513                           ;main.c: 60: {
  1514                           ;main.c: 61: Mode_1();
  1515  0EC6  160A  118A  260F  120A  158A  	fcall	_Mode_1
  1516  0ECB                     l3376:	
  1517                           
  1518                           ;main.c: 62: }
  1519                           ;main.c: 65: if(OperationMode() == 2)
  1520  0ECB  160A  118A  256F  120A  158A  	fcall	_OperationMode
  1521  0ED0  3A02               	xorlw	2
  1522  0ED1  1D03               	skipz
  1523  0ED2  2ED8               	goto	l3380
  1524                           
  1525                           ;main.c: 66: {
  1526                           ;main.c: 67: Mode_2();
  1527  0ED3  160A  118A  2584  120A  158A  	fcall	_Mode_2
  1528  0ED8                     l3380:	
  1529                           
  1530                           ;main.c: 68: }
  1531                           ;main.c: 70: if(OperationMode() == 4)
  1532  0ED8  160A  118A  256F  120A  158A  	fcall	_OperationMode
  1533  0EDD  3A04               	xorlw	4
  1534  0EDE  1D03               	skipz
  1535  0EDF  2EE5               	goto	l3384
  1536                           
  1537                           ;main.c: 71: {
  1538                           ;main.c: 72: Mode_4();
  1539  0EE0  160A  118A  259F  120A  158A  	fcall	_Mode_4
  1540  0EE5                     l3384:	
  1541                           
  1542                           ;main.c: 73: }
  1543                           ;main.c: 75: if(OperationMode() == 5)
  1544  0EE5  160A  118A  256F  120A  158A  	fcall	_OperationMode
  1545  0EEA  3A05               	xorlw	5
  1546  0EEB  1D03               	skipz
  1547  0EEC  2EF2               	goto	l3388
  1548                           
  1549                           ;main.c: 76: {
  1550                           ;main.c: 77: Mode_5();
  1551  0EED  160A  118A  25C1  120A  158A  	fcall	_Mode_5
  1552  0EF2                     l3388:	
  1553                           
  1554                           ;main.c: 78: }
  1555                           ;main.c: 82: if(!bTransiverModeReceive)
  1556  0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  1557  0EF3  1303               	bcf	3,6	;RP1=0, select bank0
  1558  0EF4  086A               	movf	_bTransiverModeReceive,w
  1559  0EF5  1D03               	btfss	3,2
  1560  0EF6  2EFC               	goto	l3392
  1561                           
  1562                           ;main.c: 83: TransiverToReceive();
  1563  0EF7  120A  158A  2211  120A  158A  	fcall	_TransiverToReceive
  1564  0EFC                     l3392:	
  1565                           
  1566                           ;main.c: 84: if(RB4 && bTransiverModeReceive)
  1567  0EFC  1283               	bcf	3,5	;RP0=0, select bank0
  1568  0EFD  1303               	bcf	3,6	;RP1=0, select bank0
  1569  0EFE  1E06               	btfss	6,4	;volatile
  1570  0EFF  2F08               	goto	l3398
  1571  0F00  086A               	movf	_bTransiverModeReceive,w
  1572  0F01  1903               	btfsc	3,2
  1573  0F02  2F08               	goto	l3398
  1574                           
  1575                           ;main.c: 85: TransiverReadFIFO();
  1576  0F03  120A  158A  22D2  120A  158A  	fcall	_TransiverReadFIFO
  1577  0F08                     l3398:	
  1578                           
  1579                           ;main.c: 87: if(bSaveDataToFlash)
  1580  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  1582  0F0A  0869               	movf	_bSaveDataToFlash,w
  1583  0F0B  1903               	btfsc	3,2
  1584  0F0C  2E5A               	goto	l3346
  1585                           
  1586                           ;main.c: 88: {
  1587                           ;main.c: 89: saveDataToFlash();
  1588  0F0D  120A  118A  2045  120A  158A  	fcall	_saveDataToFlash
  1589                           
  1590                           ;main.c: 90: bSaveDataToFlash = FALSE;
  1591  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  1592  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  1593  0F14  01E9               	clrf	_bSaveDataToFlash
  1594  0F15  2E5A               	goto	l3346
  1595  0F16                     __end_of_main:	
  1596                           
  1597                           	psect	text1
  1598  0045                     __ptext1:	
  1599 ;; *************** function _saveDataToFlash *****************
  1600 ;; Defined at:
  1601 ;;		line 1075 in file "functions.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;		None
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  addr3           1   38[BANK0 ] unsigned char 
  1606 ;;  addr2           1   37[BANK0 ] unsigned char 
  1607 ;;  addr1           1   36[BANK0 ] unsigned char 
  1608 ;;  value           1   35[BANK0 ] unsigned char 
  1609 ;;  year            1   34[BANK0 ] unsigned char 
  1610 ;;  month           1   33[BANK0 ] unsigned char 
  1611 ;;  date            1   32[BANK0 ] unsigned char 
  1612 ;;  hours           1   31[BANK0 ] unsigned char 
  1613 ;;  minutes         1   30[BANK0 ] unsigned char 
  1614 ;;  seconds         1   29[BANK0 ] unsigned char 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         0       0       0       0       0
  1625 ;;      Locals:         0      10       0       0       0
  1626 ;;      Temps:          0       5       0       0       0
  1627 ;;      Totals:         0      15       0       0       0
  1628 ;;Total ram usage:       15 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    6
  1631 ;; This function calls:
  1632 ;;		_AnalogValue
  1633 ;;		_IncreaseMemoryAdress
  1634 ;;		_ReadClock
  1635 ;;		_ReadMemoryAdress
  1636 ;;		_read_write_flash_ram
  1637 ;; This function is called by:
  1638 ;;		_main
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           
  1643                           ;psect for function _saveDataToFlash
  1644  0045                     _saveDataToFlash:	
  1645                           
  1646                           ;functions.c: 1077: unsigned char value, addr1, addr2, addr3, seconds, minutes, hours, d
      +                          ate, month, year;
  1647                           ;functions.c: 1079: ReadClock(&seconds, &minutes, &hours, &date, &month, &year);
  1648                           
  1649                           ;incstack = 0
  1650                           ; Regs used in _saveDataToFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1651  0045  303E               	movlw	(low (saveDataToFlash@minutes| 0))& (0+255)
  1652  0046  1283               	bcf	3,5	;RP0=0, select bank0
  1653  0047  1303               	bcf	3,6	;RP1=0, select bank0
  1654  0048  00B8               	movwf	??_saveDataToFlash
  1655  0049  0838               	movf	??_saveDataToFlash,w
  1656  004A  00A4               	movwf	ReadClock@minutes
  1657  004B  303F               	movlw	(low (saveDataToFlash@hours| 0))& (0+255)
  1658  004C  00B9               	movwf	??_saveDataToFlash+1
  1659  004D  0839               	movf	??_saveDataToFlash+1,w
  1660  004E  00A5               	movwf	ReadClock@hour
  1661  004F  3040               	movlw	(low (saveDataToFlash@date| 0))& (0+255)
  1662  0050  00BA               	movwf	??_saveDataToFlash+2
  1663  0051  083A               	movf	??_saveDataToFlash+2,w
  1664  0052  00A6               	movwf	ReadClock@date
  1665  0053  3041               	movlw	(low (saveDataToFlash@month| 0))& (0+255)
  1666  0054  00BB               	movwf	??_saveDataToFlash+3
  1667  0055  083B               	movf	??_saveDataToFlash+3,w
  1668  0056  00A7               	movwf	ReadClock@month
  1669  0057  3042               	movlw	(low (saveDataToFlash@year| 0))& (0+255)
  1670  0058  00BC               	movwf	??_saveDataToFlash+4
  1671  0059  083C               	movf	??_saveDataToFlash+4,w
  1672  005A  00A8               	movwf	ReadClock@year
  1673  005B  303D               	movlw	(low (saveDataToFlash@seconds| 0))& (0+255)
  1674  005C  120A  118A  25C2  120A  118A  	fcall	_ReadClock
  1675                           
  1676                           ;functions.c: 1081: value = year;
  1677  0061  1283               	bcf	3,5	;RP0=0, select bank0
  1678  0062  1303               	bcf	3,6	;RP1=0, select bank0
  1679  0063  0842               	movf	saveDataToFlash@year,w
  1680  0064  00B8               	movwf	??_saveDataToFlash
  1681  0065  0838               	movf	??_saveDataToFlash,w
  1682  0066  00C3               	movwf	saveDataToFlash@value
  1683                           
  1684                           ;functions.c: 1082: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1685  0067  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1686  0068  00B8               	movwf	??_saveDataToFlash
  1687  0069  0838               	movf	??_saveDataToFlash,w
  1688  006A  00A2               	movwf	ReadMemoryAdress@var2
  1689  006B  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1690  006C  00B9               	movwf	??_saveDataToFlash+1
  1691  006D  0839               	movf	??_saveDataToFlash+1,w
  1692  006E  00A3               	movwf	ReadMemoryAdress@var1
  1693  006F  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1694  0070  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  1695                           
  1696                           ;functions.c: 1083: read_write_flash_ram(
  1697                           ;functions.c: 1084: 0,
  1698                           ;functions.c: 1085: 1,
  1699                           ;functions.c: 1086: addr3,
  1700                           ;functions.c: 1087: addr2,
  1701                           ;functions.c: 1088: addr1,
  1702                           ;functions.c: 1089: &value);
  1703  0075  3001               	movlw	1
  1704  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1705  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1706  0078  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1707  0079  3000               	movlw	0
  1708  007A  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1709  007B  0846               	movf	saveDataToFlash@addr3,w
  1710  007C  00B8               	movwf	??_saveDataToFlash
  1711  007D  0838               	movf	??_saveDataToFlash,w
  1712  007E  00A7               	movwf	read_write_flash_ram@flash_sector
  1713  007F  0845               	movf	saveDataToFlash@addr2,w
  1714  0080  00B9               	movwf	??_saveDataToFlash+1
  1715  0081  0839               	movf	??_saveDataToFlash+1,w
  1716  0082  00A8               	movwf	read_write_flash_ram@flash_page
  1717  0083  0844               	movf	saveDataToFlash@addr1,w
  1718  0084  00BA               	movwf	??_saveDataToFlash+2
  1719  0085  083A               	movf	??_saveDataToFlash+2,w
  1720  0086  00A9               	movwf	read_write_flash_ram@offset
  1721  0087  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1722  0088  00BB               	movwf	??_saveDataToFlash+3
  1723  0089  083B               	movf	??_saveDataToFlash+3,w
  1724  008A  00AA               	movwf	read_write_flash_ram@mem_ptr
  1725  008B  3000               	movlw	0
  1726  008C  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1727                           
  1728                           ;functions.c: 1090: IncreaseMemoryAdress();
  1729  0091  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1730                           
  1731                           ;functions.c: 1092: value = month;
  1732  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1733  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1734  0098  0841               	movf	saveDataToFlash@month,w
  1735  0099  00B8               	movwf	??_saveDataToFlash
  1736  009A  0838               	movf	??_saveDataToFlash,w
  1737  009B  00C3               	movwf	saveDataToFlash@value
  1738                           
  1739                           ;functions.c: 1093: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1740  009C  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1741  009D  00B8               	movwf	??_saveDataToFlash
  1742  009E  0838               	movf	??_saveDataToFlash,w
  1743  009F  00A2               	movwf	ReadMemoryAdress@var2
  1744  00A0  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1745  00A1  00B9               	movwf	??_saveDataToFlash+1
  1746  00A2  0839               	movf	??_saveDataToFlash+1,w
  1747  00A3  00A3               	movwf	ReadMemoryAdress@var1
  1748  00A4  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1749  00A5  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  1750                           
  1751                           ;functions.c: 1094: read_write_flash_ram(
  1752                           ;functions.c: 1095: 0,
  1753                           ;functions.c: 1096: 1,
  1754                           ;functions.c: 1097: addr3,
  1755                           ;functions.c: 1098: addr2,
  1756                           ;functions.c: 1099: addr1,
  1757                           ;functions.c: 1100: &value);
  1758  00AA  3001               	movlw	1
  1759  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  1760  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  1761  00AD  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1762  00AE  3000               	movlw	0
  1763  00AF  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1764  00B0  0846               	movf	saveDataToFlash@addr3,w
  1765  00B1  00B8               	movwf	??_saveDataToFlash
  1766  00B2  0838               	movf	??_saveDataToFlash,w
  1767  00B3  00A7               	movwf	read_write_flash_ram@flash_sector
  1768  00B4  0845               	movf	saveDataToFlash@addr2,w
  1769  00B5  00B9               	movwf	??_saveDataToFlash+1
  1770  00B6  0839               	movf	??_saveDataToFlash+1,w
  1771  00B7  00A8               	movwf	read_write_flash_ram@flash_page
  1772  00B8  0844               	movf	saveDataToFlash@addr1,w
  1773  00B9  00BA               	movwf	??_saveDataToFlash+2
  1774  00BA  083A               	movf	??_saveDataToFlash+2,w
  1775  00BB  00A9               	movwf	read_write_flash_ram@offset
  1776  00BC  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1777  00BD  00BB               	movwf	??_saveDataToFlash+3
  1778  00BE  083B               	movf	??_saveDataToFlash+3,w
  1779  00BF  00AA               	movwf	read_write_flash_ram@mem_ptr
  1780  00C0  3000               	movlw	0
  1781  00C1  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1782                           
  1783                           ;functions.c: 1101: IncreaseMemoryAdress();
  1784  00C6  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1785                           
  1786                           ;functions.c: 1103: value = date;
  1787  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1788  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1789  00CD  0840               	movf	saveDataToFlash@date,w
  1790  00CE  00B8               	movwf	??_saveDataToFlash
  1791  00CF  0838               	movf	??_saveDataToFlash,w
  1792  00D0  00C3               	movwf	saveDataToFlash@value
  1793                           
  1794                           ;functions.c: 1104: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1795  00D1  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1796  00D2  00B8               	movwf	??_saveDataToFlash
  1797  00D3  0838               	movf	??_saveDataToFlash,w
  1798  00D4  00A2               	movwf	ReadMemoryAdress@var2
  1799  00D5  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1800  00D6  00B9               	movwf	??_saveDataToFlash+1
  1801  00D7  0839               	movf	??_saveDataToFlash+1,w
  1802  00D8  00A3               	movwf	ReadMemoryAdress@var1
  1803  00D9  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1804  00DA  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  1805                           
  1806                           ;functions.c: 1105: read_write_flash_ram(
  1807                           ;functions.c: 1106: 0,
  1808                           ;functions.c: 1107: 1,
  1809                           ;functions.c: 1108: addr3,
  1810                           ;functions.c: 1109: addr2,
  1811                           ;functions.c: 1110: addr1,
  1812                           ;functions.c: 1111: &value);
  1813  00DF  3001               	movlw	1
  1814  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1815  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1816  00E2  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1817  00E3  3000               	movlw	0
  1818  00E4  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1819  00E5  0846               	movf	saveDataToFlash@addr3,w
  1820  00E6  00B8               	movwf	??_saveDataToFlash
  1821  00E7  0838               	movf	??_saveDataToFlash,w
  1822  00E8  00A7               	movwf	read_write_flash_ram@flash_sector
  1823  00E9  0845               	movf	saveDataToFlash@addr2,w
  1824  00EA  00B9               	movwf	??_saveDataToFlash+1
  1825  00EB  0839               	movf	??_saveDataToFlash+1,w
  1826  00EC  00A8               	movwf	read_write_flash_ram@flash_page
  1827  00ED  0844               	movf	saveDataToFlash@addr1,w
  1828  00EE  00BA               	movwf	??_saveDataToFlash+2
  1829  00EF  083A               	movf	??_saveDataToFlash+2,w
  1830  00F0  00A9               	movwf	read_write_flash_ram@offset
  1831  00F1  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1832  00F2  00BB               	movwf	??_saveDataToFlash+3
  1833  00F3  083B               	movf	??_saveDataToFlash+3,w
  1834  00F4  00AA               	movwf	read_write_flash_ram@mem_ptr
  1835  00F5  3000               	movlw	0
  1836  00F6  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1837                           
  1838                           ;functions.c: 1112: IncreaseMemoryAdress();
  1839  00FB  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1840                           
  1841                           ;functions.c: 1114: value = hours;
  1842  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1843  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1844  0102  083F               	movf	saveDataToFlash@hours,w
  1845  0103  00B8               	movwf	??_saveDataToFlash
  1846  0104  0838               	movf	??_saveDataToFlash,w
  1847  0105  00C3               	movwf	saveDataToFlash@value
  1848                           
  1849                           ;functions.c: 1115: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1850  0106  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1851  0107  00B8               	movwf	??_saveDataToFlash
  1852  0108  0838               	movf	??_saveDataToFlash,w
  1853  0109  00A2               	movwf	ReadMemoryAdress@var2
  1854  010A  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1855  010B  00B9               	movwf	??_saveDataToFlash+1
  1856  010C  0839               	movf	??_saveDataToFlash+1,w
  1857  010D  00A3               	movwf	ReadMemoryAdress@var1
  1858  010E  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1859  010F  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  1860                           
  1861                           ;functions.c: 1116: read_write_flash_ram(
  1862                           ;functions.c: 1117: 0,
  1863                           ;functions.c: 1118: 1,
  1864                           ;functions.c: 1119: addr3,
  1865                           ;functions.c: 1120: addr2,
  1866                           ;functions.c: 1121: addr1,
  1867                           ;functions.c: 1122: &value);
  1868  0114  3001               	movlw	1
  1869  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1871  0117  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1872  0118  3000               	movlw	0
  1873  0119  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1874  011A  0846               	movf	saveDataToFlash@addr3,w
  1875  011B  00B8               	movwf	??_saveDataToFlash
  1876  011C  0838               	movf	??_saveDataToFlash,w
  1877  011D  00A7               	movwf	read_write_flash_ram@flash_sector
  1878  011E  0845               	movf	saveDataToFlash@addr2,w
  1879  011F  00B9               	movwf	??_saveDataToFlash+1
  1880  0120  0839               	movf	??_saveDataToFlash+1,w
  1881  0121  00A8               	movwf	read_write_flash_ram@flash_page
  1882  0122  0844               	movf	saveDataToFlash@addr1,w
  1883  0123  00BA               	movwf	??_saveDataToFlash+2
  1884  0124  083A               	movf	??_saveDataToFlash+2,w
  1885  0125  00A9               	movwf	read_write_flash_ram@offset
  1886  0126  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1887  0127  00BB               	movwf	??_saveDataToFlash+3
  1888  0128  083B               	movf	??_saveDataToFlash+3,w
  1889  0129  00AA               	movwf	read_write_flash_ram@mem_ptr
  1890  012A  3000               	movlw	0
  1891  012B  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1892                           
  1893                           ;functions.c: 1123: IncreaseMemoryAdress();
  1894  0130  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1895                           
  1896                           ;functions.c: 1126: value = AnalogValue(0);
  1897  0135  3000               	movlw	0
  1898  0136  160A  118A  26EE  120A  118A  	fcall	_AnalogValue
  1899  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1900  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1901  013D  00B8               	movwf	??_saveDataToFlash
  1902  013E  0838               	movf	??_saveDataToFlash,w
  1903  013F  00C3               	movwf	saveDataToFlash@value
  1904                           
  1905                           ;functions.c: 1127: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1906  0140  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1907  0141  00B8               	movwf	??_saveDataToFlash
  1908  0142  0838               	movf	??_saveDataToFlash,w
  1909  0143  00A2               	movwf	ReadMemoryAdress@var2
  1910  0144  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1911  0145  00B9               	movwf	??_saveDataToFlash+1
  1912  0146  0839               	movf	??_saveDataToFlash+1,w
  1913  0147  00A3               	movwf	ReadMemoryAdress@var1
  1914  0148  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1915  0149  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  1916                           
  1917                           ;functions.c: 1128: read_write_flash_ram(
  1918                           ;functions.c: 1129: 0,
  1919                           ;functions.c: 1130: 1,
  1920                           ;functions.c: 1131: addr3,
  1921                           ;functions.c: 1132: addr2,
  1922                           ;functions.c: 1133: addr1,
  1923                           ;functions.c: 1134: &value);
  1924  014E  3001               	movlw	1
  1925  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1926  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1927  0151  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1928  0152  3000               	movlw	0
  1929  0153  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1930  0154  0846               	movf	saveDataToFlash@addr3,w
  1931  0155  00B8               	movwf	??_saveDataToFlash
  1932  0156  0838               	movf	??_saveDataToFlash,w
  1933  0157  00A7               	movwf	read_write_flash_ram@flash_sector
  1934  0158  0845               	movf	saveDataToFlash@addr2,w
  1935  0159  00B9               	movwf	??_saveDataToFlash+1
  1936  015A  0839               	movf	??_saveDataToFlash+1,w
  1937  015B  00A8               	movwf	read_write_flash_ram@flash_page
  1938  015C  0844               	movf	saveDataToFlash@addr1,w
  1939  015D  00BA               	movwf	??_saveDataToFlash+2
  1940  015E  083A               	movf	??_saveDataToFlash+2,w
  1941  015F  00A9               	movwf	read_write_flash_ram@offset
  1942  0160  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1943  0161  00BB               	movwf	??_saveDataToFlash+3
  1944  0162  083B               	movf	??_saveDataToFlash+3,w
  1945  0163  00AA               	movwf	read_write_flash_ram@mem_ptr
  1946  0164  3000               	movlw	0
  1947  0165  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1948                           
  1949                           ;functions.c: 1135: IncreaseMemoryAdress();
  1950  016A  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1951                           
  1952                           ;functions.c: 1137: value = AnalogValue(3);
  1953  016F  3003               	movlw	3
  1954  0170  160A  118A  26EE  120A  118A  	fcall	_AnalogValue
  1955  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1956  0176  1303               	bcf	3,6	;RP1=0, select bank0
  1957  0177  00B8               	movwf	??_saveDataToFlash
  1958  0178  0838               	movf	??_saveDataToFlash,w
  1959  0179  00C3               	movwf	saveDataToFlash@value
  1960                           
  1961                           ;functions.c: 1138: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1962  017A  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1963  017B  00B8               	movwf	??_saveDataToFlash
  1964  017C  0838               	movf	??_saveDataToFlash,w
  1965  017D  00A2               	movwf	ReadMemoryAdress@var2
  1966  017E  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1967  017F  00B9               	movwf	??_saveDataToFlash+1
  1968  0180  0839               	movf	??_saveDataToFlash+1,w
  1969  0181  00A3               	movwf	ReadMemoryAdress@var1
  1970  0182  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1971  0183  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  1972                           
  1973                           ;functions.c: 1139: read_write_flash_ram(
  1974                           ;functions.c: 1140: 0,
  1975                           ;functions.c: 1141: 1,
  1976                           ;functions.c: 1142: addr3,
  1977                           ;functions.c: 1143: addr2,
  1978                           ;functions.c: 1144: addr1,
  1979                           ;functions.c: 1145: &value);
  1980  0188  3001               	movlw	1
  1981  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1982  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1983  018B  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1984  018C  3000               	movlw	0
  1985  018D  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1986  018E  0846               	movf	saveDataToFlash@addr3,w
  1987  018F  00B8               	movwf	??_saveDataToFlash
  1988  0190  0838               	movf	??_saveDataToFlash,w
  1989  0191  00A7               	movwf	read_write_flash_ram@flash_sector
  1990  0192  0845               	movf	saveDataToFlash@addr2,w
  1991  0193  00B9               	movwf	??_saveDataToFlash+1
  1992  0194  0839               	movf	??_saveDataToFlash+1,w
  1993  0195  00A8               	movwf	read_write_flash_ram@flash_page
  1994  0196  0844               	movf	saveDataToFlash@addr1,w
  1995  0197  00BA               	movwf	??_saveDataToFlash+2
  1996  0198  083A               	movf	??_saveDataToFlash+2,w
  1997  0199  00A9               	movwf	read_write_flash_ram@offset
  1998  019A  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1999  019B  00BB               	movwf	??_saveDataToFlash+3
  2000  019C  083B               	movf	??_saveDataToFlash+3,w
  2001  019D  00AA               	movwf	read_write_flash_ram@mem_ptr
  2002  019E  3000               	movlw	0
  2003  019F  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  2004                           
  2005                           ;functions.c: 1146: IncreaseMemoryAdress();
  2006  01A4  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  2007                           
  2008                           ;functions.c: 1148: value = AnalogValue(5);
  2009  01A9  3005               	movlw	5
  2010  01AA  160A  118A  26EE  120A  118A  	fcall	_AnalogValue
  2011  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  2012  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  2013  01B1  00B8               	movwf	??_saveDataToFlash
  2014  01B2  0838               	movf	??_saveDataToFlash,w
  2015  01B3  00C3               	movwf	saveDataToFlash@value
  2016                           
  2017                           ;functions.c: 1149: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2018  01B4  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2019  01B5  00B8               	movwf	??_saveDataToFlash
  2020  01B6  0838               	movf	??_saveDataToFlash,w
  2021  01B7  00A2               	movwf	ReadMemoryAdress@var2
  2022  01B8  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2023  01B9  00B9               	movwf	??_saveDataToFlash+1
  2024  01BA  0839               	movf	??_saveDataToFlash+1,w
  2025  01BB  00A3               	movwf	ReadMemoryAdress@var1
  2026  01BC  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2027  01BD  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  2028                           
  2029                           ;functions.c: 1150: read_write_flash_ram(
  2030                           ;functions.c: 1151: 0,
  2031                           ;functions.c: 1152: 1,
  2032                           ;functions.c: 1153: addr3,
  2033                           ;functions.c: 1154: addr2,
  2034                           ;functions.c: 1155: addr1,
  2035                           ;functions.c: 1156: &value);
  2036  01C2  3001               	movlw	1
  2037  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  2038  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  2039  01C5  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2040  01C6  3000               	movlw	0
  2041  01C7  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2042  01C8  0846               	movf	saveDataToFlash@addr3,w
  2043  01C9  00B8               	movwf	??_saveDataToFlash
  2044  01CA  0838               	movf	??_saveDataToFlash,w
  2045  01CB  00A7               	movwf	read_write_flash_ram@flash_sector
  2046  01CC  0845               	movf	saveDataToFlash@addr2,w
  2047  01CD  00B9               	movwf	??_saveDataToFlash+1
  2048  01CE  0839               	movf	??_saveDataToFlash+1,w
  2049  01CF  00A8               	movwf	read_write_flash_ram@flash_page
  2050  01D0  0844               	movf	saveDataToFlash@addr1,w
  2051  01D1  00BA               	movwf	??_saveDataToFlash+2
  2052  01D2  083A               	movf	??_saveDataToFlash+2,w
  2053  01D3  00A9               	movwf	read_write_flash_ram@offset
  2054  01D4  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2055  01D5  00BB               	movwf	??_saveDataToFlash+3
  2056  01D6  083B               	movf	??_saveDataToFlash+3,w
  2057  01D7  00AA               	movwf	read_write_flash_ram@mem_ptr
  2058  01D8  3000               	movlw	0
  2059  01D9  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  2060                           
  2061                           ;functions.c: 1157: IncreaseMemoryAdress();
  2062  01DE  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  2063                           
  2064                           ;functions.c: 1159: value = AnalogValue(7);
  2065  01E3  3007               	movlw	7
  2066  01E4  160A  118A  26EE  120A  118A  	fcall	_AnalogValue
  2067  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  2068  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  2069  01EB  00B8               	movwf	??_saveDataToFlash
  2070  01EC  0838               	movf	??_saveDataToFlash,w
  2071  01ED  00C3               	movwf	saveDataToFlash@value
  2072                           
  2073                           ;functions.c: 1160: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2074  01EE  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2075  01EF  00B8               	movwf	??_saveDataToFlash
  2076  01F0  0838               	movf	??_saveDataToFlash,w
  2077  01F1  00A2               	movwf	ReadMemoryAdress@var2
  2078  01F2  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2079  01F3  00B9               	movwf	??_saveDataToFlash+1
  2080  01F4  0839               	movf	??_saveDataToFlash+1,w
  2081  01F5  00A3               	movwf	ReadMemoryAdress@var1
  2082  01F6  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2083  01F7  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  2084                           
  2085                           ;functions.c: 1161: read_write_flash_ram(
  2086                           ;functions.c: 1162: 0,
  2087                           ;functions.c: 1163: 1,
  2088                           ;functions.c: 1164: addr3,
  2089                           ;functions.c: 1165: addr2,
  2090                           ;functions.c: 1166: addr1,
  2091                           ;functions.c: 1167: &value);
  2092  01FC  3001               	movlw	1
  2093  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2094  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2095  01FF  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2096  0200  3000               	movlw	0
  2097  0201  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2098  0202  0846               	movf	saveDataToFlash@addr3,w
  2099  0203  00B8               	movwf	??_saveDataToFlash
  2100  0204  0838               	movf	??_saveDataToFlash,w
  2101  0205  00A7               	movwf	read_write_flash_ram@flash_sector
  2102  0206  0845               	movf	saveDataToFlash@addr2,w
  2103  0207  00B9               	movwf	??_saveDataToFlash+1
  2104  0208  0839               	movf	??_saveDataToFlash+1,w
  2105  0209  00A8               	movwf	read_write_flash_ram@flash_page
  2106  020A  0844               	movf	saveDataToFlash@addr1,w
  2107  020B  00BA               	movwf	??_saveDataToFlash+2
  2108  020C  083A               	movf	??_saveDataToFlash+2,w
  2109  020D  00A9               	movwf	read_write_flash_ram@offset
  2110  020E  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2111  020F  00BB               	movwf	??_saveDataToFlash+3
  2112  0210  083B               	movf	??_saveDataToFlash+3,w
  2113  0211  00AA               	movwf	read_write_flash_ram@mem_ptr
  2114  0212  3000               	movlw	0
  2115  0213  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  2116                           
  2117                           ;functions.c: 1168: IncreaseMemoryAdress();
  2118  0218  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  2119                           
  2120                           ;functions.c: 1171: value = AnalogValue(6);
  2121  021D  3006               	movlw	6
  2122  021E  160A  118A  26EE  120A  118A  	fcall	_AnalogValue
  2123  0223  1283               	bcf	3,5	;RP0=0, select bank0
  2124  0224  1303               	bcf	3,6	;RP1=0, select bank0
  2125  0225  00B8               	movwf	??_saveDataToFlash
  2126  0226  0838               	movf	??_saveDataToFlash,w
  2127  0227  00C3               	movwf	saveDataToFlash@value
  2128                           
  2129                           ;functions.c: 1172: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2130  0228  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2131  0229  00B8               	movwf	??_saveDataToFlash
  2132  022A  0838               	movf	??_saveDataToFlash,w
  2133  022B  00A2               	movwf	ReadMemoryAdress@var2
  2134  022C  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2135  022D  00B9               	movwf	??_saveDataToFlash+1
  2136  022E  0839               	movf	??_saveDataToFlash+1,w
  2137  022F  00A3               	movwf	ReadMemoryAdress@var1
  2138  0230  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2139  0231  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  2140                           
  2141                           ;functions.c: 1173: read_write_flash_ram(
  2142                           ;functions.c: 1174: 0,
  2143                           ;functions.c: 1175: 1,
  2144                           ;functions.c: 1176: addr3,
  2145                           ;functions.c: 1177: addr2,
  2146                           ;functions.c: 1178: addr1,
  2147                           ;functions.c: 1179: &value);
  2148  0236  3001               	movlw	1
  2149  0237  1283               	bcf	3,5	;RP0=0, select bank0
  2150  0238  1303               	bcf	3,6	;RP1=0, select bank0
  2151  0239  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2152  023A  3000               	movlw	0
  2153  023B  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2154  023C  0846               	movf	saveDataToFlash@addr3,w
  2155  023D  00B8               	movwf	??_saveDataToFlash
  2156  023E  0838               	movf	??_saveDataToFlash,w
  2157  023F  00A7               	movwf	read_write_flash_ram@flash_sector
  2158  0240  0845               	movf	saveDataToFlash@addr2,w
  2159  0241  00B9               	movwf	??_saveDataToFlash+1
  2160  0242  0839               	movf	??_saveDataToFlash+1,w
  2161  0243  00A8               	movwf	read_write_flash_ram@flash_page
  2162  0244  0844               	movf	saveDataToFlash@addr1,w
  2163  0245  00BA               	movwf	??_saveDataToFlash+2
  2164  0246  083A               	movf	??_saveDataToFlash+2,w
  2165  0247  00A9               	movwf	read_write_flash_ram@offset
  2166  0248  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2167  0249  00BB               	movwf	??_saveDataToFlash+3
  2168  024A  083B               	movf	??_saveDataToFlash+3,w
  2169  024B  00AA               	movwf	read_write_flash_ram@mem_ptr
  2170  024C  3000               	movlw	0
  2171  024D  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  2172                           
  2173                           ;functions.c: 1180: IncreaseMemoryAdress();
  2174  0252  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  2175                           
  2176                           ;functions.c: 1183: value = AnalogValue(8);
  2177  0257  3008               	movlw	8
  2178  0258  160A  118A  26EE  120A  118A  	fcall	_AnalogValue
  2179  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2180  025E  1303               	bcf	3,6	;RP1=0, select bank0
  2181  025F  00B8               	movwf	??_saveDataToFlash
  2182  0260  0838               	movf	??_saveDataToFlash,w
  2183  0261  00C3               	movwf	saveDataToFlash@value
  2184                           
  2185                           ;functions.c: 1184: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2186  0262  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2187  0263  00B8               	movwf	??_saveDataToFlash
  2188  0264  0838               	movf	??_saveDataToFlash,w
  2189  0265  00A2               	movwf	ReadMemoryAdress@var2
  2190  0266  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2191  0267  00B9               	movwf	??_saveDataToFlash+1
  2192  0268  0839               	movf	??_saveDataToFlash+1,w
  2193  0269  00A3               	movwf	ReadMemoryAdress@var1
  2194  026A  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2195  026B  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  2196                           
  2197                           ;functions.c: 1185: read_write_flash_ram(
  2198                           ;functions.c: 1186: 0,
  2199                           ;functions.c: 1187: 1,
  2200                           ;functions.c: 1188: addr3,
  2201                           ;functions.c: 1189: addr2,
  2202                           ;functions.c: 1190: addr1,
  2203                           ;functions.c: 1191: &value);
  2204  0270  3001               	movlw	1
  2205  0271  1283               	bcf	3,5	;RP0=0, select bank0
  2206  0272  1303               	bcf	3,6	;RP1=0, select bank0
  2207  0273  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2208  0274  3000               	movlw	0
  2209  0275  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2210  0276  0846               	movf	saveDataToFlash@addr3,w
  2211  0277  00B8               	movwf	??_saveDataToFlash
  2212  0278  0838               	movf	??_saveDataToFlash,w
  2213  0279  00A7               	movwf	read_write_flash_ram@flash_sector
  2214  027A  0845               	movf	saveDataToFlash@addr2,w
  2215  027B  00B9               	movwf	??_saveDataToFlash+1
  2216  027C  0839               	movf	??_saveDataToFlash+1,w
  2217  027D  00A8               	movwf	read_write_flash_ram@flash_page
  2218  027E  0844               	movf	saveDataToFlash@addr1,w
  2219  027F  00BA               	movwf	??_saveDataToFlash+2
  2220  0280  083A               	movf	??_saveDataToFlash+2,w
  2221  0281  00A9               	movwf	read_write_flash_ram@offset
  2222  0282  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2223  0283  00BB               	movwf	??_saveDataToFlash+3
  2224  0284  083B               	movf	??_saveDataToFlash+3,w
  2225  0285  00AA               	movwf	read_write_flash_ram@mem_ptr
  2226  0286  3000               	movlw	0
  2227  0287  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  2228                           
  2229                           ;functions.c: 1192: IncreaseMemoryAdress();
  2230  028C  120A  158A  21B5   	fcall	_IncreaseMemoryAdress
  2231  028F  0008               	return
  2232  0290                     __end_of_saveDataToFlash:	
  2233                           
  2234                           	psect	text2
  2235  05C2                     __ptext2:	
  2236 ;; *************** function _ReadClock *****************
  2237 ;; Defined at:
  2238 ;;		line 49 in file "MCP79510.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;  seconds         1    wreg     PTR unsigned char 
  2241 ;;		 -> saveDataToFlash@seconds(1), 
  2242 ;;  minutes         1    4[BANK0 ] PTR unsigned char 
  2243 ;;		 -> saveDataToFlash@minutes(1), 
  2244 ;;  hour            1    5[BANK0 ] PTR unsigned char 
  2245 ;;		 -> saveDataToFlash@hours(1), 
  2246 ;;  date            1    6[BANK0 ] PTR unsigned char 
  2247 ;;		 -> saveDataToFlash@date(1), 
  2248 ;;  month           1    7[BANK0 ] PTR unsigned char 
  2249 ;;		 -> saveDataToFlash@month(1), 
  2250 ;;  year            1    8[BANK0 ] PTR unsigned char 
  2251 ;;		 -> saveDataToFlash@year(1), 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;  seconds         1   17[BANK0 ] PTR unsigned char 
  2254 ;;		 -> saveDataToFlash@seconds(1), 
  2255 ;;  date1           1   23[BANK0 ] unsigned char 
  2256 ;;  year1           1   22[BANK0 ] unsigned char 
  2257 ;;  month1          1   21[BANK0 ] unsigned char 
  2258 ;;  hour1           1   20[BANK0 ] unsigned char 
  2259 ;;  min1            1   19[BANK0 ] unsigned char 
  2260 ;;  sec1            1   18[BANK0 ] unsigned char 
  2261 ;;  year10          1   16[BANK0 ] unsigned char 
  2262 ;;  month10         1   15[BANK0 ] unsigned char 
  2263 ;;  date10          1   14[BANK0 ] unsigned char 
  2264 ;;  hour10          1   13[BANK0 ] unsigned char 
  2265 ;;  min10           1   12[BANK0 ] unsigned char 
  2266 ;;  sec10           1   11[BANK0 ] unsigned char 
  2267 ;; Return value:  Size  Location     Type
  2268 ;;                  1    wreg      void 
  2269 ;; Registers used:
  2270 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2276 ;;      Params:         0       5       0       0       0
  2277 ;;      Locals:         0      13       0       0       0
  2278 ;;      Temps:          0       2       0       0       0
  2279 ;;      Totals:         0      20       0       0       0
  2280 ;;Total ram usage:       20 bytes
  2281 ;; Hardware stack levels used:    1
  2282 ;; Hardware stack levels required when called:    4
  2283 ;; This function calls:
  2284 ;;		_ReadSPI
  2285 ;;		_WriteSPI
  2286 ;;		___bmul
  2287 ;; This function is called by:
  2288 ;;		_saveDataToFlash
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function _ReadClock
  2294  05C2                     _ReadClock:	
  2295                           
  2296                           ;incstack = 0
  2297                           ; Regs used in _ReadClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2298                           ;ReadClock@seconds stored from wreg
  2299  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  2300  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  2301  05C4  00B1               	movwf	ReadClock@seconds
  2302                           
  2303                           ;MCP79510.c: 51: unsigned char sec10, min10, hour10, date10, month10, year10, sec1, min1
      +                          , hour1, date1, month1, year1;
  2304                           ;MCP79510.c: 53: RD4 = 0;
  2305  05C5  1208               	bcf	8,4	;volatile
  2306                           
  2307                           ;MCP79510.c: 55: WriteSPI(0x13);
  2308  05C6  3013               	movlw	19
  2309  05C7  160A  118A  2591  120A  118A  	fcall	_WriteSPI
  2310                           
  2311                           ;MCP79510.c: 56: WriteSPI(0x01);
  2312  05CC  3001               	movlw	1
  2313  05CD  160A  118A  2591  120A  118A  	fcall	_WriteSPI
  2314                           
  2315                           ;MCP79510.c: 58: sec1 = ReadSPI() & 0x7F;
  2316  05D2  160A  118A  2556  120A  118A  	fcall	_ReadSPI
  2317  05D7  397F               	andlw	127
  2318  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  2319  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  2320  05DA  00A9               	movwf	??_ReadClock
  2321  05DB  0829               	movf	??_ReadClock,w
  2322  05DC  00B2               	movwf	ReadClock@sec1
  2323                           
  2324                           ;MCP79510.c: 59: min1 = ReadSPI() & 0x7F;
  2325  05DD  160A  118A  2556  120A  118A  	fcall	_ReadSPI
  2326  05E2  397F               	andlw	127
  2327  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  2328  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  2329  05E5  00A9               	movwf	??_ReadClock
  2330  05E6  0829               	movf	??_ReadClock,w
  2331  05E7  00B3               	movwf	ReadClock@min1
  2332                           
  2333                           ;MCP79510.c: 60: hour1 = ReadSPI() & 0x3F;
  2334  05E8  160A  118A  2556  120A  118A  	fcall	_ReadSPI
  2335  05ED  393F               	andlw	63
  2336  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  2337  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  2338  05F0  00A9               	movwf	??_ReadClock
  2339  05F1  0829               	movf	??_ReadClock,w
  2340  05F2  00B4               	movwf	ReadClock@hour1
  2341                           
  2342                           ;MCP79510.c: 61: date1 = ReadSPI();
  2343  05F3  160A  118A  2556  120A  118A  	fcall	_ReadSPI
  2344  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  2345  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  2346  05FA  00A9               	movwf	??_ReadClock
  2347  05FB  0829               	movf	??_ReadClock,w
  2348  05FC  00B7               	movwf	ReadClock@date1
  2349                           
  2350                           ;MCP79510.c: 62: date1 = ReadSPI() & 0x3F;
  2351  05FD  160A  118A  2556  120A  118A  	fcall	_ReadSPI
  2352  0602  393F               	andlw	63
  2353  0603  1283               	bcf	3,5	;RP0=0, select bank0
  2354  0604  1303               	bcf	3,6	;RP1=0, select bank0
  2355  0605  00A9               	movwf	??_ReadClock
  2356  0606  0829               	movf	??_ReadClock,w
  2357  0607  00B7               	movwf	ReadClock@date1
  2358                           
  2359                           ;MCP79510.c: 63: month1 = ReadSPI() & 0x1F;
  2360  0608  160A  118A  2556  120A  118A  	fcall	_ReadSPI
  2361  060D  391F               	andlw	31
  2362  060E  1283               	bcf	3,5	;RP0=0, select bank0
  2363  060F  1303               	bcf	3,6	;RP1=0, select bank0
  2364  0610  00A9               	movwf	??_ReadClock
  2365  0611  0829               	movf	??_ReadClock,w
  2366  0612  00B5               	movwf	ReadClock@month1
  2367                           
  2368                           ;MCP79510.c: 64: year1 = ReadSPI();
  2369  0613  160A  118A  2556  120A  118A  	fcall	_ReadSPI
  2370  0618  1283               	bcf	3,5	;RP0=0, select bank0
  2371  0619  1303               	bcf	3,6	;RP1=0, select bank0
  2372  061A  00A9               	movwf	??_ReadClock
  2373  061B  0829               	movf	??_ReadClock,w
  2374  061C  00B6               	movwf	ReadClock@year1
  2375                           
  2376                           ;MCP79510.c: 66: RD4 = 1;
  2377  061D  1608               	bsf	8,4	;volatile
  2378                           
  2379                           ;MCP79510.c: 69: sec10 = (sec1 & 0x70) >> 4;
  2380  061E  0832               	movf	ReadClock@sec1,w
  2381  061F  00A9               	movwf	??_ReadClock
  2382  0620  3004               	movlw	4
  2383  0621                     u2135:	
  2384  0621  1003               	clrc
  2385  0622  0CA9               	rrf	??_ReadClock,f
  2386  0623  3EFF               	addlw	-1
  2387  0624  1D03               	skipz
  2388  0625  2E21               	goto	u2135
  2389  0626  0829               	movf	??_ReadClock,w
  2390  0627  3907               	andlw	7
  2391  0628  00AA               	movwf	??_ReadClock+1
  2392  0629  082A               	movf	??_ReadClock+1,w
  2393  062A  00AB               	movwf	ReadClock@sec10
  2394                           
  2395                           ;MCP79510.c: 70: sec1 = sec1 & 0x0F;
  2396  062B  0832               	movf	ReadClock@sec1,w
  2397  062C  390F               	andlw	15
  2398  062D  00A9               	movwf	??_ReadClock
  2399  062E  0829               	movf	??_ReadClock,w
  2400  062F  00B2               	movwf	ReadClock@sec1
  2401                           
  2402                           ;MCP79510.c: 71: *seconds = sec1 + sec10 * 10;
  2403  0630  300A               	movlw	10
  2404  0631  00A9               	movwf	??_ReadClock
  2405  0632  0829               	movf	??_ReadClock,w
  2406  0633  00A0               	movwf	___bmul@multiplicand
  2407  0634  082B               	movf	ReadClock@sec10,w
  2408  0635  160A  118A  25D3  120A  118A  	fcall	___bmul
  2409  063A  1283               	bcf	3,5	;RP0=0, select bank0
  2410  063B  1303               	bcf	3,6	;RP1=0, select bank0
  2411  063C  0732               	addwf	ReadClock@sec1,w
  2412  063D  00AA               	movwf	??_ReadClock+1
  2413  063E  0831               	movf	ReadClock@seconds,w
  2414  063F  0084               	movwf	4
  2415  0640  082A               	movf	??_ReadClock+1,w
  2416  0641  1383               	bcf	3,7	;select IRP bank0
  2417  0642  0080               	movwf	0
  2418                           
  2419                           ;MCP79510.c: 73: min10 = (min1 & 0x70) >> 4;
  2420  0643  0833               	movf	ReadClock@min1,w
  2421  0644  00A9               	movwf	??_ReadClock
  2422  0645  3004               	movlw	4
  2423  0646                     u2145:	
  2424  0646  1003               	clrc
  2425  0647  0CA9               	rrf	??_ReadClock,f
  2426  0648  3EFF               	addlw	-1
  2427  0649  1D03               	skipz
  2428  064A  2E46               	goto	u2145
  2429  064B  0829               	movf	??_ReadClock,w
  2430  064C  3907               	andlw	7
  2431  064D  00AA               	movwf	??_ReadClock+1
  2432  064E  082A               	movf	??_ReadClock+1,w
  2433  064F  00AC               	movwf	ReadClock@min10
  2434                           
  2435                           ;MCP79510.c: 74: min1 = min1 & 0x0F;
  2436  0650  0833               	movf	ReadClock@min1,w
  2437  0651  390F               	andlw	15
  2438  0652  00A9               	movwf	??_ReadClock
  2439  0653  0829               	movf	??_ReadClock,w
  2440  0654  00B3               	movwf	ReadClock@min1
  2441                           
  2442                           ;MCP79510.c: 75: *minutes = min1 + min10 * 10;
  2443  0655  300A               	movlw	10
  2444  0656  00A9               	movwf	??_ReadClock
  2445  0657  0829               	movf	??_ReadClock,w
  2446  0658  00A0               	movwf	___bmul@multiplicand
  2447  0659  082C               	movf	ReadClock@min10,w
  2448  065A  160A  118A  25D3  120A  118A  	fcall	___bmul
  2449  065F  1283               	bcf	3,5	;RP0=0, select bank0
  2450  0660  1303               	bcf	3,6	;RP1=0, select bank0
  2451  0661  0733               	addwf	ReadClock@min1,w
  2452  0662  00AA               	movwf	??_ReadClock+1
  2453  0663  0824               	movf	ReadClock@minutes,w
  2454  0664  0084               	movwf	4
  2455  0665  082A               	movf	??_ReadClock+1,w
  2456  0666  1383               	bcf	3,7	;select IRP bank0
  2457  0667  0080               	movwf	0
  2458                           
  2459                           ;MCP79510.c: 77: hour10 = (hour1 & 0x30) >> 4;
  2460  0668  0834               	movf	ReadClock@hour1,w
  2461  0669  00A9               	movwf	??_ReadClock
  2462  066A  3004               	movlw	4
  2463  066B                     u2155:	
  2464  066B  1003               	clrc
  2465  066C  0CA9               	rrf	??_ReadClock,f
  2466  066D  3EFF               	addlw	-1
  2467  066E  1D03               	skipz
  2468  066F  2E6B               	goto	u2155
  2469  0670  0829               	movf	??_ReadClock,w
  2470  0671  3903               	andlw	3
  2471  0672  00AA               	movwf	??_ReadClock+1
  2472  0673  082A               	movf	??_ReadClock+1,w
  2473  0674  00AD               	movwf	ReadClock@hour10
  2474                           
  2475                           ;MCP79510.c: 78: hour1 = hour1 & 0x0F;
  2476  0675  0834               	movf	ReadClock@hour1,w
  2477  0676  390F               	andlw	15
  2478  0677  00A9               	movwf	??_ReadClock
  2479  0678  0829               	movf	??_ReadClock,w
  2480  0679  00B4               	movwf	ReadClock@hour1
  2481                           
  2482                           ;MCP79510.c: 79: *hour = hour1 + hour10 * 10;
  2483  067A  300A               	movlw	10
  2484  067B  00A9               	movwf	??_ReadClock
  2485  067C  0829               	movf	??_ReadClock,w
  2486  067D  00A0               	movwf	___bmul@multiplicand
  2487  067E  082D               	movf	ReadClock@hour10,w
  2488  067F  160A  118A  25D3  120A  118A  	fcall	___bmul
  2489  0684  1283               	bcf	3,5	;RP0=0, select bank0
  2490  0685  1303               	bcf	3,6	;RP1=0, select bank0
  2491  0686  0734               	addwf	ReadClock@hour1,w
  2492  0687  00AA               	movwf	??_ReadClock+1
  2493  0688  0825               	movf	ReadClock@hour,w
  2494  0689  0084               	movwf	4
  2495  068A  082A               	movf	??_ReadClock+1,w
  2496  068B  1383               	bcf	3,7	;select IRP bank0
  2497  068C  0080               	movwf	0
  2498                           
  2499                           ;MCP79510.c: 81: date10 = (date1 & 0x30) >> 4;
  2500  068D  0837               	movf	ReadClock@date1,w
  2501  068E  00A9               	movwf	??_ReadClock
  2502  068F  3004               	movlw	4
  2503  0690                     u2165:	
  2504  0690  1003               	clrc
  2505  0691  0CA9               	rrf	??_ReadClock,f
  2506  0692  3EFF               	addlw	-1
  2507  0693  1D03               	skipz
  2508  0694  2E90               	goto	u2165
  2509  0695  0829               	movf	??_ReadClock,w
  2510  0696  3903               	andlw	3
  2511  0697  00AA               	movwf	??_ReadClock+1
  2512  0698  082A               	movf	??_ReadClock+1,w
  2513  0699  00AE               	movwf	ReadClock@date10
  2514                           
  2515                           ;MCP79510.c: 82: date1 = date1 & 0x0F;
  2516  069A  0837               	movf	ReadClock@date1,w
  2517  069B  390F               	andlw	15
  2518  069C  00A9               	movwf	??_ReadClock
  2519  069D  0829               	movf	??_ReadClock,w
  2520  069E  00B7               	movwf	ReadClock@date1
  2521                           
  2522                           ;MCP79510.c: 83: *date = date1 + date10 * 10;
  2523  069F  300A               	movlw	10
  2524  06A0  00A9               	movwf	??_ReadClock
  2525  06A1  0829               	movf	??_ReadClock,w
  2526  06A2  00A0               	movwf	___bmul@multiplicand
  2527  06A3  082E               	movf	ReadClock@date10,w
  2528  06A4  160A  118A  25D3  120A  118A  	fcall	___bmul
  2529  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  2530  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  2531  06AB  0737               	addwf	ReadClock@date1,w
  2532  06AC  00AA               	movwf	??_ReadClock+1
  2533  06AD  0826               	movf	ReadClock@date,w
  2534  06AE  0084               	movwf	4
  2535  06AF  082A               	movf	??_ReadClock+1,w
  2536  06B0  1383               	bcf	3,7	;select IRP bank0
  2537  06B1  0080               	movwf	0
  2538                           
  2539                           ;MCP79510.c: 85: month10 = (month1 & 0x10) >> 4;
  2540  06B2  0835               	movf	ReadClock@month1,w
  2541  06B3  00A9               	movwf	??_ReadClock
  2542  06B4  3004               	movlw	4
  2543  06B5                     u2175:	
  2544  06B5  1003               	clrc
  2545  06B6  0CA9               	rrf	??_ReadClock,f
  2546  06B7  3EFF               	addlw	-1
  2547  06B8  1D03               	skipz
  2548  06B9  2EB5               	goto	u2175
  2549  06BA  0829               	movf	??_ReadClock,w
  2550  06BB  3901               	andlw	1
  2551  06BC  00AA               	movwf	??_ReadClock+1
  2552  06BD  082A               	movf	??_ReadClock+1,w
  2553  06BE  00AF               	movwf	ReadClock@month10
  2554                           
  2555                           ;MCP79510.c: 86: month1 = month1 & 0x0F;
  2556  06BF  0835               	movf	ReadClock@month1,w
  2557  06C0  390F               	andlw	15
  2558  06C1  00A9               	movwf	??_ReadClock
  2559  06C2  0829               	movf	??_ReadClock,w
  2560  06C3  00B5               	movwf	ReadClock@month1
  2561                           
  2562                           ;MCP79510.c: 87: *month = month1 + month10 * 10;
  2563  06C4  300A               	movlw	10
  2564  06C5  00A9               	movwf	??_ReadClock
  2565  06C6  0829               	movf	??_ReadClock,w
  2566  06C7  00A0               	movwf	___bmul@multiplicand
  2567  06C8  082F               	movf	ReadClock@month10,w
  2568  06C9  160A  118A  25D3  120A  118A  	fcall	___bmul
  2569  06CE  1283               	bcf	3,5	;RP0=0, select bank0
  2570  06CF  1303               	bcf	3,6	;RP1=0, select bank0
  2571  06D0  0735               	addwf	ReadClock@month1,w
  2572  06D1  00AA               	movwf	??_ReadClock+1
  2573  06D2  0827               	movf	ReadClock@month,w
  2574  06D3  0084               	movwf	4
  2575  06D4  082A               	movf	??_ReadClock+1,w
  2576  06D5  1383               	bcf	3,7	;select IRP bank0
  2577  06D6  0080               	movwf	0
  2578                           
  2579                           ;MCP79510.c: 89: year10 = (year1 & 0xF0) >> 4;
  2580  06D7  0836               	movf	ReadClock@year1,w
  2581  06D8  00A9               	movwf	??_ReadClock
  2582  06D9  3004               	movlw	4
  2583  06DA                     u2185:	
  2584  06DA  1003               	clrc
  2585  06DB  0CA9               	rrf	??_ReadClock,f
  2586  06DC  3EFF               	addlw	-1
  2587  06DD  1D03               	skipz
  2588  06DE  2EDA               	goto	u2185
  2589  06DF  0829               	movf	??_ReadClock,w
  2590  06E0  390F               	andlw	15
  2591  06E1  00AA               	movwf	??_ReadClock+1
  2592  06E2  082A               	movf	??_ReadClock+1,w
  2593  06E3  00B0               	movwf	ReadClock@year10
  2594                           
  2595                           ;MCP79510.c: 90: year1 = year1 & 0x0F;
  2596  06E4  0836               	movf	ReadClock@year1,w
  2597  06E5  390F               	andlw	15
  2598  06E6  00A9               	movwf	??_ReadClock
  2599  06E7  0829               	movf	??_ReadClock,w
  2600  06E8  00B6               	movwf	ReadClock@year1
  2601                           
  2602                           ;MCP79510.c: 91: *year = year1 + year10 * 10;
  2603  06E9  300A               	movlw	10
  2604  06EA  00A9               	movwf	??_ReadClock
  2605  06EB  0829               	movf	??_ReadClock,w
  2606  06EC  00A0               	movwf	___bmul@multiplicand
  2607  06ED  0830               	movf	ReadClock@year10,w
  2608  06EE  160A  118A  25D3   	fcall	___bmul
  2609  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  2610  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  2611  06F3  0736               	addwf	ReadClock@year1,w
  2612  06F4  00AA               	movwf	??_ReadClock+1
  2613  06F5  0828               	movf	ReadClock@year,w
  2614  06F6  0084               	movwf	4
  2615  06F7  082A               	movf	??_ReadClock+1,w
  2616  06F8  1383               	bcf	3,7	;select IRP bank0
  2617  06F9  0080               	movwf	0
  2618  06FA  0008               	return
  2619  06FB                     __end_of_ReadClock:	
  2620                           
  2621                           	psect	text3
  2622  15D3                     __ptext3:	
  2623 ;; *************** function ___bmul *****************
  2624 ;; Defined at:
  2625 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;  multiplier      1    wreg     unsigned char 
  2628 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2631 ;;  product         1    2[BANK0 ] unsigned char 
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  1    wreg      unsigned char 
  2634 ;; Registers used:
  2635 ;;		wreg, status,2, status,0
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2641 ;;      Params:         0       1       0       0       0
  2642 ;;      Locals:         0       2       0       0       0
  2643 ;;      Temps:          0       1       0       0       0
  2644 ;;      Totals:         0       4       0       0       0
  2645 ;;Total ram usage:        4 bytes
  2646 ;; Hardware stack levels used:    1
  2647 ;; Hardware stack levels required when called:    2
  2648 ;; This function calls:
  2649 ;;		Nothing
  2650 ;; This function is called by:
  2651 ;;		_ReadClock
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           
  2656                           ;psect for function ___bmul
  2657  15D3                     ___bmul:	
  2658                           
  2659                           ;incstack = 0
  2660                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2661                           ;___bmul@multiplier stored from wreg
  2662  15D3  1283               	bcf	3,5	;RP0=0, select bank0
  2663  15D4  1303               	bcf	3,6	;RP1=0, select bank0
  2664  15D5  00A3               	movwf	___bmul@multiplier
  2665  15D6  01A2               	clrf	___bmul@product
  2666  15D7                     l2760:	
  2667  15D7  1C23               	btfss	___bmul@multiplier,0
  2668  15D8  2DDD               	goto	l2764
  2669  15D9  0820               	movf	___bmul@multiplicand,w
  2670  15DA  00A1               	movwf	??___bmul
  2671  15DB  0821               	movf	??___bmul,w
  2672  15DC  07A2               	addwf	___bmul@product,f
  2673  15DD                     l2764:	
  2674  15DD  1003               	clrc
  2675  15DE  0DA0               	rlf	___bmul@multiplicand,f
  2676  15DF  1003               	clrc
  2677  15E0  0CA3               	rrf	___bmul@multiplier,f
  2678  15E1  0823               	movf	___bmul@multiplier,w
  2679  15E2  1D03               	btfss	3,2
  2680  15E3  2DD7               	goto	l2760
  2681  15E4  0822               	movf	___bmul@product,w
  2682  15E5  0008               	return
  2683  15E6                     __end_of___bmul:	
  2684                           
  2685                           	psect	text4
  2686  09B5                     __ptext4:	
  2687 ;; *************** function _IncreaseMemoryAdress *****************
  2688 ;; Defined at:
  2689 ;;		line 1013 in file "functions.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;		None
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  var3            1    6[BANK0 ] unsigned char 
  2694 ;;  var2            1    5[BANK0 ] unsigned char 
  2695 ;;  var1            1    4[BANK0 ] unsigned char 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2, status,0, pclath, cstack
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2705 ;;      Params:         0       0       0       0       0
  2706 ;;      Locals:         0       3       0       0       0
  2707 ;;      Temps:          0       1       0       0       0
  2708 ;;      Totals:         0       4       0       0       0
  2709 ;;Total ram usage:        4 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    3
  2712 ;; This function calls:
  2713 ;;		_eeprom_read
  2714 ;;		_eeprom_write
  2715 ;; This function is called by:
  2716 ;;		_saveDataToFlash
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           
  2721                           ;psect for function _IncreaseMemoryAdress
  2722  09B5                     _IncreaseMemoryAdress:	
  2723                           
  2724                           ;functions.c: 1015: unsigned char var1, var2, var3;
  2725                           ;functions.c: 1016: var1 = eeprom_read(3);
  2726                           
  2727                           ;incstack = 0
  2728                           ; Regs used in _IncreaseMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  2729  09B5  3003               	movlw	3
  2730  09B6  160A  118A  26A3  120A  158A  	fcall	_eeprom_read
  2731  09BB  1283               	bcf	3,5	;RP0=0, select bank0
  2732  09BC  1303               	bcf	3,6	;RP1=0, select bank0
  2733  09BD  00A3               	movwf	??_IncreaseMemoryAdress
  2734  09BE  0823               	movf	??_IncreaseMemoryAdress,w
  2735  09BF  00A4               	movwf	IncreaseMemoryAdress@var1
  2736                           
  2737                           ;functions.c: 1017: var1++;
  2738  09C0  3001               	movlw	1
  2739  09C1  00A3               	movwf	??_IncreaseMemoryAdress
  2740  09C2  0823               	movf	??_IncreaseMemoryAdress,w
  2741  09C3  07A4               	addwf	IncreaseMemoryAdress@var1,f
  2742                           
  2743                           ;functions.c: 1018: eeprom_write(3,var1);
  2744  09C4  0824               	movf	IncreaseMemoryAdress@var1,w
  2745  09C5  00A3               	movwf	??_IncreaseMemoryAdress
  2746  09C6  0823               	movf	??_IncreaseMemoryAdress,w
  2747  09C7  00A0               	movwf	eeprom_write@value
  2748  09C8  3003               	movlw	3
  2749  09C9  160A  118A  279D  120A  158A  	fcall	_eeprom_write
  2750                           
  2751                           ;functions.c: 1019: if(var1 == 0)
  2752  09CE  1283               	bcf	3,5	;RP0=0, select bank0
  2753  09CF  1303               	bcf	3,6	;RP1=0, select bank0
  2754  09D0  0824               	movf	IncreaseMemoryAdress@var1,w
  2755  09D1  1D03               	btfss	3,2
  2756  09D2  0008               	return
  2757                           
  2758                           ;functions.c: 1020: {
  2759                           ;functions.c: 1021: var2 = eeprom_read(2);
  2760  09D3  3002               	movlw	2
  2761  09D4  160A  118A  26A3  120A  158A  	fcall	_eeprom_read
  2762  09D9  1283               	bcf	3,5	;RP0=0, select bank0
  2763  09DA  1303               	bcf	3,6	;RP1=0, select bank0
  2764  09DB  00A3               	movwf	??_IncreaseMemoryAdress
  2765  09DC  0823               	movf	??_IncreaseMemoryAdress,w
  2766  09DD  00A5               	movwf	IncreaseMemoryAdress@var2
  2767                           
  2768                           ;functions.c: 1022: var2++;
  2769  09DE  3001               	movlw	1
  2770  09DF  00A3               	movwf	??_IncreaseMemoryAdress
  2771  09E0  0823               	movf	??_IncreaseMemoryAdress,w
  2772  09E1  07A5               	addwf	IncreaseMemoryAdress@var2,f
  2773                           
  2774                           ;functions.c: 1023: eeprom_write(2,var2);
  2775  09E2  0825               	movf	IncreaseMemoryAdress@var2,w
  2776  09E3  00A3               	movwf	??_IncreaseMemoryAdress
  2777  09E4  0823               	movf	??_IncreaseMemoryAdress,w
  2778  09E5  00A0               	movwf	eeprom_write@value
  2779  09E6  3002               	movlw	2
  2780  09E7  160A  118A  279D  120A  158A  	fcall	_eeprom_write
  2781                           
  2782                           ;functions.c: 1024: if(var2 == 0)
  2783  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  2784  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  2785  09EE  0825               	movf	IncreaseMemoryAdress@var2,w
  2786  09EF  1D03               	btfss	3,2
  2787  09F0  0008               	return
  2788                           
  2789                           ;functions.c: 1025: {
  2790                           ;functions.c: 1026: var3 = eeprom_read(1);
  2791  09F1  3001               	movlw	1
  2792  09F2  160A  118A  26A3  120A  158A  	fcall	_eeprom_read
  2793  09F7  1283               	bcf	3,5	;RP0=0, select bank0
  2794  09F8  1303               	bcf	3,6	;RP1=0, select bank0
  2795  09F9  00A3               	movwf	??_IncreaseMemoryAdress
  2796  09FA  0823               	movf	??_IncreaseMemoryAdress,w
  2797  09FB  00A6               	movwf	IncreaseMemoryAdress@var3
  2798                           
  2799                           ;functions.c: 1027: var3++;
  2800  09FC  3001               	movlw	1
  2801  09FD  00A3               	movwf	??_IncreaseMemoryAdress
  2802  09FE  0823               	movf	??_IncreaseMemoryAdress,w
  2803  09FF  07A6               	addwf	IncreaseMemoryAdress@var3,f
  2804                           
  2805                           ;functions.c: 1028: if(var3 > 0x1F)
  2806  0A00  3020               	movlw	32
  2807  0A01  0226               	subwf	IncreaseMemoryAdress@var3,w
  2808  0A02  1C03               	skipc
  2809  0A03  2A08               	goto	l2958
  2810                           
  2811                           ;functions.c: 1029: var3 = 0x1F;
  2812  0A04  301F               	movlw	31
  2813  0A05  00A3               	movwf	??_IncreaseMemoryAdress
  2814  0A06  0823               	movf	??_IncreaseMemoryAdress,w
  2815  0A07  00A6               	movwf	IncreaseMemoryAdress@var3
  2816  0A08                     l2958:	
  2817                           
  2818                           ;functions.c: 1031: eeprom_write(1, var3);
  2819  0A08  0826               	movf	IncreaseMemoryAdress@var3,w
  2820  0A09  00A3               	movwf	??_IncreaseMemoryAdress
  2821  0A0A  0823               	movf	??_IncreaseMemoryAdress,w
  2822  0A0B  00A0               	movwf	eeprom_write@value
  2823  0A0C  3001               	movlw	1
  2824  0A0D  160A  118A  279D   	fcall	_eeprom_write
  2825  0A10  0008               	return
  2826  0A11                     __end_of_IncreaseMemoryAdress:	
  2827                           
  2828                           	psect	text5
  2829  0A11                     __ptext5:	
  2830 ;; *************** function _TransiverToReceive *****************
  2831 ;; Defined at:
  2832 ;;		line 16 in file "functions.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;		None
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;		None
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2846 ;;      Params:         0       0       0       0       0
  2847 ;;      Locals:         0       0       0       0       0
  2848 ;;      Temps:          0       2       0       0       0
  2849 ;;      Totals:         0       2       0       0       0
  2850 ;;Total ram usage:        2 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    7
  2853 ;; This function calls:
  2854 ;;		_FindChannel
  2855 ;;		_RegisterRead
  2856 ;;		_RegisterSet
  2857 ;;		_SetRFMode
  2858 ;;		_timerFunction
  2859 ;; This function is called by:
  2860 ;;		_main
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           
  2865                           ;psect for function _TransiverToReceive
  2866  0A11                     _TransiverToReceive:	
  2867                           
  2868                           ;functions.c: 18: timerFunction(2, 5);
  2869                           
  2870                           ;incstack = 0
  2871                           ; Regs used in _TransiverToReceive: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2872  0A11  3002               	movlw	2
  2873  0A12  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0A13  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0A14  00A0               	movwf	timerFunction@intTimerNumber
  2876  0A15  3000               	movlw	0
  2877  0A16  00A1               	movwf	timerFunction@intTimerNumber+1
  2878  0A17  3005               	movlw	5
  2879  0A18  00A2               	movwf	timerFunction@intSetSeconds
  2880  0A19  3000               	movlw	0
  2881  0A1A  00A3               	movwf	timerFunction@intSetSeconds+1
  2882  0A1B  160A  118A  25AF  120A  158A  	fcall	_timerFunction
  2883                           
  2884                           ;functions.c: 22: SetRFMode(0x20);
  2885  0A20  3020               	movlw	32
  2886  0A21  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  2887                           
  2888                           ;functions.c: 23: _delay((unsigned long)((10)*(4000000/4000.0)));
  2889  0A26  300D               	movlw	13
  2890  0A27  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0A28  1303               	bcf	3,6	;RP1=0, select bank0
  2892  0A29  00B6               	movwf	??_TransiverToReceive+1
  2893  0A2A  30FB               	movlw	251
  2894  0A2B  00B5               	movwf	??_TransiverToReceive
  2895  0A2C                     u2717:	
  2896  0A2C  0BB5               	decfsz	??_TransiverToReceive,f
  2897  0A2D  2A2C               	goto	u2717
  2898  0A2E  0BB6               	decfsz	??_TransiverToReceive+1,f
  2899  0A2F  2A2C               	goto	u2717
  2900  0A30  2A31               	nop2
  2901                           
  2902                           ;functions.c: 24: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  2903  0A31  300E               	movlw	14
  2904  0A32  120A  158A  2040  120A  158A  	fcall	_RegisterRead
  2905  0A37  3802               	iorlw	2
  2906  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  2907  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  2908  0A3A  00B5               	movwf	??_TransiverToReceive
  2909  0A3B  0835               	movf	??_TransiverToReceive,w
  2910  0A3C  00A7               	movwf	RegisterSet@value
  2911  0A3D  300E               	movlw	14
  2912  0A3E  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  2913                           
  2914                           ;functions.c: 25: SetRFMode(0x40);
  2915  0A43  3040               	movlw	64
  2916  0A44  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  2917  0A49                     l3188:	
  2918                           ;functions.c: 26: while((RegisterRead(0x0E) & 0b00000010) == 0)
  2919                           
  2920  0A49  300E               	movlw	14
  2921  0A4A  120A  158A  2040  120A  158A  	fcall	_RegisterRead
  2922  0A4F  3902               	andlw	2
  2923  0A50  1D03               	btfss	3,2
  2924  0A51  2A5C               	goto	l3190
  2925                           
  2926                           ;functions.c: 27: {
  2927                           ;functions.c: 28: if(bTimerComplete[2])
  2928  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  2929  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  2930  0A54  0858               	movf	_bTimerComplete+2,w
  2931  0A55  1903               	btfsc	3,2
  2932  0A56  2A49               	goto	l3188
  2933                           
  2934                           ;functions.c: 29: {
  2935                           ;functions.c: 30: FindChannel();
  2936  0A57  120A  118A  26FB  120A  158A  	fcall	_FindChannel
  2937  0A5C                     l3190:	
  2938                           ;functions.c: 31: break;
  2939                           
  2940                           
  2941                           ;functions.c: 32: }
  2942                           ;functions.c: 33: }
  2943                           ;functions.c: 35: SetRFMode(0x60);
  2944  0A5C  3060               	movlw	96
  2945  0A5D  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  2946                           
  2947                           ;functions.c: 36: _delay((unsigned long)((500)*(4000000/4000000.0)));
  2948  0A62  30A6               	movlw	166
  2949  0A63  1283               	bcf	3,5	;RP0=0, select bank0
  2950  0A64  1303               	bcf	3,6	;RP1=0, select bank0
  2951  0A65  00B5               	movwf	??_TransiverToReceive
  2952  0A66                     u2727:	
  2953  0A66  0BB5               	decfsz	??_TransiverToReceive,f
  2954  0A67  2A66               	goto	u2727
  2955  0A68  0000               	nop
  2956                           
  2957                           ;functions.c: 37: bTransiverModeReceive = 1;
  2958  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  2959  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  2960  0A6B  01EA               	clrf	_bTransiverModeReceive
  2961  0A6C  0AEA               	incf	_bTransiverModeReceive,f
  2962  0A6D  0008               	return
  2963  0A6E                     __end_of_TransiverToReceive:	
  2964                           
  2965                           	psect	text6
  2966  0AD2                     __ptext6:	
  2967 ;; *************** function _TransiverReadFIFO *****************
  2968 ;; Defined at:
  2969 ;;		line 42 in file "functions.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  j               2   32[BANK1 ] int 
  2974 ;;  ReceivedStri   30    0[BANK1 ] unsigned char [30]
  2975 ;;  i               2   30[BANK1 ] int 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2985 ;;      Params:         0       0       0       0       0
  2986 ;;      Locals:         0       0      34       0       0
  2987 ;;      Temps:          0       2       0       0       0
  2988 ;;      Totals:         0       2      34       0       0
  2989 ;;Total ram usage:       36 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:   10
  2992 ;; This function calls:
  2993 ;;		_ReadFIFO
  2994 ;;		_ReceivedPacketHandler
  2995 ;;		_SetRFMode
  2996 ;;		_timerFunction
  2997 ;; This function is called by:
  2998 ;;		_main
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           
  3003                           ;psect for function _TransiverReadFIFO
  3004  0AD2                     _TransiverReadFIFO:	
  3005                           
  3006                           ;functions.c: 44: unsigned char ReceivedString[30];
  3007                           ;functions.c: 45: timerFunction(3, 5);
  3008                           
  3009                           ;incstack = 0
  3010 ;; hardware stack exceeded
  3011                           ; Regs used in _TransiverReadFIFO: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3012  0AD2  3003               	movlw	3
  3013  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  3014  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  3015  0AD5  00A0               	movwf	timerFunction@intTimerNumber
  3016  0AD6  3000               	movlw	0
  3017  0AD7  00A1               	movwf	timerFunction@intTimerNumber+1
  3018  0AD8  3005               	movlw	5
  3019  0AD9  00A2               	movwf	timerFunction@intSetSeconds
  3020  0ADA  3000               	movlw	0
  3021  0ADB  00A3               	movwf	timerFunction@intSetSeconds+1
  3022  0ADC  160A  118A  25AF  120A  158A  	fcall	_timerFunction
  3023                           
  3024                           ;functions.c: 47: SetRFMode(0x20);
  3025  0AE1  3020               	movlw	32
  3026  0AE2  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  3027                           
  3028                           ;functions.c: 48: bTransiverModeReceive = 0;
  3029  0AE7  1283               	bcf	3,5	;RP0=0, select bank0
  3030  0AE8  1303               	bcf	3,6	;RP1=0, select bank0
  3031  0AE9  01EA               	clrf	_bTransiverModeReceive
  3032                           
  3033                           ;functions.c: 49: int i = 0;
  3034  0AEA  1683               	bsf	3,5	;RP0=1, select bank1
  3035  0AEB  1303               	bcf	3,6	;RP1=0, select bank1
  3036  0AEC  01BE               	clrf	TransiverReadFIFO@i^(0+128)
  3037  0AED  01BF               	clrf	(TransiverReadFIFO@i+1)^(0+128)
  3038                           
  3039                           ;functions.c: 50: for (int j = 0; j < 30; ++j)
  3040  0AEE  01C0               	clrf	TransiverReadFIFO@j^(0+128)
  3041  0AEF  01C1               	clrf	(TransiverReadFIFO@j+1)^(0+128)
  3042  0AF0                     L1:	
  3043  0AF0  0841               	movf	(TransiverReadFIFO@j+1)^(0+128),w
  3044  0AF1  3A80               	xorlw	128
  3045  0AF2  00FF               	movwf	127
  3046  0AF3  3080               	movlw	128
  3047  0AF4  027F               	subwf	127,w
  3048  0AF5  1D03               	skipz
  3049  0AF6  2AF9               	goto	u2335
  3050  0AF7  301E               	movlw	30
  3051  0AF8  0240               	subwf	TransiverReadFIFO@j^(0+128),w
  3052  0AF9                     u2335:	
  3053  0AF9  1803               	btfsc	3,0
  3054  0AFA  2B23               	goto	l3218
  3055                           
  3056                           ;functions.c: 51: {
  3057                           ;functions.c: 52: ReceivedString[j] = 0;
  3058  0AFB  1683               	bsf	3,5	;RP0=1, select bank1
  3059  0AFC  1303               	bcf	3,6	;RP1=0, select bank1
  3060  0AFD  0840               	movf	TransiverReadFIFO@j^(0+128),w
  3061  0AFE  3EA0               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3062  0AFF  0084               	movwf	4
  3063  0B00  1383               	bcf	3,7	;select IRP bank1
  3064  0B01  0180               	clrf	0
  3065  0B02  3001               	movlw	1
  3066  0B03  07C0               	addwf	TransiverReadFIFO@j^(0+128),f
  3067  0B04  1803               	skipnc
  3068  0B05  0AC1               	incf	(TransiverReadFIFO@j+1)^(0+128),f
  3069  0B06  3000               	movlw	0
  3070  0B07  07C1               	addwf	(TransiverReadFIFO@j+1)^(0+128),f
  3071  0B08  2AF0               	goto	L1
  3072  0B09                     l3214:	
  3073                           ;functions.c: 53: }
  3074                           ;functions.c: 54: while((RB3)&&(!bTimerComplete[3]))
  3075                           
  3076                           
  3077                           ;functions.c: 55: {
  3078                           ;functions.c: 56: ReceivedString[i] = ReadFIFO();
  3079  0B09  120A  118A  27F1  120A  158A  	fcall	_ReadFIFO
  3080  0B0E  1283               	bcf	3,5	;RP0=0, select bank0
  3081  0B0F  1303               	bcf	3,6	;RP1=0, select bank0
  3082  0B10  00D1               	movwf	??_TransiverReadFIFO
  3083  0B11  1683               	bsf	3,5	;RP0=1, select bank1
  3084  0B12  1303               	bcf	3,6	;RP1=0, select bank1
  3085  0B13  083E               	movf	TransiverReadFIFO@i^(0+128),w
  3086  0B14  3EA0               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3087  0B15  0084               	movwf	4
  3088  0B16  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0B17  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0B18  0851               	movf	??_TransiverReadFIFO,w
  3091  0B19  1383               	bcf	3,7	;select IRP bank1
  3092  0B1A  0080               	movwf	0
  3093                           
  3094                           ;functions.c: 57: i++;
  3095  0B1B  3001               	movlw	1
  3096  0B1C  1683               	bsf	3,5	;RP0=1, select bank1
  3097  0B1D  1303               	bcf	3,6	;RP1=0, select bank1
  3098  0B1E  07BE               	addwf	TransiverReadFIFO@i^(0+128),f
  3099  0B1F  1803               	skipnc
  3100  0B20  0ABF               	incf	(TransiverReadFIFO@i+1)^(0+128),f
  3101  0B21  3000               	movlw	0
  3102  0B22  07BF               	addwf	(TransiverReadFIFO@i+1)^(0+128),f
  3103  0B23                     l3218:	
  3104  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  3105  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  3106  0B25  1D86               	btfss	6,3	;volatile
  3107  0B26  2B2A               	goto	l3222
  3108  0B27  0859               	movf	_bTimerComplete+3,w
  3109  0B28  1903               	btfsc	3,2
  3110  0B29  2B09               	goto	l3214
  3111  0B2A                     l3222:	
  3112                           
  3113                           ;functions.c: 58: }
  3114                           ;functions.c: 60: _delay((unsigned long)((10)*(4000000/4000.0)));
  3115  0B2A  300D               	movlw	13
  3116  0B2B  00D2               	movwf	??_TransiverReadFIFO+1
  3117  0B2C  30FB               	movlw	251
  3118  0B2D  00D1               	movwf	??_TransiverReadFIFO
  3119  0B2E                     u2737:	
  3120  0B2E  0BD1               	decfsz	??_TransiverReadFIFO,f
  3121  0B2F  2B2E               	goto	u2737
  3122  0B30  0BD2               	decfsz	??_TransiverReadFIFO+1,f
  3123  0B31  2B2E               	goto	u2737
  3124  0B32  2B33               	nop2
  3125                           
  3126                           ;functions.c: 61: SetRFMode(0x00);
  3127  0B33  3000               	movlw	0
  3128  0B34  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  3129                           
  3130                           ;functions.c: 63: ReceivedPacketHandler(ReceivedString);
  3131  0B39  30A0               	movlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3132  0B3A  120A  118A  2290   	fcall	_ReceivedPacketHandler
  3133  0B3D  0008               	return
  3134  0B3E                     __end_of_TransiverReadFIFO:	
  3135                           
  3136                           	psect	text7
  3137  0290                     __ptext7:	
  3138 ;; *************** function _ReceivedPacketHandler *****************
  3139 ;; Defined at:
  3140 ;;		line 73 in file "functions.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  Data            1    wreg     PTR unsigned char 
  3143 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  Data            1   48[BANK0 ] PTR unsigned char 
  3146 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      void 
  3149 ;; Registers used:
  3150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3156 ;;      Params:         0       0       0       0       0
  3157 ;;      Locals:         0       1       0       0       0
  3158 ;;      Temps:          0       1       0       0       0
  3159 ;;      Totals:         0       2       0       0       0
  3160 ;;Total ram usage:        2 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    9
  3163 ;; This function calls:
  3164 ;;		_AnalogValue
  3165 ;;		_DarknessCheck
  3166 ;;		_DelayDs
  3167 ;;		_OperationMode
  3168 ;;		_ResetMemoryAdress
  3169 ;;		_SendMemoryData
  3170 ;;		_TransmittPacket
  3171 ;;		_eeprom_read
  3172 ;;		_eeprom_write
  3173 ;;		_ram_bulk_erase
  3174 ;;		_read_ram_status
  3175 ;;		_strstr
  3176 ;;		_write_ram_status
  3177 ;; This function is called by:
  3178 ;;		_TransiverReadFIFO
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           
  3183                           ;psect for function _ReceivedPacketHandler
  3184  0290                     _ReceivedPacketHandler:	
  3185                           
  3186                           ;incstack = 0
  3187 ;; hardware stack exceeded
  3188                           ; Regs used in _ReceivedPacketHandler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  3189                           ;ReceivedPacketHandler@Data stored from wreg
  3190  0290  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0291  1303               	bcf	3,6	;RP1=0, select bank0
  3192  0292  00D0               	movwf	ReceivedPacketHandler@Data
  3193                           
  3194                           ;functions.c: 77: if((strstr(Data, "N1BLINK")) && (OperationMode() == 6))
  3195  0293  3028               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3196  0294  00CF               	movwf	??_ReceivedPacketHandler
  3197  0295  084F               	movf	??_ReceivedPacketHandler,w
  3198  0296  00AE               	movwf	strstr@s2
  3199  0297  0850               	movf	ReceivedPacketHandler@Data,w
  3200  0298  120A  158A  2121  120A  118A  	fcall	_strstr
  3201  029D  3A00               	xorlw	0
  3202  029E  1903               	skipnz
  3203  029F  2AA8               	goto	l2792
  3204  02A0  160A  118A  256F  120A  118A  	fcall	_OperationMode
  3205  02A5  3A06               	xorlw	6
  3206  02A6  1903               	btfsc	3,2
  3207  02A7  2ABF               	goto	l2796
  3208  02A8                     l2792:	
  3209                           ;functions.c: 82: }
  3210                           
  3211                           ;functions.c: 81: DelayDs(100);
  3212                           
  3213                           ;functions.c: 80: intBlinkCounter = 0;
  3214                           
  3215                           ;functions.c: 78: {
  3216                           ;functions.c: 79: intBlinkCycle = 1;
  3217                           
  3218                           
  3219                           ;functions.c: 83: else if((strstr(Data, "N2BLINK")) && (OperationMode() == 7))
  3220  02A8  3030               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3221  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  3222  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  3223  02AB  00CF               	movwf	??_ReceivedPacketHandler
  3224  02AC  084F               	movf	??_ReceivedPacketHandler,w
  3225  02AD  00AE               	movwf	strstr@s2
  3226  02AE  0850               	movf	ReceivedPacketHandler@Data,w
  3227  02AF  120A  158A  2121  120A  118A  	fcall	_strstr
  3228  02B4  3A00               	xorlw	0
  3229  02B5  1903               	skipnz
  3230  02B6  2AD0               	goto	l2802
  3231  02B7  160A  118A  256F  120A  118A  	fcall	_OperationMode
  3232  02BC  3A07               	xorlw	7
  3233  02BD  1D03               	skipz
  3234  02BE  2AD0               	goto	l2802
  3235  02BF                     l2796:	
  3236                           
  3237                           ;functions.c: 84: {
  3238                           ;functions.c: 85: intBlinkCycle = 1;
  3239  02BF  3001               	movlw	1
  3240  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3241  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3242  02C2  00DD               	movwf	_intBlinkCycle
  3243  02C3  3000               	movlw	0
  3244  02C4  00DE               	movwf	_intBlinkCycle+1
  3245                           
  3246                           ;functions.c: 86: intBlinkCounter = 0;
  3247  02C5  01FC               	clrf	_intBlinkCounter
  3248  02C6  01FD               	clrf	_intBlinkCounter+1
  3249                           
  3250                           ;functions.c: 87: DelayDs(100);
  3251  02C7  3064               	movlw	100
  3252  02C8  00A0               	movwf	DelayDs@cnt
  3253  02C9  3000               	movlw	0
  3254  02CA  00A1               	movwf	DelayDs@cnt+1
  3255  02CB  160A  118A  267F  120A  118A  	fcall	_DelayDs
  3256  02D0                     l2802:	
  3257                           
  3258                           ;functions.c: 88: }
  3259                           ;functions.c: 92: if(Data[0] != 44 || Data[3] != 55)
  3260  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3261  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3262  02D2  0850               	movf	ReceivedPacketHandler@Data,w
  3263  02D3  0084               	movwf	4
  3264  02D4  302C               	movlw	44
  3265  02D5  1383               	bcf	3,7	;select IRP bank0
  3266  02D6  0600               	xorwf	0,w
  3267  02D7  1D03               	btfss	3,2
  3268  02D8  0008               	return
  3269  02D9  0850               	movf	ReceivedPacketHandler@Data,w
  3270  02DA  3E03               	addlw	3
  3271  02DB  0084               	movwf	4
  3272  02DC  3037               	movlw	55
  3273  02DD  0600               	xorwf	0,w
  3274  02DE  1D03               	btfss	3,2
  3275  02DF  0008               	return
  3276  02E0  2C4A               	goto	l2900
  3277  02E1                     l314:	
  3278                           ;functions.c: 99: {
  3279                           ;functions.c: 100: case 1:
  3280                           
  3281                           ;functions.c: 98: switch (Data[2])
  3282                           
  3283                           ;functions.c: 96: {
  3284                           ;functions.c: 97: case 1:
  3285                           
  3286                           ;functions.c: 95: switch (Data[1])
  3287                           
  3288                           ;functions.c: 93: return;
  3289                           
  3290                           
  3291                           ;functions.c: 101: RC2 = 1;
  3292  02E1  1507               	bsf	7,2	;volatile
  3293                           
  3294                           ;functions.c: 102: DelayDs(10);
  3295  02E2  300A               	movlw	10
  3296  02E3  00A0               	movwf	DelayDs@cnt
  3297  02E4  3000               	movlw	0
  3298  02E5  00A1               	movwf	DelayDs@cnt+1
  3299  02E6  160A  118A  267F  120A  118A  	fcall	_DelayDs
  3300                           
  3301                           ;functions.c: 103: RC2 = 0;
  3302  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  3303  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  3304  02ED  1107               	bcf	7,2	;volatile
  3305                           
  3306                           ;functions.c: 104: DelayDs(5);
  3307  02EE  3005               	movlw	5
  3308  02EF  00A0               	movwf	DelayDs@cnt
  3309  02F0  3000               	movlw	0
  3310  02F1  00A1               	movwf	DelayDs@cnt+1
  3311  02F2  160A  118A  267F   	fcall	_DelayDs
  3312                           
  3313                           ;functions.c: 105: break;
  3314  02F5  0008               	return
  3315  02F6                     l316:	
  3316                           ;functions.c: 107: case 2:
  3317                           
  3318                           
  3319                           ;functions.c: 108: RC1 = 1;
  3320  02F6  1487               	bsf	7,1	;volatile
  3321                           
  3322                           ;functions.c: 109: DelayDs(10);
  3323  02F7  300A               	movlw	10
  3324  02F8  00A0               	movwf	DelayDs@cnt
  3325  02F9  3000               	movlw	0
  3326  02FA  00A1               	movwf	DelayDs@cnt+1
  3327  02FB  160A  118A  267F  120A  118A  	fcall	_DelayDs
  3328                           
  3329                           ;functions.c: 110: RC1 = 0;
  3330  0300  1283               	bcf	3,5	;RP0=0, select bank0
  3331  0301  1303               	bcf	3,6	;RP1=0, select bank0
  3332  0302  1087               	bcf	7,1	;volatile
  3333                           
  3334                           ;functions.c: 111: DelayDs(5);
  3335  0303  3005               	movlw	5
  3336  0304  00A0               	movwf	DelayDs@cnt
  3337  0305  3000               	movlw	0
  3338  0306  00A1               	movwf	DelayDs@cnt+1
  3339  0307  160A  118A  267F   	fcall	_DelayDs
  3340                           
  3341                           ;functions.c: 112: break;
  3342  030A  0008               	return
  3343  030B                     l317:	
  3344                           ;functions.c: 114: case 3:
  3345                           
  3346                           
  3347                           ;functions.c: 115: RB1 = 0;
  3348  030B  1086               	bcf	6,1	;volatile
  3349                           
  3350                           ;functions.c: 116: DelayDs(10);
  3351  030C  300A               	movlw	10
  3352  030D  00A0               	movwf	DelayDs@cnt
  3353  030E  3000               	movlw	0
  3354  030F  00A1               	movwf	DelayDs@cnt+1
  3355  0310  160A  118A  267F  120A  118A  	fcall	_DelayDs
  3356                           
  3357                           ;functions.c: 117: RB1 = 1;
  3358  0315  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0316  1303               	bcf	3,6	;RP1=0, select bank0
  3360  0317  1486               	bsf	6,1	;volatile
  3361                           
  3362                           ;functions.c: 118: DelayDs(5);
  3363  0318  3005               	movlw	5
  3364  0319  00A0               	movwf	DelayDs@cnt
  3365  031A  3000               	movlw	0
  3366  031B  00A1               	movwf	DelayDs@cnt+1
  3367  031C  160A  118A  267F   	fcall	_DelayDs
  3368                           
  3369                           ;functions.c: 124: }
  3370                           
  3371                           ;functions.c: 122: break;
  3372                           
  3373                           ;functions.c: 121: default:
  3374                           
  3375                           ;functions.c: 119: break;
  3376  031F  0008               	return
  3377  0320                     l2820:	
  3378  0320  1283               	bcf	3,5	;RP0=0, select bank0
  3379  0321  1303               	bcf	3,6	;RP1=0, select bank0
  3380  0322  0850               	movf	ReceivedPacketHandler@Data,w
  3381  0323  3E02               	addlw	2
  3382  0324  0084               	movwf	4
  3383  0325  1383               	bcf	3,7	;select IRP bank0
  3384  0326  0800               	movf	0,w
  3385                           
  3386                           ; Switch size 1, requested type "space"
  3387                           ; Number of cases is 3, Range of values is 1 to 3
  3388                           ; switch strategies available:
  3389                           ; Name         Instructions Cycles
  3390                           ; simple_byte           10     6 (average)
  3391                           ; direct_byte           20    11 (fixed)
  3392                           ; jumptable            263     9 (fixed)
  3393                           ;	Chosen strategy is simple_byte
  3394  0327  3A01               	xorlw	1	; case 1
  3395  0328  1903               	skipnz
  3396  0329  2AE1               	goto	l314
  3397  032A  3A03               	xorlw	3	; case 2
  3398  032B  1903               	skipnz
  3399  032C  2AF6               	goto	l316
  3400  032D  3A01               	xorlw	1	; case 3
  3401  032E  1903               	skipnz
  3402  032F  2B0B               	goto	l317
  3403  0330  2C6C               	goto	l310
  3404                           
  3405                           ;functions.c: 125: break;
  3406  0331  0008               	return
  3407  0332                     l2822:	
  3408                           ;functions.c: 126: case 2:
  3409                           
  3410                           
  3411                           ;functions.c: 127: if(Data[2] == 1 && OperationMode() == 6)
  3412  0332  0850               	movf	ReceivedPacketHandler@Data,w
  3413  0333  3E02               	addlw	2
  3414  0334  0084               	movwf	4
  3415  0335  0300               	decf	0,w
  3416  0336  1D03               	btfss	3,2
  3417  0337  2B51               	goto	l2832
  3418  0338  160A  118A  256F  120A  118A  	fcall	_OperationMode
  3419  033D  3A06               	xorlw	6
  3420  033E  1D03               	skipz
  3421  033F  2B51               	goto	l2832
  3422                           
  3423                           ;functions.c: 128: {
  3424                           ;functions.c: 129: intBlinkCycle = 1;
  3425  0340  3001               	movlw	1
  3426  0341  1283               	bcf	3,5	;RP0=0, select bank0
  3427  0342  1303               	bcf	3,6	;RP1=0, select bank0
  3428  0343  00DD               	movwf	_intBlinkCycle
  3429  0344  3000               	movlw	0
  3430  0345  00DE               	movwf	_intBlinkCycle+1
  3431                           
  3432                           ;functions.c: 130: intBlinkCounter = 0;
  3433  0346  01FC               	clrf	_intBlinkCounter
  3434  0347  01FD               	clrf	_intBlinkCounter+1
  3435                           
  3436                           ;functions.c: 131: DelayDs(100);
  3437  0348  3064               	movlw	100
  3438  0349  00A0               	movwf	DelayDs@cnt
  3439  034A  3000               	movlw	0
  3440  034B  00A1               	movwf	DelayDs@cnt+1
  3441  034C  160A  118A  267F  120A  118A  	fcall	_DelayDs
  3442  0351                     l2832:	
  3443                           
  3444                           ;functions.c: 132: }
  3445                           ;functions.c: 133: if(Data[2] == 2 && OperationMode() == 7)
  3446  0351  1283               	bcf	3,5	;RP0=0, select bank0
  3447  0352  1303               	bcf	3,6	;RP1=0, select bank0
  3448  0353  0850               	movf	ReceivedPacketHandler@Data,w
  3449  0354  3E02               	addlw	2
  3450  0355  0084               	movwf	4
  3451  0356  3002               	movlw	2
  3452  0357  1383               	bcf	3,7	;select IRP bank0
  3453  0358  0600               	xorwf	0,w
  3454  0359  1D03               	btfss	3,2
  3455  035A  0008               	return
  3456  035B  160A  118A  256F  120A  118A  	fcall	_OperationMode
  3457  0360  3A07               	xorlw	7
  3458  0361  1D03               	skipz
  3459  0362  0008               	return
  3460                           
  3461                           ;functions.c: 134: {
  3462                           ;functions.c: 135: intBlinkCycle = 1;
  3463  0363  3001               	movlw	1
  3464  0364  1283               	bcf	3,5	;RP0=0, select bank0
  3465  0365  1303               	bcf	3,6	;RP1=0, select bank0
  3466  0366  00DD               	movwf	_intBlinkCycle
  3467  0367  3000               	movlw	0
  3468  0368  00DE               	movwf	_intBlinkCycle+1
  3469                           
  3470                           ;functions.c: 136: intBlinkCounter = 0;
  3471  0369  01FC               	clrf	_intBlinkCounter
  3472  036A  01FD               	clrf	_intBlinkCounter+1
  3473                           
  3474                           ;functions.c: 137: DelayDs(100);
  3475  036B  3064               	movlw	100
  3476  036C  00A0               	movwf	DelayDs@cnt
  3477  036D  3000               	movlw	0
  3478  036E  00A1               	movwf	DelayDs@cnt+1
  3479  036F  160A  118A  267F   	fcall	_DelayDs
  3480                           
  3481                           ;functions.c: 138: }
  3482                           ;functions.c: 139: break;
  3483  0372  0008               	return
  3484  0373                     l2842:	
  3485                           ;functions.c: 141: case 3:
  3486                           
  3487                           
  3488                           ;functions.c: 142: if(Data[2] != 0)
  3489  0373  1283               	bcf	3,5	;RP0=0, select bank0
  3490  0374  1303               	bcf	3,6	;RP1=0, select bank0
  3491  0375  0850               	movf	ReceivedPacketHandler@Data,w
  3492  0376  3E02               	addlw	2
  3493  0377  0084               	movwf	4
  3494  0378  1383               	bcf	3,7	;select IRP bank0
  3495  0379  0800               	movf	0,w
  3496  037A  1D03               	btfss	3,2
  3497  037B  0008               	return
  3498                           
  3499                           ;functions.c: 144: TransmittPacket(3, AnalogValue(0));
  3500                           
  3501                           ;functions.c: 143: break;
  3502  037C  3000               	movlw	0
  3503  037D  160A  118A  26EE  120A  118A  	fcall	_AnalogValue
  3504  0382  1283               	bcf	3,5	;RP0=0, select bank0
  3505  0383  1303               	bcf	3,6	;RP1=0, select bank0
  3506  0384  00CF               	movwf	??_ReceivedPacketHandler
  3507  0385  084F               	movf	??_ReceivedPacketHandler,w
  3508  0386  00B5               	movwf	TransmittPacket@value
  3509  0387  3003               	movlw	3
  3510  0388  120A  158A  24BB   	fcall	_TransmittPacket
  3511                           
  3512                           ;functions.c: 145: break;
  3513  038B  0008               	return
  3514  038C                     l2848:	
  3515                           ;functions.c: 147: case 4:
  3516                           
  3517                           
  3518                           ;functions.c: 148: if(Data[2] != 0)
  3519  038C  1283               	bcf	3,5	;RP0=0, select bank0
  3520  038D  1303               	bcf	3,6	;RP1=0, select bank0
  3521  038E  0850               	movf	ReceivedPacketHandler@Data,w
  3522  038F  3E02               	addlw	2
  3523  0390  0084               	movwf	4
  3524  0391  1383               	bcf	3,7	;select IRP bank0
  3525  0392  0800               	movf	0,w
  3526  0393  1D03               	btfss	3,2
  3527  0394  0008               	return
  3528                           
  3529                           ;functions.c: 150: TransmittPacket(4, AnalogValue(3));
  3530                           
  3531                           ;functions.c: 149: break;
  3532  0395  3003               	movlw	3
  3533  0396  160A  118A  26EE  120A  118A  	fcall	_AnalogValue
  3534  039B  1283               	bcf	3,5	;RP0=0, select bank0
  3535  039C  1303               	bcf	3,6	;RP1=0, select bank0
  3536  039D  00CF               	movwf	??_ReceivedPacketHandler
  3537  039E  084F               	movf	??_ReceivedPacketHandler,w
  3538  039F  00B5               	movwf	TransmittPacket@value
  3539  03A0  3004               	movlw	4
  3540  03A1  120A  158A  24BB   	fcall	_TransmittPacket
  3541                           
  3542                           ;functions.c: 151: break;
  3543  03A4  0008               	return
  3544  03A5                     l2854:	
  3545                           ;functions.c: 153: case 5:
  3546                           
  3547                           
  3548                           ;functions.c: 154: if(Data[2] != 0)
  3549  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  3550  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  3551  03A7  0850               	movf	ReceivedPacketHandler@Data,w
  3552  03A8  3E02               	addlw	2
  3553  03A9  0084               	movwf	4
  3554  03AA  1383               	bcf	3,7	;select IRP bank0
  3555  03AB  0800               	movf	0,w
  3556  03AC  1903               	btfsc	3,2
  3557  03AD  2BBA               	goto	l2858
  3558                           
  3559                           ;functions.c: 155: {
  3560                           ;functions.c: 156: eeprom_write(0, Data[2]);
  3561  03AE  0850               	movf	ReceivedPacketHandler@Data,w
  3562  03AF  3E02               	addlw	2
  3563  03B0  0084               	movwf	4
  3564  03B1  0800               	movf	0,w
  3565  03B2  00CF               	movwf	??_ReceivedPacketHandler
  3566  03B3  084F               	movf	??_ReceivedPacketHandler,w
  3567  03B4  00A0               	movwf	eeprom_write@value
  3568  03B5  3000               	movlw	0
  3569  03B6  160A  118A  279D   	fcall	_eeprom_write
  3570                           
  3571                           ;functions.c: 157: break;
  3572  03B9  0008               	return
  3573  03BA                     l2858:	
  3574                           
  3575                           ;functions.c: 158: }
  3576                           ;functions.c: 159: TransmittPacket(5, eeprom_read(0));
  3577  03BA  3000               	movlw	0
  3578  03BB  160A  118A  26A3  120A  118A  	fcall	_eeprom_read
  3579  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  3580  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  3581  03C2  00CF               	movwf	??_ReceivedPacketHandler
  3582  03C3  084F               	movf	??_ReceivedPacketHandler,w
  3583  03C4  00B5               	movwf	TransmittPacket@value
  3584  03C5  3005               	movlw	5
  3585  03C6  120A  158A  24BB   	fcall	_TransmittPacket
  3586                           
  3587                           ;functions.c: 160: break;
  3588  03C9  0008               	return
  3589  03CA                     l2860:	
  3590                           ;functions.c: 162: case 6:
  3591                           
  3592                           
  3593                           ;functions.c: 163: if(Data[2] == 0)
  3594  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  3595  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  3596  03CC  0850               	movf	ReceivedPacketHandler@Data,w
  3597  03CD  3E02               	addlw	2
  3598  03CE  0084               	movwf	4
  3599  03CF  1383               	bcf	3,7	;select IRP bank0
  3600  03D0  0800               	movf	0,w
  3601  03D1  1D03               	btfss	3,2
  3602  03D2  2BE5               	goto	l2868
  3603                           
  3604                           ;functions.c: 164: {
  3605                           ;functions.c: 165: if(bValueFromPot == TRUE)
  3606  03D3  036D               	decf	_bValueFromPot,w
  3607  03D4  1D03               	btfss	3,2
  3608  03D5  2BDD               	goto	l2866
  3609                           
  3610                           ;functions.c: 166: TransmittPacket(6, 1);
  3611  03D6  01B5               	clrf	TransmittPacket@value
  3612  03D7  0AB5               	incf	TransmittPacket@value,f
  3613  03D8  3006               	movlw	6
  3614  03D9  120A  158A  24BB   	fcall	_TransmittPacket
  3615  03DC  0008               	return
  3616  03DD                     l2866:	
  3617                           
  3618                           ;functions.c: 167: else
  3619                           ;functions.c: 168: TransmittPacket(6, 0);
  3620  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  3621  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  3622  03DF  01B5               	clrf	TransmittPacket@value
  3623  03E0  3006               	movlw	6
  3624  03E1  120A  158A  24BB   	fcall	_TransmittPacket
  3625                           
  3626                           ;functions.c: 169: }
  3627  03E4  0008               	return
  3628  03E5                     l2868:	
  3629                           
  3630                           ;functions.c: 170: else if(Data[2] == 1)
  3631  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  3632  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  3633  03E7  0850               	movf	ReceivedPacketHandler@Data,w
  3634  03E8  3E02               	addlw	2
  3635  03E9  0084               	movwf	4
  3636  03EA  1383               	bcf	3,7	;select IRP bank0
  3637  03EB  0300               	decf	0,w
  3638  03EC  1D03               	btfss	3,2
  3639  03ED  2BF1               	goto	l2872
  3640                           
  3641                           ;functions.c: 171: bValueFromPot = TRUE;
  3642  03EE  01ED               	clrf	_bValueFromPot
  3643  03EF  0AED               	incf	_bValueFromPot,f
  3644  03F0  0008               	return
  3645  03F1                     l2872:	
  3646                           
  3647                           ;functions.c: 172: else if(Data[2] == 0)
  3648  03F1  0850               	movf	ReceivedPacketHandler@Data,w
  3649  03F2  3E02               	addlw	2
  3650  03F3  0084               	movwf	4
  3651  03F4  0800               	movf	0,w
  3652  03F5  1D03               	btfss	3,2
  3653  03F6  0008               	return
  3654                           
  3655                           ;functions.c: 173: bValueFromPot = FALSE;
  3656  03F7  01ED               	clrf	_bValueFromPot
  3657                           
  3658                           ;functions.c: 175: break;
  3659  03F8  0008               	return
  3660  03F9                     l2876:	
  3661                           ;functions.c: 177: case 7:
  3662                           
  3663                           
  3664                           ;functions.c: 178: if(Data[2] != 0)
  3665  03F9  0850               	movf	ReceivedPacketHandler@Data,w
  3666  03FA  3E02               	addlw	2
  3667  03FB  0084               	movwf	4
  3668  03FC  0800               	movf	0,w
  3669  03FD  1D03               	btfss	3,2
  3670  03FE  0008               	return
  3671                           
  3672                           ;functions.c: 180: DarknessCheck();
  3673                           
  3674                           ;functions.c: 179: break;
  3675  03FF  160A  118A  26C7  120A  118A  	fcall	_DarknessCheck
  3676                           
  3677                           ;functions.c: 181: if(bDark)
  3678  0404  1283               	bcf	3,5	;RP0=0, select bank0
  3679  0405  1303               	bcf	3,6	;RP1=0, select bank0
  3680  0406  0868               	movf	_bDark,w
  3681  0407  1903               	btfsc	3,2
  3682  0408  2C10               	goto	l2886
  3683                           
  3684                           ;functions.c: 182: TransmittPacket(7, 1);
  3685  0409  01B5               	clrf	TransmittPacket@value
  3686  040A  0AB5               	incf	TransmittPacket@value,f
  3687  040B  3007               	movlw	7
  3688  040C  120A  158A  24BB   	fcall	_TransmittPacket
  3689  040F  0008               	return
  3690  0410                     l2886:	
  3691                           
  3692                           ;functions.c: 183: else
  3693                           ;functions.c: 184: TransmittPacket(7, 2);
  3694  0410  3002               	movlw	2
  3695  0411  1283               	bcf	3,5	;RP0=0, select bank0
  3696  0412  1303               	bcf	3,6	;RP1=0, select bank0
  3697  0413  00CF               	movwf	??_ReceivedPacketHandler
  3698  0414  084F               	movf	??_ReceivedPacketHandler,w
  3699  0415  00B5               	movwf	TransmittPacket@value
  3700  0416  3007               	movlw	7
  3701  0417  120A  158A  24BB   	fcall	_TransmittPacket
  3702                           
  3703                           ;functions.c: 185: break;
  3704  041A  0008               	return
  3705  041B                     l2888:	
  3706                           ;functions.c: 187: case 9:
  3707                           
  3708                           
  3709                           ;functions.c: 188: write_ram_status(read_ram_status() & 0b11100011);
  3710  041B  160A  118A  25E6  120A  118A  	fcall	_read_ram_status
  3711  0420  39E3               	andlw	227
  3712  0421  160A  118A  2771  120A  118A  	fcall	_write_ram_status
  3713                           
  3714                           ;functions.c: 189: ResetMemoryAdress();
  3715  0426  160A  118A  2643  120A  118A  	fcall	_ResetMemoryAdress
  3716                           
  3717                           ;functions.c: 190: ram_bulk_erase();
  3718  042B  160A  118A  265D  120A  118A  	fcall	_ram_bulk_erase
  3719                           
  3720                           ;functions.c: 191: TransmittPacket(9, 1);
  3721  0430  1283               	bcf	3,5	;RP0=0, select bank0
  3722  0431  1303               	bcf	3,6	;RP1=0, select bank0
  3723  0432  01B5               	clrf	TransmittPacket@value
  3724  0433  0AB5               	incf	TransmittPacket@value,f
  3725  0434  3009               	movlw	9
  3726  0435  120A  158A  24BB   	fcall	_TransmittPacket
  3727                           
  3728                           ;functions.c: 192: break;
  3729  0438  0008               	return
  3730  0439                     l2892:	
  3731                           ;functions.c: 194: case 8:
  3732                           
  3733                           
  3734                           ;functions.c: 195: if(!bSaveDataToFlash)
  3735  0439  1283               	bcf	3,5	;RP0=0, select bank0
  3736  043A  1303               	bcf	3,6	;RP1=0, select bank0
  3737  043B  0869               	movf	_bSaveDataToFlash,w
  3738  043C  1D03               	btfss	3,2
  3739  043D  2C42               	goto	l2896
  3740                           
  3741                           ;functions.c: 196: SendMemoryData();
  3742  043E  120A  118A  246D   	fcall	_SendMemoryData
  3743  0441  0008               	return
  3744  0442                     l2896:	
  3745                           
  3746                           ;functions.c: 197: else
  3747                           ;functions.c: 198: TransmittPacket(8, 0);
  3748  0442  1283               	bcf	3,5	;RP0=0, select bank0
  3749  0443  1303               	bcf	3,6	;RP1=0, select bank0
  3750  0444  01B5               	clrf	TransmittPacket@value
  3751  0445  3008               	movlw	8
  3752  0446  120A  158A  24BB   	fcall	_TransmittPacket
  3753                           
  3754                           ;functions.c: 203: }
  3755                           
  3756                           ;functions.c: 202: break;
  3757                           
  3758                           ;functions.c: 201: default:
  3759                           
  3760                           ;functions.c: 199: break;
  3761  0449  0008               	return
  3762  044A                     l2900:	
  3763  044A  1283               	bcf	3,5	;RP0=0, select bank0
  3764  044B  1303               	bcf	3,6	;RP1=0, select bank0
  3765  044C  0A50               	incf	ReceivedPacketHandler@Data,w
  3766  044D  0084               	movwf	4
  3767  044E  1383               	bcf	3,7	;select IRP bank0
  3768  044F  0800               	movf	0,w
  3769                           
  3770                           ; Switch size 1, requested type "space"
  3771                           ; Number of cases is 9, Range of values is 1 to 9
  3772                           ; switch strategies available:
  3773                           ; Name         Instructions Cycles
  3774                           ; simple_byte           28    15 (average)
  3775                           ; direct_byte           38    11 (fixed)
  3776                           ; jumptable            263     9 (fixed)
  3777                           ;	Chosen strategy is simple_byte
  3778  0450  3A01               	xorlw	1	; case 1
  3779  0451  1903               	skipnz
  3780  0452  2B20               	goto	l2820
  3781  0453  3A03               	xorlw	3	; case 2
  3782  0454  1903               	skipnz
  3783  0455  2B32               	goto	l2822
  3784  0456  3A01               	xorlw	1	; case 3
  3785  0457  1903               	skipnz
  3786  0458  2B73               	goto	l2842
  3787  0459  3A07               	xorlw	7	; case 4
  3788  045A  1903               	skipnz
  3789  045B  2B8C               	goto	l2848
  3790  045C  3A01               	xorlw	1	; case 5
  3791  045D  1903               	skipnz
  3792  045E  2BA5               	goto	l2854
  3793  045F  3A03               	xorlw	3	; case 6
  3794  0460  1903               	skipnz
  3795  0461  2BCA               	goto	l2860
  3796  0462  3A01               	xorlw	1	; case 7
  3797  0463  1903               	skipnz
  3798  0464  2BF9               	goto	l2876
  3799  0465  3A0F               	xorlw	15	; case 8
  3800  0466  1903               	skipnz
  3801  0467  2C39               	goto	l2892
  3802  0468  3A01               	xorlw	1	; case 9
  3803  0469  1903               	skipnz
  3804  046A  2C1B               	goto	l2888
  3805  046B  2C6C               	goto	l310
  3806  046C                     l310:	
  3807  046C  0008               	return
  3808  046D                     __end_of_ReceivedPacketHandler:	
  3809                           
  3810                           	psect	text8
  3811  1771                     __ptext8:	
  3812 ;; *************** function _write_ram_status *****************
  3813 ;; Defined at:
  3814 ;;		line 169 in file "m25p16.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  status          1    wreg     unsigned char 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  status          1    5[BANK0 ] unsigned char 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1    wreg      void 
  3821 ;; Registers used:
  3822 ;;		wreg, status,2, status,0, pclath, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3828 ;;      Params:         0       0       0       0       0
  3829 ;;      Locals:         0       1       0       0       0
  3830 ;;      Temps:          0       0       0       0       0
  3831 ;;      Totals:         0       1       0       0       0
  3832 ;;Total ram usage:        1 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    5
  3835 ;; This function calls:
  3836 ;;		_WriteSPI
  3837 ;;		_read_ram_status
  3838 ;; This function is called by:
  3839 ;;		_main
  3840 ;;		_ReceivedPacketHandler
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           
  3845                           ;psect for function _write_ram_status
  3846  1771                     _write_ram_status:	
  3847                           
  3848                           ;incstack = 0
  3849                           ; Regs used in _write_ram_status: [wreg+status,2+status,0+pclath+cstack]
  3850                           ;write_ram_status@status stored from wreg
  3851  1771  1283               	bcf	3,5	;RP0=0, select bank0
  3852  1772  1303               	bcf	3,6	;RP1=0, select bank0
  3853  1773  00A5               	movwf	write_ram_status@status
  3854                           
  3855                           ;m25p16.c: 172: RD3 = 0;
  3856  1774  1188               	bcf	8,3	;volatile
  3857                           
  3858                           ;m25p16.c: 173: WriteSPI(0x06);
  3859  1775  3006               	movlw	6
  3860  1776  160A  118A  2591  160A  118A  	fcall	_WriteSPI
  3861                           
  3862                           ;m25p16.c: 174: RD3 = 1;
  3863  177B  1283               	bcf	3,5	;RP0=0, select bank0
  3864  177C  1303               	bcf	3,6	;RP1=0, select bank0
  3865  177D  1588               	bsf	8,3	;volatile
  3866                           
  3867                           ;m25p16.c: 175: _delay((unsigned long)((2)*(4000000/4000000.0)));
  3868  177E  2F7F               	nop2	;2 cycle nop
  3869                           
  3870                           ;m25p16.c: 176: RD3 = 0;
  3871  177F  1283               	bcf	3,5	;RP0=0, select bank0
  3872  1780  1303               	bcf	3,6	;RP1=0, select bank0
  3873  1781  1188               	bcf	8,3	;volatile
  3874                           
  3875                           ;m25p16.c: 177: WriteSPI(0x01);
  3876  1782  3001               	movlw	1
  3877  1783  160A  118A  2591  160A  118A  	fcall	_WriteSPI
  3878                           
  3879                           ;m25p16.c: 178: WriteSPI(status);
  3880  1788  1283               	bcf	3,5	;RP0=0, select bank0
  3881  1789  1303               	bcf	3,6	;RP1=0, select bank0
  3882  178A  0825               	movf	write_ram_status@status,w
  3883  178B  160A  118A  2591  160A  118A  	fcall	_WriteSPI
  3884                           
  3885                           ;m25p16.c: 179: RD3 = 1;
  3886  1790  1283               	bcf	3,5	;RP0=0, select bank0
  3887  1791  1303               	bcf	3,6	;RP1=0, select bank0
  3888  1792  1588               	bsf	8,3	;volatile
  3889                           
  3890                           ;m25p16.c: 180: _delay((unsigned long)((2)*(4000000/4000000.0)));
  3891  1793  2F94               	nop2	;2 cycle nop
  3892  1794                     l2670:	
  3893                           ;m25p16.c: 181: while (read_ram_status() & 0x01);
  3894                           
  3895  1794  160A  118A  25E6  160A  118A  	fcall	_read_ram_status
  3896  1799  3901               	andlw	1
  3897  179A  1903               	btfsc	3,2
  3898  179B  0008               	return
  3899  179C  2F94               	goto	l2670
  3900  179D                     __end_of_write_ram_status:	
  3901                           
  3902                           	psect	text9
  3903  0921                     __ptext9:	
  3904 ;; *************** function _strstr *****************
  3905 ;; Defined at:
  3906 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strstr.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;  s1              1    wreg     PTR const unsigned char 
  3909 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  3910 ;;  s2              1   14[BANK0 ] PTR const unsigned char 
  3911 ;;		 -> STR_2(8), STR_1(8), 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  s1              1   18[BANK0 ] PTR const unsigned char 
  3914 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  1    wreg      PTR unsigned char 
  3917 ;; Registers used:
  3918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/0
  3921 ;;		On exit  : 0/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3924 ;;      Params:         0       1       0       0       0
  3925 ;;      Locals:         0       1       0       0       0
  3926 ;;      Temps:          0       3       0       0       0
  3927 ;;      Totals:         0       5       0       0       0
  3928 ;;Total ram usage:        5 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:    3
  3931 ;; This function calls:
  3932 ;;		_strchr
  3933 ;;		_strlen
  3934 ;;		_strncmp
  3935 ;; This function is called by:
  3936 ;;		_ReceivedPacketHandler
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function _strstr
  3942  0921                     _strstr:	
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in _strstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3946                           ;strstr@s1 stored from wreg
  3947  0921  1283               	bcf	3,5	;RP0=0, select bank0
  3948  0922  1303               	bcf	3,6	;RP1=0, select bank0
  3949  0923  00B2               	movwf	strstr@s1
  3950  0924  295C               	goto	l2704
  3951  0925                     l2696:	
  3952  0925  082E               	movf	strstr@s2,w
  3953  0926  00AF               	movwf	??_strstr
  3954  0927  082F               	movf	??_strstr,w
  3955  0928  00A8               	movwf	strncmp@s2
  3956  0929  082E               	movf	strstr@s2,w
  3957  092A  160A  118A  2745  120A  158A  	fcall	_strlen
  3958  092F  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0930  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0931  0821               	movf	?_strlen+1,w
  3961  0932  00AA               	movwf	strncmp@len+1
  3962  0933  0820               	movf	?_strlen,w
  3963  0934  00A9               	movwf	strncmp@len
  3964  0935  0832               	movf	strstr@s1,w
  3965  0936  120A  158A  20DD  120A  158A  	fcall	_strncmp
  3966  093B  1283               	bcf	3,5	;RP0=0, select bank0
  3967  093C  1303               	bcf	3,6	;RP1=0, select bank0
  3968  093D  0828               	movf	?_strncmp,w
  3969  093E  0429               	iorwf	?_strncmp+1,w
  3970  093F  1D03               	btfss	3,2
  3971  0940  2943               	goto	l2702
  3972  0941  0832               	movf	strstr@s1,w
  3973  0942  0008               	return
  3974  0943                     l2702:	
  3975  0943  082E               	movf	strstr@s2,w
  3976  0944  0084               	movwf	4
  3977  0945  120A  158A  2000  120A  158A  	fcall	stringdir
  3978  094A  00AF               	movwf	??_strstr
  3979  094B  01B0               	clrf	??_strstr+1
  3980  094C  082F               	movf	??_strstr,w
  3981  094D  00A0               	movwf	strchr@chr
  3982  094E  0830               	movf	??_strstr+1,w
  3983  094F  00A1               	movwf	strchr@chr+1
  3984  0950  0832               	movf	strstr@s1,w
  3985  0951  3E01               	addlw	1
  3986  0952  160A  118A  25FA  120A  158A  	fcall	_strchr
  3987  0957  1283               	bcf	3,5	;RP0=0, select bank0
  3988  0958  1303               	bcf	3,6	;RP1=0, select bank0
  3989  0959  00B1               	movwf	??_strstr+2
  3990  095A  0831               	movf	??_strstr+2,w
  3991  095B  00B2               	movwf	strstr@s1
  3992  095C                     l2704:	
  3993  095C  0832               	movf	strstr@s1,w
  3994  095D  1903               	btfsc	3,2
  3995  095E  2965               	goto	l2708
  3996  095F  0832               	movf	strstr@s1,w
  3997  0960  0084               	movwf	4
  3998  0961  1383               	bcf	3,7	;select IRP bank0
  3999  0962  0800               	movf	0,w
  4000  0963  1D03               	btfss	3,2
  4001  0964  2925               	goto	l2696
  4002  0965                     l2708:	
  4003  0965  3000               	movlw	0
  4004  0966  0008               	return
  4005  0967                     __end_of_strstr:	
  4006                           
  4007                           	psect	text10
  4008  08DD                     __ptext10:	
  4009 ;; *************** function _strncmp *****************
  4010 ;; Defined at:
  4011 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strncmp.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;  s1              1    wreg     PTR const unsigned char 
  4014 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4015 ;;  s2              1    8[BANK0 ] PTR const unsigned char 
  4016 ;;		 -> STR_2(8), STR_1(8), 
  4017 ;;  len             2    9[BANK0 ] unsigned int 
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  4020 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  2    8[BANK0 ] int 
  4023 ;; Registers used:
  4024 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4030 ;;      Params:         0       3       0       0       0
  4031 ;;      Locals:         0       1       0       0       0
  4032 ;;      Temps:          0       2       0       0       0
  4033 ;;      Totals:         0       6       0       0       0
  4034 ;;Total ram usage:        6 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    2
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_strstr
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function _strncmp
  4046  08DD                     _strncmp:	
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
  4050                           ;strncmp@s1 stored from wreg
  4051  08DD  1283               	bcf	3,5	;RP0=0, select bank0
  4052  08DE  1303               	bcf	3,6	;RP1=0, select bank0
  4053  08DF  00AD               	movwf	strncmp@s1
  4054  08E0                     l1180:	
  4055  08E0  3001               	movlw	1
  4056  08E1  02A9               	subwf	strncmp@len,f
  4057  08E2  3000               	movlw	0
  4058  08E3  1C03               	skipc
  4059  08E4  03AA               	decf	strncmp@len+1,f
  4060  08E5  02AA               	subwf	strncmp@len+1,f
  4061  08E6  0A29               	incf	strncmp@len,w
  4062  08E7  1903               	btfsc	3,2
  4063  08E8  0A2A               	incf	strncmp@len+1,w
  4064  08E9  1903               	btfsc	3,2
  4065  08EA  291E               	goto	l2640
  4066  08EB  082D               	movf	strncmp@s1,w
  4067  08EC  0084               	movwf	4
  4068  08ED  1383               	bcf	3,7	;select IRP bank0
  4069  08EE  0800               	movf	0,w
  4070  08EF  1903               	btfsc	3,2
  4071  08F0  28FF               	goto	l2634
  4072  08F1  0828               	movf	strncmp@s2,w
  4073  08F2  0084               	movwf	4
  4074  08F3  120A  158A  2000  120A  158A  	fcall	stringdir
  4075  08F8  00AB               	movwf	??_strncmp
  4076  08F9  082D               	movf	strncmp@s1,w
  4077  08FA  0084               	movwf	4
  4078  08FB  0800               	movf	0,w
  4079  08FC  062B               	xorwf	??_strncmp,w
  4080  08FD  1903               	skipnz
  4081  08FE  2915               	goto	l2638
  4082  08FF                     l2634:	
  4083  08FF  0828               	movf	strncmp@s2,w
  4084  0900  0084               	movwf	4
  4085  0901  120A  158A  2000   	fcall	stringdir
  4086  0904  00AB               	movwf	??_strncmp
  4087  0905  01AC               	clrf	??_strncmp+1
  4088  0906  09AB               	comf	??_strncmp,f
  4089  0907  09AC               	comf	??_strncmp+1,f
  4090  0908  0AAB               	incf	??_strncmp,f
  4091  0909  1903               	skipnz
  4092  090A  0AAC               	incf	??_strncmp+1,f
  4093  090B  082D               	movf	strncmp@s1,w
  4094  090C  0084               	movwf	4
  4095  090D  0800               	movf	0,w
  4096  090E  072B               	addwf	??_strncmp,w
  4097  090F  00A8               	movwf	?_strncmp
  4098  0910  082C               	movf	??_strncmp+1,w
  4099  0911  1803               	skipnc
  4100  0912  0A2C               	incf	??_strncmp+1,w
  4101  0913  00A9               	movwf	?_strncmp+1
  4102  0914  0008               	return
  4103  0915                     l2638:	
  4104  0915  3001               	movlw	1
  4105  0916  00AB               	movwf	??_strncmp
  4106  0917  082B               	movf	??_strncmp,w
  4107  0918  07AD               	addwf	strncmp@s1,f
  4108  0919  3001               	movlw	1
  4109  091A  00AB               	movwf	??_strncmp
  4110  091B  082B               	movf	??_strncmp,w
  4111  091C  07A8               	addwf	strncmp@s2,f
  4112  091D  28E0               	goto	l1180
  4113  091E                     l2640:	
  4114  091E  01A8               	clrf	?_strncmp
  4115  091F  01A9               	clrf	?_strncmp+1
  4116  0920  0008               	return
  4117  0921                     __end_of_strncmp:	
  4118                           
  4119                           	psect	text11
  4120  1745                     __ptext11:	
  4121 ;; *************** function _strlen *****************
  4122 ;; Defined at:
  4123 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strlen.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;  s               1    wreg     PTR const unsigned char 
  4126 ;;		 -> STR_2(8), STR_1(8), 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  s               1    6[BANK0 ] PTR const unsigned char 
  4129 ;;		 -> STR_2(8), STR_1(8), 
  4130 ;;  cp              1    7[BANK0 ] PTR const unsigned char 
  4131 ;;		 -> STR_2(8), STR_1(8), 
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  2    0[BANK0 ] unsigned int 
  4134 ;; Registers used:
  4135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4141 ;;      Params:         0       2       0       0       0
  4142 ;;      Locals:         0       2       0       0       0
  4143 ;;      Temps:          0       4       0       0       0
  4144 ;;      Totals:         0       8       0       0       0
  4145 ;;Total ram usage:        8 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    2
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_strstr
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           
  4156                           ;psect for function _strlen
  4157  1745                     _strlen:	
  4158                           
  4159                           ;incstack = 0
  4160                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
  4161                           ;strlen@s stored from wreg
  4162  1745  1283               	bcf	3,5	;RP0=0, select bank0
  4163  1746  1303               	bcf	3,6	;RP1=0, select bank0
  4164  1747  00A6               	movwf	strlen@s
  4165  1748  0826               	movf	strlen@s,w
  4166  1749  00A2               	movwf	??_strlen
  4167  174A  0822               	movf	??_strlen,w
  4168  174B  00A7               	movwf	strlen@cp
  4169  174C                     l2622:	
  4170  174C  0827               	movf	strlen@cp,w
  4171  174D  0084               	movwf	4
  4172  174E  120A  158A  2000  160A  118A  	fcall	stringdir
  4173  1753  3A00               	xorlw	0
  4174  1754  1903               	btfsc	3,2
  4175  1755  2F5B               	goto	l2624
  4176  1756  3001               	movlw	1
  4177  1757  00A2               	movwf	??_strlen
  4178  1758  0822               	movf	??_strlen,w
  4179  1759  07A7               	addwf	strlen@cp,f
  4180  175A  2F4C               	goto	l2622
  4181  175B                     l2624:	
  4182  175B  0826               	movf	strlen@s,w
  4183  175C  00A2               	movwf	??_strlen
  4184  175D  3080               	movlw	128
  4185  175E  00A3               	movwf	??_strlen+1
  4186  175F  09A2               	comf	??_strlen,f
  4187  1760  09A3               	comf	??_strlen+1,f
  4188  1761  0AA2               	incf	??_strlen,f
  4189  1762  1903               	skipnz
  4190  1763  0AA3               	incf	??_strlen+1,f
  4191  1764  0827               	movf	strlen@cp,w
  4192  1765  00A4               	movwf	??_strlen+2
  4193  1766  3080               	movlw	128
  4194  1767  00A5               	movwf	??_strlen+3
  4195  1768  0822               	movf	??_strlen,w
  4196  1769  0724               	addwf	??_strlen+2,w
  4197  176A  00A0               	movwf	?_strlen
  4198  176B  0823               	movf	??_strlen+1,w
  4199  176C  1803               	skipnc
  4200  176D  0A23               	incf	??_strlen+1,w
  4201  176E  0725               	addwf	??_strlen+3,w
  4202  176F  00A1               	movwf	?_strlen+1
  4203  1770  0008               	return
  4204  1771                     __end_of_strlen:	
  4205                           
  4206                           	psect	text12
  4207  15FA                     __ptext12:	
  4208 ;; *************** function _strchr *****************
  4209 ;; Defined at:
  4210 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strchr.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;  ptr             1    wreg     PTR const unsigned char 
  4213 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4214 ;;  chr             2    0[BANK0 ] int 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  ptr             1    2[BANK0 ] PTR const unsigned char 
  4217 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  1    wreg      PTR unsigned char 
  4220 ;; Registers used:
  4221 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4227 ;;      Params:         0       2       0       0       0
  4228 ;;      Locals:         0       1       0       0       0
  4229 ;;      Temps:          0       0       0       0       0
  4230 ;;      Totals:         0       3       0       0       0
  4231 ;;Total ram usage:        3 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    2
  4234 ;; This function calls:
  4235 ;;		Nothing
  4236 ;; This function is called by:
  4237 ;;		_strstr
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           
  4242                           ;psect for function _strchr
  4243  15FA                     _strchr:	
  4244                           
  4245                           ;incstack = 0
  4246                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0]
  4247                           ;strchr@ptr stored from wreg
  4248  15FA  1283               	bcf	3,5	;RP0=0, select bank0
  4249  15FB  1303               	bcf	3,6	;RP1=0, select bank0
  4250  15FC  00A2               	movwf	strchr@ptr
  4251  15FD                     l1168:	
  4252  15FD  0822               	movf	strchr@ptr,w
  4253  15FE  0084               	movwf	4
  4254  15FF  1383               	bcf	3,7	;select IRP bank0
  4255  1600  0800               	movf	0,w
  4256  1601  0620               	xorwf	strchr@chr,w
  4257  1602  1D03               	skipz
  4258  1603  2E06               	goto	l2650
  4259  1604  0822               	movf	strchr@ptr,w
  4260  1605  0008               	return
  4261  1606                     l2650:	
  4262  1606  0822               	movf	strchr@ptr,w
  4263  1607  0084               	movwf	4
  4264  1608  3001               	movlw	1
  4265  1609  07A2               	addwf	strchr@ptr,f
  4266  160A  0800               	movf	0,w
  4267  160B  1D03               	btfss	3,2
  4268  160C  2DFD               	goto	l1168
  4269  160D  3000               	movlw	0
  4270  160E  0008               	return
  4271  160F                     __end_of_strchr:	
  4272                           
  4273                           	psect	text13
  4274  165D                     __ptext13:	
  4275 ;; *************** function _ram_bulk_erase *****************
  4276 ;; Defined at:
  4277 ;;		line 69 in file "m25p16.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;		None
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, status,2, status,0, pclath, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4291 ;;      Params:         0       0       0       0       0
  4292 ;;      Locals:         0       0       0       0       0
  4293 ;;      Temps:          0       0       0       0       0
  4294 ;;      Totals:         0       0       0       0       0
  4295 ;;Total ram usage:        0 bytes
  4296 ;; Hardware stack levels used:    1
  4297 ;; Hardware stack levels required when called:    5
  4298 ;; This function calls:
  4299 ;;		_WriteSPI
  4300 ;;		_read_ram_status
  4301 ;; This function is called by:
  4302 ;;		_main
  4303 ;;		_ReceivedPacketHandler
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           
  4308                           ;psect for function _ram_bulk_erase
  4309  165D                     _ram_bulk_erase:	
  4310                           
  4311                           ;m25p16.c: 71: RD3 = 0;
  4312                           
  4313                           ;incstack = 0
  4314                           ; Regs used in _ram_bulk_erase: [wreg+status,2+status,0+pclath+cstack]
  4315  165D  1283               	bcf	3,5	;RP0=0, select bank0
  4316  165E  1303               	bcf	3,6	;RP1=0, select bank0
  4317  165F  1188               	bcf	8,3	;volatile
  4318                           
  4319                           ;m25p16.c: 72: WriteSPI(0x06);
  4320  1660  3006               	movlw	6
  4321  1661  160A  118A  2591  160A  118A  	fcall	_WriteSPI
  4322                           
  4323                           ;m25p16.c: 73: RD3 = 1;
  4324  1666  1283               	bcf	3,5	;RP0=0, select bank0
  4325  1667  1303               	bcf	3,6	;RP1=0, select bank0
  4326  1668  1588               	bsf	8,3	;volatile
  4327                           
  4328                           ;m25p16.c: 74: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4329  1669  0000               	nop
  4330                           
  4331                           ;m25p16.c: 75: RD3 = 0;
  4332  166A  1283               	bcf	3,5	;RP0=0, select bank0
  4333  166B  1303               	bcf	3,6	;RP1=0, select bank0
  4334  166C  1188               	bcf	8,3	;volatile
  4335                           
  4336                           ;m25p16.c: 76: WriteSPI(0xC7);
  4337  166D  30C7               	movlw	199
  4338  166E  160A  118A  2591  160A  118A  	fcall	_WriteSPI
  4339                           
  4340                           ;m25p16.c: 77: RD3 = 1;
  4341  1673  1283               	bcf	3,5	;RP0=0, select bank0
  4342  1674  1303               	bcf	3,6	;RP1=0, select bank0
  4343  1675  1588               	bsf	8,3	;volatile
  4344  1676                     l2686:	
  4345                           ;m25p16.c: 78: while(read_ram_status());
  4346                           
  4347  1676  160A  118A  25E6  160A  118A  	fcall	_read_ram_status
  4348  167B  3A00               	xorlw	0
  4349  167C  1903               	btfsc	3,2
  4350  167D  0008               	return
  4351  167E  2E76               	goto	l2686
  4352  167F                     __end_of_ram_bulk_erase:	
  4353                           
  4354                           	psect	text14
  4355  046D                     __ptext14:	
  4356 ;; *************** function _SendMemoryData *****************
  4357 ;; Defined at:
  4358 ;;		line 1212 in file "functions.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;  address         4   43[BANK0 ] unsigned long 
  4363 ;;  finalAddress    4   39[BANK0 ] unsigned long 
  4364 ;;  addr1           1   38[BANK0 ] unsigned char 
  4365 ;;  addr2           1   37[BANK0 ] unsigned char 
  4366 ;;  addr3           1   36[BANK0 ] unsigned char 
  4367 ;;  value           1   35[BANK0 ] unsigned char 
  4368 ;; Return value:  Size  Location     Type
  4369 ;;                  1    wreg      void 
  4370 ;; Registers used:
  4371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4377 ;;      Params:         0       0       0       0       0
  4378 ;;      Locals:         0      12       0       0       0
  4379 ;;      Temps:          0       8       0       0       0
  4380 ;;      Totals:         0      20       0       0       0
  4381 ;;Total ram usage:       20 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; Hardware stack levels required when called:    8
  4384 ;; This function calls:
  4385 ;;		_ReadMemoryAdress
  4386 ;;		_TransmittPacket
  4387 ;;		___llmod
  4388 ;;		_read_write_flash_ram
  4389 ;; This function is called by:
  4390 ;;		_ReceivedPacketHandler
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _SendMemoryData
  4396  046D                     _SendMemoryData:	
  4397                           
  4398                           ;functions.c: 1214: unsigned long address, finalAddress = 0;
  4399                           
  4400                           ;incstack = 0
  4401 ;; hardware stack exceeded
  4402                           ; Regs used in _SendMemoryData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4403  046D  3000               	movlw	0
  4404  046E  1283               	bcf	3,5	;RP0=0, select bank0
  4405  046F  1303               	bcf	3,6	;RP1=0, select bank0
  4406  0470  00CA               	movwf	SendMemoryData@finalAddress+3
  4407  0471  3000               	movlw	0
  4408  0472  00C9               	movwf	SendMemoryData@finalAddress+2
  4409  0473  3000               	movlw	0
  4410  0474  00C8               	movwf	SendMemoryData@finalAddress+1
  4411  0475  3000               	movlw	0
  4412  0476  00C7               	movwf	SendMemoryData@finalAddress
  4413                           
  4414                           ;functions.c: 1215: unsigned char addr3, addr2, addr1, value;
  4415                           ;functions.c: 1217: ReadMemoryAdress(&addr3, &addr2, &addr1);
  4416  0477  3045               	movlw	(low (SendMemoryData@addr2| 0))& (0+255)
  4417  0478  00BB               	movwf	??_SendMemoryData
  4418  0479  083B               	movf	??_SendMemoryData,w
  4419  047A  00A2               	movwf	ReadMemoryAdress@var2
  4420  047B  3046               	movlw	(low (SendMemoryData@addr1| 0))& (0+255)
  4421  047C  00BC               	movwf	??_SendMemoryData+1
  4422  047D  083C               	movf	??_SendMemoryData+1,w
  4423  047E  00A3               	movwf	ReadMemoryAdress@var1
  4424  047F  3044               	movlw	(low (SendMemoryData@addr3| 0))& (0+255)
  4425  0480  160A  118A  2719  120A  118A  	fcall	_ReadMemoryAdress
  4426                           
  4427                           ;functions.c: 1219: finalAddress = (finalAddress << 8) | addr3;
  4428  0485  1283               	bcf	3,5	;RP0=0, select bank0
  4429  0486  1303               	bcf	3,6	;RP1=0, select bank0
  4430  0487  0844               	movf	SendMemoryData@addr3,w
  4431  0488  00BB               	movwf	??_SendMemoryData
  4432  0489  01BC               	clrf	??_SendMemoryData+1
  4433  048A  01BD               	clrf	??_SendMemoryData+2
  4434  048B  01BE               	clrf	??_SendMemoryData+3
  4435  048C  0847               	movf	SendMemoryData@finalAddress,w
  4436  048D  00BF               	movwf	??_SendMemoryData+4
  4437  048E  0848               	movf	SendMemoryData@finalAddress+1,w
  4438  048F  00C0               	movwf	??_SendMemoryData+5
  4439  0490  0849               	movf	SendMemoryData@finalAddress+2,w
  4440  0491  00C1               	movwf	??_SendMemoryData+6
  4441  0492  084A               	movf	SendMemoryData@finalAddress+3,w
  4442  0493  00C2               	movwf	??_SendMemoryData+7
  4443  0494  3008               	movlw	8
  4444  0495                     u1715:	
  4445  0495  1003               	clrc
  4446  0496  0DBF               	rlf	??_SendMemoryData+4,f
  4447  0497  0DC0               	rlf	??_SendMemoryData+5,f
  4448  0498  0DC1               	rlf	??_SendMemoryData+6,f
  4449  0499  0DC2               	rlf	??_SendMemoryData+7,f
  4450  049A  3EFF               	addlw	-1
  4451  049B  1D03               	skipz
  4452  049C  2C95               	goto	u1715
  4453  049D  083F               	movf	??_SendMemoryData+4,w
  4454  049E  04BB               	iorwf	??_SendMemoryData,f
  4455  049F  0840               	movf	??_SendMemoryData+5,w
  4456  04A0  04BC               	iorwf	??_SendMemoryData+1,f
  4457  04A1  0841               	movf	??_SendMemoryData+6,w
  4458  04A2  04BD               	iorwf	??_SendMemoryData+2,f
  4459  04A3  0842               	movf	??_SendMemoryData+7,w
  4460  04A4  04BE               	iorwf	??_SendMemoryData+3,f
  4461  04A5  083E               	movf	??_SendMemoryData+3,w
  4462  04A6  00CA               	movwf	SendMemoryData@finalAddress+3
  4463  04A7  083D               	movf	??_SendMemoryData+2,w
  4464  04A8  00C9               	movwf	SendMemoryData@finalAddress+2
  4465  04A9  083C               	movf	??_SendMemoryData+1,w
  4466  04AA  00C8               	movwf	SendMemoryData@finalAddress+1
  4467  04AB  083B               	movf	??_SendMemoryData,w
  4468  04AC  00C7               	movwf	SendMemoryData@finalAddress
  4469                           
  4470                           ;functions.c: 1220: finalAddress = (finalAddress << 8) | addr2;
  4471  04AD  0845               	movf	SendMemoryData@addr2,w
  4472  04AE  00BB               	movwf	??_SendMemoryData
  4473  04AF  01BC               	clrf	??_SendMemoryData+1
  4474  04B0  01BD               	clrf	??_SendMemoryData+2
  4475  04B1  01BE               	clrf	??_SendMemoryData+3
  4476  04B2  0847               	movf	SendMemoryData@finalAddress,w
  4477  04B3  00BF               	movwf	??_SendMemoryData+4
  4478  04B4  0848               	movf	SendMemoryData@finalAddress+1,w
  4479  04B5  00C0               	movwf	??_SendMemoryData+5
  4480  04B6  0849               	movf	SendMemoryData@finalAddress+2,w
  4481  04B7  00C1               	movwf	??_SendMemoryData+6
  4482  04B8  084A               	movf	SendMemoryData@finalAddress+3,w
  4483  04B9  00C2               	movwf	??_SendMemoryData+7
  4484  04BA  3008               	movlw	8
  4485  04BB                     u1725:	
  4486  04BB  1003               	clrc
  4487  04BC  0DBF               	rlf	??_SendMemoryData+4,f
  4488  04BD  0DC0               	rlf	??_SendMemoryData+5,f
  4489  04BE  0DC1               	rlf	??_SendMemoryData+6,f
  4490  04BF  0DC2               	rlf	??_SendMemoryData+7,f
  4491  04C0  3EFF               	addlw	-1
  4492  04C1  1D03               	skipz
  4493  04C2  2CBB               	goto	u1725
  4494  04C3  083F               	movf	??_SendMemoryData+4,w
  4495  04C4  04BB               	iorwf	??_SendMemoryData,f
  4496  04C5  0840               	movf	??_SendMemoryData+5,w
  4497  04C6  04BC               	iorwf	??_SendMemoryData+1,f
  4498  04C7  0841               	movf	??_SendMemoryData+6,w
  4499  04C8  04BD               	iorwf	??_SendMemoryData+2,f
  4500  04C9  0842               	movf	??_SendMemoryData+7,w
  4501  04CA  04BE               	iorwf	??_SendMemoryData+3,f
  4502  04CB  083E               	movf	??_SendMemoryData+3,w
  4503  04CC  00CA               	movwf	SendMemoryData@finalAddress+3
  4504  04CD  083D               	movf	??_SendMemoryData+2,w
  4505  04CE  00C9               	movwf	SendMemoryData@finalAddress+2
  4506  04CF  083C               	movf	??_SendMemoryData+1,w
  4507  04D0  00C8               	movwf	SendMemoryData@finalAddress+1
  4508  04D1  083B               	movf	??_SendMemoryData,w
  4509  04D2  00C7               	movwf	SendMemoryData@finalAddress
  4510                           
  4511                           ;functions.c: 1221: finalAddress = (finalAddress << 8) | addr1;
  4512  04D3  0846               	movf	SendMemoryData@addr1,w
  4513  04D4  00BB               	movwf	??_SendMemoryData
  4514  04D5  01BC               	clrf	??_SendMemoryData+1
  4515  04D6  01BD               	clrf	??_SendMemoryData+2
  4516  04D7  01BE               	clrf	??_SendMemoryData+3
  4517  04D8  0847               	movf	SendMemoryData@finalAddress,w
  4518  04D9  00BF               	movwf	??_SendMemoryData+4
  4519  04DA  0848               	movf	SendMemoryData@finalAddress+1,w
  4520  04DB  00C0               	movwf	??_SendMemoryData+5
  4521  04DC  0849               	movf	SendMemoryData@finalAddress+2,w
  4522  04DD  00C1               	movwf	??_SendMemoryData+6
  4523  04DE  084A               	movf	SendMemoryData@finalAddress+3,w
  4524  04DF  00C2               	movwf	??_SendMemoryData+7
  4525  04E0  3008               	movlw	8
  4526  04E1                     u1735:	
  4527  04E1  1003               	clrc
  4528  04E2  0DBF               	rlf	??_SendMemoryData+4,f
  4529  04E3  0DC0               	rlf	??_SendMemoryData+5,f
  4530  04E4  0DC1               	rlf	??_SendMemoryData+6,f
  4531  04E5  0DC2               	rlf	??_SendMemoryData+7,f
  4532  04E6  3EFF               	addlw	-1
  4533  04E7  1D03               	skipz
  4534  04E8  2CE1               	goto	u1735
  4535  04E9  083F               	movf	??_SendMemoryData+4,w
  4536  04EA  04BB               	iorwf	??_SendMemoryData,f
  4537  04EB  0840               	movf	??_SendMemoryData+5,w
  4538  04EC  04BC               	iorwf	??_SendMemoryData+1,f
  4539  04ED  0841               	movf	??_SendMemoryData+6,w
  4540  04EE  04BD               	iorwf	??_SendMemoryData+2,f
  4541  04EF  0842               	movf	??_SendMemoryData+7,w
  4542  04F0  04BE               	iorwf	??_SendMemoryData+3,f
  4543  04F1  083E               	movf	??_SendMemoryData+3,w
  4544  04F2  00CA               	movwf	SendMemoryData@finalAddress+3
  4545  04F3  083D               	movf	??_SendMemoryData+2,w
  4546  04F4  00C9               	movwf	SendMemoryData@finalAddress+2
  4547  04F5  083C               	movf	??_SendMemoryData+1,w
  4548  04F6  00C8               	movwf	SendMemoryData@finalAddress+1
  4549  04F7  083B               	movf	??_SendMemoryData,w
  4550  04F8  00C7               	movwf	SendMemoryData@finalAddress
  4551                           
  4552                           ;functions.c: 1222: TransmittPacket(8,3);
  4553  04F9  3003               	movlw	3
  4554  04FA  00BB               	movwf	??_SendMemoryData
  4555  04FB  083B               	movf	??_SendMemoryData,w
  4556  04FC  00B5               	movwf	TransmittPacket@value
  4557  04FD  3008               	movlw	8
  4558  04FE  120A  158A  24BB  120A  118A  	fcall	_TransmittPacket
  4559                           
  4560                           ;functions.c: 1223: for(address = 0; address < finalAddress; address++)
  4561  0503  3000               	movlw	0
  4562  0504  1283               	bcf	3,5	;RP0=0, select bank0
  4563  0505  1303               	bcf	3,6	;RP1=0, select bank0
  4564  0506  00CE               	movwf	SendMemoryData@address+3
  4565  0507  3000               	movlw	0
  4566  0508  00CD               	movwf	SendMemoryData@address+2
  4567  0509  3000               	movlw	0
  4568  050A  00CC               	movwf	SendMemoryData@address+1
  4569  050B  3000               	movlw	0
  4570  050C  00CB               	movwf	SendMemoryData@address
  4571  050D                     l2754:	
  4572  050D  084A               	movf	SendMemoryData@finalAddress+3,w
  4573  050E  024E               	subwf	SendMemoryData@address+3,w
  4574  050F  1D03               	skipz
  4575  0510  2D1B               	goto	u1785
  4576  0511  0849               	movf	SendMemoryData@finalAddress+2,w
  4577  0512  024D               	subwf	SendMemoryData@address+2,w
  4578  0513  1D03               	skipz
  4579  0514  2D1B               	goto	u1785
  4580  0515  0848               	movf	SendMemoryData@finalAddress+1,w
  4581  0516  024C               	subwf	SendMemoryData@address+1,w
  4582  0517  1D03               	skipz
  4583  0518  2D1B               	goto	u1785
  4584  0519  0847               	movf	SendMemoryData@finalAddress,w
  4585  051A  024B               	subwf	SendMemoryData@address,w
  4586  051B                     u1785:	
  4587  051B  1803               	btfsc	3,0
  4588  051C  2DBB               	goto	l2756
  4589                           
  4590                           ;functions.c: 1224: {
  4591                           ;functions.c: 1227: addr1 = address & 0x00FF;
  4592  051D  084B               	movf	SendMemoryData@address,w
  4593  051E  00BB               	movwf	??_SendMemoryData
  4594  051F  083B               	movf	??_SendMemoryData,w
  4595  0520  00C6               	movwf	SendMemoryData@addr1
  4596                           
  4597                           ;functions.c: 1228: addr2 = address >> 8 & 0x00FF;
  4598  0521  084B               	movf	SendMemoryData@address,w
  4599  0522  00BB               	movwf	??_SendMemoryData
  4600  0523  084C               	movf	SendMemoryData@address+1,w
  4601  0524  00BC               	movwf	??_SendMemoryData+1
  4602  0525  084D               	movf	SendMemoryData@address+2,w
  4603  0526  00BD               	movwf	??_SendMemoryData+2
  4604  0527  084E               	movf	SendMemoryData@address+3,w
  4605  0528  00BE               	movwf	??_SendMemoryData+3
  4606  0529  3008               	movlw	8
  4607  052A                     u1745:	
  4608  052A  1003               	clrc
  4609  052B  0CBE               	rrf	??_SendMemoryData+3,f
  4610  052C  0CBD               	rrf	??_SendMemoryData+2,f
  4611  052D  0CBC               	rrf	??_SendMemoryData+1,f
  4612  052E  0CBB               	rrf	??_SendMemoryData,f
  4613  052F  3EFF               	addlw	-1
  4614  0530  1D03               	skipz
  4615  0531  2D2A               	goto	u1745
  4616  0532  083B               	movf	??_SendMemoryData,w
  4617  0533  00BF               	movwf	??_SendMemoryData+4
  4618  0534  083F               	movf	??_SendMemoryData+4,w
  4619  0535  00C5               	movwf	SendMemoryData@addr2
  4620                           
  4621                           ;functions.c: 1229: addr3 = address >> 16 & 0x00FF;
  4622  0536  084B               	movf	SendMemoryData@address,w
  4623  0537  00BB               	movwf	??_SendMemoryData
  4624  0538  084C               	movf	SendMemoryData@address+1,w
  4625  0539  00BC               	movwf	??_SendMemoryData+1
  4626  053A  084D               	movf	SendMemoryData@address+2,w
  4627  053B  00BD               	movwf	??_SendMemoryData+2
  4628  053C  084E               	movf	SendMemoryData@address+3,w
  4629  053D  00BE               	movwf	??_SendMemoryData+3
  4630  053E  3010               	movlw	16
  4631  053F                     u1755:	
  4632  053F  1003               	clrc
  4633  0540  0CBE               	rrf	??_SendMemoryData+3,f
  4634  0541  0CBD               	rrf	??_SendMemoryData+2,f
  4635  0542  0CBC               	rrf	??_SendMemoryData+1,f
  4636  0543  0CBB               	rrf	??_SendMemoryData,f
  4637  0544  3EFF               	addlw	-1
  4638  0545  1D03               	skipz
  4639  0546  2D3F               	goto	u1755
  4640  0547  083B               	movf	??_SendMemoryData,w
  4641  0548  00BF               	movwf	??_SendMemoryData+4
  4642  0549  083F               	movf	??_SendMemoryData+4,w
  4643  054A  00C4               	movwf	SendMemoryData@addr3
  4644                           
  4645                           ;functions.c: 1231: if(address ==0)
  4646  054B  084E               	movf	SendMemoryData@address+3,w
  4647  054C  044D               	iorwf	SendMemoryData@address+2,w
  4648  054D  044C               	iorwf	SendMemoryData@address+1,w
  4649  054E  044B               	iorwf	SendMemoryData@address,w
  4650  054F  1903               	btfsc	3,2
  4651  0550  2D7A               	goto	L2
  4652                           
  4653                           ;functions.c: 1233: else if((address % 10) ==0)
  4654                           
  4655                           ;functions.c: 1232: TransmittPacket(11, 1);
  4656  0551  3000               	movlw	0
  4657  0552  1283               	bcf	3,5	;RP0=0, select bank0
  4658  0553  1303               	bcf	3,6	;RP1=0, select bank0
  4659  0554  00A3               	movwf	___llmod@divisor+3
  4660  0555  3000               	movlw	0
  4661  0556  00A2               	movwf	___llmod@divisor+2
  4662  0557  3000               	movlw	0
  4663  0558  00A1               	movwf	___llmod@divisor+1
  4664  0559  300A               	movlw	10
  4665  055A  00A0               	movwf	___llmod@divisor
  4666  055B  084E               	movf	SendMemoryData@address+3,w
  4667  055C  00A7               	movwf	___llmod@dividend+3
  4668  055D  084D               	movf	SendMemoryData@address+2,w
  4669  055E  00A6               	movwf	___llmod@dividend+2
  4670  055F  084C               	movf	SendMemoryData@address+1,w
  4671  0560  00A5               	movwf	___llmod@dividend+1
  4672  0561  084B               	movf	SendMemoryData@address,w
  4673  0562  00A4               	movwf	___llmod@dividend
  4674  0563  120A  158A  2167  120A  118A  	fcall	___llmod
  4675  0568  1283               	bcf	3,5	;RP0=0, select bank0
  4676  0569  1303               	bcf	3,6	;RP1=0, select bank0
  4677  056A  0823               	movf	?___llmod+3,w
  4678  056B  0422               	iorwf	?___llmod+2,w
  4679  056C  0421               	iorwf	?___llmod+1,w
  4680  056D  0420               	iorwf	?___llmod,w
  4681  056E  1D03               	skipz
  4682  056F  2D82               	goto	l2748
  4683                           
  4684                           ;functions.c: 1234: {
  4685                           ;functions.c: 1235: TransmittPacket(12, 1);
  4686  0570  01B5               	clrf	TransmittPacket@value
  4687  0571  0AB5               	incf	TransmittPacket@value,f
  4688  0572  300C               	movlw	12
  4689  0573  120A  158A  24BB  120A  118A  	fcall	_TransmittPacket
  4690                           
  4691                           ;functions.c: 1236: TransmittPacket(11,1);
  4692  0578  1283               	bcf	3,5	;RP0=0, select bank0
  4693  0579  1303               	bcf	3,6	;RP1=0, select bank0
  4694  057A                     L2:	
  4695  057A  01B5               	clrf	TransmittPacket@value
  4696  057B  0AB5               	incf	TransmittPacket@value,f
  4697  057C  300B               	movlw	11
  4698  057D  120A  158A  24BB  120A  118A  	fcall	_TransmittPacket
  4699  0582                     l2748:	
  4700                           
  4701                           ;functions.c: 1237: }
  4702                           ;functions.c: 1240: read_write_flash_ram(
  4703                           ;functions.c: 1241: 1,
  4704                           ;functions.c: 1242: 1,
  4705                           ;functions.c: 1243: addr3,
  4706                           ;functions.c: 1244: addr2,
  4707                           ;functions.c: 1245: addr1,
  4708                           ;functions.c: 1246: &value);
  4709  0582  3001               	movlw	1
  4710  0583  1283               	bcf	3,5	;RP0=0, select bank0
  4711  0584  1303               	bcf	3,6	;RP1=0, select bank0
  4712  0585  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  4713  0586  3000               	movlw	0
  4714  0587  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  4715  0588  0844               	movf	SendMemoryData@addr3,w
  4716  0589  00BB               	movwf	??_SendMemoryData
  4717  058A  083B               	movf	??_SendMemoryData,w
  4718  058B  00A7               	movwf	read_write_flash_ram@flash_sector
  4719  058C  0845               	movf	SendMemoryData@addr2,w
  4720  058D  00BC               	movwf	??_SendMemoryData+1
  4721  058E  083C               	movf	??_SendMemoryData+1,w
  4722  058F  00A8               	movwf	read_write_flash_ram@flash_page
  4723  0590  0846               	movf	SendMemoryData@addr1,w
  4724  0591  00BD               	movwf	??_SendMemoryData+2
  4725  0592  083D               	movf	??_SendMemoryData+2,w
  4726  0593  00A9               	movwf	read_write_flash_ram@offset
  4727  0594  3043               	movlw	(low (SendMemoryData@value| 0))& (0+255)
  4728  0595  00BE               	movwf	??_SendMemoryData+3
  4729  0596  083E               	movf	??_SendMemoryData+3,w
  4730  0597  00AA               	movwf	read_write_flash_ram@mem_ptr
  4731  0598  3001               	movlw	1
  4732  0599  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  4733                           
  4734                           ;functions.c: 1248: TransmittPacket(10, value);
  4735  059E  1283               	bcf	3,5	;RP0=0, select bank0
  4736  059F  1303               	bcf	3,6	;RP1=0, select bank0
  4737  05A0  0843               	movf	SendMemoryData@value,w
  4738  05A1  00BB               	movwf	??_SendMemoryData
  4739  05A2  083B               	movf	??_SendMemoryData,w
  4740  05A3  00B5               	movwf	TransmittPacket@value
  4741  05A4  300A               	movlw	10
  4742  05A5  120A  158A  24BB  120A  118A  	fcall	_TransmittPacket
  4743  05AA  3001               	movlw	1
  4744  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  4745  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  4746  05AD  07CB               	addwf	SendMemoryData@address,f
  4747  05AE  3000               	movlw	0
  4748  05AF  1803               	skipnc
  4749  05B0  3001               	movlw	1
  4750  05B1  07CC               	addwf	SendMemoryData@address+1,f
  4751  05B2  3000               	movlw	0
  4752  05B3  1803               	skipnc
  4753  05B4  3001               	movlw	1
  4754  05B5  07CD               	addwf	SendMemoryData@address+2,f
  4755  05B6  3000               	movlw	0
  4756  05B7  1803               	skipnc
  4757  05B8  3001               	movlw	1
  4758  05B9  07CE               	addwf	SendMemoryData@address+3,f
  4759  05BA  2D0D               	goto	l2754
  4760  05BB                     l2756:	
  4761                           
  4762                           ;functions.c: 1251: }
  4763                           ;functions.c: 1252: TransmittPacket(8, 1);
  4764  05BB  01B5               	clrf	TransmittPacket@value
  4765  05BC  0AB5               	incf	TransmittPacket@value,f
  4766  05BD  3008               	movlw	8
  4767  05BE  120A  158A  24BB   	fcall	_TransmittPacket
  4768  05C1  0008               	return
  4769  05C2                     __end_of_SendMemoryData:	
  4770                           
  4771                           	psect	text15
  4772  0BAD                     __ptext15:	
  4773 ;; *************** function _read_write_flash_ram *****************
  4774 ;; Defined at:
  4775 ;;		line 107 in file "m25p16.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  one_read_zer    1    wreg     unsigned char 
  4778 ;;  bytes_to_rea    2    5[BANK0 ] unsigned short 
  4779 ;;  flash_sector    1    7[BANK0 ] unsigned char 
  4780 ;;  flash_page      1    8[BANK0 ] unsigned char 
  4781 ;;  offset          1    9[BANK0 ] unsigned char 
  4782 ;;  mem_ptr         1   10[BANK0 ] PTR unsigned char 
  4783 ;;		 -> SendMemoryData@value(1), saveDataToFlash@value(1), 
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  one_read_zer    1   13[BANK0 ] unsigned char 
  4786 ;;  i               2   14[BANK0 ] unsigned short 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  1    wreg      void 
  4789 ;; Registers used:
  4790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4796 ;;      Params:         0       6       0       0       0
  4797 ;;      Locals:         0       3       0       0       0
  4798 ;;      Temps:          0       2       0       0       0
  4799 ;;      Totals:         0      11       0       0       0
  4800 ;;Total ram usage:       11 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    5
  4803 ;; This function calls:
  4804 ;;		_ReadSPI
  4805 ;;		_WriteSPI
  4806 ;;		_read_ram_status
  4807 ;; This function is called by:
  4808 ;;		_saveDataToFlash
  4809 ;;		_SendMemoryData
  4810 ;;		_write_flash_page
  4811 ;;		_read_flash_page
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815                           
  4816                           ;psect for function _read_write_flash_ram
  4817  0BAD                     _read_write_flash_ram:	
  4818                           
  4819                           ;incstack = 0
  4820                           ; Regs used in _read_write_flash_ram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4821                           ;read_write_flash_ram@one_read_zero_write stored from wreg
  4822  0BAD  1283               	bcf	3,5	;RP0=0, select bank0
  4823  0BAE  1303               	bcf	3,6	;RP1=0, select bank0
  4824  0BAF  00AD               	movwf	read_write_flash_ram@one_read_zero_write
  4825                           
  4826                           ;m25p16.c: 122: unsigned short int i;
  4827                           ;m25p16.c: 126: RD3 = 0;
  4828  0BB0  1188               	bcf	8,3	;volatile
  4829                           
  4830                           ;m25p16.c: 127: if(one_read_zero_write)
  4831  0BB1  082D               	movf	read_write_flash_ram@one_read_zero_write,w
  4832  0BB2  1903               	btfsc	3,2
  4833  0BB3  2BB6               	goto	l2574
  4834                           
  4835                           ;m25p16.c: 128: {
  4836                           ;m25p16.c: 129: WriteSPI(0x03);
  4837  0BB4  3003               	movlw	3
  4838  0BB5  2BC4               	goto	L3
  4839  0BB6                     l2574:	
  4840                           ;m25p16.c: 130: }
  4841                           
  4842                           
  4843                           ;m25p16.c: 131: else
  4844                           ;m25p16.c: 132: {
  4845                           ;m25p16.c: 133: WriteSPI(0x06);
  4846  0BB6  3006               	movlw	6
  4847  0BB7  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  4848                           
  4849                           ;m25p16.c: 134: RD3 = 1;
  4850  0BBC  1283               	bcf	3,5	;RP0=0, select bank0
  4851  0BBD  1303               	bcf	3,6	;RP1=0, select bank0
  4852  0BBE  1588               	bsf	8,3	;volatile
  4853                           
  4854                           ;m25p16.c: 135: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4855  0BBF  0000               	nop
  4856                           
  4857                           ;m25p16.c: 136: RD3 = 0;
  4858  0BC0  1283               	bcf	3,5	;RP0=0, select bank0
  4859  0BC1  1303               	bcf	3,6	;RP1=0, select bank0
  4860  0BC2  1188               	bcf	8,3	;volatile
  4861                           
  4862                           ;m25p16.c: 137: WriteSPI(0x02);
  4863  0BC3  3002               	movlw	2
  4864  0BC4                     L3:	
  4865  0BC4  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  4866                           
  4867                           ;m25p16.c: 139: }
  4868                           ;m25p16.c: 141: WriteSPI(flash_sector);
  4869  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  4870  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  4871  0BCB  0827               	movf	read_write_flash_ram@flash_sector,w
  4872  0BCC  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  4873                           
  4874                           ;m25p16.c: 142: WriteSPI(flash_page);
  4875  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  4876  0BD2  1303               	bcf	3,6	;RP1=0, select bank0
  4877  0BD3  0828               	movf	read_write_flash_ram@flash_page,w
  4878  0BD4  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  4879                           
  4880                           ;m25p16.c: 143: WriteSPI(offset);
  4881  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  4882  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  4883  0BDB  0829               	movf	read_write_flash_ram@offset,w
  4884  0BDC  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  4885                           
  4886                           ;m25p16.c: 145: for (i=0;i<bytes_to_readwrite;i++)
  4887  0BE1  1283               	bcf	3,5	;RP0=0, select bank0
  4888  0BE2  1303               	bcf	3,6	;RP1=0, select bank0
  4889  0BE3  01AE               	clrf	read_write_flash_ram@i
  4890  0BE4  01AF               	clrf	read_write_flash_ram@i+1
  4891  0BE5                     l2592:	
  4892  0BE5  0826               	movf	read_write_flash_ram@bytes_to_readwrite+1,w
  4893  0BE6  022F               	subwf	read_write_flash_ram@i+1,w
  4894  0BE7  1D03               	skipz
  4895  0BE8  2BEB               	goto	u1505
  4896  0BE9  0825               	movf	read_write_flash_ram@bytes_to_readwrite,w
  4897  0BEA  022E               	subwf	read_write_flash_ram@i,w
  4898  0BEB                     u1505:	
  4899  0BEB  1803               	btfsc	3,0
  4900  0BEC  2C16               	goto	l599
  4901                           
  4902                           ;m25p16.c: 146: {
  4903                           ;m25p16.c: 147: if (one_read_zero_write)
  4904  0BED  082D               	movf	read_write_flash_ram@one_read_zero_write,w
  4905  0BEE  1903               	btfsc	3,2
  4906  0BEF  2C01               	goto	l2588
  4907                           
  4908                           ;m25p16.c: 148: {
  4909                           ;m25p16.c: 149: mem_ptr[i] = ReadSPI();
  4910  0BF0  160A  118A  2556  120A  158A  	fcall	_ReadSPI
  4911  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  4912  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  4913  0BF7  00AB               	movwf	??_read_write_flash_ram
  4914  0BF8  082E               	movf	read_write_flash_ram@i,w
  4915  0BF9  072A               	addwf	read_write_flash_ram@mem_ptr,w
  4916  0BFA  00AC               	movwf	??_read_write_flash_ram+1
  4917  0BFB  082C               	movf	??_read_write_flash_ram+1,w
  4918  0BFC  0084               	movwf	4
  4919  0BFD  082B               	movf	??_read_write_flash_ram,w
  4920  0BFE  1383               	bcf	3,7	;select IRP bank0
  4921  0BFF  0080               	movwf	0
  4922                           
  4923                           ;m25p16.c: 150: }
  4924  0C00  2C0D               	goto	l2590
  4925  0C01                     l2588:	
  4926                           
  4927                           ;m25p16.c: 151: else
  4928                           ;m25p16.c: 152: {
  4929                           ;m25p16.c: 153: WriteSPI(mem_ptr[i]);
  4930  0C01  082E               	movf	read_write_flash_ram@i,w
  4931  0C02  072A               	addwf	read_write_flash_ram@mem_ptr,w
  4932  0C03  00AB               	movwf	??_read_write_flash_ram
  4933  0C04  082B               	movf	??_read_write_flash_ram,w
  4934  0C05  0084               	movwf	4
  4935  0C06  1383               	bcf	3,7	;select IRP bank0
  4936  0C07  0800               	movf	0,w
  4937  0C08  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  4938  0C0D                     l2590:	
  4939  0C0D  3001               	movlw	1
  4940  0C0E  1283               	bcf	3,5	;RP0=0, select bank0
  4941  0C0F  1303               	bcf	3,6	;RP1=0, select bank0
  4942  0C10  07AE               	addwf	read_write_flash_ram@i,f
  4943  0C11  1803               	skipnc
  4944  0C12  0AAF               	incf	read_write_flash_ram@i+1,f
  4945  0C13  3000               	movlw	0
  4946  0C14  07AF               	addwf	read_write_flash_ram@i+1,f
  4947  0C15  2BE5               	goto	l2592
  4948  0C16                     l599:	
  4949                           
  4950                           ;m25p16.c: 154: }
  4951                           ;m25p16.c: 155: }
  4952                           ;m25p16.c: 157: RD3 = 1;
  4953  0C16  1588               	bsf	8,3	;volatile
  4954                           
  4955                           ;m25p16.c: 159: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4956  0C17  0000               	nop
  4957  0C18                     l2596:	
  4958                           ;m25p16.c: 160: while (read_ram_status() & 0b00000011) {
  4959                           
  4960  0C18  160A  118A  25E6  120A  158A  	fcall	_read_ram_status
  4961  0C1D  3903               	andlw	3
  4962  0C1E  1903               	btfsc	3,2
  4963  0C1F  0008               	return
  4964                           
  4965                           ;m25p16.c: 161: _delay((unsigned long)((1)*(4000000/4000.0)));
  4966  0C20  30F9               	movlw	249
  4967  0C21  1283               	bcf	3,5	;RP0=0, select bank0
  4968  0C22  1303               	bcf	3,6	;RP1=0, select bank0
  4969  0C23  00AB               	movwf	??_read_write_flash_ram
  4970  0C24                     u2747:	
  4971  0C24  0000               	nop
  4972  0C25  0BAB               	decfsz	??_read_write_flash_ram,f
  4973  0C26  2C24               	goto	u2747
  4974  0C27  2C28               	nop2	;nop
  4975  0C28  0000               	nop
  4976  0C29  2C18               	goto	l2596
  4977  0C2A                     __end_of_read_write_flash_ram:	
  4978                           
  4979                           	psect	text16
  4980  15E6                     __ptext16:	
  4981 ;; *************** function _read_ram_status *****************
  4982 ;; Defined at:
  4983 ;;		line 57 in file "m25p16.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;		None
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;  status          1    4[BANK0 ] unsigned char 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      unsigned char 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0, pclath, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4997 ;;      Params:         0       0       0       0       0
  4998 ;;      Locals:         0       1       0       0       0
  4999 ;;      Temps:          0       1       0       0       0
  5000 ;;      Totals:         0       2       0       0       0
  5001 ;;Total ram usage:        2 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    4
  5004 ;; This function calls:
  5005 ;;		_ReadSPI
  5006 ;;		_WriteSPI
  5007 ;; This function is called by:
  5008 ;;		_main
  5009 ;;		_ReceivedPacketHandler
  5010 ;;		_ram_bulk_erase
  5011 ;;		_read_write_flash_ram
  5012 ;;		_write_ram_status
  5013 ;;		_ram_sector_erase
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           
  5018                           ;psect for function _read_ram_status
  5019  15E6                     _read_ram_status:	
  5020                           
  5021                           ;m25p16.c: 59: unsigned char status;
  5022                           ;m25p16.c: 60: RD3 = 0;
  5023                           
  5024                           ;incstack = 0
  5025                           ; Regs used in _read_ram_status: [wreg+status,2+status,0+pclath+cstack]
  5026  15E6  1283               	bcf	3,5	;RP0=0, select bank0
  5027  15E7  1303               	bcf	3,6	;RP1=0, select bank0
  5028  15E8  1188               	bcf	8,3	;volatile
  5029                           
  5030                           ;m25p16.c: 61: WriteSPI(0x05);
  5031  15E9  3005               	movlw	5
  5032  15EA  160A  118A  2591  160A  118A  	fcall	_WriteSPI
  5033                           
  5034                           ;m25p16.c: 62: status = ReadSPI();
  5035  15EF  160A  118A  2556   	fcall	_ReadSPI
  5036  15F2  1283               	bcf	3,5	;RP0=0, select bank0
  5037  15F3  1303               	bcf	3,6	;RP1=0, select bank0
  5038  15F4  00A3               	movwf	??_read_ram_status
  5039  15F5  0823               	movf	??_read_ram_status,w
  5040  15F6  00A4               	movwf	read_ram_status@status
  5041                           
  5042                           ;m25p16.c: 63: RD3 = 1;
  5043  15F7  1588               	bsf	8,3	;volatile
  5044                           
  5045                           ;m25p16.c: 64: return status;
  5046  15F8  0824               	movf	read_ram_status@status,w
  5047  15F9  0008               	return
  5048  15FA                     __end_of_read_ram_status:	
  5049                           
  5050                           	psect	text17
  5051  0967                     __ptext17:	
  5052 ;; *************** function ___llmod *****************
  5053 ;; Defined at:
  5054 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  divisor         4    0[BANK0 ] unsigned long 
  5057 ;;  dividend        4    4[BANK0 ] unsigned long 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  counter         1    9[BANK0 ] unsigned char 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  4    0[BANK0 ] unsigned long 
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5069 ;;      Params:         0       8       0       0       0
  5070 ;;      Locals:         0       1       0       0       0
  5071 ;;      Temps:          0       1       0       0       0
  5072 ;;      Totals:         0      10       0       0       0
  5073 ;;Total ram usage:       10 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    2
  5076 ;; This function calls:
  5077 ;;		Nothing
  5078 ;; This function is called by:
  5079 ;;		_SendMemoryData
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           
  5084                           ;psect for function ___llmod
  5085  0967                     ___llmod:	
  5086                           
  5087                           ;incstack = 0
  5088                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5089  0967  1283               	bcf	3,5	;RP0=0, select bank0
  5090  0968  1303               	bcf	3,6	;RP1=0, select bank0
  5091  0969  0823               	movf	___llmod@divisor+3,w
  5092  096A  0422               	iorwf	___llmod@divisor+2,w
  5093  096B  0421               	iorwf	___llmod@divisor+1,w
  5094  096C  0420               	iorwf	___llmod@divisor,w
  5095  096D  1903               	skipnz
  5096  096E  29AC               	goto	l2614
  5097  096F  01A9               	clrf	___llmod@counter
  5098  0970  0AA9               	incf	___llmod@counter,f
  5099  0971                     l2604:	
  5100  0971  1BA3               	btfsc	___llmod@divisor+3,7
  5101  0972  2981               	goto	l2606
  5102  0973  3001               	movlw	1
  5103  0974  00A8               	movwf	??___llmod
  5104  0975                     u1535:	
  5105  0975  1003               	clrc
  5106  0976  0DA0               	rlf	___llmod@divisor,f
  5107  0977  0DA1               	rlf	___llmod@divisor+1,f
  5108  0978  0DA2               	rlf	___llmod@divisor+2,f
  5109  0979  0DA3               	rlf	___llmod@divisor+3,f
  5110  097A  0BA8               	decfsz	??___llmod,f
  5111  097B  2975               	goto	u1535
  5112  097C  3001               	movlw	1
  5113  097D  00A8               	movwf	??___llmod
  5114  097E  0828               	movf	??___llmod,w
  5115  097F  07A9               	addwf	___llmod@counter,f
  5116  0980  2971               	goto	l2604
  5117  0981                     l2606:	
  5118  0981  0823               	movf	___llmod@divisor+3,w
  5119  0982  0227               	subwf	___llmod@dividend+3,w
  5120  0983  1D03               	skipz
  5121  0984  298F               	goto	u1555
  5122  0985  0822               	movf	___llmod@divisor+2,w
  5123  0986  0226               	subwf	___llmod@dividend+2,w
  5124  0987  1D03               	skipz
  5125  0988  298F               	goto	u1555
  5126  0989  0821               	movf	___llmod@divisor+1,w
  5127  098A  0225               	subwf	___llmod@dividend+1,w
  5128  098B  1D03               	skipz
  5129  098C  298F               	goto	u1555
  5130  098D  0820               	movf	___llmod@divisor,w
  5131  098E  0224               	subwf	___llmod@dividend,w
  5132  098F                     u1555:	
  5133  098F  1C03               	skipc
  5134  0990  299F               	goto	l2610
  5135  0991  0820               	movf	___llmod@divisor,w
  5136  0992  02A4               	subwf	___llmod@dividend,f
  5137  0993  0821               	movf	___llmod@divisor+1,w
  5138  0994  1C03               	skipc
  5139  0995  0F21               	incfsz	___llmod@divisor+1,w
  5140  0996  02A5               	subwf	___llmod@dividend+1,f
  5141  0997  0822               	movf	___llmod@divisor+2,w
  5142  0998  1C03               	skipc
  5143  0999  0F22               	incfsz	___llmod@divisor+2,w
  5144  099A  02A6               	subwf	___llmod@dividend+2,f
  5145  099B  0823               	movf	___llmod@divisor+3,w
  5146  099C  1C03               	skipc
  5147  099D  0F23               	incfsz	___llmod@divisor+3,w
  5148  099E  02A7               	subwf	___llmod@dividend+3,f
  5149  099F                     l2610:	
  5150  099F  3001               	movlw	1
  5151  09A0                     u1565:	
  5152  09A0  1003               	clrc
  5153  09A1  0CA3               	rrf	___llmod@divisor+3,f
  5154  09A2  0CA2               	rrf	___llmod@divisor+2,f
  5155  09A3  0CA1               	rrf	___llmod@divisor+1,f
  5156  09A4  0CA0               	rrf	___llmod@divisor,f
  5157  09A5  3EFF               	addlw	-1
  5158  09A6  1D03               	skipz
  5159  09A7  29A0               	goto	u1565
  5160  09A8  3001               	movlw	1
  5161  09A9  02A9               	subwf	___llmod@counter,f
  5162  09AA  1D03               	btfss	3,2
  5163  09AB  2981               	goto	l2606
  5164  09AC                     l2614:	
  5165  09AC  0827               	movf	___llmod@dividend+3,w
  5166  09AD  00A3               	movwf	?___llmod+3
  5167  09AE  0826               	movf	___llmod@dividend+2,w
  5168  09AF  00A2               	movwf	?___llmod+2
  5169  09B0  0825               	movf	___llmod@dividend+1,w
  5170  09B1  00A1               	movwf	?___llmod+1
  5171  09B2  0824               	movf	___llmod@dividend,w
  5172  09B3  00A0               	movwf	?___llmod
  5173  09B4  0008               	return
  5174  09B5                     __end_of___llmod:	
  5175                           
  5176                           	psect	text18
  5177  1719                     __ptext18:	
  5178 ;; *************** function _ReadMemoryAdress *****************
  5179 ;; Defined at:
  5180 ;;		line 988 in file "functions.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  var3            1    wreg     PTR unsigned char 
  5183 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), 
  5184 ;;  var2            1    2[BANK0 ] PTR unsigned char 
  5185 ;;		 -> SendMemoryData@addr2(1), saveDataToFlash@addr2(1), 
  5186 ;;  var1            1    3[BANK0 ] PTR unsigned char 
  5187 ;;		 -> SendMemoryData@addr1(1), saveDataToFlash@addr1(1), 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  var3            1    5[BANK0 ] PTR unsigned char 
  5190 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), 
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  1    wreg      void 
  5193 ;; Registers used:
  5194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5200 ;;      Params:         0       2       0       0       0
  5201 ;;      Locals:         0       1       0       0       0
  5202 ;;      Temps:          0       1       0       0       0
  5203 ;;      Totals:         0       4       0       0       0
  5204 ;;Total ram usage:        4 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    3
  5207 ;; This function calls:
  5208 ;;		_eeprom_read
  5209 ;; This function is called by:
  5210 ;;		_saveDataToFlash
  5211 ;;		_SendMemoryData
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _ReadMemoryAdress
  5217  1719                     _ReadMemoryAdress:	
  5218                           
  5219                           ;incstack = 0
  5220                           ; Regs used in _ReadMemoryAdress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5221                           ;ReadMemoryAdress@var3 stored from wreg
  5222  1719  1283               	bcf	3,5	;RP0=0, select bank0
  5223  171A  1303               	bcf	3,6	;RP1=0, select bank0
  5224  171B  00A5               	movwf	ReadMemoryAdress@var3
  5225                           
  5226                           ;functions.c: 990: *var3 = eeprom_read(1);
  5227  171C  3001               	movlw	1
  5228  171D  160A  118A  26A3  160A  118A  	fcall	_eeprom_read
  5229  1722  1283               	bcf	3,5	;RP0=0, select bank0
  5230  1723  1303               	bcf	3,6	;RP1=0, select bank0
  5231  1724  00A4               	movwf	??_ReadMemoryAdress
  5232  1725  0825               	movf	ReadMemoryAdress@var3,w
  5233  1726  0084               	movwf	4
  5234  1727  0824               	movf	??_ReadMemoryAdress,w
  5235  1728  1383               	bcf	3,7	;select IRP bank0
  5236  1729  0080               	movwf	0
  5237                           
  5238                           ;functions.c: 991: *var2 = eeprom_read(2);
  5239  172A  3002               	movlw	2
  5240  172B  160A  118A  26A3  160A  118A  	fcall	_eeprom_read
  5241  1730  1283               	bcf	3,5	;RP0=0, select bank0
  5242  1731  1303               	bcf	3,6	;RP1=0, select bank0
  5243  1732  00A4               	movwf	??_ReadMemoryAdress
  5244  1733  0822               	movf	ReadMemoryAdress@var2,w
  5245  1734  0084               	movwf	4
  5246  1735  0824               	movf	??_ReadMemoryAdress,w
  5247  1736  1383               	bcf	3,7	;select IRP bank0
  5248  1737  0080               	movwf	0
  5249                           
  5250                           ;functions.c: 992: *var1 = eeprom_read(3);
  5251  1738  3003               	movlw	3
  5252  1739  160A  118A  26A3   	fcall	_eeprom_read
  5253  173C  1283               	bcf	3,5	;RP0=0, select bank0
  5254  173D  1303               	bcf	3,6	;RP1=0, select bank0
  5255  173E  00A4               	movwf	??_ReadMemoryAdress
  5256  173F  0823               	movf	ReadMemoryAdress@var1,w
  5257  1740  0084               	movwf	4
  5258  1741  0824               	movf	??_ReadMemoryAdress,w
  5259  1742  1383               	bcf	3,7	;select IRP bank0
  5260  1743  0080               	movwf	0
  5261  1744  0008               	return
  5262  1745                     __end_of_ReadMemoryAdress:	
  5263                           
  5264                           	psect	text19
  5265  1643                     __ptext19:	
  5266 ;; *************** function _ResetMemoryAdress *****************
  5267 ;; Defined at:
  5268 ;;		line 1052 in file "functions.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;		None
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;		None
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  1    wreg      void 
  5275 ;; Registers used:
  5276 ;;		wreg, status,2, status,0, pclath, cstack
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5282 ;;      Params:         0       0       0       0       0
  5283 ;;      Locals:         0       0       0       0       0
  5284 ;;      Temps:          0       0       0       0       0
  5285 ;;      Totals:         0       0       0       0       0
  5286 ;;Total ram usage:        0 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    3
  5289 ;; This function calls:
  5290 ;;		_eeprom_write
  5291 ;; This function is called by:
  5292 ;;		_main
  5293 ;;		_ReceivedPacketHandler
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           
  5298                           ;psect for function _ResetMemoryAdress
  5299  1643                     _ResetMemoryAdress:	
  5300                           
  5301                           ;functions.c: 1054: eeprom_write(3,0);
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _ResetMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  5305  1643  1283               	bcf	3,5	;RP0=0, select bank0
  5306  1644  1303               	bcf	3,6	;RP1=0, select bank0
  5307  1645  01A0               	clrf	eeprom_write@value
  5308  1646  3003               	movlw	3
  5309  1647  160A  118A  279D  160A  118A  	fcall	_eeprom_write
  5310                           
  5311                           ;functions.c: 1055: eeprom_write(2,0);
  5312  164C  1283               	bcf	3,5	;RP0=0, select bank0
  5313  164D  1303               	bcf	3,6	;RP1=0, select bank0
  5314  164E  01A0               	clrf	eeprom_write@value
  5315  164F  3002               	movlw	2
  5316  1650  160A  118A  279D  160A  118A  	fcall	_eeprom_write
  5317                           
  5318                           ;functions.c: 1056: eeprom_write(1,0);
  5319  1655  1283               	bcf	3,5	;RP0=0, select bank0
  5320  1656  1303               	bcf	3,6	;RP1=0, select bank0
  5321  1657  01A0               	clrf	eeprom_write@value
  5322  1658  3001               	movlw	1
  5323  1659  160A  118A  279D   	fcall	_eeprom_write
  5324  165C  0008               	return
  5325  165D                     __end_of_ResetMemoryAdress:	
  5326                           
  5327                           	psect	text20
  5328  179D                     __ptext20:	
  5329 ;; *************** function _eeprom_write *****************
  5330 ;; Defined at:
  5331 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eewrite.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;  addr            1    wreg     unsigned char 
  5334 ;;  value           1    0[BANK0 ] unsigned char 
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;  addr            1    2[BANK0 ] unsigned char 
  5337 ;; Return value:  Size  Location     Type
  5338 ;;                  1    wreg      void 
  5339 ;; Registers used:
  5340 ;;		wreg, status,2, status,0
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5346 ;;      Params:         0       1       0       0       0
  5347 ;;      Locals:         0       1       0       0       0
  5348 ;;      Temps:          0       1       0       0       0
  5349 ;;      Totals:         0       3       0       0       0
  5350 ;;Total ram usage:        3 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; Hardware stack levels required when called:    2
  5353 ;; This function calls:
  5354 ;;		Nothing
  5355 ;; This function is called by:
  5356 ;;		_ReceivedPacketHandler
  5357 ;;		_IncreaseMemoryAdress
  5358 ;;		_ResetMemoryAdress
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _eeprom_write
  5364  179D                     _eeprom_write:	
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  5368                           ;eeprom_write@addr stored from wreg
  5369  179D  1283               	bcf	3,5	;RP0=0, select bank0
  5370  179E  1303               	bcf	3,6	;RP1=0, select bank0
  5371  179F  00A2               	movwf	eeprom_write@addr
  5372  17A0                     l706:	
  5373  17A0  1683               	bsf	3,5	;RP0=1, select bank3
  5374  17A1  1703               	bsf	3,6	;RP1=1, select bank3
  5375  17A2  188C               	btfsc	12,1	;volsfr
  5376  17A3  2FA0               	goto	l706
  5377  17A4  1283               	bcf	3,5	;RP0=0, select bank0
  5378  17A5  1303               	bcf	3,6	;RP1=0, select bank0
  5379  17A6  0822               	movf	eeprom_write@addr,w
  5380  17A7  1283               	bcf	3,5	;RP0=0, select bank2
  5381  17A8  1703               	bsf	3,6	;RP1=1, select bank2
  5382  17A9  008D               	movwf	13	;volatile
  5383  17AA  1283               	bcf	3,5	;RP0=0, select bank0
  5384  17AB  1303               	bcf	3,6	;RP1=0, select bank0
  5385  17AC  0820               	movf	eeprom_write@value,w
  5386  17AD  1283               	bcf	3,5	;RP0=0, select bank2
  5387  17AE  1703               	bsf	3,6	;RP1=1, select bank2
  5388  17AF  008C               	movwf	12	;volatile
  5389  17B0  303F               	movlw	63
  5390  17B1  1283               	bcf	3,5	;RP0=0, select bank0
  5391  17B2  1303               	bcf	3,6	;RP1=0, select bank0
  5392  17B3  00A1               	movwf	??_eeprom_write
  5393  17B4  0821               	movf	??_eeprom_write,w
  5394  17B5  1683               	bsf	3,5	;RP0=1, select bank3
  5395  17B6  1703               	bsf	3,6	;RP1=1, select bank3
  5396  17B7  058C               	andwf	12,f	;volsfr
  5397  17B8  1283               	bcf	3,5	;RP0=0, select bank0
  5398  17B9  1303               	bcf	3,6	;RP1=0, select bank0
  5399  17BA  1003               	bcf	3,0	;volatile
  5400  17BB  1B8B               	btfsc	11,7	;volatile
  5401  17BC  1403               	bsf	3,0	;volatile
  5402  17BD  138B               	bcf	11,7	;volatile
  5403  17BE  1683               	bsf	3,5	;RP0=1, select bank3
  5404  17BF  1703               	bsf	3,6	;RP1=1, select bank3
  5405  17C0  150C               	bsf	12,2	;volsfr
  5406  17C1  3055               	movlw	85
  5407  17C2  008D               	movwf	13	;volsfr
  5408  17C3  30AA               	movlw	170
  5409  17C4  008D               	movwf	13	;volsfr
  5410  17C5  148C               	bsf	12,1	;volsfr
  5411  17C6  110C               	bcf	12,2	;volsfr
  5412  17C7  1283               	bcf	3,5	;RP0=0, select bank0
  5413  17C8  1303               	bcf	3,6	;RP1=0, select bank0
  5414  17C9  1C03               	btfss	3,0	;volatile
  5415  17CA  0008               	return
  5416  17CB  178B               	bsf	11,7	;volatile
  5417  17CC  0008               	return
  5418  17CD                     __end_of_eeprom_write:	
  5419                           
  5420                           	psect	text21
  5421  156F                     __ptext21:	
  5422 ;; *************** function _OperationMode *****************
  5423 ;; Defined at:
  5424 ;;		line 964 in file "functions.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;  bracketStatu    1    1[BANK0 ] unsigned char 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      unsigned char 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5438 ;;      Params:         0       0       0       0       0
  5439 ;;      Locals:         0       1       0       0       0
  5440 ;;      Temps:          0       1       0       0       0
  5441 ;;      Totals:         0       2       0       0       0
  5442 ;;Total ram usage:        2 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    2
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_main
  5449 ;;		_ReceivedPacketHandler
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _OperationMode
  5455  156F                     _OperationMode:	
  5456                           
  5457                           ;functions.c: 966: unsigned char bracketStatus;
  5458                           ;functions.c: 967: bracketStatus = ((~PORTB) & 0b00000111) ;
  5459                           
  5460                           ;incstack = 0
  5461                           ; Regs used in _OperationMode: [wreg+status,2]
  5462  156F  1283               	bcf	3,5	;RP0=0, select bank0
  5463  1570  1303               	bcf	3,6	;RP1=0, select bank0
  5464  1571  0906               	comf	6,w	;volatile
  5465  1572  3907               	andlw	7
  5466  1573  00A0               	movwf	??_OperationMode
  5467  1574  0820               	movf	??_OperationMode,w
  5468  1575  00A1               	movwf	OperationMode@bracketStatus
  5469                           
  5470                           ;functions.c: 969: return bracketStatus;
  5471  1576  0821               	movf	OperationMode@bracketStatus,w
  5472  1577  0008               	return
  5473  1578                     __end_of_OperationMode:	
  5474                           
  5475                           	psect	text22
  5476  07F1                     __ptext22:	
  5477 ;; *************** function _ReadFIFO *****************
  5478 ;; Defined at:
  5479 ;;		line 775 in file "functions.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;		None
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;  value           1    4[BANK0 ] unsigned char 
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      unsigned char 
  5486 ;; Registers used:
  5487 ;;		wreg, status,2, status,0, pclath, cstack
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5493 ;;      Params:         0       0       0       0       0
  5494 ;;      Locals:         0       1       0       0       0
  5495 ;;      Temps:          0       1       0       0       0
  5496 ;;      Totals:         0       2       0       0       0
  5497 ;;Total ram usage:        2 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    4
  5500 ;; This function calls:
  5501 ;;		_ReadSPI
  5502 ;; This function is called by:
  5503 ;;		_TransiverReadFIFO
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507                           
  5508                           ;psect for function _ReadFIFO
  5509  07F1                     _ReadFIFO:	
  5510                           
  5511                           ;functions.c: 777: BYTE value;
  5512                           ;functions.c: 778: RA5 = 0;
  5513                           
  5514                           ;incstack = 0
  5515                           ; Regs used in _ReadFIFO: [wreg+status,2+status,0+pclath+cstack]
  5516  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  5517  07F2  1303               	bcf	3,6	;RP1=0, select bank0
  5518  07F3  1285               	bcf	5,5	;volatile
  5519                           
  5520                           ;functions.c: 779: value = ReadSPI();
  5521  07F4  160A  118A  2556   	fcall	_ReadSPI
  5522  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  5523  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  5524  07F9  00A3               	movwf	??_ReadFIFO
  5525  07FA  0823               	movf	??_ReadFIFO,w
  5526  07FB  00A4               	movwf	ReadFIFO@value
  5527                           
  5528                           ;functions.c: 780: RA5 = 1;
  5529  07FC  1685               	bsf	5,5	;volatile
  5530                           
  5531                           ;functions.c: 781: return value;
  5532  07FD  0824               	movf	ReadFIFO@value,w
  5533  07FE  0008               	return
  5534  07FF                     __end_of_ReadFIFO:	
  5535                           
  5536                           	psect	text23
  5537  0F16                     __ptext23:	
  5538 ;; *************** function _TransiverInit *****************
  5539 ;; Defined at:
  5540 ;;		line 540 in file "functions.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;		None
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;		None
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  1    wreg      void 
  5547 ;; Registers used:
  5548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5554 ;;      Params:         0       0       0       0       0
  5555 ;;      Locals:         0       0       0       0       0
  5556 ;;      Temps:          0       1       0       0       0
  5557 ;;      Totals:         0       1       0       0       0
  5558 ;;Total ram usage:        1 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:    7
  5561 ;; This function calls:
  5562 ;;		_Blink
  5563 ;;		_FindChannel
  5564 ;;		_RegisterRead
  5565 ;;		_RegisterSet
  5566 ;;		_SetRFMode
  5567 ;; This function is called by:
  5568 ;;		_main
  5569 ;; This function uses a non-reentrant model
  5570 ;;
  5571                           
  5572                           
  5573                           ;psect for function _TransiverInit
  5574  0F16                     _TransiverInit:	
  5575                           
  5576                           ;functions.c: 543: RegisterSet(0x00, 0x30);
  5577                           
  5578                           ;incstack = 0
  5579                           ; Regs used in _TransiverInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5580  0F16  3030               	movlw	48
  5581  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  5582  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  5583  0F19  00B5               	movwf	??_TransiverInit
  5584  0F1A  0835               	movf	??_TransiverInit,w
  5585  0F1B  00A7               	movwf	RegisterSet@value
  5586  0F1C  3000               	movlw	0
  5587  0F1D  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5588                           
  5589                           ;functions.c: 544: RegisterSet(0x01,(0xA8));
  5590  0F22  30A8               	movlw	168
  5591  0F23  1283               	bcf	3,5	;RP0=0, select bank0
  5592  0F24  1303               	bcf	3,6	;RP1=0, select bank0
  5593  0F25  00B5               	movwf	??_TransiverInit
  5594  0F26  0835               	movf	??_TransiverInit,w
  5595  0F27  00A7               	movwf	RegisterSet@value
  5596  0F28  3001               	movlw	1
  5597  0F29  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5598                           
  5599                           ;functions.c: 545: RegisterSet(0x02, 0x09);
  5600  0F2E  3009               	movlw	9
  5601  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  5602  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  5603  0F31  00B5               	movwf	??_TransiverInit
  5604  0F32  0835               	movf	??_TransiverInit,w
  5605  0F33  00A7               	movwf	RegisterSet@value
  5606  0F34  3002               	movlw	2
  5607  0F35  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5608                           
  5609                           ;functions.c: 546: RegisterSet(0x03, 0x07);
  5610  0F3A  3007               	movlw	7
  5611  0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  5612  0F3C  1303               	bcf	3,6	;RP1=0, select bank0
  5613  0F3D  00B5               	movwf	??_TransiverInit
  5614  0F3E  0835               	movf	??_TransiverInit,w
  5615  0F3F  00A7               	movwf	RegisterSet@value
  5616  0F40  3003               	movlw	3
  5617  0F41  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5618                           
  5619                           ;functions.c: 547: RegisterSet(0x05,(0x0A));
  5620  0F46  300A               	movlw	10
  5621  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  5622  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  5623  0F49  00B5               	movwf	??_TransiverInit
  5624  0F4A  0835               	movf	??_TransiverInit,w
  5625  0F4B  00A7               	movwf	RegisterSet@value
  5626  0F4C  3005               	movlw	5
  5627  0F4D  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5628                           
  5629                           ;functions.c: 548: RegisterSet(0x0D,(0x00|0xB0|0x09));
  5630  0F52  30B9               	movlw	185
  5631  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  5632  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  5633  0F55  00B5               	movwf	??_TransiverInit
  5634  0F56  0835               	movf	??_TransiverInit,w
  5635  0F57  00A7               	movwf	RegisterSet@value
  5636  0F58  300D               	movlw	13
  5637  0F59  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5638                           
  5639                           ;functions.c: 549: RegisterSet(0x0E,(0x01|0x10|0x01));
  5640  0F5E  3011               	movlw	17
  5641  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  5642  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  5643  0F61  00B5               	movwf	??_TransiverInit
  5644  0F62  0835               	movf	??_TransiverInit,w
  5645  0F63  00A7               	movwf	RegisterSet@value
  5646  0F64  300E               	movlw	14
  5647  0F65  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5648                           
  5649                           ;functions.c: 550: RegisterSet(0x10, 0xA3);
  5650  0F6A  30A3               	movlw	163
  5651  0F6B  1283               	bcf	3,5	;RP0=0, select bank0
  5652  0F6C  1303               	bcf	3,6	;RP1=0, select bank0
  5653  0F6D  00B5               	movwf	??_TransiverInit
  5654  0F6E  0835               	movf	??_TransiverInit,w
  5655  0F6F  00A7               	movwf	RegisterSet@value
  5656  0F70  3010               	movlw	16
  5657  0F71  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5658                           
  5659                           ;functions.c: 551: RegisterSet(0x12,(0x18|0x20|0x06));
  5660  0F76  303E               	movlw	62
  5661  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  5662  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  5663  0F79  00B5               	movwf	??_TransiverInit
  5664  0F7A  0835               	movf	??_TransiverInit,w
  5665  0F7B  00A7               	movwf	RegisterSet@value
  5666  0F7C  3012               	movlw	18
  5667  0F7D  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5668                           
  5669                           ;functions.c: 552: RegisterSet(0x16,('S'));
  5670  0F82  3053               	movlw	83
  5671  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  5672  0F84  1303               	bcf	3,6	;RP1=0, select bank0
  5673  0F85  00B5               	movwf	??_TransiverInit
  5674  0F86  0835               	movf	??_TransiverInit,w
  5675  0F87  00A7               	movwf	RegisterSet@value
  5676  0F88  3016               	movlw	22
  5677  0F89  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5678                           
  5679                           ;functions.c: 553: RegisterSet(0x17,('Y'));
  5680  0F8E  3059               	movlw	89
  5681  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  5682  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  5683  0F91  00B5               	movwf	??_TransiverInit
  5684  0F92  0835               	movf	??_TransiverInit,w
  5685  0F93  00A7               	movwf	RegisterSet@value
  5686  0F94  3017               	movlw	23
  5687  0F95  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5688                           
  5689                           ;functions.c: 554: RegisterSet(0x18,('N'));
  5690  0F9A  304E               	movlw	78
  5691  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  5692  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  5693  0F9D  00B5               	movwf	??_TransiverInit
  5694  0F9E  0835               	movf	??_TransiverInit,w
  5695  0F9F  00A7               	movwf	RegisterSet@value
  5696  0FA0  3018               	movlw	24
  5697  0FA1  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5698                           
  5699                           ;functions.c: 555: RegisterSet(0x19,('C'));
  5700  0FA6  3043               	movlw	67
  5701  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  5702  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  5703  0FA9  00B5               	movwf	??_TransiverInit
  5704  0FAA  0835               	movf	??_TransiverInit,w
  5705  0FAB  00A7               	movwf	RegisterSet@value
  5706  0FAC  3019               	movlw	25
  5707  0FAD  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5708                           
  5709                           ;functions.c: 556: RegisterSet(0x1A, 0x72);
  5710  0FB2  3072               	movlw	114
  5711  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  5712  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  5713  0FB5  00B5               	movwf	??_TransiverInit
  5714  0FB6  0835               	movf	??_TransiverInit,w
  5715  0FB7  00A7               	movwf	RegisterSet@value
  5716  0FB8  301A               	movlw	26
  5717  0FB9  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5718                           
  5719                           ;functions.c: 557: RegisterSet(0x1B, 0x3C);
  5720  0FBE  303C               	movlw	60
  5721  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  5722  0FC0  1303               	bcf	3,6	;RP1=0, select bank0
  5723  0FC1  00B5               	movwf	??_TransiverInit
  5724  0FC2  0835               	movf	??_TransiverInit,w
  5725  0FC3  00A7               	movwf	RegisterSet@value
  5726  0FC4  301B               	movlw	27
  5727  0FC5  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5728                           
  5729                           ;functions.c: 558: RegisterSet(0x1F, 0x80);
  5730  0FCA  3080               	movlw	128
  5731  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  5732  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  5733  0FCD  00B5               	movwf	??_TransiverInit
  5734  0FCE  0835               	movf	??_TransiverInit,w
  5735  0FCF  00A7               	movwf	RegisterSet@value
  5736  0FD0  301F               	movlw	31
  5737  0FD1  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5738                           
  5739                           ;functions.c: 559: RegisterSet(0x00, (RegisterRead(0x00)|0x01));
  5740  0FD6  3000               	movlw	0
  5741  0FD7  120A  158A  2040  120A  158A  	fcall	_RegisterRead
  5742  0FDC  3801               	iorlw	1
  5743  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  5744  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  5745  0FDF  00B5               	movwf	??_TransiverInit
  5746  0FE0  0835               	movf	??_TransiverInit,w
  5747  0FE1  00A7               	movwf	RegisterSet@value
  5748  0FE2  3000               	movlw	0
  5749  0FE3  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  5750                           
  5751                           ;functions.c: 561: if(FindChannel() == 1)
  5752  0FE8  120A  118A  26FB  120A  158A  	fcall	_FindChannel
  5753  0FED  3A01               	xorlw	1
  5754  0FEE  1D03               	skipz
  5755  0FEF  2FFB               	goto	l3098
  5756                           
  5757                           ;functions.c: 562: Blink(1);
  5758  0FF0  3001               	movlw	1
  5759  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  5760  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  5761  0FF3  00A6               	movwf	Blink@n
  5762  0FF4  3000               	movlw	0
  5763  0FF5  00A7               	movwf	Blink@n+1
  5764  0FF6  160A  118A  27CD  120A  158A  	fcall	_Blink
  5765  0FFB                     l3098:	
  5766                           
  5767                           ;functions.c: 563: SetRFMode(0x00);
  5768  0FFB  3000               	movlw	0
  5769  0FFC  120A  158A  233E   	fcall	_SetRFMode
  5770  0FFF  0008               	return
  5771  1000                     __end_of_TransiverInit:	
  5772                           
  5773                           	psect	text24
  5774  17CD                     __ptext24:	
  5775 ;; *************** function _Blink *****************
  5776 ;; Defined at:
  5777 ;;		line 688 in file "functions.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;  n               2    6[BANK0 ] int 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  i               2    9[BANK0 ] int 
  5782 ;; Return value:  Size  Location     Type
  5783 ;;                  1    wreg      void 
  5784 ;; Registers used:
  5785 ;;		wreg, status,2, status,0, pclath, cstack
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5791 ;;      Params:         0       2       0       0       0
  5792 ;;      Locals:         0       2       0       0       0
  5793 ;;      Temps:          0       1       0       0       0
  5794 ;;      Totals:         0       5       0       0       0
  5795 ;;Total ram usage:        5 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    3
  5798 ;; This function calls:
  5799 ;;		_DelayDs
  5800 ;; This function is called by:
  5801 ;;		_TransiverInit
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           
  5806                           ;psect for function _Blink
  5807  17CD                     _Blink:	
  5808                           
  5809                           ;functions.c: 690: for(int i = 1;i<=n;i++)
  5810                           
  5811                           ;incstack = 0
  5812                           ; Regs used in _Blink: [wreg+status,2+status,0+pclath+cstack]
  5813  17CD  3001               	movlw	1
  5814  17CE  1283               	bcf	3,5	;RP0=0, select bank0
  5815  17CF  1303               	bcf	3,6	;RP1=0, select bank0
  5816  17D0  00A9               	movwf	Blink@i
  5817  17D1  3000               	movlw	0
  5818  17D2  00AA               	movwf	Blink@i+1
  5819  17D3                     l2936:	
  5820  17D3  0827               	movf	Blink@n+1,w
  5821  17D4  3A80               	xorlw	128
  5822  17D5  00A8               	movwf	??_Blink
  5823  17D6  082A               	movf	Blink@i+1,w
  5824  17D7  3A80               	xorlw	128
  5825  17D8  0228               	subwf	??_Blink,w
  5826  17D9  1D03               	skipz
  5827  17DA  2FDD               	goto	u2095
  5828  17DB  0829               	movf	Blink@i,w
  5829  17DC  0226               	subwf	Blink@n,w
  5830  17DD                     u2095:	
  5831  17DD  1C03               	btfss	3,0
  5832  17DE  0008               	return
  5833                           
  5834                           ;functions.c: 691: {
  5835                           ;functions.c: 692: RC1 = 1;
  5836  17DF  1283               	bcf	3,5	;RP0=0, select bank0
  5837  17E0  1303               	bcf	3,6	;RP1=0, select bank0
  5838  17E1  1487               	bsf	7,1	;volatile
  5839                           
  5840                           ;functions.c: 693: DelayDs(2);
  5841  17E2  3002               	movlw	2
  5842  17E3  00A0               	movwf	DelayDs@cnt
  5843  17E4  3000               	movlw	0
  5844  17E5  00A1               	movwf	DelayDs@cnt+1
  5845  17E6  160A  118A  267F  160A  118A  	fcall	_DelayDs
  5846                           
  5847                           ;functions.c: 694: RC1 = 0;
  5848  17EB  1283               	bcf	3,5	;RP0=0, select bank0
  5849  17EC  1303               	bcf	3,6	;RP1=0, select bank0
  5850  17ED  1087               	bcf	7,1	;volatile
  5851                           
  5852                           ;functions.c: 695: DelayDs(6);
  5853  17EE  3006               	movlw	6
  5854  17EF  00A0               	movwf	DelayDs@cnt
  5855  17F0  3000               	movlw	0
  5856  17F1  00A1               	movwf	DelayDs@cnt+1
  5857  17F2  160A  118A  267F  160A  118A  	fcall	_DelayDs
  5858  17F7  3001               	movlw	1
  5859  17F8  1283               	bcf	3,5	;RP0=0, select bank0
  5860  17F9  1303               	bcf	3,6	;RP1=0, select bank0
  5861  17FA  07A9               	addwf	Blink@i,f
  5862  17FB  1803               	skipnc
  5863  17FC  0AAA               	incf	Blink@i+1,f
  5864  17FD  3000               	movlw	0
  5865  17FE  07AA               	addwf	Blink@i+1,f
  5866  17FF  2FD3               	goto	l2936
  5867  1800                     __end_of_Blink:	
  5868                           
  5869                           	psect	text25
  5870  0A6E                     __ptext25:	
  5871 ;; *************** function _PICInit *****************
  5872 ;; Defined at:
  5873 ;;		line 428 in file "functions.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;		None
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;		None
  5878 ;; Return value:  Size  Location     Type
  5879 ;;                  1    wreg      void 
  5880 ;; Registers used:
  5881 ;;		wreg, status,2, status,0
  5882 ;; Tracked objects:
  5883 ;;		On entry : 0/0
  5884 ;;		On exit  : 0/0
  5885 ;;		Unchanged: 0/0
  5886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5887 ;;      Params:         0       0       0       0       0
  5888 ;;      Locals:         0       0       0       0       0
  5889 ;;      Temps:          0       0       0       0       0
  5890 ;;      Totals:         0       0       0       0       0
  5891 ;;Total ram usage:        0 bytes
  5892 ;; Hardware stack levels used:    1
  5893 ;; Hardware stack levels required when called:    2
  5894 ;; This function calls:
  5895 ;;		Nothing
  5896 ;; This function is called by:
  5897 ;;		_main
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901                           
  5902                           ;psect for function _PICInit
  5903  0A6E                     _PICInit:	
  5904                           
  5905                           ;functions.c: 432: OSCCONbits.IRCF2 = 1;
  5906                           
  5907                           ;incstack = 0
  5908                           ; Regs used in _PICInit: [wreg+status,2+status,0]
  5909  0A6E  1683               	bsf	3,5	;RP0=1, select bank1
  5910  0A6F  1303               	bcf	3,6	;RP1=0, select bank1
  5911  0A70  170F               	bsf	15,6	;volatile
  5912                           
  5913                           ;functions.c: 433: OSCCONbits.IRCF1 = 1;
  5914  0A71  168F               	bsf	15,5	;volatile
  5915                           
  5916                           ;functions.c: 434: OSCCONbits.IRCF0 = 0;
  5917  0A72  120F               	bcf	15,4	;volatile
  5918                           
  5919                           ;functions.c: 435: OSCCONbits.SCS = 1;
  5920  0A73  140F               	bsf	15,0	;volatile
  5921                           
  5922                           ;functions.c: 438: PORTA = 0x00;
  5923  0A74  1283               	bcf	3,5	;RP0=0, select bank0
  5924  0A75  1303               	bcf	3,6	;RP1=0, select bank0
  5925  0A76  0185               	clrf	5	;volatile
  5926                           
  5927                           ;functions.c: 439: PORTB = 0x00;
  5928  0A77  0186               	clrf	6	;volatile
  5929                           
  5930                           ;functions.c: 440: PORTC = 0x00;
  5931  0A78  0187               	clrf	7	;volatile
  5932                           
  5933                           ;functions.c: 441: PORTD = 0x00;
  5934  0A79  0188               	clrf	8	;volatile
  5935                           
  5936                           ;functions.c: 442: PORTE = 0x00;
  5937  0A7A  0189               	clrf	9	;volatile
  5938                           
  5939                           ;functions.c: 444: TRISA = 0b00001011;
  5940  0A7B  300B               	movlw	11
  5941  0A7C  1683               	bsf	3,5	;RP0=1, select bank1
  5942  0A7D  1303               	bcf	3,6	;RP1=0, select bank1
  5943  0A7E  0085               	movwf	5	;volatile
  5944                           
  5945                           ;functions.c: 445: TRISB = 0b00111101;
  5946  0A7F  303D               	movlw	61
  5947  0A80  0086               	movwf	6	;volatile
  5948                           
  5949                           ;functions.c: 446: TRISC = 0b00010000;
  5950  0A81  3010               	movlw	16
  5951  0A82  0087               	movwf	7	;volatile
  5952                           
  5953                           ;functions.c: 447: TRISD = 0b00000111;
  5954  0A83  3007               	movlw	7
  5955  0A84  0088               	movwf	8	;volatile
  5956                           
  5957                           ;functions.c: 448: TRISE = 0b00000111;
  5958  0A85  3007               	movlw	7
  5959  0A86  0089               	movwf	9	;volatile
  5960                           
  5961                           ;functions.c: 450: ANSEL = 0b00000000;
  5962  0A87  1683               	bsf	3,5	;RP0=1, select bank3
  5963  0A88  1703               	bsf	3,6	;RP1=1, select bank3
  5964  0A89  0188               	clrf	8	;volatile
  5965                           
  5966                           ;functions.c: 451: ANSELH = 0b00000000;
  5967  0A8A  0189               	clrf	9	;volatile
  5968                           
  5969                           ;functions.c: 452: ANSELbits.ANS0 = 1;
  5970  0A8B  1408               	bsf	8,0	;volatile
  5971                           
  5972                           ;functions.c: 453: ANSELbits.ANS3 = 1;
  5973  0A8C  1588               	bsf	8,3	;volatile
  5974                           
  5975                           ;functions.c: 454: ANSELbits.ANS5 = 1;
  5976  0A8D  1688               	bsf	8,5	;volatile
  5977                           
  5978                           ;functions.c: 455: ANSELbits.ANS6 = 1;
  5979  0A8E  1708               	bsf	8,6	;volatile
  5980                           
  5981                           ;functions.c: 456: ANSELbits.ANS7 = 1;
  5982  0A8F  1788               	bsf	8,7	;volatile
  5983                           
  5984                           ;functions.c: 457: ANSELHbits.ANS8 = 1;
  5985  0A90  1409               	bsf	9,0	;volatile
  5986                           
  5987                           ;functions.c: 459: OPTION_REGbits.nRBPU = 0;
  5988  0A91  1683               	bsf	3,5	;RP0=1, select bank1
  5989  0A92  1303               	bcf	3,6	;RP1=0, select bank1
  5990  0A93  1381               	bcf	1,7	;volatile
  5991                           
  5992                           ;functions.c: 460: WPUBbits.WPUB0 = 1;
  5993  0A94  1415               	bsf	21,0	;volatile
  5994  0A95                     l402:	
  5995                           ;functions.c: 461: while(!RB0);
  5996                           
  5997  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  5998  0A96  1C06               	btfss	6,0	;volatile
  5999  0A97  2A95               	goto	l402
  6000                           
  6001                           ;functions.c: 462: WPUBbits.WPUB5 = 1;
  6002  0A98  1683               	bsf	3,5	;RP0=1, select bank1
  6003  0A99  1303               	bcf	3,6	;RP1=0, select bank1
  6004  0A9A  1695               	bsf	21,5	;volatile
  6005  0A9B                     l405:	
  6006                           ;functions.c: 463: while(!RB5);
  6007                           
  6008  0A9B  1283               	bcf	3,5	;RP0=0, select bank0
  6009  0A9C  1E86               	btfss	6,5	;volatile
  6010  0A9D  2A9B               	goto	l405
  6011                           
  6012                           ;functions.c: 466: SSPCONbits.SSPM=0x00;
  6013  0A9E  30F0               	movlw	-16
  6014  0A9F  0594               	andwf	20,f	;volatile
  6015                           
  6016                           ;functions.c: 467: SSPCONbits.CKP=0;
  6017  0AA0  1214               	bcf	20,4	;volatile
  6018                           
  6019                           ;functions.c: 468: SSPSTATbits.CKE=1;
  6020  0AA1  1683               	bsf	3,5	;RP0=1, select bank1
  6021  0AA2  1303               	bcf	3,6	;RP1=0, select bank1
  6022  0AA3  1714               	bsf	20,6	;volatile
  6023                           
  6024                           ;functions.c: 469: SSPSTATbits.SMP=0;
  6025  0AA4  1394               	bcf	20,7	;volatile
  6026                           
  6027                           ;functions.c: 470: SSPCONbits.SSPEN=0x01;
  6028  0AA5  1283               	bcf	3,5	;RP0=0, select bank0
  6029  0AA6  1303               	bcf	3,6	;RP1=0, select bank0
  6030  0AA7  1694               	bsf	20,5	;volatile
  6031                           
  6032                           ;functions.c: 471: SSPIE = 0;
  6033  0AA8  1683               	bsf	3,5	;RP0=1, select bank1
  6034  0AA9  1303               	bcf	3,6	;RP1=0, select bank1
  6035  0AAA  118C               	bcf	12,3	;volatile
  6036                           
  6037                           ;functions.c: 474: RA5 = 1;
  6038  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  6039  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  6040  0AAD  1685               	bsf	5,5	;volatile
  6041                           
  6042                           ;functions.c: 475: RA4 = 1;
  6043  0AAE  1605               	bsf	5,4	;volatile
  6044                           
  6045                           ;functions.c: 476: RD4 = 1;
  6046  0AAF  1608               	bsf	8,4	;volatile
  6047                           
  6048                           ;functions.c: 477: RD3 = 1;
  6049  0AB0  1588               	bsf	8,3	;volatile
  6050                           
  6051                           ;functions.c: 479: RB1 = 1;
  6052  0AB1  1486               	bsf	6,1	;volatile
  6053                           
  6054                           ;functions.c: 484: INTCONbits.RBIE = 1;
  6055  0AB2  158B               	bsf	11,3	;volatile
  6056                           
  6057                           ;functions.c: 485: INTCONbits.PEIE = 1;
  6058  0AB3  170B               	bsf	11,6	;volatile
  6059                           
  6060                           ;functions.c: 486: PIE1bits.TMR1IE = 1;
  6061  0AB4  1683               	bsf	3,5	;RP0=1, select bank1
  6062  0AB5  1303               	bcf	3,6	;RP1=0, select bank1
  6063  0AB6  140C               	bsf	12,0	;volatile
  6064                           
  6065                           ;functions.c: 487: INTCONbits.GIE = 1;
  6066  0AB7  178B               	bsf	11,7	;volatile
  6067                           
  6068                           ;functions.c: 488: IOCBbits.IOCB5 = 1;
  6069  0AB8  1696               	bsf	22,5	;volatile
  6070                           
  6071                           ;functions.c: 491: T1CON = 0b00110000;
  6072  0AB9  3030               	movlw	48
  6073  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  6074  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  6075  0ABC  0090               	movwf	16	;volatile
  6076                           
  6077                           ;functions.c: 492: TMR1H = 0x0B;
  6078  0ABD  300B               	movlw	11
  6079  0ABE  008F               	movwf	15	;volatile
  6080                           
  6081                           ;functions.c: 493: TMR1L = 0xDB;
  6082  0ABF  30DB               	movlw	219
  6083  0AC0  008E               	movwf	14	;volatile
  6084                           
  6085                           ;functions.c: 494: T1CONbits.TMR1ON = 1;
  6086  0AC1  1410               	bsf	16,0	;volatile
  6087                           
  6088                           ;functions.c: 497: ADCON0bits.ADCS0 = 0;
  6089  0AC2  131F               	bcf	31,6	;volatile
  6090                           
  6091                           ;functions.c: 498: ADCON0bits.ADCS1 = 0;
  6092  0AC3  139F               	bcf	31,7	;volatile
  6093                           
  6094                           ;functions.c: 499: ADCON1bits.ADFM = 0;
  6095  0AC4  1683               	bsf	3,5	;RP0=1, select bank1
  6096  0AC5  1303               	bcf	3,6	;RP1=0, select bank1
  6097  0AC6  139F               	bcf	31,7	;volatile
  6098                           
  6099                           ;functions.c: 500: ADCON1bits.VCFG1 = 0;
  6100  0AC7  129F               	bcf	31,5	;volatile
  6101                           
  6102                           ;functions.c: 501: ADCON1bits.VCFG0 = 0;
  6103  0AC8  121F               	bcf	31,4	;volatile
  6104                           
  6105                           ;functions.c: 504: intSecondCounter = 0;
  6106  0AC9  1283               	bcf	3,5	;RP0=0, select bank0
  6107  0ACA  1303               	bcf	3,6	;RP1=0, select bank0
  6108  0ACB  01E5               	clrf	_intSecondCounter
  6109  0ACC  01E6               	clrf	_intSecondCounter+1
  6110                           
  6111                           ;functions.c: 505: intHalfSecondCounter = 0;
  6112  0ACD  01E1               	clrf	_intHalfSecondCounter
  6113  0ACE  01E2               	clrf	_intHalfSecondCounter+1
  6114                           
  6115                           ;functions.c: 506: intMinuteCounter = 0;
  6116  0ACF  01E3               	clrf	_intMinuteCounter
  6117  0AD0  01E4               	clrf	_intMinuteCounter+1
  6118  0AD1  0008               	return
  6119  0AD2                     __end_of_PICInit:	
  6120                           
  6121                           	psect	text26
  6122  15C1                     __ptext26:	
  6123 ;; *************** function _Mode_5 *****************
  6124 ;; Defined at:
  6125 ;;		line 329 in file "functions.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;		None
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;		None
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  1    wreg      void 
  6132 ;; Registers used:
  6133 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6139 ;;      Params:         0       0       0       0       0
  6140 ;;      Locals:         0       0       0       0       0
  6141 ;;      Temps:          0       1       0       0       0
  6142 ;;      Totals:         0       1       0       0       0
  6143 ;;Total ram usage:        1 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    8
  6146 ;; This function calls:
  6147 ;;		_LightWithSensController
  6148 ;;		_TransmittPacket
  6149 ;; This function is called by:
  6150 ;;		_main
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           
  6155                           ;psect for function _Mode_5
  6156  15C1                     _Mode_5:	
  6157                           
  6158                           ;functions.c: 331: if(!RB5)
  6159                           
  6160                           ;incstack = 0
  6161 ;; hardware stack exceeded
  6162                           ; Regs used in _Mode_5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6163  15C1  1283               	bcf	3,5	;RP0=0, select bank0
  6164  15C2  1303               	bcf	3,6	;RP1=0, select bank0
  6165  15C3  1A86               	btfsc	6,5	;volatile
  6166  15C4  2DCF               	goto	l3174
  6167                           
  6168                           ;functions.c: 332: {
  6169                           ;functions.c: 333: TransmittPacket(2, 2);
  6170  15C5  3002               	movlw	2
  6171  15C6  00BB               	movwf	??_Mode_5
  6172  15C7  083B               	movf	??_Mode_5,w
  6173  15C8  00B5               	movwf	TransmittPacket@value
  6174  15C9  3002               	movlw	2
  6175  15CA  120A  158A  24BB  160A  118A  	fcall	_TransmittPacket
  6176  15CF                     l3174:	
  6177                           
  6178                           ;functions.c: 334: }
  6179                           ;functions.c: 335: LightWithSensController();
  6180  15CF  120A  158A  205C   	fcall	_LightWithSensController
  6181  15D2  0008               	return
  6182  15D3                     __end_of_Mode_5:	
  6183                           
  6184                           	psect	text27
  6185  159F                     __ptext27:	
  6186 ;; *************** function _Mode_4 *****************
  6187 ;; Defined at:
  6188 ;;		line 317 in file "functions.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;		None
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;		None
  6193 ;; Return value:  Size  Location     Type
  6194 ;;                  1    wreg      void 
  6195 ;; Registers used:
  6196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : 0/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6202 ;;      Params:         0       0       0       0       0
  6203 ;;      Locals:         0       0       0       0       0
  6204 ;;      Temps:          0       0       0       0       0
  6205 ;;      Totals:         0       0       0       0       0
  6206 ;;Total ram usage:        0 bytes
  6207 ;; Hardware stack levels used:    1
  6208 ;; Hardware stack levels required when called:    8
  6209 ;; This function calls:
  6210 ;;		_LightWithSensController
  6211 ;;		_TransmittPacket
  6212 ;; This function is called by:
  6213 ;;		_main
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _Mode_4
  6219  159F                     _Mode_4:	
  6220                           
  6221                           ;functions.c: 319: if(!RB5)
  6222                           
  6223                           ;incstack = 0
  6224 ;; hardware stack exceeded
  6225                           ; Regs used in _Mode_4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6226  159F  1283               	bcf	3,5	;RP0=0, select bank0
  6227  15A0  1303               	bcf	3,6	;RP1=0, select bank0
  6228  15A1  1A86               	btfsc	6,5	;volatile
  6229  15A2  2DAB               	goto	l3168
  6230                           
  6231                           ;functions.c: 320: {
  6232                           ;functions.c: 321: TransmittPacket(2, 1);
  6233  15A3  01B5               	clrf	TransmittPacket@value
  6234  15A4  0AB5               	incf	TransmittPacket@value,f
  6235  15A5  3002               	movlw	2
  6236  15A6  120A  158A  24BB  160A  118A  	fcall	_TransmittPacket
  6237  15AB                     l3168:	
  6238                           
  6239                           ;functions.c: 322: }
  6240                           ;functions.c: 323: LightWithSensController();
  6241  15AB  120A  158A  205C   	fcall	_LightWithSensController
  6242  15AE  0008               	return
  6243  15AF                     __end_of_Mode_4:	
  6244                           
  6245                           	psect	text28
  6246  0CBB                     __ptext28:	
  6247 ;; *************** function _TransmittPacket *****************
  6248 ;; Defined at:
  6249 ;;		line 224 in file "functions.c"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;  topic           1    wreg     unsigned char 
  6252 ;;  value           1   21[BANK0 ] unsigned char 
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;  topic           1   26[BANK0 ] unsigned char 
  6255 ;;  i               2   24[BANK0 ] int 
  6256 ;; Return value:  Size  Location     Type
  6257 ;;                  1    wreg      void 
  6258 ;; Registers used:
  6259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6265 ;;      Params:         0       1       0       0       0
  6266 ;;      Locals:         0       3       0       0       0
  6267 ;;      Temps:          0       2       0       0       0
  6268 ;;      Totals:         0       6       0       0       0
  6269 ;;Total ram usage:        6 bytes
  6270 ;; Hardware stack levels used:    1
  6271 ;; Hardware stack levels required when called:    7
  6272 ;; This function calls:
  6273 ;;		_FindChannel
  6274 ;;		_RegisterRead
  6275 ;;		_RegisterSet
  6276 ;;		_SetRFMode
  6277 ;;		_WriteFIFO
  6278 ;;		_timerFunction
  6279 ;; This function is called by:
  6280 ;;		_ReceivedPacketHandler
  6281 ;;		_Mode_4
  6282 ;;		_Mode_5
  6283 ;;		_SendMemoryData
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           
  6288                           ;psect for function _TransmittPacket
  6289  0CBB                     _TransmittPacket:	
  6290                           
  6291                           ;incstack = 0
  6292 ;; hardware stack exceeded
  6293                           ; Regs used in _TransmittPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6294                           ;TransmittPacket@topic stored from wreg
  6295  0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  6296  0CBC  1303               	bcf	3,6	;RP1=0, select bank0
  6297  0CBD  00BA               	movwf	TransmittPacket@topic
  6298                           
  6299                           ;functions.c: 226: timerFunction(4, 5);
  6300  0CBE  3004               	movlw	4
  6301  0CBF  00A0               	movwf	timerFunction@intTimerNumber
  6302  0CC0  3000               	movlw	0
  6303  0CC1  00A1               	movwf	timerFunction@intTimerNumber+1
  6304  0CC2  3005               	movlw	5
  6305  0CC3  00A2               	movwf	timerFunction@intSetSeconds
  6306  0CC4  3000               	movlw	0
  6307  0CC5  00A3               	movwf	timerFunction@intSetSeconds+1
  6308  0CC6  160A  118A  25AF  120A  158A  	fcall	_timerFunction
  6309                           
  6310                           ;functions.c: 228: int i = 0;
  6311  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  6312  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  6313  0CCD  01B8               	clrf	TransmittPacket@i
  6314  0CCE  01B9               	clrf	TransmittPacket@i+1
  6315                           
  6316                           ;functions.c: 231: SetRFMode(0x20);
  6317  0CCF  3020               	movlw	32
  6318  0CD0  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  6319                           
  6320                           ;functions.c: 232: _delay((unsigned long)((10)*(4000000/4000.0)));
  6321  0CD5  300D               	movlw	13
  6322  0CD6  1283               	bcf	3,5	;RP0=0, select bank0
  6323  0CD7  1303               	bcf	3,6	;RP1=0, select bank0
  6324  0CD8  00B7               	movwf	??_TransmittPacket+1
  6325  0CD9  30FB               	movlw	251
  6326  0CDA  00B6               	movwf	??_TransmittPacket
  6327  0CDB                     u2757:	
  6328  0CDB  0BB6               	decfsz	??_TransmittPacket,f
  6329  0CDC  2CDB               	goto	u2757
  6330  0CDD  0BB7               	decfsz	??_TransmittPacket+1,f
  6331  0CDE  2CDB               	goto	u2757
  6332  0CDF  2CE0               	nop2
  6333                           
  6334                           ;functions.c: 233: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  6335  0CE0  300E               	movlw	14
  6336  0CE1  120A  158A  2040  120A  158A  	fcall	_RegisterRead
  6337  0CE6  3802               	iorlw	2
  6338  0CE7  1283               	bcf	3,5	;RP0=0, select bank0
  6339  0CE8  1303               	bcf	3,6	;RP1=0, select bank0
  6340  0CE9  00B6               	movwf	??_TransmittPacket
  6341  0CEA  0836               	movf	??_TransmittPacket,w
  6342  0CEB  00A7               	movwf	RegisterSet@value
  6343  0CEC  300E               	movlw	14
  6344  0CED  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  6345                           
  6346                           ;functions.c: 234: SetRFMode(0x40);
  6347  0CF2  3040               	movlw	64
  6348  0CF3  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  6349  0CF8                     l2514:	
  6350                           ;functions.c: 235: while((RegisterRead(0x0E) & 0b00000010) == 0)
  6351                           
  6352  0CF8  300E               	movlw	14
  6353  0CF9  120A  158A  2040  120A  158A  	fcall	_RegisterRead
  6354  0CFE  3902               	andlw	2
  6355  0CFF  1D03               	btfss	3,2
  6356  0D00  2D0B               	goto	l2516
  6357                           
  6358                           ;functions.c: 236: {
  6359                           ;functions.c: 237: if(bTimerComplete[4])
  6360  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  6361  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  6362  0D03  085A               	movf	_bTimerComplete+4,w
  6363  0D04  1903               	btfsc	3,2
  6364  0D05  2CF8               	goto	l2514
  6365                           
  6366                           ;functions.c: 238: {
  6367                           ;functions.c: 239: FindChannel();
  6368  0D06  120A  118A  26FB  120A  158A  	fcall	_FindChannel
  6369  0D0B                     l2516:	
  6370                           ;functions.c: 240: break;
  6371                           
  6372                           
  6373                           ;functions.c: 241: }
  6374                           ;functions.c: 243: }
  6375                           ;functions.c: 244: SetRFMode(0x80);
  6376  0D0B  3080               	movlw	128
  6377  0D0C  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  6378                           
  6379                           ;functions.c: 245: _delay((unsigned long)((500)*(4000000/4000000.0)));
  6380  0D11  30A6               	movlw	166
  6381  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  6382  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  6383  0D14  00B6               	movwf	??_TransmittPacket
  6384  0D15                     u2767:	
  6385  0D15  0BB6               	decfsz	??_TransmittPacket,f
  6386  0D16  2D15               	goto	u2767
  6387  0D17  0000               	nop
  6388                           
  6389                           ;functions.c: 248: WriteFIFO('S');
  6390  0D18  3053               	movlw	83
  6391  0D19  160A  118A  2578  120A  158A  	fcall	_WriteFIFO
  6392                           
  6393                           ;functions.c: 249: WriteFIFO('Y');
  6394  0D1E  3059               	movlw	89
  6395  0D1F  160A  118A  2578  120A  158A  	fcall	_WriteFIFO
  6396                           
  6397                           ;functions.c: 250: WriteFIFO('N');
  6398  0D24  304E               	movlw	78
  6399  0D25  160A  118A  2578  120A  158A  	fcall	_WriteFIFO
  6400                           
  6401                           ;functions.c: 251: WriteFIFO('C');
  6402  0D2A  3043               	movlw	67
  6403  0D2B  160A  118A  2578  120A  158A  	fcall	_WriteFIFO
  6404                           
  6405                           ;functions.c: 254: WriteFIFO(44);
  6406  0D30  302C               	movlw	44
  6407  0D31  160A  118A  2578  120A  158A  	fcall	_WriteFIFO
  6408                           
  6409                           ;functions.c: 255: WriteFIFO(topic);
  6410  0D36  1283               	bcf	3,5	;RP0=0, select bank0
  6411  0D37  1303               	bcf	3,6	;RP1=0, select bank0
  6412  0D38  083A               	movf	TransmittPacket@topic,w
  6413  0D39  160A  118A  2578  120A  158A  	fcall	_WriteFIFO
  6414                           
  6415                           ;functions.c: 256: WriteFIFO(value);
  6416  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  6417  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  6418  0D40  0835               	movf	TransmittPacket@value,w
  6419  0D41  160A  118A  2578  120A  158A  	fcall	_WriteFIFO
  6420                           
  6421                           ;functions.c: 257: WriteFIFO(55);
  6422  0D46  3037               	movlw	55
  6423  0D47  160A  118A  2578  120A  158A  	fcall	_WriteFIFO
  6424  0D4C                     l352:	
  6425                           ;functions.c: 260: while(!RB4)
  6426                           
  6427  0D4C  1283               	bcf	3,5	;RP0=0, select bank0
  6428  0D4D  1303               	bcf	3,6	;RP1=0, select bank0
  6429  0D4E  1A06               	btfsc	6,4	;volatile
  6430  0D4F  2D55               	goto	l2540
  6431                           
  6432                           ;functions.c: 261: {
  6433                           ;functions.c: 262: if(bTimerComplete[4])
  6434  0D50  1283               	bcf	3,5	;RP0=0, select bank0
  6435  0D51  1303               	bcf	3,6	;RP1=0, select bank0
  6436  0D52  085A               	movf	_bTimerComplete+4,w
  6437  0D53  1903               	btfsc	3,2
  6438  0D54  2D4C               	goto	l352
  6439  0D55                     l2540:	
  6440                           ;functions.c: 263: break;
  6441                           
  6442                           
  6443                           ;functions.c: 264: }
  6444                           ;functions.c: 265: _delay((unsigned long)((10)*(4000000/4000000.0)));
  6445  0D55  3003               	movlw	3
  6446  0D56  00B6               	movwf	??_TransmittPacket
  6447  0D57                     u2777:	
  6448  0D57  0BB6               	decfsz	??_TransmittPacket,f
  6449  0D58  2D57               	goto	u2777
  6450                           
  6451                           ;functions.c: 266: SetRFMode(0x00);
  6452  0D59  3000               	movlw	0
  6453  0D5A  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  6454                           
  6455                           ;functions.c: 267: _delay((unsigned long)((50)*(4000000/4000.0)));
  6456  0D5F  3041               	movlw	65
  6457  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  6458  0D61  1303               	bcf	3,6	;RP1=0, select bank0
  6459  0D62  00B7               	movwf	??_TransmittPacket+1
  6460  0D63  30EE               	movlw	238
  6461  0D64  00B6               	movwf	??_TransmittPacket
  6462  0D65                     u2787:	
  6463  0D65  0BB6               	decfsz	??_TransmittPacket,f
  6464  0D66  2D65               	goto	u2787
  6465  0D67  0BB7               	decfsz	??_TransmittPacket+1,f
  6466  0D68  2D65               	goto	u2787
  6467  0D69  0000               	nop
  6468  0D6A  0008               	return
  6469  0D6B                     __end_of_TransmittPacket:	
  6470                           
  6471                           	psect	text29
  6472  1578                     __ptext29:	
  6473 ;; *************** function _WriteFIFO *****************
  6474 ;; Defined at:
  6475 ;;		line 802 in file "functions.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  Data            1    wreg     unsigned char 
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;  Data            1    3[BANK0 ] unsigned char 
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  1    wreg      void 
  6482 ;; Registers used:
  6483 ;;		wreg, status,2, status,0, pclath, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6489 ;;      Params:         0       0       0       0       0
  6490 ;;      Locals:         0       1       0       0       0
  6491 ;;      Temps:          0       0       0       0       0
  6492 ;;      Totals:         0       1       0       0       0
  6493 ;;Total ram usage:        1 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    3
  6496 ;; This function calls:
  6497 ;;		_WriteSPI
  6498 ;; This function is called by:
  6499 ;;		_TransmittPacket
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           
  6504                           ;psect for function _WriteFIFO
  6505  1578                     _WriteFIFO:	
  6506                           
  6507                           ;incstack = 0
  6508                           ; Regs used in _WriteFIFO: [wreg+status,2+status,0+pclath+cstack]
  6509                           ;WriteFIFO@Data stored from wreg
  6510  1578  1283               	bcf	3,5	;RP0=0, select bank0
  6511  1579  1303               	bcf	3,6	;RP1=0, select bank0
  6512  157A  00A3               	movwf	WriteFIFO@Data
  6513                           
  6514                           ;functions.c: 804: RA5 = 0;
  6515  157B  1285               	bcf	5,5	;volatile
  6516                           
  6517                           ;functions.c: 805: WriteSPI(Data);
  6518  157C  0823               	movf	WriteFIFO@Data,w
  6519  157D  160A  118A  2591   	fcall	_WriteSPI
  6520                           
  6521                           ;functions.c: 806: RA5 = 1;
  6522  1580  1283               	bcf	3,5	;RP0=0, select bank0
  6523  1581  1303               	bcf	3,6	;RP1=0, select bank0
  6524  1582  1685               	bsf	5,5	;volatile
  6525  1583  0008               	return
  6526  1584                     __end_of_WriteFIFO:	
  6527                           
  6528                           	psect	text30
  6529  06FB                     __ptext30:	
  6530 ;; *************** function _FindChannel *****************
  6531 ;; Defined at:
  6532 ;;		line 585 in file "functions.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;  i               2   19[BANK0 ] int 
  6537 ;;  cnt             2   17[BANK0 ] int 
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  1    wreg      unsigned char 
  6540 ;; Registers used:
  6541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6547 ;;      Params:         0       0       0       0       0
  6548 ;;      Locals:         0       4       0       0       0
  6549 ;;      Temps:          0       3       0       0       0
  6550 ;;      Totals:         0       7       0       0       0
  6551 ;;Total ram usage:        7 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    6
  6554 ;; This function calls:
  6555 ;;		_RegisterRead
  6556 ;;		_RegisterSet
  6557 ;;		_SetRFMode
  6558 ;; This function is called by:
  6559 ;;		_TransiverToReceive
  6560 ;;		_TransmittPacket
  6561 ;;		_TransiverInit
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function _FindChannel
  6567  06FB                     _FindChannel:	
  6568                           
  6569                           ;functions.c: 587: int cnt = 0;
  6570                           
  6571                           ;incstack = 0
  6572 ;; using string table level
  6573                           ; Regs used in _FindChannel: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6574  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  6575  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  6576  06FD  01B1               	clrf	FindChannel@cnt
  6577  06FE  01B2               	clrf	FindChannel@cnt+1
  6578                           
  6579                           ;functions.c: 588: bChannelFound = 0;
  6580  06FF  01E7               	clrf	_bChannelFound
  6581                           
  6582                           ;functions.c: 589: channelFound = 0;
  6583  0700  01DB               	clrf	_channelFound
  6584  0701  01DC               	clrf	_channelFound+1
  6585                           
  6586                           ;functions.c: 591: _delay((unsigned long)((1000)*(4000000/4000.0)));
  6587  0702  3006               	movlw	6
  6588  0703  00B0               	movwf	??_FindChannel+2
  6589  0704  3013               	movlw	19
  6590  0705  00AF               	movwf	??_FindChannel+1
  6591  0706  30B1               	movlw	177
  6592  0707  00AE               	movwf	??_FindChannel
  6593  0708                     u2797:	
  6594  0708  0BAE               	decfsz	??_FindChannel,f
  6595  0709  2F08               	goto	u2797
  6596  070A  0BAF               	decfsz	??_FindChannel+1,f
  6597  070B  2F08               	goto	u2797
  6598  070C  0BB0               	decfsz	??_FindChannel+2,f
  6599  070D  2F08               	goto	u2797
  6600  070E  2F0F               	nop2
  6601                           
  6602                           ;functions.c: 592: for (int i = 0; i < 13; i++)
  6603  070F  1283               	bcf	3,5	;RP0=0, select bank0
  6604  0710  1303               	bcf	3,6	;RP1=0, select bank0
  6605  0711  01B3               	clrf	FindChannel@i
  6606  0712  01B4               	clrf	FindChannel@i+1
  6607  0713  0834               	movf	FindChannel@i+1,w
  6608  0714  3A80               	xorlw	128
  6609  0715  00FF               	movwf	127
  6610  0716  3080               	movlw	128
  6611  0717  027F               	subwf	127,w
  6612  0718  1D03               	skipz
  6613  0719  2F1C               	goto	u1345
  6614  071A  300D               	movlw	13
  6615  071B  0233               	subwf	FindChannel@i,w
  6616  071C                     u1345:	
  6617  071C  1803               	btfsc	3,0
  6618  071D  2FEF               	goto	l2464
  6619  071E                     l2440:	
  6620                           
  6621                           ;functions.c: 593: {
  6622                           ;functions.c: 594: RegisterSet(0x06,ChannelR[i]);
  6623  071E  1283               	bcf	3,5	;RP0=0, select bank0
  6624  071F  1303               	bcf	3,6	;RP1=0, select bank0
  6625  0720  0833               	movf	FindChannel@i,w
  6626  0721  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  6627  0722  0084               	movwf	4
  6628  0723  120A  158A  2000  120A  118A  	fcall	stringdir
  6629  0728  00AE               	movwf	??_FindChannel
  6630  0729  082E               	movf	??_FindChannel,w
  6631  072A  00A7               	movwf	RegisterSet@value
  6632  072B  3006               	movlw	6
  6633  072C  160A  118A  2629  120A  118A  	fcall	_RegisterSet
  6634                           
  6635                           ;functions.c: 595: RegisterSet(0x07,ChannelP[i]);
  6636  0731  1283               	bcf	3,5	;RP0=0, select bank0
  6637  0732  1303               	bcf	3,6	;RP1=0, select bank0
  6638  0733  0833               	movf	FindChannel@i,w
  6639  0734  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  6640  0735  0084               	movwf	4
  6641  0736  120A  158A  2000  120A  118A  	fcall	stringdir
  6642  073B  00AE               	movwf	??_FindChannel
  6643  073C  082E               	movf	??_FindChannel,w
  6644  073D  00A7               	movwf	RegisterSet@value
  6645  073E  3007               	movlw	7
  6646  073F  160A  118A  2629  120A  118A  	fcall	_RegisterSet
  6647                           
  6648                           ;functions.c: 596: RegisterSet(0x08,ChannelS[i]);
  6649  0744  1283               	bcf	3,5	;RP0=0, select bank0
  6650  0745  1303               	bcf	3,6	;RP1=0, select bank0
  6651  0746  0833               	movf	FindChannel@i,w
  6652  0747  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  6653  0748  0084               	movwf	4
  6654  0749  120A  158A  2000  120A  118A  	fcall	stringdir
  6655  074E  00AE               	movwf	??_FindChannel
  6656  074F  082E               	movf	??_FindChannel,w
  6657  0750  00A7               	movwf	RegisterSet@value
  6658  0751  3008               	movlw	8
  6659  0752  160A  118A  2629  120A  118A  	fcall	_RegisterSet
  6660                           
  6661                           ;functions.c: 597: RegisterSet(0x09,ChannelR[i]);
  6662  0757  1283               	bcf	3,5	;RP0=0, select bank0
  6663  0758  1303               	bcf	3,6	;RP1=0, select bank0
  6664  0759  0833               	movf	FindChannel@i,w
  6665  075A  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  6666  075B  0084               	movwf	4
  6667  075C  120A  158A  2000  120A  118A  	fcall	stringdir
  6668  0761  00AE               	movwf	??_FindChannel
  6669  0762  082E               	movf	??_FindChannel,w
  6670  0763  00A7               	movwf	RegisterSet@value
  6671  0764  3009               	movlw	9
  6672  0765  160A  118A  2629  120A  118A  	fcall	_RegisterSet
  6673                           
  6674                           ;functions.c: 598: RegisterSet(0x0A,ChannelP[i]);
  6675  076A  1283               	bcf	3,5	;RP0=0, select bank0
  6676  076B  1303               	bcf	3,6	;RP1=0, select bank0
  6677  076C  0833               	movf	FindChannel@i,w
  6678  076D  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  6679  076E  0084               	movwf	4
  6680  076F  120A  158A  2000  120A  118A  	fcall	stringdir
  6681  0774  00AE               	movwf	??_FindChannel
  6682  0775  082E               	movf	??_FindChannel,w
  6683  0776  00A7               	movwf	RegisterSet@value
  6684  0777  300A               	movlw	10
  6685  0778  160A  118A  2629  120A  118A  	fcall	_RegisterSet
  6686                           
  6687                           ;functions.c: 599: RegisterSet(0x0B,ChannelS[i]);
  6688  077D  1283               	bcf	3,5	;RP0=0, select bank0
  6689  077E  1303               	bcf	3,6	;RP1=0, select bank0
  6690  077F  0833               	movf	FindChannel@i,w
  6691  0780  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  6692  0781  0084               	movwf	4
  6693  0782  120A  158A  2000  120A  118A  	fcall	stringdir
  6694  0787  00AE               	movwf	??_FindChannel
  6695  0788  082E               	movf	??_FindChannel,w
  6696  0789  00A7               	movwf	RegisterSet@value
  6697  078A  300B               	movlw	11
  6698  078B  160A  118A  2629  120A  118A  	fcall	_RegisterSet
  6699                           
  6700                           ;functions.c: 600: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  6701  0790  300E               	movlw	14
  6702  0791  120A  158A  2040  120A  118A  	fcall	_RegisterRead
  6703  0796  3802               	iorlw	2
  6704  0797  1283               	bcf	3,5	;RP0=0, select bank0
  6705  0798  1303               	bcf	3,6	;RP1=0, select bank0
  6706  0799  00AE               	movwf	??_FindChannel
  6707  079A  082E               	movf	??_FindChannel,w
  6708  079B  00A7               	movwf	RegisterSet@value
  6709  079C  300E               	movlw	14
  6710  079D  160A  118A  2629  120A  118A  	fcall	_RegisterSet
  6711                           
  6712                           ;functions.c: 601: SetRFMode(0x40);
  6713  07A2  3040               	movlw	64
  6714  07A3  120A  158A  233E  120A  118A  	fcall	_SetRFMode
  6715                           
  6716                           ;functions.c: 602: cnt = 0;
  6717  07A8  1283               	bcf	3,5	;RP0=0, select bank0
  6718  07A9  1303               	bcf	3,6	;RP1=0, select bank0
  6719  07AA  01B1               	clrf	FindChannel@cnt
  6720  07AB  01B2               	clrf	FindChannel@cnt+1
  6721  07AC                     l2458:	
  6722                           ;functions.c: 603: while(cnt < 5)
  6723                           
  6724  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  6725  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  6726  07AE  0832               	movf	FindChannel@cnt+1,w
  6727  07AF  3A80               	xorlw	128
  6728  07B0  00FF               	movwf	127
  6729  07B1  3080               	movlw	128
  6730  07B2  027F               	subwf	127,w
  6731  07B3  1D03               	skipz
  6732  07B4  2FB7               	goto	u1365
  6733  07B5  3005               	movlw	5
  6734  07B6  0231               	subwf	FindChannel@cnt,w
  6735  07B7                     u1365:	
  6736  07B7  1803               	btfsc	3,0
  6737  07B8  2FDC               	goto	l2460
  6738                           
  6739                           ;functions.c: 604: {
  6740                           ;functions.c: 606: if((RegisterRead(0x0E) & 0b00000010) != 0)
  6741  07B9  300E               	movlw	14
  6742  07BA  120A  158A  2040  120A  118A  	fcall	_RegisterRead
  6743  07BF  3902               	andlw	2
  6744  07C0  1903               	btfsc	3,2
  6745  07C1  2FCC               	goto	l2456
  6746                           
  6747                           ;functions.c: 607: {
  6748                           ;functions.c: 608: bChannelFound = 1;
  6749  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  6750  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  6751  07C4  01E7               	clrf	_bChannelFound
  6752  07C5  0AE7               	incf	_bChannelFound,f
  6753                           
  6754                           ;functions.c: 609: channelFound = i;
  6755  07C6  0834               	movf	FindChannel@i+1,w
  6756  07C7  00DC               	movwf	_channelFound+1
  6757  07C8  0833               	movf	FindChannel@i,w
  6758  07C9  00DB               	movwf	_channelFound
  6759                           
  6760                           ;functions.c: 610: return 1;
  6761  07CA  3001               	movlw	1
  6762  07CB  0008               	return
  6763  07CC                     l2456:	
  6764                           
  6765                           ;functions.c: 611: }
  6766                           ;functions.c: 612: cnt++;
  6767  07CC  3001               	movlw	1
  6768  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  6769  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  6770  07CF  07B1               	addwf	FindChannel@cnt,f
  6771  07D0  1803               	skipnc
  6772  07D1  0AB2               	incf	FindChannel@cnt+1,f
  6773  07D2  3000               	movlw	0
  6774  07D3  07B2               	addwf	FindChannel@cnt+1,f
  6775                           
  6776                           ;functions.c: 613: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  6777  07D4  30F9               	movlw	249
  6778  07D5  00AE               	movwf	??_FindChannel
  6779  07D6                     u2807:	
  6780  07D6  0000               	nop
  6781  07D7  0BAE               	decfsz	??_FindChannel,f
  6782  07D8  2FD6               	goto	u2807
  6783  07D9  2FDA               	nop2	;nop
  6784  07DA  0000               	nop
  6785  07DB  2FAC               	goto	l2458
  6786  07DC                     l2460:	
  6787  07DC  3001               	movlw	1
  6788  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  6789  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  6790  07DF  07B3               	addwf	FindChannel@i,f
  6791  07E0  1803               	skipnc
  6792  07E1  0AB4               	incf	FindChannel@i+1,f
  6793  07E2  3000               	movlw	0
  6794  07E3  07B4               	addwf	FindChannel@i+1,f
  6795  07E4  0834               	movf	FindChannel@i+1,w
  6796  07E5  3A80               	xorlw	128
  6797  07E6  00FF               	movwf	127
  6798  07E7  3080               	movlw	128
  6799  07E8  027F               	subwf	127,w
  6800  07E9  1D03               	skipz
  6801  07EA  2FED               	goto	u1375
  6802  07EB  300D               	movlw	13
  6803  07EC  0233               	subwf	FindChannel@i,w
  6804  07ED                     u1375:	
  6805  07ED  1C03               	skipc
  6806  07EE  2F1E               	goto	l2440
  6807  07EF                     l2464:	
  6808                           
  6809                           ;functions.c: 614: }
  6810                           ;functions.c: 617: }
  6811                           ;functions.c: 618: return 0;
  6812  07EF  3000               	movlw	0
  6813  07F0  0008               	return
  6814  07F1                     __end_of_FindChannel:	
  6815                           
  6816                           	psect	text31
  6817  0B3E                     __ptext31:	
  6818 ;; *************** function _SetRFMode *****************
  6819 ;; Defined at:
  6820 ;;		line 640 in file "functions.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;  mode            1    wreg     unsigned char 
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;  mode            1   12[BANK0 ] unsigned char 
  6825 ;;  mcparam0_rea    1   13[BANK0 ] unsigned char 
  6826 ;; Return value:  Size  Location     Type
  6827 ;;                  1    wreg      void 
  6828 ;; Registers used:
  6829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6835 ;;      Params:         0       0       0       0       0
  6836 ;;      Locals:         0       2       0       0       0
  6837 ;;      Temps:          0       1       0       0       0
  6838 ;;      Totals:         0       3       0       0       0
  6839 ;;Total ram usage:        3 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    5
  6842 ;; This function calls:
  6843 ;;		_RegisterRead
  6844 ;;		_RegisterSet
  6845 ;; This function is called by:
  6846 ;;		_TransiverToReceive
  6847 ;;		_TransiverReadFIFO
  6848 ;;		_TransmittPacket
  6849 ;;		_TransiverInit
  6850 ;;		_FindChannel
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function _SetRFMode
  6856  0B3E                     _SetRFMode:	
  6857                           
  6858                           ;incstack = 0
  6859                           ; Regs used in _SetRFMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6860                           ;SetRFMode@mode stored from wreg
  6861  0B3E  1283               	bcf	3,5	;RP0=0, select bank0
  6862  0B3F  1303               	bcf	3,6	;RP1=0, select bank0
  6863  0B40  00AC               	movwf	SetRFMode@mode
  6864                           
  6865                           ;functions.c: 642: RA4 = 0;
  6866  0B41  1205               	bcf	5,4	;volatile
  6867                           
  6868                           ;functions.c: 643: BYTE mcparam0_read;
  6869                           ;functions.c: 644: mcparam0_read = RegisterRead(0);
  6870  0B42  3000               	movlw	0
  6871  0B43  120A  158A  2040  120A  158A  	fcall	_RegisterRead
  6872  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  6873  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  6874  0B4A  00AB               	movwf	??_SetRFMode
  6875  0B4B  082B               	movf	??_SetRFMode,w
  6876  0B4C  00AD               	movwf	SetRFMode@mcparam0_read
  6877                           
  6878                           ;functions.c: 645: switch (mode) {
  6879  0B4D  2B96               	goto	l2414
  6880  0B4E                     l2402:	
  6881                           ;functions.c: 646: case 0x80:
  6882                           
  6883                           
  6884                           ;functions.c: 647: RegisterSet(0, (mcparam0_read & 0x1F) | 0x80);
  6885  0B4E  082D               	movf	SetRFMode@mcparam0_read,w
  6886  0B4F  391F               	andlw	31
  6887  0B50  3880               	iorlw	128
  6888  0B51  00AB               	movwf	??_SetRFMode
  6889  0B52  082B               	movf	??_SetRFMode,w
  6890  0B53  00A7               	movwf	RegisterSet@value
  6891  0B54  3000               	movlw	0
  6892  0B55  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  6893                           
  6894                           ;functions.c: 649: break;
  6895  0B5A  2BA9               	goto	l441
  6896  0B5B                     l2404:	
  6897                           ;functions.c: 650: case 0x60:
  6898                           
  6899                           
  6900                           ;functions.c: 651: RegisterSet(0, (mcparam0_read & 0x1F) | 0x60);
  6901  0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  6902  0B5C  1303               	bcf	3,6	;RP1=0, select bank0
  6903  0B5D  082D               	movf	SetRFMode@mcparam0_read,w
  6904  0B5E  391F               	andlw	31
  6905  0B5F  3860               	iorlw	96
  6906  0B60  00AB               	movwf	??_SetRFMode
  6907  0B61  082B               	movf	??_SetRFMode,w
  6908  0B62  00A7               	movwf	RegisterSet@value
  6909  0B63  3000               	movlw	0
  6910  0B64  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  6911                           
  6912                           ;functions.c: 653: break;
  6913  0B69  2BA9               	goto	l441
  6914  0B6A                     l2406:	
  6915                           ;functions.c: 654: case 0x40:
  6916                           
  6917                           
  6918                           ;functions.c: 655: RegisterSet(0, (mcparam0_read & 0x1F) | 0x40);
  6919  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  6920  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  6921  0B6C  082D               	movf	SetRFMode@mcparam0_read,w
  6922  0B6D  391F               	andlw	31
  6923  0B6E  3840               	iorlw	64
  6924  0B6F  00AB               	movwf	??_SetRFMode
  6925  0B70  082B               	movf	??_SetRFMode,w
  6926  0B71  00A7               	movwf	RegisterSet@value
  6927  0B72  3000               	movlw	0
  6928  0B73  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  6929                           
  6930                           ;functions.c: 657: break;
  6931  0B78  2BA9               	goto	l441
  6932  0B79                     l2408:	
  6933                           ;functions.c: 658: case 0x20:
  6934                           
  6935                           
  6936                           ;functions.c: 659: RegisterSet(0, (mcparam0_read & 0x1F) | 0x20);
  6937  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  6938  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  6939  0B7B  082D               	movf	SetRFMode@mcparam0_read,w
  6940  0B7C  391F               	andlw	31
  6941  0B7D  3820               	iorlw	32
  6942  0B7E  00AB               	movwf	??_SetRFMode
  6943  0B7F  082B               	movf	??_SetRFMode,w
  6944  0B80  00A7               	movwf	RegisterSet@value
  6945  0B81  3000               	movlw	0
  6946  0B82  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  6947                           
  6948                           ;functions.c: 661: break;
  6949  0B87  2BA9               	goto	l441
  6950  0B88                     l2410:	
  6951                           ;functions.c: 662: case 0x00:
  6952                           
  6953                           
  6954                           ;functions.c: 663: RegisterSet(0, (mcparam0_read & 0x1F) | 0x00);
  6955  0B88  1283               	bcf	3,5	;RP0=0, select bank0
  6956  0B89  1303               	bcf	3,6	;RP1=0, select bank0
  6957  0B8A  082D               	movf	SetRFMode@mcparam0_read,w
  6958  0B8B  391F               	andlw	31
  6959  0B8C  00AB               	movwf	??_SetRFMode
  6960  0B8D  082B               	movf	??_SetRFMode,w
  6961  0B8E  00A7               	movwf	RegisterSet@value
  6962  0B8F  3000               	movlw	0
  6963  0B90  160A  118A  2629  120A  158A  	fcall	_RegisterSet
  6964                           
  6965                           ;functions.c: 666: }
  6966                           
  6967                           ;functions.c: 665: break;
  6968  0B95  2BA9               	goto	l441
  6969  0B96                     l2414:	
  6970  0B96  1283               	bcf	3,5	;RP0=0, select bank0
  6971  0B97  1303               	bcf	3,6	;RP1=0, select bank0
  6972  0B98  082C               	movf	SetRFMode@mode,w
  6973                           
  6974                           ; Switch size 1, requested type "space"
  6975                           ; Number of cases is 5, Range of values is 0 to 128
  6976                           ; switch strategies available:
  6977                           ; Name         Instructions Cycles
  6978                           ; simple_byte           16     9 (average)
  6979                           ; jumptable            260     6 (fixed)
  6980                           ;	Chosen strategy is simple_byte
  6981  0B99  3A00               	xorlw	0	; case 0
  6982  0B9A  1903               	skipnz
  6983  0B9B  2B88               	goto	l2410
  6984  0B9C  3A20               	xorlw	32	; case 32
  6985  0B9D  1903               	skipnz
  6986  0B9E  2B79               	goto	l2408
  6987  0B9F  3A60               	xorlw	96	; case 64
  6988  0BA0  1903               	skipnz
  6989  0BA1  2B6A               	goto	l2406
  6990  0BA2  3A20               	xorlw	32	; case 96
  6991  0BA3  1903               	skipnz
  6992  0BA4  2B5B               	goto	l2404
  6993  0BA5  3AE0               	xorlw	224	; case 128
  6994  0BA6  1903               	skipnz
  6995  0BA7  2B4E               	goto	l2402
  6996  0BA8  2BA9               	goto	l441
  6997  0BA9                     l441:	
  6998                           
  6999                           ;functions.c: 667: RA4 = 1;
  7000  0BA9  1283               	bcf	3,5	;RP0=0, select bank0
  7001  0BAA  1303               	bcf	3,6	;RP1=0, select bank0
  7002  0BAB  1605               	bsf	5,4	;volatile
  7003  0BAC  0008               	return
  7004  0BAD                     __end_of_SetRFMode:	
  7005                           
  7006                           	psect	text32
  7007  1629                     __ptext32:	
  7008 ;; *************** function _RegisterSet *****************
  7009 ;; Defined at:
  7010 ;;		line 749 in file "functions.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;  adress          1    wreg     unsigned char 
  7013 ;;  value           1    7[BANK0 ] unsigned char 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  adress          1   10[BANK0 ] unsigned char 
  7016 ;; Return value:  Size  Location     Type
  7017 ;;                  1    wreg      void 
  7018 ;; Registers used:
  7019 ;;		wreg, status,2, status,0, pclath, cstack
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7025 ;;      Params:         0       1       0       0       0
  7026 ;;      Locals:         0       1       0       0       0
  7027 ;;      Temps:          0       2       0       0       0
  7028 ;;      Totals:         0       4       0       0       0
  7029 ;;Total ram usage:        4 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; Hardware stack levels required when called:    3
  7032 ;; This function calls:
  7033 ;;		_WriteSPI
  7034 ;; This function is called by:
  7035 ;;		_TransiverToReceive
  7036 ;;		_TransmittPacket
  7037 ;;		_TransiverInit
  7038 ;;		_FindChannel
  7039 ;;		_SetRFMode
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           
  7044                           ;psect for function _RegisterSet
  7045  1629                     _RegisterSet:	
  7046                           
  7047                           ;incstack = 0
  7048                           ; Regs used in _RegisterSet: [wreg+status,2+status,0+pclath+cstack]
  7049                           ;RegisterSet@adress stored from wreg
  7050  1629  1283               	bcf	3,5	;RP0=0, select bank0
  7051  162A  1303               	bcf	3,6	;RP1=0, select bank0
  7052  162B  00AA               	movwf	RegisterSet@adress
  7053                           
  7054                           ;functions.c: 751: RA4 = 0;
  7055  162C  1205               	bcf	5,4	;volatile
  7056                           
  7057                           ;functions.c: 752: adress = (adress<<1);
  7058  162D  082A               	movf	RegisterSet@adress,w
  7059  162E  00A8               	movwf	??_RegisterSet
  7060  162F  0728               	addwf	??_RegisterSet,w
  7061  1630  00A9               	movwf	??_RegisterSet+1
  7062  1631  0829               	movf	??_RegisterSet+1,w
  7063  1632  00AA               	movwf	RegisterSet@adress
  7064                           
  7065                           ;functions.c: 753: WriteSPI(adress);
  7066  1633  082A               	movf	RegisterSet@adress,w
  7067  1634  160A  118A  2591  160A  118A  	fcall	_WriteSPI
  7068                           
  7069                           ;functions.c: 754: WriteSPI(value);
  7070  1639  1283               	bcf	3,5	;RP0=0, select bank0
  7071  163A  1303               	bcf	3,6	;RP1=0, select bank0
  7072  163B  0827               	movf	RegisterSet@value,w
  7073  163C  160A  118A  2591   	fcall	_WriteSPI
  7074                           
  7075                           ;functions.c: 755: RA4 = 1;
  7076  163F  1283               	bcf	3,5	;RP0=0, select bank0
  7077  1640  1303               	bcf	3,6	;RP1=0, select bank0
  7078  1641  1605               	bsf	5,4	;volatile
  7079  1642  0008               	return
  7080  1643                     __end_of_RegisterSet:	
  7081                           
  7082                           	psect	text33
  7083  0840                     __ptext33:	
  7084 ;; *************** function _RegisterRead *****************
  7085 ;; Defined at:
  7086 ;;		line 719 in file "functions.c"
  7087 ;; Parameters:    Size  Location     Type
  7088 ;;  adress          1    wreg     unsigned char 
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;  adress          1    6[BANK0 ] unsigned char 
  7091 ;;  value           1    5[BANK0 ] unsigned char 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      unsigned char 
  7094 ;; Registers used:
  7095 ;;		wreg, status,2, status,0, pclath, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7101 ;;      Params:         0       0       0       0       0
  7102 ;;      Locals:         0       2       0       0       0
  7103 ;;      Temps:          0       2       0       0       0
  7104 ;;      Totals:         0       4       0       0       0
  7105 ;;Total ram usage:        4 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    4
  7108 ;; This function calls:
  7109 ;;		_ReadSPI
  7110 ;;		_WriteSPI
  7111 ;; This function is called by:
  7112 ;;		_TransiverToReceive
  7113 ;;		_TransmittPacket
  7114 ;;		_TransiverInit
  7115 ;;		_FindChannel
  7116 ;;		_SetRFMode
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           
  7121                           ;psect for function _RegisterRead
  7122  0840                     _RegisterRead:	
  7123                           
  7124                           ;incstack = 0
  7125                           ; Regs used in _RegisterRead: [wreg+status,2+status,0+pclath+cstack]
  7126                           ;RegisterRead@adress stored from wreg
  7127  0840  1283               	bcf	3,5	;RP0=0, select bank0
  7128  0841  1303               	bcf	3,6	;RP1=0, select bank0
  7129  0842  00A6               	movwf	RegisterRead@adress
  7130                           
  7131                           ;functions.c: 721: BYTE value;
  7132                           ;functions.c: 722: RA4 = 0;
  7133  0843  1205               	bcf	5,4	;volatile
  7134                           
  7135                           ;functions.c: 723: adress = ((adress<<1)|0x40);
  7136  0844  0826               	movf	RegisterRead@adress,w
  7137  0845  00A3               	movwf	??_RegisterRead
  7138  0846  0723               	addwf	??_RegisterRead,w
  7139  0847  3840               	iorlw	64
  7140  0848  00A4               	movwf	??_RegisterRead+1
  7141  0849  0824               	movf	??_RegisterRead+1,w
  7142  084A  00A6               	movwf	RegisterRead@adress
  7143                           
  7144                           ;functions.c: 724: WriteSPI(adress);
  7145  084B  0826               	movf	RegisterRead@adress,w
  7146  084C  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  7147                           
  7148                           ;functions.c: 725: value = ReadSPI();
  7149  0851  160A  118A  2556   	fcall	_ReadSPI
  7150  0854  1283               	bcf	3,5	;RP0=0, select bank0
  7151  0855  1303               	bcf	3,6	;RP1=0, select bank0
  7152  0856  00A3               	movwf	??_RegisterRead
  7153  0857  0823               	movf	??_RegisterRead,w
  7154  0858  00A5               	movwf	RegisterRead@value
  7155                           
  7156                           ;functions.c: 726: RA4 = 1;
  7157  0859  1605               	bsf	5,4	;volatile
  7158                           
  7159                           ;functions.c: 727: return value;
  7160  085A  0825               	movf	RegisterRead@value,w
  7161  085B  0008               	return
  7162  085C                     __end_of_RegisterRead:	
  7163                           
  7164                           	psect	text34
  7165  1584                     __ptext34:	
  7166 ;; *************** function _Mode_2 *****************
  7167 ;; Defined at:
  7168 ;;		line 298 in file "functions.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;		None
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;		None
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  1    wreg      void 
  7175 ;; Registers used:
  7176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7182 ;;      Params:         0       0       0       0       0
  7183 ;;      Locals:         0       0       0       0       0
  7184 ;;      Temps:          0       0       0       0       0
  7185 ;;      Totals:         0       0       0       0       0
  7186 ;;Total ram usage:        0 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; Hardware stack levels required when called:    6
  7189 ;; This function calls:
  7190 ;;		_LightWithSensController
  7191 ;; This function is called by:
  7192 ;;		_main
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           
  7197                           ;psect for function _Mode_2
  7198  1584                     _Mode_2:	
  7199                           
  7200                           ;functions.c: 300: LightWithSensController();
  7201                           
  7202                           ;incstack = 0
  7203                           ; Regs used in _Mode_2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7204  1584  120A  158A  205C  160A  118A  	fcall	_LightWithSensController
  7205                           
  7206                           ;functions.c: 301: if(RC2)
  7207  1589  1283               	bcf	3,5	;RP0=0, select bank0
  7208  158A  1303               	bcf	3,6	;RP1=0, select bank0
  7209  158B  1D07               	btfss	7,2	;volatile
  7210  158C  2D8F               	goto	l368
  7211                           
  7212                           ;functions.c: 302: RC1 = 1;
  7213  158D  1487               	bsf	7,1	;volatile
  7214  158E  0008               	return
  7215  158F                     l368:	
  7216                           
  7217                           ;functions.c: 303: else
  7218                           ;functions.c: 304: RC1 = 0;
  7219  158F  1087               	bcf	7,1	;volatile
  7220  1590  0008               	return
  7221  1591                     __end_of_Mode_2:	
  7222                           
  7223                           	psect	text35
  7224  160F                     __ptext35:	
  7225 ;; *************** function _Mode_1 *****************
  7226 ;; Defined at:
  7227 ;;		line 284 in file "functions.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      void 
  7234 ;; Registers used:
  7235 ;;		wreg, status,2, status,0, pclath, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7241 ;;      Params:         0       0       0       0       0
  7242 ;;      Locals:         0       0       0       0       0
  7243 ;;      Temps:          0       0       0       0       0
  7244 ;;      Totals:         0       0       0       0       0
  7245 ;;Total ram usage:        0 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    5
  7248 ;; This function calls:
  7249 ;;		_DarknessCheck
  7250 ;; This function is called by:
  7251 ;;		_main
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function _Mode_1
  7257  160F                     _Mode_1:	
  7258                           
  7259                           ;functions.c: 287: if((intSecondCounter == 30)&&(!RC2))
  7260                           
  7261                           ;incstack = 0
  7262                           ; Regs used in _Mode_1: [wreg+status,2+status,0+pclath+cstack]
  7263  160F  301E               	movlw	30
  7264  1610  1283               	bcf	3,5	;RP0=0, select bank0
  7265  1611  1303               	bcf	3,6	;RP1=0, select bank0
  7266  1612  0665               	xorwf	_intSecondCounter,w
  7267  1613  0466               	iorwf	_intSecondCounter+1,w
  7268  1614  1903               	btfsc	3,2
  7269  1615  1907               	btfsc	7,2	;volatile
  7270  1616  2E1C               	goto	l3152
  7271                           
  7272                           ;functions.c: 288: DarknessCheck();
  7273  1617  160A  118A  26C7  160A  118A  	fcall	_DarknessCheck
  7274  161C                     l3152:	
  7275                           
  7276                           ;functions.c: 289: if((intBlinkCycle == 1)&&(bDark == 1))
  7277  161C  1283               	bcf	3,5	;RP0=0, select bank0
  7278  161D  1303               	bcf	3,6	;RP1=0, select bank0
  7279  161E  035D               	decf	_intBlinkCycle,w
  7280  161F  045E               	iorwf	_intBlinkCycle+1,w
  7281  1620  1D03               	btfss	3,2
  7282  1621  2E27               	goto	l363
  7283  1622  0368               	decf	_bDark,w
  7284  1623  1D03               	btfss	3,2
  7285  1624  2E27               	goto	l363
  7286                           
  7287                           ;functions.c: 290: RC2 = 1;
  7288  1625  1507               	bsf	7,2	;volatile
  7289  1626  0008               	return
  7290  1627                     l363:	
  7291                           
  7292                           ;functions.c: 291: else
  7293                           ;functions.c: 292: RC2 = 0;
  7294  1627  1107               	bcf	7,2	;volatile
  7295  1628  0008               	return
  7296  1629                     __end_of_Mode_1:	
  7297                           
  7298                           	psect	text36
  7299  1552                     __ptext36:	
  7300 ;; *************** function _Mode_0 *****************
  7301 ;; Defined at:
  7302 ;;		line 276 in file "functions.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;		None
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;		None
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7316 ;;      Params:         0       0       0       0       0
  7317 ;;      Locals:         0       0       0       0       0
  7318 ;;      Temps:          0       0       0       0       0
  7319 ;;      Totals:         0       0       0       0       0
  7320 ;;Total ram usage:        0 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    6
  7323 ;; This function calls:
  7324 ;;		_LightWithSensController
  7325 ;; This function is called by:
  7326 ;;		_main
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           
  7331                           ;psect for function _Mode_0
  7332  1552                     _Mode_0:	
  7333                           
  7334                           ;functions.c: 278: LightWithSensController();
  7335                           
  7336                           ;incstack = 0
  7337                           ; Regs used in _Mode_0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7338  1552  120A  158A  205C   	fcall	_LightWithSensController
  7339  1555  0008               	return
  7340  1556                     __end_of_Mode_0:	
  7341                           
  7342                           	psect	text37
  7343  085C                     __ptext37:	
  7344 ;; *************** function _LightWithSensController *****************
  7345 ;; Defined at:
  7346 ;;		line 342 in file "functions.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;		None
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;		None
  7351 ;; Return value:  Size  Location     Type
  7352 ;;                  1    wreg      void 
  7353 ;; Registers used:
  7354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7360 ;;      Params:         0       0       0       0       0
  7361 ;;      Locals:         0       0       0       0       0
  7362 ;;      Temps:          0       0       0       0       0
  7363 ;;      Totals:         0       0       0       0       0
  7364 ;;Total ram usage:        0 bytes
  7365 ;; Hardware stack levels used:    1
  7366 ;; Hardware stack levels required when called:    5
  7367 ;; This function calls:
  7368 ;;		_DarknessCheck
  7369 ;;		_timerFunction
  7370 ;; This function is called by:
  7371 ;;		_Mode_0
  7372 ;;		_Mode_2
  7373 ;;		_Mode_4
  7374 ;;		_Mode_5
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           
  7379                           ;psect for function _LightWithSensController
  7380  085C                     _LightWithSensController:	
  7381                           
  7382                           ;functions.c: 346: if((intSecondCounter == 30)&&(!RC2))
  7383                           
  7384                           ;incstack = 0
  7385                           ; Regs used in _LightWithSensController: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7386  085C  301E               	movlw	30
  7387  085D  1283               	bcf	3,5	;RP0=0, select bank0
  7388  085E  1303               	bcf	3,6	;RP1=0, select bank0
  7389  085F  0665               	xorwf	_intSecondCounter,w
  7390  0860  0466               	iorwf	_intSecondCounter+1,w
  7391  0861  1903               	btfsc	3,2
  7392  0862  1907               	btfsc	7,2	;volatile
  7393  0863  2869               	goto	l2908
  7394                           
  7395                           ;functions.c: 347: DarknessCheck();
  7396  0864  160A  118A  26C7  120A  158A  	fcall	_DarknessCheck
  7397  0869                     l2908:	
  7398                           
  7399                           ;functions.c: 351: if((bDark == 1)&&(RA1)&&(!RC2))
  7400  0869  1283               	bcf	3,5	;RP0=0, select bank0
  7401  086A  1303               	bcf	3,6	;RP1=0, select bank0
  7402  086B  0368               	decf	_bDark,w
  7403  086C  1903               	btfsc	3,2
  7404  086D  1C85               	btfss	5,1	;volatile
  7405  086E  287E               	goto	l2918
  7406  086F  1907               	btfsc	7,2	;volatile
  7407  0870  287E               	goto	l2918
  7408                           
  7409                           ;functions.c: 352: {
  7410                           ;functions.c: 354: RC2 = 1;
  7411  0871  1507               	bsf	7,2	;volatile
  7412                           
  7413                           ;functions.c: 356: timerFunction(0,120);
  7414  0872  3000               	movlw	0
  7415  0873  00A0               	movwf	timerFunction@intTimerNumber
  7416  0874  00A1               	movwf	timerFunction@intTimerNumber+1
  7417  0875  3078               	movlw	120
  7418  0876  00A2               	movwf	timerFunction@intSetSeconds
  7419  0877  3000               	movlw	0
  7420  0878  00A3               	movwf	timerFunction@intSetSeconds+1
  7421  0879  160A  118A  25AF  120A  158A  	fcall	_timerFunction
  7422  087E                     l2918:	
  7423                           
  7424                           ;functions.c: 357: }
  7425                           ;functions.c: 360: if(bTimerComplete[0])
  7426  087E  1283               	bcf	3,5	;RP0=0, select bank0
  7427  087F  1303               	bcf	3,6	;RP1=0, select bank0
  7428  0880  0856               	movf	_bTimerComplete,w
  7429  0881  1903               	btfsc	3,2
  7430  0882  0008               	return
  7431                           
  7432                           ;functions.c: 361: {
  7433                           ;functions.c: 362: DarknessCheck();
  7434  0883  160A  118A  26C7  120A  158A  	fcall	_DarknessCheck
  7435                           
  7436                           ;functions.c: 363: if((bDark)&&(RA1))
  7437  0888  1283               	bcf	3,5	;RP0=0, select bank0
  7438  0889  1303               	bcf	3,6	;RP1=0, select bank0
  7439  088A  0868               	movf	_bDark,w
  7440  088B  1D03               	btfss	3,2
  7441  088C  1C85               	btfss	5,1	;volatile
  7442  088D  2899               	goto	l387
  7443                           
  7444                           ;functions.c: 364: {
  7445                           ;functions.c: 365: timerFunction(0,120);
  7446  088E  3000               	movlw	0
  7447  088F  00A0               	movwf	timerFunction@intTimerNumber
  7448  0890  00A1               	movwf	timerFunction@intTimerNumber+1
  7449  0891  3078               	movlw	120
  7450  0892  00A2               	movwf	timerFunction@intSetSeconds
  7451  0893  3000               	movlw	0
  7452  0894  00A3               	movwf	timerFunction@intSetSeconds+1
  7453  0895  160A  118A  25AF   	fcall	_timerFunction
  7454                           
  7455                           ;functions.c: 366: }
  7456  0898  0008               	return
  7457  0899                     l387:	
  7458                           
  7459                           ;functions.c: 367: else
  7460                           ;functions.c: 368: RC2 = 0;
  7461  0899  1107               	bcf	7,2	;volatile
  7462  089A  0008               	return
  7463  089B                     __end_of_LightWithSensController:	
  7464                           
  7465                           	psect	text38
  7466  15AF                     __ptext38:	
  7467 ;; *************** function _timerFunction *****************
  7468 ;; Defined at:
  7469 ;;		line 393 in file "functions.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;  intTimerNumb    2    0[BANK0 ] int 
  7472 ;;  intSetSecond    2    2[BANK0 ] int 
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;		None
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  1    wreg      unsigned char 
  7477 ;; Registers used:
  7478 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7484 ;;      Params:         0       4       0       0       0
  7485 ;;      Locals:         0       0       0       0       0
  7486 ;;      Temps:          0       1       0       0       0
  7487 ;;      Totals:         0       5       0       0       0
  7488 ;;Total ram usage:        5 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    2
  7491 ;; This function calls:
  7492 ;;		Nothing
  7493 ;; This function is called by:
  7494 ;;		_TransiverToReceive
  7495 ;;		_TransiverReadFIFO
  7496 ;;		_TransmittPacket
  7497 ;;		_LightWithSensController
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           
  7502                           ;psect for function _timerFunction
  7503  15AF                     _timerFunction:	
  7504                           
  7505                           ;functions.c: 395: intClockTimer[intTimerNumber] = intSetSeconds;
  7506                           
  7507                           ;incstack = 0
  7508                           ; Regs used in _timerFunction: [wreg-fsr0h+status,2+status,0]
  7509  15AF  1283               	bcf	3,5	;RP0=0, select bank0
  7510  15B0  1303               	bcf	3,6	;RP1=0, select bank0
  7511  15B1  0820               	movf	timerFunction@intTimerNumber,w
  7512  15B2  00A4               	movwf	??_timerFunction
  7513  15B3  0724               	addwf	??_timerFunction,w
  7514  15B4  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  7515  15B5  0084               	movwf	4
  7516  15B6  0822               	movf	timerFunction@intSetSeconds,w
  7517  15B7  1383               	bcf	3,7	;select IRP bank1
  7518  15B8  0080               	movwf	0
  7519  15B9  0A84               	incf	4,f
  7520  15BA  0823               	movf	timerFunction@intSetSeconds+1,w
  7521  15BB  0080               	movwf	0
  7522                           
  7523                           ;functions.c: 396: bTimerComplete[intTimerNumber] = 0;
  7524  15BC  0820               	movf	timerFunction@intTimerNumber,w
  7525  15BD  3E56               	addlw	(low (_bTimerComplete| 0))& (0+255)
  7526  15BE  0084               	movwf	4
  7527  15BF  0180               	clrf	0
  7528  15C0  0008               	return
  7529  15C1                     __end_of_timerFunction:	
  7530                           ;functions.c: 397: return 1;
  7531                           ;	Return value of _timerFunction is never used
  7532                           
  7533                           
  7534                           	psect	text39
  7535  16C7                     __ptext39:	
  7536 ;; *************** function _DarknessCheck *****************
  7537 ;; Defined at:
  7538 ;;		line 931 in file "functions.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;  darknessValu    1    9[BANK0 ] unsigned char 
  7543 ;; Return value:  Size  Location     Type
  7544 ;;                  1    wreg      void 
  7545 ;; Registers used:
  7546 ;;		wreg, status,2, status,0, pclath, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7552 ;;      Params:         0       0       0       0       0
  7553 ;;      Locals:         0       1       0       0       0
  7554 ;;      Temps:          0       1       0       0       0
  7555 ;;      Totals:         0       2       0       0       0
  7556 ;;Total ram usage:        2 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    4
  7559 ;; This function calls:
  7560 ;;		_AnalogValue
  7561 ;;		_eeprom_read
  7562 ;; This function is called by:
  7563 ;;		_ReceivedPacketHandler
  7564 ;;		_Mode_1
  7565 ;;		_LightWithSensController
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           
  7570                           ;psect for function _DarknessCheck
  7571  16C7                     _DarknessCheck:	
  7572                           
  7573                           ;functions.c: 933: unsigned char darknessValue;
  7574                           ;functions.c: 936: if(bValueFromPot == TRUE)
  7575                           
  7576                           ;incstack = 0
  7577                           ; Regs used in _DarknessCheck: [wreg+status,2+status,0+pclath+cstack]
  7578  16C7  1283               	bcf	3,5	;RP0=0, select bank0
  7579  16C8  1303               	bcf	3,6	;RP1=0, select bank0
  7580  16C9  036D               	decf	_bValueFromPot,w
  7581  16CA  1D03               	btfss	3,2
  7582  16CB  2ED3               	goto	l2716
  7583                           
  7584                           ;functions.c: 937: darknessValue= AnalogValue(3);
  7585  16CC  3003               	movlw	3
  7586  16CD  160A  118A  26EE  160A  118A  	fcall	_AnalogValue
  7587  16D2  2ED9               	goto	L4
  7588  16D3                     l2716:	
  7589                           
  7590                           ;functions.c: 938: else
  7591                           ;functions.c: 939: darknessValue=eeprom_read(0);
  7592  16D3  3000               	movlw	0
  7593  16D4  160A  118A  26A3  160A  118A  	fcall	_eeprom_read
  7594  16D9                     L4:	
  7595  16D9  1283               	bcf	3,5	;RP0=0, select bank0
  7596  16DA  1303               	bcf	3,6	;RP1=0, select bank0
  7597  16DB  00A8               	movwf	??_DarknessCheck
  7598  16DC  0828               	movf	??_DarknessCheck,w
  7599  16DD  00A9               	movwf	DarknessCheck@darknessValue
  7600                           
  7601                           ;functions.c: 941: if(AnalogValue(0)>darknessValue)
  7602  16DE  3000               	movlw	0
  7603  16DF  160A  118A  26EE  160A  118A  	fcall	_AnalogValue
  7604  16E4  1283               	bcf	3,5	;RP0=0, select bank0
  7605  16E5  1303               	bcf	3,6	;RP1=0, select bank0
  7606  16E6  0229               	subwf	DarknessCheck@darknessValue,w
  7607  16E7  1803               	skipnc
  7608  16E8  2EEC               	goto	l2720
  7609                           
  7610                           ;functions.c: 942: bDark = 1;
  7611  16E9  01E8               	clrf	_bDark
  7612  16EA  0AE8               	incf	_bDark,f
  7613  16EB  0008               	return
  7614  16EC                     l2720:	
  7615                           
  7616                           ;functions.c: 943: else
  7617                           ;functions.c: 944: bDark = 0;
  7618  16EC  01E8               	clrf	_bDark
  7619  16ED  0008               	return
  7620  16EE                     __end_of_DarknessCheck:	
  7621                           
  7622                           	psect	text40
  7623  16A3                     __ptext40:	
  7624 ;; *************** function _eeprom_read *****************
  7625 ;; Defined at:
  7626 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eeread.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;  addr            1    wreg     unsigned char 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;  addr            1    1[BANK0 ] unsigned char 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      unsigned char 
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, status,0
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7640 ;;      Params:         0       0       0       0       0
  7641 ;;      Locals:         0       1       0       0       0
  7642 ;;      Temps:          0       1       0       0       0
  7643 ;;      Totals:         0       2       0       0       0
  7644 ;;Total ram usage:        2 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    2
  7647 ;; This function calls:
  7648 ;;		Nothing
  7649 ;; This function is called by:
  7650 ;;		_ReceivedPacketHandler
  7651 ;;		_DarknessCheck
  7652 ;;		_ReadMemoryAdress
  7653 ;;		_IncreaseMemoryAdress
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           
  7658                           ;psect for function _eeprom_read
  7659  16A3                     _eeprom_read:	
  7660                           
  7661                           ;incstack = 0
  7662                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  7663                           ;eeprom_read@addr stored from wreg
  7664  16A3  1283               	bcf	3,5	;RP0=0, select bank0
  7665  16A4  1303               	bcf	3,6	;RP1=0, select bank0
  7666  16A5  00A1               	movwf	eeprom_read@addr
  7667  16A6  2EA9               	goto	l684
  7668  16A7                     u1391:	
  7669  16A7  1283               	bcf	3,5	;RP0=0, select bank0
  7670  16A8  1303               	bcf	3,6	;RP1=0, select bank0
  7671  16A9                     l684:	
  7672  16A9  0064               	clrwdt	;# 
  7673  16AA  1683               	bsf	3,5	;RP0=1, select bank3
  7674  16AB  1703               	bsf	3,6	;RP1=1, select bank3
  7675  16AC  188C               	btfsc	12,1	;volsfr
  7676  16AD  2EA7               	goto	u1391
  7677  16AE  1283               	bcf	3,5	;RP0=0, select bank0
  7678  16AF  1303               	bcf	3,6	;RP1=0, select bank0
  7679  16B0  0821               	movf	eeprom_read@addr,w
  7680  16B1  1283               	bcf	3,5	;RP0=0, select bank2
  7681  16B2  1703               	bsf	3,6	;RP1=1, select bank2
  7682  16B3  008D               	movwf	13	;volatile
  7683  16B4  303F               	movlw	63
  7684  16B5  1283               	bcf	3,5	;RP0=0, select bank0
  7685  16B6  1303               	bcf	3,6	;RP1=0, select bank0
  7686  16B7  00A0               	movwf	??_eeprom_read
  7687  16B8  0820               	movf	??_eeprom_read,w
  7688  16B9  1683               	bsf	3,5	;RP0=1, select bank3
  7689  16BA  1703               	bsf	3,6	;RP1=1, select bank3
  7690  16BB  058C               	andwf	12,f	;volsfr
  7691  16BC  140C               	bsf	12,0	;volsfr
  7692  16BD  1003               	clrc
  7693  16BE  180C               	btfsc	12,0	;volsfr
  7694  16BF  1403               	setc
  7695  16C0  3000               	movlw	0
  7696  16C1  1803               	skipnc
  7697  16C2  3001               	movlw	1
  7698  16C3  1283               	bcf	3,5	;RP0=0, select bank2
  7699  16C4  1703               	bsf	3,6	;RP1=1, select bank2
  7700  16C5  080C               	movf	12,w	;volatile
  7701  16C6  0008               	return
  7702  16C7                     __end_of_eeprom_read:	
  7703                           
  7704                           	psect	text41
  7705  16EE                     __ptext41:	
  7706 ;; *************** function _AnalogValue *****************
  7707 ;; Defined at:
  7708 ;;		line 901 in file "functions.c"
  7709 ;; Parameters:    Size  Location     Type
  7710 ;;  channel         1    wreg     unsigned char 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;  channel         1    7[BANK0 ] unsigned char 
  7713 ;; Return value:  Size  Location     Type
  7714 ;;                  1    wreg      unsigned char 
  7715 ;; Registers used:
  7716 ;;		wreg, status,2, status,0, pclath, cstack
  7717 ;; Tracked objects:
  7718 ;;		On entry : 0/0
  7719 ;;		On exit  : 0/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7722 ;;      Params:         0       0       0       0       0
  7723 ;;      Locals:         0       1       0       0       0
  7724 ;;      Temps:          0       1       0       0       0
  7725 ;;      Totals:         0       2       0       0       0
  7726 ;;Total ram usage:        2 bytes
  7727 ;; Hardware stack levels used:    1
  7728 ;; Hardware stack levels required when called:    3
  7729 ;; This function calls:
  7730 ;;		_DelayDs
  7731 ;; This function is called by:
  7732 ;;		_ReceivedPacketHandler
  7733 ;;		_DarknessCheck
  7734 ;;		_saveDataToFlash
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738                           
  7739                           ;psect for function _AnalogValue
  7740  16EE                     _AnalogValue:	
  7741                           
  7742                           ;incstack = 0
  7743                           ; Regs used in _AnalogValue: [wreg+status,2+status,0+pclath+cstack]
  7744                           ;AnalogValue@channel stored from wreg
  7745  16EE  1283               	bcf	3,5	;RP0=0, select bank0
  7746  16EF  1303               	bcf	3,6	;RP1=0, select bank0
  7747  16F0  00A7               	movwf	AnalogValue@channel
  7748                           
  7749                           ;functions.c: 903: RC0 = 0;
  7750  16F1  1007               	bcf	7,0	;volatile
  7751                           
  7752                           ;functions.c: 904: ADCON0bits.CHS = channel;
  7753  16F2  0827               	movf	AnalogValue@channel,w
  7754  16F3  00A6               	movwf	??_AnalogValue
  7755  16F4  0DA6               	rlf	??_AnalogValue,f
  7756  16F5  0DA6               	rlf	??_AnalogValue,f
  7757  16F6  081F               	movf	31,w	;volatile
  7758  16F7  0626               	xorwf	??_AnalogValue,w
  7759  16F8  39C3               	andlw	-61
  7760  16F9  0626               	xorwf	??_AnalogValue,w
  7761  16FA  009F               	movwf	31	;volatile
  7762                           
  7763                           ;functions.c: 905: ADCON0bits.ADON = 1;
  7764  16FB  141F               	bsf	31,0	;volatile
  7765                           
  7766                           ;functions.c: 906: DelayDs(1);
  7767  16FC  3001               	movlw	1
  7768  16FD  00A0               	movwf	DelayDs@cnt
  7769  16FE  3000               	movlw	0
  7770  16FF  00A1               	movwf	DelayDs@cnt+1
  7771  1700  160A  118A  267F  160A  118A  	fcall	_DelayDs
  7772                           
  7773                           ;functions.c: 907: ADCON0bits.GO = 1;
  7774  1705  1283               	bcf	3,5	;RP0=0, select bank0
  7775  1706  1303               	bcf	3,6	;RP1=0, select bank0
  7776  1707  149F               	bsf	31,1	;volatile
  7777                           
  7778                           ;functions.c: 908: DelayDs(1);
  7779  1708  3001               	movlw	1
  7780  1709  00A0               	movwf	DelayDs@cnt
  7781  170A  3000               	movlw	0
  7782  170B  00A1               	movwf	DelayDs@cnt+1
  7783  170C  160A  118A  267F  160A  118A  	fcall	_DelayDs
  7784  1711                     l481:	
  7785                           ;functions.c: 909: while(ADCON0bits.GO);
  7786                           
  7787  1711  1283               	bcf	3,5	;RP0=0, select bank0
  7788  1712  1303               	bcf	3,6	;RP1=0, select bank0
  7789  1713  189F               	btfsc	31,1	;volatile
  7790  1714  2F11               	goto	l481
  7791                           
  7792                           ;functions.c: 910: ADCON0bits.ADON = 0;
  7793  1715  101F               	bcf	31,0	;volatile
  7794                           
  7795                           ;functions.c: 911: RC0 = 1;
  7796  1716  1407               	bsf	7,0	;volatile
  7797                           
  7798                           ;functions.c: 913: return ADRESH;
  7799  1717  081E               	movf	30,w	;volatile
  7800  1718  0008               	return
  7801  1719                     __end_of_AnalogValue:	
  7802                           
  7803                           	psect	text42
  7804  167F                     __ptext42:	
  7805 ;; *************** function _DelayDs *****************
  7806 ;; Defined at:
  7807 ;;		line 511 in file "functions.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;  cnt             2    0[BANK0 ] int 
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;  i               2    4[BANK0 ] int 
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  1    wreg      void 
  7814 ;; Registers used:
  7815 ;;		wreg, status,2
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7821 ;;      Params:         0       2       0       0       0
  7822 ;;      Locals:         0       2       0       0       0
  7823 ;;      Temps:          0       2       0       0       0
  7824 ;;      Totals:         0       6       0       0       0
  7825 ;;Total ram usage:        6 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:    2
  7828 ;; This function calls:
  7829 ;;		Nothing
  7830 ;; This function is called by:
  7831 ;;		_ReceivedPacketHandler
  7832 ;;		_Blink
  7833 ;;		_AnalogValue
  7834 ;; This function uses a non-reentrant model
  7835 ;;
  7836                           
  7837                           
  7838                           ;psect for function _DelayDs
  7839  167F                     _DelayDs:	
  7840                           
  7841                           ;functions.c: 512: int i;
  7842                           ;functions.c: 513: for(i=0;i<cnt;i++){
  7843                           
  7844                           ;incstack = 0
  7845                           ; Regs used in _DelayDs: [wreg+status,2]
  7846  167F  1283               	bcf	3,5	;RP0=0, select bank0
  7847  1680  1303               	bcf	3,6	;RP1=0, select bank0
  7848  1681  01A4               	clrf	DelayDs@i
  7849  1682  01A5               	clrf	DelayDs@i+1
  7850  1683                     l411:	
  7851  1683  0825               	movf	DelayDs@i+1,w
  7852  1684  3A80               	xorlw	128
  7853  1685  00A2               	movwf	??_DelayDs
  7854  1686  0821               	movf	DelayDs@cnt+1,w
  7855  1687  3A80               	xorlw	128
  7856  1688  0222               	subwf	??_DelayDs,w
  7857  1689  1D03               	skipz
  7858  168A  2E8D               	goto	u1385
  7859  168B  0820               	movf	DelayDs@cnt,w
  7860  168C  0224               	subwf	DelayDs@i,w
  7861  168D                     u1385:	
  7862  168D  1803               	btfsc	3,0
  7863  168E  0008               	return
  7864                           
  7865                           ;functions.c: 514: _delay((unsigned long)((100)*(4000000/4000.0)));
  7866  168F  3082               	movlw	130
  7867  1690  1283               	bcf	3,5	;RP0=0, select bank0
  7868  1691  1303               	bcf	3,6	;RP1=0, select bank0
  7869  1692  00A3               	movwf	??_DelayDs+1
  7870  1693  30DD               	movlw	221
  7871  1694  00A2               	movwf	??_DelayDs
  7872  1695                     u2817:	
  7873  1695  0BA2               	decfsz	??_DelayDs,f
  7874  1696  2E95               	goto	u2817
  7875  1697  0BA3               	decfsz	??_DelayDs+1,f
  7876  1698  2E95               	goto	u2817
  7877  1699  2E9A               	nop2
  7878  169A  3001               	movlw	1
  7879  169B  1283               	bcf	3,5	;RP0=0, select bank0
  7880  169C  1303               	bcf	3,6	;RP1=0, select bank0
  7881  169D  07A4               	addwf	DelayDs@i,f
  7882  169E  1803               	skipnc
  7883  169F  0AA5               	incf	DelayDs@i+1,f
  7884  16A0  3000               	movlw	0
  7885  16A1  07A5               	addwf	DelayDs@i+1,f
  7886  16A2  2E83               	goto	l411
  7887  16A3                     __end_of_DelayDs:	
  7888                           
  7889                           	psect	text43
  7890  0C2A                     __ptext43:	
  7891 ;; *************** function _ClockInit *****************
  7892 ;; Defined at:
  7893 ;;		line 6 in file "MCP79510.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;		None
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;  cnt             1    4[BANK0 ] unsigned char 
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  1    wreg      void 
  7900 ;; Registers used:
  7901 ;;		wreg, status,2, status,0, pclath, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7907 ;;      Params:         0       0       0       0       0
  7908 ;;      Locals:         0       1       0       0       0
  7909 ;;      Temps:          0       1       0       0       0
  7910 ;;      Totals:         0       2       0       0       0
  7911 ;;Total ram usage:        2 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    4
  7914 ;; This function calls:
  7915 ;;		_ReadSPI
  7916 ;;		_WriteSPI
  7917 ;; This function is called by:
  7918 ;;		_main
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           
  7923                           ;psect for function _ClockInit
  7924  0C2A                     _ClockInit:	
  7925                           
  7926                           ;MCP79510.c: 8: RD4 = 0;
  7927                           
  7928                           ;incstack = 0
  7929                           ; Regs used in _ClockInit: [wreg+status,2+status,0+pclath+cstack]
  7930  0C2A  1283               	bcf	3,5	;RP0=0, select bank0
  7931  0C2B  1303               	bcf	3,6	;RP1=0, select bank0
  7932  0C2C  1208               	bcf	8,4	;volatile
  7933                           
  7934                           ;MCP79510.c: 9: WriteSPI(0x12);
  7935  0C2D  3012               	movlw	18
  7936  0C2E  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  7937                           
  7938                           ;MCP79510.c: 10: WriteSPI(0x01);
  7939  0C33  3001               	movlw	1
  7940  0C34  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  7941                           
  7942                           ;MCP79510.c: 11: WriteSPI(0x00);
  7943  0C39  3000               	movlw	0
  7944  0C3A  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  7945                           
  7946                           ;MCP79510.c: 12: RD4 = 1;
  7947  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  7948  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  7949  0C41  1608               	bsf	8,4	;volatile
  7950                           
  7951                           ;MCP79510.c: 13: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7952  0C42  300D               	movlw	13
  7953  0C43  00A3               	movwf	??_ClockInit
  7954  0C44                     u2827:	
  7955  0C44  0BA3               	decfsz	??_ClockInit,f
  7956  0C45  2C44               	goto	u2827
  7957                           
  7958                           ;MCP79510.c: 14: RD4 = 0;
  7959  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  7960  0C47  1303               	bcf	3,6	;RP1=0, select bank0
  7961  0C48  1208               	bcf	8,4	;volatile
  7962                           
  7963                           ;MCP79510.c: 15: WriteSPI(0x12);
  7964  0C49  3012               	movlw	18
  7965  0C4A  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  7966                           
  7967                           ;MCP79510.c: 16: WriteSPI(0x02);
  7968  0C4F  3002               	movlw	2
  7969  0C50  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  7970                           
  7971                           ;MCP79510.c: 17: WriteSPI(0x00);
  7972  0C55  3000               	movlw	0
  7973  0C56  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  7974                           
  7975                           ;MCP79510.c: 18: RD4 = 1;
  7976  0C5B  1283               	bcf	3,5	;RP0=0, select bank0
  7977  0C5C  1303               	bcf	3,6	;RP1=0, select bank0
  7978  0C5D  1608               	bsf	8,4	;volatile
  7979                           
  7980                           ;MCP79510.c: 19: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7981  0C5E  300D               	movlw	13
  7982  0C5F  00A3               	movwf	??_ClockInit
  7983  0C60                     u2837:	
  7984  0C60  0BA3               	decfsz	??_ClockInit,f
  7985  0C61  2C60               	goto	u2837
  7986                           
  7987                           ;MCP79510.c: 20: RD4 = 0;
  7988  0C62  1283               	bcf	3,5	;RP0=0, select bank0
  7989  0C63  1303               	bcf	3,6	;RP1=0, select bank0
  7990  0C64  1208               	bcf	8,4	;volatile
  7991                           
  7992                           ;MCP79510.c: 21: WriteSPI(0x12);
  7993  0C65  3012               	movlw	18
  7994  0C66  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  7995                           
  7996                           ;MCP79510.c: 22: WriteSPI(0x08);
  7997  0C6B  3008               	movlw	8
  7998  0C6C  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  7999                           
  8000                           ;MCP79510.c: 23: WriteSPI(0x00);
  8001  0C71  3000               	movlw	0
  8002  0C72  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  8003                           
  8004                           ;MCP79510.c: 24: RD4 = 1;
  8005  0C77  1283               	bcf	3,5	;RP0=0, select bank0
  8006  0C78  1303               	bcf	3,6	;RP1=0, select bank0
  8007  0C79  1608               	bsf	8,4	;volatile
  8008                           
  8009                           ;MCP79510.c: 25: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8010  0C7A  300D               	movlw	13
  8011  0C7B  00A3               	movwf	??_ClockInit
  8012  0C7C                     u2847:	
  8013  0C7C  0BA3               	decfsz	??_ClockInit,f
  8014  0C7D  2C7C               	goto	u2847
  8015                           
  8016                           ;MCP79510.c: 26: RD4 = 0;
  8017  0C7E  1283               	bcf	3,5	;RP0=0, select bank0
  8018  0C7F  1303               	bcf	3,6	;RP1=0, select bank0
  8019  0C80  1208               	bcf	8,4	;volatile
  8020                           
  8021                           ;MCP79510.c: 27: WriteSPI(0x12);
  8022  0C81  3012               	movlw	18
  8023  0C82  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  8024                           
  8025                           ;MCP79510.c: 28: WriteSPI(0x01);
  8026  0C87  3001               	movlw	1
  8027  0C88  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  8028                           
  8029                           ;MCP79510.c: 29: WriteSPI(0x80);
  8030  0C8D  3080               	movlw	128
  8031  0C8E  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  8032                           
  8033                           ;MCP79510.c: 30: RD4 = 1;
  8034  0C93  1283               	bcf	3,5	;RP0=0, select bank0
  8035  0C94  1303               	bcf	3,6	;RP1=0, select bank0
  8036  0C95  1608               	bsf	8,4	;volatile
  8037                           
  8038                           ;MCP79510.c: 32: char cnt = 0;
  8039  0C96  01A4               	clrf	ClockInit@cnt
  8040  0C97                     l3142:	
  8041                           ;MCP79510.c: 33: while(cnt < 100)
  8042                           
  8043  0C97  3064               	movlw	100
  8044  0C98  0224               	subwf	ClockInit@cnt,w
  8045  0C99  1803               	btfsc	3,0
  8046  0C9A  2CB7               	goto	l667
  8047                           
  8048                           ;MCP79510.c: 34: {
  8049                           ;MCP79510.c: 35: RD4 = 0;
  8050  0C9B  1208               	bcf	8,4	;volatile
  8051                           
  8052                           ;MCP79510.c: 36: WriteSPI(0x13);
  8053  0C9C  3013               	movlw	19
  8054  0C9D  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  8055                           
  8056                           ;MCP79510.c: 37: WriteSPI(0x04);
  8057  0CA2  3004               	movlw	4
  8058  0CA3  160A  118A  2591  120A  158A  	fcall	_WriteSPI
  8059                           
  8060                           ;MCP79510.c: 38: if((ReadSPI() & 0b00100000) != 0)
  8061  0CA8  160A  118A  2556  120A  158A  	fcall	_ReadSPI
  8062  0CAD  3920               	andlw	32
  8063  0CAE  1D03               	btfss	3,2
  8064  0CAF  2CB7               	goto	l667
  8065                           
  8066                           ;MCP79510.c: 42: }
  8067                           ;MCP79510.c: 43: cnt++;
  8068                           
  8069                           ;MCP79510.c: 39: {
  8070                           ;MCP79510.c: 40: break;
  8071  0CB0  3001               	movlw	1
  8072  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  8073  0CB2  1303               	bcf	3,6	;RP1=0, select bank0
  8074  0CB3  00A3               	movwf	??_ClockInit
  8075  0CB4  0823               	movf	??_ClockInit,w
  8076  0CB5  07A4               	addwf	ClockInit@cnt,f
  8077  0CB6  2C97               	goto	l3142
  8078  0CB7                     l667:	
  8079                           
  8080                           ;MCP79510.c: 46: }
  8081                           ;MCP79510.c: 47: RD4 = 1;
  8082  0CB7  1283               	bcf	3,5	;RP0=0, select bank0
  8083  0CB8  1303               	bcf	3,6	;RP1=0, select bank0
  8084  0CB9  1608               	bsf	8,4	;volatile
  8085  0CBA  0008               	return
  8086  0CBB                     __end_of_ClockInit:	
  8087                           
  8088                           	psect	text44
  8089  1556                     __ptext44:	
  8090 ;; *************** function _ReadSPI *****************
  8091 ;; Defined at:
  8092 ;;		line 532 in file "functions.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      unsigned char 
  8099 ;; Registers used:
  8100 ;;		wreg, status,2, status,0, pclath, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8106 ;;      Params:         0       0       0       0       0
  8107 ;;      Locals:         0       0       0       0       0
  8108 ;;      Temps:          0       0       0       0       0
  8109 ;;      Totals:         0       0       0       0       0
  8110 ;;Total ram usage:        0 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    3
  8113 ;; This function calls:
  8114 ;;		_WriteSPI
  8115 ;; This function is called by:
  8116 ;;		_RegisterRead
  8117 ;;		_ReadFIFO
  8118 ;;		_read_ram_status
  8119 ;;		_read_write_flash_ram
  8120 ;;		_ClockInit
  8121 ;;		_ReadClock
  8122 ;;		_read_ram_id
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           
  8127                           ;psect for function _ReadSPI
  8128  1556                     _ReadSPI:	
  8129                           
  8130                           ;functions.c: 534: WriteSPI(0x00);
  8131                           
  8132                           ;incstack = 0
  8133                           ; Regs used in _ReadSPI: [wreg+status,2+status,0+pclath+cstack]
  8134  1556  3000               	movlw	0
  8135  1557  160A  118A  2591   	fcall	_WriteSPI
  8136                           
  8137                           ;functions.c: 535: return SSPBUF;
  8138  155A  1283               	bcf	3,5	;RP0=0, select bank0
  8139  155B  1303               	bcf	3,6	;RP1=0, select bank0
  8140  155C  0813               	movf	19,w	;volatile
  8141  155D  0008               	return
  8142  155E                     __end_of_ReadSPI:	
  8143                           
  8144                           	psect	text45
  8145  1591                     __ptext45:	
  8146 ;; *************** function _WriteSPI *****************
  8147 ;; Defined at:
  8148 ;;		line 520 in file "functions.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;  databyte        1    wreg     unsigned char 
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;  databyte        1    2[BANK0 ] unsigned char 
  8153 ;;  buffer          1    1[BANK0 ] unsigned char 
  8154 ;; Return value:  Size  Location     Type
  8155 ;;                  1    wreg      void 
  8156 ;; Registers used:
  8157 ;;		wreg
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8163 ;;      Params:         0       0       0       0       0
  8164 ;;      Locals:         0       2       0       0       0
  8165 ;;      Temps:          0       1       0       0       0
  8166 ;;      Totals:         0       3       0       0       0
  8167 ;;Total ram usage:        3 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    2
  8170 ;; This function calls:
  8171 ;;		Nothing
  8172 ;; This function is called by:
  8173 ;;		_ReadSPI
  8174 ;;		_RegisterRead
  8175 ;;		_RegisterSet
  8176 ;;		_WriteFIFO
  8177 ;;		_read_ram_status
  8178 ;;		_ram_bulk_erase
  8179 ;;		_read_write_flash_ram
  8180 ;;		_write_ram_status
  8181 ;;		_ClockInit
  8182 ;;		_ReadClock
  8183 ;;		_read_ram_id
  8184 ;;		_ram_sector_erase
  8185 ;;		_power_up_flash_ram
  8186 ;;		_power_down_flash_ram
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           
  8191                           ;psect for function _WriteSPI
  8192  1591                     _WriteSPI:	
  8193                           
  8194                           ;incstack = 0
  8195                           ; Regs used in _WriteSPI: [wreg]
  8196                           ;WriteSPI@databyte stored from wreg
  8197  1591  1283               	bcf	3,5	;RP0=0, select bank0
  8198  1592  1303               	bcf	3,6	;RP1=0, select bank0
  8199  1593  00A2               	movwf	WriteSPI@databyte
  8200                           
  8201                           ;functions.c: 522: unsigned char buffer;
  8202                           ;functions.c: 523: buffer = SSPBUF;
  8203  1594  0813               	movf	19,w	;volatile
  8204  1595  00A0               	movwf	??_WriteSPI
  8205  1596  0820               	movf	??_WriteSPI,w
  8206  1597  00A1               	movwf	WriteSPI@buffer
  8207                           
  8208                           ;functions.c: 524: PIR1bits.SSPIF=0;
  8209  1598  118C               	bcf	12,3	;volatile
  8210                           
  8211                           ;functions.c: 525: SSPBUF = databyte;
  8212  1599  0822               	movf	WriteSPI@databyte,w
  8213  159A  0093               	movwf	19	;volatile
  8214  159B                     l417:	
  8215                           ;functions.c: 526: while(PIR1bits.SSPIF == 0);
  8216                           
  8217  159B  1D8C               	btfss	12,3	;volatile
  8218  159C  2D9B               	goto	l417
  8219                           
  8220                           ;functions.c: 527: PIR1bits.SSPIF = 0;
  8221  159D  118C               	bcf	12,3	;volatile
  8222  159E  0008               	return
  8223  159F                     __end_of_WriteSPI:	
  8224                           
  8225                           	psect	text46
  8226  0D6B                     __ptext46:	
  8227 ;; *************** function _tc_int *****************
  8228 ;; Defined at:
  8229 ;;		line 826 in file "functions.c"
  8230 ;; Parameters:    Size  Location     Type
  8231 ;;		None
  8232 ;; Auto vars:     Size  Location     Type
  8233 ;;		None
  8234 ;; Return value:  Size  Location     Type
  8235 ;;                  1    wreg      void 
  8236 ;; Registers used:
  8237 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8238 ;; Tracked objects:
  8239 ;;		On entry : 0/0
  8240 ;;		On exit  : 0/0
  8241 ;;		Unchanged: 0/0
  8242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8243 ;;      Params:         0       0       0       0       0
  8244 ;;      Locals:         0       0       0       0       0
  8245 ;;      Temps:          7       0       0       0       0
  8246 ;;      Totals:         7       0       0       0       0
  8247 ;;Total ram usage:        7 bytes
  8248 ;; Hardware stack levels used:    1
  8249 ;; Hardware stack levels required when called:    1
  8250 ;; This function calls:
  8251 ;;		_TimerCounter
  8252 ;;		i1_OperationMode
  8253 ;; This function is called by:
  8254 ;;		Interrupt level 1
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           
  8259                           ;psect for function _tc_int
  8260  0D6B                     _tc_int:	
  8261                           
  8262                           ;functions.c: 829: if((RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2)){
  8263  0D6B  1A86               	btfsc	6,5	;volatile
  8264  0D6C  2D83               	goto	i1l3414
  8265  0D6D  085D               	movf	_intBlinkCycle,w
  8266  0D6E  045E               	iorwf	_intBlinkCycle+1,w
  8267  0D6F  1D03               	btfss	3,2
  8268  0D70  2D83               	goto	i1l3414
  8269  0D71  160A  118A  2566  120A  158A  	fcall	i1_OperationMode
  8270  0D76  00F5               	movwf	??_tc_int
  8271  0D77  3002               	movlw	2
  8272  0D78  0275               	subwf	??_tc_int,w
  8273  0D79  1803               	skipnc
  8274  0D7A  2D83               	goto	i1l3414
  8275                           
  8276                           ;functions.c: 830: intBlinkCycle = 1;
  8277  0D7B  3001               	movlw	1
  8278  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  8279  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  8280  0D7E  00DD               	movwf	_intBlinkCycle
  8281  0D7F  3000               	movlw	0
  8282  0D80  00DE               	movwf	_intBlinkCycle+1
  8283                           
  8284                           ;functions.c: 831: intBlinkCounter = 0;
  8285  0D81  01FC               	clrf	_intBlinkCounter
  8286  0D82  01FD               	clrf	_intBlinkCounter+1
  8287  0D83                     i1l3414:	
  8288                           
  8289                           ;functions.c: 833: }
  8290                           ;functions.c: 836: if(TMR1IF ==1){
  8291  0D83  1283               	bcf	3,5	;RP0=0, select bank0
  8292  0D84  1303               	bcf	3,6	;RP1=0, select bank0
  8293  0D85  1C0C               	btfss	12,0	;volatile
  8294  0D86  2E20               	goto	L5
  8295                           
  8296                           ;functions.c: 837: TMR1ON = 0;
  8297  0D87  1010               	bcf	16,0	;volatile
  8298                           
  8299                           ;functions.c: 838: TMR1H = 0x0B;
  8300  0D88  300B               	movlw	11
  8301  0D89  008F               	movwf	15	;volatile
  8302                           
  8303                           ;functions.c: 839: TMR1L = 0xDB;
  8304  0D8A  30DB               	movlw	219
  8305  0D8B  008E               	movwf	14	;volatile
  8306                           
  8307                           ;functions.c: 841: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
  8308  0D8C  035D               	decf	_intBlinkCycle,w
  8309  0D8D  045E               	iorwf	_intBlinkCycle+1,w
  8310  0D8E  1D03               	btfss	3,2
  8311  0D8F  2DB2               	goto	i1l3432
  8312  0D90  086C               	movf	_intNumberOfBlinks+1,w
  8313  0D91  00F6               	movwf	??_tc_int+1
  8314  0D92  086B               	movf	_intNumberOfBlinks,w
  8315  0D93  00F5               	movwf	??_tc_int
  8316  0D94  1003               	clrc
  8317  0D95  0DF5               	rlf	??_tc_int,f
  8318  0D96  0DF6               	rlf	??_tc_int+1,f
  8319  0D97  087D               	movf	_intBlinkCounter+1,w
  8320  0D98  3A80               	xorlw	128
  8321  0D99  00F7               	movwf	??_tc_int+2
  8322  0D9A  0876               	movf	??_tc_int+1,w
  8323  0D9B  3A80               	xorlw	128
  8324  0D9C  0277               	subwf	??_tc_int+2,w
  8325  0D9D  1D03               	skipz
  8326  0D9E  2DA1               	goto	u256_25
  8327  0D9F  0875               	movf	??_tc_int,w
  8328  0DA0  027C               	subwf	_intBlinkCounter,w
  8329  0DA1                     u256_25:	
  8330  0DA1  1803               	skipnc
  8331  0DA2  2DB2               	goto	i1l3432
  8332                           
  8333                           ;functions.c: 842: intBlinkCounter++;
  8334  0DA3  3001               	movlw	1
  8335  0DA4  07FC               	addwf	_intBlinkCounter,f
  8336  0DA5  1803               	skipnc
  8337  0DA6  0AFD               	incf	_intBlinkCounter+1,f
  8338  0DA7  3000               	movlw	0
  8339  0DA8  07FD               	addwf	_intBlinkCounter+1,f
  8340                           
  8341                           ;functions.c: 844: if(RC1 == 0)
  8342  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  8343  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  8344  0DAB  1887               	btfsc	7,1	;volatile
  8345  0DAC  2DAF               	goto	i1l470
  8346                           
  8347                           ;functions.c: 845: RC1 = 1;
  8348  0DAD  1487               	bsf	7,1	;volatile
  8349  0DAE  2DD0               	goto	i1l3440
  8350  0DAF                     i1l470:	
  8351                           
  8352                           ;functions.c: 846: else if(RC1 == 1)
  8353  0DAF  1C87               	btfss	7,1	;volatile
  8354  0DB0  2DD0               	goto	i1l3440
  8355  0DB1  2DCF               	goto	i1l3438
  8356  0DB2                     i1l3432:	
  8357                           ;functions.c: 848: }
  8358                           
  8359                           ;functions.c: 847: RC1 = 0;
  8360                           
  8361                           
  8362                           ;functions.c: 850: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
  8363  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  8364  0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  8365  0DB4  035D               	decf	_intBlinkCycle,w
  8366  0DB5  045E               	iorwf	_intBlinkCycle+1,w
  8367  0DB6  1D03               	btfss	3,2
  8368  0DB7  2DD0               	goto	i1l3440
  8369  0DB8  086C               	movf	_intNumberOfBlinks+1,w
  8370  0DB9  00F6               	movwf	??_tc_int+1
  8371  0DBA  086B               	movf	_intNumberOfBlinks,w
  8372  0DBB  00F5               	movwf	??_tc_int
  8373  0DBC  1003               	clrc
  8374  0DBD  0DF5               	rlf	??_tc_int,f
  8375  0DBE  0DF6               	rlf	??_tc_int+1,f
  8376  0DBF  087D               	movf	_intBlinkCounter+1,w
  8377  0DC0  3A80               	xorlw	128
  8378  0DC1  00F7               	movwf	??_tc_int+2
  8379  0DC2  0876               	movf	??_tc_int+1,w
  8380  0DC3  3A80               	xorlw	128
  8381  0DC4  0277               	subwf	??_tc_int+2,w
  8382  0DC5  1D03               	skipz
  8383  0DC6  2DC9               	goto	u260_25
  8384  0DC7  0875               	movf	??_tc_int,w
  8385  0DC8  027C               	subwf	_intBlinkCounter,w
  8386  0DC9                     u260_25:	
  8387  0DC9  1C03               	skipc
  8388  0DCA  2DD0               	goto	i1l3440
  8389                           
  8390                           ;functions.c: 851: intBlinkCycle = 0;
  8391  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  8392  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  8393  0DCD  01DD               	clrf	_intBlinkCycle
  8394  0DCE  01DE               	clrf	_intBlinkCycle+1
  8395  0DCF                     i1l3438:	
  8396                           
  8397                           ;functions.c: 852: RC1 = 0;
  8398  0DCF  1087               	bcf	7,1	;volatile
  8399  0DD0                     i1l3440:	
  8400                           
  8401                           ;functions.c: 853: }
  8402                           ;functions.c: 856: intHalfSecondCounter++;
  8403  0DD0  3001               	movlw	1
  8404  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  8405  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  8406  0DD3  07E1               	addwf	_intHalfSecondCounter,f
  8407  0DD4  1803               	skipnc
  8408  0DD5  0AE2               	incf	_intHalfSecondCounter+1,f
  8409  0DD6  3000               	movlw	0
  8410  0DD7  07E2               	addwf	_intHalfSecondCounter+1,f
  8411                           
  8412                           ;functions.c: 857: if(intHalfSecondCounter>=2)
  8413  0DD8  0862               	movf	_intHalfSecondCounter+1,w
  8414  0DD9  3A80               	xorlw	128
  8415  0DDA  00FF               	movwf	127
  8416  0DDB  3080               	movlw	128
  8417  0DDC  027F               	subwf	127,w
  8418  0DDD  1D03               	skipz
  8419  0DDE  2DE1               	goto	u261_25
  8420  0DDF  3002               	movlw	2
  8421  0DE0  0261               	subwf	_intHalfSecondCounter,w
  8422  0DE1                     u261_25:	
  8423  0DE1  1C03               	skipc
  8424  0DE2  2DF2               	goto	i1l3450
  8425                           
  8426                           ;functions.c: 858: {
  8427                           ;functions.c: 859: intHalfSecondCounter = 0;
  8428  0DE3  1283               	bcf	3,5	;RP0=0, select bank0
  8429  0DE4  1303               	bcf	3,6	;RP1=0, select bank0
  8430  0DE5  01E1               	clrf	_intHalfSecondCounter
  8431  0DE6  01E2               	clrf	_intHalfSecondCounter+1
  8432                           
  8433                           ;functions.c: 860: intSecondCounter++;
  8434  0DE7  3001               	movlw	1
  8435  0DE8  07E5               	addwf	_intSecondCounter,f
  8436  0DE9  1803               	skipnc
  8437  0DEA  0AE6               	incf	_intSecondCounter+1,f
  8438  0DEB  3000               	movlw	0
  8439  0DEC  07E6               	addwf	_intSecondCounter+1,f
  8440                           
  8441                           ;functions.c: 861: TimerCounter();
  8442  0DED  120A  158A  209B  120A  158A  	fcall	_TimerCounter
  8443  0DF2                     i1l3450:	
  8444                           
  8445                           ;functions.c: 863: }
  8446                           ;functions.c: 864: if(intSecondCounter >=60)
  8447  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  8448  0DF3  1303               	bcf	3,6	;RP1=0, select bank0
  8449  0DF4  0866               	movf	_intSecondCounter+1,w
  8450  0DF5  3A80               	xorlw	128
  8451  0DF6  00FF               	movwf	127
  8452  0DF7  3080               	movlw	128
  8453  0DF8  027F               	subwf	127,w
  8454  0DF9  1D03               	skipz
  8455  0DFA  2DFD               	goto	u262_25
  8456  0DFB  303C               	movlw	60
  8457  0DFC  0265               	subwf	_intSecondCounter,w
  8458  0DFD                     u262_25:	
  8459  0DFD  1C03               	skipc
  8460  0DFE  2E0B               	goto	i1l3458
  8461                           
  8462                           ;functions.c: 865: {
  8463                           ;functions.c: 866: intSecondCounter = 0;
  8464  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
  8465  0E00  1303               	bcf	3,6	;RP1=0, select bank0
  8466  0E01  01E5               	clrf	_intSecondCounter
  8467  0E02  01E6               	clrf	_intSecondCounter+1
  8468                           
  8469                           ;functions.c: 867: intMinuteCounter++;
  8470  0E03  3001               	movlw	1
  8471  0E04  07E3               	addwf	_intMinuteCounter,f
  8472  0E05  1803               	skipnc
  8473  0E06  0AE4               	incf	_intMinuteCounter+1,f
  8474  0E07  3000               	movlw	0
  8475  0E08  07E4               	addwf	_intMinuteCounter+1,f
  8476                           
  8477                           ;functions.c: 868: bSaveDataToFlash = TRUE;
  8478  0E09  01E9               	clrf	_bSaveDataToFlash
  8479  0E0A  0AE9               	incf	_bSaveDataToFlash,f
  8480  0E0B                     i1l3458:	
  8481                           
  8482                           ;functions.c: 870: }
  8483                           ;functions.c: 871: if(intMinuteCounter >= 60)
  8484  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  8485  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  8486  0E0D  0864               	movf	_intMinuteCounter+1,w
  8487  0E0E  3A80               	xorlw	128
  8488  0E0F  00FF               	movwf	127
  8489  0E10  3080               	movlw	128
  8490  0E11  027F               	subwf	127,w
  8491  0E12  1D03               	skipz
  8492  0E13  2E16               	goto	u263_25
  8493  0E14  303C               	movlw	60
  8494  0E15  0263               	subwf	_intMinuteCounter,w
  8495  0E16                     u263_25:	
  8496  0E16  1C03               	skipc
  8497  0E17  2E1C               	goto	i1l3462
  8498                           
  8499                           ;functions.c: 872: {
  8500                           ;functions.c: 873: intMinuteCounter = 0;
  8501  0E18  1283               	bcf	3,5	;RP0=0, select bank0
  8502  0E19  1303               	bcf	3,6	;RP1=0, select bank0
  8503  0E1A  01E3               	clrf	_intMinuteCounter
  8504  0E1B  01E4               	clrf	_intMinuteCounter+1
  8505  0E1C                     i1l3462:	
  8506                           
  8507                           ;functions.c: 874: }
  8508                           ;functions.c: 877: TMR1ON = 1;
  8509  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  8510  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  8511  0E1E  1410               	bsf	16,0	;volatile
  8512                           
  8513                           ;functions.c: 878: }
  8514                           ;functions.c: 879: TMR1IF = 0;
  8515  0E1F  100C               	bcf	12,0	;volatile
  8516  0E20                     L5:	
  8517                           
  8518                           ;functions.c: 880: RBIF = 0;
  8519  0E20  100B               	bcf	11,0	;volatile
  8520                           
  8521                           ;functions.c: 881: GIE = 1;
  8522  0E21  178B               	bsf	11,7	;volatile
  8523                           
  8524                           ;functions.c: 882: return;
  8525  0E22  087B               	movf	??_tc_int+6,w
  8526  0E23  00FF               	movwf	127
  8527  0E24  087A               	movf	??_tc_int+5,w
  8528  0E25  008A               	movwf	10
  8529  0E26  0879               	movf	??_tc_int+4,w
  8530  0E27  0084               	movwf	4
  8531  0E28  0E78               	swapf	(??_tc_int+3)^(0+-128),w
  8532  0E29  0083               	movwf	3
  8533  0E2A  0EFE               	swapf	126,f
  8534  0E2B  0E7E               	swapf	126,w
  8535  0E2C  0009               	retfie
  8536  0E2D                     __end_of_tc_int:	
  8537                           
  8538                           	psect	intentry
  8539  0004                     __pintentry:	
  8540                           ;incstack = 0
  8541 ;; hardware stack exceeded
  8542                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8543                           
  8544  0004                     interrupt_function:	
  8545  007E                     saved_w	set	btemp
  8546  0004  00FE               	movwf	btemp
  8547  0005  0E03               	swapf	3,w
  8548  0006  00F8               	movwf	??_tc_int+3
  8549  0007  0804               	movf	4,w
  8550  0008  00F9               	movwf	??_tc_int+4
  8551  0009  080A               	movf	10,w
  8552  000A  00FA               	movwf	??_tc_int+5
  8553  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8554  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8555  000D  087F               	movf	btemp+1,w
  8556  000E  00FB               	movwf	??_tc_int+6
  8557  000F  120A  158A  2D6B   	ljmp	_tc_int
  8558                           
  8559                           	psect	text47
  8560  1566                     __ptext47:	
  8561 ;; *************** function i1_OperationMode *****************
  8562 ;; Defined at:
  8563 ;;		line 964 in file "functions.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;		None
  8566 ;; Auto vars:     Size  Location     Type
  8567 ;;  OperationMod    1    1[COMMON] unsigned char 
  8568 ;; Return value:  Size  Location     Type
  8569 ;;                  1    wreg      unsigned char 
  8570 ;; Registers used:
  8571 ;;		wreg, status,2
  8572 ;; Tracked objects:
  8573 ;;		On entry : 0/0
  8574 ;;		On exit  : 0/0
  8575 ;;		Unchanged: 0/0
  8576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8577 ;;      Params:         0       0       0       0       0
  8578 ;;      Locals:         1       0       0       0       0
  8579 ;;      Temps:          1       0       0       0       0
  8580 ;;      Totals:         2       0       0       0       0
  8581 ;;Total ram usage:        2 bytes
  8582 ;; Hardware stack levels used:    1
  8583 ;; This function calls:
  8584 ;;		Nothing
  8585 ;; This function is called by:
  8586 ;;		_tc_int
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           
  8591                           ;psect for function i1_OperationMode
  8592  1566                     i1_OperationMode:	
  8593                           
  8594                           ;functions.c: 966: unsigned char bracketStatus;
  8595                           ;functions.c: 967: bracketStatus = ((~PORTB) & 0b00000111) ;
  8596                           
  8597                           ;incstack = 0
  8598 ;; hardware stack exceeded
  8599                           ; Regs used in i1_OperationMode: [wreg+status,2]
  8600  1566  1283               	bcf	3,5	;RP0=0, select bank0
  8601  1567  1303               	bcf	3,6	;RP1=0, select bank0
  8602  1568  0906               	comf	6,w	;volatile
  8603  1569  3907               	andlw	7
  8604  156A  00F0               	movwf	??i1_OperationMode
  8605  156B  0870               	movf	??i1_OperationMode,w
  8606  156C  00F1               	movwf	i1OperationMode@bracketStatus
  8607                           
  8608                           ;functions.c: 969: return bracketStatus;
  8609  156D  0871               	movf	i1OperationMode@bracketStatus,w
  8610  156E  0008               	return
  8611  156F                     __end_ofi1_OperationMode:	
  8612                           
  8613                           	psect	text48
  8614  089B                     __ptext48:	
  8615 ;; *************** function _TimerCounter *****************
  8616 ;; Defined at:
  8617 ;;		line 415 in file "functions.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;		None
  8620 ;; Auto vars:     Size  Location     Type
  8621 ;;  i               2    3[COMMON] int 
  8622 ;; Return value:  Size  Location     Type
  8623 ;;                  1    wreg      void 
  8624 ;; Registers used:
  8625 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  8626 ;; Tracked objects:
  8627 ;;		On entry : 0/0
  8628 ;;		On exit  : 0/0
  8629 ;;		Unchanged: 0/0
  8630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8631 ;;      Params:         0       0       0       0       0
  8632 ;;      Locals:         2       0       0       0       0
  8633 ;;      Temps:          3       0       0       0       0
  8634 ;;      Totals:         5       0       0       0       0
  8635 ;;Total ram usage:        5 bytes
  8636 ;; Hardware stack levels used:    1
  8637 ;; This function calls:
  8638 ;;		Nothing
  8639 ;; This function is called by:
  8640 ;;		_tc_int
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           
  8645                           ;psect for function _TimerCounter
  8646  089B                     _TimerCounter:	
  8647                           
  8648                           ;functions.c: 417: for (int i = 0; i < 5; i++)
  8649                           
  8650                           ;incstack = 0
  8651 ;; hardware stack exceeded
  8652                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  8653  089B  01F3               	clrf	TimerCounter@i
  8654  089C  01F4               	clrf	TimerCounter@i+1
  8655  089D                     L6:	
  8656  089D  0874               	movf	TimerCounter@i+1,w
  8657  089E  3A80               	xorlw	128
  8658  089F  00FF               	movwf	127
  8659  08A0  3080               	movlw	128
  8660  08A1  027F               	subwf	127,w
  8661  08A2  1D03               	skipz
  8662  08A3  28A6               	goto	u237_25
  8663  08A4  3005               	movlw	5
  8664  08A5  0273               	subwf	TimerCounter@i,w
  8665  08A6                     u237_25:	
  8666  08A6  1803               	btfsc	3,0
  8667  08A7  0008               	return
  8668                           
  8669                           ;functions.c: 418: {
  8670                           ;functions.c: 419: if(intClockTimer[i]>0)
  8671  08A8  0873               	movf	TimerCounter@i,w
  8672  08A9  00F0               	movwf	??_TimerCounter
  8673  08AA  0770               	addwf	??_TimerCounter,w
  8674  08AB  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  8675  08AC  0084               	movwf	4
  8676  08AD  1383               	bcf	3,7	;select IRP bank1
  8677  08AE  0800               	movf	0,w
  8678  08AF  00F1               	movwf	??_TimerCounter+1
  8679  08B0  0A84               	incf	4,f
  8680  08B1  0800               	movf	0,w
  8681  08B2  00F2               	movwf	??_TimerCounter+2
  8682  08B3  0872               	movf	??_TimerCounter+2,w
  8683  08B4  3A80               	xorlw	128
  8684  08B5  00FF               	movwf	127
  8685  08B6  3080               	movlw	128
  8686  08B7  027F               	subwf	127,w
  8687  08B8  1D03               	skipz
  8688  08B9  28BC               	goto	u238_25
  8689  08BA  3001               	movlw	1
  8690  08BB  0271               	subwf	??_TimerCounter+1,w
  8691  08BC                     u238_25:	
  8692  08BC  1C03               	skipc
  8693  08BD  28D0               	goto	i1l3320
  8694                           
  8695                           ;functions.c: 420: intClockTimer[i]--;
  8696  08BE  0873               	movf	TimerCounter@i,w
  8697  08BF  00F0               	movwf	??_TimerCounter
  8698  08C0  0770               	addwf	??_TimerCounter,w
  8699  08C1  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  8700  08C2  0084               	movwf	4
  8701  08C3  30FF               	movlw	255
  8702  08C4  1383               	bcf	3,7	;select IRP bank1
  8703  08C5  0780               	addwf	0,f
  8704  08C6  0F84               	incfsz	4,f
  8705  08C7  0800               	movf	0,w
  8706  08C8  1803               	skipnc
  8707  08C9  0A00               	incf	0,w
  8708  08CA  00FF               	movwf	127
  8709  08CB  30FF               	movlw	255
  8710  08CC  077F               	addwf	127,w
  8711  08CD  0080               	movwf	0
  8712  08CE  0384               	decf	4,f
  8713  08CF  28D6               	goto	i1l3322
  8714  08D0                     i1l3320:	
  8715                           
  8716                           ;functions.c: 421: else
  8717                           ;functions.c: 422: bTimerComplete[i] = 1;
  8718  08D0  0873               	movf	TimerCounter@i,w
  8719  08D1  3E56               	addlw	(low (_bTimerComplete| 0))& (0+255)
  8720  08D2  0084               	movwf	4
  8721  08D3  1383               	bcf	3,7	;select IRP bank0
  8722  08D4  0180               	clrf	0
  8723  08D5  0A80               	incf	0,f
  8724  08D6                     i1l3322:	
  8725  08D6  3001               	movlw	1
  8726  08D7  07F3               	addwf	TimerCounter@i,f
  8727  08D8  1803               	skipnc
  8728  08D9  0AF4               	incf	TimerCounter@i+1,f
  8729  08DA  3000               	movlw	0
  8730  08DB  07F4               	addwf	TimerCounter@i+1,f
  8731  08DC  289D               	goto	L6
  8732  08DD                     __end_of_TimerCounter:	
  8733  007E                     btemp	set	126	;btemp
  8734  007E                     wtemp	set	126
  8735  007E                     wtemp0	set	126
  8736  0080                     wtemp1	set	128
  8737  0082                     wtemp2	set	130
  8738  0084                     wtemp3	set	132
  8739  0086                     wtemp4	set	134
  8740  0088                     wtemp5	set	136
  8741  007F                     wtemp6	set	127
  8742  007E                     ttemp	set	126
  8743  007E                     ttemp0	set	126
  8744  0081                     ttemp1	set	129
  8745  0084                     ttemp2	set	132
  8746  0087                     ttemp3	set	135
  8747  007F                     ttemp4	set	127
  8748  007E                     ltemp	set	126
  8749  007E                     ltemp0	set	126
  8750  0082                     ltemp1	set	130
  8751  0086                     ltemp2	set	134
  8752  0080                     ltemp3	set	128


Data Sizes:
    Strings     16
    Constant    39
    Data        3
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     54      78
    BANK1            80     34      44
    BANK3            96      0      40
    BANK2            96      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strchr@ptr	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    strstr@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strstr@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    ReadClock@year	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@year(BANK0[1]), 

    ReadClock@month	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@month(BANK0[1]), 

    ReadClock@date	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@date(BANK0[1]), 

    ReadClock@hour	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@hours(BANK0[1]), 

    ReadClock@minutes	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@minutes(BANK0[1]), 

    ReadClock@seconds	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@seconds(BANK0[1]), 

    read_write_flash_ram@mem_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@value(BANK0[1]), saveDataToFlash@value(BANK0[1]), 

    ReadMemoryAdress@var1	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr1(BANK0[1]), saveDataToFlash@addr1(BANK0[1]), 

    ReadMemoryAdress@var2	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr2(BANK0[1]), saveDataToFlash@addr2(BANK0[1]), 

    ReadMemoryAdress@var3	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr3(BANK0[1]), saveDataToFlash@addr3(BANK0[1]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    ReceivedPacketHandler@Data	PTR unsigned char  size(1) Largest target is 30
		 -> TransiverReadFIFO@ReceivedString(BANK1[30]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_TimerCounter

Critical Paths under _main in BANK0

    _main->_TransiverReadFIFO
    _saveDataToFlash->_ReadClock
    _ReadClock->___bmul
    _IncreaseMemoryAdress->_eeprom_write
    _TransiverToReceive->_FindChannel
    _TransiverReadFIFO->_ReceivedPacketHandler
    _ReceivedPacketHandler->_SendMemoryData
    _write_ram_status->_read_ram_status
    _strstr->_strncmp
    _strncmp->_strlen
    _ram_bulk_erase->_read_ram_status
    _SendMemoryData->_TransmittPacket
    _read_write_flash_ram->_read_ram_status
    _read_ram_status->_WriteSPI
    _ReadMemoryAdress->_eeprom_read
    _ResetMemoryAdress->_eeprom_write
    _TransiverInit->_FindChannel
    _Blink->_DelayDs
    _Mode_5->_TransmittPacket
    _Mode_4->_TransmittPacket
    _TransmittPacket->_FindChannel
    _WriteFIFO->_WriteSPI
    _FindChannel->_SetRFMode
    _SetRFMode->_RegisterSet
    _RegisterSet->_RegisterRead
    _RegisterRead->_WriteSPI
    _Mode_1->_DarknessCheck
    _LightWithSensController->_DarknessCheck
    _DarknessCheck->_AnalogValue
    _AnalogValue->_DelayDs
    _ClockInit->_WriteSPI
    _ReadSPI->_WriteSPI

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_TransiverReadFIFO

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  100720
                                             51 BANK0      3     3      0
                          _ClockInit
                             _Mode_0
                             _Mode_1
                             _Mode_2
                             _Mode_4
                             _Mode_5
                      _OperationMode
                            _PICInit
                  _ResetMemoryAdress
                      _TransiverInit
                  _TransiverReadFIFO
                 _TransiverToReceive
                     _ram_bulk_erase
                    _read_ram_status
                    _saveDataToFlash
                   _write_ram_status
 ---------------------------------------------------------------------------------
 (1) _saveDataToFlash                                     15    15      0   11304
                                             24 BANK0     15    15      0
                        _AnalogValue
               _IncreaseMemoryAdress
                          _ReadClock
                   _ReadMemoryAdress
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (2) _ReadClock                                           20    15      5    1551
                                              4 BANK0     20    15      5
                            _ReadSPI
                           _WriteSPI
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     476
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _IncreaseMemoryAdress                                 4     4      0     653
                                              3 BANK0      4     4      0
                        _eeprom_read
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (1) _TransiverToReceive                                   2     2      0    9949
                                             21 BANK0      2     2      0
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (1) _TransiverReadFIFO                                   36    36      0   38184
                                             49 BANK0      2     2      0
                                              0 BANK1     34    34      0
                           _ReadFIFO
              _ReceivedPacketHandler
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _ReceivedPacketHandler                                2     2      0   34927
                                             47 BANK0      2     2      0
                        _AnalogValue
                      _DarknessCheck
                            _DelayDs
                      _OperationMode
                  _ResetMemoryAdress
                     _SendMemoryData
                    _TransmittPacket
                        _eeprom_read
                       _eeprom_write
                     _ram_bulk_erase
                    _read_ram_status
                             _strstr
                   _write_ram_status
 ---------------------------------------------------------------------------------
 (1) _write_ram_status                                     1     1      0     114
                                              5 BANK0      1     1      0
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _strstr                                               5     4      1     959
                                             14 BANK0      5     4      1
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              6     3      3     292
                                              8 BANK0      6     3      3
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               8     6      2     120
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               3     1      2     182
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ram_bulk_erase                                       0     0      0      92
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _SendMemoryData                                      20    20      0   18239
                                             27 BANK0     20    20      0
                   _ReadMemoryAdress
                    _TransmittPacket
                            ___llmod
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (2) _read_write_flash_ram                                11     5      6    4519
                                              5 BANK0     11     5      6
                            _ReadSPI
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (2) _read_ram_status                                      2     2      0      69
                                              3 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _ReadMemoryAdress                                     4     2      2    1826
                                              2 BANK0      4     2      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _ResetMemoryAdress                                    0     0      0     492
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     492
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadFIFO                                             2     2      0      46
                                              3 BANK0      2     2      0
                            _ReadSPI
 ---------------------------------------------------------------------------------
 (1) _TransiverInit                                        1     1      0   10295
                                             21 BANK0      1     1      0
                              _Blink
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _Blink                                                5     3      2    1052
                                              6 BANK0      5     3      2
                            _DelayDs
 ---------------------------------------------------------------------------------
 (1) _PICInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mode_5                                               1     1      0   12843
                                             27 BANK0      1     1      0
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (1) _Mode_4                                               0     0      0   12843
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (3) _TransmittPacket                                      6     5      1   11127
                                             21 BANK0      6     5      1
                        _AnalogValue (ARG)
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                          _WriteFIFO
                        _eeprom_read (ARG)
                      _timerFunction
 ---------------------------------------------------------------------------------
 (4) _WriteFIFO                                            1     1      0      45
                                              3 BANK0      1     1      0
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _FindChannel                                          7     7      0    4734
                                             14 BANK0      7     7      0
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _SetRFMode                                            3     3      0    2321
                                             11 BANK0      3     3      0
                       _RegisterRead
                        _RegisterSet
 ---------------------------------------------------------------------------------
 (3) _RegisterSet                                          4     3      1    2074
                                              7 BANK0      4     3      1
                       _RegisterRead (ARG)
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _RegisterRead                                         4     4      0     114
                                              3 BANK0      4     4      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (1) _Mode_2                                               0     0      0    1716
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (1) _Mode_1                                               0     0      0    1010
                      _DarknessCheck
 ---------------------------------------------------------------------------------
 (1) _Mode_0                                               0     0      0    1716
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (2) _LightWithSensController                              0     0      0    1716
                      _DarknessCheck
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _timerFunction                                        5     1      4     706
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _DarknessCheck                                        2     2      0    1010
                                              8 BANK0      2     2      0
                        _AnalogValue
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _AnalogValue                                          2     2      0     964
                                              6 BANK0      2     2      0
                            _DelayDs
 ---------------------------------------------------------------------------------
 (3) _DelayDs                                              6     4      2     942
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            2     2      0      70
                                              3 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _ReadSPI                                              0     0      0      23
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _WriteSPI                                             3     3      0      23
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _tc_int                                              7     7      0     135
                                              5 COMMON     7     7      0
                       _TimerCounter
                    i1_OperationMode
 ---------------------------------------------------------------------------------
 (11) i1_OperationMode                                     2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _TimerCounter                                        5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClockInit
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _Mode_0
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_1
     _DarknessCheck
       _AnalogValue
         _DelayDs
       _eeprom_read
   _Mode_2
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_4
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _Mode_5
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _OperationMode
   _PICInit
   _ResetMemoryAdress
     _eeprom_write
   _TransiverInit
     _Blink
       _DelayDs
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
   _TransiverReadFIFO
     _ReadFIFO
       _ReadSPI
         _WriteSPI
     _ReceivedPacketHandler
       _AnalogValue
         _DelayDs
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _DelayDs
       _OperationMode
       _ResetMemoryAdress
         _eeprom_write
       _SendMemoryData
         _ReadMemoryAdress
           _eeprom_read
         _TransmittPacket
           _AnalogValue (ARG)
             _DelayDs
           _FindChannel (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
             _SetRFMode
               _RegisterRead
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _RegisterSet
                 _RegisterRead (ARG)
                   _ReadSPI
                     _WriteSPI
                   _WriteSPI
                 _WriteSPI (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet (ARG)
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
           _WriteFIFO (ARG)
             _WriteSPI
           _eeprom_read (ARG)
           _timerFunction (ARG)
         ___llmod
         _read_write_flash_ram
           _ReadSPI
             _WriteSPI
           _WriteSPI
           _read_ram_status
             _ReadSPI
               _WriteSPI
             _WriteSPI
       _TransmittPacket
         _AnalogValue (ARG)
           _DelayDs
         _FindChannel (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
         _WriteFIFO (ARG)
           _WriteSPI
         _eeprom_read (ARG)
         _timerFunction (ARG)
       _eeprom_read
       _eeprom_write
       _ram_bulk_erase
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
       _write_ram_status
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _TransiverToReceive
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _ram_bulk_erase
     _WriteSPI
     _read_ram_status
       _ReadSPI
         _WriteSPI
       _WriteSPI
   _read_ram_status
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _saveDataToFlash
     _AnalogValue
       _DelayDs
     _IncreaseMemoryAdress
       _eeprom_read
       _eeprom_write
     _ReadClock
       _ReadSPI
         _WriteSPI
       _WriteSPI
       ___bmul
     _ReadMemoryAdress
       _eeprom_read
     _read_write_flash_ram
       _ReadSPI
         _WriteSPI
       _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI
   _write_ram_status
     _WriteSPI
     _read_ram_status
       _ReadSPI
         _WriteSPI
       _WriteSPI

 _tc_int (ROOT)
   _TimerCounter
   i1_OperationMode

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      28       9       41.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      2C       7       55.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     36      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B0      12        0.0%
ABS                  0      0      B0       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Mar 22 15:44:49 2017

                             __CFG_CP$ON 0000                 __size_of_read_ram_status 0014  
                                      pc 0002               __size_of_TransiverReadFIFO 006C  
                  _bTransiverModeReceive 006A                           ___bmul@product 0022  
                            _SSPSTATbits 0094                                       l83 0EAD  
                                     _RD 0C60                              __CFG_CPD$ON 0000  
                                     _WR 0C61                          _saveDataToFlash 0045  
                                     fsr 0004                                      l310 046C  
                                    l402 0A95                                      l314 02E1  
                                    l411 1683                                      l316 02F6  
                                    l405 0A9B            __size_of_read_write_flash_ram 007D  
                                    l317 030B                                      l352 0D4C  
                                    l417 159B                                      l441 0BA9  
                                    l363 1627                                      l368 158F  
                                    l481 1711                                      l706 17A0  
                                    l387 0899                                      l667 0CB7  
                                    l684 16A9                                      l599 0C16  
                                    _GIE 005F                                      _RA1 0029  
                                    _RB0 0030                                      _RB1 0031  
                                    _RC0 0038                                      _RA4 002C  
                                    _RC1 0039                                      _RB3 0033  
                                    _RA5 002D                                      _RC2 003A  
                                    _RB4 0034                                      _RB5 0035  
                                    _RD3 0043                                      _RD4 0044  
                  __end_of_DarknessCheck 16EE                                      fsr0 0004  
                                    indf 0000                         TransmittPacket@i 0038  
                    __end_of_FindChannel 07F1                          ??_timerFunction 0024  
                           __CFG_LVP$OFF 0000                                     l1180 08E0  
                                   l1168 15FD                                     l2410 0B88  
                                   l2402 0B4E                                     l2404 0B5B  
                                   l3142 0C97                                     l2406 0B6A  
                                   l2414 0B96                                     l3222 0B2A  
                                   l3214 0B09                                     l3152 161C  
                                   l2408 0B79                                     l2440 071E  
                                   l2514 0CF8                                     l2610 099F  
                                   l3218 0B23                                     l2460 07DC  
                                   l2540 0D55                                     l2516 0D0B  
                                   l2604 0971                                     l3174 15CF  
                                   l2606 0981                                     l2614 09AC  
                                   l2622 174C                                     l2702 0943  
                                   l3190 0A5C                                     l2720 16EC  
                                   l2456 07CC                                     l2464 07EF  
                                   l3168 15AB                                     l2624 175B  
                                   l2640 091E                                     l2704 095C  
                                   l2458 07AC                                     l3098 0FFB  
                                   l2650 1606                                     l2634 08FF  
                                   l2802 02D0                                     l3346 0E5A  
                                   l2716 16D3                                     l2708 0965  
                                   l2820 0320                                     l2900 044A  
                                   l3188 0A49                                     l3380 0ED8  
                                   l3372 0EBE                                     l2590 0C0D  
                                   l2574 0BB6                                     l2638 0915  
                                   l2670 1794                                     l2822 0332  
                                   l2592 0BE5                                     l2832 0351  
                                   l2760 15D7                                     l3392 0EFC  
                                   l3384 0EE5                                     l3376 0ECB  
                                   l3368 0EB1                                     l2754 050D  
                                   l2842 0373                                     l2908 0869  
                                   l2596 0C18                                     l2588 0C01  
                                   l2756 05BB                                     l2748 0582  
                                   l2860 03CA                                     l2764 15DD  
                                   l3388 0EF2                                     l2918 087E  
                                   l2686 1676                                     l2854 03A5  
                                   l3398 0F08                                     l2936 17D3  
                                   l2696 0925                                     l2872 03F1  
                                   l2848 038C                                     l2792 02A8  
                                   l2866 03DD                                     l2858 03BA  
                                   l2892 0439                                     l2876 03F9  
                                   l2868 03E5                                     l2796 02BF  
                                   l2886 0410                                     l2958 0A08  
            __size_of_TransiverToReceive 005D                                     l2896 0442  
                                   l2888 041B                                     STR_1 082D  
                                   STR_2 0835                                     u2135 0621  
                                   u1345 071C                                     u1505 0BEB  
                                   u2145 0646                                     u2155 066B  
                                   u1365 07B7                                     u2165 0690  
                                   u1391 16A7                                     u1375 07ED  
                                   u2095 17DD                                     u1535 0975  
                                   u2335 0AF9                                     u2175 06B5  
                                   u1385 168D                                     u2185 06DA  
                                   u1555 098F                                     u1715 0495  
                                   u1565 09A0                                     u1725 04BB  
                                   u1735 04E1                                     u1745 052A  
                                   u1755 053F                                     u2707 0EA7  
                                   u2717 0A2C                                     u2807 07D6  
                                   u2727 0A66                                     u2817 1695  
                                   u1785 051B                                     u2737 0B2E  
                                   u2657 0E45                                     u2827 0C44  
                                   u2747 0C24                                     u2667 0E54  
                                   u2837 0C60                                     u2757 0CDB  
                                   u2677 0E65                                     u2847 0C7C  
                                   u2767 0D15                                     u2687 0E74  
                                   _RBIF 0058                                     u2777 0D57  
                                   u2697 0E98                                     u2787 0D65  
                                   u2797 0708                          __end_of_PICInit 0AD2  
                                   _WREN 0C62                           ??_eeprom_write 0021  
                                   _main 0E2D                                     btemp 007E  
                                   ltemp 007E                                     start 0012  
                                   ttemp 007E                                     wtemp 007E  
                          __CFG_IESO$OFF 0000                          __end_of_DelayDs 16A3  
       __size_of_LightWithSensController 003F                        ___bmul@multiplier 0023  
                        __end_of_ReadSPI 155E               SendMemoryData@finalAddress 0047  
                                  ?_main 0070                         ReadClock@month10 002F  
                                  _EEADR 010D                            __CFG_WDTE$OFF 0000  
                       ReadClock@minutes 0024                         ReadClock@seconds 0031  
                                  _CARRY 0018                                    _ANSEL 0188  
                  __end_of_OperationMode 1578                                    _T1CON 0010  
                        __end_of___llmod 09B5                           __CFG_DEBUG$OFF 0000  
                                  i1l470 0DAF                                    _TMR1H 000F  
                                  _TMR1L 000E                                    _PORTA 0005  
                                  _PORTB 0006                                    _PORTC 0007  
                                  _PORTD 0008                                    _PORTE 0009  
                                  _TRISA 0085                                    _TRISB 0086  
                                  _TRISC 0087                                    _TRISD 0088  
                                  _SSPIE 0463                                    _TRISE 0089  
                  read_write_flash_ram@i 002E                                    _Blink 17CD  
                                  _bDark 0068                           __CFG_FCMEN$OFF 0000  
                ??_ReceivedPacketHandler 004F                              _AnalogValue 16EE  
                         __CFG_BOREN$OFF 0000                                    pclath 000A  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
                        ??_TransiverInit 0035                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                                  status 0003                            _intBlinkCycle 005D  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                           WriteSPI@buffer 0021  
                   ReadMemoryAdress@var1 0023                     ReadMemoryAdress@var2 0022  
                   ReadMemoryAdress@var3 0025                         __end_of_ChannelP 0813  
                       __end_of_ChannelR 0820                         __end_of_ChannelS 082D  
                        __end_of_strncmp 0921                  __end_of_saveDataToFlash 0290  
                         __CFG_MCLRE$OFF 0000                            _intClockTimer 00C2  
                      _intNumberOfBlinks 006B                          __initialization 0015  
                           __end_of_main 0F16                         __end_of_ReadFIFO 07FF  
                          ReadFIFO@value 0024                         ??_SendMemoryData 003B  
                            _FindChannel 06FB                            ??_RegisterSet 0028  
                                 ??_main 0053                        ??_read_ram_status 0023  
                     __size_of_ClockInit 0091                                   ?_Blink 0026  
                              ??_PICInit 0020                         ___llmod@dividend 0024  
                                 _ADRESH 001E                                   _EEDATA 010C  
                                 _EECON1 018C                                   _EECON2 018D  
                                 _ANSELH 0189                         __end_of_WriteSPI 159F  
                                 i1l3320 08D0                                   i1l3322 08D6  
                                 i1l3414 0D83                                   i1l3440 0DD0  
                                 i1l3432 0DB2                                   i1l3450 0DF2  
                                 i1l3462 0E1C                                   i1l3438 0DCF  
                                 i1l3458 0E0B                                   u260_25 0DC9  
                              ??_DelayDs 0022                                   u237_25 08A6  
                                 u261_25 0DE1                                   u238_25 08BC  
                                 u262_25 0DFD                                   u263_25 0E16  
                                 u256_25 0DA1                                   Blink@i 0029  
                                 Blink@n 0026                         _write_ram_status 1771  
                       ??_ram_bulk_erase 0025                                   _TMR1IF 0060  
                                 _TMR1ON 0080             i1OperationMode@bracketStatus 0071  
          __size_of_IncreaseMemoryAdress 005C                       __size_of_ReadClock 0139  
                                 _SSPBUF 0013                                ??_ReadSPI 0023  
                         __CFG_PWRTE$OFF 0000                                   _Mode_0 1552  
                                 _Mode_1 160F                                   _Mode_2 1584  
                                 _Mode_4 159F                                   _Mode_5 15C1  
                     __size_of_SetRFMode 006F                     __size_of_eeprom_read 0024  
        TransiverReadFIFO@ReceivedString 00A0                                   ___bmul 15D3  
                              ??___llmod 0028                                   _tc_int 0D6B  
                   __end_of_eeprom_write 17CD                                   _strchr 15FA  
                                 _strlen 1745                                   _strstr 0921  
                                 saved_w 007E                        _ResetMemoryAdress 1643  
                    __end_of_RegisterSet 1643                            ?_RegisterRead 0070  
                     ?_ResetMemoryAdress 0070                       RegisterRead@adress 0026  
                              ??_strncmp 002B                       __size_of_WriteFIFO 000C  
                __end_of__initialization 0041                          eeprom_read@addr 0021  
                    ??_ResetMemoryAdress 0023                        __end_of_ClockInit 0CBB  
                _LightWithSensController 085C                            _bChannelFound 0067  
                    ___bmul@multiplicand 0020                         ?_saveDataToFlash 0070  
                          __end_of_Blink 1800                           __pcstackCOMMON 0070  
                      ?_ReadMemoryAdress 0022                             __pidataBANK0 083D  
                           _channelFound 005B                       ??_ReadMemoryAdress 0024  
                      __end_of_ReadClock 06FB                __end_of_ResetMemoryAdress 165D  
                         _OPTION_REGbits 0081                                  ??_Blink 0028  
                      __end_of_SetRFMode 0BAD                        eeprom_write@value 0020  
                         ??_RegisterRead 0023                               __pbssBANK0 0056  
                             __pbssBANK1 00C2                               __pbssBANK3 0190  
               __size_ofi1_OperationMode 0009                                ?_ReadFIFO 0070  
             timerFunction@intSetSeconds 0022                       AnalogValue@channel 0027  
           __end_of_read_write_flash_ram 0C2A                 __size_of_TransmittPacket 00B0  
                                ?_Mode_0 0070                                  ?_Mode_1 0070  
                                ?_Mode_2 0070                                  ?_Mode_4 0070  
                                ?_Mode_5 0070                               __pmaintext 0E2D  
                                ?___bmul 0020                               __pintentry 0004  
                                ?_tc_int 0070                                ?_WriteSPI 0070  
                      __end_of_WriteFIFO 1584                                  ?_strchr 0020  
                                ?_strlen 0020                              _RegisterSet 1629  
                                ?_strstr 002E                                  _PICInit 0A6E  
                          ?_TimerCounter 0070               __end_of_TransiverToReceive 0A6E  
                  __end_of_timerFunction 15C1                             ?_AnalogValue 0070  
                             __stringtab 0800                               ??_ReadFIFO 0023  
                    SendMemoryData@addr1 0046                      SendMemoryData@addr2 0045  
                    SendMemoryData@addr3 0044           __size_of_ReceivedPacketHandler 01DD  
          __end_of_ReceivedPacketHandler 046D                                  _DelayDs 167F  
              ??_LightWithSensController 002A                            ReadClock@date 0026  
                          ReadClock@min1 0033                            ReadClock@sec1 0032  
                          ReadClock@hour 0025                      SendMemoryData@value 0043  
                          ReadClock@year 0028                                  _ReadSPI 1556  
                 __size_of_DarknessCheck 0027                          __size_of_Mode_0 0004  
                        __size_of_Mode_1 001A                          __size_of_Mode_2 000D  
                        __size_of_Mode_4 0010                          __size_of_Mode_5 0012  
             OperationMode@bracketStatus 0021                          _read_ram_status 15E6  
                  __size_of_eeprom_write 0030                          __size_of___bmul 0013  
                  read_ram_status@status 0024                                  ___llmod 0967  
                           ?_FindChannel 0070                                _ANSELbits 0188  
               __end_of_write_ram_status 179D                               ??_WriteSPI 0020  
                        __size_of_tc_int 00C2                                  __ptext1 0045  
                                __ptext2 05C2                                  __ptext3 15D3  
                                __ptext4 09B5                                  __ptext5 0A11  
                                __ptext6 0AD2                                  __ptext7 0290  
                                __ptext8 1771                                  __ptext9 0921  
                        __size_of_strchr 0015                          __size_of_strlen 002C  
             __size_of_ResetMemoryAdress 001A                                _T1CONbits 0010  
                        __size_of_strstr 0046                           ??_TimerCounter 0070  
                   saveDataToFlash@addr1 0044                     saveDataToFlash@addr2 0045  
                   saveDataToFlash@addr3 0046  read_write_flash_ram@one_read_zero_write 002D  
                   saveDataToFlash@hours 003F                     saveDataToFlash@month 0041  
                   saveDataToFlash@value 0043                                  clrloop0 155F  
                                _strncmp 08DD                     end_of_initialization 0041  
                           _eeprom_write 179D                    __end_of_TransiverInit 1000  
                   TransmittPacket@value 0035                     TransmittPacket@topic 003A  
                 __size_of_OperationMode 0009                        ??i1_OperationMode 0070  
                       WriteSPI@databyte 0022                     __end_of_RegisterRead 085C  
                      ??_TransmittPacket 0036                            WriteFIFO@Data 0023  
           __end_of_IncreaseMemoryAdress 0A11                                  strlen@s 0026  
                        _intBlinkCounter 007C                     _read_write_flash_ram 0BAD  
                          _DarknessCheck 16C7                  __end_of_read_ram_status 15FA  
                  SendMemoryData@address 004B                            ??_eeprom_read 0020  
                        ReadClock@date10 002E                           __end_of_Mode_0 1556  
                         __end_of_Mode_1 1629                           __end_of_Mode_2 1591  
                         __end_of_Mode_4 15AF                           __end_of_Mode_5 15D3  
                              _ClockInit 0C2A                          ReadClock@hour10 002D  
                         __end_of___bmul 15E6                          ReadClock@month1 0035  
                        ReadClock@year10 0030                    ?_read_write_flash_ram 0025  
                         __end_of_tc_int 0E2D                           ?_DarknessCheck 0070  
                          _OperationMode 156F                           __end_of_strchr 160F  
                         __end_of_strlen 1771                           __end_of_strstr 0967  
                    start_initialization 0015                                _ReadClock 05C2  
              __size_of_ReadMemoryAdress 002C                  __size_of_SendMemoryData 0155  
                  _intDarkCheckIntervall 005F               DarknessCheck@darknessValue 0029  
                              _SetRFMode 0B3E                     __size_of_AnalogValue 002B  
                        ___llmod@divisor 0020                        __size_of_ReadFIFO 000E  
                        ___llmod@counter 0029                 __CFG_FOSC$INTRC_NOCLKOUT 0000  
                               ??_Mode_0 002A                                 ??_Mode_1 002A  
                               ??_Mode_2 002A                                 ??_Mode_4 003B  
                               ??_Mode_5 003B                     __end_of_TimerCounter 08DD  
                               ??___bmul 0021                               ?_ClockInit 0070  
                    __end_of_eeprom_read 16C7                            TimerCounter@i 0073  
                __size_of_ram_bulk_erase 0022                              __pdataBANK0 006B  
                               ??_tc_int 0075                 __size_of_saveDataToFlash 024B  
                           ?_RegisterSet 0027                                 ??_strchr 0022  
                               ??_strlen 0022                                 ??_strstr 002F  
                         ?_OperationMode 0070                     __size_of_FindChannel 00F6  
            read_write_flash_ram@mem_ptr 002A                        RegisterRead@value 0025  
                      __size_of_WriteSPI 000E                              __pbssCOMMON 007C  
                              ___latbits 0002                                _WriteFIFO 1578  
                          __pcstackBANK0 0020                            __pcstackBANK1 00A0  
                               ?_PICInit 0070                               ?_ReadClock 0024  
                           _ReceivedData 0190                   SetRFMode@mcparam0_read 002D  
                             ?_SetRFMode 0070                         eeprom_write@addr 0022  
                               ?_DelayDs 0020                        RegisterSet@adress 002A  
                   _IncreaseMemoryAdress 09B5                         ?_read_ram_status 0070  
                 write_ram_status@status 0025                                 ?_ReadSPI 0070  
                  __size_of_RegisterRead 001C                       _TransiverToReceive 0A11  
                               ?___llmod 0020                      ?_TransiverToReceive 0070  
                 ??_read_write_flash_ram 002B                          ??_DarknessCheck 0028  
                              __pstrings 0800                        ?_write_ram_status 0070  
            timerFunction@intTimerNumber 0020                       ??_write_ram_status 0025  
                         __size_of_Blink 0033                               ?_WriteFIFO 0070  
                        i1_OperationMode 1566                     ??_TransiverToReceive 0035  
                           _RegisterRead 0840                                 ?_strncmp 0028  
                  ?_IncreaseMemoryAdress 0070                      saveDataToFlash@date 0040  
                        _TransmittPacket 0CBB                        interrupt_function 0004  
                    saveDataToFlash@year 0042                                 _IOCBbits 0096  
                               DelayDs@i 0024                             FindChannel@i 0033  
                  _ReceivedPacketHandler 0290                                clear_ram0 155E  
                            _eeprom_read 16A3                                 _PIE1bits 008C  
                               _PIR1bits 000C                              ??_ClockInit 0023  
                           ClockInit@cnt 0024                   __size_of_timerFunction 0012  
                 saveDataToFlash@minutes 003E                   saveDataToFlash@seconds 003D  
                        ??_OperationMode 0020                            SetRFMode@mode 002C  
                             _ADCON0bits 001F                              __stringbase 0805  
                             _ADCON1bits 009F                                 _WPUBbits 0095  
                               _ChannelP 0806                                 _ChannelR 0813  
                               _ChannelS 0820                              ??_ReadClock 0029  
                         ReadClock@date1 0037                           _SendMemoryData 046D  
                       _ReadMemoryAdress 1719                           ReadClock@min10 002C  
                         ReadClock@sec10 002B                        ??_saveDataToFlash 0038  
                         ReadClock@hour1 0034                         __size_of_PICInit 0064  
               ?_LightWithSensController 0070                           ReadClock@month 0027  
                         ReadClock@year1 0036                              ??_SetRFMode 002B  
                               _ReadFIFO 07F1                    __size_of_TimerCounter 0042  
                       __size_of_DelayDs 0024         read_write_flash_ram@flash_sector 0027  
                       __size_of_ReadSPI 0008                           _bTimerComplete 0056  
                         _ram_bulk_erase 165D                         _intMinuteCounter 0063  
             read_write_flash_ram@offset 0029                         __size_of___llmod 004E  
                      _TransiverReadFIFO 0AD2                                 _WriteSPI 1591  
                     __end_of__stringtab 0806                         _intSecondCounter 0065  
                     ?_TransiverReadFIFO 0070                               _ANSELHbits 0189  
                __end_ofi1_OperationMode 156F                   __end_of_SendMemoryData 05C2  
                 __size_of_TransiverInit 00EA                     __size_of_RegisterSet 001A  
                       RegisterSet@value 0027                              ??_WriteFIFO 0023  
                __end_of_TransmittPacket 0D6B                             _TimerCounter 089B  
                               __ptext10 08DD                                 __ptext11 1745  
                               __ptext20 179D                                 __ptext12 15FA  
                               __ptext21 156F                                 __ptext13 165D  
                               __ptext30 06FB                                 __ptext22 07F1  
                               __ptext14 046D                                 __ptext31 0B3E  
                               __ptext23 0F16                                 __ptext15 0BAD  
                               __ptext40 16A3                                 __ptext32 1629  
                               __ptext24 17CD                                 __ptext16 15E6  
                               __ptext41 16EE                                 __ptext33 0840  
                               __ptext25 0A6E                                 __ptext17 0967  
                               __ptext42 167F                                 __ptext34 1584  
                               __ptext26 15C1                                 __ptext18 1719  
                               __ptext43 0C2A                                 __ptext35 160F  
                               __ptext27 159F                                 __ptext19 1643  
                               __ptext44 1556                                 __ptext36 1552  
                               __ptext28 0CBB                                 __ptext45 1591  
                               __ptext37 085C                                 __ptext29 1578  
                               __ptext46 0D6B                                 __ptext38 15AF  
                               __ptext47 1566                                 __ptext39 16C7  
                               __ptext48 089B                      ??_TransiverReadFIFO 0051  
                          _timerFunction 15AF                   ??_IncreaseMemoryAdress 0023  
                       __size_of_strncmp 0044                   ?_ReceivedPacketHandler 0070  
                          __size_of_main 00E9                               strncmp@len 0029  
                 __end_of_ram_bulk_erase 167F                            _bValueFromPot 006D  
              __end_of_TransiverReadFIFO 0B3E                               DelayDs@cnt 0020  
                         FindChannel@cnt 0031          __end_of_LightWithSensController 089B  
                       _bSaveDataToFlash 0069                     _intHalfSecondCounter 0061  
                        ?_SendMemoryData 0070                               _INTCONbits 000B  
         read_write_flash_ram@flash_page 0028                       TransiverReadFIFO@i 00BE  
                     TransiverReadFIFO@j 00C0                           ?_timerFunction 0020  
                          ??_AnalogValue 0026                                 intlevel1 0000  
                              strchr@chr 0020                                strchr@ptr 0022  
                          _TransiverInit 0F16   read_write_flash_ram@bytes_to_readwrite 0025  
                              strncmp@s1 002D                                strncmp@s2 0028  
                              stringcode 0800                               _OSCCONbits 008F  
                        ?_ram_bulk_erase 0070                            ??_FindChannel 002E  
                       ?i1_OperationMode 0070                                 strlen@cp 0027  
                               stringdir 0800                                 stringtab 0800  
                       ?_TransmittPacket 0035                                 strstr@s1 0032  
                               strstr@s2 002E                ReceivedPacketHandler@Data 0050  
              __size_of_write_ram_status 002C                            ?_eeprom_write 0020  
               IncreaseMemoryAdress@var1 0024                 IncreaseMemoryAdress@var2 0025  
               IncreaseMemoryAdress@var3 0026                           ?_TransiverInit 0070  
                           ?_eeprom_read 0070                      __end_of_AnalogValue 1719  
                             _SSPCONbits 0014                 __end_of_ReadMemoryAdress 1745  
