

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Mar 23 20:16:53 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	intentry,global,class=CODE,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	dabs	1,0x7E,2
    68  0000                     
    69                           ; Version 1.40
    70                           ; Generated 01/12/2016 GMT
    71                           ; 
    72                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC16F887 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     	;# 
   104  0001                     	;# 
   105  0002                     	;# 
   106  0003                     	;# 
   107  0004                     	;# 
   108  0005                     	;# 
   109  0006                     	;# 
   110  0007                     	;# 
   111  0008                     	;# 
   112  0009                     	;# 
   113  000A                     	;# 
   114  000B                     	;# 
   115  000C                     	;# 
   116  000D                     	;# 
   117  000E                     	;# 
   118  000E                     	;# 
   119  000F                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0014                     	;# 
   125  0015                     	;# 
   126  0015                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001B                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  0081                     	;# 
   139  0085                     	;# 
   140  0086                     	;# 
   141  0087                     	;# 
   142  0088                     	;# 
   143  0089                     	;# 
   144  008C                     	;# 
   145  008D                     	;# 
   146  008E                     	;# 
   147  008F                     	;# 
   148  0090                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0093                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0095                     	;# 
   156  0096                     	;# 
   157  0097                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009A                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  0105                     	;# 
   167  0107                     	;# 
   168  0108                     	;# 
   169  0109                     	;# 
   170  010C                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  0185                     	;# 
   176  0187                     	;# 
   177  0188                     	;# 
   178  0189                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000D                     	;# 
   195  000E                     	;# 
   196  000E                     	;# 
   197  000F                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0013                     	;# 
   202  0014                     	;# 
   203  0015                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0017                     	;# 
   207  0018                     	;# 
   208  0019                     	;# 
   209  001A                     	;# 
   210  001B                     	;# 
   211  001B                     	;# 
   212  001C                     	;# 
   213  001D                     	;# 
   214  001E                     	;# 
   215  001F                     	;# 
   216  0081                     	;# 
   217  0085                     	;# 
   218  0086                     	;# 
   219  0087                     	;# 
   220  0088                     	;# 
   221  0089                     	;# 
   222  008C                     	;# 
   223  008D                     	;# 
   224  008E                     	;# 
   225  008F                     	;# 
   226  0090                     	;# 
   227  0091                     	;# 
   228  0092                     	;# 
   229  0093                     	;# 
   230  0093                     	;# 
   231  0093                     	;# 
   232  0094                     	;# 
   233  0095                     	;# 
   234  0096                     	;# 
   235  0097                     	;# 
   236  0098                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009C                     	;# 
   241  009D                     	;# 
   242  009E                     	;# 
   243  009F                     	;# 
   244  0105                     	;# 
   245  0107                     	;# 
   246  0108                     	;# 
   247  0109                     	;# 
   248  010C                     	;# 
   249  010C                     	;# 
   250  010D                     	;# 
   251  010E                     	;# 
   252  010F                     	;# 
   253  0185                     	;# 
   254  0187                     	;# 
   255  0188                     	;# 
   256  0189                     	;# 
   257  018C                     	;# 
   258  018D                     	;# 
   259  0000                     	;# 
   260  0001                     	;# 
   261  0002                     	;# 
   262  0003                     	;# 
   263  0004                     	;# 
   264  0005                     	;# 
   265  0006                     	;# 
   266  0007                     	;# 
   267  0008                     	;# 
   268  0009                     	;# 
   269  000A                     	;# 
   270  000B                     	;# 
   271  000C                     	;# 
   272  000D                     	;# 
   273  000E                     	;# 
   274  000E                     	;# 
   275  000F                     	;# 
   276  0010                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0014                     	;# 
   281  0015                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0017                     	;# 
   285  0018                     	;# 
   286  0019                     	;# 
   287  001A                     	;# 
   288  001B                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  001D                     	;# 
   292  001E                     	;# 
   293  001F                     	;# 
   294  0081                     	;# 
   295  0085                     	;# 
   296  0086                     	;# 
   297  0087                     	;# 
   298  0088                     	;# 
   299  0089                     	;# 
   300  008C                     	;# 
   301  008D                     	;# 
   302  008E                     	;# 
   303  008F                     	;# 
   304  0090                     	;# 
   305  0091                     	;# 
   306  0092                     	;# 
   307  0093                     	;# 
   308  0093                     	;# 
   309  0093                     	;# 
   310  0094                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0098                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  009F                     	;# 
   322  0105                     	;# 
   323  0107                     	;# 
   324  0108                     	;# 
   325  0109                     	;# 
   326  010C                     	;# 
   327  010C                     	;# 
   328  010D                     	;# 
   329  010E                     	;# 
   330  010F                     	;# 
   331  0185                     	;# 
   332  0187                     	;# 
   333  0188                     	;# 
   334  0189                     	;# 
   335  018C                     	;# 
   336  018D                     	;# 
   337  0000                     	;# 
   338  0001                     	;# 
   339  0002                     	;# 
   340  0003                     	;# 
   341  0004                     	;# 
   342  0005                     	;# 
   343  0006                     	;# 
   344  0007                     	;# 
   345  0008                     	;# 
   346  0009                     	;# 
   347  000A                     	;# 
   348  000B                     	;# 
   349  000C                     	;# 
   350  000D                     	;# 
   351  000E                     	;# 
   352  000E                     	;# 
   353  000F                     	;# 
   354  0010                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0014                     	;# 
   359  0015                     	;# 
   360  0015                     	;# 
   361  0016                     	;# 
   362  0017                     	;# 
   363  0018                     	;# 
   364  0019                     	;# 
   365  001A                     	;# 
   366  001B                     	;# 
   367  001B                     	;# 
   368  001C                     	;# 
   369  001D                     	;# 
   370  001E                     	;# 
   371  001F                     	;# 
   372  0081                     	;# 
   373  0085                     	;# 
   374  0086                     	;# 
   375  0087                     	;# 
   376  0088                     	;# 
   377  0089                     	;# 
   378  008C                     	;# 
   379  008D                     	;# 
   380  008E                     	;# 
   381  008F                     	;# 
   382  0090                     	;# 
   383  0091                     	;# 
   384  0092                     	;# 
   385  0093                     	;# 
   386  0093                     	;# 
   387  0093                     	;# 
   388  0094                     	;# 
   389  0095                     	;# 
   390  0096                     	;# 
   391  0097                     	;# 
   392  0098                     	;# 
   393  0099                     	;# 
   394  009A                     	;# 
   395  009B                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009E                     	;# 
   399  009F                     	;# 
   400  0105                     	;# 
   401  0107                     	;# 
   402  0108                     	;# 
   403  0109                     	;# 
   404  010C                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  010F                     	;# 
   409  0185                     	;# 
   410  0187                     	;# 
   411  0188                     	;# 
   412  0189                     	;# 
   413  018C                     	;# 
   414  018D                     	;# 
   415                           
   416                           	psect	idataBANK0
   417  14C2                     __pidataBANK0:	
   418                           
   419                           ;initializer for _intNumberOfBlinks
   420  14C2  3458               	retlw	88
   421  14C3  3402               	retlw	2
   422                           
   423                           ;initializer for _bValueFromPot
   424  14C4  3401               	retlw	1
   425                           
   426                           	psect	strings
   427  1000                     __pstrings:	
   428  1000                     stringtab:	
   429  1000                     __stringtab:	
   430  1000                     stringcode:	
   431                           ;	String table - string pointers are 1 byte each
   432                           
   433  1000                     stringdir:	
   434  1000  3010               	movlw	high stringdir
   435  1001  008A               	movwf	10
   436  1002  0804               	movf	4,w
   437  1003  0A84               	incf	4,f
   438  1004  0782               	addwf	2,f
   439  1005                     __stringbase:	
   440  1005  3400               	retlw	0
   441  1006                     __end_of__stringtab:	
   442  1006                     _ChannelP:	
   443  1006  343F               	retlw	63
   444  1007  3447               	retlw	71
   445  1008  344F               	retlw	79
   446  1009  3457               	retlw	87
   447  100A  345F               	retlw	95
   448  100B  3477               	retlw	119
   449  100C  347E               	retlw	126
   450  100D  347F               	retlw	127
   451  100E  3486               	retlw	134
   452  100F  3487               	retlw	135
   453  1010  3437               	retlw	55
   454  1011  3467               	retlw	103
   455  1012  346F               	retlw	111
   456  1013                     __end_of_ChannelP:	
   457  1013                     _ChannelR:	
   458  1013  344F               	retlw	79
   459  1014  3459               	retlw	89
   460  1015  3463               	retlw	99
   461  1016  346D               	retlw	109
   462  1017  3477               	retlw	119
   463  1018  3495               	retlw	149
   464  1019  349F               	retlw	159
   465  101A  349F               	retlw	159
   466  101B  34A9               	retlw	169
   467  101C  34A9               	retlw	169
   468  101D  3445               	retlw	69
   469  101E  3481               	retlw	129
   470  101F  348B               	retlw	139
   471  1020                     __end_of_ChannelR:	
   472  1020                     _ChannelS:	
   473  1020  3418               	retlw	24
   474  1021  341B               	retlw	27
   475  1022  341E               	retlw	30
   476  1023  3421               	retlw	33
   477  1024  3424               	retlw	36
   478  1025  342D               	retlw	45
   479  1026  347B               	retlw	123
   480  1027  3430               	retlw	48
   481  1028  347E               	retlw	126
   482  1029  3433               	retlw	51
   483  102A  3415               	retlw	21
   484  102B  3427               	retlw	39
   485  102C  342A               	retlw	42
   486  102D                     __end_of_ChannelS:	
   487  001F                     _ADCON0bits	set	31
   488  001E                     _ADRESH	set	30
   489  000B                     _INTCONbits	set	11
   490  000C                     _PIR1bits	set	12
   491  0005                     _PORTA	set	5
   492  0006                     _PORTB	set	6
   493  0007                     _PORTC	set	7
   494  0008                     _PORTD	set	8
   495  0009                     _PORTE	set	9
   496  0013                     _SSPBUF	set	19
   497  0014                     _SSPCONbits	set	20
   498  0010                     _T1CON	set	16
   499  0010                     _T1CONbits	set	16
   500  000F                     _TMR1H	set	15
   501  000E                     _TMR1L	set	14
   502  0018                     _CARRY	set	24
   503  005F                     _GIE	set	95
   504  0029                     _RA1	set	41
   505  002C                     _RA4	set	44
   506  002D                     _RA5	set	45
   507  0030                     _RB0	set	48
   508  0031                     _RB1	set	49
   509  0033                     _RB3	set	51
   510  0034                     _RB4	set	52
   511  0035                     _RB5	set	53
   512  0058                     _RBIF	set	88
   513  0038                     _RC0	set	56
   514  0039                     _RC1	set	57
   515  003A                     _RC2	set	58
   516  0043                     _RD3	set	67
   517  0044                     _RD4	set	68
   518  0060                     _TMR1IF	set	96
   519  0080                     _TMR1ON	set	128
   520  009F                     _ADCON1bits	set	159
   521  0096                     _IOCBbits	set	150
   522  0081                     _OPTION_REGbits	set	129
   523  008F                     _OSCCONbits	set	143
   524  008C                     _PIE1bits	set	140
   525  0094                     _SSPSTATbits	set	148
   526  0085                     _TRISA	set	133
   527  0086                     _TRISB	set	134
   528  0087                     _TRISC	set	135
   529  0088                     _TRISD	set	136
   530  0089                     _TRISE	set	137
   531  0095                     _WPUBbits	set	149
   532  0463                     _SSPIE	set	1123
   533  010D                     _EEADR	set	269
   534  010C                     _EEDATA	set	268
   535  0188                     _ANSEL	set	392
   536  0189                     _ANSELH	set	393
   537  0189                     _ANSELHbits	set	393
   538  0188                     _ANSELbits	set	392
   539  018C                     _EECON1	set	396
   540  018D                     _EECON2	set	397
   541  0C60                     _RD	set	3168
   542  0C61                     _WR	set	3169
   543  0C62                     _WREN	set	3170
   544  102D                     STR_1:	
   545  102D  344E               	retlw	78	;'N'
   546  102E  3431               	retlw	49	;'1'
   547  102F  3442               	retlw	66	;'B'
   548  1030  344C               	retlw	76	;'L'
   549  1031  3449               	retlw	73	;'I'
   550  1032  344E               	retlw	78	;'N'
   551  1033  344B               	retlw	75	;'K'
   552  1034  3400               	retlw	0
   553  1035                     STR_2:	
   554  1035  344E               	retlw	78	;'N'
   555  1036  3432               	retlw	50	;'2'
   556  1037  3442               	retlw	66	;'B'
   557  1038  344C               	retlw	76	;'L'
   558  1039  3449               	retlw	73	;'I'
   559  103A  344E               	retlw	78	;'N'
   560  103B  344B               	retlw	75	;'K'
   561  103C  3400               	retlw	0
   562                           
   563                           ; #config settings
   564  0000                     
   565                           	psect	cinit
   566  0015                     start_initialization:	
   567  0015                     __initialization:	
   568                           
   569                           ; Initialize objects allocated to BANK0
   570  0015  160A  118A  24C2  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   571  001A  00EB               	movwf	__pdataBANK0& (0+127)
   572  001B  160A  118A  24C3  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   573  0020  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   574  0021  160A  118A  24C4  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   575  0026  00ED               	movwf	(__pdataBANK0+2)& (0+127)
   576                           
   577                           ; Clear objects allocated to BANK3
   578  0027  1783               	bsf	3,7	;select IRP bank2
   579  0028  3090               	movlw	low __pbssBANK3
   580  0029  0084               	movwf	4
   581  002A  30B8               	movlw	low (__pbssBANK3+40)
   582  002B  160A  118A  24D1  120A  118A  	fcall	clear_ram0
   583                           
   584                           ; Clear objects allocated to BANK1
   585  0030  1383               	bcf	3,7	;select IRP bank0
   586  0031  30C2               	movlw	low __pbssBANK1
   587  0032  0084               	movwf	4
   588  0033  30CC               	movlw	low (__pbssBANK1+10)
   589  0034  160A  118A  24D1  120A  118A  	fcall	clear_ram0
   590                           
   591                           ; Clear objects allocated to BANK0
   592  0039  3056               	movlw	low __pbssBANK0
   593  003A  0084               	movwf	4
   594  003B  306B               	movlw	low (__pbssBANK0+21)
   595  003C  160A  118A  24D1   	fcall	clear_ram0
   596                           
   597                           ; Clear objects allocated to COMMON
   598  003F  01FC               	clrf	__pbssCOMMON& (0+127)
   599  0040  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   600  0041                     end_of_initialization:	
   601                           ;End of C runtime variable initialization code
   602                           
   603  0041                     __end_of__initialization:	
   604  0041  0183               	clrf	3
   605  0042  120A  118A  2EF6   	ljmp	_main	;jump to C main() function
   606                           
   607                           	psect	bssCOMMON
   608  007C                     __pbssCOMMON:	
   609  007C                     _intBlinkCounter:	
   610  007C                     	ds	2
   611                           
   612                           	psect	bssBANK0
   613  0056                     __pbssBANK0:	
   614  0056                     _bTimerComplete:	
   615  0056                     	ds	5
   616  005B                     _channelFound:	
   617  005B                     	ds	2
   618  005D                     _intBlinkCycle:	
   619  005D                     	ds	2
   620  005F                     _intDarkCheckIntervall:	
   621  005F                     	ds	2
   622  0061                     _intHalfSecondCounter:	
   623  0061                     	ds	2
   624  0063                     _intMinuteCounter:	
   625  0063                     	ds	2
   626  0065                     _intSecondCounter:	
   627  0065                     	ds	2
   628  0067                     _bChannelFound:	
   629  0067                     	ds	1
   630  0068                     _bDark:	
   631  0068                     	ds	1
   632  0069                     _bSaveDataToFlash:	
   633  0069                     	ds	1
   634  006A                     _bTransiverModeReceive:	
   635  006A                     	ds	1
   636                           
   637                           	psect	dataBANK0
   638  006B                     __pdataBANK0:	
   639  006B                     _intNumberOfBlinks:	
   640  006B                     	ds	2
   641  006D                     _bValueFromPot:	
   642  006D                     	ds	1
   643                           
   644                           	psect	bssBANK1
   645  00C2                     __pbssBANK1:	
   646  00C2                     _intClockTimer:	
   647  00C2                     	ds	10
   648                           
   649                           	psect	bssBANK3
   650  0190                     __pbssBANK3:	
   651  0190                     _ReceivedData:	
   652  0190                     	ds	40
   653                           
   654                           	psect	clrtext
   655  14D1                     clear_ram0:	
   656                           ;	Called with FSR containing the base address, and
   657                           ;	W with the last address+1
   658                           
   659  14D1  0064               	clrwdt	;clear the watchdog before getting into this loop
   660  14D2                     clrloop0:	
   661  14D2  0180               	clrf	0	;clear RAM location pointed to by FSR
   662  14D3  0A84               	incf	4,f	;increment pointer
   663  14D4  0604               	xorwf	4,w	;XOR with final address
   664  14D5  1903               	btfsc	3,2	;have we reached the end yet?
   665  14D6  3400               	retlw	0	;all done for this memory range, return
   666  14D7  0604               	xorwf	4,w	;XOR again to restore value
   667  14D8  2CD2               	goto	clrloop0	;do the next byte
   668                           
   669                           	psect	cstackBANK1
   670  00A0                     __pcstackBANK1:	
   671  00A0                     TransiverReadFIFO@ReceivedString:	
   672                           
   673                           ; 30 bytes @ 0x0
   674  00A0                     	ds	30
   675  00BE                     TransiverReadFIFO@i:	
   676                           
   677                           ; 2 bytes @ 0x1E
   678  00BE                     	ds	2
   679  00C0                     TransiverReadFIFO@j:	
   680                           
   681                           ; 2 bytes @ 0x20
   682  00C0                     	ds	2
   683                           
   684                           	psect	cstackCOMMON
   685  0070                     __pcstackCOMMON:	
   686  0070                     ?_PICInit:	
   687  0070                     ?_TransiverInit:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     ?_ClockInit:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     ?_write_ram_status:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     ?_read_ram_status:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     ?_ResetMemoryAdress:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0070                     ?_ram_bulk_erase:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0070                     ?_OperationMode:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0070                     ?_Mode_0:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0070                     ?_Mode_1:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0070                     ?_Mode_2:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0070                     ?_Mode_4:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0070                     ?_Mode_5:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0070                     ?_TransiverToReceive:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ?_TransiverReadFIFO:	
   727                           ; 1 bytes @ 0x0
   728                           
   729  0070                     ?_saveDataToFlash:	
   730                           ; 1 bytes @ 0x0
   731                           
   732  0070                     ?_SetRFMode:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0070                     ?_RegisterRead:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0070                     ?_FindChannel:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0070                     ?_ReadFIFO:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0070                     ?_ReceivedPacketHandler:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0070                     ?_AnalogValue:	
   748                           ; 1 bytes @ 0x0
   749                           
   750  0070                     ?_eeprom_read:	
   751                           ; 1 bytes @ 0x0
   752                           
   753  0070                     ?_DarknessCheck:	
   754                           ; 1 bytes @ 0x0
   755                           
   756  0070                     ?_SendMemoryData:	
   757                           ; 1 bytes @ 0x0
   758                           
   759  0070                     ?_WriteFIFO:	
   760                           ; 1 bytes @ 0x0
   761                           
   762  0070                     ?_LightWithSensController:	
   763                           ; 1 bytes @ 0x0
   764                           
   765  0070                     ?_TimerCounter:	
   766                           ; 1 bytes @ 0x0
   767                           
   768  0070                     ??_TimerCounter:	
   769                           ; 1 bytes @ 0x0
   770                           
   771  0070                     ?_WriteSPI:	
   772                           ; 1 bytes @ 0x0
   773                           
   774  0070                     ?_ReadSPI:	
   775                           ; 1 bytes @ 0x0
   776                           
   777  0070                     ?_tc_int:	
   778                           ; 1 bytes @ 0x0
   779                           
   780  0070                     ?_IncreaseMemoryAdress:	
   781                           ; 1 bytes @ 0x0
   782                           
   783  0070                     ?i1_OperationMode:	
   784                           ; 1 bytes @ 0x0
   785                           
   786  0070                     ??i1_OperationMode:	
   787                           ; 1 bytes @ 0x0
   788                           
   789  0070                     ?_main:	
   790                           ; 1 bytes @ 0x0
   791                           
   792                           
   793                           ; 2 bytes @ 0x0
   794  0070                     	ds	1
   795  0071                     i1OperationMode@bracketStatus:	
   796                           
   797                           ; 1 bytes @ 0x1
   798  0071                     	ds	2
   799  0073                     TimerCounter@i:	
   800                           
   801                           ; 2 bytes @ 0x3
   802  0073                     	ds	2
   803  0075                     ??_tc_int:	
   804                           
   805                           ; 1 bytes @ 0x5
   806  0075                     	ds	7
   807                           
   808                           	psect	cstackBANK0
   809  0020                     __pcstackBANK0:	
   810  0020                     ??_PICInit:	
   811  0020                     ??_OperationMode:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0020                     ?_timerFunction:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0020                     ?_DelayDs:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0020                     ?_eeprom_write:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0020                     ??_eeprom_read:	
   824                           ; 1 bytes @ 0x0
   825                           
   826  0020                     ?_strchr:	
   827                           ; 1 bytes @ 0x0
   828                           
   829  0020                     ??_WriteSPI:	
   830                           ; 1 bytes @ 0x0
   831                           
   832  0020                     ?___bmul:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0020                     ?_strlen:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0020                     ?___llmod:	
   839                           ; 2 bytes @ 0x0
   840                           
   841  0020                     eeprom_write@value:	
   842                           ; 4 bytes @ 0x0
   843                           
   844  0020                     ___bmul@multiplicand:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0020                     timerFunction@intTimerNumber:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0020                     DelayDs@cnt:	
   851                           ; 2 bytes @ 0x0
   852                           
   853  0020                     strchr@chr:	
   854                           ; 2 bytes @ 0x0
   855                           
   856  0020                     ___llmod@divisor:	
   857                           ; 2 bytes @ 0x0
   858                           
   859                           
   860                           ; 4 bytes @ 0x0
   861  0020                     	ds	1
   862  0021                     ??_eeprom_write:	
   863  0021                     ??___bmul:	
   864                           ; 1 bytes @ 0x1
   865                           
   866  0021                     WriteSPI@buffer:	
   867                           ; 1 bytes @ 0x1
   868                           
   869  0021                     OperationMode@bracketStatus:	
   870                           ; 1 bytes @ 0x1
   871                           
   872  0021                     eeprom_read@addr:	
   873                           ; 1 bytes @ 0x1
   874                           
   875                           
   876                           ; 1 bytes @ 0x1
   877  0021                     	ds	1
   878  0022                     ??_DelayDs:	
   879  0022                     ??_strlen:	
   880                           ; 1 bytes @ 0x2
   881                           
   882  0022                     ??_strchr:	
   883                           ; 1 bytes @ 0x2
   884                           
   885  0022                     ?_ReadMemoryAdress:	
   886                           ; 1 bytes @ 0x2
   887                           
   888  0022                     WriteSPI@databyte:	
   889                           ; 1 bytes @ 0x2
   890                           
   891  0022                     ReadMemoryAdress@var2:	
   892                           ; 1 bytes @ 0x2
   893                           
   894  0022                     eeprom_write@addr:	
   895                           ; 1 bytes @ 0x2
   896                           
   897  0022                     ___bmul@product:	
   898                           ; 1 bytes @ 0x2
   899                           
   900  0022                     strchr@ptr:	
   901                           ; 1 bytes @ 0x2
   902                           
   903  0022                     timerFunction@intSetSeconds:	
   904                           ; 1 bytes @ 0x2
   905                           
   906                           
   907                           ; 2 bytes @ 0x2
   908  0022                     	ds	1
   909  0023                     ??_ClockInit:	
   910  0023                     ??_read_ram_status:	
   911                           ; 1 bytes @ 0x3
   912                           
   913  0023                     ??_ResetMemoryAdress:	
   914                           ; 1 bytes @ 0x3
   915                           
   916  0023                     ??_RegisterRead:	
   917                           ; 1 bytes @ 0x3
   918                           
   919  0023                     ??_ReadFIFO:	
   920                           ; 1 bytes @ 0x3
   921                           
   922  0023                     ??_WriteFIFO:	
   923                           ; 1 bytes @ 0x3
   924                           
   925  0023                     ??_ReadSPI:	
   926                           ; 1 bytes @ 0x3
   927                           
   928  0023                     ?_WriteMemoryAdress:	
   929                           ; 1 bytes @ 0x3
   930                           
   931  0023                     WriteFIFO@Data:	
   932                           ; 1 bytes @ 0x3
   933                           
   934  0023                     ReadMemoryAdress@var1:	
   935                           ; 1 bytes @ 0x3
   936                           
   937  0023                     WriteMemoryAdress@var2:	
   938                           ; 1 bytes @ 0x3
   939                           
   940  0023                     ___bmul@multiplier:	
   941                           ; 1 bytes @ 0x3
   942                           
   943                           
   944                           ; 1 bytes @ 0x3
   945  0023                     	ds	1
   946  0024                     ??_timerFunction:	
   947  0024                     ?_ReadClock:	
   948                           ; 1 bytes @ 0x4
   949                           
   950  0024                     ??_ReadMemoryAdress:	
   951                           ; 1 bytes @ 0x4
   952                           
   953  0024                     ReadFIFO@value:	
   954                           ; 1 bytes @ 0x4
   955                           
   956  0024                     WriteMemoryAdress@var1:	
   957                           ; 1 bytes @ 0x4
   958                           
   959  0024                     read_ram_status@status:	
   960                           ; 1 bytes @ 0x4
   961                           
   962  0024                     ClockInit@cnt:	
   963                           ; 1 bytes @ 0x4
   964                           
   965  0024                     ReadClock@minutes:	
   966                           ; 1 bytes @ 0x4
   967                           
   968  0024                     DelayDs@i:	
   969                           ; 1 bytes @ 0x4
   970                           
   971  0024                     ___llmod@dividend:	
   972                           ; 2 bytes @ 0x4
   973                           
   974                           
   975                           ; 4 bytes @ 0x4
   976  0024                     	ds	1
   977  0025                     ??_write_ram_status:	
   978  0025                     ??_ram_bulk_erase:	
   979                           ; 1 bytes @ 0x5
   980                           
   981  0025                     ?_read_write_flash_ram:	
   982                           ; 1 bytes @ 0x5
   983                           
   984  0025                     ??_WriteMemoryAdress:	
   985                           ; 1 bytes @ 0x5
   986                           
   987  0025                     RegisterRead@value:	
   988                           ; 1 bytes @ 0x5
   989                           
   990  0025                     ReadMemoryAdress@var3:	
   991                           ; 1 bytes @ 0x5
   992                           
   993  0025                     write_ram_status@status:	
   994                           ; 1 bytes @ 0x5
   995                           
   996  0025                     ReadClock@hour:	
   997                           ; 1 bytes @ 0x5
   998                           
   999  0025                     read_write_flash_ram@bytes_to_readwrite:	
  1000                           ; 1 bytes @ 0x5
  1001                           
  1002                           
  1003                           ; 2 bytes @ 0x5
  1004  0025                     	ds	1
  1005  0026                     ??_AnalogValue:	
  1006  0026                     ?_Blink:	
  1007                           ; 1 bytes @ 0x6
  1008                           
  1009  0026                     RegisterRead@adress:	
  1010                           ; 1 bytes @ 0x6
  1011                           
  1012  0026                     WriteMemoryAdress@var3:	
  1013                           ; 1 bytes @ 0x6
  1014                           
  1015  0026                     ReadClock@date:	
  1016                           ; 1 bytes @ 0x6
  1017                           
  1018  0026                     strlen@s:	
  1019                           ; 1 bytes @ 0x6
  1020                           
  1021  0026                     Blink@n:	
  1022                           ; 1 bytes @ 0x6
  1023                           
  1024                           
  1025                           ; 2 bytes @ 0x6
  1026  0026                     	ds	1
  1027  0027                     ?_RegisterSet:	
  1028  0027                     ??_IncreaseMemoryAdress:	
  1029                           ; 1 bytes @ 0x7
  1030                           
  1031  0027                     RegisterSet@value:	
  1032                           ; 1 bytes @ 0x7
  1033                           
  1034  0027                     AnalogValue@channel:	
  1035                           ; 1 bytes @ 0x7
  1036                           
  1037  0027                     read_write_flash_ram@flash_sector:	
  1038                           ; 1 bytes @ 0x7
  1039                           
  1040  0027                     ReadClock@month:	
  1041                           ; 1 bytes @ 0x7
  1042                           
  1043  0027                     strlen@cp:	
  1044                           ; 1 bytes @ 0x7
  1045                           
  1046                           
  1047                           ; 1 bytes @ 0x7
  1048  0027                     	ds	1
  1049  0028                     ??_RegisterSet:	
  1050  0028                     ??_DarknessCheck:	
  1051                           ; 1 bytes @ 0x8
  1052                           
  1053  0028                     ??_Blink:	
  1054                           ; 1 bytes @ 0x8
  1055                           
  1056  0028                     ??___llmod:	
  1057                           ; 1 bytes @ 0x8
  1058                           
  1059  0028                     ?_strncmp:	
  1060                           ; 1 bytes @ 0x8
  1061                           
  1062  0028                     read_write_flash_ram@flash_page:	
  1063                           ; 2 bytes @ 0x8
  1064                           
  1065  0028                     ReadClock@year:	
  1066                           ; 1 bytes @ 0x8
  1067                           
  1068  0028                     strncmp@s2:	
  1069                           ; 1 bytes @ 0x8
  1070                           
  1071                           
  1072                           ; 1 bytes @ 0x8
  1073  0028                     	ds	1
  1074  0029                     ??_ReadClock:	
  1075  0029                     DarknessCheck@darknessValue:	
  1076                           ; 1 bytes @ 0x9
  1077                           
  1078  0029                     read_write_flash_ram@offset:	
  1079                           ; 1 bytes @ 0x9
  1080                           
  1081  0029                     ___llmod@counter:	
  1082                           ; 1 bytes @ 0x9
  1083                           
  1084  0029                     Blink@i:	
  1085                           ; 1 bytes @ 0x9
  1086                           
  1087  0029                     strncmp@len:	
  1088                           ; 2 bytes @ 0x9
  1089                           
  1090                           
  1091                           ; 2 bytes @ 0x9
  1092  0029                     	ds	1
  1093  002A                     ??_Mode_0:	
  1094  002A                     ??_Mode_1:	
  1095                           ; 1 bytes @ 0xA
  1096                           
  1097  002A                     ??_Mode_2:	
  1098                           ; 1 bytes @ 0xA
  1099                           
  1100  002A                     ??_LightWithSensController:	
  1101                           ; 1 bytes @ 0xA
  1102                           
  1103  002A                     RegisterSet@adress:	
  1104                           ; 1 bytes @ 0xA
  1105                           
  1106  002A                     read_write_flash_ram@mem_ptr:	
  1107                           ; 1 bytes @ 0xA
  1108                           
  1109                           
  1110                           ; 1 bytes @ 0xA
  1111  002A                     	ds	1
  1112  002B                     ??_SetRFMode:	
  1113  002B                     ??_read_write_flash_ram:	
  1114                           ; 1 bytes @ 0xB
  1115                           
  1116  002B                     ??_strncmp:	
  1117                           ; 1 bytes @ 0xB
  1118                           
  1119  002B                     ReadClock@sec10:	
  1120                           ; 1 bytes @ 0xB
  1121                           
  1122                           
  1123                           ; 1 bytes @ 0xB
  1124  002B                     	ds	1
  1125  002C                     SetRFMode@mode:	
  1126  002C                     ReadClock@min10:	
  1127                           ; 1 bytes @ 0xC
  1128                           
  1129                           
  1130                           ; 1 bytes @ 0xC
  1131  002C                     	ds	1
  1132  002D                     SetRFMode@mcparam0_read:	
  1133  002D                     read_write_flash_ram@one_read_zero_write:	
  1134                           ; 1 bytes @ 0xD
  1135                           
  1136  002D                     ReadClock@hour10:	
  1137                           ; 1 bytes @ 0xD
  1138                           
  1139  002D                     strncmp@s1:	
  1140                           ; 1 bytes @ 0xD
  1141                           
  1142                           
  1143                           ; 1 bytes @ 0xD
  1144  002D                     	ds	1
  1145  002E                     ??_FindChannel:	
  1146  002E                     ?_strstr:	
  1147                           ; 1 bytes @ 0xE
  1148                           
  1149  002E                     ReadClock@date10:	
  1150                           ; 1 bytes @ 0xE
  1151                           
  1152  002E                     strstr@s2:	
  1153                           ; 1 bytes @ 0xE
  1154                           
  1155  002E                     read_write_flash_ram@i:	
  1156                           ; 1 bytes @ 0xE
  1157                           
  1158                           
  1159                           ; 2 bytes @ 0xE
  1160  002E                     	ds	1
  1161  002F                     ??_strstr:	
  1162  002F                     IncreaseMemoryAdress@addr1:	
  1163                           ; 1 bytes @ 0xF
  1164                           
  1165  002F                     ReadClock@month10:	
  1166                           ; 1 bytes @ 0xF
  1167                           
  1168                           
  1169                           ; 1 bytes @ 0xF
  1170  002F                     	ds	1
  1171  0030                     IncreaseMemoryAdress@addr2:	
  1172  0030                     ReadClock@year10:	
  1173                           ; 1 bytes @ 0x10
  1174                           
  1175                           
  1176                           ; 1 bytes @ 0x10
  1177  0030                     	ds	1
  1178  0031                     IncreaseMemoryAdress@addr3:	
  1179  0031                     ReadClock@seconds:	
  1180                           ; 1 bytes @ 0x11
  1181                           
  1182  0031                     FindChannel@cnt:	
  1183                           ; 1 bytes @ 0x11
  1184                           
  1185                           
  1186                           ; 2 bytes @ 0x11
  1187  0031                     	ds	1
  1188  0032                     ReadClock@sec1:	
  1189  0032                     strstr@s1:	
  1190                           ; 1 bytes @ 0x12
  1191                           
  1192  0032                     IncreaseMemoryAdress@address:	
  1193                           ; 1 bytes @ 0x12
  1194                           
  1195                           
  1196                           ; 4 bytes @ 0x12
  1197  0032                     	ds	1
  1198  0033                     ReadClock@min1:	
  1199  0033                     FindChannel@i:	
  1200                           ; 1 bytes @ 0x13
  1201                           
  1202                           
  1203                           ; 2 bytes @ 0x13
  1204  0033                     	ds	1
  1205  0034                     ReadClock@hour1:	
  1206                           
  1207                           ; 1 bytes @ 0x14
  1208  0034                     	ds	1
  1209  0035                     ??_TransiverInit:	
  1210  0035                     ??_TransiverToReceive:	
  1211                           ; 1 bytes @ 0x15
  1212                           
  1213  0035                     ?_TransmittPacket:	
  1214                           ; 1 bytes @ 0x15
  1215                           
  1216  0035                     TransmittPacket@value:	
  1217                           ; 1 bytes @ 0x15
  1218                           
  1219  0035                     ReadClock@month1:	
  1220                           ; 1 bytes @ 0x15
  1221                           
  1222                           
  1223                           ; 1 bytes @ 0x15
  1224  0035                     	ds	1
  1225  0036                     ??_TransmittPacket:	
  1226  0036                     ReadClock@year1:	
  1227                           ; 1 bytes @ 0x16
  1228                           
  1229                           
  1230                           ; 1 bytes @ 0x16
  1231  0036                     	ds	1
  1232  0037                     ReadClock@date1:	
  1233                           
  1234                           ; 1 bytes @ 0x17
  1235  0037                     	ds	1
  1236  0038                     ??_saveDataToFlash:	
  1237  0038                     TransmittPacket@i:	
  1238                           ; 1 bytes @ 0x18
  1239                           
  1240                           
  1241                           ; 2 bytes @ 0x18
  1242  0038                     	ds	2
  1243  003A                     TransmittPacket@topic:	
  1244                           
  1245                           ; 1 bytes @ 0x1A
  1246  003A                     	ds	1
  1247  003B                     ??_Mode_4:	
  1248  003B                     ??_Mode_5:	
  1249                           ; 1 bytes @ 0x1B
  1250                           
  1251  003B                     ??_SendMemoryData:	
  1252                           ; 1 bytes @ 0x1B
  1253                           
  1254                           
  1255                           ; 1 bytes @ 0x1B
  1256  003B                     	ds	2
  1257  003D                     saveDataToFlash@seconds:	
  1258                           
  1259                           ; 1 bytes @ 0x1D
  1260  003D                     	ds	1
  1261  003E                     saveDataToFlash@minutes:	
  1262                           
  1263                           ; 1 bytes @ 0x1E
  1264  003E                     	ds	1
  1265  003F                     saveDataToFlash@hours:	
  1266                           
  1267                           ; 1 bytes @ 0x1F
  1268  003F                     	ds	1
  1269  0040                     saveDataToFlash@date:	
  1270                           
  1271                           ; 1 bytes @ 0x20
  1272  0040                     	ds	1
  1273  0041                     saveDataToFlash@month:	
  1274                           
  1275                           ; 1 bytes @ 0x21
  1276  0041                     	ds	1
  1277  0042                     saveDataToFlash@year:	
  1278                           
  1279                           ; 1 bytes @ 0x22
  1280  0042                     	ds	1
  1281  0043                     saveDataToFlash@value:	
  1282  0043                     SendMemoryData@value:	
  1283                           ; 1 bytes @ 0x23
  1284                           
  1285                           
  1286                           ; 1 bytes @ 0x23
  1287  0043                     	ds	1
  1288  0044                     saveDataToFlash@addr1:	
  1289  0044                     SendMemoryData@finalAddress:	
  1290                           ; 1 bytes @ 0x24
  1291                           
  1292                           
  1293                           ; 4 bytes @ 0x24
  1294  0044                     	ds	1
  1295  0045                     saveDataToFlash@addr2:	
  1296                           
  1297                           ; 1 bytes @ 0x25
  1298  0045                     	ds	1
  1299  0046                     saveDataToFlash@addr3:	
  1300                           
  1301                           ; 1 bytes @ 0x26
  1302  0046                     	ds	2
  1303  0048                     SendMemoryData@addr3:	
  1304                           
  1305                           ; 1 bytes @ 0x28
  1306  0048                     	ds	1
  1307  0049                     SendMemoryData@addr2:	
  1308                           
  1309                           ; 1 bytes @ 0x29
  1310  0049                     	ds	1
  1311  004A                     SendMemoryData@addr1:	
  1312                           
  1313                           ; 1 bytes @ 0x2A
  1314  004A                     	ds	1
  1315  004B                     SendMemoryData@address:	
  1316                           
  1317                           ; 4 bytes @ 0x2B
  1318  004B                     	ds	4
  1319  004F                     ??_ReceivedPacketHandler:	
  1320                           
  1321                           ; 1 bytes @ 0x2F
  1322  004F                     	ds	1
  1323  0050                     ReceivedPacketHandler@Data:	
  1324                           
  1325                           ; 1 bytes @ 0x30
  1326  0050                     	ds	1
  1327  0051                     ??_TransiverReadFIFO:	
  1328                           
  1329                           ; 1 bytes @ 0x31
  1330  0051                     	ds	2
  1331  0053                     ??_main:	
  1332                           
  1333                           ; 1 bytes @ 0x33
  1334  0053                     	ds	3
  1335                           
  1336                           	psect	maintext
  1337  06F6                     __pmaintext:	
  1338 ;;
  1339 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1340 ;;
  1341 ;; *************** function _main *****************
  1342 ;; Defined at:
  1343 ;;		line 21 in file "main.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;		None
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;		None
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  2   80[None  ] int 
  1350 ;; Registers used:
  1351 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1352 ;; Tracked objects:
  1353 ;;		On entry : B00/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1357 ;;      Params:         0       0       0       0       0
  1358 ;;      Locals:         0       0       0       0       0
  1359 ;;      Temps:          0       3       0       0       0
  1360 ;;      Totals:         0       3       0       0       0
  1361 ;;Total ram usage:        3 bytes
  1362 ;; Hardware stack levels required when called:   11
  1363 ;; This function calls:
  1364 ;;		_ClockInit
  1365 ;;		_Mode_0
  1366 ;;		_Mode_1
  1367 ;;		_Mode_2
  1368 ;;		_Mode_4
  1369 ;;		_Mode_5
  1370 ;;		_OperationMode
  1371 ;;		_PICInit
  1372 ;;		_ResetMemoryAdress
  1373 ;;		_TransiverInit
  1374 ;;		_TransiverReadFIFO
  1375 ;;		_TransiverToReceive
  1376 ;;		_ram_bulk_erase
  1377 ;;		_read_ram_status
  1378 ;;		_saveDataToFlash
  1379 ;;		_write_ram_status
  1380 ;; This function is called by:
  1381 ;;		Startup code after reset
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function _main
  1387  06F6                     _main:	
  1388                           
  1389                           ;main.c: 24: PICInit();
  1390                           
  1391                           ;incstack = 0
  1392 ;; hardware stack exceeded
  1393                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1394  06F6  120A  158A  2167  120A  118A  	fcall	_PICInit
  1395                           
  1396                           ;main.c: 25: TransiverInit();
  1397  06FB  120A  158A  2531  120A  118A  	fcall	_TransiverInit
  1398                           
  1399                           ;main.c: 26: ClockInit();
  1400  0700  120A  158A  2323  120A  118A  	fcall	_ClockInit
  1401                           
  1402                           ;main.c: 30: RB1 = 0;
  1403  0705  1283               	bcf	3,5	;RP0=0, select bank0
  1404  0706  1303               	bcf	3,6	;RP1=0, select bank0
  1405  0707  1086               	bcf	6,1	;volatile
  1406                           
  1407                           ;main.c: 31: _delay((unsigned long)((300)*(4000000/4000.0)));
  1408  0708  3002               	movlw	2
  1409  0709  1283               	bcf	3,5	;RP0=0, select bank0
  1410  070A  1303               	bcf	3,6	;RP1=0, select bank0
  1411  070B  00D5               	movwf	??_main+2
  1412  070C  3086               	movlw	134
  1413  070D  00D4               	movwf	??_main+1
  1414  070E  3098               	movlw	152
  1415  070F  00D3               	movwf	??_main
  1416  0710                     u2757:	
  1417  0710  0BD3               	decfsz	??_main,f
  1418  0711  2F10               	goto	u2757
  1419  0712  0BD4               	decfsz	??_main+1,f
  1420  0713  2F10               	goto	u2757
  1421  0714  0BD5               	decfsz	??_main+2,f
  1422  0715  2F10               	goto	u2757
  1423  0716  0000               	nop
  1424                           
  1425                           ;main.c: 32: RB1 = 1;
  1426  0717  1283               	bcf	3,5	;RP0=0, select bank0
  1427  0718  1303               	bcf	3,6	;RP1=0, select bank0
  1428  0719  1486               	bsf	6,1	;volatile
  1429                           
  1430                           ;main.c: 33: _delay((unsigned long)((300)*(4000000/4000.0)));
  1431  071A  3002               	movlw	2
  1432  071B  1283               	bcf	3,5	;RP0=0, select bank0
  1433  071C  1303               	bcf	3,6	;RP1=0, select bank0
  1434  071D  00D5               	movwf	??_main+2
  1435  071E  3086               	movlw	134
  1436  071F  00D4               	movwf	??_main+1
  1437  0720  3098               	movlw	152
  1438  0721  00D3               	movwf	??_main
  1439  0722                     u2767:	
  1440  0722  0BD3               	decfsz	??_main,f
  1441  0723  2F22               	goto	u2767
  1442  0724  0BD4               	decfsz	??_main+1,f
  1443  0725  2F22               	goto	u2767
  1444  0726  0BD5               	decfsz	??_main+2,f
  1445  0727  2F22               	goto	u2767
  1446  0728  0000               	nop
  1447  0729                     l3331:	
  1448                           ;main.c: 35: while(1)
  1449                           
  1450                           
  1451                           ;main.c: 36: {
  1452                           ;main.c: 37: if(!RB0)
  1453  0729  1283               	bcf	3,5	;RP0=0, select bank0
  1454  072A  1303               	bcf	3,6	;RP1=0, select bank0
  1455  072B  1806               	btfsc	6,0	;volatile
  1456  072C  2F8C               	goto	l3353
  1457                           
  1458                           ;main.c: 38: {
  1459                           ;main.c: 39: RB1 = 0;
  1460  072D  1086               	bcf	6,1	;volatile
  1461                           
  1462                           ;main.c: 40: _delay((unsigned long)((300)*(4000000/4000.0)));
  1463  072E  3002               	movlw	2
  1464  072F  1283               	bcf	3,5	;RP0=0, select bank0
  1465  0730  1303               	bcf	3,6	;RP1=0, select bank0
  1466  0731  00D5               	movwf	??_main+2
  1467  0732  3086               	movlw	134
  1468  0733  00D4               	movwf	??_main+1
  1469  0734  3098               	movlw	152
  1470  0735  00D3               	movwf	??_main
  1471  0736                     u2777:	
  1472  0736  0BD3               	decfsz	??_main,f
  1473  0737  2F36               	goto	u2777
  1474  0738  0BD4               	decfsz	??_main+1,f
  1475  0739  2F36               	goto	u2777
  1476  073A  0BD5               	decfsz	??_main+2,f
  1477  073B  2F36               	goto	u2777
  1478  073C  0000               	nop
  1479                           
  1480                           ;main.c: 41: RB1 = 1;
  1481  073D  1283               	bcf	3,5	;RP0=0, select bank0
  1482  073E  1303               	bcf	3,6	;RP1=0, select bank0
  1483  073F  1486               	bsf	6,1	;volatile
  1484                           
  1485                           ;main.c: 42: _delay((unsigned long)((300)*(4000000/4000.0)));
  1486  0740  3002               	movlw	2
  1487  0741  1283               	bcf	3,5	;RP0=0, select bank0
  1488  0742  1303               	bcf	3,6	;RP1=0, select bank0
  1489  0743  00D5               	movwf	??_main+2
  1490  0744  3086               	movlw	134
  1491  0745  00D4               	movwf	??_main+1
  1492  0746  3098               	movlw	152
  1493  0747  00D3               	movwf	??_main
  1494  0748                     u2787:	
  1495  0748  0BD3               	decfsz	??_main,f
  1496  0749  2F48               	goto	u2787
  1497  074A  0BD4               	decfsz	??_main+1,f
  1498  074B  2F48               	goto	u2787
  1499  074C  0BD5               	decfsz	??_main+2,f
  1500  074D  2F48               	goto	u2787
  1501  074E  0000               	nop
  1502                           
  1503                           ;main.c: 43: write_ram_status(read_ram_status() & 0b11100011);
  1504  074F  160A  118A  2559  120A  118A  	fcall	_read_ram_status
  1505  0754  39E3               	andlw	227
  1506  0755  160A  118A  2723  120A  118A  	fcall	_write_ram_status
  1507                           
  1508                           ;main.c: 44: ResetMemoryAdress();
  1509  075A  160A  118A  25B6  120A  118A  	fcall	_ResetMemoryAdress
  1510                           
  1511                           ;main.c: 45: ram_bulk_erase();
  1512  075F  160A  118A  25EC  120A  118A  	fcall	_ram_bulk_erase
  1513                           
  1514                           ;main.c: 46: RB1 = 0;
  1515  0764  1283               	bcf	3,5	;RP0=0, select bank0
  1516  0765  1303               	bcf	3,6	;RP1=0, select bank0
  1517  0766  1086               	bcf	6,1	;volatile
  1518                           
  1519                           ;main.c: 47: _delay((unsigned long)((300)*(4000000/4000.0)));
  1520  0767  3002               	movlw	2
  1521  0768  1283               	bcf	3,5	;RP0=0, select bank0
  1522  0769  1303               	bcf	3,6	;RP1=0, select bank0
  1523  076A  00D5               	movwf	??_main+2
  1524  076B  3086               	movlw	134
  1525  076C  00D4               	movwf	??_main+1
  1526  076D  3098               	movlw	152
  1527  076E  00D3               	movwf	??_main
  1528  076F                     u2797:	
  1529  076F  0BD3               	decfsz	??_main,f
  1530  0770  2F6F               	goto	u2797
  1531  0771  0BD4               	decfsz	??_main+1,f
  1532  0772  2F6F               	goto	u2797
  1533  0773  0BD5               	decfsz	??_main+2,f
  1534  0774  2F6F               	goto	u2797
  1535  0775  0000               	nop
  1536                           
  1537                           ;main.c: 48: RB1 = 1;
  1538  0776  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0777  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0778  1486               	bsf	6,1	;volatile
  1541                           
  1542                           ;main.c: 49: _delay((unsigned long)((300)*(4000000/4000.0)));
  1543  0779  3002               	movlw	2
  1544  077A  1283               	bcf	3,5	;RP0=0, select bank0
  1545  077B  1303               	bcf	3,6	;RP1=0, select bank0
  1546  077C  00D5               	movwf	??_main+2
  1547  077D  3086               	movlw	134
  1548  077E  00D4               	movwf	??_main+1
  1549  077F  3098               	movlw	152
  1550  0780  00D3               	movwf	??_main
  1551  0781                     u2807:	
  1552  0781  0BD3               	decfsz	??_main,f
  1553  0782  2F81               	goto	u2807
  1554  0783  0BD4               	decfsz	??_main+1,f
  1555  0784  2F81               	goto	u2807
  1556  0785  0BD5               	decfsz	??_main+2,f
  1557  0786  2F81               	goto	u2807
  1558  0787  0000               	nop
  1559  0788                     l83:	
  1560                           ;main.c: 50: while(!RB0);
  1561                           
  1562  0788  1283               	bcf	3,5	;RP0=0, select bank0
  1563  0789  1303               	bcf	3,6	;RP1=0, select bank0
  1564  078A  1C06               	btfss	6,0	;volatile
  1565  078B  2F88               	goto	l83
  1566  078C                     l3353:	
  1567                           
  1568                           ;main.c: 53: }
  1569                           ;main.c: 55: if(OperationMode() == 0)
  1570  078C  160A  118A  24E2  120A  118A  	fcall	_OperationMode
  1571  0791  3A00               	xorlw	0
  1572  0792  1D03               	skipz
  1573  0793  2F99               	goto	l3357
  1574                           
  1575                           ;main.c: 56: {
  1576                           ;main.c: 57: Mode_0();
  1577  0794  160A  118A  24C5  120A  118A  	fcall	_Mode_0
  1578  0799                     l3357:	
  1579                           
  1580                           ;main.c: 58: }
  1581                           ;main.c: 59: if(OperationMode() == 1)
  1582  0799  160A  118A  24E2  120A  118A  	fcall	_OperationMode
  1583  079E  3A01               	xorlw	1
  1584  079F  1D03               	skipz
  1585  07A0  2FA6               	goto	l3361
  1586                           
  1587                           ;main.c: 60: {
  1588                           ;main.c: 61: Mode_1();
  1589  07A1  160A  118A  2582  120A  118A  	fcall	_Mode_1
  1590  07A6                     l3361:	
  1591                           
  1592                           ;main.c: 62: }
  1593                           ;main.c: 65: if(OperationMode() == 2)
  1594  07A6  160A  118A  24E2  120A  118A  	fcall	_OperationMode
  1595  07AB  3A02               	xorlw	2
  1596  07AC  1D03               	skipz
  1597  07AD  2FB3               	goto	l3365
  1598                           
  1599                           ;main.c: 66: {
  1600                           ;main.c: 67: Mode_2();
  1601  07AE  160A  118A  24F7  120A  118A  	fcall	_Mode_2
  1602  07B3                     l3365:	
  1603                           
  1604                           ;main.c: 68: }
  1605                           ;main.c: 70: if(OperationMode() == 4)
  1606  07B3  160A  118A  24E2  120A  118A  	fcall	_OperationMode
  1607  07B8  3A04               	xorlw	4
  1608  07B9  1D03               	skipz
  1609  07BA  2FC0               	goto	l3369
  1610                           
  1611                           ;main.c: 71: {
  1612                           ;main.c: 72: Mode_4();
  1613  07BB  160A  118A  2512  120A  118A  	fcall	_Mode_4
  1614  07C0                     l3369:	
  1615                           
  1616                           ;main.c: 73: }
  1617                           ;main.c: 75: if(OperationMode() == 5)
  1618  07C0  160A  118A  24E2  120A  118A  	fcall	_OperationMode
  1619  07C5  3A05               	xorlw	5
  1620  07C6  1D03               	skipz
  1621  07C7  2FCD               	goto	l3373
  1622                           
  1623                           ;main.c: 76: {
  1624                           ;main.c: 77: Mode_5();
  1625  07C8  160A  118A  2534  120A  118A  	fcall	_Mode_5
  1626  07CD                     l3373:	
  1627                           
  1628                           ;main.c: 78: }
  1629                           ;main.c: 82: if(!bTransiverModeReceive)
  1630  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  1631  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  1632  07CF  086A               	movf	_bTransiverModeReceive,w
  1633  07D0  1D03               	btfss	3,2
  1634  07D1  2FD7               	goto	l3377
  1635                           
  1636                           ;main.c: 83: TransiverToReceive();
  1637  07D2  120A  158A  210B  120A  118A  	fcall	_TransiverToReceive
  1638  07D7                     l3377:	
  1639                           
  1640                           ;main.c: 84: if(RB4 && bTransiverModeReceive)
  1641  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  1642  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  1643  07D9  1E06               	btfss	6,4	;volatile
  1644  07DA  2FE3               	goto	l3383
  1645  07DB  086A               	movf	_bTransiverModeReceive,w
  1646  07DC  1903               	btfsc	3,2
  1647  07DD  2FE3               	goto	l3383
  1648                           
  1649                           ;main.c: 85: TransiverReadFIFO();
  1650  07DE  120A  158A  21CB  120A  118A  	fcall	_TransiverReadFIFO
  1651  07E3                     l3383:	
  1652                           
  1653                           ;main.c: 87: if(bSaveDataToFlash)
  1654  07E3  1283               	bcf	3,5	;RP0=0, select bank0
  1655  07E4  1303               	bcf	3,6	;RP1=0, select bank0
  1656  07E5  0869               	movf	_bSaveDataToFlash,w
  1657  07E6  1903               	btfsc	3,2
  1658  07E7  2F29               	goto	l3331
  1659                           
  1660                           ;main.c: 88: {
  1661                           ;main.c: 89: saveDataToFlash();
  1662  07E8  120A  118A  2045  120A  118A  	fcall	_saveDataToFlash
  1663                           
  1664                           ;main.c: 90: bSaveDataToFlash = FALSE;
  1665  07ED  1283               	bcf	3,5	;RP0=0, select bank0
  1666  07EE  1303               	bcf	3,6	;RP1=0, select bank0
  1667  07EF  01E9               	clrf	_bSaveDataToFlash
  1668  07F0  2F29               	goto	l3331
  1669  07F1                     __end_of_main:	
  1670                           
  1671                           	psect	text1
  1672  0045                     __ptext1:	
  1673 ;; *************** function _saveDataToFlash *****************
  1674 ;; Defined at:
  1675 ;;		line 1099 in file "functions.c"
  1676 ;; Parameters:    Size  Location     Type
  1677 ;;		None
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;  addr3           1   38[BANK0 ] unsigned char 
  1680 ;;  addr2           1   37[BANK0 ] unsigned char 
  1681 ;;  addr1           1   36[BANK0 ] unsigned char 
  1682 ;;  value           1   35[BANK0 ] unsigned char 
  1683 ;;  year            1   34[BANK0 ] unsigned char 
  1684 ;;  month           1   33[BANK0 ] unsigned char 
  1685 ;;  date            1   32[BANK0 ] unsigned char 
  1686 ;;  hours           1   31[BANK0 ] unsigned char 
  1687 ;;  minutes         1   30[BANK0 ] unsigned char 
  1688 ;;  seconds         1   29[BANK0 ] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1698 ;;      Params:         0       0       0       0       0
  1699 ;;      Locals:         0      10       0       0       0
  1700 ;;      Temps:          0       5       0       0       0
  1701 ;;      Totals:         0      15       0       0       0
  1702 ;;Total ram usage:       15 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    6
  1705 ;; This function calls:
  1706 ;;		_AnalogValue
  1707 ;;		_IncreaseMemoryAdress
  1708 ;;		_ReadClock
  1709 ;;		_ReadMemoryAdress
  1710 ;;		_read_write_flash_ram
  1711 ;; This function is called by:
  1712 ;;		_main
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           
  1717                           ;psect for function _saveDataToFlash
  1718  0045                     _saveDataToFlash:	
  1719                           
  1720                           ;functions.c: 1101: unsigned char value, addr1, addr2, addr3, seconds, minutes, hours, d
      +                          ate, month, year;
  1721                           ;functions.c: 1103: ReadClock(&seconds, &minutes, &hours, &date, &month, &year);
  1722                           
  1723                           ;incstack = 0
  1724                           ; Regs used in _saveDataToFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1725  0045  303E               	movlw	(low (saveDataToFlash@minutes| 0))& (0+255)
  1726  0046  1283               	bcf	3,5	;RP0=0, select bank0
  1727  0047  1303               	bcf	3,6	;RP1=0, select bank0
  1728  0048  00B8               	movwf	??_saveDataToFlash
  1729  0049  0838               	movf	??_saveDataToFlash,w
  1730  004A  00A4               	movwf	ReadClock@minutes
  1731  004B  303F               	movlw	(low (saveDataToFlash@hours| 0))& (0+255)
  1732  004C  00B9               	movwf	??_saveDataToFlash+1
  1733  004D  0839               	movf	??_saveDataToFlash+1,w
  1734  004E  00A5               	movwf	ReadClock@hour
  1735  004F  3040               	movlw	(low (saveDataToFlash@date| 0))& (0+255)
  1736  0050  00BA               	movwf	??_saveDataToFlash+2
  1737  0051  083A               	movf	??_saveDataToFlash+2,w
  1738  0052  00A6               	movwf	ReadClock@date
  1739  0053  3041               	movlw	(low (saveDataToFlash@month| 0))& (0+255)
  1740  0054  00BB               	movwf	??_saveDataToFlash+3
  1741  0055  083B               	movf	??_saveDataToFlash+3,w
  1742  0056  00A7               	movwf	ReadClock@month
  1743  0057  3042               	movlw	(low (saveDataToFlash@year| 0))& (0+255)
  1744  0058  00BC               	movwf	??_saveDataToFlash+4
  1745  0059  083C               	movf	??_saveDataToFlash+4,w
  1746  005A  00A8               	movwf	ReadClock@year
  1747  005B  303D               	movlw	(low (saveDataToFlash@seconds| 0))& (0+255)
  1748  005C  120A  118A  25BD  120A  118A  	fcall	_ReadClock
  1749                           
  1750                           ;functions.c: 1105: value = year;
  1751  0061  1283               	bcf	3,5	;RP0=0, select bank0
  1752  0062  1303               	bcf	3,6	;RP1=0, select bank0
  1753  0063  0842               	movf	saveDataToFlash@year,w
  1754  0064  00B8               	movwf	??_saveDataToFlash
  1755  0065  0838               	movf	??_saveDataToFlash,w
  1756  0066  00C3               	movwf	saveDataToFlash@value
  1757                           
  1758                           ;functions.c: 1106: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1759  0067  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1760  0068  00B8               	movwf	??_saveDataToFlash
  1761  0069  0838               	movf	??_saveDataToFlash,w
  1762  006A  00A2               	movwf	ReadMemoryAdress@var2
  1763  006B  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1764  006C  00B9               	movwf	??_saveDataToFlash+1
  1765  006D  0839               	movf	??_saveDataToFlash+1,w
  1766  006E  00A3               	movwf	ReadMemoryAdress@var1
  1767  006F  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1768  0070  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  1769                           
  1770                           ;functions.c: 1107: read_write_flash_ram(
  1771                           ;functions.c: 1108: 0,
  1772                           ;functions.c: 1109: 1,
  1773                           ;functions.c: 1110: addr3,
  1774                           ;functions.c: 1111: addr2,
  1775                           ;functions.c: 1112: addr1,
  1776                           ;functions.c: 1113: &value);
  1777  0075  3001               	movlw	1
  1778  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1779  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1780  0078  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1781  0079  3000               	movlw	0
  1782  007A  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1783  007B  0846               	movf	saveDataToFlash@addr3,w
  1784  007C  00B8               	movwf	??_saveDataToFlash
  1785  007D  0838               	movf	??_saveDataToFlash,w
  1786  007E  00A7               	movwf	read_write_flash_ram@flash_sector
  1787  007F  0845               	movf	saveDataToFlash@addr2,w
  1788  0080  00B9               	movwf	??_saveDataToFlash+1
  1789  0081  0839               	movf	??_saveDataToFlash+1,w
  1790  0082  00A8               	movwf	read_write_flash_ram@flash_page
  1791  0083  0844               	movf	saveDataToFlash@addr1,w
  1792  0084  00BA               	movwf	??_saveDataToFlash+2
  1793  0085  083A               	movf	??_saveDataToFlash+2,w
  1794  0086  00A9               	movwf	read_write_flash_ram@offset
  1795  0087  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1796  0088  00BB               	movwf	??_saveDataToFlash+3
  1797  0089  083B               	movf	??_saveDataToFlash+3,w
  1798  008A  00AA               	movwf	read_write_flash_ram@mem_ptr
  1799  008B  3000               	movlw	0
  1800  008C  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  1801                           
  1802                           ;functions.c: 1114: IncreaseMemoryAdress();
  1803  0091  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  1804                           
  1805                           ;functions.c: 1116: value = month;
  1806  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1807  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1808  0098  0841               	movf	saveDataToFlash@month,w
  1809  0099  00B8               	movwf	??_saveDataToFlash
  1810  009A  0838               	movf	??_saveDataToFlash,w
  1811  009B  00C3               	movwf	saveDataToFlash@value
  1812                           
  1813                           ;functions.c: 1117: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1814  009C  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1815  009D  00B8               	movwf	??_saveDataToFlash
  1816  009E  0838               	movf	??_saveDataToFlash,w
  1817  009F  00A2               	movwf	ReadMemoryAdress@var2
  1818  00A0  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1819  00A1  00B9               	movwf	??_saveDataToFlash+1
  1820  00A2  0839               	movf	??_saveDataToFlash+1,w
  1821  00A3  00A3               	movwf	ReadMemoryAdress@var1
  1822  00A4  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1823  00A5  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  1824                           
  1825                           ;functions.c: 1118: read_write_flash_ram(
  1826                           ;functions.c: 1119: 0,
  1827                           ;functions.c: 1120: 1,
  1828                           ;functions.c: 1121: addr3,
  1829                           ;functions.c: 1122: addr2,
  1830                           ;functions.c: 1123: addr1,
  1831                           ;functions.c: 1124: &value);
  1832  00AA  3001               	movlw	1
  1833  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  1834  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  1835  00AD  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1836  00AE  3000               	movlw	0
  1837  00AF  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1838  00B0  0846               	movf	saveDataToFlash@addr3,w
  1839  00B1  00B8               	movwf	??_saveDataToFlash
  1840  00B2  0838               	movf	??_saveDataToFlash,w
  1841  00B3  00A7               	movwf	read_write_flash_ram@flash_sector
  1842  00B4  0845               	movf	saveDataToFlash@addr2,w
  1843  00B5  00B9               	movwf	??_saveDataToFlash+1
  1844  00B6  0839               	movf	??_saveDataToFlash+1,w
  1845  00B7  00A8               	movwf	read_write_flash_ram@flash_page
  1846  00B8  0844               	movf	saveDataToFlash@addr1,w
  1847  00B9  00BA               	movwf	??_saveDataToFlash+2
  1848  00BA  083A               	movf	??_saveDataToFlash+2,w
  1849  00BB  00A9               	movwf	read_write_flash_ram@offset
  1850  00BC  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1851  00BD  00BB               	movwf	??_saveDataToFlash+3
  1852  00BE  083B               	movf	??_saveDataToFlash+3,w
  1853  00BF  00AA               	movwf	read_write_flash_ram@mem_ptr
  1854  00C0  3000               	movlw	0
  1855  00C1  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  1856                           
  1857                           ;functions.c: 1125: IncreaseMemoryAdress();
  1858  00C6  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  1859                           
  1860                           ;functions.c: 1127: value = date;
  1861  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1862  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1863  00CD  0840               	movf	saveDataToFlash@date,w
  1864  00CE  00B8               	movwf	??_saveDataToFlash
  1865  00CF  0838               	movf	??_saveDataToFlash,w
  1866  00D0  00C3               	movwf	saveDataToFlash@value
  1867                           
  1868                           ;functions.c: 1128: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1869  00D1  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1870  00D2  00B8               	movwf	??_saveDataToFlash
  1871  00D3  0838               	movf	??_saveDataToFlash,w
  1872  00D4  00A2               	movwf	ReadMemoryAdress@var2
  1873  00D5  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1874  00D6  00B9               	movwf	??_saveDataToFlash+1
  1875  00D7  0839               	movf	??_saveDataToFlash+1,w
  1876  00D8  00A3               	movwf	ReadMemoryAdress@var1
  1877  00D9  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1878  00DA  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  1879                           
  1880                           ;functions.c: 1129: read_write_flash_ram(
  1881                           ;functions.c: 1130: 0,
  1882                           ;functions.c: 1131: 1,
  1883                           ;functions.c: 1132: addr3,
  1884                           ;functions.c: 1133: addr2,
  1885                           ;functions.c: 1134: addr1,
  1886                           ;functions.c: 1135: &value);
  1887  00DF  3001               	movlw	1
  1888  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1889  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1890  00E2  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1891  00E3  3000               	movlw	0
  1892  00E4  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1893  00E5  0846               	movf	saveDataToFlash@addr3,w
  1894  00E6  00B8               	movwf	??_saveDataToFlash
  1895  00E7  0838               	movf	??_saveDataToFlash,w
  1896  00E8  00A7               	movwf	read_write_flash_ram@flash_sector
  1897  00E9  0845               	movf	saveDataToFlash@addr2,w
  1898  00EA  00B9               	movwf	??_saveDataToFlash+1
  1899  00EB  0839               	movf	??_saveDataToFlash+1,w
  1900  00EC  00A8               	movwf	read_write_flash_ram@flash_page
  1901  00ED  0844               	movf	saveDataToFlash@addr1,w
  1902  00EE  00BA               	movwf	??_saveDataToFlash+2
  1903  00EF  083A               	movf	??_saveDataToFlash+2,w
  1904  00F0  00A9               	movwf	read_write_flash_ram@offset
  1905  00F1  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1906  00F2  00BB               	movwf	??_saveDataToFlash+3
  1907  00F3  083B               	movf	??_saveDataToFlash+3,w
  1908  00F4  00AA               	movwf	read_write_flash_ram@mem_ptr
  1909  00F5  3000               	movlw	0
  1910  00F6  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  1911                           
  1912                           ;functions.c: 1136: IncreaseMemoryAdress();
  1913  00FB  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  1914                           
  1915                           ;functions.c: 1138: value = hours;
  1916  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1917  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1918  0102  083F               	movf	saveDataToFlash@hours,w
  1919  0103  00B8               	movwf	??_saveDataToFlash
  1920  0104  0838               	movf	??_saveDataToFlash,w
  1921  0105  00C3               	movwf	saveDataToFlash@value
  1922                           
  1923                           ;functions.c: 1139: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1924  0106  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1925  0107  00B8               	movwf	??_saveDataToFlash
  1926  0108  0838               	movf	??_saveDataToFlash,w
  1927  0109  00A2               	movwf	ReadMemoryAdress@var2
  1928  010A  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1929  010B  00B9               	movwf	??_saveDataToFlash+1
  1930  010C  0839               	movf	??_saveDataToFlash+1,w
  1931  010D  00A3               	movwf	ReadMemoryAdress@var1
  1932  010E  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1933  010F  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  1934                           
  1935                           ;functions.c: 1140: read_write_flash_ram(
  1936                           ;functions.c: 1141: 0,
  1937                           ;functions.c: 1142: 1,
  1938                           ;functions.c: 1143: addr3,
  1939                           ;functions.c: 1144: addr2,
  1940                           ;functions.c: 1145: addr1,
  1941                           ;functions.c: 1146: &value);
  1942  0114  3001               	movlw	1
  1943  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1945  0117  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1946  0118  3000               	movlw	0
  1947  0119  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1948  011A  0846               	movf	saveDataToFlash@addr3,w
  1949  011B  00B8               	movwf	??_saveDataToFlash
  1950  011C  0838               	movf	??_saveDataToFlash,w
  1951  011D  00A7               	movwf	read_write_flash_ram@flash_sector
  1952  011E  0845               	movf	saveDataToFlash@addr2,w
  1953  011F  00B9               	movwf	??_saveDataToFlash+1
  1954  0120  0839               	movf	??_saveDataToFlash+1,w
  1955  0121  00A8               	movwf	read_write_flash_ram@flash_page
  1956  0122  0844               	movf	saveDataToFlash@addr1,w
  1957  0123  00BA               	movwf	??_saveDataToFlash+2
  1958  0124  083A               	movf	??_saveDataToFlash+2,w
  1959  0125  00A9               	movwf	read_write_flash_ram@offset
  1960  0126  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1961  0127  00BB               	movwf	??_saveDataToFlash+3
  1962  0128  083B               	movf	??_saveDataToFlash+3,w
  1963  0129  00AA               	movwf	read_write_flash_ram@mem_ptr
  1964  012A  3000               	movlw	0
  1965  012B  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  1966                           
  1967                           ;functions.c: 1147: IncreaseMemoryAdress();
  1968  0130  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  1969                           
  1970                           ;functions.c: 1150: value = AnalogValue(0);
  1971  0135  3000               	movlw	0
  1972  0136  160A  118A  26A0  120A  118A  	fcall	_AnalogValue
  1973  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1974  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1975  013D  00B8               	movwf	??_saveDataToFlash
  1976  013E  0838               	movf	??_saveDataToFlash,w
  1977  013F  00C3               	movwf	saveDataToFlash@value
  1978                           
  1979                           ;functions.c: 1151: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1980  0140  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1981  0141  00B8               	movwf	??_saveDataToFlash
  1982  0142  0838               	movf	??_saveDataToFlash,w
  1983  0143  00A2               	movwf	ReadMemoryAdress@var2
  1984  0144  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1985  0145  00B9               	movwf	??_saveDataToFlash+1
  1986  0146  0839               	movf	??_saveDataToFlash+1,w
  1987  0147  00A3               	movwf	ReadMemoryAdress@var1
  1988  0148  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1989  0149  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  1990                           
  1991                           ;functions.c: 1152: read_write_flash_ram(
  1992                           ;functions.c: 1153: 0,
  1993                           ;functions.c: 1154: 1,
  1994                           ;functions.c: 1155: addr3,
  1995                           ;functions.c: 1156: addr2,
  1996                           ;functions.c: 1157: addr1,
  1997                           ;functions.c: 1158: &value);
  1998  014E  3001               	movlw	1
  1999  014F  1283               	bcf	3,5	;RP0=0, select bank0
  2000  0150  1303               	bcf	3,6	;RP1=0, select bank0
  2001  0151  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2002  0152  3000               	movlw	0
  2003  0153  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2004  0154  0846               	movf	saveDataToFlash@addr3,w
  2005  0155  00B8               	movwf	??_saveDataToFlash
  2006  0156  0838               	movf	??_saveDataToFlash,w
  2007  0157  00A7               	movwf	read_write_flash_ram@flash_sector
  2008  0158  0845               	movf	saveDataToFlash@addr2,w
  2009  0159  00B9               	movwf	??_saveDataToFlash+1
  2010  015A  0839               	movf	??_saveDataToFlash+1,w
  2011  015B  00A8               	movwf	read_write_flash_ram@flash_page
  2012  015C  0844               	movf	saveDataToFlash@addr1,w
  2013  015D  00BA               	movwf	??_saveDataToFlash+2
  2014  015E  083A               	movf	??_saveDataToFlash+2,w
  2015  015F  00A9               	movwf	read_write_flash_ram@offset
  2016  0160  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2017  0161  00BB               	movwf	??_saveDataToFlash+3
  2018  0162  083B               	movf	??_saveDataToFlash+3,w
  2019  0163  00AA               	movwf	read_write_flash_ram@mem_ptr
  2020  0164  3000               	movlw	0
  2021  0165  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  2022                           
  2023                           ;functions.c: 1159: IncreaseMemoryAdress();
  2024  016A  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  2025                           
  2026                           ;functions.c: 1161: value = AnalogValue(3);
  2027  016F  3003               	movlw	3
  2028  0170  160A  118A  26A0  120A  118A  	fcall	_AnalogValue
  2029  0175  1283               	bcf	3,5	;RP0=0, select bank0
  2030  0176  1303               	bcf	3,6	;RP1=0, select bank0
  2031  0177  00B8               	movwf	??_saveDataToFlash
  2032  0178  0838               	movf	??_saveDataToFlash,w
  2033  0179  00C3               	movwf	saveDataToFlash@value
  2034                           
  2035                           ;functions.c: 1162: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2036  017A  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2037  017B  00B8               	movwf	??_saveDataToFlash
  2038  017C  0838               	movf	??_saveDataToFlash,w
  2039  017D  00A2               	movwf	ReadMemoryAdress@var2
  2040  017E  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2041  017F  00B9               	movwf	??_saveDataToFlash+1
  2042  0180  0839               	movf	??_saveDataToFlash+1,w
  2043  0181  00A3               	movwf	ReadMemoryAdress@var1
  2044  0182  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2045  0183  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  2046                           
  2047                           ;functions.c: 1163: read_write_flash_ram(
  2048                           ;functions.c: 1164: 0,
  2049                           ;functions.c: 1165: 1,
  2050                           ;functions.c: 1166: addr3,
  2051                           ;functions.c: 1167: addr2,
  2052                           ;functions.c: 1168: addr1,
  2053                           ;functions.c: 1169: &value);
  2054  0188  3001               	movlw	1
  2055  0189  1283               	bcf	3,5	;RP0=0, select bank0
  2056  018A  1303               	bcf	3,6	;RP1=0, select bank0
  2057  018B  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2058  018C  3000               	movlw	0
  2059  018D  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2060  018E  0846               	movf	saveDataToFlash@addr3,w
  2061  018F  00B8               	movwf	??_saveDataToFlash
  2062  0190  0838               	movf	??_saveDataToFlash,w
  2063  0191  00A7               	movwf	read_write_flash_ram@flash_sector
  2064  0192  0845               	movf	saveDataToFlash@addr2,w
  2065  0193  00B9               	movwf	??_saveDataToFlash+1
  2066  0194  0839               	movf	??_saveDataToFlash+1,w
  2067  0195  00A8               	movwf	read_write_flash_ram@flash_page
  2068  0196  0844               	movf	saveDataToFlash@addr1,w
  2069  0197  00BA               	movwf	??_saveDataToFlash+2
  2070  0198  083A               	movf	??_saveDataToFlash+2,w
  2071  0199  00A9               	movwf	read_write_flash_ram@offset
  2072  019A  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2073  019B  00BB               	movwf	??_saveDataToFlash+3
  2074  019C  083B               	movf	??_saveDataToFlash+3,w
  2075  019D  00AA               	movwf	read_write_flash_ram@mem_ptr
  2076  019E  3000               	movlw	0
  2077  019F  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  2078                           
  2079                           ;functions.c: 1170: IncreaseMemoryAdress();
  2080  01A4  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  2081                           
  2082                           ;functions.c: 1172: value = AnalogValue(5);
  2083  01A9  3005               	movlw	5
  2084  01AA  160A  118A  26A0  120A  118A  	fcall	_AnalogValue
  2085  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  2086  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  2087  01B1  00B8               	movwf	??_saveDataToFlash
  2088  01B2  0838               	movf	??_saveDataToFlash,w
  2089  01B3  00C3               	movwf	saveDataToFlash@value
  2090                           
  2091                           ;functions.c: 1173: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2092  01B4  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2093  01B5  00B8               	movwf	??_saveDataToFlash
  2094  01B6  0838               	movf	??_saveDataToFlash,w
  2095  01B7  00A2               	movwf	ReadMemoryAdress@var2
  2096  01B8  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2097  01B9  00B9               	movwf	??_saveDataToFlash+1
  2098  01BA  0839               	movf	??_saveDataToFlash+1,w
  2099  01BB  00A3               	movwf	ReadMemoryAdress@var1
  2100  01BC  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2101  01BD  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  2102                           
  2103                           ;functions.c: 1174: read_write_flash_ram(
  2104                           ;functions.c: 1175: 0,
  2105                           ;functions.c: 1176: 1,
  2106                           ;functions.c: 1177: addr3,
  2107                           ;functions.c: 1178: addr2,
  2108                           ;functions.c: 1179: addr1,
  2109                           ;functions.c: 1180: &value);
  2110  01C2  3001               	movlw	1
  2111  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  2112  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  2113  01C5  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2114  01C6  3000               	movlw	0
  2115  01C7  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2116  01C8  0846               	movf	saveDataToFlash@addr3,w
  2117  01C9  00B8               	movwf	??_saveDataToFlash
  2118  01CA  0838               	movf	??_saveDataToFlash,w
  2119  01CB  00A7               	movwf	read_write_flash_ram@flash_sector
  2120  01CC  0845               	movf	saveDataToFlash@addr2,w
  2121  01CD  00B9               	movwf	??_saveDataToFlash+1
  2122  01CE  0839               	movf	??_saveDataToFlash+1,w
  2123  01CF  00A8               	movwf	read_write_flash_ram@flash_page
  2124  01D0  0844               	movf	saveDataToFlash@addr1,w
  2125  01D1  00BA               	movwf	??_saveDataToFlash+2
  2126  01D2  083A               	movf	??_saveDataToFlash+2,w
  2127  01D3  00A9               	movwf	read_write_flash_ram@offset
  2128  01D4  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2129  01D5  00BB               	movwf	??_saveDataToFlash+3
  2130  01D6  083B               	movf	??_saveDataToFlash+3,w
  2131  01D7  00AA               	movwf	read_write_flash_ram@mem_ptr
  2132  01D8  3000               	movlw	0
  2133  01D9  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  2134                           
  2135                           ;functions.c: 1181: IncreaseMemoryAdress();
  2136  01DE  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  2137                           
  2138                           ;functions.c: 1183: value = AnalogValue(7);
  2139  01E3  3007               	movlw	7
  2140  01E4  160A  118A  26A0  120A  118A  	fcall	_AnalogValue
  2141  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  2142  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  2143  01EB  00B8               	movwf	??_saveDataToFlash
  2144  01EC  0838               	movf	??_saveDataToFlash,w
  2145  01ED  00C3               	movwf	saveDataToFlash@value
  2146                           
  2147                           ;functions.c: 1184: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2148  01EE  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2149  01EF  00B8               	movwf	??_saveDataToFlash
  2150  01F0  0838               	movf	??_saveDataToFlash,w
  2151  01F1  00A2               	movwf	ReadMemoryAdress@var2
  2152  01F2  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2153  01F3  00B9               	movwf	??_saveDataToFlash+1
  2154  01F4  0839               	movf	??_saveDataToFlash+1,w
  2155  01F5  00A3               	movwf	ReadMemoryAdress@var1
  2156  01F6  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2157  01F7  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  2158                           
  2159                           ;functions.c: 1185: read_write_flash_ram(
  2160                           ;functions.c: 1186: 0,
  2161                           ;functions.c: 1187: 1,
  2162                           ;functions.c: 1188: addr3,
  2163                           ;functions.c: 1189: addr2,
  2164                           ;functions.c: 1190: addr1,
  2165                           ;functions.c: 1191: &value);
  2166  01FC  3001               	movlw	1
  2167  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2168  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2169  01FF  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2170  0200  3000               	movlw	0
  2171  0201  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2172  0202  0846               	movf	saveDataToFlash@addr3,w
  2173  0203  00B8               	movwf	??_saveDataToFlash
  2174  0204  0838               	movf	??_saveDataToFlash,w
  2175  0205  00A7               	movwf	read_write_flash_ram@flash_sector
  2176  0206  0845               	movf	saveDataToFlash@addr2,w
  2177  0207  00B9               	movwf	??_saveDataToFlash+1
  2178  0208  0839               	movf	??_saveDataToFlash+1,w
  2179  0209  00A8               	movwf	read_write_flash_ram@flash_page
  2180  020A  0844               	movf	saveDataToFlash@addr1,w
  2181  020B  00BA               	movwf	??_saveDataToFlash+2
  2182  020C  083A               	movf	??_saveDataToFlash+2,w
  2183  020D  00A9               	movwf	read_write_flash_ram@offset
  2184  020E  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2185  020F  00BB               	movwf	??_saveDataToFlash+3
  2186  0210  083B               	movf	??_saveDataToFlash+3,w
  2187  0211  00AA               	movwf	read_write_flash_ram@mem_ptr
  2188  0212  3000               	movlw	0
  2189  0213  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  2190                           
  2191                           ;functions.c: 1192: IncreaseMemoryAdress();
  2192  0218  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  2193                           
  2194                           ;functions.c: 1195: value = AnalogValue(6);
  2195  021D  3006               	movlw	6
  2196  021E  160A  118A  26A0  120A  118A  	fcall	_AnalogValue
  2197  0223  1283               	bcf	3,5	;RP0=0, select bank0
  2198  0224  1303               	bcf	3,6	;RP1=0, select bank0
  2199  0225  00B8               	movwf	??_saveDataToFlash
  2200  0226  0838               	movf	??_saveDataToFlash,w
  2201  0227  00C3               	movwf	saveDataToFlash@value
  2202                           
  2203                           ;functions.c: 1196: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2204  0228  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2205  0229  00B8               	movwf	??_saveDataToFlash
  2206  022A  0838               	movf	??_saveDataToFlash,w
  2207  022B  00A2               	movwf	ReadMemoryAdress@var2
  2208  022C  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2209  022D  00B9               	movwf	??_saveDataToFlash+1
  2210  022E  0839               	movf	??_saveDataToFlash+1,w
  2211  022F  00A3               	movwf	ReadMemoryAdress@var1
  2212  0230  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2213  0231  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  2214                           
  2215                           ;functions.c: 1197: read_write_flash_ram(
  2216                           ;functions.c: 1198: 0,
  2217                           ;functions.c: 1199: 1,
  2218                           ;functions.c: 1200: addr3,
  2219                           ;functions.c: 1201: addr2,
  2220                           ;functions.c: 1202: addr1,
  2221                           ;functions.c: 1203: &value);
  2222  0236  3001               	movlw	1
  2223  0237  1283               	bcf	3,5	;RP0=0, select bank0
  2224  0238  1303               	bcf	3,6	;RP1=0, select bank0
  2225  0239  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2226  023A  3000               	movlw	0
  2227  023B  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2228  023C  0846               	movf	saveDataToFlash@addr3,w
  2229  023D  00B8               	movwf	??_saveDataToFlash
  2230  023E  0838               	movf	??_saveDataToFlash,w
  2231  023F  00A7               	movwf	read_write_flash_ram@flash_sector
  2232  0240  0845               	movf	saveDataToFlash@addr2,w
  2233  0241  00B9               	movwf	??_saveDataToFlash+1
  2234  0242  0839               	movf	??_saveDataToFlash+1,w
  2235  0243  00A8               	movwf	read_write_flash_ram@flash_page
  2236  0244  0844               	movf	saveDataToFlash@addr1,w
  2237  0245  00BA               	movwf	??_saveDataToFlash+2
  2238  0246  083A               	movf	??_saveDataToFlash+2,w
  2239  0247  00A9               	movwf	read_write_flash_ram@offset
  2240  0248  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2241  0249  00BB               	movwf	??_saveDataToFlash+3
  2242  024A  083B               	movf	??_saveDataToFlash+3,w
  2243  024B  00AA               	movwf	read_write_flash_ram@mem_ptr
  2244  024C  3000               	movlw	0
  2245  024D  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  2246                           
  2247                           ;functions.c: 1204: IncreaseMemoryAdress();
  2248  0252  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  2249                           
  2250                           ;functions.c: 1207: value = AnalogValue(8);
  2251  0257  3008               	movlw	8
  2252  0258  160A  118A  26A0  120A  118A  	fcall	_AnalogValue
  2253  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2254  025E  1303               	bcf	3,6	;RP1=0, select bank0
  2255  025F  00B8               	movwf	??_saveDataToFlash
  2256  0260  0838               	movf	??_saveDataToFlash,w
  2257  0261  00C3               	movwf	saveDataToFlash@value
  2258                           
  2259                           ;functions.c: 1208: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2260  0262  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2261  0263  00B8               	movwf	??_saveDataToFlash
  2262  0264  0838               	movf	??_saveDataToFlash,w
  2263  0265  00A2               	movwf	ReadMemoryAdress@var2
  2264  0266  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2265  0267  00B9               	movwf	??_saveDataToFlash+1
  2266  0268  0839               	movf	??_saveDataToFlash+1,w
  2267  0269  00A3               	movwf	ReadMemoryAdress@var1
  2268  026A  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2269  026B  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  2270                           
  2271                           ;functions.c: 1209: read_write_flash_ram(
  2272                           ;functions.c: 1210: 0,
  2273                           ;functions.c: 1211: 1,
  2274                           ;functions.c: 1212: addr3,
  2275                           ;functions.c: 1213: addr2,
  2276                           ;functions.c: 1214: addr1,
  2277                           ;functions.c: 1215: &value);
  2278  0270  3001               	movlw	1
  2279  0271  1283               	bcf	3,5	;RP0=0, select bank0
  2280  0272  1303               	bcf	3,6	;RP1=0, select bank0
  2281  0273  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2282  0274  3000               	movlw	0
  2283  0275  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2284  0276  0846               	movf	saveDataToFlash@addr3,w
  2285  0277  00B8               	movwf	??_saveDataToFlash
  2286  0278  0838               	movf	??_saveDataToFlash,w
  2287  0279  00A7               	movwf	read_write_flash_ram@flash_sector
  2288  027A  0845               	movf	saveDataToFlash@addr2,w
  2289  027B  00B9               	movwf	??_saveDataToFlash+1
  2290  027C  0839               	movf	??_saveDataToFlash+1,w
  2291  027D  00A8               	movwf	read_write_flash_ram@flash_page
  2292  027E  0844               	movf	saveDataToFlash@addr1,w
  2293  027F  00BA               	movwf	??_saveDataToFlash+2
  2294  0280  083A               	movf	??_saveDataToFlash+2,w
  2295  0281  00A9               	movwf	read_write_flash_ram@offset
  2296  0282  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2297  0283  00BB               	movwf	??_saveDataToFlash+3
  2298  0284  083B               	movf	??_saveDataToFlash+3,w
  2299  0285  00AA               	movwf	read_write_flash_ram@mem_ptr
  2300  0286  3000               	movlw	0
  2301  0287  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  2302                           
  2303                           ;functions.c: 1216: IncreaseMemoryAdress();
  2304  028C  120A  158A  261B   	fcall	_IncreaseMemoryAdress
  2305  028F  0008               	return
  2306  0290                     __end_of_saveDataToFlash:	
  2307                           
  2308                           	psect	text2
  2309  05BD                     __ptext2:	
  2310 ;; *************** function _ReadClock *****************
  2311 ;; Defined at:
  2312 ;;		line 49 in file "MCP79510.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;  seconds         1    wreg     PTR unsigned char 
  2315 ;;		 -> saveDataToFlash@seconds(1), 
  2316 ;;  minutes         1    4[BANK0 ] PTR unsigned char 
  2317 ;;		 -> saveDataToFlash@minutes(1), 
  2318 ;;  hour            1    5[BANK0 ] PTR unsigned char 
  2319 ;;		 -> saveDataToFlash@hours(1), 
  2320 ;;  date            1    6[BANK0 ] PTR unsigned char 
  2321 ;;		 -> saveDataToFlash@date(1), 
  2322 ;;  month           1    7[BANK0 ] PTR unsigned char 
  2323 ;;		 -> saveDataToFlash@month(1), 
  2324 ;;  year            1    8[BANK0 ] PTR unsigned char 
  2325 ;;		 -> saveDataToFlash@year(1), 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  seconds         1   17[BANK0 ] PTR unsigned char 
  2328 ;;		 -> saveDataToFlash@seconds(1), 
  2329 ;;  date1           1   23[BANK0 ] unsigned char 
  2330 ;;  year1           1   22[BANK0 ] unsigned char 
  2331 ;;  month1          1   21[BANK0 ] unsigned char 
  2332 ;;  hour1           1   20[BANK0 ] unsigned char 
  2333 ;;  min1            1   19[BANK0 ] unsigned char 
  2334 ;;  sec1            1   18[BANK0 ] unsigned char 
  2335 ;;  year10          1   16[BANK0 ] unsigned char 
  2336 ;;  month10         1   15[BANK0 ] unsigned char 
  2337 ;;  date10          1   14[BANK0 ] unsigned char 
  2338 ;;  hour10          1   13[BANK0 ] unsigned char 
  2339 ;;  min10           1   12[BANK0 ] unsigned char 
  2340 ;;  sec10           1   11[BANK0 ] unsigned char 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      void 
  2343 ;; Registers used:
  2344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2350 ;;      Params:         0       5       0       0       0
  2351 ;;      Locals:         0      13       0       0       0
  2352 ;;      Temps:          0       2       0       0       0
  2353 ;;      Totals:         0      20       0       0       0
  2354 ;;Total ram usage:       20 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    4
  2357 ;; This function calls:
  2358 ;;		_ReadSPI
  2359 ;;		_WriteSPI
  2360 ;;		___bmul
  2361 ;; This function is called by:
  2362 ;;		_saveDataToFlash
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           
  2367                           ;psect for function _ReadClock
  2368  05BD                     _ReadClock:	
  2369                           
  2370                           ;incstack = 0
  2371                           ; Regs used in _ReadClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2372                           ;ReadClock@seconds stored from wreg
  2373  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  2374  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  2375  05BF  00B1               	movwf	ReadClock@seconds
  2376                           
  2377                           ;MCP79510.c: 51: unsigned char sec10, min10, hour10, date10, month10, year10, sec1, min1
      +                          , hour1, date1, month1, year1;
  2378                           ;MCP79510.c: 53: RD4 = 0;
  2379  05C0  1208               	bcf	8,4	;volatile
  2380                           
  2381                           ;MCP79510.c: 55: WriteSPI(0x13);
  2382  05C1  3013               	movlw	19
  2383  05C2  160A  118A  2504  120A  118A  	fcall	_WriteSPI
  2384                           
  2385                           ;MCP79510.c: 56: WriteSPI(0x01);
  2386  05C7  3001               	movlw	1
  2387  05C8  160A  118A  2504  120A  118A  	fcall	_WriteSPI
  2388                           
  2389                           ;MCP79510.c: 58: sec1 = ReadSPI() & 0x7F;
  2390  05CD  160A  118A  24C9  120A  118A  	fcall	_ReadSPI
  2391  05D2  397F               	andlw	127
  2392  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  2393  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  2394  05D5  00A9               	movwf	??_ReadClock
  2395  05D6  0829               	movf	??_ReadClock,w
  2396  05D7  00B2               	movwf	ReadClock@sec1
  2397                           
  2398                           ;MCP79510.c: 59: min1 = ReadSPI() & 0x7F;
  2399  05D8  160A  118A  24C9  120A  118A  	fcall	_ReadSPI
  2400  05DD  397F               	andlw	127
  2401  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  2402  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  2403  05E0  00A9               	movwf	??_ReadClock
  2404  05E1  0829               	movf	??_ReadClock,w
  2405  05E2  00B3               	movwf	ReadClock@min1
  2406                           
  2407                           ;MCP79510.c: 60: hour1 = ReadSPI() & 0x3F;
  2408  05E3  160A  118A  24C9  120A  118A  	fcall	_ReadSPI
  2409  05E8  393F               	andlw	63
  2410  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  2411  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  2412  05EB  00A9               	movwf	??_ReadClock
  2413  05EC  0829               	movf	??_ReadClock,w
  2414  05ED  00B4               	movwf	ReadClock@hour1
  2415                           
  2416                           ;MCP79510.c: 61: date1 = ReadSPI();
  2417  05EE  160A  118A  24C9  120A  118A  	fcall	_ReadSPI
  2418  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  2419  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  2420  05F5  00A9               	movwf	??_ReadClock
  2421  05F6  0829               	movf	??_ReadClock,w
  2422  05F7  00B7               	movwf	ReadClock@date1
  2423                           
  2424                           ;MCP79510.c: 62: date1 = ReadSPI() & 0x3F;
  2425  05F8  160A  118A  24C9  120A  118A  	fcall	_ReadSPI
  2426  05FD  393F               	andlw	63
  2427  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  2428  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  2429  0600  00A9               	movwf	??_ReadClock
  2430  0601  0829               	movf	??_ReadClock,w
  2431  0602  00B7               	movwf	ReadClock@date1
  2432                           
  2433                           ;MCP79510.c: 63: month1 = ReadSPI() & 0x1F;
  2434  0603  160A  118A  24C9  120A  118A  	fcall	_ReadSPI
  2435  0608  391F               	andlw	31
  2436  0609  1283               	bcf	3,5	;RP0=0, select bank0
  2437  060A  1303               	bcf	3,6	;RP1=0, select bank0
  2438  060B  00A9               	movwf	??_ReadClock
  2439  060C  0829               	movf	??_ReadClock,w
  2440  060D  00B5               	movwf	ReadClock@month1
  2441                           
  2442                           ;MCP79510.c: 64: year1 = ReadSPI();
  2443  060E  160A  118A  24C9  120A  118A  	fcall	_ReadSPI
  2444  0613  1283               	bcf	3,5	;RP0=0, select bank0
  2445  0614  1303               	bcf	3,6	;RP1=0, select bank0
  2446  0615  00A9               	movwf	??_ReadClock
  2447  0616  0829               	movf	??_ReadClock,w
  2448  0617  00B6               	movwf	ReadClock@year1
  2449                           
  2450                           ;MCP79510.c: 66: RD4 = 1;
  2451  0618  1608               	bsf	8,4	;volatile
  2452                           
  2453                           ;MCP79510.c: 69: sec10 = (sec1 & 0x70) >> 4;
  2454  0619  0832               	movf	ReadClock@sec1,w
  2455  061A  00A9               	movwf	??_ReadClock
  2456  061B  3004               	movlw	4
  2457  061C                     u2235:	
  2458  061C  1003               	clrc
  2459  061D  0CA9               	rrf	??_ReadClock,f
  2460  061E  3EFF               	addlw	-1
  2461  061F  1D03               	skipz
  2462  0620  2E1C               	goto	u2235
  2463  0621  0829               	movf	??_ReadClock,w
  2464  0622  3907               	andlw	7
  2465  0623  00AA               	movwf	??_ReadClock+1
  2466  0624  082A               	movf	??_ReadClock+1,w
  2467  0625  00AB               	movwf	ReadClock@sec10
  2468                           
  2469                           ;MCP79510.c: 70: sec1 = sec1 & 0x0F;
  2470  0626  0832               	movf	ReadClock@sec1,w
  2471  0627  390F               	andlw	15
  2472  0628  00A9               	movwf	??_ReadClock
  2473  0629  0829               	movf	??_ReadClock,w
  2474  062A  00B2               	movwf	ReadClock@sec1
  2475                           
  2476                           ;MCP79510.c: 71: *seconds = sec1 + sec10 * 10;
  2477  062B  300A               	movlw	10
  2478  062C  00A9               	movwf	??_ReadClock
  2479  062D  0829               	movf	??_ReadClock,w
  2480  062E  00A0               	movwf	___bmul@multiplicand
  2481  062F  082B               	movf	ReadClock@sec10,w
  2482  0630  160A  118A  2546  120A  118A  	fcall	___bmul
  2483  0635  1283               	bcf	3,5	;RP0=0, select bank0
  2484  0636  1303               	bcf	3,6	;RP1=0, select bank0
  2485  0637  0732               	addwf	ReadClock@sec1,w
  2486  0638  00AA               	movwf	??_ReadClock+1
  2487  0639  0831               	movf	ReadClock@seconds,w
  2488  063A  0084               	movwf	4
  2489  063B  082A               	movf	??_ReadClock+1,w
  2490  063C  1383               	bcf	3,7	;select IRP bank0
  2491  063D  0080               	movwf	0
  2492                           
  2493                           ;MCP79510.c: 73: min10 = (min1 & 0x70) >> 4;
  2494  063E  0833               	movf	ReadClock@min1,w
  2495  063F  00A9               	movwf	??_ReadClock
  2496  0640  3004               	movlw	4
  2497  0641                     u2245:	
  2498  0641  1003               	clrc
  2499  0642  0CA9               	rrf	??_ReadClock,f
  2500  0643  3EFF               	addlw	-1
  2501  0644  1D03               	skipz
  2502  0645  2E41               	goto	u2245
  2503  0646  0829               	movf	??_ReadClock,w
  2504  0647  3907               	andlw	7
  2505  0648  00AA               	movwf	??_ReadClock+1
  2506  0649  082A               	movf	??_ReadClock+1,w
  2507  064A  00AC               	movwf	ReadClock@min10
  2508                           
  2509                           ;MCP79510.c: 74: min1 = min1 & 0x0F;
  2510  064B  0833               	movf	ReadClock@min1,w
  2511  064C  390F               	andlw	15
  2512  064D  00A9               	movwf	??_ReadClock
  2513  064E  0829               	movf	??_ReadClock,w
  2514  064F  00B3               	movwf	ReadClock@min1
  2515                           
  2516                           ;MCP79510.c: 75: *minutes = min1 + min10 * 10;
  2517  0650  300A               	movlw	10
  2518  0651  00A9               	movwf	??_ReadClock
  2519  0652  0829               	movf	??_ReadClock,w
  2520  0653  00A0               	movwf	___bmul@multiplicand
  2521  0654  082C               	movf	ReadClock@min10,w
  2522  0655  160A  118A  2546  120A  118A  	fcall	___bmul
  2523  065A  1283               	bcf	3,5	;RP0=0, select bank0
  2524  065B  1303               	bcf	3,6	;RP1=0, select bank0
  2525  065C  0733               	addwf	ReadClock@min1,w
  2526  065D  00AA               	movwf	??_ReadClock+1
  2527  065E  0824               	movf	ReadClock@minutes,w
  2528  065F  0084               	movwf	4
  2529  0660  082A               	movf	??_ReadClock+1,w
  2530  0661  1383               	bcf	3,7	;select IRP bank0
  2531  0662  0080               	movwf	0
  2532                           
  2533                           ;MCP79510.c: 77: hour10 = (hour1 & 0x30) >> 4;
  2534  0663  0834               	movf	ReadClock@hour1,w
  2535  0664  00A9               	movwf	??_ReadClock
  2536  0665  3004               	movlw	4
  2537  0666                     u2255:	
  2538  0666  1003               	clrc
  2539  0667  0CA9               	rrf	??_ReadClock,f
  2540  0668  3EFF               	addlw	-1
  2541  0669  1D03               	skipz
  2542  066A  2E66               	goto	u2255
  2543  066B  0829               	movf	??_ReadClock,w
  2544  066C  3903               	andlw	3
  2545  066D  00AA               	movwf	??_ReadClock+1
  2546  066E  082A               	movf	??_ReadClock+1,w
  2547  066F  00AD               	movwf	ReadClock@hour10
  2548                           
  2549                           ;MCP79510.c: 78: hour1 = hour1 & 0x0F;
  2550  0670  0834               	movf	ReadClock@hour1,w
  2551  0671  390F               	andlw	15
  2552  0672  00A9               	movwf	??_ReadClock
  2553  0673  0829               	movf	??_ReadClock,w
  2554  0674  00B4               	movwf	ReadClock@hour1
  2555                           
  2556                           ;MCP79510.c: 79: *hour = hour1 + hour10 * 10;
  2557  0675  300A               	movlw	10
  2558  0676  00A9               	movwf	??_ReadClock
  2559  0677  0829               	movf	??_ReadClock,w
  2560  0678  00A0               	movwf	___bmul@multiplicand
  2561  0679  082D               	movf	ReadClock@hour10,w
  2562  067A  160A  118A  2546  120A  118A  	fcall	___bmul
  2563  067F  1283               	bcf	3,5	;RP0=0, select bank0
  2564  0680  1303               	bcf	3,6	;RP1=0, select bank0
  2565  0681  0734               	addwf	ReadClock@hour1,w
  2566  0682  00AA               	movwf	??_ReadClock+1
  2567  0683  0825               	movf	ReadClock@hour,w
  2568  0684  0084               	movwf	4
  2569  0685  082A               	movf	??_ReadClock+1,w
  2570  0686  1383               	bcf	3,7	;select IRP bank0
  2571  0687  0080               	movwf	0
  2572                           
  2573                           ;MCP79510.c: 81: date10 = (date1 & 0x30) >> 4;
  2574  0688  0837               	movf	ReadClock@date1,w
  2575  0689  00A9               	movwf	??_ReadClock
  2576  068A  3004               	movlw	4
  2577  068B                     u2265:	
  2578  068B  1003               	clrc
  2579  068C  0CA9               	rrf	??_ReadClock,f
  2580  068D  3EFF               	addlw	-1
  2581  068E  1D03               	skipz
  2582  068F  2E8B               	goto	u2265
  2583  0690  0829               	movf	??_ReadClock,w
  2584  0691  3903               	andlw	3
  2585  0692  00AA               	movwf	??_ReadClock+1
  2586  0693  082A               	movf	??_ReadClock+1,w
  2587  0694  00AE               	movwf	ReadClock@date10
  2588                           
  2589                           ;MCP79510.c: 82: date1 = date1 & 0x0F;
  2590  0695  0837               	movf	ReadClock@date1,w
  2591  0696  390F               	andlw	15
  2592  0697  00A9               	movwf	??_ReadClock
  2593  0698  0829               	movf	??_ReadClock,w
  2594  0699  00B7               	movwf	ReadClock@date1
  2595                           
  2596                           ;MCP79510.c: 83: *date = date1 + date10 * 10;
  2597  069A  300A               	movlw	10
  2598  069B  00A9               	movwf	??_ReadClock
  2599  069C  0829               	movf	??_ReadClock,w
  2600  069D  00A0               	movwf	___bmul@multiplicand
  2601  069E  082E               	movf	ReadClock@date10,w
  2602  069F  160A  118A  2546  120A  118A  	fcall	___bmul
  2603  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  2604  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  2605  06A6  0737               	addwf	ReadClock@date1,w
  2606  06A7  00AA               	movwf	??_ReadClock+1
  2607  06A8  0826               	movf	ReadClock@date,w
  2608  06A9  0084               	movwf	4
  2609  06AA  082A               	movf	??_ReadClock+1,w
  2610  06AB  1383               	bcf	3,7	;select IRP bank0
  2611  06AC  0080               	movwf	0
  2612                           
  2613                           ;MCP79510.c: 85: month10 = (month1 & 0x10) >> 4;
  2614  06AD  0835               	movf	ReadClock@month1,w
  2615  06AE  00A9               	movwf	??_ReadClock
  2616  06AF  3004               	movlw	4
  2617  06B0                     u2275:	
  2618  06B0  1003               	clrc
  2619  06B1  0CA9               	rrf	??_ReadClock,f
  2620  06B2  3EFF               	addlw	-1
  2621  06B3  1D03               	skipz
  2622  06B4  2EB0               	goto	u2275
  2623  06B5  0829               	movf	??_ReadClock,w
  2624  06B6  3901               	andlw	1
  2625  06B7  00AA               	movwf	??_ReadClock+1
  2626  06B8  082A               	movf	??_ReadClock+1,w
  2627  06B9  00AF               	movwf	ReadClock@month10
  2628                           
  2629                           ;MCP79510.c: 86: month1 = month1 & 0x0F;
  2630  06BA  0835               	movf	ReadClock@month1,w
  2631  06BB  390F               	andlw	15
  2632  06BC  00A9               	movwf	??_ReadClock
  2633  06BD  0829               	movf	??_ReadClock,w
  2634  06BE  00B5               	movwf	ReadClock@month1
  2635                           
  2636                           ;MCP79510.c: 87: *month = month1 + month10 * 10;
  2637  06BF  300A               	movlw	10
  2638  06C0  00A9               	movwf	??_ReadClock
  2639  06C1  0829               	movf	??_ReadClock,w
  2640  06C2  00A0               	movwf	___bmul@multiplicand
  2641  06C3  082F               	movf	ReadClock@month10,w
  2642  06C4  160A  118A  2546  120A  118A  	fcall	___bmul
  2643  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  2644  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  2645  06CB  0735               	addwf	ReadClock@month1,w
  2646  06CC  00AA               	movwf	??_ReadClock+1
  2647  06CD  0827               	movf	ReadClock@month,w
  2648  06CE  0084               	movwf	4
  2649  06CF  082A               	movf	??_ReadClock+1,w
  2650  06D0  1383               	bcf	3,7	;select IRP bank0
  2651  06D1  0080               	movwf	0
  2652                           
  2653                           ;MCP79510.c: 89: year10 = (year1 & 0xF0) >> 4;
  2654  06D2  0836               	movf	ReadClock@year1,w
  2655  06D3  00A9               	movwf	??_ReadClock
  2656  06D4  3004               	movlw	4
  2657  06D5                     u2285:	
  2658  06D5  1003               	clrc
  2659  06D6  0CA9               	rrf	??_ReadClock,f
  2660  06D7  3EFF               	addlw	-1
  2661  06D8  1D03               	skipz
  2662  06D9  2ED5               	goto	u2285
  2663  06DA  0829               	movf	??_ReadClock,w
  2664  06DB  390F               	andlw	15
  2665  06DC  00AA               	movwf	??_ReadClock+1
  2666  06DD  082A               	movf	??_ReadClock+1,w
  2667  06DE  00B0               	movwf	ReadClock@year10
  2668                           
  2669                           ;MCP79510.c: 90: year1 = year1 & 0x0F;
  2670  06DF  0836               	movf	ReadClock@year1,w
  2671  06E0  390F               	andlw	15
  2672  06E1  00A9               	movwf	??_ReadClock
  2673  06E2  0829               	movf	??_ReadClock,w
  2674  06E3  00B6               	movwf	ReadClock@year1
  2675                           
  2676                           ;MCP79510.c: 91: *year = year1 + year10 * 10;
  2677  06E4  300A               	movlw	10
  2678  06E5  00A9               	movwf	??_ReadClock
  2679  06E6  0829               	movf	??_ReadClock,w
  2680  06E7  00A0               	movwf	___bmul@multiplicand
  2681  06E8  0830               	movf	ReadClock@year10,w
  2682  06E9  160A  118A  2546   	fcall	___bmul
  2683  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  2684  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  2685  06EE  0736               	addwf	ReadClock@year1,w
  2686  06EF  00AA               	movwf	??_ReadClock+1
  2687  06F0  0828               	movf	ReadClock@year,w
  2688  06F1  0084               	movwf	4
  2689  06F2  082A               	movf	??_ReadClock+1,w
  2690  06F3  1383               	bcf	3,7	;select IRP bank0
  2691  06F4  0080               	movwf	0
  2692  06F5  0008               	return
  2693  06F6                     __end_of_ReadClock:	
  2694                           
  2695                           	psect	text3
  2696  1546                     __ptext3:	
  2697 ;; *************** function ___bmul *****************
  2698 ;; Defined at:
  2699 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;  multiplier      1    wreg     unsigned char 
  2702 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2705 ;;  product         1    2[BANK0 ] unsigned char 
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  1    wreg      unsigned char 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2, status,0
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2715 ;;      Params:         0       1       0       0       0
  2716 ;;      Locals:         0       2       0       0       0
  2717 ;;      Temps:          0       1       0       0       0
  2718 ;;      Totals:         0       4       0       0       0
  2719 ;;Total ram usage:        4 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    2
  2722 ;; This function calls:
  2723 ;;		Nothing
  2724 ;; This function is called by:
  2725 ;;		_ReadClock
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           
  2730                           ;psect for function ___bmul
  2731  1546                     ___bmul:	
  2732                           
  2733                           ;incstack = 0
  2734                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2735                           ;___bmul@multiplier stored from wreg
  2736  1546  1283               	bcf	3,5	;RP0=0, select bank0
  2737  1547  1303               	bcf	3,6	;RP1=0, select bank0
  2738  1548  00A3               	movwf	___bmul@multiplier
  2739  1549  01A2               	clrf	___bmul@product
  2740  154A                     l2755:	
  2741  154A  1C23               	btfss	___bmul@multiplier,0
  2742  154B  2D50               	goto	l2759
  2743  154C  0820               	movf	___bmul@multiplicand,w
  2744  154D  00A1               	movwf	??___bmul
  2745  154E  0821               	movf	??___bmul,w
  2746  154F  07A2               	addwf	___bmul@product,f
  2747  1550                     l2759:	
  2748  1550  1003               	clrc
  2749  1551  0DA0               	rlf	___bmul@multiplicand,f
  2750  1552  1003               	clrc
  2751  1553  0CA3               	rrf	___bmul@multiplier,f
  2752  1554  0823               	movf	___bmul@multiplier,w
  2753  1555  1D03               	btfss	3,2
  2754  1556  2D4A               	goto	l2755
  2755  1557  0822               	movf	___bmul@product,w
  2756  1558  0008               	return
  2757  1559                     __end_of___bmul:	
  2758                           
  2759                           	psect	text4
  2760  0E1B                     __ptext4:	
  2761 ;; *************** function _IncreaseMemoryAdress *****************
  2762 ;; Defined at:
  2763 ;;		line 1038 in file "functions.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;  address         4   18[BANK0 ] unsigned long 
  2768 ;;  addr3           1   17[BANK0 ] unsigned char 
  2769 ;;  addr2           1   16[BANK0 ] unsigned char 
  2770 ;;  addr1           1   15[BANK0 ] unsigned char 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2780 ;;      Params:         0       0       0       0       0
  2781 ;;      Locals:         0       7       0       0       0
  2782 ;;      Temps:          0       8       0       0       0
  2783 ;;      Totals:         0      15       0       0       0
  2784 ;;Total ram usage:       15 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    4
  2787 ;; This function calls:
  2788 ;;		_ReadMemoryAdress
  2789 ;;		_WriteMemoryAdress
  2790 ;; This function is called by:
  2791 ;;		_saveDataToFlash
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           
  2796                           ;psect for function _IncreaseMemoryAdress
  2797  0E1B                     _IncreaseMemoryAdress:	
  2798                           
  2799                           ;functions.c: 1040: unsigned char addr1, addr2, addr3;
  2800                           ;functions.c: 1041: unsigned long address = 0;
  2801                           
  2802                           ;incstack = 0
  2803                           ; Regs used in _IncreaseMemoryAdress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2804  0E1B  3000               	movlw	0
  2805  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  2806  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  2807  0E1E  00B5               	movwf	IncreaseMemoryAdress@address+3
  2808  0E1F  3000               	movlw	0
  2809  0E20  00B4               	movwf	IncreaseMemoryAdress@address+2
  2810  0E21  3000               	movlw	0
  2811  0E22  00B3               	movwf	IncreaseMemoryAdress@address+1
  2812  0E23  3000               	movlw	0
  2813  0E24  00B2               	movwf	IncreaseMemoryAdress@address
  2814                           
  2815                           ;functions.c: 1043: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2816  0E25  3030               	movlw	(low (IncreaseMemoryAdress@addr2| 0))& (0+255)
  2817  0E26  00A7               	movwf	??_IncreaseMemoryAdress
  2818  0E27  0827               	movf	??_IncreaseMemoryAdress,w
  2819  0E28  00A2               	movwf	ReadMemoryAdress@var2
  2820  0E29  302F               	movlw	(low (IncreaseMemoryAdress@addr1| 0))& (0+255)
  2821  0E2A  00A8               	movwf	??_IncreaseMemoryAdress+1
  2822  0E2B  0828               	movf	??_IncreaseMemoryAdress+1,w
  2823  0E2C  00A3               	movwf	ReadMemoryAdress@var1
  2824  0E2D  3031               	movlw	(low (IncreaseMemoryAdress@addr3| 0))& (0+255)
  2825  0E2E  160A  118A  26CB  120A  158A  	fcall	_ReadMemoryAdress
  2826                           
  2827                           ;functions.c: 1044: address = addr3;
  2828  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  2829  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  2830  0E35  0831               	movf	IncreaseMemoryAdress@addr3,w
  2831  0E36  00A7               	movwf	??_IncreaseMemoryAdress
  2832  0E37  01A8               	clrf	??_IncreaseMemoryAdress+1
  2833  0E38  01A9               	clrf	??_IncreaseMemoryAdress+2
  2834  0E39  01AA               	clrf	??_IncreaseMemoryAdress+3
  2835  0E3A  082A               	movf	??_IncreaseMemoryAdress+3,w
  2836  0E3B  00B5               	movwf	IncreaseMemoryAdress@address+3
  2837  0E3C  0829               	movf	??_IncreaseMemoryAdress+2,w
  2838  0E3D  00B4               	movwf	IncreaseMemoryAdress@address+2
  2839  0E3E  0828               	movf	??_IncreaseMemoryAdress+1,w
  2840  0E3F  00B3               	movwf	IncreaseMemoryAdress@address+1
  2841  0E40  0827               	movf	??_IncreaseMemoryAdress,w
  2842  0E41  00B2               	movwf	IncreaseMemoryAdress@address
  2843                           
  2844                           ;functions.c: 1045: address = (address << 8) + addr2;
  2845  0E42  0830               	movf	IncreaseMemoryAdress@addr2,w
  2846  0E43  00A7               	movwf	??_IncreaseMemoryAdress
  2847  0E44  01A8               	clrf	??_IncreaseMemoryAdress+1
  2848  0E45  01A9               	clrf	??_IncreaseMemoryAdress+2
  2849  0E46  01AA               	clrf	??_IncreaseMemoryAdress+3
  2850  0E47  0832               	movf	IncreaseMemoryAdress@address,w
  2851  0E48  00AB               	movwf	??_IncreaseMemoryAdress+4
  2852  0E49  0833               	movf	IncreaseMemoryAdress@address+1,w
  2853  0E4A  00AC               	movwf	??_IncreaseMemoryAdress+5
  2854  0E4B  0834               	movf	IncreaseMemoryAdress@address+2,w
  2855  0E4C  00AD               	movwf	??_IncreaseMemoryAdress+6
  2856  0E4D  0835               	movf	IncreaseMemoryAdress@address+3,w
  2857  0E4E  00AE               	movwf	??_IncreaseMemoryAdress+7
  2858  0E4F  3008               	movlw	8
  2859  0E50                     u2165:	
  2860  0E50  1003               	clrc
  2861  0E51  0DAB               	rlf	??_IncreaseMemoryAdress+4,f
  2862  0E52  0DAC               	rlf	??_IncreaseMemoryAdress+5,f
  2863  0E53  0DAD               	rlf	??_IncreaseMemoryAdress+6,f
  2864  0E54  0DAE               	rlf	??_IncreaseMemoryAdress+7,f
  2865  0E55  3EFF               	addlw	-1
  2866  0E56  1D03               	skipz
  2867  0E57  2E50               	goto	u2165
  2868  0E58  082B               	movf	??_IncreaseMemoryAdress+4,w
  2869  0E59  07A7               	addwf	??_IncreaseMemoryAdress,f
  2870  0E5A  082C               	movf	??_IncreaseMemoryAdress+5,w
  2871  0E5B  1803               	skipnc
  2872  0E5C  0F2C               	incfsz	??_IncreaseMemoryAdress+5,w
  2873  0E5D  2E5F               	goto	u2170
  2874  0E5E  2E60               	goto	u2171
  2875  0E5F                     u2170:	
  2876  0E5F  07A8               	addwf	??_IncreaseMemoryAdress+1,f
  2877  0E60                     u2171:	
  2878  0E60  082D               	movf	??_IncreaseMemoryAdress+6,w
  2879  0E61  1803               	skipnc
  2880  0E62  0F2D               	incfsz	??_IncreaseMemoryAdress+6,w
  2881  0E63  2E65               	goto	u2172
  2882  0E64  2E66               	goto	u2173
  2883  0E65                     u2172:	
  2884  0E65  07A9               	addwf	??_IncreaseMemoryAdress+2,f
  2885  0E66                     u2173:	
  2886  0E66  082E               	movf	??_IncreaseMemoryAdress+7,w
  2887  0E67  1803               	skipnc
  2888  0E68  0A2E               	incf	??_IncreaseMemoryAdress+7,w
  2889  0E69  07AA               	addwf	??_IncreaseMemoryAdress+3,f
  2890  0E6A  082A               	movf	??_IncreaseMemoryAdress+3,w
  2891  0E6B  00B5               	movwf	IncreaseMemoryAdress@address+3
  2892  0E6C  0829               	movf	??_IncreaseMemoryAdress+2,w
  2893  0E6D  00B4               	movwf	IncreaseMemoryAdress@address+2
  2894  0E6E  0828               	movf	??_IncreaseMemoryAdress+1,w
  2895  0E6F  00B3               	movwf	IncreaseMemoryAdress@address+1
  2896  0E70  0827               	movf	??_IncreaseMemoryAdress,w
  2897  0E71  00B2               	movwf	IncreaseMemoryAdress@address
  2898                           
  2899                           ;functions.c: 1046: address = (address << 8) + addr1;
  2900  0E72  082F               	movf	IncreaseMemoryAdress@addr1,w
  2901  0E73  00A7               	movwf	??_IncreaseMemoryAdress
  2902  0E74  01A8               	clrf	??_IncreaseMemoryAdress+1
  2903  0E75  01A9               	clrf	??_IncreaseMemoryAdress+2
  2904  0E76  01AA               	clrf	??_IncreaseMemoryAdress+3
  2905  0E77  0832               	movf	IncreaseMemoryAdress@address,w
  2906  0E78  00AB               	movwf	??_IncreaseMemoryAdress+4
  2907  0E79  0833               	movf	IncreaseMemoryAdress@address+1,w
  2908  0E7A  00AC               	movwf	??_IncreaseMemoryAdress+5
  2909  0E7B  0834               	movf	IncreaseMemoryAdress@address+2,w
  2910  0E7C  00AD               	movwf	??_IncreaseMemoryAdress+6
  2911  0E7D  0835               	movf	IncreaseMemoryAdress@address+3,w
  2912  0E7E  00AE               	movwf	??_IncreaseMemoryAdress+7
  2913  0E7F  3008               	movlw	8
  2914  0E80                     u2185:	
  2915  0E80  1003               	clrc
  2916  0E81  0DAB               	rlf	??_IncreaseMemoryAdress+4,f
  2917  0E82  0DAC               	rlf	??_IncreaseMemoryAdress+5,f
  2918  0E83  0DAD               	rlf	??_IncreaseMemoryAdress+6,f
  2919  0E84  0DAE               	rlf	??_IncreaseMemoryAdress+7,f
  2920  0E85  3EFF               	addlw	-1
  2921  0E86  1D03               	skipz
  2922  0E87  2E80               	goto	u2185
  2923  0E88  082B               	movf	??_IncreaseMemoryAdress+4,w
  2924  0E89  07A7               	addwf	??_IncreaseMemoryAdress,f
  2925  0E8A  082C               	movf	??_IncreaseMemoryAdress+5,w
  2926  0E8B  1803               	skipnc
  2927  0E8C  0F2C               	incfsz	??_IncreaseMemoryAdress+5,w
  2928  0E8D  2E8F               	goto	u2190
  2929  0E8E  2E90               	goto	u2191
  2930  0E8F                     u2190:	
  2931  0E8F  07A8               	addwf	??_IncreaseMemoryAdress+1,f
  2932  0E90                     u2191:	
  2933  0E90  082D               	movf	??_IncreaseMemoryAdress+6,w
  2934  0E91  1803               	skipnc
  2935  0E92  0F2D               	incfsz	??_IncreaseMemoryAdress+6,w
  2936  0E93  2E95               	goto	u2192
  2937  0E94  2E96               	goto	u2193
  2938  0E95                     u2192:	
  2939  0E95  07A9               	addwf	??_IncreaseMemoryAdress+2,f
  2940  0E96                     u2193:	
  2941  0E96  082E               	movf	??_IncreaseMemoryAdress+7,w
  2942  0E97  1803               	skipnc
  2943  0E98  0A2E               	incf	??_IncreaseMemoryAdress+7,w
  2944  0E99  07AA               	addwf	??_IncreaseMemoryAdress+3,f
  2945  0E9A  082A               	movf	??_IncreaseMemoryAdress+3,w
  2946  0E9B  00B5               	movwf	IncreaseMemoryAdress@address+3
  2947  0E9C  0829               	movf	??_IncreaseMemoryAdress+2,w
  2948  0E9D  00B4               	movwf	IncreaseMemoryAdress@address+2
  2949  0E9E  0828               	movf	??_IncreaseMemoryAdress+1,w
  2950  0E9F  00B3               	movwf	IncreaseMemoryAdress@address+1
  2951  0EA0  0827               	movf	??_IncreaseMemoryAdress,w
  2952  0EA1  00B2               	movwf	IncreaseMemoryAdress@address
  2953                           
  2954                           ;functions.c: 1048: if(address++ >= 0x1FFFFF)
  2955  0EA2  0835               	movf	IncreaseMemoryAdress@address+3,w
  2956  0EA3  00AA               	movwf	??_IncreaseMemoryAdress+3
  2957  0EA4  0834               	movf	IncreaseMemoryAdress@address+2,w
  2958  0EA5  00A9               	movwf	??_IncreaseMemoryAdress+2
  2959  0EA6  0833               	movf	IncreaseMemoryAdress@address+1,w
  2960  0EA7  00A8               	movwf	??_IncreaseMemoryAdress+1
  2961  0EA8  0832               	movf	IncreaseMemoryAdress@address,w
  2962  0EA9  00A7               	movwf	??_IncreaseMemoryAdress
  2963  0EAA  3001               	movlw	1
  2964  0EAB  07B2               	addwf	IncreaseMemoryAdress@address,f
  2965  0EAC  3000               	movlw	0
  2966  0EAD  07B3               	addwf	IncreaseMemoryAdress@address+1,f
  2967  0EAE  1803               	skipnc
  2968  0EAF  0AB4               	incf	IncreaseMemoryAdress@address+2,f
  2969  0EB0  07B4               	addwf	IncreaseMemoryAdress@address+2,f
  2970  0EB1  1803               	skipnc
  2971  0EB2  0AB5               	incf	IncreaseMemoryAdress@address+3,f
  2972  0EB3  07B5               	addwf	IncreaseMemoryAdress@address+3,f
  2973  0EB4  082A               	movf	??_IncreaseMemoryAdress+3,w
  2974  0EB5  1D03               	btfss	3,2
  2975  0EB6  2EC5               	goto	l2945
  2976  0EB7  301F               	movlw	31
  2977  0EB8  0229               	subwf	??_IncreaseMemoryAdress+2,w
  2978  0EB9  1D03               	skipz
  2979  0EBA  2EC3               	goto	u2203
  2980  0EBB  30FF               	movlw	255
  2981  0EBC  0228               	subwf	??_IncreaseMemoryAdress+1,w
  2982  0EBD  1D03               	skipz
  2983  0EBE  2EC3               	goto	u2203
  2984  0EBF  30FF               	movlw	255
  2985  0EC0  0227               	subwf	??_IncreaseMemoryAdress,w
  2986  0EC1  1D03               	skipz
  2987  0EC2  2EC3               	goto	u2203
  2988  0EC3                     u2203:	
  2989  0EC3  1C03               	btfss	3,0
  2990  0EC4  2ECD               	goto	l503
  2991  0EC5                     l2945:	
  2992                           
  2993                           ;functions.c: 1049: address = 0x1FFFFF;
  2994  0EC5  3000               	movlw	0
  2995  0EC6  00B5               	movwf	IncreaseMemoryAdress@address+3
  2996  0EC7  301F               	movlw	31
  2997  0EC8  00B4               	movwf	IncreaseMemoryAdress@address+2
  2998  0EC9  30FF               	movlw	255
  2999  0ECA  00B3               	movwf	IncreaseMemoryAdress@address+1
  3000  0ECB  30FF               	movlw	255
  3001  0ECC  00B2               	movwf	IncreaseMemoryAdress@address
  3002  0ECD                     l503:	
  3003                           
  3004                           ;functions.c: 1051: addr1 = address & 0xFF;
  3005  0ECD  0832               	movf	IncreaseMemoryAdress@address,w
  3006  0ECE  00A7               	movwf	??_IncreaseMemoryAdress
  3007  0ECF  0827               	movf	??_IncreaseMemoryAdress,w
  3008  0ED0  00AF               	movwf	IncreaseMemoryAdress@addr1
  3009                           
  3010                           ;functions.c: 1052: addr2 = (address >> 8) & 0xFF;
  3011  0ED1  0832               	movf	IncreaseMemoryAdress@address,w
  3012  0ED2  00A7               	movwf	??_IncreaseMemoryAdress
  3013  0ED3  0833               	movf	IncreaseMemoryAdress@address+1,w
  3014  0ED4  00A8               	movwf	??_IncreaseMemoryAdress+1
  3015  0ED5  0834               	movf	IncreaseMemoryAdress@address+2,w
  3016  0ED6  00A9               	movwf	??_IncreaseMemoryAdress+2
  3017  0ED7  0835               	movf	IncreaseMemoryAdress@address+3,w
  3018  0ED8  00AA               	movwf	??_IncreaseMemoryAdress+3
  3019  0ED9  3008               	movlw	8
  3020  0EDA                     u2215:	
  3021  0EDA  1003               	clrc
  3022  0EDB  0CAA               	rrf	??_IncreaseMemoryAdress+3,f
  3023  0EDC  0CA9               	rrf	??_IncreaseMemoryAdress+2,f
  3024  0EDD  0CA8               	rrf	??_IncreaseMemoryAdress+1,f
  3025  0EDE  0CA7               	rrf	??_IncreaseMemoryAdress,f
  3026  0EDF  3EFF               	addlw	-1
  3027  0EE0  1D03               	skipz
  3028  0EE1  2EDA               	goto	u2215
  3029  0EE2  0827               	movf	??_IncreaseMemoryAdress,w
  3030  0EE3  00AB               	movwf	??_IncreaseMemoryAdress+4
  3031  0EE4  082B               	movf	??_IncreaseMemoryAdress+4,w
  3032  0EE5  00B0               	movwf	IncreaseMemoryAdress@addr2
  3033                           
  3034                           ;functions.c: 1053: addr3 = (address >> 16) & 0xFF;
  3035  0EE6  0832               	movf	IncreaseMemoryAdress@address,w
  3036  0EE7  00A7               	movwf	??_IncreaseMemoryAdress
  3037  0EE8  0833               	movf	IncreaseMemoryAdress@address+1,w
  3038  0EE9  00A8               	movwf	??_IncreaseMemoryAdress+1
  3039  0EEA  0834               	movf	IncreaseMemoryAdress@address+2,w
  3040  0EEB  00A9               	movwf	??_IncreaseMemoryAdress+2
  3041  0EEC  0835               	movf	IncreaseMemoryAdress@address+3,w
  3042  0EED  00AA               	movwf	??_IncreaseMemoryAdress+3
  3043  0EEE  3010               	movlw	16
  3044  0EEF                     u2225:	
  3045  0EEF  1003               	clrc
  3046  0EF0  0CAA               	rrf	??_IncreaseMemoryAdress+3,f
  3047  0EF1  0CA9               	rrf	??_IncreaseMemoryAdress+2,f
  3048  0EF2  0CA8               	rrf	??_IncreaseMemoryAdress+1,f
  3049  0EF3  0CA7               	rrf	??_IncreaseMemoryAdress,f
  3050  0EF4  3EFF               	addlw	-1
  3051  0EF5  1D03               	skipz
  3052  0EF6  2EEF               	goto	u2225
  3053  0EF7  0827               	movf	??_IncreaseMemoryAdress,w
  3054  0EF8  00AB               	movwf	??_IncreaseMemoryAdress+4
  3055  0EF9  082B               	movf	??_IncreaseMemoryAdress+4,w
  3056  0EFA  00B1               	movwf	IncreaseMemoryAdress@addr3
  3057                           
  3058                           ;functions.c: 1055: WriteMemoryAdress(addr3, addr2, addr1);
  3059  0EFB  0830               	movf	IncreaseMemoryAdress@addr2,w
  3060  0EFC  00A7               	movwf	??_IncreaseMemoryAdress
  3061  0EFD  0827               	movf	??_IncreaseMemoryAdress,w
  3062  0EFE  00A3               	movwf	WriteMemoryAdress@var2
  3063  0EFF  082F               	movf	IncreaseMemoryAdress@addr1,w
  3064  0F00  00A8               	movwf	??_IncreaseMemoryAdress+1
  3065  0F01  0828               	movf	??_IncreaseMemoryAdress+1,w
  3066  0F02  00A4               	movwf	WriteMemoryAdress@var1
  3067  0F03  0831               	movf	IncreaseMemoryAdress@addr3,w
  3068  0F04  160A  118A  2655   	fcall	_WriteMemoryAdress
  3069  0F07  0008               	return
  3070  0F08                     __end_of_IncreaseMemoryAdress:	
  3071                           
  3072                           	psect	text5
  3073  1655                     __ptext5:	
  3074 ;; *************** function _WriteMemoryAdress *****************
  3075 ;; Defined at:
  3076 ;;		line 1013 in file "functions.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  var3            1    wreg     unsigned char 
  3079 ;;  var2            1    3[BANK0 ] unsigned char 
  3080 ;;  var1            1    4[BANK0 ] unsigned char 
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;  var3            1    6[BANK0 ] unsigned char 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  1    wreg      void 
  3085 ;; Registers used:
  3086 ;;		wreg, status,2, status,0, pclath, cstack
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3092 ;;      Params:         0       2       0       0       0
  3093 ;;      Locals:         0       1       0       0       0
  3094 ;;      Temps:          0       1       0       0       0
  3095 ;;      Totals:         0       4       0       0       0
  3096 ;;Total ram usage:        4 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; Hardware stack levels required when called:    3
  3099 ;; This function calls:
  3100 ;;		_eeprom_write
  3101 ;; This function is called by:
  3102 ;;		_IncreaseMemoryAdress
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           
  3107                           ;psect for function _WriteMemoryAdress
  3108  1655                     _WriteMemoryAdress:	
  3109                           
  3110                           ;incstack = 0
  3111                           ; Regs used in _WriteMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  3112                           ;WriteMemoryAdress@var3 stored from wreg
  3113  1655  1283               	bcf	3,5	;RP0=0, select bank0
  3114  1656  1303               	bcf	3,6	;RP1=0, select bank0
  3115  1657  00A6               	movwf	WriteMemoryAdress@var3
  3116                           
  3117                           ;functions.c: 1015: eeprom_write(1, var3);
  3118  1658  0826               	movf	WriteMemoryAdress@var3,w
  3119  1659  00A5               	movwf	??_WriteMemoryAdress
  3120  165A  0825               	movf	??_WriteMemoryAdress,w
  3121  165B  00A0               	movwf	eeprom_write@value
  3122  165C  3001               	movlw	1
  3123  165D  160A  118A  274F  160A  118A  	fcall	_eeprom_write
  3124                           
  3125                           ;functions.c: 1016: eeprom_write(2, var2);
  3126  1662  1283               	bcf	3,5	;RP0=0, select bank0
  3127  1663  1303               	bcf	3,6	;RP1=0, select bank0
  3128  1664  0823               	movf	WriteMemoryAdress@var2,w
  3129  1665  00A5               	movwf	??_WriteMemoryAdress
  3130  1666  0825               	movf	??_WriteMemoryAdress,w
  3131  1667  00A0               	movwf	eeprom_write@value
  3132  1668  3002               	movlw	2
  3133  1669  160A  118A  274F  160A  118A  	fcall	_eeprom_write
  3134                           
  3135                           ;functions.c: 1017: eeprom_write(3, var1);
  3136  166E  1283               	bcf	3,5	;RP0=0, select bank0
  3137  166F  1303               	bcf	3,6	;RP1=0, select bank0
  3138  1670  0824               	movf	WriteMemoryAdress@var1,w
  3139  1671  00A5               	movwf	??_WriteMemoryAdress
  3140  1672  0825               	movf	??_WriteMemoryAdress,w
  3141  1673  00A0               	movwf	eeprom_write@value
  3142  1674  3003               	movlw	3
  3143  1675  160A  118A  274F   	fcall	_eeprom_write
  3144  1678  0008               	return
  3145  1679                     __end_of_WriteMemoryAdress:	
  3146                           
  3147                           	psect	text6
  3148  090B                     __ptext6:	
  3149 ;; *************** function _TransiverToReceive *****************
  3150 ;; Defined at:
  3151 ;;		line 16 in file "functions.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;		None
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      void 
  3158 ;; Registers used:
  3159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3165 ;;      Params:         0       0       0       0       0
  3166 ;;      Locals:         0       0       0       0       0
  3167 ;;      Temps:          0       2       0       0       0
  3168 ;;      Totals:         0       2       0       0       0
  3169 ;;Total ram usage:        2 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    7
  3172 ;; This function calls:
  3173 ;;		_FindChannel
  3174 ;;		_RegisterRead
  3175 ;;		_RegisterSet
  3176 ;;		_SetRFMode
  3177 ;;		_timerFunction
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           
  3184                           ;psect for function _TransiverToReceive
  3185  090B                     _TransiverToReceive:	
  3186                           
  3187                           ;functions.c: 18: timerFunction(2, 5);
  3188                           
  3189                           ;incstack = 0
  3190                           ; Regs used in _TransiverToReceive: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3191  090B  3002               	movlw	2
  3192  090C  1283               	bcf	3,5	;RP0=0, select bank0
  3193  090D  1303               	bcf	3,6	;RP1=0, select bank0
  3194  090E  00A0               	movwf	timerFunction@intTimerNumber
  3195  090F  3000               	movlw	0
  3196  0910  00A1               	movwf	timerFunction@intTimerNumber+1
  3197  0911  3005               	movlw	5
  3198  0912  00A2               	movwf	timerFunction@intSetSeconds
  3199  0913  3000               	movlw	0
  3200  0914  00A3               	movwf	timerFunction@intSetSeconds+1
  3201  0915  160A  118A  2522  120A  158A  	fcall	_timerFunction
  3202                           
  3203                           ;functions.c: 22: SetRFMode(0x20);
  3204  091A  3020               	movlw	32
  3205  091B  120A  158A  2238  120A  158A  	fcall	_SetRFMode
  3206                           
  3207                           ;functions.c: 23: _delay((unsigned long)((10)*(4000000/4000.0)));
  3208  0920  300D               	movlw	13
  3209  0921  1283               	bcf	3,5	;RP0=0, select bank0
  3210  0922  1303               	bcf	3,6	;RP1=0, select bank0
  3211  0923  00B6               	movwf	??_TransiverToReceive+1
  3212  0924  30FB               	movlw	251
  3213  0925  00B5               	movwf	??_TransiverToReceive
  3214  0926                     u2817:	
  3215  0926  0BB5               	decfsz	??_TransiverToReceive,f
  3216  0927  2926               	goto	u2817
  3217  0928  0BB6               	decfsz	??_TransiverToReceive+1,f
  3218  0929  2926               	goto	u2817
  3219                           
  3220                           ;functions.c: 24: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  3221  092A  300E               	movlw	14
  3222  092B  160A  118A  25D0  120A  158A  	fcall	_RegisterRead
  3223  0930  3802               	iorlw	2
  3224  0931  1283               	bcf	3,5	;RP0=0, select bank0
  3225  0932  1303               	bcf	3,6	;RP1=0, select bank0
  3226  0933  00B5               	movwf	??_TransiverToReceive
  3227  0934  0835               	movf	??_TransiverToReceive,w
  3228  0935  00A7               	movwf	RegisterSet@value
  3229  0936  300E               	movlw	14
  3230  0937  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  3231                           
  3232                           ;functions.c: 25: SetRFMode(0x40);
  3233  093C  3040               	movlw	64
  3234  093D  120A  158A  2238  120A  158A  	fcall	_SetRFMode
  3235  0942                     l3181:	
  3236                           ;functions.c: 26: while((RegisterRead(0x0E) & 0b00000010) == 0)
  3237                           
  3238  0942  300E               	movlw	14
  3239  0943  160A  118A  25D0  120A  158A  	fcall	_RegisterRead
  3240  0948  3902               	andlw	2
  3241  0949  1D03               	btfss	3,2
  3242  094A  2955               	goto	l3183
  3243                           
  3244                           ;functions.c: 27: {
  3245                           ;functions.c: 28: if(bTimerComplete[2])
  3246  094B  1283               	bcf	3,5	;RP0=0, select bank0
  3247  094C  1303               	bcf	3,6	;RP1=0, select bank0
  3248  094D  0858               	movf	_bTimerComplete+2,w
  3249  094E  1903               	btfsc	3,2
  3250  094F  2942               	goto	l3181
  3251                           
  3252                           ;functions.c: 29: {
  3253                           ;functions.c: 30: FindChannel();
  3254  0950  120A  158A  2708  120A  158A  	fcall	_FindChannel
  3255  0955                     l3183:	
  3256                           ;functions.c: 31: break;
  3257                           
  3258                           
  3259                           ;functions.c: 32: }
  3260                           ;functions.c: 33: }
  3261                           ;functions.c: 35: SetRFMode(0x60);
  3262  0955  3060               	movlw	96
  3263  0956  120A  158A  2238  120A  158A  	fcall	_SetRFMode
  3264                           
  3265                           ;functions.c: 36: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3266  095B  30A5               	movlw	165
  3267  095C  1283               	bcf	3,5	;RP0=0, select bank0
  3268  095D  1303               	bcf	3,6	;RP1=0, select bank0
  3269  095E  00B5               	movwf	??_TransiverToReceive
  3270  095F                     u2827:	
  3271  095F  0BB5               	decfsz	??_TransiverToReceive,f
  3272  0960  295F               	goto	u2827
  3273  0961  2962               	nop2
  3274                           
  3275                           ;functions.c: 37: bTransiverModeReceive = 1;
  3276  0962  1283               	bcf	3,5	;RP0=0, select bank0
  3277  0963  1303               	bcf	3,6	;RP1=0, select bank0
  3278  0964  01EA               	clrf	_bTransiverModeReceive
  3279  0965  0AEA               	incf	_bTransiverModeReceive,f
  3280  0966  0008               	return
  3281  0967                     __end_of_TransiverToReceive:	
  3282                           
  3283                           	psect	text7
  3284  09CB                     __ptext7:	
  3285 ;; *************** function _TransiverReadFIFO *****************
  3286 ;; Defined at:
  3287 ;;		line 42 in file "functions.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;  j               2   32[BANK1 ] int 
  3292 ;;  ReceivedStri   30    0[BANK1 ] unsigned char [30]
  3293 ;;  i               2   30[BANK1 ] int 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3303 ;;      Params:         0       0       0       0       0
  3304 ;;      Locals:         0       0      34       0       0
  3305 ;;      Temps:          0       2       0       0       0
  3306 ;;      Totals:         0       2      34       0       0
  3307 ;;Total ram usage:       36 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:   10
  3310 ;; This function calls:
  3311 ;;		_ReadFIFO
  3312 ;;		_ReceivedPacketHandler
  3313 ;;		_SetRFMode
  3314 ;;		_timerFunction
  3315 ;; This function is called by:
  3316 ;;		_main
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           
  3321                           ;psect for function _TransiverReadFIFO
  3322  09CB                     _TransiverReadFIFO:	
  3323                           
  3324                           ;functions.c: 44: unsigned char ReceivedString[30];
  3325                           ;functions.c: 45: timerFunction(3, 5);
  3326                           
  3327                           ;incstack = 0
  3328 ;; hardware stack exceeded
  3329                           ; Regs used in _TransiverReadFIFO: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3330  09CB  3003               	movlw	3
  3331  09CC  1283               	bcf	3,5	;RP0=0, select bank0
  3332  09CD  1303               	bcf	3,6	;RP1=0, select bank0
  3333  09CE  00A0               	movwf	timerFunction@intTimerNumber
  3334  09CF  3000               	movlw	0
  3335  09D0  00A1               	movwf	timerFunction@intTimerNumber+1
  3336  09D1  3005               	movlw	5
  3337  09D2  00A2               	movwf	timerFunction@intSetSeconds
  3338  09D3  3000               	movlw	0
  3339  09D4  00A3               	movwf	timerFunction@intSetSeconds+1
  3340  09D5  160A  118A  2522  120A  158A  	fcall	_timerFunction
  3341                           
  3342                           ;functions.c: 47: SetRFMode(0x20);
  3343  09DA  3020               	movlw	32
  3344  09DB  120A  158A  2238  120A  158A  	fcall	_SetRFMode
  3345                           
  3346                           ;functions.c: 48: bTransiverModeReceive = 0;
  3347  09E0  1283               	bcf	3,5	;RP0=0, select bank0
  3348  09E1  1303               	bcf	3,6	;RP1=0, select bank0
  3349  09E2  01EA               	clrf	_bTransiverModeReceive
  3350                           
  3351                           ;functions.c: 49: int i = 0;
  3352  09E3  1683               	bsf	3,5	;RP0=1, select bank1
  3353  09E4  1303               	bcf	3,6	;RP1=0, select bank1
  3354  09E5  01BE               	clrf	TransiverReadFIFO@i^(0+128)
  3355  09E6  01BF               	clrf	(TransiverReadFIFO@i+1)^(0+128)
  3356                           
  3357                           ;functions.c: 50: for (int j = 0; j < 30; ++j)
  3358  09E7  01C0               	clrf	TransiverReadFIFO@j^(0+128)
  3359  09E8  01C1               	clrf	(TransiverReadFIFO@j+1)^(0+128)
  3360  09E9                     L1:	
  3361  09E9  0841               	movf	(TransiverReadFIFO@j+1)^(0+128),w
  3362  09EA  3A80               	xorlw	128
  3363  09EB  00FF               	movwf	127
  3364  09EC  3080               	movlw	128
  3365  09ED  027F               	subwf	127,w
  3366  09EE  1D03               	skipz
  3367  09EF  29F2               	goto	u2435
  3368  09F0  301E               	movlw	30
  3369  09F1  0240               	subwf	TransiverReadFIFO@j^(0+128),w
  3370  09F2                     u2435:	
  3371  09F2  1803               	btfsc	3,0
  3372  09F3  2A1C               	goto	l3211
  3373                           
  3374                           ;functions.c: 51: {
  3375                           ;functions.c: 52: ReceivedString[j] = 0;
  3376  09F4  1683               	bsf	3,5	;RP0=1, select bank1
  3377  09F5  1303               	bcf	3,6	;RP1=0, select bank1
  3378  09F6  0840               	movf	TransiverReadFIFO@j^(0+128),w
  3379  09F7  3EA0               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3380  09F8  0084               	movwf	4
  3381  09F9  1383               	bcf	3,7	;select IRP bank1
  3382  09FA  0180               	clrf	0
  3383  09FB  3001               	movlw	1
  3384  09FC  07C0               	addwf	TransiverReadFIFO@j^(0+128),f
  3385  09FD  1803               	skipnc
  3386  09FE  0AC1               	incf	(TransiverReadFIFO@j+1)^(0+128),f
  3387  09FF  3000               	movlw	0
  3388  0A00  07C1               	addwf	(TransiverReadFIFO@j+1)^(0+128),f
  3389  0A01  29E9               	goto	L1
  3390  0A02                     l3207:	
  3391                           ;functions.c: 53: }
  3392                           ;functions.c: 54: while((RB3)&&(!bTimerComplete[3]))
  3393                           
  3394                           
  3395                           ;functions.c: 55: {
  3396                           ;functions.c: 56: ReceivedString[i] = ReadFIFO();
  3397  0A02  120A  118A  27F1  120A  158A  	fcall	_ReadFIFO
  3398  0A07  1283               	bcf	3,5	;RP0=0, select bank0
  3399  0A08  1303               	bcf	3,6	;RP1=0, select bank0
  3400  0A09  00D1               	movwf	??_TransiverReadFIFO
  3401  0A0A  1683               	bsf	3,5	;RP0=1, select bank1
  3402  0A0B  1303               	bcf	3,6	;RP1=0, select bank1
  3403  0A0C  083E               	movf	TransiverReadFIFO@i^(0+128),w
  3404  0A0D  3EA0               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3405  0A0E  0084               	movwf	4
  3406  0A0F  1283               	bcf	3,5	;RP0=0, select bank0
  3407  0A10  1303               	bcf	3,6	;RP1=0, select bank0
  3408  0A11  0851               	movf	??_TransiverReadFIFO,w
  3409  0A12  1383               	bcf	3,7	;select IRP bank1
  3410  0A13  0080               	movwf	0
  3411                           
  3412                           ;functions.c: 57: i++;
  3413  0A14  3001               	movlw	1
  3414  0A15  1683               	bsf	3,5	;RP0=1, select bank1
  3415  0A16  1303               	bcf	3,6	;RP1=0, select bank1
  3416  0A17  07BE               	addwf	TransiverReadFIFO@i^(0+128),f
  3417  0A18  1803               	skipnc
  3418  0A19  0ABF               	incf	(TransiverReadFIFO@i+1)^(0+128),f
  3419  0A1A  3000               	movlw	0
  3420  0A1B  07BF               	addwf	(TransiverReadFIFO@i+1)^(0+128),f
  3421  0A1C                     l3211:	
  3422  0A1C  1283               	bcf	3,5	;RP0=0, select bank0
  3423  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  3424  0A1E  1D86               	btfss	6,3	;volatile
  3425  0A1F  2A23               	goto	l3215
  3426  0A20  0859               	movf	_bTimerComplete+3,w
  3427  0A21  1903               	btfsc	3,2
  3428  0A22  2A02               	goto	l3207
  3429  0A23                     l3215:	
  3430                           
  3431                           ;functions.c: 58: }
  3432                           ;functions.c: 60: _delay((unsigned long)((10)*(4000000/4000.0)));
  3433  0A23  300D               	movlw	13
  3434  0A24  1283               	bcf	3,5	;RP0=0, select bank0
  3435  0A25  1303               	bcf	3,6	;RP1=0, select bank0
  3436  0A26  00D2               	movwf	??_TransiverReadFIFO+1
  3437  0A27  30FB               	movlw	251
  3438  0A28  00D1               	movwf	??_TransiverReadFIFO
  3439  0A29                     u2837:	
  3440  0A29  0BD1               	decfsz	??_TransiverReadFIFO,f
  3441  0A2A  2A29               	goto	u2837
  3442  0A2B  0BD2               	decfsz	??_TransiverReadFIFO+1,f
  3443  0A2C  2A29               	goto	u2837
  3444                           
  3445                           ;functions.c: 61: SetRFMode(0x00);
  3446  0A2D  3000               	movlw	0
  3447  0A2E  120A  158A  2238  120A  158A  	fcall	_SetRFMode
  3448                           
  3449                           ;functions.c: 63: ReceivedPacketHandler(ReceivedString);
  3450  0A33  30A0               	movlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3451  0A34  120A  118A  2290   	fcall	_ReceivedPacketHandler
  3452  0A37  0008               	return
  3453  0A38                     __end_of_TransiverReadFIFO:	
  3454                           
  3455                           	psect	text8
  3456  0290                     __ptext8:	
  3457 ;; *************** function _ReceivedPacketHandler *****************
  3458 ;; Defined at:
  3459 ;;		line 73 in file "functions.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;  Data            1    wreg     PTR unsigned char 
  3462 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  Data            1   48[BANK0 ] PTR unsigned char 
  3465 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3475 ;;      Params:         0       0       0       0       0
  3476 ;;      Locals:         0       1       0       0       0
  3477 ;;      Temps:          0       1       0       0       0
  3478 ;;      Totals:         0       2       0       0       0
  3479 ;;Total ram usage:        2 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    9
  3482 ;; This function calls:
  3483 ;;		_AnalogValue
  3484 ;;		_DarknessCheck
  3485 ;;		_DelayDs
  3486 ;;		_OperationMode
  3487 ;;		_ResetMemoryAdress
  3488 ;;		_SendMemoryData
  3489 ;;		_TransmittPacket
  3490 ;;		_eeprom_read
  3491 ;;		_eeprom_write
  3492 ;;		_ram_bulk_erase
  3493 ;;		_read_ram_status
  3494 ;;		_strstr
  3495 ;;		_write_ram_status
  3496 ;; This function is called by:
  3497 ;;		_TransiverReadFIFO
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           
  3502                           ;psect for function _ReceivedPacketHandler
  3503  0290                     _ReceivedPacketHandler:	
  3504                           
  3505                           ;incstack = 0
  3506 ;; hardware stack exceeded
  3507                           ; Regs used in _ReceivedPacketHandler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  3508                           ;ReceivedPacketHandler@Data stored from wreg
  3509  0290  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0291  1303               	bcf	3,6	;RP1=0, select bank0
  3511  0292  00D0               	movwf	ReceivedPacketHandler@Data
  3512                           
  3513                           ;functions.c: 77: if((strstr(Data, "N1BLINK")) && (OperationMode() == 6))
  3514  0293  3028               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3515  0294  00CF               	movwf	??_ReceivedPacketHandler
  3516  0295  084F               	movf	??_ReceivedPacketHandler,w
  3517  0296  00AE               	movwf	strstr@s2
  3518  0297  0850               	movf	ReceivedPacketHandler@Data,w
  3519  0298  120A  158A  2077  120A  118A  	fcall	_strstr
  3520  029D  3A00               	xorlw	0
  3521  029E  1903               	skipnz
  3522  029F  2AA8               	goto	l2787
  3523  02A0  160A  118A  24E2  120A  118A  	fcall	_OperationMode
  3524  02A5  3A06               	xorlw	6
  3525  02A6  1903               	btfsc	3,2
  3526  02A7  2ABF               	goto	l2791
  3527  02A8                     l2787:	
  3528                           ;functions.c: 82: }
  3529                           
  3530                           ;functions.c: 81: DelayDs(100);
  3531                           
  3532                           ;functions.c: 80: intBlinkCounter = 0;
  3533                           
  3534                           ;functions.c: 78: {
  3535                           ;functions.c: 79: intBlinkCycle = 1;
  3536                           
  3537                           
  3538                           ;functions.c: 83: else if((strstr(Data, "N2BLINK")) && (OperationMode() == 7))
  3539  02A8  3030               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3540  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  3541  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  3542  02AB  00CF               	movwf	??_ReceivedPacketHandler
  3543  02AC  084F               	movf	??_ReceivedPacketHandler,w
  3544  02AD  00AE               	movwf	strstr@s2
  3545  02AE  0850               	movf	ReceivedPacketHandler@Data,w
  3546  02AF  120A  158A  2077  120A  118A  	fcall	_strstr
  3547  02B4  3A00               	xorlw	0
  3548  02B5  1903               	skipnz
  3549  02B6  2AD0               	goto	l2797
  3550  02B7  160A  118A  24E2  120A  118A  	fcall	_OperationMode
  3551  02BC  3A07               	xorlw	7
  3552  02BD  1D03               	skipz
  3553  02BE  2AD0               	goto	l2797
  3554  02BF                     l2791:	
  3555                           
  3556                           ;functions.c: 84: {
  3557                           ;functions.c: 85: intBlinkCycle = 1;
  3558  02BF  3001               	movlw	1
  3559  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3560  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3561  02C2  00DD               	movwf	_intBlinkCycle
  3562  02C3  3000               	movlw	0
  3563  02C4  00DE               	movwf	_intBlinkCycle+1
  3564                           
  3565                           ;functions.c: 86: intBlinkCounter = 0;
  3566  02C5  01FC               	clrf	_intBlinkCounter
  3567  02C6  01FD               	clrf	_intBlinkCounter+1
  3568                           
  3569                           ;functions.c: 87: DelayDs(100);
  3570  02C7  3064               	movlw	100
  3571  02C8  00A0               	movwf	DelayDs@cnt
  3572  02C9  3000               	movlw	0
  3573  02CA  00A1               	movwf	DelayDs@cnt+1
  3574  02CB  160A  118A  260E  120A  118A  	fcall	_DelayDs
  3575  02D0                     l2797:	
  3576                           
  3577                           ;functions.c: 88: }
  3578                           ;functions.c: 92: if(Data[0] != 44 || Data[3] != 55)
  3579  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3580  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3581  02D2  0850               	movf	ReceivedPacketHandler@Data,w
  3582  02D3  0084               	movwf	4
  3583  02D4  302C               	movlw	44
  3584  02D5  1383               	bcf	3,7	;select IRP bank0
  3585  02D6  0600               	xorwf	0,w
  3586  02D7  1D03               	btfss	3,2
  3587  02D8  0008               	return
  3588  02D9  0850               	movf	ReceivedPacketHandler@Data,w
  3589  02DA  3E03               	addlw	3
  3590  02DB  0084               	movwf	4
  3591  02DC  3037               	movlw	55
  3592  02DD  0600               	xorwf	0,w
  3593  02DE  1D03               	btfss	3,2
  3594  02DF  0008               	return
  3595  02E0  2C4A               	goto	l2895
  3596  02E1                     l314:	
  3597                           ;functions.c: 99: {
  3598                           ;functions.c: 100: case 1:
  3599                           
  3600                           ;functions.c: 98: switch (Data[2])
  3601                           
  3602                           ;functions.c: 96: {
  3603                           ;functions.c: 97: case 1:
  3604                           
  3605                           ;functions.c: 95: switch (Data[1])
  3606                           
  3607                           ;functions.c: 93: return;
  3608                           
  3609                           
  3610                           ;functions.c: 101: RC2 = 1;
  3611  02E1  1507               	bsf	7,2	;volatile
  3612                           
  3613                           ;functions.c: 102: DelayDs(10);
  3614  02E2  300A               	movlw	10
  3615  02E3  00A0               	movwf	DelayDs@cnt
  3616  02E4  3000               	movlw	0
  3617  02E5  00A1               	movwf	DelayDs@cnt+1
  3618  02E6  160A  118A  260E  120A  118A  	fcall	_DelayDs
  3619                           
  3620                           ;functions.c: 103: RC2 = 0;
  3621  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  3622  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  3623  02ED  1107               	bcf	7,2	;volatile
  3624                           
  3625                           ;functions.c: 104: DelayDs(5);
  3626  02EE  3005               	movlw	5
  3627  02EF  00A0               	movwf	DelayDs@cnt
  3628  02F0  3000               	movlw	0
  3629  02F1  00A1               	movwf	DelayDs@cnt+1
  3630  02F2  160A  118A  260E   	fcall	_DelayDs
  3631                           
  3632                           ;functions.c: 105: break;
  3633  02F5  0008               	return
  3634  02F6                     l316:	
  3635                           ;functions.c: 107: case 2:
  3636                           
  3637                           
  3638                           ;functions.c: 108: RC1 = 1;
  3639  02F6  1487               	bsf	7,1	;volatile
  3640                           
  3641                           ;functions.c: 109: DelayDs(10);
  3642  02F7  300A               	movlw	10
  3643  02F8  00A0               	movwf	DelayDs@cnt
  3644  02F9  3000               	movlw	0
  3645  02FA  00A1               	movwf	DelayDs@cnt+1
  3646  02FB  160A  118A  260E  120A  118A  	fcall	_DelayDs
  3647                           
  3648                           ;functions.c: 110: RC1 = 0;
  3649  0300  1283               	bcf	3,5	;RP0=0, select bank0
  3650  0301  1303               	bcf	3,6	;RP1=0, select bank0
  3651  0302  1087               	bcf	7,1	;volatile
  3652                           
  3653                           ;functions.c: 111: DelayDs(5);
  3654  0303  3005               	movlw	5
  3655  0304  00A0               	movwf	DelayDs@cnt
  3656  0305  3000               	movlw	0
  3657  0306  00A1               	movwf	DelayDs@cnt+1
  3658  0307  160A  118A  260E   	fcall	_DelayDs
  3659                           
  3660                           ;functions.c: 112: break;
  3661  030A  0008               	return
  3662  030B                     l317:	
  3663                           ;functions.c: 114: case 3:
  3664                           
  3665                           
  3666                           ;functions.c: 115: RB1 = 0;
  3667  030B  1086               	bcf	6,1	;volatile
  3668                           
  3669                           ;functions.c: 116: DelayDs(10);
  3670  030C  300A               	movlw	10
  3671  030D  00A0               	movwf	DelayDs@cnt
  3672  030E  3000               	movlw	0
  3673  030F  00A1               	movwf	DelayDs@cnt+1
  3674  0310  160A  118A  260E  120A  118A  	fcall	_DelayDs
  3675                           
  3676                           ;functions.c: 117: RB1 = 1;
  3677  0315  1283               	bcf	3,5	;RP0=0, select bank0
  3678  0316  1303               	bcf	3,6	;RP1=0, select bank0
  3679  0317  1486               	bsf	6,1	;volatile
  3680                           
  3681                           ;functions.c: 118: DelayDs(5);
  3682  0318  3005               	movlw	5
  3683  0319  00A0               	movwf	DelayDs@cnt
  3684  031A  3000               	movlw	0
  3685  031B  00A1               	movwf	DelayDs@cnt+1
  3686  031C  160A  118A  260E   	fcall	_DelayDs
  3687                           
  3688                           ;functions.c: 124: }
  3689                           
  3690                           ;functions.c: 122: break;
  3691                           
  3692                           ;functions.c: 121: default:
  3693                           
  3694                           ;functions.c: 119: break;
  3695  031F  0008               	return
  3696  0320                     l2815:	
  3697  0320  1283               	bcf	3,5	;RP0=0, select bank0
  3698  0321  1303               	bcf	3,6	;RP1=0, select bank0
  3699  0322  0850               	movf	ReceivedPacketHandler@Data,w
  3700  0323  3E02               	addlw	2
  3701  0324  0084               	movwf	4
  3702  0325  1383               	bcf	3,7	;select IRP bank0
  3703  0326  0800               	movf	0,w
  3704                           
  3705                           ; Switch size 1, requested type "space"
  3706                           ; Number of cases is 3, Range of values is 1 to 3
  3707                           ; switch strategies available:
  3708                           ; Name         Instructions Cycles
  3709                           ; simple_byte           10     6 (average)
  3710                           ; direct_byte           20    11 (fixed)
  3711                           ; jumptable            263     9 (fixed)
  3712                           ;	Chosen strategy is simple_byte
  3713  0327  3A01               	xorlw	1	; case 1
  3714  0328  1903               	skipnz
  3715  0329  2AE1               	goto	l314
  3716  032A  3A03               	xorlw	3	; case 2
  3717  032B  1903               	skipnz
  3718  032C  2AF6               	goto	l316
  3719  032D  3A01               	xorlw	1	; case 3
  3720  032E  1903               	skipnz
  3721  032F  2B0B               	goto	l317
  3722  0330  2C6C               	goto	l310
  3723                           
  3724                           ;functions.c: 125: break;
  3725  0331  0008               	return
  3726  0332                     l2817:	
  3727                           ;functions.c: 126: case 2:
  3728                           
  3729                           
  3730                           ;functions.c: 127: if(Data[2] == 1 && OperationMode() == 6)
  3731  0332  0850               	movf	ReceivedPacketHandler@Data,w
  3732  0333  3E02               	addlw	2
  3733  0334  0084               	movwf	4
  3734  0335  0300               	decf	0,w
  3735  0336  1D03               	btfss	3,2
  3736  0337  2B51               	goto	l2827
  3737  0338  160A  118A  24E2  120A  118A  	fcall	_OperationMode
  3738  033D  3A06               	xorlw	6
  3739  033E  1D03               	skipz
  3740  033F  2B51               	goto	l2827
  3741                           
  3742                           ;functions.c: 128: {
  3743                           ;functions.c: 129: intBlinkCycle = 1;
  3744  0340  3001               	movlw	1
  3745  0341  1283               	bcf	3,5	;RP0=0, select bank0
  3746  0342  1303               	bcf	3,6	;RP1=0, select bank0
  3747  0343  00DD               	movwf	_intBlinkCycle
  3748  0344  3000               	movlw	0
  3749  0345  00DE               	movwf	_intBlinkCycle+1
  3750                           
  3751                           ;functions.c: 130: intBlinkCounter = 0;
  3752  0346  01FC               	clrf	_intBlinkCounter
  3753  0347  01FD               	clrf	_intBlinkCounter+1
  3754                           
  3755                           ;functions.c: 131: DelayDs(100);
  3756  0348  3064               	movlw	100
  3757  0349  00A0               	movwf	DelayDs@cnt
  3758  034A  3000               	movlw	0
  3759  034B  00A1               	movwf	DelayDs@cnt+1
  3760  034C  160A  118A  260E  120A  118A  	fcall	_DelayDs
  3761  0351                     l2827:	
  3762                           
  3763                           ;functions.c: 132: }
  3764                           ;functions.c: 133: if(Data[2] == 2 && OperationMode() == 7)
  3765  0351  1283               	bcf	3,5	;RP0=0, select bank0
  3766  0352  1303               	bcf	3,6	;RP1=0, select bank0
  3767  0353  0850               	movf	ReceivedPacketHandler@Data,w
  3768  0354  3E02               	addlw	2
  3769  0355  0084               	movwf	4
  3770  0356  3002               	movlw	2
  3771  0357  1383               	bcf	3,7	;select IRP bank0
  3772  0358  0600               	xorwf	0,w
  3773  0359  1D03               	btfss	3,2
  3774  035A  0008               	return
  3775  035B  160A  118A  24E2  120A  118A  	fcall	_OperationMode
  3776  0360  3A07               	xorlw	7
  3777  0361  1D03               	skipz
  3778  0362  0008               	return
  3779                           
  3780                           ;functions.c: 134: {
  3781                           ;functions.c: 135: intBlinkCycle = 1;
  3782  0363  3001               	movlw	1
  3783  0364  1283               	bcf	3,5	;RP0=0, select bank0
  3784  0365  1303               	bcf	3,6	;RP1=0, select bank0
  3785  0366  00DD               	movwf	_intBlinkCycle
  3786  0367  3000               	movlw	0
  3787  0368  00DE               	movwf	_intBlinkCycle+1
  3788                           
  3789                           ;functions.c: 136: intBlinkCounter = 0;
  3790  0369  01FC               	clrf	_intBlinkCounter
  3791  036A  01FD               	clrf	_intBlinkCounter+1
  3792                           
  3793                           ;functions.c: 137: DelayDs(100);
  3794  036B  3064               	movlw	100
  3795  036C  00A0               	movwf	DelayDs@cnt
  3796  036D  3000               	movlw	0
  3797  036E  00A1               	movwf	DelayDs@cnt+1
  3798  036F  160A  118A  260E   	fcall	_DelayDs
  3799                           
  3800                           ;functions.c: 138: }
  3801                           ;functions.c: 139: break;
  3802  0372  0008               	return
  3803  0373                     l2837:	
  3804                           ;functions.c: 141: case 3:
  3805                           
  3806                           
  3807                           ;functions.c: 142: if(Data[2] != 0)
  3808  0373  1283               	bcf	3,5	;RP0=0, select bank0
  3809  0374  1303               	bcf	3,6	;RP1=0, select bank0
  3810  0375  0850               	movf	ReceivedPacketHandler@Data,w
  3811  0376  3E02               	addlw	2
  3812  0377  0084               	movwf	4
  3813  0378  1383               	bcf	3,7	;select IRP bank0
  3814  0379  0800               	movf	0,w
  3815  037A  1D03               	btfss	3,2
  3816  037B  0008               	return
  3817                           
  3818                           ;functions.c: 144: TransmittPacket(3, AnalogValue(0));
  3819                           
  3820                           ;functions.c: 143: break;
  3821  037C  3000               	movlw	0
  3822  037D  160A  118A  26A0  120A  118A  	fcall	_AnalogValue
  3823  0382  1283               	bcf	3,5	;RP0=0, select bank0
  3824  0383  1303               	bcf	3,6	;RP1=0, select bank0
  3825  0384  00CF               	movwf	??_ReceivedPacketHandler
  3826  0385  084F               	movf	??_ReceivedPacketHandler,w
  3827  0386  00B5               	movwf	TransmittPacket@value
  3828  0387  3003               	movlw	3
  3829  0388  120A  158A  23BD   	fcall	_TransmittPacket
  3830                           
  3831                           ;functions.c: 145: break;
  3832  038B  0008               	return
  3833  038C                     l2843:	
  3834                           ;functions.c: 147: case 4:
  3835                           
  3836                           
  3837                           ;functions.c: 148: if(Data[2] != 0)
  3838  038C  1283               	bcf	3,5	;RP0=0, select bank0
  3839  038D  1303               	bcf	3,6	;RP1=0, select bank0
  3840  038E  0850               	movf	ReceivedPacketHandler@Data,w
  3841  038F  3E02               	addlw	2
  3842  0390  0084               	movwf	4
  3843  0391  1383               	bcf	3,7	;select IRP bank0
  3844  0392  0800               	movf	0,w
  3845  0393  1D03               	btfss	3,2
  3846  0394  0008               	return
  3847                           
  3848                           ;functions.c: 150: TransmittPacket(4, AnalogValue(3));
  3849                           
  3850                           ;functions.c: 149: break;
  3851  0395  3003               	movlw	3
  3852  0396  160A  118A  26A0  120A  118A  	fcall	_AnalogValue
  3853  039B  1283               	bcf	3,5	;RP0=0, select bank0
  3854  039C  1303               	bcf	3,6	;RP1=0, select bank0
  3855  039D  00CF               	movwf	??_ReceivedPacketHandler
  3856  039E  084F               	movf	??_ReceivedPacketHandler,w
  3857  039F  00B5               	movwf	TransmittPacket@value
  3858  03A0  3004               	movlw	4
  3859  03A1  120A  158A  23BD   	fcall	_TransmittPacket
  3860                           
  3861                           ;functions.c: 151: break;
  3862  03A4  0008               	return
  3863  03A5                     l2849:	
  3864                           ;functions.c: 153: case 5:
  3865                           
  3866                           
  3867                           ;functions.c: 154: if(Data[2] != 0)
  3868  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  3869  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  3870  03A7  0850               	movf	ReceivedPacketHandler@Data,w
  3871  03A8  3E02               	addlw	2
  3872  03A9  0084               	movwf	4
  3873  03AA  1383               	bcf	3,7	;select IRP bank0
  3874  03AB  0800               	movf	0,w
  3875  03AC  1903               	btfsc	3,2
  3876  03AD  2BBA               	goto	l2853
  3877                           
  3878                           ;functions.c: 155: {
  3879                           ;functions.c: 156: eeprom_write(0, Data[2]);
  3880  03AE  0850               	movf	ReceivedPacketHandler@Data,w
  3881  03AF  3E02               	addlw	2
  3882  03B0  0084               	movwf	4
  3883  03B1  0800               	movf	0,w
  3884  03B2  00CF               	movwf	??_ReceivedPacketHandler
  3885  03B3  084F               	movf	??_ReceivedPacketHandler,w
  3886  03B4  00A0               	movwf	eeprom_write@value
  3887  03B5  3000               	movlw	0
  3888  03B6  160A  118A  274F   	fcall	_eeprom_write
  3889                           
  3890                           ;functions.c: 157: break;
  3891  03B9  0008               	return
  3892  03BA                     l2853:	
  3893                           
  3894                           ;functions.c: 158: }
  3895                           ;functions.c: 159: TransmittPacket(5, eeprom_read(0));
  3896  03BA  3000               	movlw	0
  3897  03BB  160A  118A  2631  120A  118A  	fcall	_eeprom_read
  3898  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  3899  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  3900  03C2  00CF               	movwf	??_ReceivedPacketHandler
  3901  03C3  084F               	movf	??_ReceivedPacketHandler,w
  3902  03C4  00B5               	movwf	TransmittPacket@value
  3903  03C5  3005               	movlw	5
  3904  03C6  120A  158A  23BD   	fcall	_TransmittPacket
  3905                           
  3906                           ;functions.c: 160: break;
  3907  03C9  0008               	return
  3908  03CA                     l2855:	
  3909                           ;functions.c: 162: case 6:
  3910                           
  3911                           
  3912                           ;functions.c: 163: if(Data[2] == 0)
  3913  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  3914  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  3915  03CC  0850               	movf	ReceivedPacketHandler@Data,w
  3916  03CD  3E02               	addlw	2
  3917  03CE  0084               	movwf	4
  3918  03CF  1383               	bcf	3,7	;select IRP bank0
  3919  03D0  0800               	movf	0,w
  3920  03D1  1D03               	btfss	3,2
  3921  03D2  2BE5               	goto	l2863
  3922                           
  3923                           ;functions.c: 164: {
  3924                           ;functions.c: 165: if(bValueFromPot == TRUE)
  3925  03D3  036D               	decf	_bValueFromPot,w
  3926  03D4  1D03               	btfss	3,2
  3927  03D5  2BDD               	goto	l2861
  3928                           
  3929                           ;functions.c: 166: TransmittPacket(6, 1);
  3930  03D6  01B5               	clrf	TransmittPacket@value
  3931  03D7  0AB5               	incf	TransmittPacket@value,f
  3932  03D8  3006               	movlw	6
  3933  03D9  120A  158A  23BD   	fcall	_TransmittPacket
  3934  03DC  0008               	return
  3935  03DD                     l2861:	
  3936                           
  3937                           ;functions.c: 167: else
  3938                           ;functions.c: 168: TransmittPacket(6, 0);
  3939  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  3940  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  3941  03DF  01B5               	clrf	TransmittPacket@value
  3942  03E0  3006               	movlw	6
  3943  03E1  120A  158A  23BD   	fcall	_TransmittPacket
  3944                           
  3945                           ;functions.c: 169: }
  3946  03E4  0008               	return
  3947  03E5                     l2863:	
  3948                           
  3949                           ;functions.c: 170: else if(Data[2] == 1)
  3950  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  3951  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  3952  03E7  0850               	movf	ReceivedPacketHandler@Data,w
  3953  03E8  3E02               	addlw	2
  3954  03E9  0084               	movwf	4
  3955  03EA  1383               	bcf	3,7	;select IRP bank0
  3956  03EB  0300               	decf	0,w
  3957  03EC  1D03               	btfss	3,2
  3958  03ED  2BF1               	goto	l2867
  3959                           
  3960                           ;functions.c: 171: bValueFromPot = TRUE;
  3961  03EE  01ED               	clrf	_bValueFromPot
  3962  03EF  0AED               	incf	_bValueFromPot,f
  3963  03F0  0008               	return
  3964  03F1                     l2867:	
  3965                           
  3966                           ;functions.c: 172: else if(Data[2] == 0)
  3967  03F1  0850               	movf	ReceivedPacketHandler@Data,w
  3968  03F2  3E02               	addlw	2
  3969  03F3  0084               	movwf	4
  3970  03F4  0800               	movf	0,w
  3971  03F5  1D03               	btfss	3,2
  3972  03F6  0008               	return
  3973                           
  3974                           ;functions.c: 173: bValueFromPot = FALSE;
  3975  03F7  01ED               	clrf	_bValueFromPot
  3976                           
  3977                           ;functions.c: 175: break;
  3978  03F8  0008               	return
  3979  03F9                     l2871:	
  3980                           ;functions.c: 177: case 7:
  3981                           
  3982                           
  3983                           ;functions.c: 178: if(Data[2] != 0)
  3984  03F9  0850               	movf	ReceivedPacketHandler@Data,w
  3985  03FA  3E02               	addlw	2
  3986  03FB  0084               	movwf	4
  3987  03FC  0800               	movf	0,w
  3988  03FD  1D03               	btfss	3,2
  3989  03FE  0008               	return
  3990                           
  3991                           ;functions.c: 180: DarknessCheck();
  3992                           
  3993                           ;functions.c: 179: break;
  3994  03FF  160A  118A  2679  120A  118A  	fcall	_DarknessCheck
  3995                           
  3996                           ;functions.c: 181: if(bDark)
  3997  0404  1283               	bcf	3,5	;RP0=0, select bank0
  3998  0405  1303               	bcf	3,6	;RP1=0, select bank0
  3999  0406  0868               	movf	_bDark,w
  4000  0407  1903               	btfsc	3,2
  4001  0408  2C10               	goto	l2881
  4002                           
  4003                           ;functions.c: 182: TransmittPacket(7, 1);
  4004  0409  01B5               	clrf	TransmittPacket@value
  4005  040A  0AB5               	incf	TransmittPacket@value,f
  4006  040B  3007               	movlw	7
  4007  040C  120A  158A  23BD   	fcall	_TransmittPacket
  4008  040F  0008               	return
  4009  0410                     l2881:	
  4010                           
  4011                           ;functions.c: 183: else
  4012                           ;functions.c: 184: TransmittPacket(7, 2);
  4013  0410  3002               	movlw	2
  4014  0411  1283               	bcf	3,5	;RP0=0, select bank0
  4015  0412  1303               	bcf	3,6	;RP1=0, select bank0
  4016  0413  00CF               	movwf	??_ReceivedPacketHandler
  4017  0414  084F               	movf	??_ReceivedPacketHandler,w
  4018  0415  00B5               	movwf	TransmittPacket@value
  4019  0416  3007               	movlw	7
  4020  0417  120A  158A  23BD   	fcall	_TransmittPacket
  4021                           
  4022                           ;functions.c: 185: break;
  4023  041A  0008               	return
  4024  041B                     l2883:	
  4025                           ;functions.c: 187: case 9:
  4026                           
  4027                           
  4028                           ;functions.c: 188: write_ram_status(read_ram_status() & 0b11100011);
  4029  041B  160A  118A  2559  120A  118A  	fcall	_read_ram_status
  4030  0420  39E3               	andlw	227
  4031  0421  160A  118A  2723  120A  118A  	fcall	_write_ram_status
  4032                           
  4033                           ;functions.c: 189: ResetMemoryAdress();
  4034  0426  160A  118A  25B6  120A  118A  	fcall	_ResetMemoryAdress
  4035                           
  4036                           ;functions.c: 190: ram_bulk_erase();
  4037  042B  160A  118A  25EC  120A  118A  	fcall	_ram_bulk_erase
  4038                           
  4039                           ;functions.c: 191: TransmittPacket(9, 1);
  4040  0430  1283               	bcf	3,5	;RP0=0, select bank0
  4041  0431  1303               	bcf	3,6	;RP1=0, select bank0
  4042  0432  01B5               	clrf	TransmittPacket@value
  4043  0433  0AB5               	incf	TransmittPacket@value,f
  4044  0434  3009               	movlw	9
  4045  0435  120A  158A  23BD   	fcall	_TransmittPacket
  4046                           
  4047                           ;functions.c: 192: break;
  4048  0438  0008               	return
  4049  0439                     l2887:	
  4050                           ;functions.c: 194: case 8:
  4051                           
  4052                           
  4053                           ;functions.c: 195: if(!bSaveDataToFlash)
  4054  0439  1283               	bcf	3,5	;RP0=0, select bank0
  4055  043A  1303               	bcf	3,6	;RP1=0, select bank0
  4056  043B  0869               	movf	_bSaveDataToFlash,w
  4057  043C  1D03               	btfss	3,2
  4058  043D  2C42               	goto	l2891
  4059                           
  4060                           ;functions.c: 196: SendMemoryData();
  4061  043E  120A  118A  246D   	fcall	_SendMemoryData
  4062  0441  0008               	return
  4063  0442                     l2891:	
  4064                           
  4065                           ;functions.c: 197: else
  4066                           ;functions.c: 198: TransmittPacket(8, 0);
  4067  0442  1283               	bcf	3,5	;RP0=0, select bank0
  4068  0443  1303               	bcf	3,6	;RP1=0, select bank0
  4069  0444  01B5               	clrf	TransmittPacket@value
  4070  0445  3008               	movlw	8
  4071  0446  120A  158A  23BD   	fcall	_TransmittPacket
  4072                           
  4073                           ;functions.c: 203: }
  4074                           
  4075                           ;functions.c: 202: break;
  4076                           
  4077                           ;functions.c: 201: default:
  4078                           
  4079                           ;functions.c: 199: break;
  4080  0449  0008               	return
  4081  044A                     l2895:	
  4082  044A  1283               	bcf	3,5	;RP0=0, select bank0
  4083  044B  1303               	bcf	3,6	;RP1=0, select bank0
  4084  044C  0A50               	incf	ReceivedPacketHandler@Data,w
  4085  044D  0084               	movwf	4
  4086  044E  1383               	bcf	3,7	;select IRP bank0
  4087  044F  0800               	movf	0,w
  4088                           
  4089                           ; Switch size 1, requested type "space"
  4090                           ; Number of cases is 9, Range of values is 1 to 9
  4091                           ; switch strategies available:
  4092                           ; Name         Instructions Cycles
  4093                           ; simple_byte           28    15 (average)
  4094                           ; direct_byte           38    11 (fixed)
  4095                           ; jumptable            263     9 (fixed)
  4096                           ;	Chosen strategy is simple_byte
  4097  0450  3A01               	xorlw	1	; case 1
  4098  0451  1903               	skipnz
  4099  0452  2B20               	goto	l2815
  4100  0453  3A03               	xorlw	3	; case 2
  4101  0454  1903               	skipnz
  4102  0455  2B32               	goto	l2817
  4103  0456  3A01               	xorlw	1	; case 3
  4104  0457  1903               	skipnz
  4105  0458  2B73               	goto	l2837
  4106  0459  3A07               	xorlw	7	; case 4
  4107  045A  1903               	skipnz
  4108  045B  2B8C               	goto	l2843
  4109  045C  3A01               	xorlw	1	; case 5
  4110  045D  1903               	skipnz
  4111  045E  2BA5               	goto	l2849
  4112  045F  3A03               	xorlw	3	; case 6
  4113  0460  1903               	skipnz
  4114  0461  2BCA               	goto	l2855
  4115  0462  3A01               	xorlw	1	; case 7
  4116  0463  1903               	skipnz
  4117  0464  2BF9               	goto	l2871
  4118  0465  3A0F               	xorlw	15	; case 8
  4119  0466  1903               	skipnz
  4120  0467  2C39               	goto	l2887
  4121  0468  3A01               	xorlw	1	; case 9
  4122  0469  1903               	skipnz
  4123  046A  2C1B               	goto	l2883
  4124  046B  2C6C               	goto	l310
  4125  046C                     l310:	
  4126  046C  0008               	return
  4127  046D                     __end_of_ReceivedPacketHandler:	
  4128                           
  4129                           	psect	text9
  4130  1723                     __ptext9:	
  4131 ;; *************** function _write_ram_status *****************
  4132 ;; Defined at:
  4133 ;;		line 169 in file "m25p16.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  status          1    wreg     unsigned char 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  status          1    5[BANK0 ] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      void 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0, pclath, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4147 ;;      Params:         0       0       0       0       0
  4148 ;;      Locals:         0       1       0       0       0
  4149 ;;      Temps:          0       0       0       0       0
  4150 ;;      Totals:         0       1       0       0       0
  4151 ;;Total ram usage:        1 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    5
  4154 ;; This function calls:
  4155 ;;		_WriteSPI
  4156 ;;		_read_ram_status
  4157 ;; This function is called by:
  4158 ;;		_main
  4159 ;;		_ReceivedPacketHandler
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function _write_ram_status
  4165  1723                     _write_ram_status:	
  4166                           
  4167                           ;incstack = 0
  4168                           ; Regs used in _write_ram_status: [wreg+status,2+status,0+pclath+cstack]
  4169                           ;write_ram_status@status stored from wreg
  4170  1723  1283               	bcf	3,5	;RP0=0, select bank0
  4171  1724  1303               	bcf	3,6	;RP1=0, select bank0
  4172  1725  00A5               	movwf	write_ram_status@status
  4173                           
  4174                           ;m25p16.c: 172: RD3 = 0;
  4175  1726  1188               	bcf	8,3	;volatile
  4176                           
  4177                           ;m25p16.c: 173: WriteSPI(0x06);
  4178  1727  3006               	movlw	6
  4179  1728  160A  118A  2504  160A  118A  	fcall	_WriteSPI
  4180                           
  4181                           ;m25p16.c: 174: RD3 = 1;
  4182  172D  1283               	bcf	3,5	;RP0=0, select bank0
  4183  172E  1303               	bcf	3,6	;RP1=0, select bank0
  4184  172F  1588               	bsf	8,3	;volatile
  4185                           
  4186                           ;m25p16.c: 175: _delay((unsigned long)((2)*(4000000/4000000.0)));
  4187  1730  2F31               	nop2	;2 cycle nop
  4188                           
  4189                           ;m25p16.c: 176: RD3 = 0;
  4190  1731  1283               	bcf	3,5	;RP0=0, select bank0
  4191  1732  1303               	bcf	3,6	;RP1=0, select bank0
  4192  1733  1188               	bcf	8,3	;volatile
  4193                           
  4194                           ;m25p16.c: 177: WriteSPI(0x01);
  4195  1734  3001               	movlw	1
  4196  1735  160A  118A  2504  160A  118A  	fcall	_WriteSPI
  4197                           
  4198                           ;m25p16.c: 178: WriteSPI(status);
  4199  173A  1283               	bcf	3,5	;RP0=0, select bank0
  4200  173B  1303               	bcf	3,6	;RP1=0, select bank0
  4201  173C  0825               	movf	write_ram_status@status,w
  4202  173D  160A  118A  2504  160A  118A  	fcall	_WriteSPI
  4203                           
  4204                           ;m25p16.c: 179: RD3 = 1;
  4205  1742  1283               	bcf	3,5	;RP0=0, select bank0
  4206  1743  1303               	bcf	3,6	;RP1=0, select bank0
  4207  1744  1588               	bsf	8,3	;volatile
  4208                           
  4209                           ;m25p16.c: 180: _delay((unsigned long)((2)*(4000000/4000000.0)));
  4210  1745  2F46               	nop2	;2 cycle nop
  4211  1746                     l2663:	
  4212                           ;m25p16.c: 181: while (read_ram_status() & 0x01);
  4213                           
  4214  1746  160A  118A  2559  160A  118A  	fcall	_read_ram_status
  4215  174B  3901               	andlw	1
  4216  174C  1903               	btfsc	3,2
  4217  174D  0008               	return
  4218  174E  2F46               	goto	l2663
  4219  174F                     __end_of_write_ram_status:	
  4220                           
  4221                           	psect	text10
  4222  0877                     __ptext10:	
  4223 ;; *************** function _strstr *****************
  4224 ;; Defined at:
  4225 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strstr.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;  s1              1    wreg     PTR const unsigned char 
  4228 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4229 ;;  s2              1   14[BANK0 ] PTR const unsigned char 
  4230 ;;		 -> STR_2(8), STR_1(8), 
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;  s1              1   18[BANK0 ] PTR const unsigned char 
  4233 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  1    wreg      PTR unsigned char 
  4236 ;; Registers used:
  4237 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4243 ;;      Params:         0       1       0       0       0
  4244 ;;      Locals:         0       1       0       0       0
  4245 ;;      Temps:          0       3       0       0       0
  4246 ;;      Totals:         0       5       0       0       0
  4247 ;;Total ram usage:        5 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    3
  4250 ;; This function calls:
  4251 ;;		_strchr
  4252 ;;		_strlen
  4253 ;;		_strncmp
  4254 ;; This function is called by:
  4255 ;;		_ReceivedPacketHandler
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           
  4260                           ;psect for function _strstr
  4261  0877                     _strstr:	
  4262                           
  4263                           ;incstack = 0
  4264                           ; Regs used in _strstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4265                           ;strstr@s1 stored from wreg
  4266  0877  1283               	bcf	3,5	;RP0=0, select bank0
  4267  0878  1303               	bcf	3,6	;RP1=0, select bank0
  4268  0879  00B2               	movwf	strstr@s1
  4269  087A  28B2               	goto	l2697
  4270  087B                     l2689:	
  4271  087B  082E               	movf	strstr@s2,w
  4272  087C  00AF               	movwf	??_strstr
  4273  087D  082F               	movf	??_strstr,w
  4274  087E  00A8               	movwf	strncmp@s2
  4275  087F  082E               	movf	strstr@s2,w
  4276  0880  160A  118A  26F7  120A  158A  	fcall	_strlen
  4277  0885  1283               	bcf	3,5	;RP0=0, select bank0
  4278  0886  1303               	bcf	3,6	;RP1=0, select bank0
  4279  0887  0821               	movf	?_strlen+1,w
  4280  0888  00AA               	movwf	strncmp@len+1
  4281  0889  0820               	movf	?_strlen,w
  4282  088A  00A9               	movwf	strncmp@len
  4283  088B  0832               	movf	strstr@s1,w
  4284  088C  120A  158A  2033  120A  158A  	fcall	_strncmp
  4285  0891  1283               	bcf	3,5	;RP0=0, select bank0
  4286  0892  1303               	bcf	3,6	;RP1=0, select bank0
  4287  0893  0828               	movf	?_strncmp,w
  4288  0894  0429               	iorwf	?_strncmp+1,w
  4289  0895  1D03               	btfss	3,2
  4290  0896  2899               	goto	l2695
  4291  0897  0832               	movf	strstr@s1,w
  4292  0898  0008               	return
  4293  0899                     l2695:	
  4294  0899  082E               	movf	strstr@s2,w
  4295  089A  0084               	movwf	4
  4296  089B  160A  118A  2000  120A  158A  	fcall	stringdir
  4297  08A0  00AF               	movwf	??_strstr
  4298  08A1  01B0               	clrf	??_strstr+1
  4299  08A2  082F               	movf	??_strstr,w
  4300  08A3  00A0               	movwf	strchr@chr
  4301  08A4  0830               	movf	??_strstr+1,w
  4302  08A5  00A1               	movwf	strchr@chr+1
  4303  08A6  0832               	movf	strstr@s1,w
  4304  08A7  3E01               	addlw	1
  4305  08A8  160A  118A  256D  120A  158A  	fcall	_strchr
  4306  08AD  1283               	bcf	3,5	;RP0=0, select bank0
  4307  08AE  1303               	bcf	3,6	;RP1=0, select bank0
  4308  08AF  00B1               	movwf	??_strstr+2
  4309  08B0  0831               	movf	??_strstr+2,w
  4310  08B1  00B2               	movwf	strstr@s1
  4311  08B2                     l2697:	
  4312  08B2  0832               	movf	strstr@s1,w
  4313  08B3  1903               	btfsc	3,2
  4314  08B4  28BB               	goto	l2701
  4315  08B5  0832               	movf	strstr@s1,w
  4316  08B6  0084               	movwf	4
  4317  08B7  1383               	bcf	3,7	;select IRP bank0
  4318  08B8  0800               	movf	0,w
  4319  08B9  1D03               	btfss	3,2
  4320  08BA  287B               	goto	l2689
  4321  08BB                     l2701:	
  4322  08BB  3000               	movlw	0
  4323  08BC  0008               	return
  4324  08BD                     __end_of_strstr:	
  4325                           
  4326                           	psect	text11
  4327  0833                     __ptext11:	
  4328 ;; *************** function _strncmp *****************
  4329 ;; Defined at:
  4330 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncmp.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  s1              1    wreg     PTR const unsigned char 
  4333 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4334 ;;  s2              1    8[BANK0 ] PTR const unsigned char 
  4335 ;;		 -> STR_2(8), STR_1(8), 
  4336 ;;  len             2    9[BANK0 ] unsigned int 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  4339 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  2    8[BANK0 ] int 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4349 ;;      Params:         0       3       0       0       0
  4350 ;;      Locals:         0       1       0       0       0
  4351 ;;      Temps:          0       2       0       0       0
  4352 ;;      Totals:         0       6       0       0       0
  4353 ;;Total ram usage:        6 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    2
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_strstr
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           
  4364                           ;psect for function _strncmp
  4365  0833                     _strncmp:	
  4366                           
  4367                           ;incstack = 0
  4368                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
  4369                           ;strncmp@s1 stored from wreg
  4370  0833  1283               	bcf	3,5	;RP0=0, select bank0
  4371  0834  1303               	bcf	3,6	;RP1=0, select bank0
  4372  0835  00AD               	movwf	strncmp@s1
  4373  0836                     l1181:	
  4374  0836  3001               	movlw	1
  4375  0837  02A9               	subwf	strncmp@len,f
  4376  0838  3000               	movlw	0
  4377  0839  1C03               	skipc
  4378  083A  03AA               	decf	strncmp@len+1,f
  4379  083B  02AA               	subwf	strncmp@len+1,f
  4380  083C  0A29               	incf	strncmp@len,w
  4381  083D  1903               	btfsc	3,2
  4382  083E  0A2A               	incf	strncmp@len+1,w
  4383  083F  1903               	btfsc	3,2
  4384  0840  2874               	goto	l2633
  4385  0841  082D               	movf	strncmp@s1,w
  4386  0842  0084               	movwf	4
  4387  0843  1383               	bcf	3,7	;select IRP bank0
  4388  0844  0800               	movf	0,w
  4389  0845  1903               	btfsc	3,2
  4390  0846  2855               	goto	l2627
  4391  0847  0828               	movf	strncmp@s2,w
  4392  0848  0084               	movwf	4
  4393  0849  160A  118A  2000  120A  158A  	fcall	stringdir
  4394  084E  00AB               	movwf	??_strncmp
  4395  084F  082D               	movf	strncmp@s1,w
  4396  0850  0084               	movwf	4
  4397  0851  0800               	movf	0,w
  4398  0852  062B               	xorwf	??_strncmp,w
  4399  0853  1903               	skipnz
  4400  0854  286B               	goto	l2631
  4401  0855                     l2627:	
  4402  0855  0828               	movf	strncmp@s2,w
  4403  0856  0084               	movwf	4
  4404  0857  160A  118A  2000   	fcall	stringdir
  4405  085A  00AB               	movwf	??_strncmp
  4406  085B  01AC               	clrf	??_strncmp+1
  4407  085C  09AB               	comf	??_strncmp,f
  4408  085D  09AC               	comf	??_strncmp+1,f
  4409  085E  0AAB               	incf	??_strncmp,f
  4410  085F  1903               	skipnz
  4411  0860  0AAC               	incf	??_strncmp+1,f
  4412  0861  082D               	movf	strncmp@s1,w
  4413  0862  0084               	movwf	4
  4414  0863  0800               	movf	0,w
  4415  0864  072B               	addwf	??_strncmp,w
  4416  0865  00A8               	movwf	?_strncmp
  4417  0866  082C               	movf	??_strncmp+1,w
  4418  0867  1803               	skipnc
  4419  0868  0A2C               	incf	??_strncmp+1,w
  4420  0869  00A9               	movwf	?_strncmp+1
  4421  086A  0008               	return
  4422  086B                     l2631:	
  4423  086B  3001               	movlw	1
  4424  086C  00AB               	movwf	??_strncmp
  4425  086D  082B               	movf	??_strncmp,w
  4426  086E  07AD               	addwf	strncmp@s1,f
  4427  086F  3001               	movlw	1
  4428  0870  00AB               	movwf	??_strncmp
  4429  0871  082B               	movf	??_strncmp,w
  4430  0872  07A8               	addwf	strncmp@s2,f
  4431  0873  2836               	goto	l1181
  4432  0874                     l2633:	
  4433  0874  01A8               	clrf	?_strncmp
  4434  0875  01A9               	clrf	?_strncmp+1
  4435  0876  0008               	return
  4436  0877                     __end_of_strncmp:	
  4437                           
  4438                           	psect	text12
  4439  16F7                     __ptext12:	
  4440 ;; *************** function _strlen *****************
  4441 ;; Defined at:
  4442 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strlen.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  s               1    wreg     PTR const unsigned char 
  4445 ;;		 -> STR_2(8), STR_1(8), 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  s               1    6[BANK0 ] PTR const unsigned char 
  4448 ;;		 -> STR_2(8), STR_1(8), 
  4449 ;;  cp              1    7[BANK0 ] PTR const unsigned char 
  4450 ;;		 -> STR_2(8), STR_1(8), 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  2    0[BANK0 ] unsigned int 
  4453 ;; Registers used:
  4454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4460 ;;      Params:         0       2       0       0       0
  4461 ;;      Locals:         0       2       0       0       0
  4462 ;;      Temps:          0       4       0       0       0
  4463 ;;      Totals:         0       8       0       0       0
  4464 ;;Total ram usage:        8 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    2
  4467 ;; This function calls:
  4468 ;;		Nothing
  4469 ;; This function is called by:
  4470 ;;		_strstr
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           
  4475                           ;psect for function _strlen
  4476  16F7                     _strlen:	
  4477                           
  4478                           ;incstack = 0
  4479                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
  4480                           ;strlen@s stored from wreg
  4481  16F7  1283               	bcf	3,5	;RP0=0, select bank0
  4482  16F8  1303               	bcf	3,6	;RP1=0, select bank0
  4483  16F9  00A6               	movwf	strlen@s
  4484  16FA  0826               	movf	strlen@s,w
  4485  16FB  00A2               	movwf	??_strlen
  4486  16FC  0822               	movf	??_strlen,w
  4487  16FD  00A7               	movwf	strlen@cp
  4488  16FE                     l2615:	
  4489  16FE  0827               	movf	strlen@cp,w
  4490  16FF  0084               	movwf	4
  4491  1700  160A  118A  2000  160A  118A  	fcall	stringdir
  4492  1705  3A00               	xorlw	0
  4493  1706  1903               	btfsc	3,2
  4494  1707  2F0D               	goto	l2617
  4495  1708  3001               	movlw	1
  4496  1709  00A2               	movwf	??_strlen
  4497  170A  0822               	movf	??_strlen,w
  4498  170B  07A7               	addwf	strlen@cp,f
  4499  170C  2EFE               	goto	l2615
  4500  170D                     l2617:	
  4501  170D  0826               	movf	strlen@s,w
  4502  170E  00A2               	movwf	??_strlen
  4503  170F  3080               	movlw	128
  4504  1710  00A3               	movwf	??_strlen+1
  4505  1711  09A2               	comf	??_strlen,f
  4506  1712  09A3               	comf	??_strlen+1,f
  4507  1713  0AA2               	incf	??_strlen,f
  4508  1714  1903               	skipnz
  4509  1715  0AA3               	incf	??_strlen+1,f
  4510  1716  0827               	movf	strlen@cp,w
  4511  1717  00A4               	movwf	??_strlen+2
  4512  1718  3080               	movlw	128
  4513  1719  00A5               	movwf	??_strlen+3
  4514  171A  0822               	movf	??_strlen,w
  4515  171B  0724               	addwf	??_strlen+2,w
  4516  171C  00A0               	movwf	?_strlen
  4517  171D  0823               	movf	??_strlen+1,w
  4518  171E  1803               	skipnc
  4519  171F  0A23               	incf	??_strlen+1,w
  4520  1720  0725               	addwf	??_strlen+3,w
  4521  1721  00A1               	movwf	?_strlen+1
  4522  1722  0008               	return
  4523  1723                     __end_of_strlen:	
  4524                           
  4525                           	psect	text13
  4526  156D                     __ptext13:	
  4527 ;; *************** function _strchr *****************
  4528 ;; Defined at:
  4529 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strchr.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  ptr             1    wreg     PTR const unsigned char 
  4532 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4533 ;;  chr             2    0[BANK0 ] int 
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  ptr             1    2[BANK0 ] PTR const unsigned char 
  4536 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      PTR unsigned char 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4546 ;;      Params:         0       2       0       0       0
  4547 ;;      Locals:         0       1       0       0       0
  4548 ;;      Temps:          0       0       0       0       0
  4549 ;;      Totals:         0       3       0       0       0
  4550 ;;Total ram usage:        3 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    2
  4553 ;; This function calls:
  4554 ;;		Nothing
  4555 ;; This function is called by:
  4556 ;;		_strstr
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           
  4561                           ;psect for function _strchr
  4562  156D                     _strchr:	
  4563                           
  4564                           ;incstack = 0
  4565                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0]
  4566                           ;strchr@ptr stored from wreg
  4567  156D  1283               	bcf	3,5	;RP0=0, select bank0
  4568  156E  1303               	bcf	3,6	;RP1=0, select bank0
  4569  156F  00A2               	movwf	strchr@ptr
  4570  1570                     l1169:	
  4571  1570  0822               	movf	strchr@ptr,w
  4572  1571  0084               	movwf	4
  4573  1572  1383               	bcf	3,7	;select IRP bank0
  4574  1573  0800               	movf	0,w
  4575  1574  0620               	xorwf	strchr@chr,w
  4576  1575  1D03               	skipz
  4577  1576  2D79               	goto	l2643
  4578  1577  0822               	movf	strchr@ptr,w
  4579  1578  0008               	return
  4580  1579                     l2643:	
  4581  1579  0822               	movf	strchr@ptr,w
  4582  157A  0084               	movwf	4
  4583  157B  3001               	movlw	1
  4584  157C  07A2               	addwf	strchr@ptr,f
  4585  157D  0800               	movf	0,w
  4586  157E  1D03               	btfss	3,2
  4587  157F  2D70               	goto	l1169
  4588  1580  3000               	movlw	0
  4589  1581  0008               	return
  4590  1582                     __end_of_strchr:	
  4591                           
  4592                           	psect	text14
  4593  15EC                     __ptext14:	
  4594 ;; *************** function _ram_bulk_erase *****************
  4595 ;; Defined at:
  4596 ;;		line 69 in file "m25p16.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;		None
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;		None
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		wreg, status,2, status,0, pclath, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4610 ;;      Params:         0       0       0       0       0
  4611 ;;      Locals:         0       0       0       0       0
  4612 ;;      Temps:          0       0       0       0       0
  4613 ;;      Totals:         0       0       0       0       0
  4614 ;;Total ram usage:        0 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:    5
  4617 ;; This function calls:
  4618 ;;		_WriteSPI
  4619 ;;		_read_ram_status
  4620 ;; This function is called by:
  4621 ;;		_main
  4622 ;;		_ReceivedPacketHandler
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           
  4627                           ;psect for function _ram_bulk_erase
  4628  15EC                     _ram_bulk_erase:	
  4629                           
  4630                           ;m25p16.c: 71: RD3 = 0;
  4631                           
  4632                           ;incstack = 0
  4633                           ; Regs used in _ram_bulk_erase: [wreg+status,2+status,0+pclath+cstack]
  4634  15EC  1283               	bcf	3,5	;RP0=0, select bank0
  4635  15ED  1303               	bcf	3,6	;RP1=0, select bank0
  4636  15EE  1188               	bcf	8,3	;volatile
  4637                           
  4638                           ;m25p16.c: 72: WriteSPI(0x06);
  4639  15EF  3006               	movlw	6
  4640  15F0  160A  118A  2504  160A  118A  	fcall	_WriteSPI
  4641                           
  4642                           ;m25p16.c: 73: RD3 = 1;
  4643  15F5  1283               	bcf	3,5	;RP0=0, select bank0
  4644  15F6  1303               	bcf	3,6	;RP1=0, select bank0
  4645  15F7  1588               	bsf	8,3	;volatile
  4646                           
  4647                           ;m25p16.c: 74: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4648  15F8  0000               	nop
  4649                           
  4650                           ;m25p16.c: 75: RD3 = 0;
  4651  15F9  1283               	bcf	3,5	;RP0=0, select bank0
  4652  15FA  1303               	bcf	3,6	;RP1=0, select bank0
  4653  15FB  1188               	bcf	8,3	;volatile
  4654                           
  4655                           ;m25p16.c: 76: WriteSPI(0xC7);
  4656  15FC  30C7               	movlw	199
  4657  15FD  160A  118A  2504  160A  118A  	fcall	_WriteSPI
  4658                           
  4659                           ;m25p16.c: 77: RD3 = 1;
  4660  1602  1283               	bcf	3,5	;RP0=0, select bank0
  4661  1603  1303               	bcf	3,6	;RP1=0, select bank0
  4662  1604  1588               	bsf	8,3	;volatile
  4663  1605                     l2679:	
  4664                           ;m25p16.c: 78: while(read_ram_status());
  4665                           
  4666  1605  160A  118A  2559  160A  118A  	fcall	_read_ram_status
  4667  160A  3A00               	xorlw	0
  4668  160B  1903               	btfsc	3,2
  4669  160C  0008               	return
  4670  160D  2E05               	goto	l2679
  4671  160E                     __end_of_ram_bulk_erase:	
  4672                           
  4673                           	psect	text15
  4674  046D                     __ptext15:	
  4675 ;; *************** function _SendMemoryData *****************
  4676 ;; Defined at:
  4677 ;;		line 1236 in file "functions.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;		None
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  address         4   43[BANK0 ] unsigned long 
  4682 ;;  finalAddress    4   36[BANK0 ] unsigned long 
  4683 ;;  addr1           1   42[BANK0 ] unsigned char 
  4684 ;;  addr2           1   41[BANK0 ] unsigned char 
  4685 ;;  addr3           1   40[BANK0 ] unsigned char 
  4686 ;;  value           1   35[BANK0 ] unsigned char 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  1    wreg      void 
  4689 ;; Registers used:
  4690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4696 ;;      Params:         0       0       0       0       0
  4697 ;;      Locals:         0      12       0       0       0
  4698 ;;      Temps:          0       8       0       0       0
  4699 ;;      Totals:         0      20       0       0       0
  4700 ;;Total ram usage:       20 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:    8
  4703 ;; This function calls:
  4704 ;;		_ReadMemoryAdress
  4705 ;;		_TransmittPacket
  4706 ;;		___llmod
  4707 ;;		_read_write_flash_ram
  4708 ;; This function is called by:
  4709 ;;		_ReceivedPacketHandler
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           
  4714                           ;psect for function _SendMemoryData
  4715  046D                     _SendMemoryData:	
  4716                           
  4717                           ;functions.c: 1238: unsigned long address, finalAddress = 0;
  4718                           
  4719                           ;incstack = 0
  4720 ;; hardware stack exceeded
  4721                           ; Regs used in _SendMemoryData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4722  046D  3000               	movlw	0
  4723  046E  1283               	bcf	3,5	;RP0=0, select bank0
  4724  046F  1303               	bcf	3,6	;RP1=0, select bank0
  4725  0470  00C7               	movwf	SendMemoryData@finalAddress+3
  4726  0471  3000               	movlw	0
  4727  0472  00C6               	movwf	SendMemoryData@finalAddress+2
  4728  0473  3000               	movlw	0
  4729  0474  00C5               	movwf	SendMemoryData@finalAddress+1
  4730  0475  3000               	movlw	0
  4731  0476  00C4               	movwf	SendMemoryData@finalAddress
  4732                           
  4733                           ;functions.c: 1239: unsigned char addr3, addr2, addr1, value;
  4734                           ;functions.c: 1241: ReadMemoryAdress(&addr3, &addr2, &addr1);
  4735  0477  3049               	movlw	(low (SendMemoryData@addr2| 0))& (0+255)
  4736  0478  00BB               	movwf	??_SendMemoryData
  4737  0479  083B               	movf	??_SendMemoryData,w
  4738  047A  00A2               	movwf	ReadMemoryAdress@var2
  4739  047B  304A               	movlw	(low (SendMemoryData@addr1| 0))& (0+255)
  4740  047C  00BC               	movwf	??_SendMemoryData+1
  4741  047D  083C               	movf	??_SendMemoryData+1,w
  4742  047E  00A3               	movwf	ReadMemoryAdress@var1
  4743  047F  3048               	movlw	(low (SendMemoryData@addr3| 0))& (0+255)
  4744  0480  160A  118A  26CB  120A  118A  	fcall	_ReadMemoryAdress
  4745                           
  4746                           ;functions.c: 1245: finalAddress = addr3;
  4747  0485  1283               	bcf	3,5	;RP0=0, select bank0
  4748  0486  1303               	bcf	3,6	;RP1=0, select bank0
  4749  0487  0848               	movf	SendMemoryData@addr3,w
  4750  0488  00BB               	movwf	??_SendMemoryData
  4751  0489  01BC               	clrf	??_SendMemoryData+1
  4752  048A  01BD               	clrf	??_SendMemoryData+2
  4753  048B  01BE               	clrf	??_SendMemoryData+3
  4754  048C  083E               	movf	??_SendMemoryData+3,w
  4755  048D  00C7               	movwf	SendMemoryData@finalAddress+3
  4756  048E  083D               	movf	??_SendMemoryData+2,w
  4757  048F  00C6               	movwf	SendMemoryData@finalAddress+2
  4758  0490  083C               	movf	??_SendMemoryData+1,w
  4759  0491  00C5               	movwf	SendMemoryData@finalAddress+1
  4760  0492  083B               	movf	??_SendMemoryData,w
  4761  0493  00C4               	movwf	SendMemoryData@finalAddress
  4762                           
  4763                           ;functions.c: 1246: finalAddress = (finalAddress << 8) + addr2;
  4764  0494  0849               	movf	SendMemoryData@addr2,w
  4765  0495  00BB               	movwf	??_SendMemoryData
  4766  0496  01BC               	clrf	??_SendMemoryData+1
  4767  0497  01BD               	clrf	??_SendMemoryData+2
  4768  0498  01BE               	clrf	??_SendMemoryData+3
  4769  0499  0844               	movf	SendMemoryData@finalAddress,w
  4770  049A  00BF               	movwf	??_SendMemoryData+4
  4771  049B  0845               	movf	SendMemoryData@finalAddress+1,w
  4772  049C  00C0               	movwf	??_SendMemoryData+5
  4773  049D  0846               	movf	SendMemoryData@finalAddress+2,w
  4774  049E  00C1               	movwf	??_SendMemoryData+6
  4775  049F  0847               	movf	SendMemoryData@finalAddress+3,w
  4776  04A0  00C2               	movwf	??_SendMemoryData+7
  4777  04A1  3008               	movlw	8
  4778  04A2                     u1765:	
  4779  04A2  1003               	clrc
  4780  04A3  0DBF               	rlf	??_SendMemoryData+4,f
  4781  04A4  0DC0               	rlf	??_SendMemoryData+5,f
  4782  04A5  0DC1               	rlf	??_SendMemoryData+6,f
  4783  04A6  0DC2               	rlf	??_SendMemoryData+7,f
  4784  04A7  3EFF               	addlw	-1
  4785  04A8  1D03               	skipz
  4786  04A9  2CA2               	goto	u1765
  4787  04AA  083F               	movf	??_SendMemoryData+4,w
  4788  04AB  07BB               	addwf	??_SendMemoryData,f
  4789  04AC  0840               	movf	??_SendMemoryData+5,w
  4790  04AD  1803               	skipnc
  4791  04AE  0F40               	incfsz	??_SendMemoryData+5,w
  4792  04AF  2CB1               	goto	u1770
  4793  04B0  2CB2               	goto	u1771
  4794  04B1                     u1770:	
  4795  04B1  07BC               	addwf	??_SendMemoryData+1,f
  4796  04B2                     u1771:	
  4797  04B2  0841               	movf	??_SendMemoryData+6,w
  4798  04B3  1803               	skipnc
  4799  04B4  0F41               	incfsz	??_SendMemoryData+6,w
  4800  04B5  2CB7               	goto	u1772
  4801  04B6  2CB8               	goto	u1773
  4802  04B7                     u1772:	
  4803  04B7  07BD               	addwf	??_SendMemoryData+2,f
  4804  04B8                     u1773:	
  4805  04B8  0842               	movf	??_SendMemoryData+7,w
  4806  04B9  1803               	skipnc
  4807  04BA  0A42               	incf	??_SendMemoryData+7,w
  4808  04BB  07BE               	addwf	??_SendMemoryData+3,f
  4809  04BC  083E               	movf	??_SendMemoryData+3,w
  4810  04BD  00C7               	movwf	SendMemoryData@finalAddress+3
  4811  04BE  083D               	movf	??_SendMemoryData+2,w
  4812  04BF  00C6               	movwf	SendMemoryData@finalAddress+2
  4813  04C0  083C               	movf	??_SendMemoryData+1,w
  4814  04C1  00C5               	movwf	SendMemoryData@finalAddress+1
  4815  04C2  083B               	movf	??_SendMemoryData,w
  4816  04C3  00C4               	movwf	SendMemoryData@finalAddress
  4817                           
  4818                           ;functions.c: 1247: finalAddress = (finalAddress << 8) + addr1;
  4819  04C4  084A               	movf	SendMemoryData@addr1,w
  4820  04C5  00BB               	movwf	??_SendMemoryData
  4821  04C6  01BC               	clrf	??_SendMemoryData+1
  4822  04C7  01BD               	clrf	??_SendMemoryData+2
  4823  04C8  01BE               	clrf	??_SendMemoryData+3
  4824  04C9  0844               	movf	SendMemoryData@finalAddress,w
  4825  04CA  00BF               	movwf	??_SendMemoryData+4
  4826  04CB  0845               	movf	SendMemoryData@finalAddress+1,w
  4827  04CC  00C0               	movwf	??_SendMemoryData+5
  4828  04CD  0846               	movf	SendMemoryData@finalAddress+2,w
  4829  04CE  00C1               	movwf	??_SendMemoryData+6
  4830  04CF  0847               	movf	SendMemoryData@finalAddress+3,w
  4831  04D0  00C2               	movwf	??_SendMemoryData+7
  4832  04D1  3008               	movlw	8
  4833  04D2                     u1785:	
  4834  04D2  1003               	clrc
  4835  04D3  0DBF               	rlf	??_SendMemoryData+4,f
  4836  04D4  0DC0               	rlf	??_SendMemoryData+5,f
  4837  04D5  0DC1               	rlf	??_SendMemoryData+6,f
  4838  04D6  0DC2               	rlf	??_SendMemoryData+7,f
  4839  04D7  3EFF               	addlw	-1
  4840  04D8  1D03               	skipz
  4841  04D9  2CD2               	goto	u1785
  4842  04DA  083F               	movf	??_SendMemoryData+4,w
  4843  04DB  07BB               	addwf	??_SendMemoryData,f
  4844  04DC  0840               	movf	??_SendMemoryData+5,w
  4845  04DD  1803               	skipnc
  4846  04DE  0F40               	incfsz	??_SendMemoryData+5,w
  4847  04DF  2CE1               	goto	u1790
  4848  04E0  2CE2               	goto	u1791
  4849  04E1                     u1790:	
  4850  04E1  07BC               	addwf	??_SendMemoryData+1,f
  4851  04E2                     u1791:	
  4852  04E2  0841               	movf	??_SendMemoryData+6,w
  4853  04E3  1803               	skipnc
  4854  04E4  0F41               	incfsz	??_SendMemoryData+6,w
  4855  04E5  2CE7               	goto	u1792
  4856  04E6  2CE8               	goto	u1793
  4857  04E7                     u1792:	
  4858  04E7  07BD               	addwf	??_SendMemoryData+2,f
  4859  04E8                     u1793:	
  4860  04E8  0842               	movf	??_SendMemoryData+7,w
  4861  04E9  1803               	skipnc
  4862  04EA  0A42               	incf	??_SendMemoryData+7,w
  4863  04EB  07BE               	addwf	??_SendMemoryData+3,f
  4864  04EC  083E               	movf	??_SendMemoryData+3,w
  4865  04ED  00C7               	movwf	SendMemoryData@finalAddress+3
  4866  04EE  083D               	movf	??_SendMemoryData+2,w
  4867  04EF  00C6               	movwf	SendMemoryData@finalAddress+2
  4868  04F0  083C               	movf	??_SendMemoryData+1,w
  4869  04F1  00C5               	movwf	SendMemoryData@finalAddress+1
  4870  04F2  083B               	movf	??_SendMemoryData,w
  4871  04F3  00C4               	movwf	SendMemoryData@finalAddress
  4872                           
  4873                           ;functions.c: 1249: TransmittPacket(8,3);
  4874  04F4  3003               	movlw	3
  4875  04F5  00BB               	movwf	??_SendMemoryData
  4876  04F6  083B               	movf	??_SendMemoryData,w
  4877  04F7  00B5               	movwf	TransmittPacket@value
  4878  04F8  3008               	movlw	8
  4879  04F9  120A  158A  23BD  120A  118A  	fcall	_TransmittPacket
  4880                           
  4881                           ;functions.c: 1251: for(address = 0; address < finalAddress; address++)
  4882  04FE  3000               	movlw	0
  4883  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  4884  0500  1303               	bcf	3,6	;RP1=0, select bank0
  4885  0501  00CE               	movwf	SendMemoryData@address+3
  4886  0502  3000               	movlw	0
  4887  0503  00CD               	movwf	SendMemoryData@address+2
  4888  0504  3000               	movlw	0
  4889  0505  00CC               	movwf	SendMemoryData@address+1
  4890  0506  3000               	movlw	0
  4891  0507  00CB               	movwf	SendMemoryData@address
  4892  0508                     l2747:	
  4893  0508  0847               	movf	SendMemoryData@finalAddress+3,w
  4894  0509  024E               	subwf	SendMemoryData@address+3,w
  4895  050A  1D03               	skipz
  4896  050B  2D16               	goto	u1845
  4897  050C  0846               	movf	SendMemoryData@finalAddress+2,w
  4898  050D  024D               	subwf	SendMemoryData@address+2,w
  4899  050E  1D03               	skipz
  4900  050F  2D16               	goto	u1845
  4901  0510  0845               	movf	SendMemoryData@finalAddress+1,w
  4902  0511  024C               	subwf	SendMemoryData@address+1,w
  4903  0512  1D03               	skipz
  4904  0513  2D16               	goto	u1845
  4905  0514  0844               	movf	SendMemoryData@finalAddress,w
  4906  0515  024B               	subwf	SendMemoryData@address,w
  4907  0516                     u1845:	
  4908  0516  1803               	btfsc	3,0
  4909  0517  2DB6               	goto	l2749
  4910                           
  4911                           ;functions.c: 1252: {
  4912                           ;functions.c: 1255: addr1 = address & 0xFF;
  4913  0518  084B               	movf	SendMemoryData@address,w
  4914  0519  00BB               	movwf	??_SendMemoryData
  4915  051A  083B               	movf	??_SendMemoryData,w
  4916  051B  00CA               	movwf	SendMemoryData@addr1
  4917                           
  4918                           ;functions.c: 1256: addr2 = (address >> 8) & 0xFF;
  4919  051C  084B               	movf	SendMemoryData@address,w
  4920  051D  00BB               	movwf	??_SendMemoryData
  4921  051E  084C               	movf	SendMemoryData@address+1,w
  4922  051F  00BC               	movwf	??_SendMemoryData+1
  4923  0520  084D               	movf	SendMemoryData@address+2,w
  4924  0521  00BD               	movwf	??_SendMemoryData+2
  4925  0522  084E               	movf	SendMemoryData@address+3,w
  4926  0523  00BE               	movwf	??_SendMemoryData+3
  4927  0524  3008               	movlw	8
  4928  0525                     u1805:	
  4929  0525  1003               	clrc
  4930  0526  0CBE               	rrf	??_SendMemoryData+3,f
  4931  0527  0CBD               	rrf	??_SendMemoryData+2,f
  4932  0528  0CBC               	rrf	??_SendMemoryData+1,f
  4933  0529  0CBB               	rrf	??_SendMemoryData,f
  4934  052A  3EFF               	addlw	-1
  4935  052B  1D03               	skipz
  4936  052C  2D25               	goto	u1805
  4937  052D  083B               	movf	??_SendMemoryData,w
  4938  052E  00BF               	movwf	??_SendMemoryData+4
  4939  052F  083F               	movf	??_SendMemoryData+4,w
  4940  0530  00C9               	movwf	SendMemoryData@addr2
  4941                           
  4942                           ;functions.c: 1257: addr3 = (address >> 16) & 0xFF;
  4943  0531  084B               	movf	SendMemoryData@address,w
  4944  0532  00BB               	movwf	??_SendMemoryData
  4945  0533  084C               	movf	SendMemoryData@address+1,w
  4946  0534  00BC               	movwf	??_SendMemoryData+1
  4947  0535  084D               	movf	SendMemoryData@address+2,w
  4948  0536  00BD               	movwf	??_SendMemoryData+2
  4949  0537  084E               	movf	SendMemoryData@address+3,w
  4950  0538  00BE               	movwf	??_SendMemoryData+3
  4951  0539  3010               	movlw	16
  4952  053A                     u1815:	
  4953  053A  1003               	clrc
  4954  053B  0CBE               	rrf	??_SendMemoryData+3,f
  4955  053C  0CBD               	rrf	??_SendMemoryData+2,f
  4956  053D  0CBC               	rrf	??_SendMemoryData+1,f
  4957  053E  0CBB               	rrf	??_SendMemoryData,f
  4958  053F  3EFF               	addlw	-1
  4959  0540  1D03               	skipz
  4960  0541  2D3A               	goto	u1815
  4961  0542  083B               	movf	??_SendMemoryData,w
  4962  0543  00BF               	movwf	??_SendMemoryData+4
  4963  0544  083F               	movf	??_SendMemoryData+4,w
  4964  0545  00C8               	movwf	SendMemoryData@addr3
  4965                           
  4966                           ;functions.c: 1259: if(address ==0)
  4967  0546  084E               	movf	SendMemoryData@address+3,w
  4968  0547  044D               	iorwf	SendMemoryData@address+2,w
  4969  0548  044C               	iorwf	SendMemoryData@address+1,w
  4970  0549  044B               	iorwf	SendMemoryData@address,w
  4971  054A  1903               	btfsc	3,2
  4972  054B  2D75               	goto	L2
  4973                           
  4974                           ;functions.c: 1261: else if((address % 10) ==0)
  4975                           
  4976                           ;functions.c: 1260: TransmittPacket(11, 1);
  4977  054C  3000               	movlw	0
  4978  054D  1283               	bcf	3,5	;RP0=0, select bank0
  4979  054E  1303               	bcf	3,6	;RP1=0, select bank0
  4980  054F  00A3               	movwf	___llmod@divisor+3
  4981  0550  3000               	movlw	0
  4982  0551  00A2               	movwf	___llmod@divisor+2
  4983  0552  3000               	movlw	0
  4984  0553  00A1               	movwf	___llmod@divisor+1
  4985  0554  300A               	movlw	10
  4986  0555  00A0               	movwf	___llmod@divisor
  4987  0556  084E               	movf	SendMemoryData@address+3,w
  4988  0557  00A7               	movwf	___llmod@dividend+3
  4989  0558  084D               	movf	SendMemoryData@address+2,w
  4990  0559  00A6               	movwf	___llmod@dividend+2
  4991  055A  084C               	movf	SendMemoryData@address+1,w
  4992  055B  00A5               	movwf	___llmod@dividend+1
  4993  055C  084B               	movf	SendMemoryData@address,w
  4994  055D  00A4               	movwf	___llmod@dividend
  4995  055E  120A  158A  20BD  120A  118A  	fcall	___llmod
  4996  0563  1283               	bcf	3,5	;RP0=0, select bank0
  4997  0564  1303               	bcf	3,6	;RP1=0, select bank0
  4998  0565  0823               	movf	?___llmod+3,w
  4999  0566  0422               	iorwf	?___llmod+2,w
  5000  0567  0421               	iorwf	?___llmod+1,w
  5001  0568  0420               	iorwf	?___llmod,w
  5002  0569  1D03               	skipz
  5003  056A  2D7D               	goto	l2741
  5004                           
  5005                           ;functions.c: 1262: {
  5006                           ;functions.c: 1263: TransmittPacket(12, 1);
  5007  056B  01B5               	clrf	TransmittPacket@value
  5008  056C  0AB5               	incf	TransmittPacket@value,f
  5009  056D  300C               	movlw	12
  5010  056E  120A  158A  23BD  120A  118A  	fcall	_TransmittPacket
  5011                           
  5012                           ;functions.c: 1264: TransmittPacket(11,1);
  5013  0573  1283               	bcf	3,5	;RP0=0, select bank0
  5014  0574  1303               	bcf	3,6	;RP1=0, select bank0
  5015  0575                     L2:	
  5016  0575  01B5               	clrf	TransmittPacket@value
  5017  0576  0AB5               	incf	TransmittPacket@value,f
  5018  0577  300B               	movlw	11
  5019  0578  120A  158A  23BD  120A  118A  	fcall	_TransmittPacket
  5020  057D                     l2741:	
  5021                           
  5022                           ;functions.c: 1265: }
  5023                           ;functions.c: 1268: read_write_flash_ram(
  5024                           ;functions.c: 1269: 1,
  5025                           ;functions.c: 1270: 1,
  5026                           ;functions.c: 1271: addr3,
  5027                           ;functions.c: 1272: addr2,
  5028                           ;functions.c: 1273: addr1,
  5029                           ;functions.c: 1274: &value);
  5030  057D  3001               	movlw	1
  5031  057E  1283               	bcf	3,5	;RP0=0, select bank0
  5032  057F  1303               	bcf	3,6	;RP1=0, select bank0
  5033  0580  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  5034  0581  3000               	movlw	0
  5035  0582  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  5036  0583  0848               	movf	SendMemoryData@addr3,w
  5037  0584  00BB               	movwf	??_SendMemoryData
  5038  0585  083B               	movf	??_SendMemoryData,w
  5039  0586  00A7               	movwf	read_write_flash_ram@flash_sector
  5040  0587  0849               	movf	SendMemoryData@addr2,w
  5041  0588  00BC               	movwf	??_SendMemoryData+1
  5042  0589  083C               	movf	??_SendMemoryData+1,w
  5043  058A  00A8               	movwf	read_write_flash_ram@flash_page
  5044  058B  084A               	movf	SendMemoryData@addr1,w
  5045  058C  00BD               	movwf	??_SendMemoryData+2
  5046  058D  083D               	movf	??_SendMemoryData+2,w
  5047  058E  00A9               	movwf	read_write_flash_ram@offset
  5048  058F  3043               	movlw	(low (SendMemoryData@value| 0))& (0+255)
  5049  0590  00BE               	movwf	??_SendMemoryData+3
  5050  0591  083E               	movf	??_SendMemoryData+3,w
  5051  0592  00AA               	movwf	read_write_flash_ram@mem_ptr
  5052  0593  3001               	movlw	1
  5053  0594  120A  158A  22A7  120A  118A  	fcall	_read_write_flash_ram
  5054                           
  5055                           ;functions.c: 1276: TransmittPacket(10, value);
  5056  0599  1283               	bcf	3,5	;RP0=0, select bank0
  5057  059A  1303               	bcf	3,6	;RP1=0, select bank0
  5058  059B  0843               	movf	SendMemoryData@value,w
  5059  059C  00BB               	movwf	??_SendMemoryData
  5060  059D  083B               	movf	??_SendMemoryData,w
  5061  059E  00B5               	movwf	TransmittPacket@value
  5062  059F  300A               	movlw	10
  5063  05A0  120A  158A  23BD  120A  118A  	fcall	_TransmittPacket
  5064  05A5  3001               	movlw	1
  5065  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  5066  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  5067  05A8  07CB               	addwf	SendMemoryData@address,f
  5068  05A9  3000               	movlw	0
  5069  05AA  1803               	skipnc
  5070  05AB  3001               	movlw	1
  5071  05AC  07CC               	addwf	SendMemoryData@address+1,f
  5072  05AD  3000               	movlw	0
  5073  05AE  1803               	skipnc
  5074  05AF  3001               	movlw	1
  5075  05B0  07CD               	addwf	SendMemoryData@address+2,f
  5076  05B1  3000               	movlw	0
  5077  05B2  1803               	skipnc
  5078  05B3  3001               	movlw	1
  5079  05B4  07CE               	addwf	SendMemoryData@address+3,f
  5080  05B5  2D08               	goto	l2747
  5081  05B6                     l2749:	
  5082                           
  5083                           ;functions.c: 1279: }
  5084                           ;functions.c: 1280: TransmittPacket(8, 1);
  5085  05B6  01B5               	clrf	TransmittPacket@value
  5086  05B7  0AB5               	incf	TransmittPacket@value,f
  5087  05B8  3008               	movlw	8
  5088  05B9  120A  158A  23BD   	fcall	_TransmittPacket
  5089  05BC  0008               	return
  5090  05BD                     __end_of_SendMemoryData:	
  5091                           
  5092                           	psect	text16
  5093  0AA7                     __ptext16:	
  5094 ;; *************** function _read_write_flash_ram *****************
  5095 ;; Defined at:
  5096 ;;		line 107 in file "m25p16.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  one_read_zer    1    wreg     unsigned char 
  5099 ;;  bytes_to_rea    2    5[BANK0 ] unsigned short 
  5100 ;;  flash_sector    1    7[BANK0 ] unsigned char 
  5101 ;;  flash_page      1    8[BANK0 ] unsigned char 
  5102 ;;  offset          1    9[BANK0 ] unsigned char 
  5103 ;;  mem_ptr         1   10[BANK0 ] PTR unsigned char 
  5104 ;;		 -> SendMemoryData@value(1), saveDataToFlash@value(1), 
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;  one_read_zer    1   13[BANK0 ] unsigned char 
  5107 ;;  i               2   14[BANK0 ] unsigned short 
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5117 ;;      Params:         0       6       0       0       0
  5118 ;;      Locals:         0       3       0       0       0
  5119 ;;      Temps:          0       2       0       0       0
  5120 ;;      Totals:         0      11       0       0       0
  5121 ;;Total ram usage:       11 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    5
  5124 ;; This function calls:
  5125 ;;		_ReadSPI
  5126 ;;		_WriteSPI
  5127 ;;		_read_ram_status
  5128 ;; This function is called by:
  5129 ;;		_saveDataToFlash
  5130 ;;		_SendMemoryData
  5131 ;;		_write_flash_page
  5132 ;;		_read_flash_page
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           
  5137                           ;psect for function _read_write_flash_ram
  5138  0AA7                     _read_write_flash_ram:	
  5139                           
  5140                           ;incstack = 0
  5141                           ; Regs used in _read_write_flash_ram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5142                           ;read_write_flash_ram@one_read_zero_write stored from wreg
  5143  0AA7  1283               	bcf	3,5	;RP0=0, select bank0
  5144  0AA8  1303               	bcf	3,6	;RP1=0, select bank0
  5145  0AA9  00AD               	movwf	read_write_flash_ram@one_read_zero_write
  5146                           
  5147                           ;m25p16.c: 122: unsigned short int i;
  5148                           ;m25p16.c: 126: RD3 = 0;
  5149  0AAA  1188               	bcf	8,3	;volatile
  5150                           
  5151                           ;m25p16.c: 127: if(one_read_zero_write)
  5152  0AAB  082D               	movf	read_write_flash_ram@one_read_zero_write,w
  5153  0AAC  1903               	btfsc	3,2
  5154  0AAD  2AB0               	goto	l2567
  5155                           
  5156                           ;m25p16.c: 128: {
  5157                           ;m25p16.c: 129: WriteSPI(0x03);
  5158  0AAE  3003               	movlw	3
  5159  0AAF  2ABE               	goto	L3
  5160  0AB0                     l2567:	
  5161                           ;m25p16.c: 130: }
  5162                           
  5163                           
  5164                           ;m25p16.c: 131: else
  5165                           ;m25p16.c: 132: {
  5166                           ;m25p16.c: 133: WriteSPI(0x06);
  5167  0AB0  3006               	movlw	6
  5168  0AB1  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  5169                           
  5170                           ;m25p16.c: 134: RD3 = 1;
  5171  0AB6  1283               	bcf	3,5	;RP0=0, select bank0
  5172  0AB7  1303               	bcf	3,6	;RP1=0, select bank0
  5173  0AB8  1588               	bsf	8,3	;volatile
  5174                           
  5175                           ;m25p16.c: 135: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5176  0AB9  0000               	nop
  5177                           
  5178                           ;m25p16.c: 136: RD3 = 0;
  5179  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  5180  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  5181  0ABC  1188               	bcf	8,3	;volatile
  5182                           
  5183                           ;m25p16.c: 137: WriteSPI(0x02);
  5184  0ABD  3002               	movlw	2
  5185  0ABE                     L3:	
  5186  0ABE  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  5187                           
  5188                           ;m25p16.c: 139: }
  5189                           ;m25p16.c: 141: WriteSPI(flash_sector);
  5190  0AC3  1283               	bcf	3,5	;RP0=0, select bank0
  5191  0AC4  1303               	bcf	3,6	;RP1=0, select bank0
  5192  0AC5  0827               	movf	read_write_flash_ram@flash_sector,w
  5193  0AC6  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  5194                           
  5195                           ;m25p16.c: 142: WriteSPI(flash_page);
  5196  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
  5197  0ACC  1303               	bcf	3,6	;RP1=0, select bank0
  5198  0ACD  0828               	movf	read_write_flash_ram@flash_page,w
  5199  0ACE  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  5200                           
  5201                           ;m25p16.c: 143: WriteSPI(offset);
  5202  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  5203  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  5204  0AD5  0829               	movf	read_write_flash_ram@offset,w
  5205  0AD6  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  5206                           
  5207                           ;m25p16.c: 145: for (i=0;i<bytes_to_readwrite;i++)
  5208  0ADB  1283               	bcf	3,5	;RP0=0, select bank0
  5209  0ADC  1303               	bcf	3,6	;RP1=0, select bank0
  5210  0ADD  01AE               	clrf	read_write_flash_ram@i
  5211  0ADE  01AF               	clrf	read_write_flash_ram@i+1
  5212  0ADF                     l2585:	
  5213  0ADF  0826               	movf	read_write_flash_ram@bytes_to_readwrite+1,w
  5214  0AE0  022F               	subwf	read_write_flash_ram@i+1,w
  5215  0AE1  1D03               	skipz
  5216  0AE2  2AE5               	goto	u1555
  5217  0AE3  0825               	movf	read_write_flash_ram@bytes_to_readwrite,w
  5218  0AE4  022E               	subwf	read_write_flash_ram@i,w
  5219  0AE5                     u1555:	
  5220  0AE5  1803               	btfsc	3,0
  5221  0AE6  2B10               	goto	l600
  5222                           
  5223                           ;m25p16.c: 146: {
  5224                           ;m25p16.c: 147: if (one_read_zero_write)
  5225  0AE7  082D               	movf	read_write_flash_ram@one_read_zero_write,w
  5226  0AE8  1903               	btfsc	3,2
  5227  0AE9  2AFB               	goto	l2581
  5228                           
  5229                           ;m25p16.c: 148: {
  5230                           ;m25p16.c: 149: mem_ptr[i] = ReadSPI();
  5231  0AEA  160A  118A  24C9  120A  158A  	fcall	_ReadSPI
  5232  0AEF  1283               	bcf	3,5	;RP0=0, select bank0
  5233  0AF0  1303               	bcf	3,6	;RP1=0, select bank0
  5234  0AF1  00AB               	movwf	??_read_write_flash_ram
  5235  0AF2  082E               	movf	read_write_flash_ram@i,w
  5236  0AF3  072A               	addwf	read_write_flash_ram@mem_ptr,w
  5237  0AF4  00AC               	movwf	??_read_write_flash_ram+1
  5238  0AF5  082C               	movf	??_read_write_flash_ram+1,w
  5239  0AF6  0084               	movwf	4
  5240  0AF7  082B               	movf	??_read_write_flash_ram,w
  5241  0AF8  1383               	bcf	3,7	;select IRP bank0
  5242  0AF9  0080               	movwf	0
  5243                           
  5244                           ;m25p16.c: 150: }
  5245  0AFA  2B07               	goto	l2583
  5246  0AFB                     l2581:	
  5247                           
  5248                           ;m25p16.c: 151: else
  5249                           ;m25p16.c: 152: {
  5250                           ;m25p16.c: 153: WriteSPI(mem_ptr[i]);
  5251  0AFB  082E               	movf	read_write_flash_ram@i,w
  5252  0AFC  072A               	addwf	read_write_flash_ram@mem_ptr,w
  5253  0AFD  00AB               	movwf	??_read_write_flash_ram
  5254  0AFE  082B               	movf	??_read_write_flash_ram,w
  5255  0AFF  0084               	movwf	4
  5256  0B00  1383               	bcf	3,7	;select IRP bank0
  5257  0B01  0800               	movf	0,w
  5258  0B02  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  5259  0B07                     l2583:	
  5260  0B07  3001               	movlw	1
  5261  0B08  1283               	bcf	3,5	;RP0=0, select bank0
  5262  0B09  1303               	bcf	3,6	;RP1=0, select bank0
  5263  0B0A  07AE               	addwf	read_write_flash_ram@i,f
  5264  0B0B  1803               	skipnc
  5265  0B0C  0AAF               	incf	read_write_flash_ram@i+1,f
  5266  0B0D  3000               	movlw	0
  5267  0B0E  07AF               	addwf	read_write_flash_ram@i+1,f
  5268  0B0F  2ADF               	goto	l2585
  5269  0B10                     l600:	
  5270                           
  5271                           ;m25p16.c: 154: }
  5272                           ;m25p16.c: 155: }
  5273                           ;m25p16.c: 157: RD3 = 1;
  5274  0B10  1588               	bsf	8,3	;volatile
  5275                           
  5276                           ;m25p16.c: 159: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5277  0B11  0000               	nop
  5278  0B12                     l2589:	
  5279                           ;m25p16.c: 160: while (read_ram_status() & 0b00000011) {
  5280                           
  5281  0B12  160A  118A  2559  120A  158A  	fcall	_read_ram_status
  5282  0B17  3903               	andlw	3
  5283  0B18  1903               	btfsc	3,2
  5284  0B19  0008               	return
  5285                           
  5286                           ;m25p16.c: 161: _delay((unsigned long)((1)*(4000000/4000.0)));
  5287  0B1A  30C7               	movlw	199
  5288  0B1B  1283               	bcf	3,5	;RP0=0, select bank0
  5289  0B1C  1303               	bcf	3,6	;RP1=0, select bank0
  5290  0B1D  00AB               	movwf	??_read_write_flash_ram
  5291  0B1E                     u2847:	
  5292  0B1E  2B1F               	nop2
  5293  0B1F  0BAB               	decfsz	??_read_write_flash_ram,f
  5294  0B20  2B1E               	goto	u2847
  5295  0B21  2B22               	nop2
  5296  0B22  2B12               	goto	l2589
  5297  0B23                     __end_of_read_write_flash_ram:	
  5298                           
  5299                           	psect	text17
  5300  1559                     __ptext17:	
  5301 ;; *************** function _read_ram_status *****************
  5302 ;; Defined at:
  5303 ;;		line 57 in file "m25p16.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;		None
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  status          1    4[BANK0 ] unsigned char 
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      unsigned char 
  5310 ;; Registers used:
  5311 ;;		wreg, status,2, status,0, pclath, cstack
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5317 ;;      Params:         0       0       0       0       0
  5318 ;;      Locals:         0       1       0       0       0
  5319 ;;      Temps:          0       1       0       0       0
  5320 ;;      Totals:         0       2       0       0       0
  5321 ;;Total ram usage:        2 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    4
  5324 ;; This function calls:
  5325 ;;		_ReadSPI
  5326 ;;		_WriteSPI
  5327 ;; This function is called by:
  5328 ;;		_main
  5329 ;;		_ReceivedPacketHandler
  5330 ;;		_ram_bulk_erase
  5331 ;;		_read_write_flash_ram
  5332 ;;		_write_ram_status
  5333 ;;		_ram_sector_erase
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function _read_ram_status
  5339  1559                     _read_ram_status:	
  5340                           
  5341                           ;m25p16.c: 59: unsigned char status;
  5342                           ;m25p16.c: 60: RD3 = 0;
  5343                           
  5344                           ;incstack = 0
  5345                           ; Regs used in _read_ram_status: [wreg+status,2+status,0+pclath+cstack]
  5346  1559  1283               	bcf	3,5	;RP0=0, select bank0
  5347  155A  1303               	bcf	3,6	;RP1=0, select bank0
  5348  155B  1188               	bcf	8,3	;volatile
  5349                           
  5350                           ;m25p16.c: 61: WriteSPI(0x05);
  5351  155C  3005               	movlw	5
  5352  155D  160A  118A  2504  160A  118A  	fcall	_WriteSPI
  5353                           
  5354                           ;m25p16.c: 62: status = ReadSPI();
  5355  1562  160A  118A  24C9   	fcall	_ReadSPI
  5356  1565  1283               	bcf	3,5	;RP0=0, select bank0
  5357  1566  1303               	bcf	3,6	;RP1=0, select bank0
  5358  1567  00A3               	movwf	??_read_ram_status
  5359  1568  0823               	movf	??_read_ram_status,w
  5360  1569  00A4               	movwf	read_ram_status@status
  5361                           
  5362                           ;m25p16.c: 63: RD3 = 1;
  5363  156A  1588               	bsf	8,3	;volatile
  5364                           
  5365                           ;m25p16.c: 64: return status;
  5366  156B  0824               	movf	read_ram_status@status,w
  5367  156C  0008               	return
  5368  156D                     __end_of_read_ram_status:	
  5369                           
  5370                           	psect	text18
  5371  08BD                     __ptext18:	
  5372 ;; *************** function ___llmod *****************
  5373 ;; Defined at:
  5374 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;  divisor         4    0[BANK0 ] unsigned long 
  5377 ;;  dividend        4    4[BANK0 ] unsigned long 
  5378 ;; Auto vars:     Size  Location     Type
  5379 ;;  counter         1    9[BANK0 ] unsigned char 
  5380 ;; Return value:  Size  Location     Type
  5381 ;;                  4    0[BANK0 ] unsigned long 
  5382 ;; Registers used:
  5383 ;;		wreg, status,2, status,0
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5389 ;;      Params:         0       8       0       0       0
  5390 ;;      Locals:         0       1       0       0       0
  5391 ;;      Temps:          0       1       0       0       0
  5392 ;;      Totals:         0      10       0       0       0
  5393 ;;Total ram usage:       10 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    2
  5396 ;; This function calls:
  5397 ;;		Nothing
  5398 ;; This function is called by:
  5399 ;;		_SendMemoryData
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           
  5404                           ;psect for function ___llmod
  5405  08BD                     ___llmod:	
  5406                           
  5407                           ;incstack = 0
  5408                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5409  08BD  1283               	bcf	3,5	;RP0=0, select bank0
  5410  08BE  1303               	bcf	3,6	;RP1=0, select bank0
  5411  08BF  0823               	movf	___llmod@divisor+3,w
  5412  08C0  0422               	iorwf	___llmod@divisor+2,w
  5413  08C1  0421               	iorwf	___llmod@divisor+1,w
  5414  08C2  0420               	iorwf	___llmod@divisor,w
  5415  08C3  1903               	skipnz
  5416  08C4  2902               	goto	l2607
  5417  08C5  01A9               	clrf	___llmod@counter
  5418  08C6  0AA9               	incf	___llmod@counter,f
  5419  08C7                     l2597:	
  5420  08C7  1BA3               	btfsc	___llmod@divisor+3,7
  5421  08C8  28D7               	goto	l2599
  5422  08C9  3001               	movlw	1
  5423  08CA  00A8               	movwf	??___llmod
  5424  08CB                     u1585:	
  5425  08CB  1003               	clrc
  5426  08CC  0DA0               	rlf	___llmod@divisor,f
  5427  08CD  0DA1               	rlf	___llmod@divisor+1,f
  5428  08CE  0DA2               	rlf	___llmod@divisor+2,f
  5429  08CF  0DA3               	rlf	___llmod@divisor+3,f
  5430  08D0  0BA8               	decfsz	??___llmod,f
  5431  08D1  28CB               	goto	u1585
  5432  08D2  3001               	movlw	1
  5433  08D3  00A8               	movwf	??___llmod
  5434  08D4  0828               	movf	??___llmod,w
  5435  08D5  07A9               	addwf	___llmod@counter,f
  5436  08D6  28C7               	goto	l2597
  5437  08D7                     l2599:	
  5438  08D7  0823               	movf	___llmod@divisor+3,w
  5439  08D8  0227               	subwf	___llmod@dividend+3,w
  5440  08D9  1D03               	skipz
  5441  08DA  28E5               	goto	u1605
  5442  08DB  0822               	movf	___llmod@divisor+2,w
  5443  08DC  0226               	subwf	___llmod@dividend+2,w
  5444  08DD  1D03               	skipz
  5445  08DE  28E5               	goto	u1605
  5446  08DF  0821               	movf	___llmod@divisor+1,w
  5447  08E0  0225               	subwf	___llmod@dividend+1,w
  5448  08E1  1D03               	skipz
  5449  08E2  28E5               	goto	u1605
  5450  08E3  0820               	movf	___llmod@divisor,w
  5451  08E4  0224               	subwf	___llmod@dividend,w
  5452  08E5                     u1605:	
  5453  08E5  1C03               	skipc
  5454  08E6  28F5               	goto	l2603
  5455  08E7  0820               	movf	___llmod@divisor,w
  5456  08E8  02A4               	subwf	___llmod@dividend,f
  5457  08E9  0821               	movf	___llmod@divisor+1,w
  5458  08EA  1C03               	skipc
  5459  08EB  0F21               	incfsz	___llmod@divisor+1,w
  5460  08EC  02A5               	subwf	___llmod@dividend+1,f
  5461  08ED  0822               	movf	___llmod@divisor+2,w
  5462  08EE  1C03               	skipc
  5463  08EF  0F22               	incfsz	___llmod@divisor+2,w
  5464  08F0  02A6               	subwf	___llmod@dividend+2,f
  5465  08F1  0823               	movf	___llmod@divisor+3,w
  5466  08F2  1C03               	skipc
  5467  08F3  0F23               	incfsz	___llmod@divisor+3,w
  5468  08F4  02A7               	subwf	___llmod@dividend+3,f
  5469  08F5                     l2603:	
  5470  08F5  3001               	movlw	1
  5471  08F6                     u1615:	
  5472  08F6  1003               	clrc
  5473  08F7  0CA3               	rrf	___llmod@divisor+3,f
  5474  08F8  0CA2               	rrf	___llmod@divisor+2,f
  5475  08F9  0CA1               	rrf	___llmod@divisor+1,f
  5476  08FA  0CA0               	rrf	___llmod@divisor,f
  5477  08FB  3EFF               	addlw	-1
  5478  08FC  1D03               	skipz
  5479  08FD  28F6               	goto	u1615
  5480  08FE  3001               	movlw	1
  5481  08FF  02A9               	subwf	___llmod@counter,f
  5482  0900  1D03               	btfss	3,2
  5483  0901  28D7               	goto	l2599
  5484  0902                     l2607:	
  5485  0902  0827               	movf	___llmod@dividend+3,w
  5486  0903  00A3               	movwf	?___llmod+3
  5487  0904  0826               	movf	___llmod@dividend+2,w
  5488  0905  00A2               	movwf	?___llmod+2
  5489  0906  0825               	movf	___llmod@dividend+1,w
  5490  0907  00A1               	movwf	?___llmod+1
  5491  0908  0824               	movf	___llmod@dividend,w
  5492  0909  00A0               	movwf	?___llmod
  5493  090A  0008               	return
  5494  090B                     __end_of___llmod:	
  5495                           
  5496                           	psect	text19
  5497  16CB                     __ptext19:	
  5498 ;; *************** function _ReadMemoryAdress *****************
  5499 ;; Defined at:
  5500 ;;		line 988 in file "functions.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  var3            1    wreg     PTR unsigned char 
  5503 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), IncreaseMemoryAdress@addr3(1), 
  5504 ;;  var2            1    2[BANK0 ] PTR unsigned char 
  5505 ;;		 -> SendMemoryData@addr2(1), saveDataToFlash@addr2(1), IncreaseMemoryAdress@addr2(1), 
  5506 ;;  var1            1    3[BANK0 ] PTR unsigned char 
  5507 ;;		 -> SendMemoryData@addr1(1), saveDataToFlash@addr1(1), IncreaseMemoryAdress@addr1(1), 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  var3            1    5[BANK0 ] PTR unsigned char 
  5510 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), IncreaseMemoryAdress@addr3(1), 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  1    wreg      void 
  5513 ;; Registers used:
  5514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5520 ;;      Params:         0       2       0       0       0
  5521 ;;      Locals:         0       1       0       0       0
  5522 ;;      Temps:          0       1       0       0       0
  5523 ;;      Totals:         0       4       0       0       0
  5524 ;;Total ram usage:        4 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    3
  5527 ;; This function calls:
  5528 ;;		_eeprom_read
  5529 ;; This function is called by:
  5530 ;;		_IncreaseMemoryAdress
  5531 ;;		_saveDataToFlash
  5532 ;;		_SendMemoryData
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           
  5537                           ;psect for function _ReadMemoryAdress
  5538  16CB                     _ReadMemoryAdress:	
  5539                           
  5540                           ;incstack = 0
  5541                           ; Regs used in _ReadMemoryAdress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5542                           ;ReadMemoryAdress@var3 stored from wreg
  5543  16CB  1283               	bcf	3,5	;RP0=0, select bank0
  5544  16CC  1303               	bcf	3,6	;RP1=0, select bank0
  5545  16CD  00A5               	movwf	ReadMemoryAdress@var3
  5546                           
  5547                           ;functions.c: 990: *var3 = eeprom_read(1);
  5548  16CE  3001               	movlw	1
  5549  16CF  160A  118A  2631  160A  118A  	fcall	_eeprom_read
  5550  16D4  1283               	bcf	3,5	;RP0=0, select bank0
  5551  16D5  1303               	bcf	3,6	;RP1=0, select bank0
  5552  16D6  00A4               	movwf	??_ReadMemoryAdress
  5553  16D7  0825               	movf	ReadMemoryAdress@var3,w
  5554  16D8  0084               	movwf	4
  5555  16D9  0824               	movf	??_ReadMemoryAdress,w
  5556  16DA  1383               	bcf	3,7	;select IRP bank0
  5557  16DB  0080               	movwf	0
  5558                           
  5559                           ;functions.c: 991: *var2 = eeprom_read(2);
  5560  16DC  3002               	movlw	2
  5561  16DD  160A  118A  2631  160A  118A  	fcall	_eeprom_read
  5562  16E2  1283               	bcf	3,5	;RP0=0, select bank0
  5563  16E3  1303               	bcf	3,6	;RP1=0, select bank0
  5564  16E4  00A4               	movwf	??_ReadMemoryAdress
  5565  16E5  0822               	movf	ReadMemoryAdress@var2,w
  5566  16E6  0084               	movwf	4
  5567  16E7  0824               	movf	??_ReadMemoryAdress,w
  5568  16E8  1383               	bcf	3,7	;select IRP bank0
  5569  16E9  0080               	movwf	0
  5570                           
  5571                           ;functions.c: 992: *var1 = eeprom_read(3);
  5572  16EA  3003               	movlw	3
  5573  16EB  160A  118A  2631   	fcall	_eeprom_read
  5574  16EE  1283               	bcf	3,5	;RP0=0, select bank0
  5575  16EF  1303               	bcf	3,6	;RP1=0, select bank0
  5576  16F0  00A4               	movwf	??_ReadMemoryAdress
  5577  16F1  0823               	movf	ReadMemoryAdress@var1,w
  5578  16F2  0084               	movwf	4
  5579  16F3  0824               	movf	??_ReadMemoryAdress,w
  5580  16F4  1383               	bcf	3,7	;select IRP bank0
  5581  16F5  0080               	movwf	0
  5582  16F6  0008               	return
  5583  16F7                     __end_of_ReadMemoryAdress:	
  5584                           
  5585                           	psect	text20
  5586  15B6                     __ptext20:	
  5587 ;; *************** function _ResetMemoryAdress *****************
  5588 ;; Defined at:
  5589 ;;		line 1076 in file "functions.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;		None
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;		None
  5594 ;; Return value:  Size  Location     Type
  5595 ;;                  1    wreg      void 
  5596 ;; Registers used:
  5597 ;;		wreg, status,2, status,0, pclath, cstack
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5603 ;;      Params:         0       0       0       0       0
  5604 ;;      Locals:         0       0       0       0       0
  5605 ;;      Temps:          0       0       0       0       0
  5606 ;;      Totals:         0       0       0       0       0
  5607 ;;Total ram usage:        0 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; Hardware stack levels required when called:    3
  5610 ;; This function calls:
  5611 ;;		_eeprom_write
  5612 ;; This function is called by:
  5613 ;;		_main
  5614 ;;		_ReceivedPacketHandler
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           
  5619                           ;psect for function _ResetMemoryAdress
  5620  15B6                     _ResetMemoryAdress:	
  5621                           
  5622                           ;functions.c: 1078: eeprom_write(3,0);
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in _ResetMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  5626  15B6  1283               	bcf	3,5	;RP0=0, select bank0
  5627  15B7  1303               	bcf	3,6	;RP1=0, select bank0
  5628  15B8  01A0               	clrf	eeprom_write@value
  5629  15B9  3003               	movlw	3
  5630  15BA  160A  118A  274F  160A  118A  	fcall	_eeprom_write
  5631                           
  5632                           ;functions.c: 1079: eeprom_write(2,0);
  5633  15BF  1283               	bcf	3,5	;RP0=0, select bank0
  5634  15C0  1303               	bcf	3,6	;RP1=0, select bank0
  5635  15C1  01A0               	clrf	eeprom_write@value
  5636  15C2  3002               	movlw	2
  5637  15C3  160A  118A  274F  160A  118A  	fcall	_eeprom_write
  5638                           
  5639                           ;functions.c: 1080: eeprom_write(1,0);
  5640  15C8  1283               	bcf	3,5	;RP0=0, select bank0
  5641  15C9  1303               	bcf	3,6	;RP1=0, select bank0
  5642  15CA  01A0               	clrf	eeprom_write@value
  5643  15CB  3001               	movlw	1
  5644  15CC  160A  118A  274F   	fcall	_eeprom_write
  5645  15CF  0008               	return
  5646  15D0                     __end_of_ResetMemoryAdress:	
  5647                           
  5648                           	psect	text21
  5649  174F                     __ptext21:	
  5650 ;; *************** function _eeprom_write *****************
  5651 ;; Defined at:
  5652 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eewrite.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;  addr            1    wreg     unsigned char 
  5655 ;;  value           1    0[BANK0 ] unsigned char 
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  addr            1    2[BANK0 ] unsigned char 
  5658 ;; Return value:  Size  Location     Type
  5659 ;;                  1    wreg      void 
  5660 ;; Registers used:
  5661 ;;		wreg, status,2, status,0
  5662 ;; Tracked objects:
  5663 ;;		On entry : 0/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5667 ;;      Params:         0       1       0       0       0
  5668 ;;      Locals:         0       1       0       0       0
  5669 ;;      Temps:          0       1       0       0       0
  5670 ;;      Totals:         0       3       0       0       0
  5671 ;;Total ram usage:        3 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    2
  5674 ;; This function calls:
  5675 ;;		Nothing
  5676 ;; This function is called by:
  5677 ;;		_ReceivedPacketHandler
  5678 ;;		_WriteMemoryAdress
  5679 ;;		_ResetMemoryAdress
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           
  5684                           ;psect for function _eeprom_write
  5685  174F                     _eeprom_write:	
  5686                           
  5687                           ;incstack = 0
  5688                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  5689                           ;eeprom_write@addr stored from wreg
  5690  174F  1283               	bcf	3,5	;RP0=0, select bank0
  5691  1750  1303               	bcf	3,6	;RP1=0, select bank0
  5692  1751  00A2               	movwf	eeprom_write@addr
  5693  1752                     l707:	
  5694  1752  1683               	bsf	3,5	;RP0=1, select bank3
  5695  1753  1703               	bsf	3,6	;RP1=1, select bank3
  5696  1754  188C               	btfsc	12,1	;volsfr
  5697  1755  2F52               	goto	l707
  5698  1756  1283               	bcf	3,5	;RP0=0, select bank0
  5699  1757  1303               	bcf	3,6	;RP1=0, select bank0
  5700  1758  0822               	movf	eeprom_write@addr,w
  5701  1759  1283               	bcf	3,5	;RP0=0, select bank2
  5702  175A  1703               	bsf	3,6	;RP1=1, select bank2
  5703  175B  008D               	movwf	13	;volatile
  5704  175C  1283               	bcf	3,5	;RP0=0, select bank0
  5705  175D  1303               	bcf	3,6	;RP1=0, select bank0
  5706  175E  0820               	movf	eeprom_write@value,w
  5707  175F  1283               	bcf	3,5	;RP0=0, select bank2
  5708  1760  1703               	bsf	3,6	;RP1=1, select bank2
  5709  1761  008C               	movwf	12	;volatile
  5710  1762  303F               	movlw	63
  5711  1763  1283               	bcf	3,5	;RP0=0, select bank0
  5712  1764  1303               	bcf	3,6	;RP1=0, select bank0
  5713  1765  00A1               	movwf	??_eeprom_write
  5714  1766  0821               	movf	??_eeprom_write,w
  5715  1767  1683               	bsf	3,5	;RP0=1, select bank3
  5716  1768  1703               	bsf	3,6	;RP1=1, select bank3
  5717  1769  058C               	andwf	12,f	;volsfr
  5718  176A  1283               	bcf	3,5	;RP0=0, select bank0
  5719  176B  1303               	bcf	3,6	;RP1=0, select bank0
  5720  176C  1003               	bcf	3,0	;volatile
  5721  176D  1B8B               	btfsc	11,7	;volatile
  5722  176E  1403               	bsf	3,0	;volatile
  5723  176F  138B               	bcf	11,7	;volatile
  5724  1770  1683               	bsf	3,5	;RP0=1, select bank3
  5725  1771  1703               	bsf	3,6	;RP1=1, select bank3
  5726  1772  150C               	bsf	12,2	;volsfr
  5727  1773  3055               	movlw	85
  5728  1774  008D               	movwf	13	;volsfr
  5729  1775  30AA               	movlw	170
  5730  1776  008D               	movwf	13	;volsfr
  5731  1777  148C               	bsf	12,1	;volsfr
  5732  1778  110C               	bcf	12,2	;volsfr
  5733  1779  1283               	bcf	3,5	;RP0=0, select bank0
  5734  177A  1303               	bcf	3,6	;RP1=0, select bank0
  5735  177B  1C03               	btfss	3,0	;volatile
  5736  177C  0008               	return
  5737  177D  178B               	bsf	11,7	;volatile
  5738  177E  0008               	return
  5739  177F                     __end_of_eeprom_write:	
  5740                           
  5741                           	psect	text22
  5742  14E2                     __ptext22:	
  5743 ;; *************** function _OperationMode *****************
  5744 ;; Defined at:
  5745 ;;		line 964 in file "functions.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;		None
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;  bracketStatu    1    1[BANK0 ] unsigned char 
  5750 ;; Return value:  Size  Location     Type
  5751 ;;                  1    wreg      unsigned char 
  5752 ;; Registers used:
  5753 ;;		wreg, status,2
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5759 ;;      Params:         0       0       0       0       0
  5760 ;;      Locals:         0       1       0       0       0
  5761 ;;      Temps:          0       1       0       0       0
  5762 ;;      Totals:         0       2       0       0       0
  5763 ;;Total ram usage:        2 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; Hardware stack levels required when called:    2
  5766 ;; This function calls:
  5767 ;;		Nothing
  5768 ;; This function is called by:
  5769 ;;		_main
  5770 ;;		_ReceivedPacketHandler
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function _OperationMode
  5776  14E2                     _OperationMode:	
  5777                           
  5778                           ;functions.c: 966: unsigned char bracketStatus;
  5779                           ;functions.c: 967: bracketStatus = ((~PORTB) & 0b00000111) ;
  5780                           
  5781                           ;incstack = 0
  5782                           ; Regs used in _OperationMode: [wreg+status,2]
  5783  14E2  1283               	bcf	3,5	;RP0=0, select bank0
  5784  14E3  1303               	bcf	3,6	;RP1=0, select bank0
  5785  14E4  0906               	comf	6,w	;volatile
  5786  14E5  3907               	andlw	7
  5787  14E6  00A0               	movwf	??_OperationMode
  5788  14E7  0820               	movf	??_OperationMode,w
  5789  14E8  00A1               	movwf	OperationMode@bracketStatus
  5790                           
  5791                           ;functions.c: 969: return bracketStatus;
  5792  14E9  0821               	movf	OperationMode@bracketStatus,w
  5793  14EA  0008               	return
  5794  14EB                     __end_of_OperationMode:	
  5795                           
  5796                           	psect	text23
  5797  07F1                     __ptext23:	
  5798 ;; *************** function _ReadFIFO *****************
  5799 ;; Defined at:
  5800 ;;		line 775 in file "functions.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;		None
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;  value           1    4[BANK0 ] unsigned char 
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  1    wreg      unsigned char 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0, pclath, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5814 ;;      Params:         0       0       0       0       0
  5815 ;;      Locals:         0       1       0       0       0
  5816 ;;      Temps:          0       1       0       0       0
  5817 ;;      Totals:         0       2       0       0       0
  5818 ;;Total ram usage:        2 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    4
  5821 ;; This function calls:
  5822 ;;		_ReadSPI
  5823 ;; This function is called by:
  5824 ;;		_TransiverReadFIFO
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           
  5829                           ;psect for function _ReadFIFO
  5830  07F1                     _ReadFIFO:	
  5831                           
  5832                           ;functions.c: 777: BYTE value;
  5833                           ;functions.c: 778: RA5 = 0;
  5834                           
  5835                           ;incstack = 0
  5836                           ; Regs used in _ReadFIFO: [wreg+status,2+status,0+pclath+cstack]
  5837  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  5838  07F2  1303               	bcf	3,6	;RP1=0, select bank0
  5839  07F3  1285               	bcf	5,5	;volatile
  5840                           
  5841                           ;functions.c: 779: value = ReadSPI();
  5842  07F4  160A  118A  24C9   	fcall	_ReadSPI
  5843  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  5844  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  5845  07F9  00A3               	movwf	??_ReadFIFO
  5846  07FA  0823               	movf	??_ReadFIFO,w
  5847  07FB  00A4               	movwf	ReadFIFO@value
  5848                           
  5849                           ;functions.c: 780: RA5 = 1;
  5850  07FC  1685               	bsf	5,5	;volatile
  5851                           
  5852                           ;functions.c: 781: return value;
  5853  07FD  0824               	movf	ReadFIFO@value,w
  5854  07FE  0008               	return
  5855  07FF                     __end_of_ReadFIFO:	
  5856                           
  5857                           	psect	text24
  5858  0D31                     __ptext24:	
  5859 ;; *************** function _TransiverInit *****************
  5860 ;; Defined at:
  5861 ;;		line 540 in file "functions.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;		None
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;		None
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      void 
  5868 ;; Registers used:
  5869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5875 ;;      Params:         0       0       0       0       0
  5876 ;;      Locals:         0       0       0       0       0
  5877 ;;      Temps:          0       1       0       0       0
  5878 ;;      Totals:         0       1       0       0       0
  5879 ;;Total ram usage:        1 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    7
  5882 ;; This function calls:
  5883 ;;		_Blink
  5884 ;;		_FindChannel
  5885 ;;		_RegisterRead
  5886 ;;		_RegisterSet
  5887 ;;		_SetRFMode
  5888 ;; This function is called by:
  5889 ;;		_main
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893                           
  5894                           ;psect for function _TransiverInit
  5895  0D31                     _TransiverInit:	
  5896                           
  5897                           ;functions.c: 543: RegisterSet(0x00, 0x30);
  5898                           
  5899                           ;incstack = 0
  5900                           ; Regs used in _TransiverInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5901  0D31  3030               	movlw	48
  5902  0D32  1283               	bcf	3,5	;RP0=0, select bank0
  5903  0D33  1303               	bcf	3,6	;RP1=0, select bank0
  5904  0D34  00B5               	movwf	??_TransiverInit
  5905  0D35  0835               	movf	??_TransiverInit,w
  5906  0D36  00A7               	movwf	RegisterSet@value
  5907  0D37  3000               	movlw	0
  5908  0D38  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  5909                           
  5910                           ;functions.c: 544: RegisterSet(0x01,(0xA8));
  5911  0D3D  30A8               	movlw	168
  5912  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  5913  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  5914  0D40  00B5               	movwf	??_TransiverInit
  5915  0D41  0835               	movf	??_TransiverInit,w
  5916  0D42  00A7               	movwf	RegisterSet@value
  5917  0D43  3001               	movlw	1
  5918  0D44  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  5919                           
  5920                           ;functions.c: 545: RegisterSet(0x02, 0x09);
  5921  0D49  3009               	movlw	9
  5922  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  5923  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  5924  0D4C  00B5               	movwf	??_TransiverInit
  5925  0D4D  0835               	movf	??_TransiverInit,w
  5926  0D4E  00A7               	movwf	RegisterSet@value
  5927  0D4F  3002               	movlw	2
  5928  0D50  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  5929                           
  5930                           ;functions.c: 546: RegisterSet(0x03, 0x07);
  5931  0D55  3007               	movlw	7
  5932  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  5933  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  5934  0D58  00B5               	movwf	??_TransiverInit
  5935  0D59  0835               	movf	??_TransiverInit,w
  5936  0D5A  00A7               	movwf	RegisterSet@value
  5937  0D5B  3003               	movlw	3
  5938  0D5C  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  5939                           
  5940                           ;functions.c: 547: RegisterSet(0x05,(0x0A));
  5941  0D61  300A               	movlw	10
  5942  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  5943  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  5944  0D64  00B5               	movwf	??_TransiverInit
  5945  0D65  0835               	movf	??_TransiverInit,w
  5946  0D66  00A7               	movwf	RegisterSet@value
  5947  0D67  3005               	movlw	5
  5948  0D68  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  5949                           
  5950                           ;functions.c: 548: RegisterSet(0x0D,(0x00|0xB0|0x09));
  5951  0D6D  30B9               	movlw	185
  5952  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
  5953  0D6F  1303               	bcf	3,6	;RP1=0, select bank0
  5954  0D70  00B5               	movwf	??_TransiverInit
  5955  0D71  0835               	movf	??_TransiverInit,w
  5956  0D72  00A7               	movwf	RegisterSet@value
  5957  0D73  300D               	movlw	13
  5958  0D74  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  5959                           
  5960                           ;functions.c: 549: RegisterSet(0x0E,(0x01|0x10|0x01));
  5961  0D79  3011               	movlw	17
  5962  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  5963  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  5964  0D7C  00B5               	movwf	??_TransiverInit
  5965  0D7D  0835               	movf	??_TransiverInit,w
  5966  0D7E  00A7               	movwf	RegisterSet@value
  5967  0D7F  300E               	movlw	14
  5968  0D80  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  5969                           
  5970                           ;functions.c: 550: RegisterSet(0x10, 0xA3);
  5971  0D85  30A3               	movlw	163
  5972  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  5973  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  5974  0D88  00B5               	movwf	??_TransiverInit
  5975  0D89  0835               	movf	??_TransiverInit,w
  5976  0D8A  00A7               	movwf	RegisterSet@value
  5977  0D8B  3010               	movlw	16
  5978  0D8C  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  5979                           
  5980                           ;functions.c: 551: RegisterSet(0x12,(0x18|0x20|0x06));
  5981  0D91  303E               	movlw	62
  5982  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  5983  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  5984  0D94  00B5               	movwf	??_TransiverInit
  5985  0D95  0835               	movf	??_TransiverInit,w
  5986  0D96  00A7               	movwf	RegisterSet@value
  5987  0D97  3012               	movlw	18
  5988  0D98  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  5989                           
  5990                           ;functions.c: 552: RegisterSet(0x16,('S'));
  5991  0D9D  3053               	movlw	83
  5992  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  5993  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  5994  0DA0  00B5               	movwf	??_TransiverInit
  5995  0DA1  0835               	movf	??_TransiverInit,w
  5996  0DA2  00A7               	movwf	RegisterSet@value
  5997  0DA3  3016               	movlw	22
  5998  0DA4  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  5999                           
  6000                           ;functions.c: 553: RegisterSet(0x17,('Y'));
  6001  0DA9  3059               	movlw	89
  6002  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  6003  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  6004  0DAC  00B5               	movwf	??_TransiverInit
  6005  0DAD  0835               	movf	??_TransiverInit,w
  6006  0DAE  00A7               	movwf	RegisterSet@value
  6007  0DAF  3017               	movlw	23
  6008  0DB0  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6009                           
  6010                           ;functions.c: 554: RegisterSet(0x18,('N'));
  6011  0DB5  304E               	movlw	78
  6012  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  6013  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  6014  0DB8  00B5               	movwf	??_TransiverInit
  6015  0DB9  0835               	movf	??_TransiverInit,w
  6016  0DBA  00A7               	movwf	RegisterSet@value
  6017  0DBB  3018               	movlw	24
  6018  0DBC  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6019                           
  6020                           ;functions.c: 555: RegisterSet(0x19,('C'));
  6021  0DC1  3043               	movlw	67
  6022  0DC2  1283               	bcf	3,5	;RP0=0, select bank0
  6023  0DC3  1303               	bcf	3,6	;RP1=0, select bank0
  6024  0DC4  00B5               	movwf	??_TransiverInit
  6025  0DC5  0835               	movf	??_TransiverInit,w
  6026  0DC6  00A7               	movwf	RegisterSet@value
  6027  0DC7  3019               	movlw	25
  6028  0DC8  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6029                           
  6030                           ;functions.c: 556: RegisterSet(0x1A, 0x72);
  6031  0DCD  3072               	movlw	114
  6032  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  6033  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  6034  0DD0  00B5               	movwf	??_TransiverInit
  6035  0DD1  0835               	movf	??_TransiverInit,w
  6036  0DD2  00A7               	movwf	RegisterSet@value
  6037  0DD3  301A               	movlw	26
  6038  0DD4  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6039                           
  6040                           ;functions.c: 557: RegisterSet(0x1B, 0x3C);
  6041  0DD9  303C               	movlw	60
  6042  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  6043  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  6044  0DDC  00B5               	movwf	??_TransiverInit
  6045  0DDD  0835               	movf	??_TransiverInit,w
  6046  0DDE  00A7               	movwf	RegisterSet@value
  6047  0DDF  301B               	movlw	27
  6048  0DE0  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6049                           
  6050                           ;functions.c: 558: RegisterSet(0x1F, 0x80);
  6051  0DE5  3080               	movlw	128
  6052  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  6053  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  6054  0DE8  00B5               	movwf	??_TransiverInit
  6055  0DE9  0835               	movf	??_TransiverInit,w
  6056  0DEA  00A7               	movwf	RegisterSet@value
  6057  0DEB  301F               	movlw	31
  6058  0DEC  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6059                           
  6060                           ;functions.c: 559: RegisterSet(0x00, (RegisterRead(0x00)|0x01));
  6061  0DF1  3000               	movlw	0
  6062  0DF2  160A  118A  25D0  120A  158A  	fcall	_RegisterRead
  6063  0DF7  3801               	iorlw	1
  6064  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  6065  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  6066  0DFA  00B5               	movwf	??_TransiverInit
  6067  0DFB  0835               	movf	??_TransiverInit,w
  6068  0DFC  00A7               	movwf	RegisterSet@value
  6069  0DFD  3000               	movlw	0
  6070  0DFE  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6071                           
  6072                           ;functions.c: 561: if(FindChannel() == 1)
  6073  0E03  120A  158A  2708  120A  158A  	fcall	_FindChannel
  6074  0E08  3A01               	xorlw	1
  6075  0E09  1D03               	skipz
  6076  0E0A  2E16               	goto	l3091
  6077                           
  6078                           ;functions.c: 562: Blink(1);
  6079  0E0B  3001               	movlw	1
  6080  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  6081  0E0D  1303               	bcf	3,6	;RP1=0, select bank0
  6082  0E0E  00A6               	movwf	Blink@n
  6083  0E0F  3000               	movlw	0
  6084  0E10  00A7               	movwf	Blink@n+1
  6085  0E11  120A  158A  2000  120A  158A  	fcall	_Blink
  6086  0E16                     l3091:	
  6087                           
  6088                           ;functions.c: 563: SetRFMode(0x00);
  6089  0E16  3000               	movlw	0
  6090  0E17  120A  158A  2238   	fcall	_SetRFMode
  6091  0E1A  0008               	return
  6092  0E1B                     __end_of_TransiverInit:	
  6093                           
  6094                           	psect	text25
  6095  0800                     __ptext25:	
  6096 ;; *************** function _Blink *****************
  6097 ;; Defined at:
  6098 ;;		line 688 in file "functions.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;  n               2    6[BANK0 ] int 
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;  i               2    9[BANK0 ] int 
  6103 ;; Return value:  Size  Location     Type
  6104 ;;                  1    wreg      void 
  6105 ;; Registers used:
  6106 ;;		wreg, status,2, status,0, pclath, cstack
  6107 ;; Tracked objects:
  6108 ;;		On entry : 0/0
  6109 ;;		On exit  : 0/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6112 ;;      Params:         0       2       0       0       0
  6113 ;;      Locals:         0       2       0       0       0
  6114 ;;      Temps:          0       1       0       0       0
  6115 ;;      Totals:         0       5       0       0       0
  6116 ;;Total ram usage:        5 bytes
  6117 ;; Hardware stack levels used:    1
  6118 ;; Hardware stack levels required when called:    3
  6119 ;; This function calls:
  6120 ;;		_DelayDs
  6121 ;; This function is called by:
  6122 ;;		_TransiverInit
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           
  6127                           ;psect for function _Blink
  6128  0800                     _Blink:	
  6129                           
  6130                           ;functions.c: 690: for(int i = 1;i<=n;i++)
  6131                           
  6132                           ;incstack = 0
  6133                           ; Regs used in _Blink: [wreg+status,2+status,0+pclath+cstack]
  6134  0800  3001               	movlw	1
  6135  0801  1283               	bcf	3,5	;RP0=0, select bank0
  6136  0802  1303               	bcf	3,6	;RP1=0, select bank0
  6137  0803  00A9               	movwf	Blink@i
  6138  0804  3000               	movlw	0
  6139  0805  00AA               	movwf	Blink@i+1
  6140  0806                     l2931:	
  6141  0806  0827               	movf	Blink@n+1,w
  6142  0807  3A80               	xorlw	128
  6143  0808  00A8               	movwf	??_Blink
  6144  0809  082A               	movf	Blink@i+1,w
  6145  080A  3A80               	xorlw	128
  6146  080B  0228               	subwf	??_Blink,w
  6147  080C  1D03               	skipz
  6148  080D  2810               	goto	u2155
  6149  080E  0829               	movf	Blink@i,w
  6150  080F  0226               	subwf	Blink@n,w
  6151  0810                     u2155:	
  6152  0810  1C03               	btfss	3,0
  6153  0811  0008               	return
  6154                           
  6155                           ;functions.c: 691: {
  6156                           ;functions.c: 692: RC1 = 1;
  6157  0812  1283               	bcf	3,5	;RP0=0, select bank0
  6158  0813  1303               	bcf	3,6	;RP1=0, select bank0
  6159  0814  1487               	bsf	7,1	;volatile
  6160                           
  6161                           ;functions.c: 693: DelayDs(2);
  6162  0815  3002               	movlw	2
  6163  0816  00A0               	movwf	DelayDs@cnt
  6164  0817  3000               	movlw	0
  6165  0818  00A1               	movwf	DelayDs@cnt+1
  6166  0819  160A  118A  260E  120A  158A  	fcall	_DelayDs
  6167                           
  6168                           ;functions.c: 694: RC1 = 0;
  6169  081E  1283               	bcf	3,5	;RP0=0, select bank0
  6170  081F  1303               	bcf	3,6	;RP1=0, select bank0
  6171  0820  1087               	bcf	7,1	;volatile
  6172                           
  6173                           ;functions.c: 695: DelayDs(6);
  6174  0821  3006               	movlw	6
  6175  0822  00A0               	movwf	DelayDs@cnt
  6176  0823  3000               	movlw	0
  6177  0824  00A1               	movwf	DelayDs@cnt+1
  6178  0825  160A  118A  260E  120A  158A  	fcall	_DelayDs
  6179  082A  3001               	movlw	1
  6180  082B  1283               	bcf	3,5	;RP0=0, select bank0
  6181  082C  1303               	bcf	3,6	;RP1=0, select bank0
  6182  082D  07A9               	addwf	Blink@i,f
  6183  082E  1803               	skipnc
  6184  082F  0AAA               	incf	Blink@i+1,f
  6185  0830  3000               	movlw	0
  6186  0831  07AA               	addwf	Blink@i+1,f
  6187  0832  2806               	goto	l2931
  6188  0833                     __end_of_Blink:	
  6189                           
  6190                           	psect	text26
  6191  0967                     __ptext26:	
  6192 ;; *************** function _PICInit *****************
  6193 ;; Defined at:
  6194 ;;		line 428 in file "functions.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;		None
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;		None
  6199 ;; Return value:  Size  Location     Type
  6200 ;;                  1    wreg      void 
  6201 ;; Registers used:
  6202 ;;		wreg, status,2, status,0
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : 0/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6208 ;;      Params:         0       0       0       0       0
  6209 ;;      Locals:         0       0       0       0       0
  6210 ;;      Temps:          0       0       0       0       0
  6211 ;;      Totals:         0       0       0       0       0
  6212 ;;Total ram usage:        0 bytes
  6213 ;; Hardware stack levels used:    1
  6214 ;; Hardware stack levels required when called:    2
  6215 ;; This function calls:
  6216 ;;		Nothing
  6217 ;; This function is called by:
  6218 ;;		_main
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           
  6223                           ;psect for function _PICInit
  6224  0967                     _PICInit:	
  6225                           
  6226                           ;functions.c: 432: OSCCONbits.IRCF2 = 1;
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _PICInit: [wreg+status,2+status,0]
  6230  0967  1683               	bsf	3,5	;RP0=1, select bank1
  6231  0968  1303               	bcf	3,6	;RP1=0, select bank1
  6232  0969  170F               	bsf	15,6	;volatile
  6233                           
  6234                           ;functions.c: 433: OSCCONbits.IRCF1 = 1;
  6235  096A  168F               	bsf	15,5	;volatile
  6236                           
  6237                           ;functions.c: 434: OSCCONbits.IRCF0 = 0;
  6238  096B  120F               	bcf	15,4	;volatile
  6239                           
  6240                           ;functions.c: 435: OSCCONbits.SCS = 1;
  6241  096C  140F               	bsf	15,0	;volatile
  6242                           
  6243                           ;functions.c: 438: PORTA = 0x00;
  6244  096D  1283               	bcf	3,5	;RP0=0, select bank0
  6245  096E  1303               	bcf	3,6	;RP1=0, select bank0
  6246  096F  0185               	clrf	5	;volatile
  6247                           
  6248                           ;functions.c: 439: PORTB = 0x00;
  6249  0970  0186               	clrf	6	;volatile
  6250                           
  6251                           ;functions.c: 440: PORTC = 0x00;
  6252  0971  0187               	clrf	7	;volatile
  6253                           
  6254                           ;functions.c: 441: PORTD = 0x00;
  6255  0972  0188               	clrf	8	;volatile
  6256                           
  6257                           ;functions.c: 442: PORTE = 0x00;
  6258  0973  0189               	clrf	9	;volatile
  6259                           
  6260                           ;functions.c: 444: TRISA = 0b00001011;
  6261  0974  300B               	movlw	11
  6262  0975  1683               	bsf	3,5	;RP0=1, select bank1
  6263  0976  1303               	bcf	3,6	;RP1=0, select bank1
  6264  0977  0085               	movwf	5	;volatile
  6265                           
  6266                           ;functions.c: 445: TRISB = 0b00111101;
  6267  0978  303D               	movlw	61
  6268  0979  0086               	movwf	6	;volatile
  6269                           
  6270                           ;functions.c: 446: TRISC = 0b00010000;
  6271  097A  3010               	movlw	16
  6272  097B  0087               	movwf	7	;volatile
  6273                           
  6274                           ;functions.c: 447: TRISD = 0b00000111;
  6275  097C  3007               	movlw	7
  6276  097D  0088               	movwf	8	;volatile
  6277                           
  6278                           ;functions.c: 448: TRISE = 0b00000111;
  6279  097E  3007               	movlw	7
  6280  097F  0089               	movwf	9	;volatile
  6281                           
  6282                           ;functions.c: 450: ANSEL = 0b00000000;
  6283  0980  1683               	bsf	3,5	;RP0=1, select bank3
  6284  0981  1703               	bsf	3,6	;RP1=1, select bank3
  6285  0982  0188               	clrf	8	;volatile
  6286                           
  6287                           ;functions.c: 451: ANSELH = 0b00000000;
  6288  0983  0189               	clrf	9	;volatile
  6289                           
  6290                           ;functions.c: 452: ANSELbits.ANS0 = 1;
  6291  0984  1408               	bsf	8,0	;volatile
  6292                           
  6293                           ;functions.c: 453: ANSELbits.ANS3 = 1;
  6294  0985  1588               	bsf	8,3	;volatile
  6295                           
  6296                           ;functions.c: 454: ANSELbits.ANS5 = 1;
  6297  0986  1688               	bsf	8,5	;volatile
  6298                           
  6299                           ;functions.c: 455: ANSELbits.ANS6 = 1;
  6300  0987  1708               	bsf	8,6	;volatile
  6301                           
  6302                           ;functions.c: 456: ANSELbits.ANS7 = 1;
  6303  0988  1788               	bsf	8,7	;volatile
  6304                           
  6305                           ;functions.c: 457: ANSELHbits.ANS8 = 1;
  6306  0989  1409               	bsf	9,0	;volatile
  6307                           
  6308                           ;functions.c: 459: OPTION_REGbits.nRBPU = 0;
  6309  098A  1683               	bsf	3,5	;RP0=1, select bank1
  6310  098B  1303               	bcf	3,6	;RP1=0, select bank1
  6311  098C  1381               	bcf	1,7	;volatile
  6312                           
  6313                           ;functions.c: 460: WPUBbits.WPUB0 = 1;
  6314  098D  1415               	bsf	21,0	;volatile
  6315  098E                     l402:	
  6316                           ;functions.c: 461: while(!RB0);
  6317                           
  6318  098E  1283               	bcf	3,5	;RP0=0, select bank0
  6319  098F  1C06               	btfss	6,0	;volatile
  6320  0990  298E               	goto	l402
  6321                           
  6322                           ;functions.c: 462: WPUBbits.WPUB5 = 1;
  6323  0991  1683               	bsf	3,5	;RP0=1, select bank1
  6324  0992  1303               	bcf	3,6	;RP1=0, select bank1
  6325  0993  1695               	bsf	21,5	;volatile
  6326  0994                     l405:	
  6327                           ;functions.c: 463: while(!RB5);
  6328                           
  6329  0994  1283               	bcf	3,5	;RP0=0, select bank0
  6330  0995  1E86               	btfss	6,5	;volatile
  6331  0996  2994               	goto	l405
  6332                           
  6333                           ;functions.c: 466: SSPCONbits.SSPM=0x00;
  6334  0997  30F0               	movlw	-16
  6335  0998  0594               	andwf	20,f	;volatile
  6336                           
  6337                           ;functions.c: 467: SSPCONbits.CKP=0;
  6338  0999  1214               	bcf	20,4	;volatile
  6339                           
  6340                           ;functions.c: 468: SSPSTATbits.CKE=1;
  6341  099A  1683               	bsf	3,5	;RP0=1, select bank1
  6342  099B  1303               	bcf	3,6	;RP1=0, select bank1
  6343  099C  1714               	bsf	20,6	;volatile
  6344                           
  6345                           ;functions.c: 469: SSPSTATbits.SMP=0;
  6346  099D  1394               	bcf	20,7	;volatile
  6347                           
  6348                           ;functions.c: 470: SSPCONbits.SSPEN=0x01;
  6349  099E  1283               	bcf	3,5	;RP0=0, select bank0
  6350  099F  1303               	bcf	3,6	;RP1=0, select bank0
  6351  09A0  1694               	bsf	20,5	;volatile
  6352                           
  6353                           ;functions.c: 471: SSPIE = 0;
  6354  09A1  1683               	bsf	3,5	;RP0=1, select bank1
  6355  09A2  1303               	bcf	3,6	;RP1=0, select bank1
  6356  09A3  118C               	bcf	12,3	;volatile
  6357                           
  6358                           ;functions.c: 474: RA5 = 1;
  6359  09A4  1283               	bcf	3,5	;RP0=0, select bank0
  6360  09A5  1303               	bcf	3,6	;RP1=0, select bank0
  6361  09A6  1685               	bsf	5,5	;volatile
  6362                           
  6363                           ;functions.c: 475: RA4 = 1;
  6364  09A7  1605               	bsf	5,4	;volatile
  6365                           
  6366                           ;functions.c: 476: RD4 = 1;
  6367  09A8  1608               	bsf	8,4	;volatile
  6368                           
  6369                           ;functions.c: 477: RD3 = 1;
  6370  09A9  1588               	bsf	8,3	;volatile
  6371                           
  6372                           ;functions.c: 479: RB1 = 1;
  6373  09AA  1486               	bsf	6,1	;volatile
  6374                           
  6375                           ;functions.c: 484: INTCONbits.RBIE = 1;
  6376  09AB  158B               	bsf	11,3	;volatile
  6377                           
  6378                           ;functions.c: 485: INTCONbits.PEIE = 1;
  6379  09AC  170B               	bsf	11,6	;volatile
  6380                           
  6381                           ;functions.c: 486: PIE1bits.TMR1IE = 1;
  6382  09AD  1683               	bsf	3,5	;RP0=1, select bank1
  6383  09AE  1303               	bcf	3,6	;RP1=0, select bank1
  6384  09AF  140C               	bsf	12,0	;volatile
  6385                           
  6386                           ;functions.c: 487: INTCONbits.GIE = 1;
  6387  09B0  178B               	bsf	11,7	;volatile
  6388                           
  6389                           ;functions.c: 488: IOCBbits.IOCB5 = 1;
  6390  09B1  1696               	bsf	22,5	;volatile
  6391                           
  6392                           ;functions.c: 491: T1CON = 0b00110000;
  6393  09B2  3030               	movlw	48
  6394  09B3  1283               	bcf	3,5	;RP0=0, select bank0
  6395  09B4  1303               	bcf	3,6	;RP1=0, select bank0
  6396  09B5  0090               	movwf	16	;volatile
  6397                           
  6398                           ;functions.c: 492: TMR1H = 0x0B;
  6399  09B6  300B               	movlw	11
  6400  09B7  008F               	movwf	15	;volatile
  6401                           
  6402                           ;functions.c: 493: TMR1L = 0xDB;
  6403  09B8  30DB               	movlw	219
  6404  09B9  008E               	movwf	14	;volatile
  6405                           
  6406                           ;functions.c: 494: T1CONbits.TMR1ON = 1;
  6407  09BA  1410               	bsf	16,0	;volatile
  6408                           
  6409                           ;functions.c: 497: ADCON0bits.ADCS0 = 0;
  6410  09BB  131F               	bcf	31,6	;volatile
  6411                           
  6412                           ;functions.c: 498: ADCON0bits.ADCS1 = 0;
  6413  09BC  139F               	bcf	31,7	;volatile
  6414                           
  6415                           ;functions.c: 499: ADCON1bits.ADFM = 0;
  6416  09BD  1683               	bsf	3,5	;RP0=1, select bank1
  6417  09BE  1303               	bcf	3,6	;RP1=0, select bank1
  6418  09BF  139F               	bcf	31,7	;volatile
  6419                           
  6420                           ;functions.c: 500: ADCON1bits.VCFG1 = 0;
  6421  09C0  129F               	bcf	31,5	;volatile
  6422                           
  6423                           ;functions.c: 501: ADCON1bits.VCFG0 = 0;
  6424  09C1  121F               	bcf	31,4	;volatile
  6425                           
  6426                           ;functions.c: 504: intSecondCounter = 0;
  6427  09C2  1283               	bcf	3,5	;RP0=0, select bank0
  6428  09C3  1303               	bcf	3,6	;RP1=0, select bank0
  6429  09C4  01E5               	clrf	_intSecondCounter
  6430  09C5  01E6               	clrf	_intSecondCounter+1
  6431                           
  6432                           ;functions.c: 505: intHalfSecondCounter = 0;
  6433  09C6  01E1               	clrf	_intHalfSecondCounter
  6434  09C7  01E2               	clrf	_intHalfSecondCounter+1
  6435                           
  6436                           ;functions.c: 506: intMinuteCounter = 0;
  6437  09C8  01E3               	clrf	_intMinuteCounter
  6438  09C9  01E4               	clrf	_intMinuteCounter+1
  6439  09CA  0008               	return
  6440  09CB                     __end_of_PICInit:	
  6441                           
  6442                           	psect	text27
  6443  1534                     __ptext27:	
  6444 ;; *************** function _Mode_5 *****************
  6445 ;; Defined at:
  6446 ;;		line 329 in file "functions.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;		None
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;		None
  6451 ;; Return value:  Size  Location     Type
  6452 ;;                  1    wreg      void 
  6453 ;; Registers used:
  6454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6455 ;; Tracked objects:
  6456 ;;		On entry : 0/0
  6457 ;;		On exit  : 0/0
  6458 ;;		Unchanged: 0/0
  6459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6460 ;;      Params:         0       0       0       0       0
  6461 ;;      Locals:         0       0       0       0       0
  6462 ;;      Temps:          0       1       0       0       0
  6463 ;;      Totals:         0       1       0       0       0
  6464 ;;Total ram usage:        1 bytes
  6465 ;; Hardware stack levels used:    1
  6466 ;; Hardware stack levels required when called:    8
  6467 ;; This function calls:
  6468 ;;		_LightWithSensController
  6469 ;;		_TransmittPacket
  6470 ;; This function is called by:
  6471 ;;		_main
  6472 ;; This function uses a non-reentrant model
  6473 ;;
  6474                           
  6475                           
  6476                           ;psect for function _Mode_5
  6477  1534                     _Mode_5:	
  6478                           
  6479                           ;functions.c: 331: if(!RB5)
  6480                           
  6481                           ;incstack = 0
  6482 ;; hardware stack exceeded
  6483                           ; Regs used in _Mode_5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6484  1534  1283               	bcf	3,5	;RP0=0, select bank0
  6485  1535  1303               	bcf	3,6	;RP1=0, select bank0
  6486  1536  1A86               	btfsc	6,5	;volatile
  6487  1537  2D42               	goto	l3167
  6488                           
  6489                           ;functions.c: 332: {
  6490                           ;functions.c: 333: TransmittPacket(2, 2);
  6491  1538  3002               	movlw	2
  6492  1539  00BB               	movwf	??_Mode_5
  6493  153A  083B               	movf	??_Mode_5,w
  6494  153B  00B5               	movwf	TransmittPacket@value
  6495  153C  3002               	movlw	2
  6496  153D  120A  158A  23BD  160A  118A  	fcall	_TransmittPacket
  6497  1542                     l3167:	
  6498                           
  6499                           ;functions.c: 334: }
  6500                           ;functions.c: 335: LightWithSensController();
  6501  1542  160A  118A  277F   	fcall	_LightWithSensController
  6502  1545  0008               	return
  6503  1546                     __end_of_Mode_5:	
  6504                           
  6505                           	psect	text28
  6506  1512                     __ptext28:	
  6507 ;; *************** function _Mode_4 *****************
  6508 ;; Defined at:
  6509 ;;		line 317 in file "functions.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;		None
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;		None
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  1    wreg      void 
  6516 ;; Registers used:
  6517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6518 ;; Tracked objects:
  6519 ;;		On entry : 0/0
  6520 ;;		On exit  : 0/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6523 ;;      Params:         0       0       0       0       0
  6524 ;;      Locals:         0       0       0       0       0
  6525 ;;      Temps:          0       0       0       0       0
  6526 ;;      Totals:         0       0       0       0       0
  6527 ;;Total ram usage:        0 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:    8
  6530 ;; This function calls:
  6531 ;;		_LightWithSensController
  6532 ;;		_TransmittPacket
  6533 ;; This function is called by:
  6534 ;;		_main
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           
  6539                           ;psect for function _Mode_4
  6540  1512                     _Mode_4:	
  6541                           
  6542                           ;functions.c: 319: if(!RB5)
  6543                           
  6544                           ;incstack = 0
  6545 ;; hardware stack exceeded
  6546                           ; Regs used in _Mode_4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6547  1512  1283               	bcf	3,5	;RP0=0, select bank0
  6548  1513  1303               	bcf	3,6	;RP1=0, select bank0
  6549  1514  1A86               	btfsc	6,5	;volatile
  6550  1515  2D1E               	goto	l3161
  6551                           
  6552                           ;functions.c: 320: {
  6553                           ;functions.c: 321: TransmittPacket(2, 1);
  6554  1516  01B5               	clrf	TransmittPacket@value
  6555  1517  0AB5               	incf	TransmittPacket@value,f
  6556  1518  3002               	movlw	2
  6557  1519  120A  158A  23BD  160A  118A  	fcall	_TransmittPacket
  6558  151E                     l3161:	
  6559                           
  6560                           ;functions.c: 322: }
  6561                           ;functions.c: 323: LightWithSensController();
  6562  151E  160A  118A  277F   	fcall	_LightWithSensController
  6563  1521  0008               	return
  6564  1522                     __end_of_Mode_4:	
  6565                           
  6566                           	psect	text29
  6567  0BBD                     __ptext29:	
  6568 ;; *************** function _TransmittPacket *****************
  6569 ;; Defined at:
  6570 ;;		line 224 in file "functions.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  topic           1    wreg     unsigned char 
  6573 ;;  value           1   21[BANK0 ] unsigned char 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;  topic           1   26[BANK0 ] unsigned char 
  6576 ;;  i               2   24[BANK0 ] int 
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  1    wreg      void 
  6579 ;; Registers used:
  6580 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6586 ;;      Params:         0       1       0       0       0
  6587 ;;      Locals:         0       3       0       0       0
  6588 ;;      Temps:          0       2       0       0       0
  6589 ;;      Totals:         0       6       0       0       0
  6590 ;;Total ram usage:        6 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    7
  6593 ;; This function calls:
  6594 ;;		_FindChannel
  6595 ;;		_RegisterRead
  6596 ;;		_RegisterSet
  6597 ;;		_SetRFMode
  6598 ;;		_WriteFIFO
  6599 ;;		_timerFunction
  6600 ;; This function is called by:
  6601 ;;		_ReceivedPacketHandler
  6602 ;;		_Mode_4
  6603 ;;		_Mode_5
  6604 ;;		_SendMemoryData
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           
  6609                           ;psect for function _TransmittPacket
  6610  0BBD                     _TransmittPacket:	
  6611                           
  6612                           ;incstack = 0
  6613 ;; hardware stack exceeded
  6614                           ; Regs used in _TransmittPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6615                           ;TransmittPacket@topic stored from wreg
  6616  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  6617  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  6618  0BBF  00BA               	movwf	TransmittPacket@topic
  6619                           
  6620                           ;functions.c: 226: timerFunction(4, 5);
  6621  0BC0  3004               	movlw	4
  6622  0BC1  00A0               	movwf	timerFunction@intTimerNumber
  6623  0BC2  3000               	movlw	0
  6624  0BC3  00A1               	movwf	timerFunction@intTimerNumber+1
  6625  0BC4  3005               	movlw	5
  6626  0BC5  00A2               	movwf	timerFunction@intSetSeconds
  6627  0BC6  3000               	movlw	0
  6628  0BC7  00A3               	movwf	timerFunction@intSetSeconds+1
  6629  0BC8  160A  118A  2522  120A  158A  	fcall	_timerFunction
  6630                           
  6631                           ;functions.c: 228: int i = 0;
  6632  0BCD  1283               	bcf	3,5	;RP0=0, select bank0
  6633  0BCE  1303               	bcf	3,6	;RP1=0, select bank0
  6634  0BCF  01B8               	clrf	TransmittPacket@i
  6635  0BD0  01B9               	clrf	TransmittPacket@i+1
  6636                           
  6637                           ;functions.c: 231: SetRFMode(0x20);
  6638  0BD1  3020               	movlw	32
  6639  0BD2  120A  158A  2238  120A  158A  	fcall	_SetRFMode
  6640                           
  6641                           ;functions.c: 232: _delay((unsigned long)((10)*(4000000/4000.0)));
  6642  0BD7  300D               	movlw	13
  6643  0BD8  1283               	bcf	3,5	;RP0=0, select bank0
  6644  0BD9  1303               	bcf	3,6	;RP1=0, select bank0
  6645  0BDA  00B7               	movwf	??_TransmittPacket+1
  6646  0BDB  30FB               	movlw	251
  6647  0BDC  00B6               	movwf	??_TransmittPacket
  6648  0BDD                     u2857:	
  6649  0BDD  0BB6               	decfsz	??_TransmittPacket,f
  6650  0BDE  2BDD               	goto	u2857
  6651  0BDF  0BB7               	decfsz	??_TransmittPacket+1,f
  6652  0BE0  2BDD               	goto	u2857
  6653                           
  6654                           ;functions.c: 233: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  6655  0BE1  300E               	movlw	14
  6656  0BE2  160A  118A  25D0  120A  158A  	fcall	_RegisterRead
  6657  0BE7  3802               	iorlw	2
  6658  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  6659  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  6660  0BEA  00B6               	movwf	??_TransmittPacket
  6661  0BEB  0836               	movf	??_TransmittPacket,w
  6662  0BEC  00A7               	movwf	RegisterSet@value
  6663  0BED  300E               	movlw	14
  6664  0BEE  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6665                           
  6666                           ;functions.c: 234: SetRFMode(0x40);
  6667  0BF3  3040               	movlw	64
  6668  0BF4  120A  158A  2238  120A  158A  	fcall	_SetRFMode
  6669  0BF9                     l2507:	
  6670                           ;functions.c: 235: while((RegisterRead(0x0E) & 0b00000010) == 0)
  6671                           
  6672  0BF9  300E               	movlw	14
  6673  0BFA  160A  118A  25D0  120A  158A  	fcall	_RegisterRead
  6674  0BFF  3902               	andlw	2
  6675  0C00  1D03               	btfss	3,2
  6676  0C01  2C0C               	goto	l2509
  6677                           
  6678                           ;functions.c: 236: {
  6679                           ;functions.c: 237: if(bTimerComplete[4])
  6680  0C02  1283               	bcf	3,5	;RP0=0, select bank0
  6681  0C03  1303               	bcf	3,6	;RP1=0, select bank0
  6682  0C04  085A               	movf	_bTimerComplete+4,w
  6683  0C05  1903               	btfsc	3,2
  6684  0C06  2BF9               	goto	l2507
  6685                           
  6686                           ;functions.c: 238: {
  6687                           ;functions.c: 239: FindChannel();
  6688  0C07  120A  158A  2708  120A  158A  	fcall	_FindChannel
  6689  0C0C                     l2509:	
  6690                           ;functions.c: 240: break;
  6691                           
  6692                           
  6693                           ;functions.c: 241: }
  6694                           ;functions.c: 243: }
  6695                           ;functions.c: 244: SetRFMode(0x80);
  6696  0C0C  3080               	movlw	128
  6697  0C0D  120A  158A  2238  120A  158A  	fcall	_SetRFMode
  6698                           
  6699                           ;functions.c: 245: _delay((unsigned long)((500)*(4000000/4000000.0)));
  6700  0C12  30A5               	movlw	165
  6701  0C13  1283               	bcf	3,5	;RP0=0, select bank0
  6702  0C14  1303               	bcf	3,6	;RP1=0, select bank0
  6703  0C15  00B6               	movwf	??_TransmittPacket
  6704  0C16                     u2867:	
  6705  0C16  0BB6               	decfsz	??_TransmittPacket,f
  6706  0C17  2C16               	goto	u2867
  6707  0C18  2C19               	nop2
  6708                           
  6709                           ;functions.c: 248: WriteFIFO('S');
  6710  0C19  3053               	movlw	83
  6711  0C1A  160A  118A  24EB  120A  158A  	fcall	_WriteFIFO
  6712                           
  6713                           ;functions.c: 249: WriteFIFO('Y');
  6714  0C1F  3059               	movlw	89
  6715  0C20  160A  118A  24EB  120A  158A  	fcall	_WriteFIFO
  6716                           
  6717                           ;functions.c: 250: WriteFIFO('N');
  6718  0C25  304E               	movlw	78
  6719  0C26  160A  118A  24EB  120A  158A  	fcall	_WriteFIFO
  6720                           
  6721                           ;functions.c: 251: WriteFIFO('C');
  6722  0C2B  3043               	movlw	67
  6723  0C2C  160A  118A  24EB  120A  158A  	fcall	_WriteFIFO
  6724                           
  6725                           ;functions.c: 254: WriteFIFO(44);
  6726  0C31  302C               	movlw	44
  6727  0C32  160A  118A  24EB  120A  158A  	fcall	_WriteFIFO
  6728                           
  6729                           ;functions.c: 255: WriteFIFO(topic);
  6730  0C37  1283               	bcf	3,5	;RP0=0, select bank0
  6731  0C38  1303               	bcf	3,6	;RP1=0, select bank0
  6732  0C39  083A               	movf	TransmittPacket@topic,w
  6733  0C3A  160A  118A  24EB  120A  158A  	fcall	_WriteFIFO
  6734                           
  6735                           ;functions.c: 256: WriteFIFO(value);
  6736  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  6737  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  6738  0C41  0835               	movf	TransmittPacket@value,w
  6739  0C42  160A  118A  24EB  120A  158A  	fcall	_WriteFIFO
  6740                           
  6741                           ;functions.c: 257: WriteFIFO(55);
  6742  0C47  3037               	movlw	55
  6743  0C48  160A  118A  24EB  120A  158A  	fcall	_WriteFIFO
  6744  0C4D                     l352:	
  6745                           ;functions.c: 260: while(!RB4)
  6746                           
  6747  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  6748  0C4E  1303               	bcf	3,6	;RP1=0, select bank0
  6749  0C4F  1A06               	btfsc	6,4	;volatile
  6750  0C50  2C56               	goto	l2533
  6751                           
  6752                           ;functions.c: 261: {
  6753                           ;functions.c: 262: if(bTimerComplete[4])
  6754  0C51  1283               	bcf	3,5	;RP0=0, select bank0
  6755  0C52  1303               	bcf	3,6	;RP1=0, select bank0
  6756  0C53  085A               	movf	_bTimerComplete+4,w
  6757  0C54  1903               	btfsc	3,2
  6758  0C55  2C4D               	goto	l352
  6759  0C56                     l2533:	
  6760                           ;functions.c: 263: break;
  6761                           
  6762                           
  6763                           ;functions.c: 264: }
  6764                           ;functions.c: 265: _delay((unsigned long)((10)*(4000000/4000000.0)));
  6765  0C56  3002               	movlw	2
  6766  0C57  1283               	bcf	3,5	;RP0=0, select bank0
  6767  0C58  1303               	bcf	3,6	;RP1=0, select bank0
  6768  0C59  00B6               	movwf	??_TransmittPacket
  6769  0C5A                     u2877:	
  6770  0C5A  0BB6               	decfsz	??_TransmittPacket,f
  6771  0C5B  2C5A               	goto	u2877
  6772  0C5C  0000               	nop
  6773                           
  6774                           ;functions.c: 266: SetRFMode(0x00);
  6775  0C5D  3000               	movlw	0
  6776  0C5E  120A  158A  2238  120A  158A  	fcall	_SetRFMode
  6777                           
  6778                           ;functions.c: 267: _delay((unsigned long)((50)*(4000000/4000.0)));
  6779  0C63  3041               	movlw	65
  6780  0C64  1283               	bcf	3,5	;RP0=0, select bank0
  6781  0C65  1303               	bcf	3,6	;RP1=0, select bank0
  6782  0C66  00B7               	movwf	??_TransmittPacket+1
  6783  0C67  30ED               	movlw	237
  6784  0C68  00B6               	movwf	??_TransmittPacket
  6785  0C69                     u2887:	
  6786  0C69  0BB6               	decfsz	??_TransmittPacket,f
  6787  0C6A  2C69               	goto	u2887
  6788  0C6B  0BB7               	decfsz	??_TransmittPacket+1,f
  6789  0C6C  2C69               	goto	u2887
  6790  0C6D  2C6E               	nop2
  6791  0C6E  0008               	return
  6792  0C6F                     __end_of_TransmittPacket:	
  6793                           
  6794                           	psect	text30
  6795  14EB                     __ptext30:	
  6796 ;; *************** function _WriteFIFO *****************
  6797 ;; Defined at:
  6798 ;;		line 802 in file "functions.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;  Data            1    wreg     unsigned char 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  Data            1    3[BANK0 ] unsigned char 
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      void 
  6805 ;; Registers used:
  6806 ;;		wreg, status,2, status,0, pclath, cstack
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6812 ;;      Params:         0       0       0       0       0
  6813 ;;      Locals:         0       1       0       0       0
  6814 ;;      Temps:          0       0       0       0       0
  6815 ;;      Totals:         0       1       0       0       0
  6816 ;;Total ram usage:        1 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    3
  6819 ;; This function calls:
  6820 ;;		_WriteSPI
  6821 ;; This function is called by:
  6822 ;;		_TransmittPacket
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           
  6827                           ;psect for function _WriteFIFO
  6828  14EB                     _WriteFIFO:	
  6829                           
  6830                           ;incstack = 0
  6831                           ; Regs used in _WriteFIFO: [wreg+status,2+status,0+pclath+cstack]
  6832                           ;WriteFIFO@Data stored from wreg
  6833  14EB  1283               	bcf	3,5	;RP0=0, select bank0
  6834  14EC  1303               	bcf	3,6	;RP1=0, select bank0
  6835  14ED  00A3               	movwf	WriteFIFO@Data
  6836                           
  6837                           ;functions.c: 804: RA5 = 0;
  6838  14EE  1285               	bcf	5,5	;volatile
  6839                           
  6840                           ;functions.c: 805: WriteSPI(Data);
  6841  14EF  0823               	movf	WriteFIFO@Data,w
  6842  14F0  160A  118A  2504   	fcall	_WriteSPI
  6843                           
  6844                           ;functions.c: 806: RA5 = 1;
  6845  14F3  1283               	bcf	3,5	;RP0=0, select bank0
  6846  14F4  1303               	bcf	3,6	;RP1=0, select bank0
  6847  14F5  1685               	bsf	5,5	;volatile
  6848  14F6  0008               	return
  6849  14F7                     __end_of_WriteFIFO:	
  6850                           
  6851                           	psect	text31
  6852  0F08                     __ptext31:	
  6853 ;; *************** function _FindChannel *****************
  6854 ;; Defined at:
  6855 ;;		line 585 in file "functions.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;  i               2   19[BANK0 ] int 
  6860 ;;  cnt             2   17[BANK0 ] int 
  6861 ;; Return value:  Size  Location     Type
  6862 ;;                  1    wreg      unsigned char 
  6863 ;; Registers used:
  6864 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6870 ;;      Params:         0       0       0       0       0
  6871 ;;      Locals:         0       4       0       0       0
  6872 ;;      Temps:          0       3       0       0       0
  6873 ;;      Totals:         0       7       0       0       0
  6874 ;;Total ram usage:        7 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    6
  6877 ;; This function calls:
  6878 ;;		_RegisterRead
  6879 ;;		_RegisterSet
  6880 ;;		_SetRFMode
  6881 ;; This function is called by:
  6882 ;;		_TransiverToReceive
  6883 ;;		_TransmittPacket
  6884 ;;		_TransiverInit
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           
  6889                           ;psect for function _FindChannel
  6890  0F08                     _FindChannel:	
  6891                           
  6892                           ;functions.c: 587: int cnt = 0;
  6893                           
  6894                           ;incstack = 0
  6895 ;; using string table level
  6896                           ; Regs used in _FindChannel: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6897  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  6898  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  6899  0F0A  01B1               	clrf	FindChannel@cnt
  6900  0F0B  01B2               	clrf	FindChannel@cnt+1
  6901                           
  6902                           ;functions.c: 588: bChannelFound = 0;
  6903  0F0C  01E7               	clrf	_bChannelFound
  6904                           
  6905                           ;functions.c: 589: channelFound = 0;
  6906  0F0D  01DB               	clrf	_channelFound
  6907  0F0E  01DC               	clrf	_channelFound+1
  6908                           
  6909                           ;functions.c: 591: _delay((unsigned long)((1000)*(4000000/4000.0)));
  6910  0F0F  3006               	movlw	6
  6911  0F10  1283               	bcf	3,5	;RP0=0, select bank0
  6912  0F11  1303               	bcf	3,6	;RP1=0, select bank0
  6913  0F12  00B0               	movwf	??_FindChannel+2
  6914  0F13  3013               	movlw	19
  6915  0F14  00AF               	movwf	??_FindChannel+1
  6916  0F15  30AD               	movlw	173
  6917  0F16  00AE               	movwf	??_FindChannel
  6918  0F17                     u2897:	
  6919  0F17  0BAE               	decfsz	??_FindChannel,f
  6920  0F18  2F17               	goto	u2897
  6921  0F19  0BAF               	decfsz	??_FindChannel+1,f
  6922  0F1A  2F17               	goto	u2897
  6923  0F1B  0BB0               	decfsz	??_FindChannel+2,f
  6924  0F1C  2F17               	goto	u2897
  6925                           
  6926                           ;functions.c: 592: for (int i = 0; i < 13; i++)
  6927  0F1D  1283               	bcf	3,5	;RP0=0, select bank0
  6928  0F1E  1303               	bcf	3,6	;RP1=0, select bank0
  6929  0F1F  01B3               	clrf	FindChannel@i
  6930  0F20  01B4               	clrf	FindChannel@i+1
  6931  0F21  0834               	movf	FindChannel@i+1,w
  6932  0F22  3A80               	xorlw	128
  6933  0F23  00FF               	movwf	127
  6934  0F24  3080               	movlw	128
  6935  0F25  027F               	subwf	127,w
  6936  0F26  1D03               	skipz
  6937  0F27  2F2A               	goto	u1395
  6938  0F28  300D               	movlw	13
  6939  0F29  0233               	subwf	FindChannel@i,w
  6940  0F2A                     u1395:	
  6941  0F2A  1803               	btfsc	3,0
  6942  0F2B  2FFE               	goto	l2457
  6943  0F2C                     l2433:	
  6944                           
  6945                           ;functions.c: 593: {
  6946                           ;functions.c: 594: RegisterSet(0x06,ChannelR[i]);
  6947  0F2C  1283               	bcf	3,5	;RP0=0, select bank0
  6948  0F2D  1303               	bcf	3,6	;RP1=0, select bank0
  6949  0F2E  0833               	movf	FindChannel@i,w
  6950  0F2F  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  6951  0F30  0084               	movwf	4
  6952  0F31  160A  118A  2000  120A  158A  	fcall	stringdir
  6953  0F36  00AE               	movwf	??_FindChannel
  6954  0F37  082E               	movf	??_FindChannel,w
  6955  0F38  00A7               	movwf	RegisterSet@value
  6956  0F39  3006               	movlw	6
  6957  0F3A  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6958                           
  6959                           ;functions.c: 595: RegisterSet(0x07,ChannelP[i]);
  6960  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  6961  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  6962  0F41  0833               	movf	FindChannel@i,w
  6963  0F42  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  6964  0F43  0084               	movwf	4
  6965  0F44  160A  118A  2000  120A  158A  	fcall	stringdir
  6966  0F49  00AE               	movwf	??_FindChannel
  6967  0F4A  082E               	movf	??_FindChannel,w
  6968  0F4B  00A7               	movwf	RegisterSet@value
  6969  0F4C  3007               	movlw	7
  6970  0F4D  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6971                           
  6972                           ;functions.c: 596: RegisterSet(0x08,ChannelS[i]);
  6973  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  6974  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  6975  0F54  0833               	movf	FindChannel@i,w
  6976  0F55  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  6977  0F56  0084               	movwf	4
  6978  0F57  160A  118A  2000  120A  158A  	fcall	stringdir
  6979  0F5C  00AE               	movwf	??_FindChannel
  6980  0F5D  082E               	movf	??_FindChannel,w
  6981  0F5E  00A7               	movwf	RegisterSet@value
  6982  0F5F  3008               	movlw	8
  6983  0F60  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6984                           
  6985                           ;functions.c: 597: RegisterSet(0x09,ChannelR[i]);
  6986  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  6987  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  6988  0F67  0833               	movf	FindChannel@i,w
  6989  0F68  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  6990  0F69  0084               	movwf	4
  6991  0F6A  160A  118A  2000  120A  158A  	fcall	stringdir
  6992  0F6F  00AE               	movwf	??_FindChannel
  6993  0F70  082E               	movf	??_FindChannel,w
  6994  0F71  00A7               	movwf	RegisterSet@value
  6995  0F72  3009               	movlw	9
  6996  0F73  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  6997                           
  6998                           ;functions.c: 598: RegisterSet(0x0A,ChannelP[i]);
  6999  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  7000  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  7001  0F7A  0833               	movf	FindChannel@i,w
  7002  0F7B  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  7003  0F7C  0084               	movwf	4
  7004  0F7D  160A  118A  2000  120A  158A  	fcall	stringdir
  7005  0F82  00AE               	movwf	??_FindChannel
  7006  0F83  082E               	movf	??_FindChannel,w
  7007  0F84  00A7               	movwf	RegisterSet@value
  7008  0F85  300A               	movlw	10
  7009  0F86  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  7010                           
  7011                           ;functions.c: 599: RegisterSet(0x0B,ChannelS[i]);
  7012  0F8B  1283               	bcf	3,5	;RP0=0, select bank0
  7013  0F8C  1303               	bcf	3,6	;RP1=0, select bank0
  7014  0F8D  0833               	movf	FindChannel@i,w
  7015  0F8E  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  7016  0F8F  0084               	movwf	4
  7017  0F90  160A  118A  2000  120A  158A  	fcall	stringdir
  7018  0F95  00AE               	movwf	??_FindChannel
  7019  0F96  082E               	movf	??_FindChannel,w
  7020  0F97  00A7               	movwf	RegisterSet@value
  7021  0F98  300B               	movlw	11
  7022  0F99  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  7023                           
  7024                           ;functions.c: 600: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  7025  0F9E  300E               	movlw	14
  7026  0F9F  160A  118A  25D0  120A  158A  	fcall	_RegisterRead
  7027  0FA4  3802               	iorlw	2
  7028  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  7029  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  7030  0FA7  00AE               	movwf	??_FindChannel
  7031  0FA8  082E               	movf	??_FindChannel,w
  7032  0FA9  00A7               	movwf	RegisterSet@value
  7033  0FAA  300E               	movlw	14
  7034  0FAB  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  7035                           
  7036                           ;functions.c: 601: SetRFMode(0x40);
  7037  0FB0  3040               	movlw	64
  7038  0FB1  120A  158A  2238  120A  158A  	fcall	_SetRFMode
  7039                           
  7040                           ;functions.c: 602: cnt = 0;
  7041  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  7042  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  7043  0FB8  01B1               	clrf	FindChannel@cnt
  7044  0FB9  01B2               	clrf	FindChannel@cnt+1
  7045  0FBA                     l2451:	
  7046                           ;functions.c: 603: while(cnt < 5)
  7047                           
  7048  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  7049  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  7050  0FBC  0832               	movf	FindChannel@cnt+1,w
  7051  0FBD  3A80               	xorlw	128
  7052  0FBE  00FF               	movwf	127
  7053  0FBF  3080               	movlw	128
  7054  0FC0  027F               	subwf	127,w
  7055  0FC1  1D03               	skipz
  7056  0FC2  2FC5               	goto	u1415
  7057  0FC3  3005               	movlw	5
  7058  0FC4  0231               	subwf	FindChannel@cnt,w
  7059  0FC5                     u1415:	
  7060  0FC5  1803               	btfsc	3,0
  7061  0FC6  2FEB               	goto	l2453
  7062                           
  7063                           ;functions.c: 604: {
  7064                           ;functions.c: 606: if((RegisterRead(0x0E) & 0b00000010) != 0)
  7065  0FC7  300E               	movlw	14
  7066  0FC8  160A  118A  25D0  120A  158A  	fcall	_RegisterRead
  7067  0FCD  3902               	andlw	2
  7068  0FCE  1903               	btfsc	3,2
  7069  0FCF  2FDA               	goto	l2449
  7070                           
  7071                           ;functions.c: 607: {
  7072                           ;functions.c: 608: bChannelFound = 1;
  7073  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  7074  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  7075  0FD2  01E7               	clrf	_bChannelFound
  7076  0FD3  0AE7               	incf	_bChannelFound,f
  7077                           
  7078                           ;functions.c: 609: channelFound = i;
  7079  0FD4  0834               	movf	FindChannel@i+1,w
  7080  0FD5  00DC               	movwf	_channelFound+1
  7081  0FD6  0833               	movf	FindChannel@i,w
  7082  0FD7  00DB               	movwf	_channelFound
  7083                           
  7084                           ;functions.c: 610: return 1;
  7085  0FD8  3001               	movlw	1
  7086  0FD9  0008               	return
  7087  0FDA                     l2449:	
  7088                           
  7089                           ;functions.c: 611: }
  7090                           ;functions.c: 612: cnt++;
  7091  0FDA  3001               	movlw	1
  7092  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  7093  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  7094  0FDD  07B1               	addwf	FindChannel@cnt,f
  7095  0FDE  1803               	skipnc
  7096  0FDF  0AB2               	incf	FindChannel@cnt+1,f
  7097  0FE0  3000               	movlw	0
  7098  0FE1  07B2               	addwf	FindChannel@cnt+1,f
  7099                           
  7100                           ;functions.c: 613: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  7101  0FE2  30C7               	movlw	199
  7102  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  7103  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  7104  0FE5  00AE               	movwf	??_FindChannel
  7105  0FE6                     u2907:	
  7106  0FE6  2FE7               	nop2
  7107  0FE7  0BAE               	decfsz	??_FindChannel,f
  7108  0FE8  2FE6               	goto	u2907
  7109  0FE9  2FEA               	nop2
  7110  0FEA  2FBA               	goto	l2451
  7111  0FEB                     l2453:	
  7112  0FEB  3001               	movlw	1
  7113  0FEC  1283               	bcf	3,5	;RP0=0, select bank0
  7114  0FED  1303               	bcf	3,6	;RP1=0, select bank0
  7115  0FEE  07B3               	addwf	FindChannel@i,f
  7116  0FEF  1803               	skipnc
  7117  0FF0  0AB4               	incf	FindChannel@i+1,f
  7118  0FF1  3000               	movlw	0
  7119  0FF2  07B4               	addwf	FindChannel@i+1,f
  7120  0FF3  0834               	movf	FindChannel@i+1,w
  7121  0FF4  3A80               	xorlw	128
  7122  0FF5  00FF               	movwf	127
  7123  0FF6  3080               	movlw	128
  7124  0FF7  027F               	subwf	127,w
  7125  0FF8  1D03               	skipz
  7126  0FF9  2FFC               	goto	u1425
  7127  0FFA  300D               	movlw	13
  7128  0FFB  0233               	subwf	FindChannel@i,w
  7129  0FFC                     u1425:	
  7130  0FFC  1C03               	skipc
  7131  0FFD  2F2C               	goto	l2433
  7132  0FFE                     l2457:	
  7133                           
  7134                           ;functions.c: 614: }
  7135                           ;functions.c: 617: }
  7136                           ;functions.c: 618: return 0;
  7137  0FFE  3000               	movlw	0
  7138  0FFF  0008               	return
  7139  1000                     __end_of_FindChannel:	
  7140                           
  7141                           	psect	text32
  7142  0A38                     __ptext32:	
  7143 ;; *************** function _SetRFMode *****************
  7144 ;; Defined at:
  7145 ;;		line 640 in file "functions.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;  mode            1    wreg     unsigned char 
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;  mode            1   12[BANK0 ] unsigned char 
  7150 ;;  mcparam0_rea    1   13[BANK0 ] unsigned char 
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  1    wreg      void 
  7153 ;; Registers used:
  7154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7160 ;;      Params:         0       0       0       0       0
  7161 ;;      Locals:         0       2       0       0       0
  7162 ;;      Temps:          0       1       0       0       0
  7163 ;;      Totals:         0       3       0       0       0
  7164 ;;Total ram usage:        3 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    5
  7167 ;; This function calls:
  7168 ;;		_RegisterRead
  7169 ;;		_RegisterSet
  7170 ;; This function is called by:
  7171 ;;		_TransiverToReceive
  7172 ;;		_TransiverReadFIFO
  7173 ;;		_TransmittPacket
  7174 ;;		_TransiverInit
  7175 ;;		_FindChannel
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           
  7180                           ;psect for function _SetRFMode
  7181  0A38                     _SetRFMode:	
  7182                           
  7183                           ;incstack = 0
  7184                           ; Regs used in _SetRFMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7185                           ;SetRFMode@mode stored from wreg
  7186  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  7187  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  7188  0A3A  00AC               	movwf	SetRFMode@mode
  7189                           
  7190                           ;functions.c: 642: RA4 = 0;
  7191  0A3B  1205               	bcf	5,4	;volatile
  7192                           
  7193                           ;functions.c: 643: BYTE mcparam0_read;
  7194                           ;functions.c: 644: mcparam0_read = RegisterRead(0);
  7195  0A3C  3000               	movlw	0
  7196  0A3D  160A  118A  25D0  120A  158A  	fcall	_RegisterRead
  7197  0A42  1283               	bcf	3,5	;RP0=0, select bank0
  7198  0A43  1303               	bcf	3,6	;RP1=0, select bank0
  7199  0A44  00AB               	movwf	??_SetRFMode
  7200  0A45  082B               	movf	??_SetRFMode,w
  7201  0A46  00AD               	movwf	SetRFMode@mcparam0_read
  7202                           
  7203                           ;functions.c: 645: switch (mode) {
  7204  0A47  2A90               	goto	l2407
  7205  0A48                     l2395:	
  7206                           ;functions.c: 646: case 0x80:
  7207                           
  7208                           
  7209                           ;functions.c: 647: RegisterSet(0, (mcparam0_read & 0x1F) | 0x80);
  7210  0A48  082D               	movf	SetRFMode@mcparam0_read,w
  7211  0A49  391F               	andlw	31
  7212  0A4A  3880               	iorlw	128
  7213  0A4B  00AB               	movwf	??_SetRFMode
  7214  0A4C  082B               	movf	??_SetRFMode,w
  7215  0A4D  00A7               	movwf	RegisterSet@value
  7216  0A4E  3000               	movlw	0
  7217  0A4F  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  7218                           
  7219                           ;functions.c: 649: break;
  7220  0A54  2AA3               	goto	l441
  7221  0A55                     l2397:	
  7222                           ;functions.c: 650: case 0x60:
  7223                           
  7224                           
  7225                           ;functions.c: 651: RegisterSet(0, (mcparam0_read & 0x1F) | 0x60);
  7226  0A55  1283               	bcf	3,5	;RP0=0, select bank0
  7227  0A56  1303               	bcf	3,6	;RP1=0, select bank0
  7228  0A57  082D               	movf	SetRFMode@mcparam0_read,w
  7229  0A58  391F               	andlw	31
  7230  0A59  3860               	iorlw	96
  7231  0A5A  00AB               	movwf	??_SetRFMode
  7232  0A5B  082B               	movf	??_SetRFMode,w
  7233  0A5C  00A7               	movwf	RegisterSet@value
  7234  0A5D  3000               	movlw	0
  7235  0A5E  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  7236                           
  7237                           ;functions.c: 653: break;
  7238  0A63  2AA3               	goto	l441
  7239  0A64                     l2399:	
  7240                           ;functions.c: 654: case 0x40:
  7241                           
  7242                           
  7243                           ;functions.c: 655: RegisterSet(0, (mcparam0_read & 0x1F) | 0x40);
  7244  0A64  1283               	bcf	3,5	;RP0=0, select bank0
  7245  0A65  1303               	bcf	3,6	;RP1=0, select bank0
  7246  0A66  082D               	movf	SetRFMode@mcparam0_read,w
  7247  0A67  391F               	andlw	31
  7248  0A68  3840               	iorlw	64
  7249  0A69  00AB               	movwf	??_SetRFMode
  7250  0A6A  082B               	movf	??_SetRFMode,w
  7251  0A6B  00A7               	movwf	RegisterSet@value
  7252  0A6C  3000               	movlw	0
  7253  0A6D  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  7254                           
  7255                           ;functions.c: 657: break;
  7256  0A72  2AA3               	goto	l441
  7257  0A73                     l2401:	
  7258                           ;functions.c: 658: case 0x20:
  7259                           
  7260                           
  7261                           ;functions.c: 659: RegisterSet(0, (mcparam0_read & 0x1F) | 0x20);
  7262  0A73  1283               	bcf	3,5	;RP0=0, select bank0
  7263  0A74  1303               	bcf	3,6	;RP1=0, select bank0
  7264  0A75  082D               	movf	SetRFMode@mcparam0_read,w
  7265  0A76  391F               	andlw	31
  7266  0A77  3820               	iorlw	32
  7267  0A78  00AB               	movwf	??_SetRFMode
  7268  0A79  082B               	movf	??_SetRFMode,w
  7269  0A7A  00A7               	movwf	RegisterSet@value
  7270  0A7B  3000               	movlw	0
  7271  0A7C  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  7272                           
  7273                           ;functions.c: 661: break;
  7274  0A81  2AA3               	goto	l441
  7275  0A82                     l2403:	
  7276                           ;functions.c: 662: case 0x00:
  7277                           
  7278                           
  7279                           ;functions.c: 663: RegisterSet(0, (mcparam0_read & 0x1F) | 0x00);
  7280  0A82  1283               	bcf	3,5	;RP0=0, select bank0
  7281  0A83  1303               	bcf	3,6	;RP1=0, select bank0
  7282  0A84  082D               	movf	SetRFMode@mcparam0_read,w
  7283  0A85  391F               	andlw	31
  7284  0A86  00AB               	movwf	??_SetRFMode
  7285  0A87  082B               	movf	??_SetRFMode,w
  7286  0A88  00A7               	movwf	RegisterSet@value
  7287  0A89  3000               	movlw	0
  7288  0A8A  160A  118A  259C  120A  158A  	fcall	_RegisterSet
  7289                           
  7290                           ;functions.c: 666: }
  7291                           
  7292                           ;functions.c: 665: break;
  7293  0A8F  2AA3               	goto	l441
  7294  0A90                     l2407:	
  7295  0A90  1283               	bcf	3,5	;RP0=0, select bank0
  7296  0A91  1303               	bcf	3,6	;RP1=0, select bank0
  7297  0A92  082C               	movf	SetRFMode@mode,w
  7298                           
  7299                           ; Switch size 1, requested type "space"
  7300                           ; Number of cases is 5, Range of values is 0 to 128
  7301                           ; switch strategies available:
  7302                           ; Name         Instructions Cycles
  7303                           ; simple_byte           16     9 (average)
  7304                           ; jumptable            260     6 (fixed)
  7305                           ;	Chosen strategy is simple_byte
  7306  0A93  3A00               	xorlw	0	; case 0
  7307  0A94  1903               	skipnz
  7308  0A95  2A82               	goto	l2403
  7309  0A96  3A20               	xorlw	32	; case 32
  7310  0A97  1903               	skipnz
  7311  0A98  2A73               	goto	l2401
  7312  0A99  3A60               	xorlw	96	; case 64
  7313  0A9A  1903               	skipnz
  7314  0A9B  2A64               	goto	l2399
  7315  0A9C  3A20               	xorlw	32	; case 96
  7316  0A9D  1903               	skipnz
  7317  0A9E  2A55               	goto	l2397
  7318  0A9F  3AE0               	xorlw	224	; case 128
  7319  0AA0  1903               	skipnz
  7320  0AA1  2A48               	goto	l2395
  7321  0AA2  2AA3               	goto	l441
  7322  0AA3                     l441:	
  7323                           
  7324                           ;functions.c: 667: RA4 = 1;
  7325  0AA3  1283               	bcf	3,5	;RP0=0, select bank0
  7326  0AA4  1303               	bcf	3,6	;RP1=0, select bank0
  7327  0AA5  1605               	bsf	5,4	;volatile
  7328  0AA6  0008               	return
  7329  0AA7                     __end_of_SetRFMode:	
  7330                           
  7331                           	psect	text33
  7332  159C                     __ptext33:	
  7333 ;; *************** function _RegisterSet *****************
  7334 ;; Defined at:
  7335 ;;		line 749 in file "functions.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  adress          1    wreg     unsigned char 
  7338 ;;  value           1    7[BANK0 ] unsigned char 
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  adress          1   10[BANK0 ] unsigned char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      void 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2, status,0, pclath, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7350 ;;      Params:         0       1       0       0       0
  7351 ;;      Locals:         0       1       0       0       0
  7352 ;;      Temps:          0       2       0       0       0
  7353 ;;      Totals:         0       4       0       0       0
  7354 ;;Total ram usage:        4 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    3
  7357 ;; This function calls:
  7358 ;;		_WriteSPI
  7359 ;; This function is called by:
  7360 ;;		_TransiverToReceive
  7361 ;;		_TransmittPacket
  7362 ;;		_TransiverInit
  7363 ;;		_FindChannel
  7364 ;;		_SetRFMode
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           
  7369                           ;psect for function _RegisterSet
  7370  159C                     _RegisterSet:	
  7371                           
  7372                           ;incstack = 0
  7373                           ; Regs used in _RegisterSet: [wreg+status,2+status,0+pclath+cstack]
  7374                           ;RegisterSet@adress stored from wreg
  7375  159C  1283               	bcf	3,5	;RP0=0, select bank0
  7376  159D  1303               	bcf	3,6	;RP1=0, select bank0
  7377  159E  00AA               	movwf	RegisterSet@adress
  7378                           
  7379                           ;functions.c: 751: RA4 = 0;
  7380  159F  1205               	bcf	5,4	;volatile
  7381                           
  7382                           ;functions.c: 752: adress = (adress<<1);
  7383  15A0  082A               	movf	RegisterSet@adress,w
  7384  15A1  00A8               	movwf	??_RegisterSet
  7385  15A2  0728               	addwf	??_RegisterSet,w
  7386  15A3  00A9               	movwf	??_RegisterSet+1
  7387  15A4  0829               	movf	??_RegisterSet+1,w
  7388  15A5  00AA               	movwf	RegisterSet@adress
  7389                           
  7390                           ;functions.c: 753: WriteSPI(adress);
  7391  15A6  082A               	movf	RegisterSet@adress,w
  7392  15A7  160A  118A  2504  160A  118A  	fcall	_WriteSPI
  7393                           
  7394                           ;functions.c: 754: WriteSPI(value);
  7395  15AC  1283               	bcf	3,5	;RP0=0, select bank0
  7396  15AD  1303               	bcf	3,6	;RP1=0, select bank0
  7397  15AE  0827               	movf	RegisterSet@value,w
  7398  15AF  160A  118A  2504   	fcall	_WriteSPI
  7399                           
  7400                           ;functions.c: 755: RA4 = 1;
  7401  15B2  1283               	bcf	3,5	;RP0=0, select bank0
  7402  15B3  1303               	bcf	3,6	;RP1=0, select bank0
  7403  15B4  1605               	bsf	5,4	;volatile
  7404  15B5  0008               	return
  7405  15B6                     __end_of_RegisterSet:	
  7406                           
  7407                           	psect	text34
  7408  15D0                     __ptext34:	
  7409 ;; *************** function _RegisterRead *****************
  7410 ;; Defined at:
  7411 ;;		line 719 in file "functions.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  adress          1    wreg     unsigned char 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  adress          1    6[BANK0 ] unsigned char 
  7416 ;;  value           1    5[BANK0 ] unsigned char 
  7417 ;; Return value:  Size  Location     Type
  7418 ;;                  1    wreg      unsigned char 
  7419 ;; Registers used:
  7420 ;;		wreg, status,2, status,0, pclath, cstack
  7421 ;; Tracked objects:
  7422 ;;		On entry : 0/0
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7426 ;;      Params:         0       0       0       0       0
  7427 ;;      Locals:         0       2       0       0       0
  7428 ;;      Temps:          0       2       0       0       0
  7429 ;;      Totals:         0       4       0       0       0
  7430 ;;Total ram usage:        4 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; Hardware stack levels required when called:    4
  7433 ;; This function calls:
  7434 ;;		_ReadSPI
  7435 ;;		_WriteSPI
  7436 ;; This function is called by:
  7437 ;;		_TransiverToReceive
  7438 ;;		_TransmittPacket
  7439 ;;		_TransiverInit
  7440 ;;		_FindChannel
  7441 ;;		_SetRFMode
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _RegisterRead
  7447  15D0                     _RegisterRead:	
  7448                           
  7449                           ;incstack = 0
  7450                           ; Regs used in _RegisterRead: [wreg+status,2+status,0+pclath+cstack]
  7451                           ;RegisterRead@adress stored from wreg
  7452  15D0  1283               	bcf	3,5	;RP0=0, select bank0
  7453  15D1  1303               	bcf	3,6	;RP1=0, select bank0
  7454  15D2  00A6               	movwf	RegisterRead@adress
  7455                           
  7456                           ;functions.c: 721: BYTE value;
  7457                           ;functions.c: 722: RA4 = 0;
  7458  15D3  1205               	bcf	5,4	;volatile
  7459                           
  7460                           ;functions.c: 723: adress = ((adress<<1)|0x40);
  7461  15D4  0826               	movf	RegisterRead@adress,w
  7462  15D5  00A3               	movwf	??_RegisterRead
  7463  15D6  0723               	addwf	??_RegisterRead,w
  7464  15D7  3840               	iorlw	64
  7465  15D8  00A4               	movwf	??_RegisterRead+1
  7466  15D9  0824               	movf	??_RegisterRead+1,w
  7467  15DA  00A6               	movwf	RegisterRead@adress
  7468                           
  7469                           ;functions.c: 724: WriteSPI(adress);
  7470  15DB  0826               	movf	RegisterRead@adress,w
  7471  15DC  160A  118A  2504  160A  118A  	fcall	_WriteSPI
  7472                           
  7473                           ;functions.c: 725: value = ReadSPI();
  7474  15E1  160A  118A  24C9   	fcall	_ReadSPI
  7475  15E4  1283               	bcf	3,5	;RP0=0, select bank0
  7476  15E5  1303               	bcf	3,6	;RP1=0, select bank0
  7477  15E6  00A3               	movwf	??_RegisterRead
  7478  15E7  0823               	movf	??_RegisterRead,w
  7479  15E8  00A5               	movwf	RegisterRead@value
  7480                           
  7481                           ;functions.c: 726: RA4 = 1;
  7482  15E9  1605               	bsf	5,4	;volatile
  7483                           
  7484                           ;functions.c: 727: return value;
  7485  15EA  0825               	movf	RegisterRead@value,w
  7486  15EB  0008               	return
  7487  15EC                     __end_of_RegisterRead:	
  7488                           
  7489                           	psect	text35
  7490  14F7                     __ptext35:	
  7491 ;; *************** function _Mode_2 *****************
  7492 ;; Defined at:
  7493 ;;		line 298 in file "functions.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;		None
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;		None
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      void 
  7500 ;; Registers used:
  7501 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7507 ;;      Params:         0       0       0       0       0
  7508 ;;      Locals:         0       0       0       0       0
  7509 ;;      Temps:          0       0       0       0       0
  7510 ;;      Totals:         0       0       0       0       0
  7511 ;;Total ram usage:        0 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    6
  7514 ;; This function calls:
  7515 ;;		_LightWithSensController
  7516 ;; This function is called by:
  7517 ;;		_main
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           
  7522                           ;psect for function _Mode_2
  7523  14F7                     _Mode_2:	
  7524                           
  7525                           ;functions.c: 300: LightWithSensController();
  7526                           
  7527                           ;incstack = 0
  7528                           ; Regs used in _Mode_2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7529  14F7  160A  118A  277F  160A  118A  	fcall	_LightWithSensController
  7530                           
  7531                           ;functions.c: 301: if(RC2)
  7532  14FC  1283               	bcf	3,5	;RP0=0, select bank0
  7533  14FD  1303               	bcf	3,6	;RP1=0, select bank0
  7534  14FE  1D07               	btfss	7,2	;volatile
  7535  14FF  2D02               	goto	l368
  7536                           
  7537                           ;functions.c: 302: RC1 = 1;
  7538  1500  1487               	bsf	7,1	;volatile
  7539  1501  0008               	return
  7540  1502                     l368:	
  7541                           
  7542                           ;functions.c: 303: else
  7543                           ;functions.c: 304: RC1 = 0;
  7544  1502  1087               	bcf	7,1	;volatile
  7545  1503  0008               	return
  7546  1504                     __end_of_Mode_2:	
  7547                           
  7548                           	psect	text36
  7549  1582                     __ptext36:	
  7550 ;; *************** function _Mode_1 *****************
  7551 ;; Defined at:
  7552 ;;		line 284 in file "functions.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;		None
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;		None
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      void 
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0, pclath, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7566 ;;      Params:         0       0       0       0       0
  7567 ;;      Locals:         0       0       0       0       0
  7568 ;;      Temps:          0       0       0       0       0
  7569 ;;      Totals:         0       0       0       0       0
  7570 ;;Total ram usage:        0 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    5
  7573 ;; This function calls:
  7574 ;;		_DarknessCheck
  7575 ;; This function is called by:
  7576 ;;		_main
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           
  7581                           ;psect for function _Mode_1
  7582  1582                     _Mode_1:	
  7583                           
  7584                           ;functions.c: 287: if((intSecondCounter == 30)&&(!RC2))
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _Mode_1: [wreg+status,2+status,0+pclath+cstack]
  7588  1582  301E               	movlw	30
  7589  1583  1283               	bcf	3,5	;RP0=0, select bank0
  7590  1584  1303               	bcf	3,6	;RP1=0, select bank0
  7591  1585  0665               	xorwf	_intSecondCounter,w
  7592  1586  0466               	iorwf	_intSecondCounter+1,w
  7593  1587  1903               	btfsc	3,2
  7594  1588  1907               	btfsc	7,2	;volatile
  7595  1589  2D8F               	goto	l3145
  7596                           
  7597                           ;functions.c: 288: DarknessCheck();
  7598  158A  160A  118A  2679  160A  118A  	fcall	_DarknessCheck
  7599  158F                     l3145:	
  7600                           
  7601                           ;functions.c: 289: if((intBlinkCycle == 1)&&(bDark == 1))
  7602  158F  1283               	bcf	3,5	;RP0=0, select bank0
  7603  1590  1303               	bcf	3,6	;RP1=0, select bank0
  7604  1591  035D               	decf	_intBlinkCycle,w
  7605  1592  045E               	iorwf	_intBlinkCycle+1,w
  7606  1593  1D03               	btfss	3,2
  7607  1594  2D9A               	goto	l363
  7608  1595  0368               	decf	_bDark,w
  7609  1596  1D03               	btfss	3,2
  7610  1597  2D9A               	goto	l363
  7611                           
  7612                           ;functions.c: 290: RC2 = 1;
  7613  1598  1507               	bsf	7,2	;volatile
  7614  1599  0008               	return
  7615  159A                     l363:	
  7616                           
  7617                           ;functions.c: 291: else
  7618                           ;functions.c: 292: RC2 = 0;
  7619  159A  1107               	bcf	7,2	;volatile
  7620  159B  0008               	return
  7621  159C                     __end_of_Mode_1:	
  7622                           
  7623                           	psect	text37
  7624  14C5                     __ptext37:	
  7625 ;; *************** function _Mode_0 *****************
  7626 ;; Defined at:
  7627 ;;		line 276 in file "functions.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;		None
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;		None
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  1    wreg      void 
  7634 ;; Registers used:
  7635 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7641 ;;      Params:         0       0       0       0       0
  7642 ;;      Locals:         0       0       0       0       0
  7643 ;;      Temps:          0       0       0       0       0
  7644 ;;      Totals:         0       0       0       0       0
  7645 ;;Total ram usage:        0 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    6
  7648 ;; This function calls:
  7649 ;;		_LightWithSensController
  7650 ;; This function is called by:
  7651 ;;		_main
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           
  7656                           ;psect for function _Mode_0
  7657  14C5                     _Mode_0:	
  7658                           
  7659                           ;functions.c: 278: LightWithSensController();
  7660                           
  7661                           ;incstack = 0
  7662                           ; Regs used in _Mode_0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7663  14C5  160A  118A  277F   	fcall	_LightWithSensController
  7664  14C8  0008               	return
  7665  14C9                     __end_of_Mode_0:	
  7666                           
  7667                           	psect	text38
  7668  177F                     __ptext38:	
  7669 ;; *************** function _LightWithSensController *****************
  7670 ;; Defined at:
  7671 ;;		line 342 in file "functions.c"
  7672 ;; Parameters:    Size  Location     Type
  7673 ;;		None
  7674 ;; Auto vars:     Size  Location     Type
  7675 ;;		None
  7676 ;; Return value:  Size  Location     Type
  7677 ;;                  1    wreg      void 
  7678 ;; Registers used:
  7679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7680 ;; Tracked objects:
  7681 ;;		On entry : 0/0
  7682 ;;		On exit  : 0/0
  7683 ;;		Unchanged: 0/0
  7684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7685 ;;      Params:         0       0       0       0       0
  7686 ;;      Locals:         0       0       0       0       0
  7687 ;;      Temps:          0       0       0       0       0
  7688 ;;      Totals:         0       0       0       0       0
  7689 ;;Total ram usage:        0 bytes
  7690 ;; Hardware stack levels used:    1
  7691 ;; Hardware stack levels required when called:    5
  7692 ;; This function calls:
  7693 ;;		_DarknessCheck
  7694 ;;		_timerFunction
  7695 ;; This function is called by:
  7696 ;;		_Mode_0
  7697 ;;		_Mode_2
  7698 ;;		_Mode_4
  7699 ;;		_Mode_5
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           
  7704                           ;psect for function _LightWithSensController
  7705  177F                     _LightWithSensController:	
  7706                           
  7707                           ;functions.c: 346: if((intSecondCounter == 30)&&(!RC2))
  7708                           
  7709                           ;incstack = 0
  7710                           ; Regs used in _LightWithSensController: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7711  177F  301E               	movlw	30
  7712  1780  1283               	bcf	3,5	;RP0=0, select bank0
  7713  1781  1303               	bcf	3,6	;RP1=0, select bank0
  7714  1782  0665               	xorwf	_intSecondCounter,w
  7715  1783  0466               	iorwf	_intSecondCounter+1,w
  7716  1784  1903               	btfsc	3,2
  7717  1785  1907               	btfsc	7,2	;volatile
  7718  1786  2F8C               	goto	l2903
  7719                           
  7720                           ;functions.c: 347: DarknessCheck();
  7721  1787  160A  118A  2679  160A  118A  	fcall	_DarknessCheck
  7722  178C                     l2903:	
  7723                           
  7724                           ;functions.c: 351: if((bDark == 1)&&(RA1)&&(!RC2))
  7725  178C  1283               	bcf	3,5	;RP0=0, select bank0
  7726  178D  1303               	bcf	3,6	;RP1=0, select bank0
  7727  178E  0368               	decf	_bDark,w
  7728  178F  1903               	btfsc	3,2
  7729  1790  1C85               	btfss	5,1	;volatile
  7730  1791  2FA1               	goto	l2913
  7731  1792  1907               	btfsc	7,2	;volatile
  7732  1793  2FA1               	goto	l2913
  7733                           
  7734                           ;functions.c: 352: {
  7735                           ;functions.c: 354: RC2 = 1;
  7736  1794  1507               	bsf	7,2	;volatile
  7737                           
  7738                           ;functions.c: 356: timerFunction(0,120);
  7739  1795  3000               	movlw	0
  7740  1796  00A0               	movwf	timerFunction@intTimerNumber
  7741  1797  00A1               	movwf	timerFunction@intTimerNumber+1
  7742  1798  3078               	movlw	120
  7743  1799  00A2               	movwf	timerFunction@intSetSeconds
  7744  179A  3000               	movlw	0
  7745  179B  00A3               	movwf	timerFunction@intSetSeconds+1
  7746  179C  160A  118A  2522  160A  118A  	fcall	_timerFunction
  7747  17A1                     l2913:	
  7748                           
  7749                           ;functions.c: 357: }
  7750                           ;functions.c: 360: if(bTimerComplete[0])
  7751  17A1  1283               	bcf	3,5	;RP0=0, select bank0
  7752  17A2  1303               	bcf	3,6	;RP1=0, select bank0
  7753  17A3  0856               	movf	_bTimerComplete,w
  7754  17A4  1903               	btfsc	3,2
  7755  17A5  0008               	return
  7756                           
  7757                           ;functions.c: 361: {
  7758                           ;functions.c: 362: DarknessCheck();
  7759  17A6  160A  118A  2679  160A  118A  	fcall	_DarknessCheck
  7760                           
  7761                           ;functions.c: 363: if((bDark)&&(RA1))
  7762  17AB  1283               	bcf	3,5	;RP0=0, select bank0
  7763  17AC  1303               	bcf	3,6	;RP1=0, select bank0
  7764  17AD  0868               	movf	_bDark,w
  7765  17AE  1D03               	btfss	3,2
  7766  17AF  1C85               	btfss	5,1	;volatile
  7767  17B0  2FBC               	goto	l387
  7768                           
  7769                           ;functions.c: 364: {
  7770                           ;functions.c: 365: timerFunction(0,120);
  7771  17B1  3000               	movlw	0
  7772  17B2  00A0               	movwf	timerFunction@intTimerNumber
  7773  17B3  00A1               	movwf	timerFunction@intTimerNumber+1
  7774  17B4  3078               	movlw	120
  7775  17B5  00A2               	movwf	timerFunction@intSetSeconds
  7776  17B6  3000               	movlw	0
  7777  17B7  00A3               	movwf	timerFunction@intSetSeconds+1
  7778  17B8  160A  118A  2522   	fcall	_timerFunction
  7779                           
  7780                           ;functions.c: 366: }
  7781  17BB  0008               	return
  7782  17BC                     l387:	
  7783                           
  7784                           ;functions.c: 367: else
  7785                           ;functions.c: 368: RC2 = 0;
  7786  17BC  1107               	bcf	7,2	;volatile
  7787  17BD  0008               	return
  7788  17BE                     __end_of_LightWithSensController:	
  7789                           
  7790                           	psect	text39
  7791  1522                     __ptext39:	
  7792 ;; *************** function _timerFunction *****************
  7793 ;; Defined at:
  7794 ;;		line 393 in file "functions.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;  intTimerNumb    2    0[BANK0 ] int 
  7797 ;;  intSetSecond    2    2[BANK0 ] int 
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  1    wreg      unsigned char 
  7802 ;; Registers used:
  7803 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7809 ;;      Params:         0       4       0       0       0
  7810 ;;      Locals:         0       0       0       0       0
  7811 ;;      Temps:          0       1       0       0       0
  7812 ;;      Totals:         0       5       0       0       0
  7813 ;;Total ram usage:        5 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    2
  7816 ;; This function calls:
  7817 ;;		Nothing
  7818 ;; This function is called by:
  7819 ;;		_TransiverToReceive
  7820 ;;		_TransiverReadFIFO
  7821 ;;		_TransmittPacket
  7822 ;;		_LightWithSensController
  7823 ;; This function uses a non-reentrant model
  7824 ;;
  7825                           
  7826                           
  7827                           ;psect for function _timerFunction
  7828  1522                     _timerFunction:	
  7829                           
  7830                           ;functions.c: 395: intClockTimer[intTimerNumber] = intSetSeconds;
  7831                           
  7832                           ;incstack = 0
  7833                           ; Regs used in _timerFunction: [wreg-fsr0h+status,2+status,0]
  7834  1522  1283               	bcf	3,5	;RP0=0, select bank0
  7835  1523  1303               	bcf	3,6	;RP1=0, select bank0
  7836  1524  0820               	movf	timerFunction@intTimerNumber,w
  7837  1525  00A4               	movwf	??_timerFunction
  7838  1526  0724               	addwf	??_timerFunction,w
  7839  1527  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  7840  1528  0084               	movwf	4
  7841  1529  0822               	movf	timerFunction@intSetSeconds,w
  7842  152A  1383               	bcf	3,7	;select IRP bank1
  7843  152B  0080               	movwf	0
  7844  152C  0A84               	incf	4,f
  7845  152D  0823               	movf	timerFunction@intSetSeconds+1,w
  7846  152E  0080               	movwf	0
  7847                           
  7848                           ;functions.c: 396: bTimerComplete[intTimerNumber] = 0;
  7849  152F  0820               	movf	timerFunction@intTimerNumber,w
  7850  1530  3E56               	addlw	(low (_bTimerComplete| 0))& (0+255)
  7851  1531  0084               	movwf	4
  7852  1532  0180               	clrf	0
  7853  1533  0008               	return
  7854  1534                     __end_of_timerFunction:	
  7855                           ;functions.c: 397: return 1;
  7856                           ;	Return value of _timerFunction is never used
  7857                           
  7858                           
  7859                           	psect	text40
  7860  1679                     __ptext40:	
  7861 ;; *************** function _DarknessCheck *****************
  7862 ;; Defined at:
  7863 ;;		line 931 in file "functions.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;		None
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;  darknessValu    1    9[BANK0 ] unsigned char 
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  1    wreg      void 
  7870 ;; Registers used:
  7871 ;;		wreg, status,2, status,0, pclath, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7877 ;;      Params:         0       0       0       0       0
  7878 ;;      Locals:         0       1       0       0       0
  7879 ;;      Temps:          0       1       0       0       0
  7880 ;;      Totals:         0       2       0       0       0
  7881 ;;Total ram usage:        2 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    4
  7884 ;; This function calls:
  7885 ;;		_AnalogValue
  7886 ;;		_eeprom_read
  7887 ;; This function is called by:
  7888 ;;		_ReceivedPacketHandler
  7889 ;;		_Mode_1
  7890 ;;		_LightWithSensController
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           
  7895                           ;psect for function _DarknessCheck
  7896  1679                     _DarknessCheck:	
  7897                           
  7898                           ;functions.c: 933: unsigned char darknessValue;
  7899                           ;functions.c: 936: if(bValueFromPot == TRUE)
  7900                           
  7901                           ;incstack = 0
  7902                           ; Regs used in _DarknessCheck: [wreg+status,2+status,0+pclath+cstack]
  7903  1679  1283               	bcf	3,5	;RP0=0, select bank0
  7904  167A  1303               	bcf	3,6	;RP1=0, select bank0
  7905  167B  036D               	decf	_bValueFromPot,w
  7906  167C  1D03               	btfss	3,2
  7907  167D  2E85               	goto	l2709
  7908                           
  7909                           ;functions.c: 937: darknessValue= AnalogValue(3);
  7910  167E  3003               	movlw	3
  7911  167F  160A  118A  26A0  160A  118A  	fcall	_AnalogValue
  7912  1684  2E8B               	goto	L4
  7913  1685                     l2709:	
  7914                           
  7915                           ;functions.c: 938: else
  7916                           ;functions.c: 939: darknessValue=eeprom_read(0);
  7917  1685  3000               	movlw	0
  7918  1686  160A  118A  2631  160A  118A  	fcall	_eeprom_read
  7919  168B                     L4:	
  7920  168B  1283               	bcf	3,5	;RP0=0, select bank0
  7921  168C  1303               	bcf	3,6	;RP1=0, select bank0
  7922  168D  00A8               	movwf	??_DarknessCheck
  7923  168E  0828               	movf	??_DarknessCheck,w
  7924  168F  00A9               	movwf	DarknessCheck@darknessValue
  7925                           
  7926                           ;functions.c: 941: if(AnalogValue(0)>darknessValue)
  7927  1690  3000               	movlw	0
  7928  1691  160A  118A  26A0  160A  118A  	fcall	_AnalogValue
  7929  1696  1283               	bcf	3,5	;RP0=0, select bank0
  7930  1697  1303               	bcf	3,6	;RP1=0, select bank0
  7931  1698  0229               	subwf	DarknessCheck@darknessValue,w
  7932  1699  1803               	skipnc
  7933  169A  2E9E               	goto	l2713
  7934                           
  7935                           ;functions.c: 942: bDark = 1;
  7936  169B  01E8               	clrf	_bDark
  7937  169C  0AE8               	incf	_bDark,f
  7938  169D  0008               	return
  7939  169E                     l2713:	
  7940                           
  7941                           ;functions.c: 943: else
  7942                           ;functions.c: 944: bDark = 0;
  7943  169E  01E8               	clrf	_bDark
  7944  169F  0008               	return
  7945  16A0                     __end_of_DarknessCheck:	
  7946                           
  7947                           	psect	text41
  7948  1631                     __ptext41:	
  7949 ;; *************** function _eeprom_read *****************
  7950 ;; Defined at:
  7951 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eeread.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  addr            1    wreg     unsigned char 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  addr            1    1[BANK0 ] unsigned char 
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  1    wreg      unsigned char 
  7958 ;; Registers used:
  7959 ;;		wreg, status,2, status,0
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7965 ;;      Params:         0       0       0       0       0
  7966 ;;      Locals:         0       1       0       0       0
  7967 ;;      Temps:          0       1       0       0       0
  7968 ;;      Totals:         0       2       0       0       0
  7969 ;;Total ram usage:        2 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; Hardware stack levels required when called:    2
  7972 ;; This function calls:
  7973 ;;		Nothing
  7974 ;; This function is called by:
  7975 ;;		_ReceivedPacketHandler
  7976 ;;		_DarknessCheck
  7977 ;;		_ReadMemoryAdress
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           
  7982                           ;psect for function _eeprom_read
  7983  1631                     _eeprom_read:	
  7984                           
  7985                           ;incstack = 0
  7986                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  7987                           ;eeprom_read@addr stored from wreg
  7988  1631  1283               	bcf	3,5	;RP0=0, select bank0
  7989  1632  1303               	bcf	3,6	;RP1=0, select bank0
  7990  1633  00A1               	movwf	eeprom_read@addr
  7991  1634  2E37               	goto	l685
  7992  1635                     u1441:	
  7993  1635  1283               	bcf	3,5	;RP0=0, select bank0
  7994  1636  1303               	bcf	3,6	;RP1=0, select bank0
  7995  1637                     l685:	
  7996  1637  0064               	clrwdt	;# 
  7997  1638  1683               	bsf	3,5	;RP0=1, select bank3
  7998  1639  1703               	bsf	3,6	;RP1=1, select bank3
  7999  163A  188C               	btfsc	12,1	;volsfr
  8000  163B  2E35               	goto	u1441
  8001  163C  1283               	bcf	3,5	;RP0=0, select bank0
  8002  163D  1303               	bcf	3,6	;RP1=0, select bank0
  8003  163E  0821               	movf	eeprom_read@addr,w
  8004  163F  1283               	bcf	3,5	;RP0=0, select bank2
  8005  1640  1703               	bsf	3,6	;RP1=1, select bank2
  8006  1641  008D               	movwf	13	;volatile
  8007  1642  303F               	movlw	63
  8008  1643  1283               	bcf	3,5	;RP0=0, select bank0
  8009  1644  1303               	bcf	3,6	;RP1=0, select bank0
  8010  1645  00A0               	movwf	??_eeprom_read
  8011  1646  0820               	movf	??_eeprom_read,w
  8012  1647  1683               	bsf	3,5	;RP0=1, select bank3
  8013  1648  1703               	bsf	3,6	;RP1=1, select bank3
  8014  1649  058C               	andwf	12,f	;volsfr
  8015  164A  140C               	bsf	12,0	;volsfr
  8016  164B  1003               	clrc
  8017  164C  180C               	btfsc	12,0	;volsfr
  8018  164D  1403               	setc
  8019  164E  3000               	movlw	0
  8020  164F  1803               	skipnc
  8021  1650  3001               	movlw	1
  8022  1651  1283               	bcf	3,5	;RP0=0, select bank2
  8023  1652  1703               	bsf	3,6	;RP1=1, select bank2
  8024  1653  080C               	movf	12,w	;volatile
  8025  1654  0008               	return
  8026  1655                     __end_of_eeprom_read:	
  8027                           
  8028                           	psect	text42
  8029  16A0                     __ptext42:	
  8030 ;; *************** function _AnalogValue *****************
  8031 ;; Defined at:
  8032 ;;		line 901 in file "functions.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;  channel         1    wreg     unsigned char 
  8035 ;; Auto vars:     Size  Location     Type
  8036 ;;  channel         1    7[BANK0 ] unsigned char 
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  1    wreg      unsigned char 
  8039 ;; Registers used:
  8040 ;;		wreg, status,2, status,0, pclath, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8046 ;;      Params:         0       0       0       0       0
  8047 ;;      Locals:         0       1       0       0       0
  8048 ;;      Temps:          0       1       0       0       0
  8049 ;;      Totals:         0       2       0       0       0
  8050 ;;Total ram usage:        2 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    3
  8053 ;; This function calls:
  8054 ;;		_DelayDs
  8055 ;; This function is called by:
  8056 ;;		_ReceivedPacketHandler
  8057 ;;		_DarknessCheck
  8058 ;;		_saveDataToFlash
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           
  8063                           ;psect for function _AnalogValue
  8064  16A0                     _AnalogValue:	
  8065                           
  8066                           ;incstack = 0
  8067                           ; Regs used in _AnalogValue: [wreg+status,2+status,0+pclath+cstack]
  8068                           ;AnalogValue@channel stored from wreg
  8069  16A0  1283               	bcf	3,5	;RP0=0, select bank0
  8070  16A1  1303               	bcf	3,6	;RP1=0, select bank0
  8071  16A2  00A7               	movwf	AnalogValue@channel
  8072                           
  8073                           ;functions.c: 903: RC0 = 0;
  8074  16A3  1007               	bcf	7,0	;volatile
  8075                           
  8076                           ;functions.c: 904: ADCON0bits.CHS = channel;
  8077  16A4  0827               	movf	AnalogValue@channel,w
  8078  16A5  00A6               	movwf	??_AnalogValue
  8079  16A6  0DA6               	rlf	??_AnalogValue,f
  8080  16A7  0DA6               	rlf	??_AnalogValue,f
  8081  16A8  081F               	movf	31,w	;volatile
  8082  16A9  0626               	xorwf	??_AnalogValue,w
  8083  16AA  39C3               	andlw	-61
  8084  16AB  0626               	xorwf	??_AnalogValue,w
  8085  16AC  009F               	movwf	31	;volatile
  8086                           
  8087                           ;functions.c: 905: ADCON0bits.ADON = 1;
  8088  16AD  141F               	bsf	31,0	;volatile
  8089                           
  8090                           ;functions.c: 906: DelayDs(1);
  8091  16AE  3001               	movlw	1
  8092  16AF  00A0               	movwf	DelayDs@cnt
  8093  16B0  3000               	movlw	0
  8094  16B1  00A1               	movwf	DelayDs@cnt+1
  8095  16B2  160A  118A  260E  160A  118A  	fcall	_DelayDs
  8096                           
  8097                           ;functions.c: 907: ADCON0bits.GO = 1;
  8098  16B7  1283               	bcf	3,5	;RP0=0, select bank0
  8099  16B8  1303               	bcf	3,6	;RP1=0, select bank0
  8100  16B9  149F               	bsf	31,1	;volatile
  8101                           
  8102                           ;functions.c: 908: DelayDs(1);
  8103  16BA  3001               	movlw	1
  8104  16BB  00A0               	movwf	DelayDs@cnt
  8105  16BC  3000               	movlw	0
  8106  16BD  00A1               	movwf	DelayDs@cnt+1
  8107  16BE  160A  118A  260E  160A  118A  	fcall	_DelayDs
  8108  16C3                     l481:	
  8109                           ;functions.c: 909: while(ADCON0bits.GO);
  8110                           
  8111  16C3  1283               	bcf	3,5	;RP0=0, select bank0
  8112  16C4  1303               	bcf	3,6	;RP1=0, select bank0
  8113  16C5  189F               	btfsc	31,1	;volatile
  8114  16C6  2EC3               	goto	l481
  8115                           
  8116                           ;functions.c: 910: ADCON0bits.ADON = 0;
  8117  16C7  101F               	bcf	31,0	;volatile
  8118                           
  8119                           ;functions.c: 911: RC0 = 1;
  8120  16C8  1407               	bsf	7,0	;volatile
  8121                           
  8122                           ;functions.c: 913: return ADRESH;
  8123  16C9  081E               	movf	30,w	;volatile
  8124  16CA  0008               	return
  8125  16CB                     __end_of_AnalogValue:	
  8126                           
  8127                           	psect	text43
  8128  160E                     __ptext43:	
  8129 ;; *************** function _DelayDs *****************
  8130 ;; Defined at:
  8131 ;;		line 511 in file "functions.c"
  8132 ;; Parameters:    Size  Location     Type
  8133 ;;  cnt             2    0[BANK0 ] int 
  8134 ;; Auto vars:     Size  Location     Type
  8135 ;;  i               2    4[BANK0 ] int 
  8136 ;; Return value:  Size  Location     Type
  8137 ;;                  1    wreg      void 
  8138 ;; Registers used:
  8139 ;;		wreg, status,2
  8140 ;; Tracked objects:
  8141 ;;		On entry : 0/0
  8142 ;;		On exit  : 0/0
  8143 ;;		Unchanged: 0/0
  8144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8145 ;;      Params:         0       2       0       0       0
  8146 ;;      Locals:         0       2       0       0       0
  8147 ;;      Temps:          0       2       0       0       0
  8148 ;;      Totals:         0       6       0       0       0
  8149 ;;Total ram usage:        6 bytes
  8150 ;; Hardware stack levels used:    1
  8151 ;; Hardware stack levels required when called:    2
  8152 ;; This function calls:
  8153 ;;		Nothing
  8154 ;; This function is called by:
  8155 ;;		_ReceivedPacketHandler
  8156 ;;		_Blink
  8157 ;;		_AnalogValue
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           
  8162                           ;psect for function _DelayDs
  8163  160E                     _DelayDs:	
  8164                           
  8165                           ;functions.c: 512: int i;
  8166                           ;functions.c: 513: for(i=0;i<cnt;i++){
  8167                           
  8168                           ;incstack = 0
  8169                           ; Regs used in _DelayDs: [wreg+status,2]
  8170  160E  1283               	bcf	3,5	;RP0=0, select bank0
  8171  160F  1303               	bcf	3,6	;RP1=0, select bank0
  8172  1610  01A4               	clrf	DelayDs@i
  8173  1611  01A5               	clrf	DelayDs@i+1
  8174  1612                     l411:	
  8175  1612  0825               	movf	DelayDs@i+1,w
  8176  1613  3A80               	xorlw	128
  8177  1614  00A2               	movwf	??_DelayDs
  8178  1615  0821               	movf	DelayDs@cnt+1,w
  8179  1616  3A80               	xorlw	128
  8180  1617  0222               	subwf	??_DelayDs,w
  8181  1618  1D03               	skipz
  8182  1619  2E1C               	goto	u1435
  8183  161A  0820               	movf	DelayDs@cnt,w
  8184  161B  0224               	subwf	DelayDs@i,w
  8185  161C                     u1435:	
  8186  161C  1803               	btfsc	3,0
  8187  161D  0008               	return
  8188                           
  8189                           ;functions.c: 514: _delay((unsigned long)((100)*(4000000/4000.0)));
  8190  161E  3082               	movlw	130
  8191  161F  1283               	bcf	3,5	;RP0=0, select bank0
  8192  1620  1303               	bcf	3,6	;RP1=0, select bank0
  8193  1621  00A3               	movwf	??_DelayDs+1
  8194  1622  30DD               	movlw	221
  8195  1623  00A2               	movwf	??_DelayDs
  8196  1624                     u2917:	
  8197  1624  0BA2               	decfsz	??_DelayDs,f
  8198  1625  2E24               	goto	u2917
  8199  1626  0BA3               	decfsz	??_DelayDs+1,f
  8200  1627  2E24               	goto	u2917
  8201  1628  3001               	movlw	1
  8202  1629  1283               	bcf	3,5	;RP0=0, select bank0
  8203  162A  1303               	bcf	3,6	;RP1=0, select bank0
  8204  162B  07A4               	addwf	DelayDs@i,f
  8205  162C  1803               	skipnc
  8206  162D  0AA5               	incf	DelayDs@i+1,f
  8207  162E  3000               	movlw	0
  8208  162F  07A5               	addwf	DelayDs@i+1,f
  8209  1630  2E12               	goto	l411
  8210  1631                     __end_of_DelayDs:	
  8211                           
  8212                           	psect	text44
  8213  0B23                     __ptext44:	
  8214 ;; *************** function _ClockInit *****************
  8215 ;; Defined at:
  8216 ;;		line 6 in file "MCP79510.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;		None
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;  cnt             1    4[BANK0 ] unsigned char 
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      void 
  8223 ;; Registers used:
  8224 ;;		wreg, status,2, status,0, pclath, cstack
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8230 ;;      Params:         0       0       0       0       0
  8231 ;;      Locals:         0       1       0       0       0
  8232 ;;      Temps:          0       1       0       0       0
  8233 ;;      Totals:         0       2       0       0       0
  8234 ;;Total ram usage:        2 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:    4
  8237 ;; This function calls:
  8238 ;;		_ReadSPI
  8239 ;;		_WriteSPI
  8240 ;; This function is called by:
  8241 ;;		_main
  8242 ;; This function uses a non-reentrant model
  8243 ;;
  8244                           
  8245                           
  8246                           ;psect for function _ClockInit
  8247  0B23                     _ClockInit:	
  8248                           
  8249                           ;MCP79510.c: 8: RD4 = 0;
  8250                           
  8251                           ;incstack = 0
  8252                           ; Regs used in _ClockInit: [wreg+status,2+status,0+pclath+cstack]
  8253  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  8254  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  8255  0B25  1208               	bcf	8,4	;volatile
  8256                           
  8257                           ;MCP79510.c: 9: WriteSPI(0x12);
  8258  0B26  3012               	movlw	18
  8259  0B27  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8260                           
  8261                           ;MCP79510.c: 10: WriteSPI(0x01);
  8262  0B2C  3001               	movlw	1
  8263  0B2D  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8264                           
  8265                           ;MCP79510.c: 11: WriteSPI(0x00);
  8266  0B32  3000               	movlw	0
  8267  0B33  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8268                           
  8269                           ;MCP79510.c: 12: RD4 = 1;
  8270  0B38  1283               	bcf	3,5	;RP0=0, select bank0
  8271  0B39  1303               	bcf	3,6	;RP1=0, select bank0
  8272  0B3A  1608               	bsf	8,4	;volatile
  8273                           
  8274                           ;MCP79510.c: 13: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8275  0B3B  300C               	movlw	12
  8276  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
  8277  0B3D  1303               	bcf	3,6	;RP1=0, select bank0
  8278  0B3E  00A3               	movwf	??_ClockInit
  8279  0B3F                     u2927:	
  8280  0B3F  0BA3               	decfsz	??_ClockInit,f
  8281  0B40  2B3F               	goto	u2927
  8282  0B41  0000               	nop
  8283                           
  8284                           ;MCP79510.c: 14: RD4 = 0;
  8285  0B42  1283               	bcf	3,5	;RP0=0, select bank0
  8286  0B43  1303               	bcf	3,6	;RP1=0, select bank0
  8287  0B44  1208               	bcf	8,4	;volatile
  8288                           
  8289                           ;MCP79510.c: 15: WriteSPI(0x12);
  8290  0B45  3012               	movlw	18
  8291  0B46  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8292                           
  8293                           ;MCP79510.c: 16: WriteSPI(0x02);
  8294  0B4B  3002               	movlw	2
  8295  0B4C  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8296                           
  8297                           ;MCP79510.c: 17: WriteSPI(0x00);
  8298  0B51  3000               	movlw	0
  8299  0B52  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8300                           
  8301                           ;MCP79510.c: 18: RD4 = 1;
  8302  0B57  1283               	bcf	3,5	;RP0=0, select bank0
  8303  0B58  1303               	bcf	3,6	;RP1=0, select bank0
  8304  0B59  1608               	bsf	8,4	;volatile
  8305                           
  8306                           ;MCP79510.c: 19: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8307  0B5A  300C               	movlw	12
  8308  0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  8309  0B5C  1303               	bcf	3,6	;RP1=0, select bank0
  8310  0B5D  00A3               	movwf	??_ClockInit
  8311  0B5E                     u2937:	
  8312  0B5E  0BA3               	decfsz	??_ClockInit,f
  8313  0B5F  2B5E               	goto	u2937
  8314  0B60  0000               	nop
  8315                           
  8316                           ;MCP79510.c: 20: RD4 = 0;
  8317  0B61  1283               	bcf	3,5	;RP0=0, select bank0
  8318  0B62  1303               	bcf	3,6	;RP1=0, select bank0
  8319  0B63  1208               	bcf	8,4	;volatile
  8320                           
  8321                           ;MCP79510.c: 21: WriteSPI(0x12);
  8322  0B64  3012               	movlw	18
  8323  0B65  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8324                           
  8325                           ;MCP79510.c: 22: WriteSPI(0x08);
  8326  0B6A  3008               	movlw	8
  8327  0B6B  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8328                           
  8329                           ;MCP79510.c: 23: WriteSPI(0x00);
  8330  0B70  3000               	movlw	0
  8331  0B71  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8332                           
  8333                           ;MCP79510.c: 24: RD4 = 1;
  8334  0B76  1283               	bcf	3,5	;RP0=0, select bank0
  8335  0B77  1303               	bcf	3,6	;RP1=0, select bank0
  8336  0B78  1608               	bsf	8,4	;volatile
  8337                           
  8338                           ;MCP79510.c: 25: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8339  0B79  300C               	movlw	12
  8340  0B7A  1283               	bcf	3,5	;RP0=0, select bank0
  8341  0B7B  1303               	bcf	3,6	;RP1=0, select bank0
  8342  0B7C  00A3               	movwf	??_ClockInit
  8343  0B7D                     u2947:	
  8344  0B7D  0BA3               	decfsz	??_ClockInit,f
  8345  0B7E  2B7D               	goto	u2947
  8346  0B7F  0000               	nop
  8347                           
  8348                           ;MCP79510.c: 26: RD4 = 0;
  8349  0B80  1283               	bcf	3,5	;RP0=0, select bank0
  8350  0B81  1303               	bcf	3,6	;RP1=0, select bank0
  8351  0B82  1208               	bcf	8,4	;volatile
  8352                           
  8353                           ;MCP79510.c: 27: WriteSPI(0x12);
  8354  0B83  3012               	movlw	18
  8355  0B84  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8356                           
  8357                           ;MCP79510.c: 28: WriteSPI(0x01);
  8358  0B89  3001               	movlw	1
  8359  0B8A  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8360                           
  8361                           ;MCP79510.c: 29: WriteSPI(0x80);
  8362  0B8F  3080               	movlw	128
  8363  0B90  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8364                           
  8365                           ;MCP79510.c: 30: RD4 = 1;
  8366  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  8367  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  8368  0B97  1608               	bsf	8,4	;volatile
  8369                           
  8370                           ;MCP79510.c: 32: char cnt = 0;
  8371  0B98  01A4               	clrf	ClockInit@cnt
  8372  0B99                     l3135:	
  8373                           ;MCP79510.c: 33: while(cnt < 100)
  8374                           
  8375  0B99  3064               	movlw	100
  8376  0B9A  0224               	subwf	ClockInit@cnt,w
  8377  0B9B  1803               	btfsc	3,0
  8378  0B9C  2BB9               	goto	l668
  8379                           
  8380                           ;MCP79510.c: 34: {
  8381                           ;MCP79510.c: 35: RD4 = 0;
  8382  0B9D  1208               	bcf	8,4	;volatile
  8383                           
  8384                           ;MCP79510.c: 36: WriteSPI(0x13);
  8385  0B9E  3013               	movlw	19
  8386  0B9F  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8387                           
  8388                           ;MCP79510.c: 37: WriteSPI(0x04);
  8389  0BA4  3004               	movlw	4
  8390  0BA5  160A  118A  2504  120A  158A  	fcall	_WriteSPI
  8391                           
  8392                           ;MCP79510.c: 38: if((ReadSPI() & 0b00100000) != 0)
  8393  0BAA  160A  118A  24C9  120A  158A  	fcall	_ReadSPI
  8394  0BAF  3920               	andlw	32
  8395  0BB0  1D03               	btfss	3,2
  8396  0BB1  2BB9               	goto	l668
  8397                           
  8398                           ;MCP79510.c: 42: }
  8399                           ;MCP79510.c: 43: cnt++;
  8400                           
  8401                           ;MCP79510.c: 39: {
  8402                           ;MCP79510.c: 40: break;
  8403  0BB2  3001               	movlw	1
  8404  0BB3  1283               	bcf	3,5	;RP0=0, select bank0
  8405  0BB4  1303               	bcf	3,6	;RP1=0, select bank0
  8406  0BB5  00A3               	movwf	??_ClockInit
  8407  0BB6  0823               	movf	??_ClockInit,w
  8408  0BB7  07A4               	addwf	ClockInit@cnt,f
  8409  0BB8  2B99               	goto	l3135
  8410  0BB9                     l668:	
  8411                           
  8412                           ;MCP79510.c: 46: }
  8413                           ;MCP79510.c: 47: RD4 = 1;
  8414  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
  8415  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
  8416  0BBB  1608               	bsf	8,4	;volatile
  8417  0BBC  0008               	return
  8418  0BBD                     __end_of_ClockInit:	
  8419                           
  8420                           	psect	text45
  8421  14C9                     __ptext45:	
  8422 ;; *************** function _ReadSPI *****************
  8423 ;; Defined at:
  8424 ;;		line 532 in file "functions.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;		None
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;		None
  8429 ;; Return value:  Size  Location     Type
  8430 ;;                  1    wreg      unsigned char 
  8431 ;; Registers used:
  8432 ;;		wreg, status,2, status,0, pclath, cstack
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8438 ;;      Params:         0       0       0       0       0
  8439 ;;      Locals:         0       0       0       0       0
  8440 ;;      Temps:          0       0       0       0       0
  8441 ;;      Totals:         0       0       0       0       0
  8442 ;;Total ram usage:        0 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; Hardware stack levels required when called:    3
  8445 ;; This function calls:
  8446 ;;		_WriteSPI
  8447 ;; This function is called by:
  8448 ;;		_RegisterRead
  8449 ;;		_ReadFIFO
  8450 ;;		_read_ram_status
  8451 ;;		_read_write_flash_ram
  8452 ;;		_ClockInit
  8453 ;;		_ReadClock
  8454 ;;		_read_ram_id
  8455 ;; This function uses a non-reentrant model
  8456 ;;
  8457                           
  8458                           
  8459                           ;psect for function _ReadSPI
  8460  14C9                     _ReadSPI:	
  8461                           
  8462                           ;functions.c: 534: WriteSPI(0x00);
  8463                           
  8464                           ;incstack = 0
  8465                           ; Regs used in _ReadSPI: [wreg+status,2+status,0+pclath+cstack]
  8466  14C9  3000               	movlw	0
  8467  14CA  160A  118A  2504   	fcall	_WriteSPI
  8468                           
  8469                           ;functions.c: 535: return SSPBUF;
  8470  14CD  1283               	bcf	3,5	;RP0=0, select bank0
  8471  14CE  1303               	bcf	3,6	;RP1=0, select bank0
  8472  14CF  0813               	movf	19,w	;volatile
  8473  14D0  0008               	return
  8474  14D1                     __end_of_ReadSPI:	
  8475                           
  8476                           	psect	text46
  8477  1504                     __ptext46:	
  8478 ;; *************** function _WriteSPI *****************
  8479 ;; Defined at:
  8480 ;;		line 520 in file "functions.c"
  8481 ;; Parameters:    Size  Location     Type
  8482 ;;  databyte        1    wreg     unsigned char 
  8483 ;; Auto vars:     Size  Location     Type
  8484 ;;  databyte        1    2[BANK0 ] unsigned char 
  8485 ;;  buffer          1    1[BANK0 ] unsigned char 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  1    wreg      void 
  8488 ;; Registers used:
  8489 ;;		wreg
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8495 ;;      Params:         0       0       0       0       0
  8496 ;;      Locals:         0       2       0       0       0
  8497 ;;      Temps:          0       1       0       0       0
  8498 ;;      Totals:         0       3       0       0       0
  8499 ;;Total ram usage:        3 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:    2
  8502 ;; This function calls:
  8503 ;;		Nothing
  8504 ;; This function is called by:
  8505 ;;		_ReadSPI
  8506 ;;		_RegisterRead
  8507 ;;		_RegisterSet
  8508 ;;		_WriteFIFO
  8509 ;;		_read_ram_status
  8510 ;;		_ram_bulk_erase
  8511 ;;		_read_write_flash_ram
  8512 ;;		_write_ram_status
  8513 ;;		_ClockInit
  8514 ;;		_ReadClock
  8515 ;;		_read_ram_id
  8516 ;;		_ram_sector_erase
  8517 ;;		_power_up_flash_ram
  8518 ;;		_power_down_flash_ram
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           
  8523                           ;psect for function _WriteSPI
  8524  1504                     _WriteSPI:	
  8525                           
  8526                           ;incstack = 0
  8527                           ; Regs used in _WriteSPI: [wreg]
  8528                           ;WriteSPI@databyte stored from wreg
  8529  1504  1283               	bcf	3,5	;RP0=0, select bank0
  8530  1505  1303               	bcf	3,6	;RP1=0, select bank0
  8531  1506  00A2               	movwf	WriteSPI@databyte
  8532                           
  8533                           ;functions.c: 522: unsigned char buffer;
  8534                           ;functions.c: 523: buffer = SSPBUF;
  8535  1507  0813               	movf	19,w	;volatile
  8536  1508  00A0               	movwf	??_WriteSPI
  8537  1509  0820               	movf	??_WriteSPI,w
  8538  150A  00A1               	movwf	WriteSPI@buffer
  8539                           
  8540                           ;functions.c: 524: PIR1bits.SSPIF=0;
  8541  150B  118C               	bcf	12,3	;volatile
  8542                           
  8543                           ;functions.c: 525: SSPBUF = databyte;
  8544  150C  0822               	movf	WriteSPI@databyte,w
  8545  150D  0093               	movwf	19	;volatile
  8546  150E                     l417:	
  8547                           ;functions.c: 526: while(PIR1bits.SSPIF == 0);
  8548                           
  8549  150E  1D8C               	btfss	12,3	;volatile
  8550  150F  2D0E               	goto	l417
  8551                           
  8552                           ;functions.c: 527: PIR1bits.SSPIF = 0;
  8553  1510  118C               	bcf	12,3	;volatile
  8554  1511  0008               	return
  8555  1512                     __end_of_WriteSPI:	
  8556                           
  8557                           	psect	text47
  8558  0C6F                     __ptext47:	
  8559 ;; *************** function _tc_int *****************
  8560 ;; Defined at:
  8561 ;;		line 826 in file "functions.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;		None
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;		None
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      void 
  8568 ;; Registers used:
  8569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8575 ;;      Params:         0       0       0       0       0
  8576 ;;      Locals:         0       0       0       0       0
  8577 ;;      Temps:          7       0       0       0       0
  8578 ;;      Totals:         7       0       0       0       0
  8579 ;;Total ram usage:        7 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    1
  8582 ;; This function calls:
  8583 ;;		_TimerCounter
  8584 ;;		i1_OperationMode
  8585 ;; This function is called by:
  8586 ;;		Interrupt level 1
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           
  8591                           ;psect for function _tc_int
  8592  0C6F                     _tc_int:	
  8593                           
  8594                           ;functions.c: 829: if((RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2)){
  8595  0C6F  1A86               	btfsc	6,5	;volatile
  8596  0C70  2C87               	goto	i1l3399
  8597  0C71  085D               	movf	_intBlinkCycle,w
  8598  0C72  045E               	iorwf	_intBlinkCycle+1,w
  8599  0C73  1D03               	btfss	3,2
  8600  0C74  2C87               	goto	i1l3399
  8601  0C75  160A  118A  24D9  120A  158A  	fcall	i1_OperationMode
  8602  0C7A  00F5               	movwf	??_tc_int
  8603  0C7B  3002               	movlw	2
  8604  0C7C  0275               	subwf	??_tc_int,w
  8605  0C7D  1803               	skipnc
  8606  0C7E  2C87               	goto	i1l3399
  8607                           
  8608                           ;functions.c: 830: intBlinkCycle = 1;
  8609  0C7F  3001               	movlw	1
  8610  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  8611  0C81  1303               	bcf	3,6	;RP1=0, select bank0
  8612  0C82  00DD               	movwf	_intBlinkCycle
  8613  0C83  3000               	movlw	0
  8614  0C84  00DE               	movwf	_intBlinkCycle+1
  8615                           
  8616                           ;functions.c: 831: intBlinkCounter = 0;
  8617  0C85  01FC               	clrf	_intBlinkCounter
  8618  0C86  01FD               	clrf	_intBlinkCounter+1
  8619  0C87                     i1l3399:	
  8620                           
  8621                           ;functions.c: 833: }
  8622                           ;functions.c: 836: if(TMR1IF ==1){
  8623  0C87  1283               	bcf	3,5	;RP0=0, select bank0
  8624  0C88  1303               	bcf	3,6	;RP1=0, select bank0
  8625  0C89  1C0C               	btfss	12,0	;volatile
  8626  0C8A  2D24               	goto	L5
  8627                           
  8628                           ;functions.c: 837: TMR1ON = 0;
  8629  0C8B  1010               	bcf	16,0	;volatile
  8630                           
  8631                           ;functions.c: 838: TMR1H = 0x0B;
  8632  0C8C  300B               	movlw	11
  8633  0C8D  008F               	movwf	15	;volatile
  8634                           
  8635                           ;functions.c: 839: TMR1L = 0xDB;
  8636  0C8E  30DB               	movlw	219
  8637  0C8F  008E               	movwf	14	;volatile
  8638                           
  8639                           ;functions.c: 841: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
  8640  0C90  035D               	decf	_intBlinkCycle,w
  8641  0C91  045E               	iorwf	_intBlinkCycle+1,w
  8642  0C92  1D03               	btfss	3,2
  8643  0C93  2CB6               	goto	i1l3417
  8644  0C94  086C               	movf	_intNumberOfBlinks+1,w
  8645  0C95  00F6               	movwf	??_tc_int+1
  8646  0C96  086B               	movf	_intNumberOfBlinks,w
  8647  0C97  00F5               	movwf	??_tc_int
  8648  0C98  1003               	clrc
  8649  0C99  0DF5               	rlf	??_tc_int,f
  8650  0C9A  0DF6               	rlf	??_tc_int+1,f
  8651  0C9B  087D               	movf	_intBlinkCounter+1,w
  8652  0C9C  3A80               	xorlw	128
  8653  0C9D  00F7               	movwf	??_tc_int+2
  8654  0C9E  0876               	movf	??_tc_int+1,w
  8655  0C9F  3A80               	xorlw	128
  8656  0CA0  0277               	subwf	??_tc_int+2,w
  8657  0CA1  1D03               	skipz
  8658  0CA2  2CA5               	goto	u266_25
  8659  0CA3  0875               	movf	??_tc_int,w
  8660  0CA4  027C               	subwf	_intBlinkCounter,w
  8661  0CA5                     u266_25:	
  8662  0CA5  1803               	skipnc
  8663  0CA6  2CB6               	goto	i1l3417
  8664                           
  8665                           ;functions.c: 842: intBlinkCounter++;
  8666  0CA7  3001               	movlw	1
  8667  0CA8  07FC               	addwf	_intBlinkCounter,f
  8668  0CA9  1803               	skipnc
  8669  0CAA  0AFD               	incf	_intBlinkCounter+1,f
  8670  0CAB  3000               	movlw	0
  8671  0CAC  07FD               	addwf	_intBlinkCounter+1,f
  8672                           
  8673                           ;functions.c: 844: if(RC1 == 0)
  8674  0CAD  1283               	bcf	3,5	;RP0=0, select bank0
  8675  0CAE  1303               	bcf	3,6	;RP1=0, select bank0
  8676  0CAF  1887               	btfsc	7,1	;volatile
  8677  0CB0  2CB3               	goto	i1l470
  8678                           
  8679                           ;functions.c: 845: RC1 = 1;
  8680  0CB1  1487               	bsf	7,1	;volatile
  8681  0CB2  2CD4               	goto	i1l3425
  8682  0CB3                     i1l470:	
  8683                           
  8684                           ;functions.c: 846: else if(RC1 == 1)
  8685  0CB3  1C87               	btfss	7,1	;volatile
  8686  0CB4  2CD4               	goto	i1l3425
  8687  0CB5  2CD3               	goto	i1l3423
  8688  0CB6                     i1l3417:	
  8689                           ;functions.c: 848: }
  8690                           
  8691                           ;functions.c: 847: RC1 = 0;
  8692                           
  8693                           
  8694                           ;functions.c: 850: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
  8695  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  8696  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  8697  0CB8  035D               	decf	_intBlinkCycle,w
  8698  0CB9  045E               	iorwf	_intBlinkCycle+1,w
  8699  0CBA  1D03               	btfss	3,2
  8700  0CBB  2CD4               	goto	i1l3425
  8701  0CBC  086C               	movf	_intNumberOfBlinks+1,w
  8702  0CBD  00F6               	movwf	??_tc_int+1
  8703  0CBE  086B               	movf	_intNumberOfBlinks,w
  8704  0CBF  00F5               	movwf	??_tc_int
  8705  0CC0  1003               	clrc
  8706  0CC1  0DF5               	rlf	??_tc_int,f
  8707  0CC2  0DF6               	rlf	??_tc_int+1,f
  8708  0CC3  087D               	movf	_intBlinkCounter+1,w
  8709  0CC4  3A80               	xorlw	128
  8710  0CC5  00F7               	movwf	??_tc_int+2
  8711  0CC6  0876               	movf	??_tc_int+1,w
  8712  0CC7  3A80               	xorlw	128
  8713  0CC8  0277               	subwf	??_tc_int+2,w
  8714  0CC9  1D03               	skipz
  8715  0CCA  2CCD               	goto	u270_25
  8716  0CCB  0875               	movf	??_tc_int,w
  8717  0CCC  027C               	subwf	_intBlinkCounter,w
  8718  0CCD                     u270_25:	
  8719  0CCD  1C03               	skipc
  8720  0CCE  2CD4               	goto	i1l3425
  8721                           
  8722                           ;functions.c: 851: intBlinkCycle = 0;
  8723  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  8724  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  8725  0CD1  01DD               	clrf	_intBlinkCycle
  8726  0CD2  01DE               	clrf	_intBlinkCycle+1
  8727  0CD3                     i1l3423:	
  8728                           
  8729                           ;functions.c: 852: RC1 = 0;
  8730  0CD3  1087               	bcf	7,1	;volatile
  8731  0CD4                     i1l3425:	
  8732                           
  8733                           ;functions.c: 853: }
  8734                           ;functions.c: 856: intHalfSecondCounter++;
  8735  0CD4  3001               	movlw	1
  8736  0CD5  1283               	bcf	3,5	;RP0=0, select bank0
  8737  0CD6  1303               	bcf	3,6	;RP1=0, select bank0
  8738  0CD7  07E1               	addwf	_intHalfSecondCounter,f
  8739  0CD8  1803               	skipnc
  8740  0CD9  0AE2               	incf	_intHalfSecondCounter+1,f
  8741  0CDA  3000               	movlw	0
  8742  0CDB  07E2               	addwf	_intHalfSecondCounter+1,f
  8743                           
  8744                           ;functions.c: 857: if(intHalfSecondCounter>=2)
  8745  0CDC  0862               	movf	_intHalfSecondCounter+1,w
  8746  0CDD  3A80               	xorlw	128
  8747  0CDE  00FF               	movwf	127
  8748  0CDF  3080               	movlw	128
  8749  0CE0  027F               	subwf	127,w
  8750  0CE1  1D03               	skipz
  8751  0CE2  2CE5               	goto	u271_25
  8752  0CE3  3002               	movlw	2
  8753  0CE4  0261               	subwf	_intHalfSecondCounter,w
  8754  0CE5                     u271_25:	
  8755  0CE5  1C03               	skipc
  8756  0CE6  2CF6               	goto	i1l3435
  8757                           
  8758                           ;functions.c: 858: {
  8759                           ;functions.c: 859: intHalfSecondCounter = 0;
  8760  0CE7  1283               	bcf	3,5	;RP0=0, select bank0
  8761  0CE8  1303               	bcf	3,6	;RP1=0, select bank0
  8762  0CE9  01E1               	clrf	_intHalfSecondCounter
  8763  0CEA  01E2               	clrf	_intHalfSecondCounter+1
  8764                           
  8765                           ;functions.c: 860: intSecondCounter++;
  8766  0CEB  3001               	movlw	1
  8767  0CEC  07E5               	addwf	_intSecondCounter,f
  8768  0CED  1803               	skipnc
  8769  0CEE  0AE6               	incf	_intSecondCounter+1,f
  8770  0CEF  3000               	movlw	0
  8771  0CF0  07E6               	addwf	_intSecondCounter+1,f
  8772                           
  8773                           ;functions.c: 861: TimerCounter();
  8774  0CF1  160A  118A  27BE  120A  158A  	fcall	_TimerCounter
  8775  0CF6                     i1l3435:	
  8776                           
  8777                           ;functions.c: 863: }
  8778                           ;functions.c: 864: if(intSecondCounter >=60)
  8779  0CF6  1283               	bcf	3,5	;RP0=0, select bank0
  8780  0CF7  1303               	bcf	3,6	;RP1=0, select bank0
  8781  0CF8  0866               	movf	_intSecondCounter+1,w
  8782  0CF9  3A80               	xorlw	128
  8783  0CFA  00FF               	movwf	127
  8784  0CFB  3080               	movlw	128
  8785  0CFC  027F               	subwf	127,w
  8786  0CFD  1D03               	skipz
  8787  0CFE  2D01               	goto	u272_25
  8788  0CFF  303C               	movlw	60
  8789  0D00  0265               	subwf	_intSecondCounter,w
  8790  0D01                     u272_25:	
  8791  0D01  1C03               	skipc
  8792  0D02  2D0F               	goto	i1l3443
  8793                           
  8794                           ;functions.c: 865: {
  8795                           ;functions.c: 866: intSecondCounter = 0;
  8796  0D03  1283               	bcf	3,5	;RP0=0, select bank0
  8797  0D04  1303               	bcf	3,6	;RP1=0, select bank0
  8798  0D05  01E5               	clrf	_intSecondCounter
  8799  0D06  01E6               	clrf	_intSecondCounter+1
  8800                           
  8801                           ;functions.c: 867: intMinuteCounter++;
  8802  0D07  3001               	movlw	1
  8803  0D08  07E3               	addwf	_intMinuteCounter,f
  8804  0D09  1803               	skipnc
  8805  0D0A  0AE4               	incf	_intMinuteCounter+1,f
  8806  0D0B  3000               	movlw	0
  8807  0D0C  07E4               	addwf	_intMinuteCounter+1,f
  8808                           
  8809                           ;functions.c: 868: bSaveDataToFlash = TRUE;
  8810  0D0D  01E9               	clrf	_bSaveDataToFlash
  8811  0D0E  0AE9               	incf	_bSaveDataToFlash,f
  8812  0D0F                     i1l3443:	
  8813                           
  8814                           ;functions.c: 870: }
  8815                           ;functions.c: 871: if(intMinuteCounter >= 60)
  8816  0D0F  1283               	bcf	3,5	;RP0=0, select bank0
  8817  0D10  1303               	bcf	3,6	;RP1=0, select bank0
  8818  0D11  0864               	movf	_intMinuteCounter+1,w
  8819  0D12  3A80               	xorlw	128
  8820  0D13  00FF               	movwf	127
  8821  0D14  3080               	movlw	128
  8822  0D15  027F               	subwf	127,w
  8823  0D16  1D03               	skipz
  8824  0D17  2D1A               	goto	u273_25
  8825  0D18  303C               	movlw	60
  8826  0D19  0263               	subwf	_intMinuteCounter,w
  8827  0D1A                     u273_25:	
  8828  0D1A  1C03               	skipc
  8829  0D1B  2D20               	goto	i1l3447
  8830                           
  8831                           ;functions.c: 872: {
  8832                           ;functions.c: 873: intMinuteCounter = 0;
  8833  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  8834  0D1D  1303               	bcf	3,6	;RP1=0, select bank0
  8835  0D1E  01E3               	clrf	_intMinuteCounter
  8836  0D1F  01E4               	clrf	_intMinuteCounter+1
  8837  0D20                     i1l3447:	
  8838                           
  8839                           ;functions.c: 874: }
  8840                           ;functions.c: 877: TMR1ON = 1;
  8841  0D20  1283               	bcf	3,5	;RP0=0, select bank0
  8842  0D21  1303               	bcf	3,6	;RP1=0, select bank0
  8843  0D22  1410               	bsf	16,0	;volatile
  8844                           
  8845                           ;functions.c: 878: }
  8846                           ;functions.c: 879: TMR1IF = 0;
  8847  0D23  100C               	bcf	12,0	;volatile
  8848  0D24                     L5:	
  8849                           
  8850                           ;functions.c: 880: RBIF = 0;
  8851  0D24  100B               	bcf	11,0	;volatile
  8852                           
  8853                           ;functions.c: 881: GIE = 1;
  8854  0D25  178B               	bsf	11,7	;volatile
  8855                           
  8856                           ;functions.c: 882: return;
  8857  0D26  087B               	movf	??_tc_int+6,w
  8858  0D27  00FF               	movwf	127
  8859  0D28  087A               	movf	??_tc_int+5,w
  8860  0D29  008A               	movwf	10
  8861  0D2A  0879               	movf	??_tc_int+4,w
  8862  0D2B  0084               	movwf	4
  8863  0D2C  0E78               	swapf	(??_tc_int+3)^(0+-128),w
  8864  0D2D  0083               	movwf	3
  8865  0D2E  0EFE               	swapf	126,f
  8866  0D2F  0E7E               	swapf	126,w
  8867  0D30  0009               	retfie
  8868  0D31                     __end_of_tc_int:	
  8869                           
  8870                           	psect	intentry
  8871  0004                     __pintentry:	
  8872                           ;incstack = 0
  8873 ;; hardware stack exceeded
  8874                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8875                           
  8876  0004                     interrupt_function:	
  8877  007E                     saved_w	set	btemp
  8878  0004  00FE               	movwf	btemp
  8879  0005  0E03               	swapf	3,w
  8880  0006  00F8               	movwf	??_tc_int+3
  8881  0007  0804               	movf	4,w
  8882  0008  00F9               	movwf	??_tc_int+4
  8883  0009  080A               	movf	10,w
  8884  000A  00FA               	movwf	??_tc_int+5
  8885  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8886  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8887  000D  087F               	movf	btemp+1,w
  8888  000E  00FB               	movwf	??_tc_int+6
  8889  000F  120A  158A  2C6F   	ljmp	_tc_int
  8890                           
  8891                           	psect	text48
  8892  14D9                     __ptext48:	
  8893 ;; *************** function i1_OperationMode *****************
  8894 ;; Defined at:
  8895 ;;		line 964 in file "functions.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;		None
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;  OperationMod    1    1[COMMON] unsigned char 
  8900 ;; Return value:  Size  Location     Type
  8901 ;;                  1    wreg      unsigned char 
  8902 ;; Registers used:
  8903 ;;		wreg, status,2
  8904 ;; Tracked objects:
  8905 ;;		On entry : 0/0
  8906 ;;		On exit  : 0/0
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8909 ;;      Params:         0       0       0       0       0
  8910 ;;      Locals:         1       0       0       0       0
  8911 ;;      Temps:          1       0       0       0       0
  8912 ;;      Totals:         2       0       0       0       0
  8913 ;;Total ram usage:        2 bytes
  8914 ;; Hardware stack levels used:    1
  8915 ;; This function calls:
  8916 ;;		Nothing
  8917 ;; This function is called by:
  8918 ;;		_tc_int
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           
  8923                           ;psect for function i1_OperationMode
  8924  14D9                     i1_OperationMode:	
  8925                           
  8926                           ;functions.c: 966: unsigned char bracketStatus;
  8927                           ;functions.c: 967: bracketStatus = ((~PORTB) & 0b00000111) ;
  8928                           
  8929                           ;incstack = 0
  8930 ;; hardware stack exceeded
  8931                           ; Regs used in i1_OperationMode: [wreg+status,2]
  8932  14D9  1283               	bcf	3,5	;RP0=0, select bank0
  8933  14DA  1303               	bcf	3,6	;RP1=0, select bank0
  8934  14DB  0906               	comf	6,w	;volatile
  8935  14DC  3907               	andlw	7
  8936  14DD  00F0               	movwf	??i1_OperationMode
  8937  14DE  0870               	movf	??i1_OperationMode,w
  8938  14DF  00F1               	movwf	i1OperationMode@bracketStatus
  8939                           
  8940                           ;functions.c: 969: return bracketStatus;
  8941  14E0  0871               	movf	i1OperationMode@bracketStatus,w
  8942  14E1  0008               	return
  8943  14E2                     __end_ofi1_OperationMode:	
  8944                           
  8945                           	psect	text49
  8946  17BE                     __ptext49:	
  8947 ;; *************** function _TimerCounter *****************
  8948 ;; Defined at:
  8949 ;;		line 415 in file "functions.c"
  8950 ;; Parameters:    Size  Location     Type
  8951 ;;		None
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;  i               2    3[COMMON] int 
  8954 ;; Return value:  Size  Location     Type
  8955 ;;                  1    wreg      void 
  8956 ;; Registers used:
  8957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  8958 ;; Tracked objects:
  8959 ;;		On entry : 0/0
  8960 ;;		On exit  : 0/0
  8961 ;;		Unchanged: 0/0
  8962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8963 ;;      Params:         0       0       0       0       0
  8964 ;;      Locals:         2       0       0       0       0
  8965 ;;      Temps:          3       0       0       0       0
  8966 ;;      Totals:         5       0       0       0       0
  8967 ;;Total ram usage:        5 bytes
  8968 ;; Hardware stack levels used:    1
  8969 ;; This function calls:
  8970 ;;		Nothing
  8971 ;; This function is called by:
  8972 ;;		_tc_int
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           
  8977                           ;psect for function _TimerCounter
  8978  17BE                     _TimerCounter:	
  8979                           
  8980                           ;functions.c: 417: for (int i = 0; i < 5; i++)
  8981                           
  8982                           ;incstack = 0
  8983 ;; hardware stack exceeded
  8984                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  8985  17BE  01F3               	clrf	TimerCounter@i
  8986  17BF  01F4               	clrf	TimerCounter@i+1
  8987  17C0                     L6:	
  8988  17C0  0874               	movf	TimerCounter@i+1,w
  8989  17C1  3A80               	xorlw	128
  8990  17C2  00FF               	movwf	127
  8991  17C3  3080               	movlw	128
  8992  17C4  027F               	subwf	127,w
  8993  17C5  1D03               	skipz
  8994  17C6  2FC9               	goto	u247_25
  8995  17C7  3005               	movlw	5
  8996  17C8  0273               	subwf	TimerCounter@i,w
  8997  17C9                     u247_25:	
  8998  17C9  1803               	btfsc	3,0
  8999  17CA  0008               	return
  9000                           
  9001                           ;functions.c: 418: {
  9002                           ;functions.c: 419: if(intClockTimer[i]>0)
  9003  17CB  0873               	movf	TimerCounter@i,w
  9004  17CC  00F0               	movwf	??_TimerCounter
  9005  17CD  0770               	addwf	??_TimerCounter,w
  9006  17CE  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  9007  17CF  0084               	movwf	4
  9008  17D0  1383               	bcf	3,7	;select IRP bank1
  9009  17D1  0800               	movf	0,w
  9010  17D2  00F1               	movwf	??_TimerCounter+1
  9011  17D3  0A84               	incf	4,f
  9012  17D4  0800               	movf	0,w
  9013  17D5  00F2               	movwf	??_TimerCounter+2
  9014  17D6  0872               	movf	??_TimerCounter+2,w
  9015  17D7  3A80               	xorlw	128
  9016  17D8  00FF               	movwf	127
  9017  17D9  3080               	movlw	128
  9018  17DA  027F               	subwf	127,w
  9019  17DB  1D03               	skipz
  9020  17DC  2FDF               	goto	u248_25
  9021  17DD  3001               	movlw	1
  9022  17DE  0271               	subwf	??_TimerCounter+1,w
  9023  17DF                     u248_25:	
  9024  17DF  1C03               	skipc
  9025  17E0  2FF3               	goto	i1l3305
  9026                           
  9027                           ;functions.c: 420: intClockTimer[i]--;
  9028  17E1  0873               	movf	TimerCounter@i,w
  9029  17E2  00F0               	movwf	??_TimerCounter
  9030  17E3  0770               	addwf	??_TimerCounter,w
  9031  17E4  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  9032  17E5  0084               	movwf	4
  9033  17E6  30FF               	movlw	255
  9034  17E7  1383               	bcf	3,7	;select IRP bank1
  9035  17E8  0780               	addwf	0,f
  9036  17E9  0F84               	incfsz	4,f
  9037  17EA  0800               	movf	0,w
  9038  17EB  1803               	skipnc
  9039  17EC  0A00               	incf	0,w
  9040  17ED  00FF               	movwf	127
  9041  17EE  30FF               	movlw	255
  9042  17EF  077F               	addwf	127,w
  9043  17F0  0080               	movwf	0
  9044  17F1  0384               	decf	4,f
  9045  17F2  2FF9               	goto	i1l3307
  9046  17F3                     i1l3305:	
  9047                           
  9048                           ;functions.c: 421: else
  9049                           ;functions.c: 422: bTimerComplete[i] = 1;
  9050  17F3  0873               	movf	TimerCounter@i,w
  9051  17F4  3E56               	addlw	(low (_bTimerComplete| 0))& (0+255)
  9052  17F5  0084               	movwf	4
  9053  17F6  1383               	bcf	3,7	;select IRP bank0
  9054  17F7  0180               	clrf	0
  9055  17F8  0A80               	incf	0,f
  9056  17F9                     i1l3307:	
  9057  17F9  3001               	movlw	1
  9058  17FA  07F3               	addwf	TimerCounter@i,f
  9059  17FB  1803               	skipnc
  9060  17FC  0AF4               	incf	TimerCounter@i+1,f
  9061  17FD  3000               	movlw	0
  9062  17FE  07F4               	addwf	TimerCounter@i+1,f
  9063  17FF  2FC0               	goto	L6
  9064  1800                     __end_of_TimerCounter:	
  9065  007E                     btemp	set	126	;btemp
  9066  007E                     wtemp0	set	126


Data Sizes:
    Strings     16
    Constant    39
    Data        3
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     54      78
    BANK1            80     34      44
    BANK3            96      0      40
    BANK2            96      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strchr@ptr	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    strstr@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strstr@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    ReadClock@year	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@year(BANK0[1]), 

    ReadClock@month	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@month(BANK0[1]), 

    ReadClock@date	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@date(BANK0[1]), 

    ReadClock@hour	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@hours(BANK0[1]), 

    ReadClock@minutes	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@minutes(BANK0[1]), 

    ReadClock@seconds	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@seconds(BANK0[1]), 

    read_write_flash_ram@mem_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@value(BANK0[1]), saveDataToFlash@value(BANK0[1]), 

    ReadMemoryAdress@var1	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr1(BANK0[1]), saveDataToFlash@addr1(BANK0[1]), IncreaseMemoryAdress@addr1(BANK0[1]), 

    ReadMemoryAdress@var2	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr2(BANK0[1]), saveDataToFlash@addr2(BANK0[1]), IncreaseMemoryAdress@addr2(BANK0[1]), 

    ReadMemoryAdress@var3	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr3(BANK0[1]), saveDataToFlash@addr3(BANK0[1]), IncreaseMemoryAdress@addr3(BANK0[1]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    ReceivedPacketHandler@Data	PTR unsigned char  size(1) Largest target is 30
		 -> TransiverReadFIFO@ReceivedString(BANK1[30]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_TimerCounter

Critical Paths under _main in BANK0

    _main->_TransiverReadFIFO
    _saveDataToFlash->_ReadClock
    _ReadClock->___bmul
    _IncreaseMemoryAdress->_WriteMemoryAdress
    _WriteMemoryAdress->_eeprom_write
    _TransiverToReceive->_FindChannel
    _TransiverReadFIFO->_ReceivedPacketHandler
    _ReceivedPacketHandler->_SendMemoryData
    _write_ram_status->_read_ram_status
    _strstr->_strncmp
    _strncmp->_strlen
    _ram_bulk_erase->_read_ram_status
    _SendMemoryData->_TransmittPacket
    _read_write_flash_ram->_read_ram_status
    _read_ram_status->_WriteSPI
    _ReadMemoryAdress->_eeprom_read
    _ResetMemoryAdress->_eeprom_write
    _TransiverInit->_FindChannel
    _Blink->_DelayDs
    _Mode_5->_TransmittPacket
    _Mode_4->_TransmittPacket
    _TransmittPacket->_FindChannel
    _WriteFIFO->_WriteSPI
    _FindChannel->_SetRFMode
    _SetRFMode->_RegisterSet
    _RegisterSet->_RegisterRead
    _RegisterRead->_WriteSPI
    _Mode_1->_DarknessCheck
    _LightWithSensController->_DarknessCheck
    _DarknessCheck->_AnalogValue
    _AnalogValue->_DelayDs
    _ClockInit->_WriteSPI
    _ReadSPI->_WriteSPI

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_TransiverReadFIFO

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  103375
                                             51 BANK0      3     3      0
                          _ClockInit
                             _Mode_0
                             _Mode_1
                             _Mode_2
                             _Mode_4
                             _Mode_5
                      _OperationMode
                            _PICInit
                  _ResetMemoryAdress
                      _TransiverInit
                  _TransiverReadFIFO
                 _TransiverToReceive
                     _ram_bulk_erase
                    _read_ram_status
                    _saveDataToFlash
                   _write_ram_status
 ---------------------------------------------------------------------------------
 (1) _saveDataToFlash                                     15    15      0   13823
                                             24 BANK0     15    15      0
                        _AnalogValue
               _IncreaseMemoryAdress
                          _ReadClock
                   _ReadMemoryAdress
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (2) _ReadClock                                           20    15      5    1551
                                              4 BANK0     20    15      5
                            _ReadSPI
                           _WriteSPI
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     476
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _IncreaseMemoryAdress                                15    15      0    3014
                                              7 BANK0     15    15      0
                   _ReadMemoryAdress
                  _WriteMemoryAdress
 ---------------------------------------------------------------------------------
 (3) _WriteMemoryAdress                                    4     2      2     686
                                              3 BANK0      4     2      2
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (1) _TransiverToReceive                                   2     2      0    9949
                                             21 BANK0      2     2      0
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (1) _TransiverReadFIFO                                   36    36      0   38320
                                             49 BANK0      2     2      0
                                              0 BANK1     34    34      0
                           _ReadFIFO
              _ReceivedPacketHandler
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _ReceivedPacketHandler                                2     2      0   35063
                                             47 BANK0      2     2      0
                        _AnalogValue
                      _DarknessCheck
                            _DelayDs
                      _OperationMode
                  _ResetMemoryAdress
                     _SendMemoryData
                    _TransmittPacket
                        _eeprom_read
                       _eeprom_write
                     _ram_bulk_erase
                    _read_ram_status
                             _strstr
                   _write_ram_status
 ---------------------------------------------------------------------------------
 (1) _write_ram_status                                     1     1      0     114
                                              5 BANK0      1     1      0
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _strstr                                               5     4      1     959
                                             14 BANK0      5     4      1
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              6     3      3     292
                                              8 BANK0      6     3      3
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               8     6      2     120
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               3     1      2     182
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ram_bulk_erase                                       0     0      0      92
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _SendMemoryData                                      20    20      0   18375
                                             27 BANK0     20    20      0
                   _ReadMemoryAdress
                    _TransmittPacket
                            ___llmod
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (2) _read_write_flash_ram                                11     5      6    4519
                                              5 BANK0     11     5      6
                            _ReadSPI
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (2) _read_ram_status                                      2     2      0      69
                                              3 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _ReadMemoryAdress                                     4     2      2    1984
                                              2 BANK0      4     2      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _ResetMemoryAdress                                    0     0      0     492
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (4) _eeprom_write                                         3     2      1     492
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadFIFO                                             2     2      0      46
                                              3 BANK0      2     2      0
                            _ReadSPI
 ---------------------------------------------------------------------------------
 (1) _TransiverInit                                        1     1      0   10295
                                             21 BANK0      1     1      0
                              _Blink
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _Blink                                                5     3      2    1052
                                              6 BANK0      5     3      2
                            _DelayDs
 ---------------------------------------------------------------------------------
 (1) _PICInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mode_5                                               1     1      0   12843
                                             27 BANK0      1     1      0
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (1) _Mode_4                                               0     0      0   12843
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (3) _TransmittPacket                                      6     5      1   11127
                                             21 BANK0      6     5      1
                        _AnalogValue (ARG)
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                          _WriteFIFO
                        _eeprom_read (ARG)
                      _timerFunction
 ---------------------------------------------------------------------------------
 (4) _WriteFIFO                                            1     1      0      45
                                              3 BANK0      1     1      0
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _FindChannel                                          7     7      0    4734
                                             14 BANK0      7     7      0
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _SetRFMode                                            3     3      0    2321
                                             11 BANK0      3     3      0
                       _RegisterRead
                        _RegisterSet
 ---------------------------------------------------------------------------------
 (3) _RegisterSet                                          4     3      1    2074
                                              7 BANK0      4     3      1
                       _RegisterRead (ARG)
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _RegisterRead                                         4     4      0     114
                                              3 BANK0      4     4      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (1) _Mode_2                                               0     0      0    1716
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (1) _Mode_1                                               0     0      0    1010
                      _DarknessCheck
 ---------------------------------------------------------------------------------
 (1) _Mode_0                                               0     0      0    1716
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (2) _LightWithSensController                              0     0      0    1716
                      _DarknessCheck
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _timerFunction                                        5     1      4     706
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _DarknessCheck                                        2     2      0    1010
                                              8 BANK0      2     2      0
                        _AnalogValue
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _AnalogValue                                          2     2      0     964
                                              6 BANK0      2     2      0
                            _DelayDs
 ---------------------------------------------------------------------------------
 (3) _DelayDs                                              6     4      2     942
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            2     2      0      70
                                              3 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _ReadSPI                                              0     0      0      23
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _WriteSPI                                             3     3      0      23
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _tc_int                                              7     7      0     135
                                              5 COMMON     7     7      0
                       _TimerCounter
                    i1_OperationMode
 ---------------------------------------------------------------------------------
 (11) i1_OperationMode                                     2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _TimerCounter                                        5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClockInit
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _Mode_0
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_1
     _DarknessCheck
       _AnalogValue
         _DelayDs
       _eeprom_read
   _Mode_2
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_4
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _Mode_5
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _OperationMode
   _PICInit
   _ResetMemoryAdress
     _eeprom_write
   _TransiverInit
     _Blink
       _DelayDs
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
   _TransiverReadFIFO
     _ReadFIFO
       _ReadSPI
         _WriteSPI
     _ReceivedPacketHandler
       _AnalogValue
         _DelayDs
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _DelayDs
       _OperationMode
       _ResetMemoryAdress
         _eeprom_write
       _SendMemoryData
         _ReadMemoryAdress
           _eeprom_read
         _TransmittPacket
           _AnalogValue (ARG)
             _DelayDs
           _FindChannel (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
             _SetRFMode
               _RegisterRead
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _RegisterSet
                 _RegisterRead (ARG)
                   _ReadSPI
                     _WriteSPI
                   _WriteSPI
                 _WriteSPI (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet (ARG)
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
           _WriteFIFO (ARG)
             _WriteSPI
           _eeprom_read (ARG)
           _timerFunction (ARG)
         ___llmod
         _read_write_flash_ram
           _ReadSPI
             _WriteSPI
           _WriteSPI
           _read_ram_status
             _ReadSPI
               _WriteSPI
             _WriteSPI
       _TransmittPacket
         _AnalogValue (ARG)
           _DelayDs
         _FindChannel (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
         _WriteFIFO (ARG)
           _WriteSPI
         _eeprom_read (ARG)
         _timerFunction (ARG)
       _eeprom_read
       _eeprom_write
       _ram_bulk_erase
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
       _write_ram_status
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _TransiverToReceive
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _ram_bulk_erase
     _WriteSPI
     _read_ram_status
       _ReadSPI
         _WriteSPI
       _WriteSPI
   _read_ram_status
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _saveDataToFlash
     _AnalogValue
       _DelayDs
     _IncreaseMemoryAdress
       _ReadMemoryAdress
         _eeprom_read
       _WriteMemoryAdress
         _eeprom_write
     _ReadClock
       _ReadSPI
         _WriteSPI
       _WriteSPI
       ___bmul
     _ReadMemoryAdress
       _eeprom_read
     _read_write_flash_ram
       _ReadSPI
         _WriteSPI
       _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI
   _write_ram_status
     _WriteSPI
     _read_ram_status
       _ReadSPI
         _WriteSPI
       _WriteSPI

 _tc_int (ROOT)
   _TimerCounter
   i1_OperationMode

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      28       9       41.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      2C       7       55.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     36      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B0      12        0.0%
ABS                  0      0      B0       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Mar 23 20:16:53 2017

                             __CFG_CP$ON 0000                       ?_WriteMemoryAdress 0023  
               __size_of_read_ram_status 0014                                        pc 0002  
             __size_of_TransiverReadFIFO 006D                    _bTransiverModeReceive 006A  
                         ___bmul@product 0022                              _SSPSTATbits 0094  
                                     l83 0788                                       _RD 0C60  
                            __CFG_CPD$ON 0000                                       _WR 0C61  
                        _saveDataToFlash 0045                                       fsr 0004  
                                    l310 046C                      ??_WriteMemoryAdress 0025  
                                    l402 098E                                      l314 02E1  
                                    l411 1612                                      l316 02F6  
                                    l405 0994            __size_of_read_write_flash_ram 007C  
                                    l317 030B                                      l503 0ECD  
                                    l352 0C4D                                      l600 0B10  
                                    l417 150E                                      l441 0AA3  
                                    l363 159A                                      l368 1502  
                                    l481 16C3                                      l387 17BC  
                                    l707 1752                                      l668 0BB9  
                                    l685 1637                                      _GIE 005F  
                                    _RA1 0029                                      _RB0 0030  
                                    _RB1 0031                                      _RC0 0038  
                                    _RA4 002C                                      _RC1 0039  
                                    _RB3 0033                                      _RA5 002D  
                                    _RC2 003A                                      _RB4 0034  
                                    _RB5 0035                                      _RD3 0043  
                                    _RD4 0044                    __end_of_DarknessCheck 16A0  
                                    fsr0 0004                                      indf 0000  
                       TransmittPacket@i 0038                      __end_of_FindChannel 1000  
                        ??_timerFunction 0024                             __CFG_LVP$OFF 0000  
                                   l1181 0836                                     l2401 0A73  
                                   l1169 1570                                     l2403 0A82  
                                   l3211 0A1C                                     l3135 0B99  
                                   l2407 0A90                                     l3215 0A23  
                                   l3207 0A02                                     l3145 158F  
                                   l2433 0F2C                                     l3161 151E  
                                   l2451 0FBA                                     l2507 0BF9  
                                   l3091 0E16                                     l2603 08F5  
                                   l3331 0729                                     l2453 0FEB  
                                   l2533 0C56                                     l2509 0C0C  
                                   l2701 08BB                                     l3181 0942  
                                   l3167 1542                                     l2607 0902  
                                   l2615 16FE                                     l2631 086B  
                                   l3183 0955                                     l2713 169E  
                                   l2449 0FDA                                     l2457 0FFE  
                                   l2617 170D                                     l2633 0874  
                                   l3361 07A6                                     l3353 078C  
                                   l2395 0A48                                     l2643 1579  
                                   l2627 0855                                     l2709 1685  
                                   l2397 0A55                                     l2581 0AFB  
                                   l2741 057D                                     l3373 07CD  
                                   l3365 07B3                                     l3357 0799  
                                   l2903 178C                                     l2399 0A64  
                                   l2583 0B07                                     l2567 0AB0  
                                   l2663 1746                                     l2815 0320  
                                   l3383 07E3                                     l2913 17A1  
                                   l2585 0ADF                                     l2817 0332  
                                   l3377 07D7                                     l3369 07C0  
                                   l2931 0806                                     l2747 0508  
                                   l2843 038C                                     l2827 0351  
                                   l2755 154A                                     l2597 08C7  
                                   l2589 0B12                                     l2749 05B6  
                                   l2861 03DD                                     l2853 03BA  
                                   l2837 0373                                     l2599 08D7  
                                   l2679 1605                                     l2695 0899  
                                   l2871 03F9                                     l2863 03E5  
                                   l2855 03CA                                     l2791 02BF  
                                   l2759 1550                                     l2689 087B  
                                   l2697 08B2                                     l2881 0410  
                                   l2849 03A5                                     l2945 0EC5  
                                   l2891 0442                                     l2883 041B  
                                   l2867 03F1                                     l2787 02A8  
                                   l2797 02D0                                     l2887 0439  
                                   l2895 044A              __size_of_TransiverToReceive 005C  
                                   STR_1 102D                                     STR_2 1035  
                                   u2203 0EC3                                     u1415 0FC5  
                                   u2215 0EDA                                     u1441 1635  
                                   u1425 0FFC                                     u2225 0EEF  
                                   u2170 0E5F                                     u1435 161C  
                                   u2155 0810                                     u2171 0E60  
                                   u2235 061C                                     u2172 0E65  
                                   u1605 08E5                                     u2173 0E66  
                                   u2165 0E50                                     u2245 0641  
                                   u2190 0E8F                                     u1615 08F6  
                                   u2191 0E90                                     u2255 0666  
                                   u2192 0E95                                     u2193 0E96  
                                   u2185 0E80                                     u2265 068B  
                                   u1395 0F2A                                     u1555 0AE5  
                                   u2435 09F2                                     u2275 06B0  
                                   u1805 0525                                     u2285 06D5  
                                   u1815 053A                                     u1585 08CB  
                                   u1770 04B1                                     u1771 04B2  
                                   u1772 04B7                                     u1845 0516  
                                   u1773 04B8                                     u1765 04A2  
                                   u1790 04E1                                     u1791 04E2  
                                   u2807 0781                                     u1792 04E7  
                                   u1793 04E8                                     u1785 04D2  
                                   u2817 0926                                     u2907 0FE6  
                                   u2827 095F                                     u2917 1624  
                                   u2837 0A29                                     u2757 0710  
                                   u2927 0B3F                                     u2847 0B1E  
                                   u2767 0722                                     _RBIF 0058  
                                   u2937 0B5E                                     u2857 0BDD  
                                   u2777 0736                                     u2947 0B7D  
                                   u2867 0C16                                     u2787 0748  
                                   u2877 0C5A                                     u2797 076F  
                                   u2887 0C69                                     u2897 0F17  
                        __end_of_PICInit 09CB                                     _WREN 0C62  
                         ??_eeprom_write 0021                                     _main 06F6  
                                   btemp 007E                __end_of_WriteMemoryAdress 1679  
                                   start 0012                            __CFG_IESO$OFF 0000  
                        __end_of_DelayDs 1631                    WriteMemoryAdress@var1 0024  
                  WriteMemoryAdress@var2 0023                    WriteMemoryAdress@var3 0026  
       __size_of_LightWithSensController 003F                        ___bmul@multiplier 0023  
                        __end_of_ReadSPI 14D1               SendMemoryData@finalAddress 0044  
                                  ?_main 0070                         ReadClock@month10 002F  
                                  _EEADR 010D                            __CFG_WDTE$OFF 0000  
                       ReadClock@minutes 0024                         ReadClock@seconds 0031  
                                  _CARRY 0018                                    _ANSEL 0188  
                  __end_of_OperationMode 14EB                                    _T1CON 0010  
                        __end_of___llmod 090B                           __CFG_DEBUG$OFF 0000  
                                  i1l470 0CB3                                    _TMR1H 000F  
                                  _TMR1L 000E                                    _PORTA 0005  
                                  _PORTB 0006                                    _PORTC 0007  
                                  _PORTD 0008                                    _PORTE 0009  
                                  _TRISA 0085                                    _TRISB 0086  
                                  _TRISC 0087                                    _TRISD 0088  
                                  _SSPIE 0463                                    _TRISE 0089  
                  read_write_flash_ram@i 002E                                    _Blink 0800  
                                  _bDark 0068                           __CFG_FCMEN$OFF 0000  
                ??_ReceivedPacketHandler 004F                              _AnalogValue 16A0  
                         __CFG_BOREN$OFF 0000                                    pclath 000A  
                        ??_TransiverInit 0035                                    status 0003  
                          _intBlinkCycle 005D                                    wtemp0 007E  
                         WriteSPI@buffer 0021                     ReadMemoryAdress@var1 0023  
                   ReadMemoryAdress@var2 0022                     ReadMemoryAdress@var3 0025  
                       __end_of_ChannelP 1013                         __end_of_ChannelR 1020  
                       __end_of_ChannelS 102D                          __end_of_strncmp 0877  
                __end_of_saveDataToFlash 0290                           __CFG_MCLRE$OFF 0000  
                          _intClockTimer 00C2                        _intNumberOfBlinks 006B  
                        __initialization 0015                             __end_of_main 07F1  
                       __end_of_ReadFIFO 07FF                            ReadFIFO@value 0024  
                       ??_SendMemoryData 003B                              _FindChannel 0F08  
                          ??_RegisterSet 0028                                   ??_main 0053  
                      ??_read_ram_status 0023                       __size_of_ClockInit 009A  
                                 ?_Blink 0026                                ??_PICInit 0020  
                       ___llmod@dividend 0024                                   _ADRESH 001E  
                                 _EEDATA 010C                                   _EECON1 018C  
                                 _EECON2 018D                                   _ANSELH 0189  
                       __end_of_WriteSPI 1512                                   i1l3305 17F3  
                                 i1l3307 17F9                                   i1l3423 0CD3  
                                 i1l3425 0CD4                                   i1l3417 0CB6  
                                 i1l3443 0D0F                                   i1l3435 0CF6  
                                 i1l3447 0D20                                   i1l3399 0C87  
                              ??_DelayDs 0022                                   u270_25 0CCD  
                                 u247_25 17C9                                   u271_25 0CE5  
                                 u248_25 17DF                                   u272_25 0D01  
                                 Blink@i 0029                                   Blink@n 0026  
                                 u273_25 0D1A                                   u266_25 0CA5  
                       _write_ram_status 1723                         ??_ram_bulk_erase 0025  
                                 _TMR1IF 0060                                   _TMR1ON 0080  
           i1OperationMode@bracketStatus 0071            __size_of_IncreaseMemoryAdress 00ED  
                     __size_of_ReadClock 0139                                   _SSPBUF 0013  
             __size_of_WriteMemoryAdress 0024                                ??_ReadSPI 0023  
                         __CFG_PWRTE$OFF 0000                                   _Mode_0 14C5  
                                 _Mode_1 1582                                   _Mode_2 14F7  
                                 _Mode_4 1512                                   _Mode_5 1534  
                     __size_of_SetRFMode 006F                     __size_of_eeprom_read 0024  
        TransiverReadFIFO@ReceivedString 00A0                                   ___bmul 1546  
                              ??___llmod 0028                                   _tc_int 0C6F  
                   __end_of_eeprom_write 177F                                   _strchr 156D  
                                 _strlen 16F7                                   _strstr 0877  
                                 saved_w 007E                        _ResetMemoryAdress 15B6  
                    __end_of_RegisterSet 15B6                            ?_RegisterRead 0070  
                     ?_ResetMemoryAdress 0070                       RegisterRead@adress 0026  
                              ??_strncmp 002B                       __size_of_WriteFIFO 000C  
                __end_of__initialization 0041                          eeprom_read@addr 0021  
                    ??_ResetMemoryAdress 0023                        __end_of_ClockInit 0BBD  
                _LightWithSensController 177F                            _bChannelFound 0067  
                    ___bmul@multiplicand 0020                         ?_saveDataToFlash 0070  
                          __end_of_Blink 0833                           __pcstackCOMMON 0070  
                      ?_ReadMemoryAdress 0022                             __pidataBANK0 14C2  
                           _channelFound 005B                       ??_ReadMemoryAdress 0024  
                      __end_of_ReadClock 06F6                __end_of_ResetMemoryAdress 15D0  
                         _OPTION_REGbits 0081                                  ??_Blink 0028  
                      __end_of_SetRFMode 0AA7                        eeprom_write@value 0020  
                         ??_RegisterRead 0023                               __pbssBANK0 0056  
                             __pbssBANK1 00C2                               __pbssBANK3 0190  
               __size_ofi1_OperationMode 0009                                ?_ReadFIFO 0070  
             timerFunction@intSetSeconds 0022                       AnalogValue@channel 0027  
           __end_of_read_write_flash_ram 0B23                 __size_of_TransmittPacket 00B2  
                                ?_Mode_0 0070                                  ?_Mode_1 0070  
                                ?_Mode_2 0070                                  ?_Mode_4 0070  
                                ?_Mode_5 0070                               __pmaintext 06F6  
                                ?___bmul 0020                               __pintentry 0004  
                                ?_tc_int 0070                                ?_WriteSPI 0070  
                      __end_of_WriteFIFO 14F7                                  ?_strchr 0020  
                                ?_strlen 0020                              _RegisterSet 159C  
                                ?_strstr 002E                                  _PICInit 0967  
                          ?_TimerCounter 0070               __end_of_TransiverToReceive 0967  
                  __end_of_timerFunction 1534                             ?_AnalogValue 0070  
                             __stringtab 1000                               ??_ReadFIFO 0023  
                    SendMemoryData@addr1 004A                      SendMemoryData@addr2 0049  
                    SendMemoryData@addr3 0048           __size_of_ReceivedPacketHandler 01DD  
          __end_of_ReceivedPacketHandler 046D                                  _DelayDs 160E  
              ??_LightWithSensController 002A                            ReadClock@date 0026  
                          ReadClock@min1 0033                            ReadClock@sec1 0032  
                          ReadClock@hour 0025                      SendMemoryData@value 0043  
                          ReadClock@year 0028                                  _ReadSPI 14C9  
                 __size_of_DarknessCheck 0027                          __size_of_Mode_0 0004  
                        __size_of_Mode_1 001A                          __size_of_Mode_2 000D  
                        __size_of_Mode_4 0010                          __size_of_Mode_5 0012  
             OperationMode@bracketStatus 0021                          _read_ram_status 1559  
                  __size_of_eeprom_write 0030                          __size_of___bmul 0013  
                  read_ram_status@status 0024                                  ___llmod 08BD  
                           ?_FindChannel 0070                                _ANSELbits 0188  
               __end_of_write_ram_status 174F                               ??_WriteSPI 0020  
                        __size_of_tc_int 00C2                                  __ptext1 0045  
                                __ptext2 05BD                                  __ptext3 1546  
                                __ptext4 0E1B                                  __ptext5 1655  
                                __ptext6 090B                                  __ptext7 09CB  
                                __ptext8 0290                                  __ptext9 1723  
                        __size_of_strchr 0015                          __size_of_strlen 002C  
             __size_of_ResetMemoryAdress 001A                                _T1CONbits 0010  
                        __size_of_strstr 0046                           ??_TimerCounter 0070  
                   saveDataToFlash@addr1 0044                     saveDataToFlash@addr2 0045  
                   saveDataToFlash@addr3 0046  read_write_flash_ram@one_read_zero_write 002D  
                   saveDataToFlash@hours 003F                     saveDataToFlash@month 0041  
                   saveDataToFlash@value 0043                                  clrloop0 14D2  
                                _strncmp 0833                     end_of_initialization 0041  
                           _eeprom_write 174F                    __end_of_TransiverInit 0E1B  
                   TransmittPacket@value 0035                     TransmittPacket@topic 003A  
                 __size_of_OperationMode 0009                        ??i1_OperationMode 0070  
                       WriteSPI@databyte 0022                     __end_of_RegisterRead 15EC  
                      ??_TransmittPacket 0036                            WriteFIFO@Data 0023  
           __end_of_IncreaseMemoryAdress 0F08                                  strlen@s 0026  
                        _intBlinkCounter 007C                     _read_write_flash_ram 0AA7  
                          _DarknessCheck 1679                  __end_of_read_ram_status 156D  
                  SendMemoryData@address 004B                            ??_eeprom_read 0020  
                        ReadClock@date10 002E                           __end_of_Mode_0 14C9  
                         __end_of_Mode_1 159C                           __end_of_Mode_2 1504  
                         __end_of_Mode_4 1522                           __end_of_Mode_5 1546  
                              _ClockInit 0B23                          ReadClock@hour10 002D  
                         __end_of___bmul 1559                          ReadClock@month1 0035  
                        ReadClock@year10 0030                    ?_read_write_flash_ram 0025  
                         __end_of_tc_int 0D31                           ?_DarknessCheck 0070  
              IncreaseMemoryAdress@addr1 002F                IncreaseMemoryAdress@addr2 0030  
              IncreaseMemoryAdress@addr3 0031                            _OperationMode 14E2  
                         __end_of_strchr 1582                           __end_of_strlen 1723  
                         __end_of_strstr 08BD                      start_initialization 0015  
                              _ReadClock 05BD                __size_of_ReadMemoryAdress 002C  
                __size_of_SendMemoryData 0150                    _intDarkCheckIntervall 005F  
             DarknessCheck@darknessValue 0029                                _SetRFMode 0A38  
                   __size_of_AnalogValue 002B                          ___llmod@divisor 0020  
                      __size_of_ReadFIFO 000E                          ___llmod@counter 0029  
               __CFG_FOSC$INTRC_NOCLKOUT 0000                                 ??_Mode_0 002A  
                               ??_Mode_1 002A                                 ??_Mode_2 002A  
                               ??_Mode_4 003B                                 ??_Mode_5 003B  
                   __end_of_TimerCounter 1800                                 ??___bmul 0021  
                             ?_ClockInit 0070                      __end_of_eeprom_read 1655  
                          TimerCounter@i 0073                  __size_of_ram_bulk_erase 0022  
                            __pdataBANK0 006B                                 ??_tc_int 0075  
               __size_of_saveDataToFlash 024B                             ?_RegisterSet 0027  
                               ??_strchr 0022                                 ??_strlen 0022  
                               ??_strstr 002F                           ?_OperationMode 0070  
                   __size_of_FindChannel 00F8              read_write_flash_ram@mem_ptr 002A  
                      RegisterRead@value 0025                        __size_of_WriteSPI 000E  
                            __pbssCOMMON 007C                                ___latbits 0002  
                              _WriteFIFO 14EB                            __pcstackBANK0 0020  
                          __pcstackBANK1 00A0                                 ?_PICInit 0070  
                             ?_ReadClock 0024                             _ReceivedData 0190  
                 SetRFMode@mcparam0_read 002D                               ?_SetRFMode 0070  
                       eeprom_write@addr 0022                                 ?_DelayDs 0020  
                      RegisterSet@adress 002A                     _IncreaseMemoryAdress 0E1B  
                       ?_read_ram_status 0070                   write_ram_status@status 0025  
                               ?_ReadSPI 0070                    __size_of_RegisterRead 001C  
                     _TransiverToReceive 090B                                 ?___llmod 0020  
                    ?_TransiverToReceive 0070                   ??_read_write_flash_ram 002B  
                        ??_DarknessCheck 0028                                __pstrings 1000  
                      ?_write_ram_status 0070              timerFunction@intTimerNumber 0020  
                     ??_write_ram_status 0025                           __size_of_Blink 0033  
                             ?_WriteFIFO 0070                          i1_OperationMode 14D9  
                   ??_TransiverToReceive 0035                             _RegisterRead 15D0  
                               ?_strncmp 0028                    ?_IncreaseMemoryAdress 0070  
                    saveDataToFlash@date 0040                          _TransmittPacket 0BBD  
                      interrupt_function 0004                      saveDataToFlash@year 0042  
                               _IOCBbits 0096                                 DelayDs@i 0024  
                           FindChannel@i 0033                    _ReceivedPacketHandler 0290  
                              clear_ram0 14D1                              _eeprom_read 1631  
                               _PIE1bits 008C                                 _PIR1bits 000C  
                            ??_ClockInit 0023                             ClockInit@cnt 0024  
                 __size_of_timerFunction 0012                   saveDataToFlash@minutes 003E  
                 saveDataToFlash@seconds 003D                          ??_OperationMode 0020  
                          SetRFMode@mode 002C                               _ADCON0bits 001F  
                            __stringbase 1005                               _ADCON1bits 009F  
                               _WPUBbits 0095                                 _ChannelP 1006  
                               _ChannelR 1013                                 _ChannelS 1020  
                            ??_ReadClock 0029                           ReadClock@date1 0037  
                         _SendMemoryData 046D                         _ReadMemoryAdress 16CB  
                         ReadClock@min10 002C                           ReadClock@sec10 002B  
                      ??_saveDataToFlash 0038                           ReadClock@hour1 0034  
                       __size_of_PICInit 0064                 ?_LightWithSensController 0070  
                         ReadClock@month 0027                           ReadClock@year1 0036  
                            ??_SetRFMode 002B                                 _ReadFIFO 07F1  
                  __size_of_TimerCounter 0042                         __size_of_DelayDs 0023  
       read_write_flash_ram@flash_sector 0027                         __size_of_ReadSPI 0008  
                         _bTimerComplete 0056                           _ram_bulk_erase 15EC  
                       _intMinuteCounter 0063               read_write_flash_ram@offset 0029  
                       __size_of___llmod 004E                        _TransiverReadFIFO 09CB  
                               _WriteSPI 1504                       __end_of__stringtab 1006  
                       _intSecondCounter 0065                       ?_TransiverReadFIFO 0070  
                             _ANSELHbits 0189                  __end_ofi1_OperationMode 14E2  
                 __end_of_SendMemoryData 05BD              IncreaseMemoryAdress@address 0032  
                 __size_of_TransiverInit 00EA                     __size_of_RegisterSet 001A  
                       RegisterSet@value 0027                              ??_WriteFIFO 0023  
                __end_of_TransmittPacket 0C6F                             _TimerCounter 17BE  
                               __ptext10 0877                                 __ptext11 0833  
                               __ptext20 15B6                                 __ptext12 16F7  
                               __ptext21 174F                                 __ptext13 156D  
                               __ptext30 14EB                                 __ptext22 14E2  
                               __ptext14 15EC                                 __ptext31 0F08  
                               __ptext23 07F1                                 __ptext15 046D  
                               __ptext40 1679                                 __ptext32 0A38  
                               __ptext24 0D31                                 __ptext16 0AA7  
                               __ptext41 1631                                 __ptext33 159C  
                               __ptext25 0800                                 __ptext17 1559  
                               __ptext42 16A0                                 __ptext34 15D0  
                               __ptext26 0967                                 __ptext18 08BD  
                               __ptext43 160E                                 __ptext35 14F7  
                               __ptext27 1534                                 __ptext19 16CB  
                               __ptext44 0B23                                 __ptext36 1582  
                               __ptext28 1512                                 __ptext45 14C9  
                               __ptext37 14C5                                 __ptext29 0BBD  
                               __ptext46 1504                                 __ptext38 177F  
                               __ptext47 0C6F                                 __ptext39 1522  
                               __ptext48 14D9                                 __ptext49 17BE  
                    ??_TransiverReadFIFO 0051                            _timerFunction 1522  
                 ??_IncreaseMemoryAdress 0027                         __size_of_strncmp 0044  
                 ?_ReceivedPacketHandler 0070                            __size_of_main 00FB  
                             strncmp@len 0029                   __end_of_ram_bulk_erase 160E  
                          _bValueFromPot 006D                __end_of_TransiverReadFIFO 0A38  
                             DelayDs@cnt 0020                           FindChannel@cnt 0031  
        __end_of_LightWithSensController 17BE                         _bSaveDataToFlash 0069  
                   _intHalfSecondCounter 0061                          ?_SendMemoryData 0070  
                             _INTCONbits 000B           read_write_flash_ram@flash_page 0028  
                     TransiverReadFIFO@i 00BE                       TransiverReadFIFO@j 00C0  
                         ?_timerFunction 0020                            ??_AnalogValue 0026  
                               intlevel1 0000                                strchr@chr 0020  
                              strchr@ptr 0022                            _TransiverInit 0D31  
 read_write_flash_ram@bytes_to_readwrite 0025                                strncmp@s1 002D  
                              strncmp@s2 0028                                stringcode 1000  
                             _OSCCONbits 008F                          ?_ram_bulk_erase 0070  
                          ??_FindChannel 002E                         ?i1_OperationMode 0070  
                               strlen@cp 0027                                 stringdir 1000  
                               stringtab 1000                         ?_TransmittPacket 0035  
                               strstr@s1 0032                                 strstr@s2 002E  
              ReceivedPacketHandler@Data 0050                __size_of_write_ram_status 002C  
                          ?_eeprom_write 0020                           ?_TransiverInit 0070  
                           ?_eeprom_read 0070                      __end_of_AnalogValue 16CB  
                             _SSPCONbits 0014                        _WriteMemoryAdress 1655  
               __end_of_ReadMemoryAdress 16F7  
