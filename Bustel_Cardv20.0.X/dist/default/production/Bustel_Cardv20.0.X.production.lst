

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Feb 12 17:34:49 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	intentry,global,class=CODE,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	psect	text50,local,class=CODE,merge=1,delta=2
    68                           	psect	text51,local,class=CODE,merge=1,delta=2
    69                           	psect	text52,local,class=CODE,merge=1,delta=2
    70                           	dabs	1,0x7E,2
    71  0000                     
    72                           ; Version 1.40
    73                           ; Generated 01/12/2016 GMT
    74                           ; 
    75                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC16F887 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  0008                     	;# 
   115  0009                     	;# 
   116  000A                     	;# 
   117  000B                     	;# 
   118  000C                     	;# 
   119  000D                     	;# 
   120  000E                     	;# 
   121  000E                     	;# 
   122  000F                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001B                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  0081                     	;# 
   142  0085                     	;# 
   143  0086                     	;# 
   144  0087                     	;# 
   145  0088                     	;# 
   146  0089                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  008F                     	;# 
   151  0090                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0093                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0095                     	;# 
   159  0096                     	;# 
   160  0097                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009A                     	;# 
   164  009B                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  0105                     	;# 
   170  0107                     	;# 
   171  0108                     	;# 
   172  0109                     	;# 
   173  010C                     	;# 
   174  010C                     	;# 
   175  010D                     	;# 
   176  010E                     	;# 
   177  010F                     	;# 
   178  0185                     	;# 
   179  0187                     	;# 
   180  0188                     	;# 
   181  0189                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184  0000                     	;# 
   185  0001                     	;# 
   186  0002                     	;# 
   187  0003                     	;# 
   188  0004                     	;# 
   189  0005                     	;# 
   190  0006                     	;# 
   191  0007                     	;# 
   192  0008                     	;# 
   193  0009                     	;# 
   194  000A                     	;# 
   195  000B                     	;# 
   196  000C                     	;# 
   197  000D                     	;# 
   198  000E                     	;# 
   199  000E                     	;# 
   200  000F                     	;# 
   201  0010                     	;# 
   202  0011                     	;# 
   203  0012                     	;# 
   204  0013                     	;# 
   205  0014                     	;# 
   206  0015                     	;# 
   207  0015                     	;# 
   208  0016                     	;# 
   209  0017                     	;# 
   210  0018                     	;# 
   211  0019                     	;# 
   212  001A                     	;# 
   213  001B                     	;# 
   214  001B                     	;# 
   215  001C                     	;# 
   216  001D                     	;# 
   217  001E                     	;# 
   218  001F                     	;# 
   219  0081                     	;# 
   220  0085                     	;# 
   221  0086                     	;# 
   222  0087                     	;# 
   223  0088                     	;# 
   224  0089                     	;# 
   225  008C                     	;# 
   226  008D                     	;# 
   227  008E                     	;# 
   228  008F                     	;# 
   229  0090                     	;# 
   230  0091                     	;# 
   231  0092                     	;# 
   232  0093                     	;# 
   233  0093                     	;# 
   234  0093                     	;# 
   235  0094                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0098                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  0105                     	;# 
   248  0107                     	;# 
   249  0108                     	;# 
   250  0109                     	;# 
   251  010C                     	;# 
   252  010C                     	;# 
   253  010D                     	;# 
   254  010E                     	;# 
   255  010F                     	;# 
   256  0185                     	;# 
   257  0187                     	;# 
   258  0188                     	;# 
   259  0189                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  000E                     	;# 
   277  000E                     	;# 
   278  000F                     	;# 
   279  0010                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0013                     	;# 
   283  0014                     	;# 
   284  0015                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  001D                     	;# 
   295  001E                     	;# 
   296  001F                     	;# 
   297  0081                     	;# 
   298  0085                     	;# 
   299  0086                     	;# 
   300  0087                     	;# 
   301  0088                     	;# 
   302  0089                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  008F                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0093                     	;# 
   311  0093                     	;# 
   312  0093                     	;# 
   313  0094                     	;# 
   314  0095                     	;# 
   315  0096                     	;# 
   316  0097                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009A                     	;# 
   320  009B                     	;# 
   321  009C                     	;# 
   322  009D                     	;# 
   323  009E                     	;# 
   324  009F                     	;# 
   325  0105                     	;# 
   326  0107                     	;# 
   327  0108                     	;# 
   328  0109                     	;# 
   329  010C                     	;# 
   330  010C                     	;# 
   331  010D                     	;# 
   332  010E                     	;# 
   333  010F                     	;# 
   334  0185                     	;# 
   335  0187                     	;# 
   336  0188                     	;# 
   337  0189                     	;# 
   338  018C                     	;# 
   339  018D                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  000E                     	;# 
   356  000F                     	;# 
   357  0010                     	;# 
   358  0011                     	;# 
   359  0012                     	;# 
   360  0013                     	;# 
   361  0014                     	;# 
   362  0015                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0017                     	;# 
   366  0018                     	;# 
   367  0019                     	;# 
   368  001A                     	;# 
   369  001B                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  001D                     	;# 
   373  001E                     	;# 
   374  001F                     	;# 
   375  0081                     	;# 
   376  0085                     	;# 
   377  0086                     	;# 
   378  0087                     	;# 
   379  0088                     	;# 
   380  0089                     	;# 
   381  008C                     	;# 
   382  008D                     	;# 
   383  008E                     	;# 
   384  008F                     	;# 
   385  0090                     	;# 
   386  0091                     	;# 
   387  0092                     	;# 
   388  0093                     	;# 
   389  0093                     	;# 
   390  0093                     	;# 
   391  0094                     	;# 
   392  0095                     	;# 
   393  0096                     	;# 
   394  0097                     	;# 
   395  0098                     	;# 
   396  0099                     	;# 
   397  009A                     	;# 
   398  009B                     	;# 
   399  009C                     	;# 
   400  009D                     	;# 
   401  009E                     	;# 
   402  009F                     	;# 
   403  0105                     	;# 
   404  0107                     	;# 
   405  0108                     	;# 
   406  0109                     	;# 
   407  010C                     	;# 
   408  010C                     	;# 
   409  010D                     	;# 
   410  010E                     	;# 
   411  010F                     	;# 
   412  0185                     	;# 
   413  0187                     	;# 
   414  0188                     	;# 
   415  0189                     	;# 
   416  018C                     	;# 
   417  018D                     	;# 
   418                           
   419                           	psect	idataBANK0
   420  082D                     __pidataBANK0:	
   421                           
   422                           ;initializer for _intNumberOfBlinks
   423  082D  3458               	retlw	88
   424  082E  3402               	retlw	2
   425                           
   426                           ;initializer for _bValueFromPot
   427  082F  3401               	retlw	1
   428                           
   429                           	psect	strings
   430  0800                     __pstrings:	
   431  0800                     stringtab:	
   432  0800                     __stringtab:	
   433  0800                     stringcode:	
   434                           ;	String table - string pointers are 1 byte each
   435                           
   436  0800                     stringdir:	
   437  0800  3008               	movlw	high stringdir
   438  0801  008A               	movwf	10
   439  0802  0804               	movf	4,w
   440  0803  0A84               	incf	4,f
   441  0804  0782               	addwf	2,f
   442  0805                     __stringbase:	
   443  0805  3400               	retlw	0
   444  0806                     __end_of__stringtab:	
   445  0806                     _ChannelP:	
   446  0806  343F               	retlw	63
   447  0807  3447               	retlw	71
   448  0808  344F               	retlw	79
   449  0809  3457               	retlw	87
   450  080A  345F               	retlw	95
   451  080B  3477               	retlw	119
   452  080C  347E               	retlw	126
   453  080D  347F               	retlw	127
   454  080E  3486               	retlw	134
   455  080F  3487               	retlw	135
   456  0810  3437               	retlw	55
   457  0811  3467               	retlw	103
   458  0812  346F               	retlw	111
   459  0813                     __end_of_ChannelP:	
   460  0813                     _ChannelR:	
   461  0813  344F               	retlw	79
   462  0814  3459               	retlw	89
   463  0815  3463               	retlw	99
   464  0816  346D               	retlw	109
   465  0817  3477               	retlw	119
   466  0818  3495               	retlw	149
   467  0819  349F               	retlw	159
   468  081A  349F               	retlw	159
   469  081B  34A9               	retlw	169
   470  081C  34A9               	retlw	169
   471  081D  3445               	retlw	69
   472  081E  3481               	retlw	129
   473  081F  348B               	retlw	139
   474  0820                     __end_of_ChannelR:	
   475  0820                     _ChannelS:	
   476  0820  3418               	retlw	24
   477  0821  341B               	retlw	27
   478  0822  341E               	retlw	30
   479  0823  3421               	retlw	33
   480  0824  3424               	retlw	36
   481  0825  342D               	retlw	45
   482  0826  347B               	retlw	123
   483  0827  3430               	retlw	48
   484  0828  347E               	retlw	126
   485  0829  3433               	retlw	51
   486  082A  3415               	retlw	21
   487  082B  3427               	retlw	39
   488  082C  342A               	retlw	42
   489  082D                     __end_of_ChannelS:	
   490  001F                     _ADCON0bits	set	31
   491  001E                     _ADRESH	set	30
   492  000B                     _INTCONbits	set	11
   493  000C                     _PIR1bits	set	12
   494  0005                     _PORTA	set	5
   495  0006                     _PORTB	set	6
   496  0007                     _PORTC	set	7
   497  0008                     _PORTD	set	8
   498  0009                     _PORTE	set	9
   499  0013                     _SSPBUF	set	19
   500  0014                     _SSPCONbits	set	20
   501  0010                     _T1CON	set	16
   502  0010                     _T1CONbits	set	16
   503  000F                     _TMR1H	set	15
   504  000E                     _TMR1L	set	14
   505  0018                     _CARRY	set	24
   506  005F                     _GIE	set	95
   507  0029                     _RA1	set	41
   508  002C                     _RA4	set	44
   509  002D                     _RA5	set	45
   510  0030                     _RB0	set	48
   511  0031                     _RB1	set	49
   512  0033                     _RB3	set	51
   513  0034                     _RB4	set	52
   514  0035                     _RB5	set	53
   515  0058                     _RBIF	set	88
   516  0038                     _RC0	set	56
   517  0039                     _RC1	set	57
   518  003A                     _RC2	set	58
   519  0043                     _RD3	set	67
   520  0044                     _RD4	set	68
   521  0060                     _TMR1IF	set	96
   522  0080                     _TMR1ON	set	128
   523  009F                     _ADCON1bits	set	159
   524  0096                     _IOCBbits	set	150
   525  0081                     _OPTION_REGbits	set	129
   526  008F                     _OSCCONbits	set	143
   527  008C                     _PIE1bits	set	140
   528  0094                     _SSPSTATbits	set	148
   529  0085                     _TRISA	set	133
   530  0086                     _TRISB	set	134
   531  0087                     _TRISC	set	135
   532  0088                     _TRISD	set	136
   533  0089                     _TRISE	set	137
   534  0095                     _WPUBbits	set	149
   535  0463                     _SSPIE	set	1123
   536  010D                     _EEADR	set	269
   537  010C                     _EEDATA	set	268
   538  0188                     _ANSEL	set	392
   539  0189                     _ANSELH	set	393
   540  0189                     _ANSELHbits	set	393
   541  0188                     _ANSELbits	set	392
   542  018C                     _EECON1	set	396
   543  018D                     _EECON2	set	397
   544  0C60                     _RD	set	3168
   545  0C61                     _WR	set	3169
   546  0C62                     _WREN	set	3170
   547                           
   548                           ; #config settings
   549  0000                     
   550                           	psect	cinit
   551  0015                     start_initialization:	
   552  0015                     __initialization:	
   553                           
   554                           ; Initialize objects allocated to BANK0
   555  0015  120A  158A  202D  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   556  001A  00E1               	movwf	__pdataBANK0& (0+127)
   557  001B  120A  158A  202E  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   558  0020  00E2               	movwf	(__pdataBANK0+1)& (0+127)
   559  0021  120A  158A  202F  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   560  0026  00E3               	movwf	(__pdataBANK0+2)& (0+127)
   561                           
   562                           ; Clear objects allocated to BANK3
   563  0027  1783               	bsf	3,7	;select IRP bank2
   564  0028  3090               	movlw	low __pbssBANK3
   565  0029  0084               	movwf	4
   566  002A  30B8               	movlw	low (__pbssBANK3+40)
   567  002B  160A  118A  25B9  120A  118A  	fcall	clear_ram0
   568                           
   569                           ; Clear objects allocated to BANK1
   570  0030  1683               	bsf	3,5	;RP0=1, select bank1
   571  0031  1303               	bcf	3,6	;RP1=0, select bank1
   572  0032  01D6               	clrf	__pbssBANK1& (0+127)
   573  0033  01D7               	clrf	(__pbssBANK1+1)& (0+127)
   574                           
   575                           ; Clear objects allocated to BANK0
   576  0034  1383               	bcf	3,7	;select IRP bank0
   577  0035  3043               	movlw	low __pbssBANK0
   578  0036  0084               	movwf	4
   579  0037  3061               	movlw	low (__pbssBANK0+30)
   580  0038  160A  118A  25B9   	fcall	clear_ram0
   581  003B                     end_of_initialization:	
   582                           ;End of C runtime variable initialization code
   583                           
   584  003B                     __end_of__initialization:	
   585  003B  0183               	clrf	3
   586  003C  120A  158A  2CF1   	ljmp	_main	;jump to C main() function
   587                           
   588                           	psect	bssBANK0
   589  0043                     __pbssBANK0:	
   590  0043                     _intClockTimer:	
   591  0043                     	ds	10
   592  004D                     _bTimerComplete:	
   593  004D                     	ds	5
   594  0052                     _channelFound:	
   595  0052                     	ds	2
   596  0054                     _intBlinkCounter:	
   597  0054                     	ds	2
   598  0056                     _intBlinkCycle:	
   599  0056                     	ds	2
   600  0058                     _intDarkCheckIntervall:	
   601  0058                     	ds	2
   602  005A                     _intHalfSecondCounter:	
   603  005A                     	ds	2
   604  005C                     _intMinuteCounter:	
   605  005C                     	ds	2
   606  005E                     _intSecondCounter:	
   607  005E                     	ds	2
   608  0060                     _bChannelFound:	
   609  0060                     	ds	1
   610                           
   611                           	psect	dataBANK0
   612  0061                     __pdataBANK0:	
   613  0061                     _intNumberOfBlinks:	
   614  0061                     	ds	2
   615  0063                     _bValueFromPot:	
   616  0063                     	ds	1
   617                           
   618                           	psect	bssBANK1
   619  00D6                     __pbssBANK1:	
   620  00D6                     _bDark:	
   621  00D6                     	ds	1
   622  00D7                     _bTransiverModeReceive:	
   623  00D7                     	ds	1
   624                           
   625                           	psect	bssBANK3
   626  0190                     __pbssBANK3:	
   627  0190                     _ReceivedData:	
   628  0190                     	ds	40
   629                           
   630                           	psect	clrtext
   631  15B9                     clear_ram0:	
   632                           ;	Called with FSR containing the base address, and
   633                           ;	W with the last address+1
   634                           
   635  15B9  0064               	clrwdt	;clear the watchdog before getting into this loop
   636  15BA                     clrloop0:	
   637  15BA  0180               	clrf	0	;clear RAM location pointed to by FSR
   638  15BB  0A84               	incf	4,f	;increment pointer
   639  15BC  0604               	xorwf	4,w	;XOR with final address
   640  15BD  1903               	btfsc	3,2	;have we reached the end yet?
   641  15BE  3400               	retlw	0	;all done for this memory range, return
   642  15BF  0604               	xorwf	4,w	;XOR again to restore value
   643  15C0  2DBA               	goto	clrloop0	;do the next byte
   644                           
   645                           	psect	cstackBANK3
   646  01B8                     __pcstackBANK3:	
   647  01B8                     TransiverReadFIFO@ReceivedString:	
   648                           
   649                           ; 30 bytes @ 0x0
   650  01B8                     	ds	30
   651  01D6                     TransiverReadFIFO@i:	
   652                           
   653                           ; 2 bytes @ 0x1E
   654  01D6                     	ds	2
   655  01D8                     TransiverReadFIFO@j:	
   656                           
   657                           ; 2 bytes @ 0x20
   658  01D8                     	ds	2
   659                           
   660                           	psect	cstackBANK1
   661  00A0                     __pcstackBANK1:	
   662  00A0                     ??_PICInit:	
   663  00A0                     ??_OperationMode:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  00A0                     ?_timerFunction:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  00A0                     ?_DelayDs:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  00A0                     ??_eeprom_read:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  00A0                     ?_eeprom_write:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  00A0                     ??_WriteSPI:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  00A0                     eeprom_write@value:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  00A0                     timerFunction@intTimerNumber:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  00A0                     DelayDs@cnt:	
   688                           ; 2 bytes @ 0x0
   689                           
   690                           
   691                           ; 2 bytes @ 0x0
   692  00A0                     	ds	1
   693  00A1                     ??_eeprom_write:	
   694  00A1                     WriteSPI@buffer:	
   695                           ; 1 bytes @ 0x1
   696                           
   697  00A1                     OperationMode@bracketStatus:	
   698                           ; 1 bytes @ 0x1
   699                           
   700  00A1                     eeprom_read@addr:	
   701                           ; 1 bytes @ 0x1
   702                           
   703                           
   704                           ; 1 bytes @ 0x1
   705  00A1                     	ds	1
   706  00A2                     ??_DelayDs:	
   707  00A2                     ?_ReadMemoryAdress:	
   708                           ; 1 bytes @ 0x2
   709                           
   710  00A2                     WriteSPI@databyte:	
   711                           ; 1 bytes @ 0x2
   712                           
   713  00A2                     ReadMemoryAdress@var2:	
   714                           ; 1 bytes @ 0x2
   715                           
   716  00A2                     eeprom_write@addr:	
   717                           ; 1 bytes @ 0x2
   718                           
   719  00A2                     timerFunction@intSetSeconds:	
   720                           ; 1 bytes @ 0x2
   721                           
   722                           
   723                           ; 2 bytes @ 0x2
   724  00A2                     	ds	1
   725  00A3                     ??_ClockInit:	
   726  00A3                     ??_read_ram_status:	
   727                           ; 1 bytes @ 0x3
   728                           
   729  00A3                     ??_ResetMemoryAdress:	
   730                           ; 1 bytes @ 0x3
   731                           
   732  00A3                     ??_RegisterRead:	
   733                           ; 1 bytes @ 0x3
   734                           
   735  00A3                     ??_ReadFIFO:	
   736                           ; 1 bytes @ 0x3
   737                           
   738  00A3                     ??_WriteFIFO:	
   739                           ; 1 bytes @ 0x3
   740                           
   741  00A3                     ??_ReadSPI:	
   742                           ; 1 bytes @ 0x3
   743                           
   744  00A3                     WriteFIFO@Data:	
   745                           ; 1 bytes @ 0x3
   746                           
   747  00A3                     ReadMemoryAdress@var1:	
   748                           ; 1 bytes @ 0x3
   749                           
   750                           
   751                           ; 1 bytes @ 0x3
   752  00A3                     	ds	1
   753  00A4                     ??_timerFunction:	
   754  00A4                     ??_ReadMemoryAdress:	
   755                           ; 1 bytes @ 0x4
   756                           
   757  00A4                     ReadFIFO@value:	
   758                           ; 1 bytes @ 0x4
   759                           
   760  00A4                     read_ram_status@status:	
   761                           ; 1 bytes @ 0x4
   762                           
   763  00A4                     ClockInit@cnt:	
   764                           ; 1 bytes @ 0x4
   765                           
   766  00A4                     DelayDs@i:	
   767                           ; 1 bytes @ 0x4
   768                           
   769                           
   770                           ; 2 bytes @ 0x4
   771  00A4                     	ds	1
   772  00A5                     ??_write_ram_status:	
   773  00A5                     ??_ram_bulk_erase:	
   774                           ; 1 bytes @ 0x5
   775                           
   776  00A5                     ?_read_write_flash_ram:	
   777                           ; 1 bytes @ 0x5
   778                           
   779  00A5                     RegisterRead@value:	
   780                           ; 1 bytes @ 0x5
   781                           
   782  00A5                     ReadMemoryAdress@var3:	
   783                           ; 1 bytes @ 0x5
   784                           
   785  00A5                     write_ram_status@status:	
   786                           ; 1 bytes @ 0x5
   787                           
   788  00A5                     read_write_flash_ram@bytes_to_readwrite:	
   789                           ; 1 bytes @ 0x5
   790                           
   791                           
   792                           ; 2 bytes @ 0x5
   793  00A5                     	ds	1
   794  00A6                     ??_AnalogValue:	
   795  00A6                     ?_Blink:	
   796                           ; 1 bytes @ 0x6
   797                           
   798  00A6                     RegisterRead@adress:	
   799                           ; 1 bytes @ 0x6
   800                           
   801  00A6                     Blink@n:	
   802                           ; 1 bytes @ 0x6
   803                           
   804                           
   805                           ; 2 bytes @ 0x6
   806  00A6                     	ds	1
   807  00A7                     ?_RegisterSet:	
   808  00A7                     RegisterSet@value:	
   809                           ; 1 bytes @ 0x7
   810                           
   811  00A7                     AnalogValue@channel:	
   812                           ; 1 bytes @ 0x7
   813                           
   814  00A7                     read_write_flash_ram@flash_sector:	
   815                           ; 1 bytes @ 0x7
   816                           
   817                           
   818                           ; 1 bytes @ 0x7
   819  00A7                     	ds	1
   820  00A8                     ??_RegisterSet:	
   821  00A8                     ??_DarknessCheck:	
   822                           ; 1 bytes @ 0x8
   823                           
   824  00A8                     ??_Blink:	
   825                           ; 1 bytes @ 0x8
   826                           
   827  00A8                     read_write_flash_ram@flash_page:	
   828                           ; 1 bytes @ 0x8
   829                           
   830                           
   831                           ; 1 bytes @ 0x8
   832  00A8                     	ds	1
   833  00A9                     DarknessCheck@darknessValue:	
   834  00A9                     read_write_flash_ram@offset:	
   835                           ; 1 bytes @ 0x9
   836                           
   837  00A9                     Blink@i:	
   838                           ; 1 bytes @ 0x9
   839                           
   840                           
   841                           ; 2 bytes @ 0x9
   842  00A9                     	ds	1
   843  00AA                     ??_Mode_0:	
   844  00AA                     ??_Mode_1:	
   845                           ; 1 bytes @ 0xA
   846                           
   847  00AA                     ??_Mode_2:	
   848                           ; 1 bytes @ 0xA
   849                           
   850  00AA                     ??_LightWithSensController:	
   851                           ; 1 bytes @ 0xA
   852                           
   853  00AA                     RegisterSet@adress:	
   854                           ; 1 bytes @ 0xA
   855                           
   856  00AA                     read_write_flash_ram@mem_ptr:	
   857                           ; 1 bytes @ 0xA
   858                           
   859                           
   860                           ; 1 bytes @ 0xA
   861  00AA                     	ds	1
   862  00AB                     ??_SetRFMode:	
   863  00AB                     ??_read_write_flash_ram:	
   864                           ; 1 bytes @ 0xB
   865                           
   866                           
   867                           ; 1 bytes @ 0xB
   868  00AB                     	ds	1
   869  00AC                     SetRFMode@mode:	
   870                           
   871                           ; 1 bytes @ 0xC
   872  00AC                     	ds	1
   873  00AD                     SetRFMode@mcparam0_read:	
   874  00AD                     read_write_flash_ram@one_read_zero_write:	
   875                           ; 1 bytes @ 0xD
   876                           
   877                           
   878                           ; 1 bytes @ 0xD
   879  00AD                     	ds	1
   880  00AE                     ??_FindChannel:	
   881  00AE                     read_write_flash_ram@i:	
   882                           ; 1 bytes @ 0xE
   883                           
   884                           
   885                           ; 2 bytes @ 0xE
   886  00AE                     	ds	3
   887  00B1                     FindChannel@cnt:	
   888                           
   889                           ; 2 bytes @ 0x11
   890  00B1                     	ds	2
   891  00B3                     FindChannel@i:	
   892                           
   893                           ; 2 bytes @ 0x13
   894  00B3                     	ds	2
   895  00B5                     ??_TransiverInit:	
   896  00B5                     ??_TransiverToReceive:	
   897                           ; 1 bytes @ 0x15
   898                           
   899  00B5                     ?_TransmittPacket:	
   900                           ; 1 bytes @ 0x15
   901                           
   902  00B5                     TransmittPacket@value:	
   903                           ; 1 bytes @ 0x15
   904                           
   905                           
   906                           ; 1 bytes @ 0x15
   907  00B5                     	ds	1
   908  00B6                     ??_TransmittPacket:	
   909                           
   910                           ; 1 bytes @ 0x16
   911  00B6                     	ds	2
   912  00B8                     TransmittPacket@i:	
   913                           
   914                           ; 2 bytes @ 0x18
   915  00B8                     	ds	2
   916  00BA                     TransmittPacket@topic:	
   917                           
   918                           ; 1 bytes @ 0x1A
   919  00BA                     	ds	1
   920  00BB                     ??_SendMemoryData:	
   921  00BB                     ??_Mode_4:	
   922                           ; 1 bytes @ 0x1B
   923                           
   924  00BB                     ??_Mode_5:	
   925                           ; 1 bytes @ 0x1B
   926                           
   927                           
   928                           ; 1 bytes @ 0x1B
   929  00BB                     	ds	8
   930  00C3                     SendMemoryData@value:	
   931                           
   932                           ; 1 bytes @ 0x23
   933  00C3                     	ds	1
   934  00C4                     SendMemoryData@address:	
   935                           
   936                           ; 4 bytes @ 0x24
   937  00C4                     	ds	4
   938  00C8                     SendMemoryData@addr3:	
   939                           
   940                           ; 1 bytes @ 0x28
   941  00C8                     	ds	1
   942  00C9                     SendMemoryData@addr2:	
   943                           
   944                           ; 1 bytes @ 0x29
   945  00C9                     	ds	1
   946  00CA                     SendMemoryData@addr1:	
   947                           
   948                           ; 1 bytes @ 0x2A
   949  00CA                     	ds	1
   950  00CB                     SendMemoryData@finalAddress:	
   951                           
   952                           ; 4 bytes @ 0x2B
   953  00CB                     	ds	4
   954  00CF                     ??_ReceivedPacketHandler:	
   955                           
   956                           ; 1 bytes @ 0x2F
   957  00CF                     	ds	1
   958  00D0                     ReceivedPacketHandler@Data:	
   959                           
   960                           ; 1 bytes @ 0x30
   961  00D0                     	ds	1
   962  00D1                     ??_TransiverReadFIFO:	
   963                           
   964                           ; 1 bytes @ 0x31
   965  00D1                     	ds	2
   966  00D3                     ??_main:	
   967                           
   968                           ; 1 bytes @ 0x33
   969  00D3                     	ds	3
   970                           
   971                           	psect	cstackCOMMON
   972  0070                     __pcstackCOMMON:	
   973  0070                     ?_PICInit:	
   974  0070                     ?_TransiverInit:	
   975                           ; 1 bytes @ 0x0
   976                           
   977  0070                     ?_ClockInit:	
   978                           ; 1 bytes @ 0x0
   979                           
   980  0070                     ?_write_ram_status:	
   981                           ; 1 bytes @ 0x0
   982                           
   983  0070                     ?_read_ram_status:	
   984                           ; 1 bytes @ 0x0
   985                           
   986  0070                     ?_ram_bulk_erase:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0070                     ?_ResetMemoryAdress:	
   990                           ; 1 bytes @ 0x0
   991                           
   992  0070                     ?_SendMemoryData:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0070                     ?_OperationMode:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0070                     ?_Mode_0:	
   999                           ; 1 bytes @ 0x0
  1000                           
  1001  0070                     ?_Mode_1:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0070                     ?_Mode_2:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007  0070                     ?_Mode_4:	
  1008                           ; 1 bytes @ 0x0
  1009                           
  1010  0070                     ?_Mode_5:	
  1011                           ; 1 bytes @ 0x0
  1012                           
  1013  0070                     ?_TransiverToReceive:	
  1014                           ; 1 bytes @ 0x0
  1015                           
  1016  0070                     ?_TransiverReadFIFO:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019  0070                     ?_SetRFMode:	
  1020                           ; 1 bytes @ 0x0
  1021                           
  1022  0070                     ?_RegisterRead:	
  1023                           ; 1 bytes @ 0x0
  1024                           
  1025  0070                     ?_FindChannel:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028  0070                     ?_ReadFIFO:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  0070                     ?_ReceivedPacketHandler:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  0070                     ?_AnalogValue:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037  0070                     ?_eeprom_read:	
  1038                           ; 1 bytes @ 0x0
  1039                           
  1040  0070                     ?_DarknessCheck:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0070                     ?_WriteFIFO:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0070                     ?_LightWithSensController:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0070                     ?_saveDataToFlash:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ?_TimerCounter:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ??_TimerCounter:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ?_WriteSPI:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ?_ReadSPI:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ?_tc_int:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0070                     ?_IncreaseMemoryAdress:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0070                     ?___bmul:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0070                     ?i1_DelayDs:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  0070                     ?i1_WriteSPI:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  0070                     ??i1_WriteSPI:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  0070                     ?i1_ReadSPI:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     ?i1_AnalogValue:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  0070                     ?i1_OperationMode:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  0070                     ??i1_OperationMode:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  0070                     ?i1_read_ram_status:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  0070                     ?i1_eeprom_read:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0070                     ??i1_eeprom_read:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103  0070                     ?i1_eeprom_write:	
  1104                           ; 1 bytes @ 0x0
  1105                           
  1106  0070                     ?_main:	
  1107                           ; 1 bytes @ 0x0
  1108                           
  1109  0070                     ___bmul@multiplicand:	
  1110                           ; 2 bytes @ 0x0
  1111                           
  1112  0070                     i1eeprom_write@value:	
  1113                           ; 1 bytes @ 0x0
  1114                           
  1115  0070                     i1DelayDs@cnt:	
  1116                           ; 1 bytes @ 0x0
  1117                           
  1118                           
  1119                           ; 2 bytes @ 0x0
  1120  0070                     	ds	1
  1121  0071                     ??___bmul:	
  1122  0071                     ??i1_eeprom_write:	
  1123                           ; 1 bytes @ 0x1
  1124                           
  1125  0071                     i1WriteSPI@buffer:	
  1126                           ; 1 bytes @ 0x1
  1127                           
  1128  0071                     i1OperationMode@bracketStatus:	
  1129                           ; 1 bytes @ 0x1
  1130                           
  1131  0071                     i1eeprom_read@addr:	
  1132                           ; 1 bytes @ 0x1
  1133                           
  1134                           
  1135                           ; 1 bytes @ 0x1
  1136  0071                     	ds	1
  1137  0072                     ??i1_DelayDs:	
  1138  0072                     ?i1_ReadMemoryAdress:	
  1139                           ; 1 bytes @ 0x2
  1140                           
  1141  0072                     ___bmul@product:	
  1142                           ; 1 bytes @ 0x2
  1143                           
  1144  0072                     i1WriteSPI@databyte:	
  1145                           ; 1 bytes @ 0x2
  1146                           
  1147  0072                     i1ReadMemoryAdress@var2:	
  1148                           ; 1 bytes @ 0x2
  1149                           
  1150  0072                     i1eeprom_write@addr:	
  1151                           ; 1 bytes @ 0x2
  1152                           
  1153                           
  1154                           ; 1 bytes @ 0x2
  1155  0072                     	ds	1
  1156  0073                     ??_IncreaseMemoryAdress:	
  1157  0073                     ??i1_ReadSPI:	
  1158                           ; 1 bytes @ 0x3
  1159                           
  1160  0073                     ??i1_read_ram_status:	
  1161                           ; 1 bytes @ 0x3
  1162                           
  1163  0073                     ___bmul@multiplier:	
  1164                           ; 1 bytes @ 0x3
  1165                           
  1166  0073                     i1ReadMemoryAdress@var1:	
  1167                           ; 1 bytes @ 0x3
  1168                           
  1169  0073                     TimerCounter@i:	
  1170                           ; 1 bytes @ 0x3
  1171                           
  1172                           
  1173                           ; 2 bytes @ 0x3
  1174  0073                     	ds	1
  1175  0074                     ?_ReadClock:	
  1176  0074                     ??i1_ReadMemoryAdress:	
  1177                           ; 1 bytes @ 0x4
  1178                           
  1179  0074                     IncreaseMemoryAdress@var1:	
  1180                           ; 1 bytes @ 0x4
  1181                           
  1182  0074                     ReadClock@minutes:	
  1183                           ; 1 bytes @ 0x4
  1184                           
  1185  0074                     i1read_ram_status@status:	
  1186                           ; 1 bytes @ 0x4
  1187                           
  1188  0074                     i1DelayDs@i:	
  1189                           ; 1 bytes @ 0x4
  1190                           
  1191                           
  1192                           ; 2 bytes @ 0x4
  1193  0074                     	ds	1
  1194  0075                     ?i1_read_write_flash_ram:	
  1195  0075                     IncreaseMemoryAdress@var2:	
  1196                           ; 1 bytes @ 0x5
  1197                           
  1198  0075                     ReadClock@hour:	
  1199                           ; 1 bytes @ 0x5
  1200                           
  1201  0075                     i1ReadMemoryAdress@var3:	
  1202                           ; 1 bytes @ 0x5
  1203                           
  1204  0075                     i1read_write_flash_ram@bytes_to_readwrite:	
  1205                           ; 1 bytes @ 0x5
  1206                           
  1207                           
  1208                           ; 2 bytes @ 0x5
  1209  0075                     	ds	1
  1210  0076                     ??i1_AnalogValue:	
  1211  0076                     IncreaseMemoryAdress@var3:	
  1212                           ; 1 bytes @ 0x6
  1213                           
  1214  0076                     ReadClock@date:	
  1215                           ; 1 bytes @ 0x6
  1216                           
  1217                           
  1218                           ; 1 bytes @ 0x6
  1219  0076                     	ds	1
  1220  0077                     ReadClock@month:	
  1221  0077                     i1AnalogValue@channel:	
  1222                           ; 1 bytes @ 0x7
  1223                           
  1224  0077                     i1read_write_flash_ram@flash_sector:	
  1225                           ; 1 bytes @ 0x7
  1226                           
  1227                           
  1228                           ; 1 bytes @ 0x7
  1229  0077                     	ds	1
  1230  0078                     ReadClock@year:	
  1231  0078                     i1read_write_flash_ram@flash_page:	
  1232                           ; 1 bytes @ 0x8
  1233                           
  1234                           
  1235                           ; 1 bytes @ 0x8
  1236  0078                     	ds	1
  1237  0079                     ??_ReadClock:	
  1238  0079                     i1read_write_flash_ram@offset:	
  1239                           ; 1 bytes @ 0x9
  1240                           
  1241                           
  1242                           ; 1 bytes @ 0x9
  1243  0079                     	ds	1
  1244  007A                     i1read_write_flash_ram@mem_ptr:	
  1245                           
  1246                           ; 1 bytes @ 0xA
  1247  007A                     	ds	1
  1248  007B                     ??i1_read_write_flash_ram:	
  1249                           
  1250                           ; 1 bytes @ 0xB
  1251  007B                     	ds	2
  1252                           
  1253                           	psect	cstackBANK0
  1254  0020                     __pcstackBANK0:	
  1255  0020                     ReadClock@sec10:	
  1256  0020                     i1read_write_flash_ram@one_read_zero_write:	
  1257                           ; 1 bytes @ 0x0
  1258                           
  1259                           
  1260                           ; 1 bytes @ 0x0
  1261  0020                     	ds	1
  1262  0021                     ReadClock@min10:	
  1263  0021                     i1read_write_flash_ram@i:	
  1264                           ; 1 bytes @ 0x1
  1265                           
  1266                           
  1267                           ; 2 bytes @ 0x1
  1268  0021                     	ds	1
  1269  0022                     ReadClock@hour10:	
  1270                           
  1271                           ; 1 bytes @ 0x2
  1272  0022                     	ds	1
  1273  0023                     ReadClock@date10:	
  1274                           
  1275                           ; 1 bytes @ 0x3
  1276  0023                     	ds	1
  1277  0024                     ReadClock@month10:	
  1278                           
  1279                           ; 1 bytes @ 0x4
  1280  0024                     	ds	1
  1281  0025                     ReadClock@year10:	
  1282                           
  1283                           ; 1 bytes @ 0x5
  1284  0025                     	ds	1
  1285  0026                     ReadClock@seconds:	
  1286                           
  1287                           ; 1 bytes @ 0x6
  1288  0026                     	ds	1
  1289  0027                     ReadClock@sec1:	
  1290                           
  1291                           ; 1 bytes @ 0x7
  1292  0027                     	ds	1
  1293  0028                     ReadClock@min1:	
  1294                           
  1295                           ; 1 bytes @ 0x8
  1296  0028                     	ds	1
  1297  0029                     ReadClock@hour1:	
  1298                           
  1299                           ; 1 bytes @ 0x9
  1300  0029                     	ds	1
  1301  002A                     ReadClock@month1:	
  1302                           
  1303                           ; 1 bytes @ 0xA
  1304  002A                     	ds	1
  1305  002B                     ReadClock@year1:	
  1306                           
  1307                           ; 1 bytes @ 0xB
  1308  002B                     	ds	1
  1309  002C                     ReadClock@date1:	
  1310                           
  1311                           ; 1 bytes @ 0xC
  1312  002C                     	ds	1
  1313  002D                     ??_saveDataToFlash:	
  1314                           
  1315                           ; 1 bytes @ 0xD
  1316  002D                     	ds	5
  1317  0032                     saveDataToFlash@seconds:	
  1318                           
  1319                           ; 1 bytes @ 0x12
  1320  0032                     	ds	1
  1321  0033                     saveDataToFlash@minutes:	
  1322                           
  1323                           ; 1 bytes @ 0x13
  1324  0033                     	ds	1
  1325  0034                     saveDataToFlash@hours:	
  1326                           
  1327                           ; 1 bytes @ 0x14
  1328  0034                     	ds	1
  1329  0035                     saveDataToFlash@date:	
  1330                           
  1331                           ; 1 bytes @ 0x15
  1332  0035                     	ds	1
  1333  0036                     saveDataToFlash@month:	
  1334                           
  1335                           ; 1 bytes @ 0x16
  1336  0036                     	ds	1
  1337  0037                     saveDataToFlash@year:	
  1338                           
  1339                           ; 1 bytes @ 0x17
  1340  0037                     	ds	1
  1341  0038                     saveDataToFlash@value:	
  1342                           
  1343                           ; 1 bytes @ 0x18
  1344  0038                     	ds	1
  1345  0039                     saveDataToFlash@addr1:	
  1346                           
  1347                           ; 1 bytes @ 0x19
  1348  0039                     	ds	1
  1349  003A                     saveDataToFlash@addr2:	
  1350                           
  1351                           ; 1 bytes @ 0x1A
  1352  003A                     	ds	1
  1353  003B                     saveDataToFlash@addr3:	
  1354                           
  1355                           ; 1 bytes @ 0x1B
  1356  003B                     	ds	1
  1357  003C                     ??_tc_int:	
  1358                           
  1359                           ; 1 bytes @ 0x1C
  1360  003C                     	ds	7
  1361                           
  1362                           	psect	maintext
  1363  0CF1                     __pmaintext:	
  1364 ;;
  1365 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1366 ;;
  1367 ;; *************** function _main *****************
  1368 ;; Defined at:
  1369 ;;		line 31 in file "main.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;		None
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;		None
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  2   78[None  ] int 
  1376 ;; Registers used:
  1377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1378 ;; Tracked objects:
  1379 ;;		On entry : B00/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1383 ;;      Params:         0       0       0       0       0
  1384 ;;      Locals:         0       0       0       0       0
  1385 ;;      Temps:          0       0       3       0       0
  1386 ;;      Totals:         0       0       3       0       0
  1387 ;;Total ram usage:        3 bytes
  1388 ;; Hardware stack levels required when called:   15
  1389 ;; This function calls:
  1390 ;;		_ClockInit
  1391 ;;		_Mode_0
  1392 ;;		_Mode_1
  1393 ;;		_Mode_2
  1394 ;;		_Mode_4
  1395 ;;		_Mode_5
  1396 ;;		_OperationMode
  1397 ;;		_PICInit
  1398 ;;		_ResetMemoryAdress
  1399 ;;		_SendMemoryData
  1400 ;;		_TransiverInit
  1401 ;;		_TransiverReadFIFO
  1402 ;;		_TransiverToReceive
  1403 ;;		_ram_bulk_erase
  1404 ;;		_read_ram_status
  1405 ;;		_write_ram_status
  1406 ;; This function is called by:
  1407 ;;		Startup code after reset
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           
  1412                           ;psect for function _main
  1413  0CF1                     _main:	
  1414                           
  1415                           ;main.c: 34: PICInit();
  1416                           
  1417                           ;incstack = 0
  1418 ;; hardware stack exceeded
  1419                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1420  0CF1  120A  158A  229C  120A  158A  	fcall	_PICInit
  1421                           
  1422                           ;main.c: 35: TransiverInit();
  1423  0CF6  120A  158A  2716  120A  158A  	fcall	_TransiverInit
  1424                           
  1425                           ;main.c: 36: ClockInit();
  1426  0CFB  120A  158A  2453  120A  158A  	fcall	_ClockInit
  1427                           
  1428                           ;main.c: 40: write_ram_status(read_ram_status() & 0b11100011);
  1429  0D00  160A  118A  2673  120A  158A  	fcall	_read_ram_status
  1430  0D05  39E3               	andlw	227
  1431  0D06  120A  158A  209B  120A  158A  	fcall	_write_ram_status
  1432                           
  1433                           ;main.c: 41: ram_bulk_erase();
  1434  0D0B  160A  118A  2700  120A  158A  	fcall	_ram_bulk_erase
  1435                           
  1436                           ;main.c: 42: ResetMemoryAdress();
  1437  0D10  160A  118A  268B  120A  158A  	fcall	_ResetMemoryAdress
  1438                           
  1439                           ;main.c: 46: RB1 = 0;
  1440  0D15  1283               	bcf	3,5	;RP0=0, select bank0
  1441  0D16  1303               	bcf	3,6	;RP1=0, select bank0
  1442  0D17  1086               	bcf	6,1	;volatile
  1443                           
  1444                           ;main.c: 47: _delay((unsigned long)((300)*(4000000/4000.0)));
  1445  0D18  3002               	movlw	2
  1446  0D19  1683               	bsf	3,5	;RP0=1, select bank1
  1447  0D1A  1303               	bcf	3,6	;RP1=0, select bank1
  1448  0D1B  00D5               	movwf	(??_main^(0+128)+2)
  1449  0D1C  3086               	movlw	134
  1450  0D1D  00D4               	movwf	(??_main^(0+128)+1)
  1451  0D1E  3098               	movlw	152
  1452  0D1F  00D3               	movwf	??_main^(0+128)
  1453  0D20                     u3177:	
  1454  0D20  0BD3               	decfsz	??_main^(0+128),f
  1455  0D21  2D20               	goto	u3177
  1456  0D22  0BD4               	decfsz	(??_main^(0+128)+1),f
  1457  0D23  2D20               	goto	u3177
  1458  0D24  0BD5               	decfsz	(??_main^(0+128)+2),f
  1459  0D25  2D20               	goto	u3177
  1460  0D26  0000               	nop
  1461                           
  1462                           ;main.c: 48: RB1 = 1;
  1463  0D27  1283               	bcf	3,5	;RP0=0, select bank0
  1464  0D28  1303               	bcf	3,6	;RP1=0, select bank0
  1465  0D29  1486               	bsf	6,1	;volatile
  1466                           
  1467                           ;main.c: 49: _delay((unsigned long)((300)*(4000000/4000.0)));
  1468  0D2A  3002               	movlw	2
  1469  0D2B  1683               	bsf	3,5	;RP0=1, select bank1
  1470  0D2C  1303               	bcf	3,6	;RP1=0, select bank1
  1471  0D2D  00D5               	movwf	(??_main^(0+128)+2)
  1472  0D2E  3086               	movlw	134
  1473  0D2F  00D4               	movwf	(??_main^(0+128)+1)
  1474  0D30  3098               	movlw	152
  1475  0D31  00D3               	movwf	??_main^(0+128)
  1476  0D32                     u3187:	
  1477  0D32  0BD3               	decfsz	??_main^(0+128),f
  1478  0D33  2D32               	goto	u3187
  1479  0D34  0BD4               	decfsz	(??_main^(0+128)+1),f
  1480  0D35  2D32               	goto	u3187
  1481  0D36  0BD5               	decfsz	(??_main^(0+128)+2),f
  1482  0D37  2D32               	goto	u3187
  1483  0D38  0000               	nop
  1484  0D39                     l4081:	
  1485                           ;main.c: 51: while(1)
  1486                           
  1487                           
  1488                           ;main.c: 52: {
  1489                           ;main.c: 53: if(!RB0)
  1490  0D39  1283               	bcf	3,5	;RP0=0, select bank0
  1491  0D3A  1303               	bcf	3,6	;RP1=0, select bank0
  1492  0D3B  1806               	btfsc	6,0	;volatile
  1493  0D3C  2D46               	goto	l4085
  1494                           
  1495                           ;main.c: 54: {
  1496                           ;main.c: 55: SendMemoryData();
  1497  0D3D  120A  118A  2551  120A  158A  	fcall	_SendMemoryData
  1498  0D42                     l81:	
  1499                           ;main.c: 76: while(!RB0);
  1500                           
  1501  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  1502  0D43  1303               	bcf	3,6	;RP1=0, select bank0
  1503  0D44  1C06               	btfss	6,0	;volatile
  1504  0D45  2D42               	goto	l81
  1505  0D46                     l4085:	
  1506                           
  1507                           ;main.c: 79: }
  1508                           ;main.c: 81: if(OperationMode() == 0)
  1509  0D46  160A  118A  25CA  120A  158A  	fcall	_OperationMode
  1510  0D4B  3A00               	xorlw	0
  1511  0D4C  1D03               	skipz
  1512  0D4D  2D53               	goto	l4089
  1513                           
  1514                           ;main.c: 82: {
  1515                           ;main.c: 83: Mode_0();
  1516  0D4E  160A  118A  25A5  120A  158A  	fcall	_Mode_0
  1517  0D53                     l4089:	
  1518                           
  1519                           ;main.c: 84: }
  1520                           ;main.c: 85: if(OperationMode() == 1)
  1521  0D53  160A  118A  25CA  120A  158A  	fcall	_OperationMode
  1522  0D58  3A01               	xorlw	1
  1523  0D59  1D03               	skipz
  1524  0D5A  2D60               	goto	l4093
  1525                           
  1526                           ;main.c: 86: {
  1527                           ;main.c: 87: Mode_1();
  1528  0D5B  160A  118A  26E1  120A  158A  	fcall	_Mode_1
  1529  0D60                     l4093:	
  1530                           
  1531                           ;main.c: 88: }
  1532                           ;main.c: 90: if(OperationMode() == 2)
  1533  0D60  160A  118A  25CA  120A  158A  	fcall	_OperationMode
  1534  0D65  3A02               	xorlw	2
  1535  0D66  1D03               	skipz
  1536  0D67  2D6D               	goto	l4097
  1537                           
  1538                           ;main.c: 91: {
  1539                           ;main.c: 92: Mode_2();
  1540  0D68  160A  118A  25D5  120A  158A  	fcall	_Mode_2
  1541  0D6D                     l4097:	
  1542                           
  1543                           ;main.c: 93: }
  1544                           ;main.c: 95: if(OperationMode() == 4)
  1545  0D6D  160A  118A  25CA  120A  158A  	fcall	_OperationMode
  1546  0D72  3A04               	xorlw	4
  1547  0D73  1D03               	skipz
  1548  0D74  2D7A               	goto	l4101
  1549                           
  1550                           ;main.c: 96: {
  1551                           ;main.c: 97: Mode_4();
  1552  0D75  160A  118A  2623  120A  158A  	fcall	_Mode_4
  1553  0D7A                     l4101:	
  1554                           
  1555                           ;main.c: 98: }
  1556                           ;main.c: 100: if(OperationMode() == 5)
  1557  0D7A  160A  118A  25CA  120A  158A  	fcall	_OperationMode
  1558  0D7F  3A05               	xorlw	5
  1559  0D80  1D03               	skipz
  1560  0D81  2D87               	goto	l4105
  1561                           
  1562                           ;main.c: 101: {
  1563                           ;main.c: 102: Mode_5();
  1564  0D82  120A  158A  2030  120A  158A  	fcall	_Mode_5
  1565  0D87                     l4105:	
  1566                           
  1567                           ;main.c: 103: }
  1568                           ;main.c: 107: if(!bTransiverModeReceive)
  1569  0D87  1683               	bsf	3,5	;RP0=1, select bank1
  1570  0D88  1303               	bcf	3,6	;RP1=0, select bank1
  1571  0D89  0857               	movf	_bTransiverModeReceive^(0+128),w
  1572  0D8A  1D03               	btfss	3,2
  1573  0D8B  2D91               	goto	l4109
  1574                           
  1575                           ;main.c: 108: TransiverToReceive();
  1576  0D8C  120A  158A  2240  120A  158A  	fcall	_TransiverToReceive
  1577  0D91                     l4109:	
  1578                           
  1579                           ;main.c: 109: if(RB4 && bTransiverModeReceive)
  1580  0D91  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0D92  1303               	bcf	3,6	;RP1=0, select bank0
  1582  0D93  1E06               	btfss	6,4	;volatile
  1583  0D94  2D39               	goto	l4081
  1584  0D95  1683               	bsf	3,5	;RP0=1, select bank1
  1585  0D96  1303               	bcf	3,6	;RP1=0, select bank1
  1586  0D97  0857               	movf	_bTransiverModeReceive^(0+128),w
  1587  0D98  1903               	btfsc	3,2
  1588  0D99  2D39               	goto	l4081
  1589                           
  1590                           ;main.c: 110: TransiverReadFIFO();
  1591  0D9A  120A  158A  2300  120A  158A  	fcall	_TransiverReadFIFO
  1592  0D9F  2D39               	goto	l4081
  1593  0DA0                     __end_of_main:	
  1594                           
  1595                           	psect	text1
  1596  0A40                     __ptext1:	
  1597 ;; *************** function _TransiverToReceive *****************
  1598 ;; Defined at:
  1599 ;;		line 16 in file "functions.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1613 ;;      Params:         0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0
  1615 ;;      Temps:          0       0       2       0       0
  1616 ;;      Totals:         0       0       2       0       0
  1617 ;;Total ram usage:        2 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:   11
  1620 ;; This function calls:
  1621 ;;		_FindChannel
  1622 ;;		_RegisterRead
  1623 ;;		_RegisterSet
  1624 ;;		_SetRFMode
  1625 ;;		_timerFunction
  1626 ;; This function is called by:
  1627 ;;		_main
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           
  1632                           ;psect for function _TransiverToReceive
  1633  0A40                     _TransiverToReceive:	
  1634                           
  1635                           ;functions.c: 18: timerFunction(2, 5);
  1636                           
  1637                           ;incstack = 0
  1638 ;; hardware stack exceeded
  1639                           ; Regs used in _TransiverToReceive: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1640  0A40  3002               	movlw	2
  1641  0A41  1683               	bsf	3,5	;RP0=1, select bank1
  1642  0A42  1303               	bcf	3,6	;RP1=0, select bank1
  1643  0A43  00A0               	movwf	timerFunction@intTimerNumber^(0+128)
  1644  0A44  3000               	movlw	0
  1645  0A45  00A1               	movwf	(timerFunction@intTimerNumber^(0+128)+1)
  1646  0A46  3005               	movlw	5
  1647  0A47  00A2               	movwf	timerFunction@intSetSeconds^(0+128)
  1648  0A48  3000               	movlw	0
  1649  0A49  00A3               	movwf	(timerFunction@intSetSeconds^(0+128)+1)
  1650  0A4A  160A  118A  2611  120A  158A  	fcall	_timerFunction
  1651                           
  1652                           ;functions.c: 22: SetRFMode(0x20);
  1653  0A4F  3020               	movlw	32
  1654  0A50  120A  158A  236D  120A  158A  	fcall	_SetRFMode
  1655                           
  1656                           ;functions.c: 23: _delay((unsigned long)((10)*(4000000/4000.0)));
  1657  0A55  300D               	movlw	13
  1658  0A56  1683               	bsf	3,5	;RP0=1, select bank1
  1659  0A57  1303               	bcf	3,6	;RP1=0, select bank1
  1660  0A58  00B6               	movwf	(??_TransiverToReceive^(0+128)+1)
  1661  0A59  30FB               	movlw	251
  1662  0A5A  00B5               	movwf	??_TransiverToReceive^(0+128)
  1663  0A5B                     u3197:	
  1664  0A5B  0BB5               	decfsz	??_TransiverToReceive^(0+128),f
  1665  0A5C  2A5B               	goto	u3197
  1666  0A5D  0BB6               	decfsz	(??_TransiverToReceive^(0+128)+1),f
  1667  0A5E  2A5B               	goto	u3197
  1668                           
  1669                           ;functions.c: 24: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  1670  0A5F  300E               	movlw	14
  1671  0A60  160A  118A  278D  120A  158A  	fcall	_RegisterRead
  1672  0A65  3802               	iorlw	2
  1673  0A66  1683               	bsf	3,5	;RP0=1, select bank1
  1674  0A67  1303               	bcf	3,6	;RP1=0, select bank1
  1675  0A68  00B5               	movwf	??_TransiverToReceive^(0+128)
  1676  0A69  0835               	movf	??_TransiverToReceive^(0+128),w
  1677  0A6A  00A7               	movwf	RegisterSet@value^(0+128)
  1678  0A6B  300E               	movlw	14
  1679  0A6C  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  1680                           
  1681                           ;functions.c: 25: SetRFMode(0x40);
  1682  0A71  3040               	movlw	64
  1683  0A72  120A  158A  236D  120A  158A  	fcall	_SetRFMode
  1684  0A77                     l4021:	
  1685                           ;functions.c: 26: while((RegisterRead(0x0E) & 0b00000010) == 0)
  1686                           
  1687  0A77  300E               	movlw	14
  1688  0A78  160A  118A  278D  120A  158A  	fcall	_RegisterRead
  1689  0A7D  3902               	andlw	2
  1690  0A7E  1D03               	btfss	3,2
  1691  0A7F  2A8A               	goto	l4023
  1692                           
  1693                           ;functions.c: 27: {
  1694                           ;functions.c: 28: if(bTimerComplete[2])
  1695  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  1696  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  1697  0A82  084F               	movf	_bTimerComplete+2,w
  1698  0A83  1903               	btfsc	3,2
  1699  0A84  2A77               	goto	l4021
  1700                           
  1701                           ;functions.c: 29: {
  1702                           ;functions.c: 30: FindChannel();
  1703  0A85  120A  118A  2661  120A  158A  	fcall	_FindChannel
  1704  0A8A                     l4023:	
  1705                           ;functions.c: 31: break;
  1706                           
  1707                           
  1708                           ;functions.c: 32: }
  1709                           ;functions.c: 33: }
  1710                           ;functions.c: 35: SetRFMode(0x60);
  1711  0A8A  3060               	movlw	96
  1712  0A8B  120A  158A  236D  120A  158A  	fcall	_SetRFMode
  1713                           
  1714                           ;functions.c: 36: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1715  0A90  30A5               	movlw	165
  1716  0A91  1683               	bsf	3,5	;RP0=1, select bank1
  1717  0A92  1303               	bcf	3,6	;RP1=0, select bank1
  1718  0A93  00B5               	movwf	??_TransiverToReceive^(0+128)
  1719  0A94                     u3207:	
  1720  0A94  0BB5               	decfsz	??_TransiverToReceive^(0+128),f
  1721  0A95  2A94               	goto	u3207
  1722  0A96  2A97               	nop2
  1723                           
  1724                           ;functions.c: 37: bTransiverModeReceive = 1;
  1725  0A97  1683               	bsf	3,5	;RP0=1, select bank1
  1726  0A98  1303               	bcf	3,6	;RP1=0, select bank1
  1727  0A99  01D7               	clrf	_bTransiverModeReceive^(0+128)
  1728  0A9A  0AD7               	incf	_bTransiverModeReceive^(0+128),f
  1729  0A9B  0008               	return
  1730  0A9C                     __end_of_TransiverToReceive:	
  1731                           
  1732                           	psect	text2
  1733  0B00                     __ptext2:	
  1734 ;; *************** function _TransiverReadFIFO *****************
  1735 ;; Defined at:
  1736 ;;		line 42 in file "functions.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;  j               2   32[BANK3 ] int 
  1741 ;;  ReceivedStri   30    0[BANK3 ] unsigned char [30]
  1742 ;;  i               2   30[BANK3 ] int 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1752 ;;      Params:         0       0       0       0       0
  1753 ;;      Locals:         0       0       0      34       0
  1754 ;;      Temps:          0       0       2       0       0
  1755 ;;      Totals:         0       0       2      34       0
  1756 ;;Total ram usage:       36 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:   14
  1759 ;; This function calls:
  1760 ;;		_ReadFIFO
  1761 ;;		_ReceivedPacketHandler
  1762 ;;		_SetRFMode
  1763 ;;		_timerFunction
  1764 ;; This function is called by:
  1765 ;;		_main
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           
  1770                           ;psect for function _TransiverReadFIFO
  1771  0B00                     _TransiverReadFIFO:	
  1772                           
  1773                           ;functions.c: 44: unsigned char ReceivedString[30];
  1774                           ;functions.c: 45: timerFunction(3, 5);
  1775                           
  1776                           ;incstack = 0
  1777 ;; hardware stack exceeded
  1778                           ; Regs used in _TransiverReadFIFO: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1779  0B00  3003               	movlw	3
  1780  0B01  1683               	bsf	3,5	;RP0=1, select bank1
  1781  0B02  1303               	bcf	3,6	;RP1=0, select bank1
  1782  0B03  00A0               	movwf	timerFunction@intTimerNumber^(0+128)
  1783  0B04  3000               	movlw	0
  1784  0B05  00A1               	movwf	(timerFunction@intTimerNumber^(0+128)+1)
  1785  0B06  3005               	movlw	5
  1786  0B07  00A2               	movwf	timerFunction@intSetSeconds^(0+128)
  1787  0B08  3000               	movlw	0
  1788  0B09  00A3               	movwf	(timerFunction@intSetSeconds^(0+128)+1)
  1789  0B0A  160A  118A  2611  120A  158A  	fcall	_timerFunction
  1790                           
  1791                           ;functions.c: 47: SetRFMode(0x20);
  1792  0B0F  3020               	movlw	32
  1793  0B10  120A  158A  236D  120A  158A  	fcall	_SetRFMode
  1794                           
  1795                           ;functions.c: 48: bTransiverModeReceive = 0;
  1796  0B15  1683               	bsf	3,5	;RP0=1, select bank1
  1797  0B16  1303               	bcf	3,6	;RP1=0, select bank1
  1798  0B17  01D7               	clrf	_bTransiverModeReceive^(0+128)
  1799                           
  1800                           ;functions.c: 49: int i = 0;
  1801  0B18  1683               	bsf	3,5	;RP0=1, select bank3
  1802  0B19  1703               	bsf	3,6	;RP1=1, select bank3
  1803  0B1A  01D6               	clrf	TransiverReadFIFO@i^(0+384)
  1804  0B1B  01D7               	clrf	(TransiverReadFIFO@i+1)^(0+384)
  1805                           
  1806                           ;functions.c: 50: for (int j = 0; j < 30; ++j)
  1807  0B1C  01D8               	clrf	TransiverReadFIFO@j^(0+384)
  1808  0B1D  01D9               	clrf	(TransiverReadFIFO@j+1)^(0+384)
  1809  0B1E                     L1:	
  1810  0B1E  0859               	movf	(TransiverReadFIFO@j+1)^(0+384),w
  1811  0B1F  3A80               	xorlw	128
  1812  0B20  00FF               	movwf	127
  1813  0B21  3080               	movlw	128
  1814  0B22  027F               	subwf	127,w
  1815  0B23  1D03               	skipz
  1816  0B24  2B27               	goto	u3025
  1817  0B25  301E               	movlw	30
  1818  0B26  0258               	subwf	TransiverReadFIFO@j^(0+384),w
  1819  0B27                     u3025:	
  1820  0B27  1803               	btfsc	3,0
  1821  0B28  2B51               	goto	l4051
  1822                           
  1823                           ;functions.c: 51: {
  1824                           ;functions.c: 52: ReceivedString[j] = 0;
  1825  0B29  1683               	bsf	3,5	;RP0=1, select bank3
  1826  0B2A  1703               	bsf	3,6	;RP1=1, select bank3
  1827  0B2B  0858               	movf	TransiverReadFIFO@j^(0+384),w
  1828  0B2C  3EB8               	addlw	(low (TransiverReadFIFO@ReceivedString| (0+256)))& (0+255)
  1829  0B2D  0084               	movwf	4
  1830  0B2E  1783               	bsf	3,7	;select IRP bank3
  1831  0B2F  0180               	clrf	0
  1832  0B30  3001               	movlw	1
  1833  0B31  07D8               	addwf	TransiverReadFIFO@j^(0+384),f
  1834  0B32  1803               	skipnc
  1835  0B33  0AD9               	incf	(TransiverReadFIFO@j+1)^(0+384),f
  1836  0B34  3000               	movlw	0
  1837  0B35  07D9               	addwf	(TransiverReadFIFO@j+1)^(0+384),f
  1838  0B36  2B1E               	goto	L1
  1839  0B37                     l4047:	
  1840                           ;functions.c: 53: }
  1841                           ;functions.c: 54: while((RB3)&&(!bTimerComplete[3]))
  1842                           
  1843                           
  1844                           ;functions.c: 55: {
  1845                           ;functions.c: 56: ReceivedString[i] = ReadFIFO();
  1846  0B37  160A  118A  2635  120A  158A  	fcall	_ReadFIFO
  1847  0B3C  1683               	bsf	3,5	;RP0=1, select bank1
  1848  0B3D  1303               	bcf	3,6	;RP1=0, select bank1
  1849  0B3E  00D1               	movwf	??_TransiverReadFIFO^(0+128)
  1850  0B3F  1683               	bsf	3,5	;RP0=1, select bank3
  1851  0B40  1703               	bsf	3,6	;RP1=1, select bank3
  1852  0B41  0856               	movf	TransiverReadFIFO@i^(0+384),w
  1853  0B42  3EB8               	addlw	(low (TransiverReadFIFO@ReceivedString| (0+256)))& (0+255)
  1854  0B43  0084               	movwf	4
  1855  0B44  1683               	bsf	3,5	;RP0=1, select bank1
  1856  0B45  1303               	bcf	3,6	;RP1=0, select bank1
  1857  0B46  0851               	movf	??_TransiverReadFIFO^(0+128),w
  1858  0B47  1783               	bsf	3,7	;select IRP bank3
  1859  0B48  0080               	movwf	0
  1860                           
  1861                           ;functions.c: 57: i++;
  1862  0B49  3001               	movlw	1
  1863  0B4A  1683               	bsf	3,5	;RP0=1, select bank3
  1864  0B4B  1703               	bsf	3,6	;RP1=1, select bank3
  1865  0B4C  07D6               	addwf	TransiverReadFIFO@i^(0+384),f
  1866  0B4D  1803               	skipnc
  1867  0B4E  0AD7               	incf	(TransiverReadFIFO@i+1)^(0+384),f
  1868  0B4F  3000               	movlw	0
  1869  0B50  07D7               	addwf	(TransiverReadFIFO@i+1)^(0+384),f
  1870  0B51                     l4051:	
  1871  0B51  1283               	bcf	3,5	;RP0=0, select bank0
  1872  0B52  1303               	bcf	3,6	;RP1=0, select bank0
  1873  0B53  1D86               	btfss	6,3	;volatile
  1874  0B54  2B58               	goto	l4055
  1875  0B55  0850               	movf	_bTimerComplete+3,w
  1876  0B56  1903               	btfsc	3,2
  1877  0B57  2B37               	goto	l4047
  1878  0B58                     l4055:	
  1879                           
  1880                           ;functions.c: 58: }
  1881                           ;functions.c: 60: _delay((unsigned long)((10)*(4000000/4000.0)));
  1882  0B58  300D               	movlw	13
  1883  0B59  1683               	bsf	3,5	;RP0=1, select bank1
  1884  0B5A  1303               	bcf	3,6	;RP1=0, select bank1
  1885  0B5B  00D2               	movwf	(??_TransiverReadFIFO^(0+128)+1)
  1886  0B5C  30FB               	movlw	251
  1887  0B5D  00D1               	movwf	??_TransiverReadFIFO^(0+128)
  1888  0B5E                     u3217:	
  1889  0B5E  0BD1               	decfsz	??_TransiverReadFIFO^(0+128),f
  1890  0B5F  2B5E               	goto	u3217
  1891  0B60  0BD2               	decfsz	(??_TransiverReadFIFO^(0+128)+1),f
  1892  0B61  2B5E               	goto	u3217
  1893                           
  1894                           ;functions.c: 61: SetRFMode(0x00);
  1895  0B62  3000               	movlw	0
  1896  0B63  120A  158A  236D  120A  158A  	fcall	_SetRFMode
  1897                           
  1898                           ;functions.c: 63: ReceivedPacketHandler(ReceivedString);
  1899  0B68  30B8               	movlw	(low (TransiverReadFIFO@ReceivedString| (0+256)))& (0+255)
  1900  0B69  120A  118A  228A   	fcall	_ReceivedPacketHandler
  1901  0B6C  0008               	return
  1902  0B6D                     __end_of_TransiverReadFIFO:	
  1903                           
  1904                           	psect	text3
  1905  028A                     __ptext3:	
  1906 ;; *************** function _ReceivedPacketHandler *****************
  1907 ;; Defined at:
  1908 ;;		line 73 in file "functions.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;  Data            1    wreg     PTR unsigned char 
  1911 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  Data            1   48[BANK1 ] PTR unsigned char 
  1914 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      void 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1924 ;;      Params:         0       0       0       0       0
  1925 ;;      Locals:         0       0       1       0       0
  1926 ;;      Temps:          0       0       1       0       0
  1927 ;;      Totals:         0       0       2       0       0
  1928 ;;Total ram usage:        2 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:   13
  1931 ;; This function calls:
  1932 ;;		_AnalogValue
  1933 ;;		_DarknessCheck
  1934 ;;		_DelayDs
  1935 ;;		_OperationMode
  1936 ;;		_ResetMemoryAdress
  1937 ;;		_SendMemoryData
  1938 ;;		_TransmittPacket
  1939 ;;		_eeprom_read
  1940 ;;		_ram_bulk_erase
  1941 ;;		_read_ram_status
  1942 ;;		_write_ram_status
  1943 ;; This function is called by:
  1944 ;;		_TransiverReadFIFO
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           
  1949                           ;psect for function _ReceivedPacketHandler
  1950  028A                     _ReceivedPacketHandler:	
  1951                           
  1952                           ;incstack = 0
  1953 ;; hardware stack exceeded
  1954                           ; Regs used in _ReceivedPacketHandler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1955                           ;ReceivedPacketHandler@Data stored from wreg
  1956  028A  1683               	bsf	3,5	;RP0=1, select bank1
  1957  028B  1303               	bcf	3,6	;RP1=0, select bank1
  1958  028C  00D0               	movwf	ReceivedPacketHandler@Data^(0+128)
  1959                           
  1960                           ;functions.c: 75: if(Data[0] != 44 || Data[3] != 55)
  1961  028D  0850               	movf	ReceivedPacketHandler@Data^(0+128),w
  1962  028E  0084               	movwf	4
  1963  028F  302C               	movlw	44
  1964  0290  1783               	bsf	3,7	;select IRP bank2
  1965  0291  0600               	xorwf	0,w
  1966  0292  1D03               	btfss	3,2
  1967  0293  0008               	return
  1968  0294  0850               	movf	ReceivedPacketHandler@Data^(0+128),w
  1969  0295  3E03               	addlw	3
  1970  0296  0084               	movwf	4
  1971  0297  3037               	movlw	55
  1972  0298  0600               	xorwf	0,w
  1973  0299  1D03               	btfss	3,2
  1974  029A  0008               	return
  1975  029B  2BF5               	goto	l3797
  1976  029C                     l306:	
  1977                           ;functions.c: 82: {
  1978                           ;functions.c: 83: case 1:
  1979                           
  1980                           ;functions.c: 81: switch (Data[2])
  1981                           
  1982                           ;functions.c: 79: {
  1983                           ;functions.c: 80: case 1:
  1984                           
  1985                           ;functions.c: 78: switch (Data[1])
  1986                           
  1987                           ;functions.c: 76: return;
  1988                           
  1989                           
  1990                           ;functions.c: 84: RC2 = 1;
  1991  029C  1283               	bcf	3,5	;RP0=0, select bank0
  1992  029D  1303               	bcf	3,6	;RP1=0, select bank0
  1993  029E  1507               	bsf	7,2	;volatile
  1994                           
  1995                           ;functions.c: 85: DelayDs(10);
  1996  029F  300A               	movlw	10
  1997  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  1998  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  1999  02A2  00A0               	movwf	DelayDs@cnt^(0+128)
  2000  02A3  3000               	movlw	0
  2001  02A4  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  2002  02A5  160A  118A  2722  120A  118A  	fcall	_DelayDs
  2003                           
  2004                           ;functions.c: 86: RC2 = 0;
  2005  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2006  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2007  02AC  1107               	bcf	7,2	;volatile
  2008                           
  2009                           ;functions.c: 87: DelayDs(5);
  2010  02AD  3005               	movlw	5
  2011  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  2012  02AF  1303               	bcf	3,6	;RP1=0, select bank1
  2013  02B0  00A0               	movwf	DelayDs@cnt^(0+128)
  2014  02B1  3000               	movlw	0
  2015  02B2  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  2016  02B3  160A  118A  2722   	fcall	_DelayDs
  2017                           
  2018                           ;functions.c: 88: break;
  2019  02B6  0008               	return
  2020  02B7                     l308:	
  2021                           ;functions.c: 90: case 2:
  2022                           
  2023                           
  2024                           ;functions.c: 91: RC1 = 1;
  2025  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2026  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  2027  02B9  1487               	bsf	7,1	;volatile
  2028                           
  2029                           ;functions.c: 92: DelayDs(10);
  2030  02BA  300A               	movlw	10
  2031  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  2032  02BC  1303               	bcf	3,6	;RP1=0, select bank1
  2033  02BD  00A0               	movwf	DelayDs@cnt^(0+128)
  2034  02BE  3000               	movlw	0
  2035  02BF  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  2036  02C0  160A  118A  2722  120A  118A  	fcall	_DelayDs
  2037                           
  2038                           ;functions.c: 93: RC1 = 0;
  2039  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  2040  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  2041  02C7  1087               	bcf	7,1	;volatile
  2042                           
  2043                           ;functions.c: 94: DelayDs(5);
  2044  02C8  3005               	movlw	5
  2045  02C9  1683               	bsf	3,5	;RP0=1, select bank1
  2046  02CA  1303               	bcf	3,6	;RP1=0, select bank1
  2047  02CB  00A0               	movwf	DelayDs@cnt^(0+128)
  2048  02CC  3000               	movlw	0
  2049  02CD  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  2050  02CE  160A  118A  2722   	fcall	_DelayDs
  2051                           
  2052                           ;functions.c: 95: break;
  2053  02D1  0008               	return
  2054  02D2                     l309:	
  2055                           ;functions.c: 97: case 3:
  2056                           
  2057                           
  2058                           ;functions.c: 98: RB1 = 0;
  2059  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2060  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  2061  02D4  1086               	bcf	6,1	;volatile
  2062                           
  2063                           ;functions.c: 99: DelayDs(10);
  2064  02D5  300A               	movlw	10
  2065  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  2066  02D7  1303               	bcf	3,6	;RP1=0, select bank1
  2067  02D8  00A0               	movwf	DelayDs@cnt^(0+128)
  2068  02D9  3000               	movlw	0
  2069  02DA  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  2070  02DB  160A  118A  2722  120A  118A  	fcall	_DelayDs
  2071                           
  2072                           ;functions.c: 100: RB1 = 1;
  2073  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  2074  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  2075  02E2  1486               	bsf	6,1	;volatile
  2076                           
  2077                           ;functions.c: 101: DelayDs(5);
  2078  02E3  3005               	movlw	5
  2079  02E4  1683               	bsf	3,5	;RP0=1, select bank1
  2080  02E5  1303               	bcf	3,6	;RP1=0, select bank1
  2081  02E6  00A0               	movwf	DelayDs@cnt^(0+128)
  2082  02E7  3000               	movlw	0
  2083  02E8  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  2084  02E9  160A  118A  2722   	fcall	_DelayDs
  2085                           
  2086                           ;functions.c: 107: }
  2087                           
  2088                           ;functions.c: 105: break;
  2089                           
  2090                           ;functions.c: 104: default:
  2091                           
  2092                           ;functions.c: 102: break;
  2093  02EC  0008               	return
  2094  02ED                     l3727:	
  2095  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  2096  02EE  1303               	bcf	3,6	;RP1=0, select bank1
  2097  02EF  0850               	movf	ReceivedPacketHandler@Data^(0+128),w
  2098  02F0  3E02               	addlw	2
  2099  02F1  0084               	movwf	4
  2100  02F2  1783               	bsf	3,7	;select IRP bank2
  2101  02F3  0800               	movf	0,w
  2102                           
  2103                           ; Switch size 1, requested type "space"
  2104                           ; Number of cases is 3, Range of values is 1 to 3
  2105                           ; switch strategies available:
  2106                           ; Name         Instructions Cycles
  2107                           ; simple_byte           10     6 (average)
  2108                           ; direct_byte           20    11 (fixed)
  2109                           ; jumptable            263     9 (fixed)
  2110                           ;	Chosen strategy is simple_byte
  2111  02F4  3A01               	xorlw	1	; case 1
  2112  02F5  1903               	skipnz
  2113  02F6  2A9C               	goto	l306
  2114  02F7  3A03               	xorlw	3	; case 2
  2115  02F8  1903               	skipnz
  2116  02F9  2AB7               	goto	l308
  2117  02FA  3A01               	xorlw	1	; case 3
  2118  02FB  1903               	skipnz
  2119  02FC  2AD2               	goto	l309
  2120  02FD  2C17               	goto	l302
  2121                           
  2122                           ;functions.c: 108: break;
  2123  02FE  0008               	return
  2124  02FF                     l3729:	
  2125                           ;functions.c: 109: case 2:
  2126                           
  2127                           
  2128                           ;functions.c: 110: if(Data[2] == 1 && OperationMode() == 6)
  2129  02FF  0850               	movf	ReceivedPacketHandler@Data^(0+128),w
  2130  0300  3E02               	addlw	2
  2131  0301  0084               	movwf	4
  2132  0302  0300               	decf	0,w
  2133  0303  1D03               	btfss	3,2
  2134  0304  2B20               	goto	l3739
  2135  0305  160A  118A  25CA  120A  118A  	fcall	_OperationMode
  2136  030A  3A06               	xorlw	6
  2137  030B  1D03               	skipz
  2138  030C  2B20               	goto	l3739
  2139                           
  2140                           ;functions.c: 111: {
  2141                           ;functions.c: 112: intBlinkCycle = 1;
  2142  030D  3001               	movlw	1
  2143  030E  1283               	bcf	3,5	;RP0=0, select bank0
  2144  030F  1303               	bcf	3,6	;RP1=0, select bank0
  2145  0310  00D6               	movwf	_intBlinkCycle
  2146  0311  3000               	movlw	0
  2147  0312  00D7               	movwf	_intBlinkCycle+1
  2148                           
  2149                           ;functions.c: 113: intBlinkCounter = 0;
  2150  0313  01D4               	clrf	_intBlinkCounter
  2151  0314  01D5               	clrf	_intBlinkCounter+1
  2152                           
  2153                           ;functions.c: 114: DelayDs(100);
  2154  0315  3064               	movlw	100
  2155  0316  1683               	bsf	3,5	;RP0=1, select bank1
  2156  0317  1303               	bcf	3,6	;RP1=0, select bank1
  2157  0318  00A0               	movwf	DelayDs@cnt^(0+128)
  2158  0319  3000               	movlw	0
  2159  031A  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  2160  031B  160A  118A  2722  120A  118A  	fcall	_DelayDs
  2161  0320                     l3739:	
  2162                           
  2163                           ;functions.c: 115: }
  2164                           ;functions.c: 116: if(Data[2] == 2 && OperationMode() == 7)
  2165  0320  1683               	bsf	3,5	;RP0=1, select bank1
  2166  0321  1303               	bcf	3,6	;RP1=0, select bank1
  2167  0322  0850               	movf	ReceivedPacketHandler@Data^(0+128),w
  2168  0323  3E02               	addlw	2
  2169  0324  0084               	movwf	4
  2170  0325  3002               	movlw	2
  2171  0326  1783               	bsf	3,7	;select IRP bank2
  2172  0327  0600               	xorwf	0,w
  2173  0328  1D03               	btfss	3,2
  2174  0329  0008               	return
  2175  032A  160A  118A  25CA  120A  118A  	fcall	_OperationMode
  2176  032F  3A07               	xorlw	7
  2177  0330  1D03               	skipz
  2178  0331  0008               	return
  2179                           
  2180                           ;functions.c: 117: {
  2181                           ;functions.c: 118: intBlinkCycle = 1;
  2182  0332  3001               	movlw	1
  2183  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2184  0334  1303               	bcf	3,6	;RP1=0, select bank0
  2185  0335  00D6               	movwf	_intBlinkCycle
  2186  0336  3000               	movlw	0
  2187  0337  00D7               	movwf	_intBlinkCycle+1
  2188                           
  2189                           ;functions.c: 119: intBlinkCounter = 0;
  2190  0338  01D4               	clrf	_intBlinkCounter
  2191  0339  01D5               	clrf	_intBlinkCounter+1
  2192                           
  2193                           ;functions.c: 120: DelayDs(100);
  2194  033A  3064               	movlw	100
  2195  033B  1683               	bsf	3,5	;RP0=1, select bank1
  2196  033C  1303               	bcf	3,6	;RP1=0, select bank1
  2197  033D  00A0               	movwf	DelayDs@cnt^(0+128)
  2198  033E  3000               	movlw	0
  2199  033F  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  2200  0340  160A  118A  2722   	fcall	_DelayDs
  2201                           
  2202                           ;functions.c: 121: }
  2203                           ;functions.c: 122: break;
  2204  0343  0008               	return
  2205  0344                     l3749:	
  2206                           ;functions.c: 124: case 3:
  2207                           
  2208                           
  2209                           ;functions.c: 125: if(Data[2] != 0)
  2210  0344  1683               	bsf	3,5	;RP0=1, select bank1
  2211  0345  1303               	bcf	3,6	;RP1=0, select bank1
  2212  0346  0850               	movf	ReceivedPacketHandler@Data^(0+128),w
  2213  0347  3E02               	addlw	2
  2214  0348  0084               	movwf	4
  2215  0349  1783               	bsf	3,7	;select IRP bank2
  2216  034A  0800               	movf	0,w
  2217  034B  1D03               	btfss	3,2
  2218  034C  0008               	return
  2219                           
  2220                           ;functions.c: 127: TransmittPacket(3, AnalogValue(0));
  2221                           
  2222                           ;functions.c: 126: break;
  2223  034D  3000               	movlw	0
  2224  034E  120A  158A  20F9  120A  118A  	fcall	_AnalogValue
  2225  0353  1683               	bsf	3,5	;RP0=1, select bank1
  2226  0354  1303               	bcf	3,6	;RP1=0, select bank1
  2227  0355  00CF               	movwf	??_ReceivedPacketHandler^(0+128)
  2228  0356  084F               	movf	??_ReceivedPacketHandler^(0+128),w
  2229  0357  00B5               	movwf	TransmittPacket@value^(0+128)
  2230  0358  3003               	movlw	3
  2231  0359  120A  158A  25A0   	fcall	_TransmittPacket
  2232                           
  2233                           ;functions.c: 128: break;
  2234  035C  0008               	return
  2235  035D                     l3755:	
  2236                           ;functions.c: 130: case 4:
  2237                           
  2238                           
  2239                           ;functions.c: 131: if(Data[2] != 0)
  2240  035D  1683               	bsf	3,5	;RP0=1, select bank1
  2241  035E  1303               	bcf	3,6	;RP1=0, select bank1
  2242  035F  0850               	movf	ReceivedPacketHandler@Data^(0+128),w
  2243  0360  3E02               	addlw	2
  2244  0361  0084               	movwf	4
  2245  0362  1783               	bsf	3,7	;select IRP bank2
  2246  0363  0800               	movf	0,w
  2247  0364  1D03               	btfss	3,2
  2248  0365  0008               	return
  2249                           
  2250                           ;functions.c: 133: TransmittPacket(4, AnalogValue(3));
  2251                           
  2252                           ;functions.c: 132: break;
  2253  0366  3003               	movlw	3
  2254  0367  120A  158A  20F9  120A  118A  	fcall	_AnalogValue
  2255  036C  1683               	bsf	3,5	;RP0=1, select bank1
  2256  036D  1303               	bcf	3,6	;RP1=0, select bank1
  2257  036E  00CF               	movwf	??_ReceivedPacketHandler^(0+128)
  2258  036F  084F               	movf	??_ReceivedPacketHandler^(0+128),w
  2259  0370  00B5               	movwf	TransmittPacket@value^(0+128)
  2260  0371  3004               	movlw	4
  2261  0372  120A  158A  25A0   	fcall	_TransmittPacket
  2262                           
  2263                           ;functions.c: 134: break;
  2264  0375  0008               	return
  2265  0376                     l3761:	
  2266                           ;functions.c: 136: case 5:
  2267                           
  2268                           
  2269                           ;functions.c: 137: if(Data[2] != 0)
  2270  0376  1683               	bsf	3,5	;RP0=1, select bank1
  2271  0377  1303               	bcf	3,6	;RP1=0, select bank1
  2272  0378  0850               	movf	ReceivedPacketHandler@Data^(0+128),w
  2273  0379  3E02               	addlw	2
  2274  037A  0084               	movwf	4
  2275  037B  1783               	bsf	3,7	;select IRP bank2
  2276  037C  0800               	movf	0,w
  2277  037D  1D03               	btfss	3,2
  2278  037E  0008               	return
  2279                           
  2280                           ;functions.c: 139: TransmittPacket(5, eeprom_read(0));
  2281                           
  2282                           ;functions.c: 138: break;
  2283  037F  3000               	movlw	0
  2284  0380  160A  118A  2769  120A  118A  	fcall	_eeprom_read
  2285  0385  1683               	bsf	3,5	;RP0=1, select bank1
  2286  0386  1303               	bcf	3,6	;RP1=0, select bank1
  2287  0387  00CF               	movwf	??_ReceivedPacketHandler^(0+128)
  2288  0388  084F               	movf	??_ReceivedPacketHandler^(0+128),w
  2289  0389  00B5               	movwf	TransmittPacket@value^(0+128)
  2290  038A  3005               	movlw	5
  2291  038B  120A  158A  25A0   	fcall	_TransmittPacket
  2292                           
  2293                           ;functions.c: 140: break;
  2294  038E  0008               	return
  2295  038F                     l3767:	
  2296                           ;functions.c: 142: case 6:
  2297                           
  2298                           
  2299                           ;functions.c: 143: if(Data[2] != 0)
  2300  038F  1683               	bsf	3,5	;RP0=1, select bank1
  2301  0390  1303               	bcf	3,6	;RP1=0, select bank1
  2302  0391  0850               	movf	ReceivedPacketHandler@Data^(0+128),w
  2303  0392  3E02               	addlw	2
  2304  0393  0084               	movwf	4
  2305  0394  1783               	bsf	3,7	;select IRP bank2
  2306  0395  0800               	movf	0,w
  2307  0396  1D03               	btfss	3,2
  2308  0397  0008               	return
  2309                           
  2310                           ;functions.c: 145: if(bValueFromPot == TRUE)
  2311                           
  2312                           ;functions.c: 144: break;
  2313  0398  1283               	bcf	3,5	;RP0=0, select bank0
  2314  0399  1303               	bcf	3,6	;RP1=0, select bank0
  2315  039A  0363               	decf	_bValueFromPot,w
  2316  039B  1D03               	btfss	3,2
  2317  039C  2BA6               	goto	l3775
  2318                           
  2319                           ;functions.c: 146: TransmittPacket(6, 1);
  2320  039D  1683               	bsf	3,5	;RP0=1, select bank1
  2321  039E  1303               	bcf	3,6	;RP1=0, select bank1
  2322  039F  01B5               	clrf	TransmittPacket@value^(0+128)
  2323  03A0  0AB5               	incf	TransmittPacket@value^(0+128),f
  2324  03A1  3006               	movlw	6
  2325  03A2  120A  158A  25A0   	fcall	_TransmittPacket
  2326  03A5  0008               	return
  2327  03A6                     l3775:	
  2328                           
  2329                           ;functions.c: 147: else
  2330                           ;functions.c: 148: TransmittPacket(6, 0);
  2331  03A6  1683               	bsf	3,5	;RP0=1, select bank1
  2332  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  2333  03A8  01B5               	clrf	TransmittPacket@value^(0+128)
  2334  03A9  3006               	movlw	6
  2335  03AA  120A  158A  25A0   	fcall	_TransmittPacket
  2336                           
  2337                           ;functions.c: 149: break;
  2338  03AD  0008               	return
  2339  03AE                     l3777:	
  2340                           ;functions.c: 151: case 7:
  2341                           
  2342                           
  2343                           ;functions.c: 152: if(Data[2] != 0)
  2344  03AE  1683               	bsf	3,5	;RP0=1, select bank1
  2345  03AF  1303               	bcf	3,6	;RP1=0, select bank1
  2346  03B0  0850               	movf	ReceivedPacketHandler@Data^(0+128),w
  2347  03B1  3E02               	addlw	2
  2348  03B2  0084               	movwf	4
  2349  03B3  1783               	bsf	3,7	;select IRP bank2
  2350  03B4  0800               	movf	0,w
  2351  03B5  1D03               	btfss	3,2
  2352  03B6  0008               	return
  2353                           
  2354                           ;functions.c: 154: DarknessCheck();
  2355                           
  2356                           ;functions.c: 153: break;
  2357  03B7  120A  158A  2044  120A  118A  	fcall	_DarknessCheck
  2358                           
  2359                           ;functions.c: 155: if(bDark)
  2360  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  2361  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  2362  03BE  0856               	movf	_bDark^(0+128),w
  2363  03BF  1903               	btfsc	3,2
  2364  03C0  2BC8               	goto	l3787
  2365                           
  2366                           ;functions.c: 156: TransmittPacket(7, 1);
  2367  03C1  01B5               	clrf	TransmittPacket@value^(0+128)
  2368  03C2  0AB5               	incf	TransmittPacket@value^(0+128),f
  2369  03C3  3007               	movlw	7
  2370  03C4  120A  158A  25A0   	fcall	_TransmittPacket
  2371  03C7  0008               	return
  2372  03C8                     l3787:	
  2373                           
  2374                           ;functions.c: 157: else
  2375                           ;functions.c: 158: TransmittPacket(7, 2);
  2376  03C8  3002               	movlw	2
  2377  03C9  1683               	bsf	3,5	;RP0=1, select bank1
  2378  03CA  1303               	bcf	3,6	;RP1=0, select bank1
  2379  03CB  00CF               	movwf	??_ReceivedPacketHandler^(0+128)
  2380  03CC  084F               	movf	??_ReceivedPacketHandler^(0+128),w
  2381  03CD  00B5               	movwf	TransmittPacket@value^(0+128)
  2382  03CE  3007               	movlw	7
  2383  03CF  120A  158A  25A0   	fcall	_TransmittPacket
  2384                           
  2385                           ;functions.c: 159: break;
  2386  03D2  0008               	return
  2387  03D3                     l3789:	
  2388                           ;functions.c: 161: case 9:
  2389                           
  2390                           
  2391                           ;functions.c: 162: write_ram_status(read_ram_status() & 0b11100011);
  2392  03D3  160A  118A  2673  120A  118A  	fcall	_read_ram_status
  2393  03D8  39E3               	andlw	227
  2394  03D9  120A  158A  209B  120A  118A  	fcall	_write_ram_status
  2395                           
  2396                           ;functions.c: 163: ram_bulk_erase();
  2397  03DE  160A  118A  2700  120A  118A  	fcall	_ram_bulk_erase
  2398                           
  2399                           ;functions.c: 164: ResetMemoryAdress();
  2400  03E3  160A  118A  268B  120A  118A  	fcall	_ResetMemoryAdress
  2401                           
  2402                           ;functions.c: 165: TransmittPacket(9, 1);
  2403  03E8  1683               	bsf	3,5	;RP0=1, select bank1
  2404  03E9  1303               	bcf	3,6	;RP1=0, select bank1
  2405  03EA  01B5               	clrf	TransmittPacket@value^(0+128)
  2406  03EB  0AB5               	incf	TransmittPacket@value^(0+128),f
  2407  03EC  3009               	movlw	9
  2408  03ED  120A  158A  25A0   	fcall	_TransmittPacket
  2409                           
  2410                           ;functions.c: 166: break;
  2411  03F0  0008               	return
  2412  03F1                     l3793:	
  2413                           ;functions.c: 168: case 8:
  2414                           
  2415                           
  2416                           ;functions.c: 169: SendMemoryData();
  2417  03F1  120A  118A  2551   	fcall	_SendMemoryData
  2418                           
  2419                           ;functions.c: 173: }
  2420                           
  2421                           ;functions.c: 172: break;
  2422                           
  2423                           ;functions.c: 171: default:
  2424  03F4  0008               	return
  2425  03F5                     l3797:	
  2426  03F5  1683               	bsf	3,5	;RP0=1, select bank1
  2427  03F6  1303               	bcf	3,6	;RP1=0, select bank1
  2428  03F7  0A50               	incf	ReceivedPacketHandler@Data^(0+128),w
  2429  03F8  0084               	movwf	4
  2430  03F9  1783               	bsf	3,7	;select IRP bank2
  2431  03FA  0800               	movf	0,w
  2432                           
  2433                           ; Switch size 1, requested type "space"
  2434                           ; Number of cases is 9, Range of values is 1 to 9
  2435                           ; switch strategies available:
  2436                           ; Name         Instructions Cycles
  2437                           ; simple_byte           28    15 (average)
  2438                           ; direct_byte           38    11 (fixed)
  2439                           ; jumptable            263     9 (fixed)
  2440                           ;	Chosen strategy is simple_byte
  2441  03FB  3A01               	xorlw	1	; case 1
  2442  03FC  1903               	skipnz
  2443  03FD  2AED               	goto	l3727
  2444  03FE  3A03               	xorlw	3	; case 2
  2445  03FF  1903               	skipnz
  2446  0400  2AFF               	goto	l3729
  2447  0401  3A01               	xorlw	1	; case 3
  2448  0402  1903               	skipnz
  2449  0403  2B44               	goto	l3749
  2450  0404  3A07               	xorlw	7	; case 4
  2451  0405  1903               	skipnz
  2452  0406  2B5D               	goto	l3755
  2453  0407  3A01               	xorlw	1	; case 5
  2454  0408  1903               	skipnz
  2455  0409  2B76               	goto	l3761
  2456  040A  3A03               	xorlw	3	; case 6
  2457  040B  1903               	skipnz
  2458  040C  2B8F               	goto	l3767
  2459  040D  3A01               	xorlw	1	; case 7
  2460  040E  1903               	skipnz
  2461  040F  2BAE               	goto	l3777
  2462  0410  3A0F               	xorlw	15	; case 8
  2463  0411  1903               	skipnz
  2464  0412  2BF1               	goto	l3793
  2465  0413  3A01               	xorlw	1	; case 9
  2466  0414  1903               	skipnz
  2467  0415  2BD3               	goto	l3789
  2468  0416  2C17               	goto	l302
  2469  0417                     l302:	
  2470  0417  0008               	return
  2471  0418                     __end_of_ReceivedPacketHandler:	
  2472                           
  2473                           	psect	text4
  2474  089B                     __ptext4:	
  2475 ;; *************** function _write_ram_status *****************
  2476 ;; Defined at:
  2477 ;;		line 169 in file "m25p16.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;  status          1    wreg     unsigned char 
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  status          1    5[BANK1 ] unsigned char 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  1    wreg      void 
  2484 ;; Registers used:
  2485 ;;		wreg, status,2, status,0, pclath, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2491 ;;      Params:         0       0       0       0       0
  2492 ;;      Locals:         0       0       1       0       0
  2493 ;;      Temps:          0       0       0       0       0
  2494 ;;      Totals:         0       0       1       0       0
  2495 ;;Total ram usage:        1 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    9
  2498 ;; This function calls:
  2499 ;;		_WriteSPI
  2500 ;;		_read_ram_status
  2501 ;; This function is called by:
  2502 ;;		_main
  2503 ;;		_ReceivedPacketHandler
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           
  2508                           ;psect for function _write_ram_status
  2509  089B                     _write_ram_status:	
  2510                           
  2511                           ;incstack = 0
  2512 ;; hardware stack exceeded
  2513                           ; Regs used in _write_ram_status: [wreg+status,2+status,0+pclath+cstack]
  2514                           ;write_ram_status@status stored from wreg
  2515  089B  1683               	bsf	3,5	;RP0=1, select bank1
  2516  089C  1303               	bcf	3,6	;RP1=0, select bank1
  2517  089D  00A5               	movwf	write_ram_status@status^(0+128)
  2518                           
  2519                           ;m25p16.c: 172: RD3 = 0;
  2520  089E  1283               	bcf	3,5	;RP0=0, select bank0
  2521  089F  1303               	bcf	3,6	;RP1=0, select bank0
  2522  08A0  1188               	bcf	8,3	;volatile
  2523                           
  2524                           ;m25p16.c: 173: WriteSPI(0x06);
  2525  08A1  3006               	movlw	6
  2526  08A2  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  2527                           
  2528                           ;m25p16.c: 174: RD3 = 1;
  2529  08A7  1283               	bcf	3,5	;RP0=0, select bank0
  2530  08A8  1303               	bcf	3,6	;RP1=0, select bank0
  2531  08A9  1588               	bsf	8,3	;volatile
  2532                           
  2533                           ;m25p16.c: 175: _delay((unsigned long)((2)*(4000000/4000000.0)));
  2534  08AA  28AB               	nop2	;2 cycle nop
  2535                           
  2536                           ;m25p16.c: 176: RD3 = 0;
  2537  08AB  1283               	bcf	3,5	;RP0=0, select bank0
  2538  08AC  1303               	bcf	3,6	;RP1=0, select bank0
  2539  08AD  1188               	bcf	8,3	;volatile
  2540                           
  2541                           ;m25p16.c: 177: WriteSPI(0x01);
  2542  08AE  3001               	movlw	1
  2543  08AF  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  2544                           
  2545                           ;m25p16.c: 178: WriteSPI(status);
  2546  08B4  1683               	bsf	3,5	;RP0=1, select bank1
  2547  08B5  1303               	bcf	3,6	;RP1=0, select bank1
  2548  08B6  0825               	movf	write_ram_status@status^(0+128),w
  2549  08B7  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  2550                           
  2551                           ;m25p16.c: 179: RD3 = 1;
  2552  08BC  1283               	bcf	3,5	;RP0=0, select bank0
  2553  08BD  1303               	bcf	3,6	;RP1=0, select bank0
  2554  08BE  1588               	bsf	8,3	;volatile
  2555                           
  2556                           ;m25p16.c: 180: _delay((unsigned long)((2)*(4000000/4000000.0)));
  2557  08BF  28C0               	nop2	;2 cycle nop
  2558  08C0                     l3633:	
  2559                           ;m25p16.c: 181: while (read_ram_status() & 0x01);
  2560                           
  2561  08C0  160A  118A  2673  120A  158A  	fcall	_read_ram_status
  2562  08C5  3901               	andlw	1
  2563  08C6  1903               	btfsc	3,2
  2564  08C7  0008               	return
  2565  08C8  28C0               	goto	l3633
  2566  08C9                     __end_of_write_ram_status:	
  2567                           
  2568                           	psect	text5
  2569  1700                     __ptext5:	
  2570 ;; *************** function _ram_bulk_erase *****************
  2571 ;; Defined at:
  2572 ;;		line 69 in file "m25p16.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;		None
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  1    wreg      void 
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0, pclath, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2586 ;;      Params:         0       0       0       0       0
  2587 ;;      Locals:         0       0       0       0       0
  2588 ;;      Temps:          0       0       0       0       0
  2589 ;;      Totals:         0       0       0       0       0
  2590 ;;Total ram usage:        0 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    9
  2593 ;; This function calls:
  2594 ;;		_WriteSPI
  2595 ;;		_read_ram_status
  2596 ;; This function is called by:
  2597 ;;		_main
  2598 ;;		_ReceivedPacketHandler
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           
  2603                           ;psect for function _ram_bulk_erase
  2604  1700                     _ram_bulk_erase:	
  2605                           
  2606                           ;m25p16.c: 71: RD3 = 0;
  2607                           
  2608                           ;incstack = 0
  2609 ;; hardware stack exceeded
  2610                           ; Regs used in _ram_bulk_erase: [wreg+status,2+status,0+pclath+cstack]
  2611  1700  1283               	bcf	3,5	;RP0=0, select bank0
  2612  1701  1303               	bcf	3,6	;RP1=0, select bank0
  2613  1702  1188               	bcf	8,3	;volatile
  2614                           
  2615                           ;m25p16.c: 72: WriteSPI(0x06);
  2616  1703  3006               	movlw	6
  2617  1704  160A  118A  265B  160A  118A  	fcall	_WriteSPI
  2618                           
  2619                           ;m25p16.c: 73: RD3 = 1;
  2620  1709  1283               	bcf	3,5	;RP0=0, select bank0
  2621  170A  1303               	bcf	3,6	;RP1=0, select bank0
  2622  170B  1588               	bsf	8,3	;volatile
  2623                           
  2624                           ;m25p16.c: 74: _delay((unsigned long)((1)*(4000000/4000000.0)));
  2625  170C  0000               	nop
  2626                           
  2627                           ;m25p16.c: 75: RD3 = 0;
  2628  170D  1283               	bcf	3,5	;RP0=0, select bank0
  2629  170E  1303               	bcf	3,6	;RP1=0, select bank0
  2630  170F  1188               	bcf	8,3	;volatile
  2631                           
  2632                           ;m25p16.c: 76: WriteSPI(0xC7);
  2633  1710  30C7               	movlw	199
  2634  1711  160A  118A  265B  160A  118A  	fcall	_WriteSPI
  2635                           
  2636                           ;m25p16.c: 77: RD3 = 1;
  2637  1716  1283               	bcf	3,5	;RP0=0, select bank0
  2638  1717  1303               	bcf	3,6	;RP1=0, select bank0
  2639  1718  1588               	bsf	8,3	;volatile
  2640  1719                     l3647:	
  2641                           ;m25p16.c: 78: while(read_ram_status());
  2642                           
  2643  1719  160A  118A  2673  160A  118A  	fcall	_read_ram_status
  2644  171E  3A00               	xorlw	0
  2645  171F  1903               	btfsc	3,2
  2646  1720  0008               	return
  2647  1721  2F19               	goto	l3647
  2648  1722                     __end_of_ram_bulk_erase:	
  2649                           
  2650                           	psect	text6
  2651  0551                     __ptext6:	
  2652 ;; *************** function _SendMemoryData *****************
  2653 ;; Defined at:
  2654 ;;		line 1180 in file "functions.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  finalAddress    4   43[BANK1 ] unsigned long 
  2659 ;;  address         4   36[BANK1 ] unsigned long 
  2660 ;;  addr1           1   42[BANK1 ] unsigned char 
  2661 ;;  addr2           1   41[BANK1 ] unsigned char 
  2662 ;;  addr3           1   40[BANK1 ] unsigned char 
  2663 ;;  value           1   35[BANK1 ] unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2673 ;;      Params:         0       0       0       0       0
  2674 ;;      Locals:         0       0      12       0       0
  2675 ;;      Temps:          0       0       8       0       0
  2676 ;;      Totals:         0       0      20       0       0
  2677 ;;Total ram usage:       20 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:   12
  2680 ;; This function calls:
  2681 ;;		_ReadMemoryAdress
  2682 ;;		_TransmittPacket
  2683 ;;		_read_write_flash_ram
  2684 ;; This function is called by:
  2685 ;;		_main
  2686 ;;		_ReceivedPacketHandler
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           
  2691                           ;psect for function _SendMemoryData
  2692  0551                     _SendMemoryData:	
  2693                           
  2694                           ;functions.c: 1182: unsigned long address, finalAddress = 0;
  2695                           
  2696                           ;incstack = 0
  2697 ;; hardware stack exceeded
  2698                           ; Regs used in _SendMemoryData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2699  0551  3000               	movlw	0
  2700  0552  1683               	bsf	3,5	;RP0=1, select bank1
  2701  0553  1303               	bcf	3,6	;RP1=0, select bank1
  2702  0554  00CE               	movwf	(SendMemoryData@finalAddress+3)^(0+128)
  2703  0555  3000               	movlw	0
  2704  0556  00CD               	movwf	(SendMemoryData@finalAddress+2)^(0+128)
  2705  0557  3000               	movlw	0
  2706  0558  00CC               	movwf	(SendMemoryData@finalAddress+1)^(0+128)
  2707  0559  3000               	movlw	0
  2708  055A  00CB               	movwf	SendMemoryData@finalAddress^(0+128)
  2709                           
  2710                           ;functions.c: 1183: unsigned char addr3, addr2, addr1, value;
  2711                           ;functions.c: 1185: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2712  055B  30C9               	movlw	(low (SendMemoryData@addr2| 0))& (0+255)
  2713  055C  00BB               	movwf	??_SendMemoryData^(0+128)
  2714  055D  083B               	movf	??_SendMemoryData^(0+128),w
  2715  055E  00A2               	movwf	ReadMemoryAdress@var2^(0+128)
  2716  055F  30CA               	movlw	(low (SendMemoryData@addr1| 0))& (0+255)
  2717  0560  00BC               	movwf	(??_SendMemoryData+1)^(0+128)
  2718  0561  083C               	movf	(??_SendMemoryData+1)^(0+128),w
  2719  0562  00A3               	movwf	ReadMemoryAdress@var1^(0+128)
  2720  0563  30C8               	movlw	(low (SendMemoryData@addr3| 0))& (0+255)
  2721  0564  120A  158A  206F  120A  118A  	fcall	_ReadMemoryAdress
  2722                           
  2723                           ;functions.c: 1187: finalAddress = (finalAddress << 8) | addr3;
  2724  0569  1683               	bsf	3,5	;RP0=1, select bank1
  2725  056A  1303               	bcf	3,6	;RP1=0, select bank1
  2726  056B  0848               	movf	SendMemoryData@addr3^(0+128),w
  2727  056C  00BB               	movwf	??_SendMemoryData^(0+128)
  2728  056D  01BC               	clrf	(??_SendMemoryData^(0+128)+1)
  2729  056E  01BD               	clrf	(??_SendMemoryData^(0+128)+2)
  2730  056F  01BE               	clrf	(??_SendMemoryData^(0+128)+3)
  2731  0570  084B               	movf	SendMemoryData@finalAddress^(0+128),w
  2732  0571  00BF               	movwf	(??_SendMemoryData+4)^(0+128)
  2733  0572  084C               	movf	(SendMemoryData@finalAddress+1)^(0+128),w
  2734  0573  00C0               	movwf	((??_SendMemoryData+4)^(0+128)+1)
  2735  0574  084D               	movf	(SendMemoryData@finalAddress+2)^(0+128),w
  2736  0575  00C1               	movwf	((??_SendMemoryData+4)^(0+128)+2)
  2737  0576  084E               	movf	(SendMemoryData@finalAddress+3)^(0+128),w
  2738  0577  00C2               	movwf	((??_SendMemoryData+4)^(0+128)+3)
  2739  0578  3008               	movlw	8
  2740  0579                     u2585:	
  2741  0579  1003               	clrc
  2742  057A  0DBF               	rlf	(??_SendMemoryData+4)^(0+128),f
  2743  057B  0DC0               	rlf	((??_SendMemoryData+4)^(0+128)+1),f
  2744  057C  0DC1               	rlf	((??_SendMemoryData+4)^(0+128)+2),f
  2745  057D  0DC2               	rlf	((??_SendMemoryData+4)^(0+128)+3),f
  2746  057E  3EFF               	addlw	-1
  2747  057F  1D03               	skipz
  2748  0580  2D79               	goto	u2585
  2749  0581  083F               	movf	(??_SendMemoryData+4)^(0+128),w
  2750  0582  04BB               	iorwf	??_SendMemoryData^(0+128),f
  2751  0583  0840               	movf	(??_SendMemoryData+5)^(0+128),w
  2752  0584  04BC               	iorwf	(??_SendMemoryData^(0+128)+1),f
  2753  0585  0841               	movf	(??_SendMemoryData+6)^(0+128),w
  2754  0586  04BD               	iorwf	(??_SendMemoryData^(0+128)+2),f
  2755  0587  0842               	movf	(??_SendMemoryData+7)^(0+128),w
  2756  0588  04BE               	iorwf	(??_SendMemoryData^(0+128)+3),f
  2757  0589  083E               	movf	(??_SendMemoryData+3)^(0+128),w
  2758  058A  00CE               	movwf	(SendMemoryData@finalAddress+3)^(0+128)
  2759  058B  083D               	movf	(??_SendMemoryData+2)^(0+128),w
  2760  058C  00CD               	movwf	(SendMemoryData@finalAddress+2)^(0+128)
  2761  058D  083C               	movf	(??_SendMemoryData+1)^(0+128),w
  2762  058E  00CC               	movwf	(SendMemoryData@finalAddress+1)^(0+128)
  2763  058F  083B               	movf	??_SendMemoryData^(0+128),w
  2764  0590  00CB               	movwf	SendMemoryData@finalAddress^(0+128)
  2765                           
  2766                           ;functions.c: 1188: finalAddress = (finalAddress << 8) | addr2;
  2767  0591  0849               	movf	SendMemoryData@addr2^(0+128),w
  2768  0592  00BB               	movwf	??_SendMemoryData^(0+128)
  2769  0593  01BC               	clrf	(??_SendMemoryData^(0+128)+1)
  2770  0594  01BD               	clrf	(??_SendMemoryData^(0+128)+2)
  2771  0595  01BE               	clrf	(??_SendMemoryData^(0+128)+3)
  2772  0596  084B               	movf	SendMemoryData@finalAddress^(0+128),w
  2773  0597  00BF               	movwf	(??_SendMemoryData+4)^(0+128)
  2774  0598  084C               	movf	(SendMemoryData@finalAddress+1)^(0+128),w
  2775  0599  00C0               	movwf	((??_SendMemoryData+4)^(0+128)+1)
  2776  059A  084D               	movf	(SendMemoryData@finalAddress+2)^(0+128),w
  2777  059B  00C1               	movwf	((??_SendMemoryData+4)^(0+128)+2)
  2778  059C  084E               	movf	(SendMemoryData@finalAddress+3)^(0+128),w
  2779  059D  00C2               	movwf	((??_SendMemoryData+4)^(0+128)+3)
  2780  059E  3008               	movlw	8
  2781  059F                     u2595:	
  2782  059F  1003               	clrc
  2783  05A0  0DBF               	rlf	(??_SendMemoryData+4)^(0+128),f
  2784  05A1  0DC0               	rlf	((??_SendMemoryData+4)^(0+128)+1),f
  2785  05A2  0DC1               	rlf	((??_SendMemoryData+4)^(0+128)+2),f
  2786  05A3  0DC2               	rlf	((??_SendMemoryData+4)^(0+128)+3),f
  2787  05A4  3EFF               	addlw	-1
  2788  05A5  1D03               	skipz
  2789  05A6  2D9F               	goto	u2595
  2790  05A7  083F               	movf	(??_SendMemoryData+4)^(0+128),w
  2791  05A8  04BB               	iorwf	??_SendMemoryData^(0+128),f
  2792  05A9  0840               	movf	(??_SendMemoryData+5)^(0+128),w
  2793  05AA  04BC               	iorwf	(??_SendMemoryData^(0+128)+1),f
  2794  05AB  0841               	movf	(??_SendMemoryData+6)^(0+128),w
  2795  05AC  04BD               	iorwf	(??_SendMemoryData^(0+128)+2),f
  2796  05AD  0842               	movf	(??_SendMemoryData+7)^(0+128),w
  2797  05AE  04BE               	iorwf	(??_SendMemoryData^(0+128)+3),f
  2798  05AF  083E               	movf	(??_SendMemoryData+3)^(0+128),w
  2799  05B0  00CE               	movwf	(SendMemoryData@finalAddress+3)^(0+128)
  2800  05B1  083D               	movf	(??_SendMemoryData+2)^(0+128),w
  2801  05B2  00CD               	movwf	(SendMemoryData@finalAddress+2)^(0+128)
  2802  05B3  083C               	movf	(??_SendMemoryData+1)^(0+128),w
  2803  05B4  00CC               	movwf	(SendMemoryData@finalAddress+1)^(0+128)
  2804  05B5  083B               	movf	??_SendMemoryData^(0+128),w
  2805  05B6  00CB               	movwf	SendMemoryData@finalAddress^(0+128)
  2806                           
  2807                           ;functions.c: 1189: finalAddress = (finalAddress << 8) | addr1;
  2808  05B7  084A               	movf	SendMemoryData@addr1^(0+128),w
  2809  05B8  00BB               	movwf	??_SendMemoryData^(0+128)
  2810  05B9  01BC               	clrf	(??_SendMemoryData^(0+128)+1)
  2811  05BA  01BD               	clrf	(??_SendMemoryData^(0+128)+2)
  2812  05BB  01BE               	clrf	(??_SendMemoryData^(0+128)+3)
  2813  05BC  084B               	movf	SendMemoryData@finalAddress^(0+128),w
  2814  05BD  00BF               	movwf	(??_SendMemoryData+4)^(0+128)
  2815  05BE  084C               	movf	(SendMemoryData@finalAddress+1)^(0+128),w
  2816  05BF  00C0               	movwf	((??_SendMemoryData+4)^(0+128)+1)
  2817  05C0  084D               	movf	(SendMemoryData@finalAddress+2)^(0+128),w
  2818  05C1  00C1               	movwf	((??_SendMemoryData+4)^(0+128)+2)
  2819  05C2  084E               	movf	(SendMemoryData@finalAddress+3)^(0+128),w
  2820  05C3  00C2               	movwf	((??_SendMemoryData+4)^(0+128)+3)
  2821  05C4  3008               	movlw	8
  2822  05C5                     u2605:	
  2823  05C5  1003               	clrc
  2824  05C6  0DBF               	rlf	(??_SendMemoryData+4)^(0+128),f
  2825  05C7  0DC0               	rlf	((??_SendMemoryData+4)^(0+128)+1),f
  2826  05C8  0DC1               	rlf	((??_SendMemoryData+4)^(0+128)+2),f
  2827  05C9  0DC2               	rlf	((??_SendMemoryData+4)^(0+128)+3),f
  2828  05CA  3EFF               	addlw	-1
  2829  05CB  1D03               	skipz
  2830  05CC  2DC5               	goto	u2605
  2831  05CD  083F               	movf	(??_SendMemoryData+4)^(0+128),w
  2832  05CE  04BB               	iorwf	??_SendMemoryData^(0+128),f
  2833  05CF  0840               	movf	(??_SendMemoryData+5)^(0+128),w
  2834  05D0  04BC               	iorwf	(??_SendMemoryData^(0+128)+1),f
  2835  05D1  0841               	movf	(??_SendMemoryData+6)^(0+128),w
  2836  05D2  04BD               	iorwf	(??_SendMemoryData^(0+128)+2),f
  2837  05D3  0842               	movf	(??_SendMemoryData+7)^(0+128),w
  2838  05D4  04BE               	iorwf	(??_SendMemoryData^(0+128)+3),f
  2839  05D5  083E               	movf	(??_SendMemoryData+3)^(0+128),w
  2840  05D6  00CE               	movwf	(SendMemoryData@finalAddress+3)^(0+128)
  2841  05D7  083D               	movf	(??_SendMemoryData+2)^(0+128),w
  2842  05D8  00CD               	movwf	(SendMemoryData@finalAddress+2)^(0+128)
  2843  05D9  083C               	movf	(??_SendMemoryData+1)^(0+128),w
  2844  05DA  00CC               	movwf	(SendMemoryData@finalAddress+1)^(0+128)
  2845  05DB  083B               	movf	??_SendMemoryData^(0+128),w
  2846  05DC  00CB               	movwf	SendMemoryData@finalAddress^(0+128)
  2847                           
  2848                           ;functions.c: 1191: for(address = 0; address < finalAddress; address++)
  2849  05DD  3000               	movlw	0
  2850  05DE  00C7               	movwf	(SendMemoryData@address+3)^(0+128)
  2851  05DF  3000               	movlw	0
  2852  05E0  00C6               	movwf	(SendMemoryData@address+2)^(0+128)
  2853  05E1  3000               	movlw	0
  2854  05E2  00C5               	movwf	(SendMemoryData@address+1)^(0+128)
  2855  05E3  3000               	movlw	0
  2856  05E4  00C4               	movwf	SendMemoryData@address^(0+128)
  2857  05E5                     l3675:	
  2858  05E5  084E               	movf	(SendMemoryData@finalAddress+3)^(0+128),w
  2859  05E6  0247               	subwf	(SendMemoryData@address+3)^(0+128),w
  2860  05E7  1D03               	skipz
  2861  05E8  2DF3               	goto	u2635
  2862  05E9  084D               	movf	(SendMemoryData@finalAddress+2)^(0+128),w
  2863  05EA  0246               	subwf	(SendMemoryData@address+2)^(0+128),w
  2864  05EB  1D03               	skipz
  2865  05EC  2DF3               	goto	u2635
  2866  05ED  084C               	movf	(SendMemoryData@finalAddress+1)^(0+128),w
  2867  05EE  0245               	subwf	(SendMemoryData@address+1)^(0+128),w
  2868  05EF  1D03               	skipz
  2869  05F0  2DF3               	goto	u2635
  2870  05F1  084B               	movf	SendMemoryData@finalAddress^(0+128),w
  2871  05F2  0244               	subwf	SendMemoryData@address^(0+128),w
  2872  05F3                     u2635:	
  2873  05F3  1803               	btfsc	3,0
  2874  05F4  2E5A               	goto	l3677
  2875                           
  2876                           ;functions.c: 1192: {
  2877                           ;functions.c: 1194: addr1 = address & 0x00FF;
  2878  05F5  0844               	movf	SendMemoryData@address^(0+128),w
  2879  05F6  00BB               	movwf	??_SendMemoryData^(0+128)
  2880  05F7  083B               	movf	??_SendMemoryData^(0+128),w
  2881  05F8  00CA               	movwf	SendMemoryData@addr1^(0+128)
  2882                           
  2883                           ;functions.c: 1195: addr2 = address >> 8 & 0x00FF;
  2884  05F9  0844               	movf	SendMemoryData@address^(0+128),w
  2885  05FA  00BB               	movwf	??_SendMemoryData^(0+128)
  2886  05FB  0845               	movf	(SendMemoryData@address+1)^(0+128),w
  2887  05FC  00BC               	movwf	(??_SendMemoryData^(0+128)+1)
  2888  05FD  0846               	movf	(SendMemoryData@address+2)^(0+128),w
  2889  05FE  00BD               	movwf	(??_SendMemoryData^(0+128)+2)
  2890  05FF  0847               	movf	(SendMemoryData@address+3)^(0+128),w
  2891  0600  00BE               	movwf	(??_SendMemoryData^(0+128)+3)
  2892  0601  3008               	movlw	8
  2893  0602                     u2615:	
  2894  0602  1003               	clrc
  2895  0603  0CBE               	rrf	(??_SendMemoryData^(0+128)+3),f
  2896  0604  0CBD               	rrf	(??_SendMemoryData^(0+128)+2),f
  2897  0605  0CBC               	rrf	(??_SendMemoryData^(0+128)+1),f
  2898  0606  0CBB               	rrf	??_SendMemoryData^(0+128),f
  2899  0607  3EFF               	addlw	-1
  2900  0608  1D03               	skipz
  2901  0609  2E02               	goto	u2615
  2902  060A  083B               	movf	??_SendMemoryData^(0+128),w
  2903  060B  00BF               	movwf	(??_SendMemoryData+4)^(0+128)
  2904  060C  083F               	movf	(??_SendMemoryData+4)^(0+128),w
  2905  060D  00C9               	movwf	SendMemoryData@addr2^(0+128)
  2906                           
  2907                           ;functions.c: 1196: addr3 = address >> 16 & 0x00FF;
  2908  060E  0844               	movf	SendMemoryData@address^(0+128),w
  2909  060F  00BB               	movwf	??_SendMemoryData^(0+128)
  2910  0610  0845               	movf	(SendMemoryData@address+1)^(0+128),w
  2911  0611  00BC               	movwf	(??_SendMemoryData^(0+128)+1)
  2912  0612  0846               	movf	(SendMemoryData@address+2)^(0+128),w
  2913  0613  00BD               	movwf	(??_SendMemoryData^(0+128)+2)
  2914  0614  0847               	movf	(SendMemoryData@address+3)^(0+128),w
  2915  0615  00BE               	movwf	(??_SendMemoryData^(0+128)+3)
  2916  0616  3010               	movlw	16
  2917  0617                     u2625:	
  2918  0617  1003               	clrc
  2919  0618  0CBE               	rrf	(??_SendMemoryData^(0+128)+3),f
  2920  0619  0CBD               	rrf	(??_SendMemoryData^(0+128)+2),f
  2921  061A  0CBC               	rrf	(??_SendMemoryData^(0+128)+1),f
  2922  061B  0CBB               	rrf	??_SendMemoryData^(0+128),f
  2923  061C  3EFF               	addlw	-1
  2924  061D  1D03               	skipz
  2925  061E  2E17               	goto	u2625
  2926  061F  083B               	movf	??_SendMemoryData^(0+128),w
  2927  0620  00BF               	movwf	(??_SendMemoryData+4)^(0+128)
  2928  0621  083F               	movf	(??_SendMemoryData+4)^(0+128),w
  2929  0622  00C8               	movwf	SendMemoryData@addr3^(0+128)
  2930                           
  2931                           ;functions.c: 1199: read_write_flash_ram(
  2932                           ;functions.c: 1200: 1,
  2933                           ;functions.c: 1201: 1,
  2934                           ;functions.c: 1202: addr3,
  2935                           ;functions.c: 1203: addr2,
  2936                           ;functions.c: 1204: addr1,
  2937                           ;functions.c: 1205: &value);
  2938  0623  3001               	movlw	1
  2939  0624  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite^(0+128)
  2940  0625  3000               	movlw	0
  2941  0626  00A6               	movwf	(read_write_flash_ram@bytes_to_readwrite^(0+128)+1)
  2942  0627  0848               	movf	SendMemoryData@addr3^(0+128),w
  2943  0628  00BB               	movwf	??_SendMemoryData^(0+128)
  2944  0629  083B               	movf	??_SendMemoryData^(0+128),w
  2945  062A  00A7               	movwf	read_write_flash_ram@flash_sector^(0+128)
  2946  062B  0849               	movf	SendMemoryData@addr2^(0+128),w
  2947  062C  00BC               	movwf	(??_SendMemoryData+1)^(0+128)
  2948  062D  083C               	movf	(??_SendMemoryData+1)^(0+128),w
  2949  062E  00A8               	movwf	read_write_flash_ram@flash_page^(0+128)
  2950  062F  084A               	movf	SendMemoryData@addr1^(0+128),w
  2951  0630  00BD               	movwf	(??_SendMemoryData+2)^(0+128)
  2952  0631  083D               	movf	(??_SendMemoryData+2)^(0+128),w
  2953  0632  00A9               	movwf	read_write_flash_ram@offset^(0+128)
  2954  0633  30C3               	movlw	(low (SendMemoryData@value| 0))& (0+255)
  2955  0634  00BE               	movwf	(??_SendMemoryData+3)^(0+128)
  2956  0635  083E               	movf	(??_SendMemoryData+3)^(0+128),w
  2957  0636  00AA               	movwf	read_write_flash_ram@mem_ptr^(0+128)
  2958  0637  3001               	movlw	1
  2959  0638  120A  118A  2763  120A  118A  	fcall	_read_write_flash_ram
  2960                           
  2961                           ;functions.c: 1207: TransmittPacket(10, value);
  2962  063D  1683               	bsf	3,5	;RP0=1, select bank1
  2963  063E  1303               	bcf	3,6	;RP1=0, select bank1
  2964  063F  0843               	movf	SendMemoryData@value^(0+128),w
  2965  0640  00BB               	movwf	??_SendMemoryData^(0+128)
  2966  0641  083B               	movf	??_SendMemoryData^(0+128),w
  2967  0642  00B5               	movwf	TransmittPacket@value^(0+128)
  2968  0643  300A               	movlw	10
  2969  0644  120A  158A  25A0  120A  118A  	fcall	_TransmittPacket
  2970  0649  3001               	movlw	1
  2971  064A  1683               	bsf	3,5	;RP0=1, select bank1
  2972  064B  1303               	bcf	3,6	;RP1=0, select bank1
  2973  064C  07C4               	addwf	SendMemoryData@address^(0+128),f
  2974  064D  3000               	movlw	0
  2975  064E  1803               	skipnc
  2976  064F  3001               	movlw	1
  2977  0650  07C5               	addwf	(SendMemoryData@address+1)^(0+128),f
  2978  0651  3000               	movlw	0
  2979  0652  1803               	skipnc
  2980  0653  3001               	movlw	1
  2981  0654  07C6               	addwf	(SendMemoryData@address+2)^(0+128),f
  2982  0655  3000               	movlw	0
  2983  0656  1803               	skipnc
  2984  0657  3001               	movlw	1
  2985  0658  07C7               	addwf	(SendMemoryData@address+3)^(0+128),f
  2986  0659  2DE5               	goto	l3675
  2987  065A                     l3677:	
  2988                           
  2989                           ;functions.c: 1208: }
  2990                           ;functions.c: 1209: TransmittPacket(8, 1);
  2991  065A  01B5               	clrf	TransmittPacket@value^(0+128)
  2992  065B  0AB5               	incf	TransmittPacket@value^(0+128),f
  2993  065C  3008               	movlw	8
  2994  065D  120A  158A  25A0   	fcall	_TransmittPacket
  2995  0660  0008               	return
  2996  0661                     __end_of_SendMemoryData:	
  2997                           
  2998                           	psect	text7
  2999  0763                     __ptext7:	
  3000 ;; *************** function _read_write_flash_ram *****************
  3001 ;; Defined at:
  3002 ;;		line 107 in file "m25p16.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;  one_read_zer    1    wreg     unsigned char 
  3005 ;;  bytes_to_rea    2    5[BANK1 ] unsigned short 
  3006 ;;  flash_sector    1    7[BANK1 ] unsigned char 
  3007 ;;  flash_page      1    8[BANK1 ] unsigned char 
  3008 ;;  offset          1    9[BANK1 ] unsigned char 
  3009 ;;  mem_ptr         1   10[BANK1 ] PTR unsigned char 
  3010 ;;		 -> SendMemoryData@value(1), saveDataToFlash@value(1), 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  one_read_zer    1   13[BANK1 ] unsigned char 
  3013 ;;  i               2   14[BANK1 ] unsigned short 
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  1    wreg      void 
  3016 ;; Registers used:
  3017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3023 ;;      Params:         0       0       6       0       0
  3024 ;;      Locals:         0       0       3       0       0
  3025 ;;      Temps:          0       0       2       0       0
  3026 ;;      Totals:         0       0      11       0       0
  3027 ;;Total ram usage:       11 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    9
  3030 ;; This function calls:
  3031 ;;		_ReadSPI
  3032 ;;		_WriteSPI
  3033 ;;		_read_ram_status
  3034 ;; This function is called by:
  3035 ;;		_SendMemoryData
  3036 ;;		_write_flash_page
  3037 ;;		_read_flash_page
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           
  3042                           ;psect for function _read_write_flash_ram
  3043  0763                     _read_write_flash_ram:	
  3044                           
  3045                           ;incstack = 0
  3046 ;; hardware stack exceeded
  3047                           ; Regs used in _read_write_flash_ram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3048                           ;read_write_flash_ram@one_read_zero_write stored from wreg
  3049  0763  1683               	bsf	3,5	;RP0=1, select bank1
  3050  0764  1303               	bcf	3,6	;RP1=0, select bank1
  3051  0765  00AD               	movwf	read_write_flash_ram@one_read_zero_write^(0+128)
  3052                           
  3053                           ;m25p16.c: 122: unsigned short int i;
  3054                           ;m25p16.c: 126: RD3 = 0;
  3055  0766  1283               	bcf	3,5	;RP0=0, select bank0
  3056  0767  1303               	bcf	3,6	;RP1=0, select bank0
  3057  0768  1188               	bcf	8,3	;volatile
  3058                           
  3059                           ;m25p16.c: 127: if(one_read_zero_write)
  3060  0769  1683               	bsf	3,5	;RP0=1, select bank1
  3061  076A  1303               	bcf	3,6	;RP1=0, select bank1
  3062  076B  082D               	movf	read_write_flash_ram@one_read_zero_write^(0+128),w
  3063  076C  1903               	btfsc	3,2
  3064  076D  2F70               	goto	l3595
  3065                           
  3066                           ;m25p16.c: 128: {
  3067                           ;m25p16.c: 129: WriteSPI(0x03);
  3068  076E  3003               	movlw	3
  3069  076F  2F7E               	goto	L2
  3070  0770                     l3595:	
  3071                           ;m25p16.c: 130: }
  3072                           
  3073                           
  3074                           ;m25p16.c: 131: else
  3075                           ;m25p16.c: 132: {
  3076                           ;m25p16.c: 133: WriteSPI(0x06);
  3077  0770  3006               	movlw	6
  3078  0771  160A  118A  265B  120A  118A  	fcall	_WriteSPI
  3079                           
  3080                           ;m25p16.c: 134: RD3 = 1;
  3081  0776  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0777  1303               	bcf	3,6	;RP1=0, select bank0
  3083  0778  1588               	bsf	8,3	;volatile
  3084                           
  3085                           ;m25p16.c: 135: _delay((unsigned long)((1)*(4000000/4000000.0)));
  3086  0779  0000               	nop
  3087                           
  3088                           ;m25p16.c: 136: RD3 = 0;
  3089  077A  1283               	bcf	3,5	;RP0=0, select bank0
  3090  077B  1303               	bcf	3,6	;RP1=0, select bank0
  3091  077C  1188               	bcf	8,3	;volatile
  3092                           
  3093                           ;m25p16.c: 137: WriteSPI(0x02);
  3094  077D  3002               	movlw	2
  3095  077E                     L2:	
  3096  077E  160A  118A  265B  120A  118A  	fcall	_WriteSPI
  3097                           
  3098                           ;m25p16.c: 139: }
  3099                           ;m25p16.c: 141: WriteSPI(flash_sector);
  3100  0783  1683               	bsf	3,5	;RP0=1, select bank1
  3101  0784  1303               	bcf	3,6	;RP1=0, select bank1
  3102  0785  0827               	movf	read_write_flash_ram@flash_sector^(0+128),w
  3103  0786  160A  118A  265B  120A  118A  	fcall	_WriteSPI
  3104                           
  3105                           ;m25p16.c: 142: WriteSPI(flash_page);
  3106  078B  1683               	bsf	3,5	;RP0=1, select bank1
  3107  078C  1303               	bcf	3,6	;RP1=0, select bank1
  3108  078D  0828               	movf	read_write_flash_ram@flash_page^(0+128),w
  3109  078E  160A  118A  265B  120A  118A  	fcall	_WriteSPI
  3110                           
  3111                           ;m25p16.c: 143: WriteSPI(offset);
  3112  0793  1683               	bsf	3,5	;RP0=1, select bank1
  3113  0794  1303               	bcf	3,6	;RP1=0, select bank1
  3114  0795  0829               	movf	read_write_flash_ram@offset^(0+128),w
  3115  0796  160A  118A  265B  120A  118A  	fcall	_WriteSPI
  3116                           
  3117                           ;m25p16.c: 145: for (i=0;i<bytes_to_readwrite;i++)
  3118  079B  1683               	bsf	3,5	;RP0=1, select bank1
  3119  079C  1303               	bcf	3,6	;RP1=0, select bank1
  3120  079D  01AE               	clrf	read_write_flash_ram@i^(0+128)
  3121  079E  01AF               	clrf	(read_write_flash_ram@i+1)^(0+128)
  3122  079F                     l3613:	
  3123  079F  0826               	movf	(read_write_flash_ram@bytes_to_readwrite+1)^(0+128),w
  3124  07A0  022F               	subwf	(read_write_flash_ram@i+1)^(0+128),w
  3125  07A1  1D03               	skipz
  3126  07A2  2FA5               	goto	u2545
  3127  07A3  0825               	movf	read_write_flash_ram@bytes_to_readwrite^(0+128),w
  3128  07A4  022E               	subwf	read_write_flash_ram@i^(0+128),w
  3129  07A5                     u2545:	
  3130  07A5  1803               	btfsc	3,0
  3131  07A6  2FD0               	goto	l580
  3132                           
  3133                           ;m25p16.c: 146: {
  3134                           ;m25p16.c: 147: if (one_read_zero_write)
  3135  07A7  082D               	movf	read_write_flash_ram@one_read_zero_write^(0+128),w
  3136  07A8  1903               	btfsc	3,2
  3137  07A9  2FBB               	goto	l3609
  3138                           
  3139                           ;m25p16.c: 148: {
  3140                           ;m25p16.c: 149: mem_ptr[i] = ReadSPI();
  3141  07AA  160A  118A  25B1  120A  118A  	fcall	_ReadSPI
  3142  07AF  1683               	bsf	3,5	;RP0=1, select bank1
  3143  07B0  1303               	bcf	3,6	;RP1=0, select bank1
  3144  07B1  00AB               	movwf	??_read_write_flash_ram^(0+128)
  3145  07B2  082E               	movf	read_write_flash_ram@i^(0+128),w
  3146  07B3  072A               	addwf	read_write_flash_ram@mem_ptr^(0+128),w
  3147  07B4  00AC               	movwf	(??_read_write_flash_ram+1)^(0+128)
  3148  07B5  082C               	movf	(??_read_write_flash_ram+1)^(0+128),w
  3149  07B6  0084               	movwf	4
  3150  07B7  082B               	movf	??_read_write_flash_ram^(0+128),w
  3151  07B8  1383               	bcf	3,7	;select IRP bank0
  3152  07B9  0080               	movwf	0
  3153                           
  3154                           ;m25p16.c: 150: }
  3155  07BA  2FC7               	goto	l3611
  3156  07BB                     l3609:	
  3157                           
  3158                           ;m25p16.c: 151: else
  3159                           ;m25p16.c: 152: {
  3160                           ;m25p16.c: 153: WriteSPI(mem_ptr[i]);
  3161  07BB  082E               	movf	read_write_flash_ram@i^(0+128),w
  3162  07BC  072A               	addwf	read_write_flash_ram@mem_ptr^(0+128),w
  3163  07BD  00AB               	movwf	??_read_write_flash_ram^(0+128)
  3164  07BE  082B               	movf	??_read_write_flash_ram^(0+128),w
  3165  07BF  0084               	movwf	4
  3166  07C0  1383               	bcf	3,7	;select IRP bank0
  3167  07C1  0800               	movf	0,w
  3168  07C2  160A  118A  265B  120A  118A  	fcall	_WriteSPI
  3169  07C7                     l3611:	
  3170  07C7  3001               	movlw	1
  3171  07C8  1683               	bsf	3,5	;RP0=1, select bank1
  3172  07C9  1303               	bcf	3,6	;RP1=0, select bank1
  3173  07CA  07AE               	addwf	read_write_flash_ram@i^(0+128),f
  3174  07CB  1803               	skipnc
  3175  07CC  0AAF               	incf	(read_write_flash_ram@i+1)^(0+128),f
  3176  07CD  3000               	movlw	0
  3177  07CE  07AF               	addwf	(read_write_flash_ram@i+1)^(0+128),f
  3178  07CF  2F9F               	goto	l3613
  3179  07D0                     l580:	
  3180                           
  3181                           ;m25p16.c: 154: }
  3182                           ;m25p16.c: 155: }
  3183                           ;m25p16.c: 157: RD3 = 1;
  3184  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  3185  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  3186  07D2  1588               	bsf	8,3	;volatile
  3187                           
  3188                           ;m25p16.c: 159: _delay((unsigned long)((1)*(4000000/4000000.0)));
  3189  07D3  0000               	nop
  3190  07D4                     l3617:	
  3191                           ;m25p16.c: 160: while (read_ram_status() & 0b00000011) {
  3192                           
  3193  07D4  160A  118A  2673  120A  118A  	fcall	_read_ram_status
  3194  07D9  3903               	andlw	3
  3195  07DA  1903               	btfsc	3,2
  3196  07DB  0008               	return
  3197                           
  3198                           ;m25p16.c: 161: _delay((unsigned long)((1)*(4000000/4000.0)));
  3199  07DC  30C7               	movlw	199
  3200  07DD  1683               	bsf	3,5	;RP0=1, select bank1
  3201  07DE  1303               	bcf	3,6	;RP1=0, select bank1
  3202  07DF  00AB               	movwf	??_read_write_flash_ram^(0+128)
  3203  07E0                     u3227:	
  3204  07E0  2FE1               	nop2
  3205  07E1  0BAB               	decfsz	??_read_write_flash_ram^(0+128),f
  3206  07E2  2FE0               	goto	u3227
  3207  07E3  2FE4               	nop2
  3208  07E4  2FD4               	goto	l3617
  3209  07E5                     __end_of_read_write_flash_ram:	
  3210                           
  3211                           	psect	text8
  3212  1673                     __ptext8:	
  3213 ;; *************** function _read_ram_status *****************
  3214 ;; Defined at:
  3215 ;;		line 57 in file "m25p16.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;		None
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  status          1    4[BANK1 ] unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      unsigned char 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0, pclath, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3229 ;;      Params:         0       0       0       0       0
  3230 ;;      Locals:         0       0       1       0       0
  3231 ;;      Temps:          0       0       1       0       0
  3232 ;;      Totals:         0       0       2       0       0
  3233 ;;Total ram usage:        2 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    8
  3236 ;; This function calls:
  3237 ;;		_ReadSPI
  3238 ;;		_WriteSPI
  3239 ;; This function is called by:
  3240 ;;		_main
  3241 ;;		_ReceivedPacketHandler
  3242 ;;		_ram_bulk_erase
  3243 ;;		_read_write_flash_ram
  3244 ;;		_write_ram_status
  3245 ;;		_ram_sector_erase
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           
  3250                           ;psect for function _read_ram_status
  3251  1673                     _read_ram_status:	
  3252                           
  3253                           ;m25p16.c: 59: unsigned char status;
  3254                           ;m25p16.c: 60: RD3 = 0;
  3255                           
  3256                           ;incstack = 0
  3257 ;; hardware stack exceeded
  3258                           ; Regs used in _read_ram_status: [wreg+status,2+status,0+pclath+cstack]
  3259  1673  1283               	bcf	3,5	;RP0=0, select bank0
  3260  1674  1303               	bcf	3,6	;RP1=0, select bank0
  3261  1675  1188               	bcf	8,3	;volatile
  3262                           
  3263                           ;m25p16.c: 61: WriteSPI(0x05);
  3264  1676  3005               	movlw	5
  3265  1677  160A  118A  265B  160A  118A  	fcall	_WriteSPI
  3266                           
  3267                           ;m25p16.c: 62: status = ReadSPI();
  3268  167C  160A  118A  25B1   	fcall	_ReadSPI
  3269  167F  1683               	bsf	3,5	;RP0=1, select bank1
  3270  1680  1303               	bcf	3,6	;RP1=0, select bank1
  3271  1681  00A3               	movwf	??_read_ram_status^(0+128)
  3272  1682  0823               	movf	??_read_ram_status^(0+128),w
  3273  1683  00A4               	movwf	read_ram_status@status^(0+128)
  3274                           
  3275                           ;m25p16.c: 63: RD3 = 1;
  3276  1684  1283               	bcf	3,5	;RP0=0, select bank0
  3277  1685  1303               	bcf	3,6	;RP1=0, select bank0
  3278  1686  1588               	bsf	8,3	;volatile
  3279                           
  3280                           ;m25p16.c: 64: return status;
  3281  1687  1683               	bsf	3,5	;RP0=1, select bank1
  3282  1688  1303               	bcf	3,6	;RP1=0, select bank1
  3283  1689  0824               	movf	read_ram_status@status^(0+128),w
  3284  168A  0008               	return
  3285  168B                     __end_of_read_ram_status:	
  3286                           
  3287                           	psect	text9
  3288  086F                     __ptext9:	
  3289 ;; *************** function _ReadMemoryAdress *****************
  3290 ;; Defined at:
  3291 ;;		line 956 in file "functions.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;  var3            1    wreg     PTR unsigned char 
  3294 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), 
  3295 ;;  var2            1    2[BANK1 ] PTR unsigned char 
  3296 ;;		 -> SendMemoryData@addr2(1), saveDataToFlash@addr2(1), 
  3297 ;;  var1            1    3[BANK1 ] PTR unsigned char 
  3298 ;;		 -> SendMemoryData@addr1(1), saveDataToFlash@addr1(1), 
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;  var3            1    5[BANK1 ] PTR unsigned char 
  3301 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), 
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/0
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3311 ;;      Params:         0       0       2       0       0
  3312 ;;      Locals:         0       0       1       0       0
  3313 ;;      Temps:          0       0       1       0       0
  3314 ;;      Totals:         0       0       4       0       0
  3315 ;;Total ram usage:        4 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    7
  3318 ;; This function calls:
  3319 ;;		_eeprom_read
  3320 ;; This function is called by:
  3321 ;;		_SendMemoryData
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           
  3326                           ;psect for function _ReadMemoryAdress
  3327  086F                     _ReadMemoryAdress:	
  3328                           
  3329                           ;incstack = 0
  3330 ;; hardware stack exceeded
  3331                           ; Regs used in _ReadMemoryAdress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3332                           ;ReadMemoryAdress@var3 stored from wreg
  3333  086F  1683               	bsf	3,5	;RP0=1, select bank1
  3334  0870  1303               	bcf	3,6	;RP1=0, select bank1
  3335  0871  00A5               	movwf	ReadMemoryAdress@var3^(0+128)
  3336                           
  3337                           ;functions.c: 958: *var3 = eeprom_read(1);
  3338  0872  3001               	movlw	1
  3339  0873  160A  118A  2769  120A  158A  	fcall	_eeprom_read
  3340  0878  1683               	bsf	3,5	;RP0=1, select bank1
  3341  0879  1303               	bcf	3,6	;RP1=0, select bank1
  3342  087A  00A4               	movwf	??_ReadMemoryAdress^(0+128)
  3343  087B  0825               	movf	ReadMemoryAdress@var3^(0+128),w
  3344  087C  0084               	movwf	4
  3345  087D  0824               	movf	??_ReadMemoryAdress^(0+128),w
  3346  087E  1383               	bcf	3,7	;select IRP bank0
  3347  087F  0080               	movwf	0
  3348                           
  3349                           ;functions.c: 959: *var2 = eeprom_read(2);
  3350  0880  3002               	movlw	2
  3351  0881  160A  118A  2769  120A  158A  	fcall	_eeprom_read
  3352  0886  1683               	bsf	3,5	;RP0=1, select bank1
  3353  0887  1303               	bcf	3,6	;RP1=0, select bank1
  3354  0888  00A4               	movwf	??_ReadMemoryAdress^(0+128)
  3355  0889  0822               	movf	ReadMemoryAdress@var2^(0+128),w
  3356  088A  0084               	movwf	4
  3357  088B  0824               	movf	??_ReadMemoryAdress^(0+128),w
  3358  088C  1383               	bcf	3,7	;select IRP bank0
  3359  088D  0080               	movwf	0
  3360                           
  3361                           ;functions.c: 960: *var1 = eeprom_read(3);
  3362  088E  3003               	movlw	3
  3363  088F  160A  118A  2769   	fcall	_eeprom_read
  3364  0892  1683               	bsf	3,5	;RP0=1, select bank1
  3365  0893  1303               	bcf	3,6	;RP1=0, select bank1
  3366  0894  00A4               	movwf	??_ReadMemoryAdress^(0+128)
  3367  0895  0823               	movf	ReadMemoryAdress@var1^(0+128),w
  3368  0896  0084               	movwf	4
  3369  0897  0824               	movf	??_ReadMemoryAdress^(0+128),w
  3370  0898  1383               	bcf	3,7	;select IRP bank0
  3371  0899  0080               	movwf	0
  3372  089A  0008               	return
  3373  089B                     __end_of_ReadMemoryAdress:	
  3374                           
  3375                           	psect	text10
  3376  168B                     __ptext10:	
  3377 ;; *************** function _ResetMemoryAdress *****************
  3378 ;; Defined at:
  3379 ;;		line 1020 in file "functions.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, status,2, status,0, pclath, cstack
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3393 ;;      Params:         0       0       0       0       0
  3394 ;;      Locals:         0       0       0       0       0
  3395 ;;      Temps:          0       0       0       0       0
  3396 ;;      Totals:         0       0       0       0       0
  3397 ;;Total ram usage:        0 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:    7
  3400 ;; This function calls:
  3401 ;;		_eeprom_write
  3402 ;; This function is called by:
  3403 ;;		_main
  3404 ;;		_ReceivedPacketHandler
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           
  3409                           ;psect for function _ResetMemoryAdress
  3410  168B                     _ResetMemoryAdress:	
  3411                           
  3412                           ;functions.c: 1022: eeprom_write(3,0);
  3413                           
  3414                           ;incstack = 0
  3415 ;; hardware stack exceeded
  3416                           ; Regs used in _ResetMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  3417  168B  1683               	bsf	3,5	;RP0=1, select bank1
  3418  168C  1303               	bcf	3,6	;RP1=0, select bank1
  3419  168D  01A0               	clrf	eeprom_write@value^(0+128)
  3420  168E  3003               	movlw	3
  3421  168F  120A  158A  20C9  160A  118A  	fcall	_eeprom_write
  3422                           
  3423                           ;functions.c: 1023: eeprom_write(2,0);
  3424  1694  1683               	bsf	3,5	;RP0=1, select bank1
  3425  1695  1303               	bcf	3,6	;RP1=0, select bank1
  3426  1696  01A0               	clrf	eeprom_write@value^(0+128)
  3427  1697  3002               	movlw	2
  3428  1698  120A  158A  20C9  160A  118A  	fcall	_eeprom_write
  3429                           
  3430                           ;functions.c: 1024: eeprom_write(1,0);
  3431  169D  1683               	bsf	3,5	;RP0=1, select bank1
  3432  169E  1303               	bcf	3,6	;RP1=0, select bank1
  3433  169F  01A0               	clrf	eeprom_write@value^(0+128)
  3434  16A0  3001               	movlw	1
  3435  16A1  120A  158A  20C9   	fcall	_eeprom_write
  3436  16A4  0008               	return
  3437  16A5                     __end_of_ResetMemoryAdress:	
  3438                           
  3439                           	psect	text11
  3440  08C9                     __ptext11:	
  3441 ;; *************** function _eeprom_write *****************
  3442 ;; Defined at:
  3443 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eewrite.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  addr            1    wreg     unsigned char 
  3446 ;;  value           1    0[BANK1 ] unsigned char 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  addr            1    2[BANK1 ] unsigned char 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      void 
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, status,0
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3458 ;;      Params:         0       0       1       0       0
  3459 ;;      Locals:         0       0       1       0       0
  3460 ;;      Temps:          0       0       1       0       0
  3461 ;;      Totals:         0       0       3       0       0
  3462 ;;Total ram usage:        3 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    6
  3465 ;; This function calls:
  3466 ;;		Nothing
  3467 ;; This function is called by:
  3468 ;;		_ResetMemoryAdress
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           
  3473                           ;psect for function _eeprom_write
  3474  08C9                     _eeprom_write:	
  3475                           
  3476                           ;incstack = 0
  3477 ;; hardware stack exceeded
  3478                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3479                           ;eeprom_write@addr stored from wreg
  3480  08C9  1683               	bsf	3,5	;RP0=1, select bank1
  3481  08CA  1303               	bcf	3,6	;RP1=0, select bank1
  3482  08CB  00A2               	movwf	eeprom_write@addr^(0+128)
  3483  08CC                     l685:	
  3484  08CC  1683               	bsf	3,5	;RP0=1, select bank3
  3485  08CD  1703               	bsf	3,6	;RP1=1, select bank3
  3486  08CE  188C               	btfsc	12,1	;volsfr
  3487  08CF  28CC               	goto	l685
  3488  08D0  1683               	bsf	3,5	;RP0=1, select bank1
  3489  08D1  1303               	bcf	3,6	;RP1=0, select bank1
  3490  08D2  0822               	movf	eeprom_write@addr^(0+128),w
  3491  08D3  1283               	bcf	3,5	;RP0=0, select bank2
  3492  08D4  1703               	bsf	3,6	;RP1=1, select bank2
  3493  08D5  008D               	movwf	13	;volatile
  3494  08D6  1683               	bsf	3,5	;RP0=1, select bank1
  3495  08D7  1303               	bcf	3,6	;RP1=0, select bank1
  3496  08D8  0820               	movf	eeprom_write@value^(0+128),w
  3497  08D9  1283               	bcf	3,5	;RP0=0, select bank2
  3498  08DA  1703               	bsf	3,6	;RP1=1, select bank2
  3499  08DB  008C               	movwf	12	;volatile
  3500  08DC  303F               	movlw	63
  3501  08DD  1683               	bsf	3,5	;RP0=1, select bank1
  3502  08DE  1303               	bcf	3,6	;RP1=0, select bank1
  3503  08DF  00A1               	movwf	??_eeprom_write^(0+128)
  3504  08E0  0821               	movf	??_eeprom_write^(0+128),w
  3505  08E1  1683               	bsf	3,5	;RP0=1, select bank3
  3506  08E2  1703               	bsf	3,6	;RP1=1, select bank3
  3507  08E3  058C               	andwf	12,f	;volsfr
  3508  08E4  1283               	bcf	3,5	;RP0=0, select bank0
  3509  08E5  1303               	bcf	3,6	;RP1=0, select bank0
  3510  08E6  1003               	bcf	3,0	;volatile
  3511  08E7  1B8B               	btfsc	11,7	;volatile
  3512  08E8  1403               	bsf	3,0	;volatile
  3513  08E9  138B               	bcf	11,7	;volatile
  3514  08EA  1683               	bsf	3,5	;RP0=1, select bank3
  3515  08EB  1703               	bsf	3,6	;RP1=1, select bank3
  3516  08EC  150C               	bsf	12,2	;volsfr
  3517  08ED  3055               	movlw	85
  3518  08EE  008D               	movwf	13	;volsfr
  3519  08EF  30AA               	movlw	170
  3520  08F0  008D               	movwf	13	;volsfr
  3521  08F1  148C               	bsf	12,1	;volsfr
  3522  08F2  110C               	bcf	12,2	;volsfr
  3523  08F3  1283               	bcf	3,5	;RP0=0, select bank0
  3524  08F4  1303               	bcf	3,6	;RP1=0, select bank0
  3525  08F5  1C03               	btfss	3,0	;volatile
  3526  08F6  0008               	return
  3527  08F7  178B               	bsf	11,7	;volatile
  3528  08F8  0008               	return
  3529  08F9                     __end_of_eeprom_write:	
  3530                           
  3531                           	psect	text12
  3532  15CA                     __ptext12:	
  3533 ;; *************** function _OperationMode *****************
  3534 ;; Defined at:
  3535 ;;		line 932 in file "functions.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;		None
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  bracketStatu    1    1[BANK1 ] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      unsigned char 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3549 ;;      Params:         0       0       0       0       0
  3550 ;;      Locals:         0       0       1       0       0
  3551 ;;      Temps:          0       0       1       0       0
  3552 ;;      Totals:         0       0       2       0       0
  3553 ;;Total ram usage:        2 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    6
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_main
  3560 ;;		_ReceivedPacketHandler
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           
  3565                           ;psect for function _OperationMode
  3566  15CA                     _OperationMode:	
  3567                           
  3568                           ;functions.c: 934: unsigned char bracketStatus;
  3569                           ;functions.c: 935: bracketStatus = ((~PORTB) & 0b00000111) ;
  3570                           
  3571                           ;incstack = 0
  3572 ;; hardware stack exceeded
  3573                           ; Regs used in _OperationMode: [wreg+status,2]
  3574  15CA  1283               	bcf	3,5	;RP0=0, select bank0
  3575  15CB  1303               	bcf	3,6	;RP1=0, select bank0
  3576  15CC  0906               	comf	6,w	;volatile
  3577  15CD  3907               	andlw	7
  3578  15CE  1683               	bsf	3,5	;RP0=1, select bank1
  3579  15CF  1303               	bcf	3,6	;RP1=0, select bank1
  3580  15D0  00A0               	movwf	??_OperationMode^(0+128)
  3581  15D1  0820               	movf	??_OperationMode^(0+128),w
  3582  15D2  00A1               	movwf	OperationMode@bracketStatus^(0+128)
  3583                           
  3584                           ;functions.c: 937: return 6;
  3585  15D3  3006               	movlw	6
  3586  15D4  0008               	return
  3587  15D5                     __end_of_OperationMode:	
  3588                           
  3589                           	psect	text13
  3590  1635                     __ptext13:	
  3591 ;; *************** function _ReadFIFO *****************
  3592 ;; Defined at:
  3593 ;;		line 745 in file "functions.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;		None
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;  value           1    4[BANK1 ] unsigned char 
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  1    wreg      unsigned char 
  3600 ;; Registers used:
  3601 ;;		wreg, status,2, status,0, pclath, cstack
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3607 ;;      Params:         0       0       0       0       0
  3608 ;;      Locals:         0       0       1       0       0
  3609 ;;      Temps:          0       0       1       0       0
  3610 ;;      Totals:         0       0       2       0       0
  3611 ;;Total ram usage:        2 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; Hardware stack levels required when called:    8
  3614 ;; This function calls:
  3615 ;;		_ReadSPI
  3616 ;; This function is called by:
  3617 ;;		_TransiverReadFIFO
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           
  3622                           ;psect for function _ReadFIFO
  3623  1635                     _ReadFIFO:	
  3624                           
  3625                           ;functions.c: 747: BYTE value;
  3626                           ;functions.c: 748: RA5 = 0;
  3627                           
  3628                           ;incstack = 0
  3629 ;; hardware stack exceeded
  3630                           ; Regs used in _ReadFIFO: [wreg+status,2+status,0+pclath+cstack]
  3631  1635  1283               	bcf	3,5	;RP0=0, select bank0
  3632  1636  1303               	bcf	3,6	;RP1=0, select bank0
  3633  1637  1285               	bcf	5,5	;volatile
  3634                           
  3635                           ;functions.c: 749: value = ReadSPI();
  3636  1638  160A  118A  25B1   	fcall	_ReadSPI
  3637  163B  1683               	bsf	3,5	;RP0=1, select bank1
  3638  163C  1303               	bcf	3,6	;RP1=0, select bank1
  3639  163D  00A3               	movwf	??_ReadFIFO^(0+128)
  3640  163E  0823               	movf	??_ReadFIFO^(0+128),w
  3641  163F  00A4               	movwf	ReadFIFO@value^(0+128)
  3642                           
  3643                           ;functions.c: 750: RA5 = 1;
  3644  1640  1283               	bcf	3,5	;RP0=0, select bank0
  3645  1641  1303               	bcf	3,6	;RP1=0, select bank0
  3646  1642  1685               	bsf	5,5	;volatile
  3647                           
  3648                           ;functions.c: 751: return value;
  3649  1643  1683               	bsf	3,5	;RP0=1, select bank1
  3650  1644  1303               	bcf	3,6	;RP1=0, select bank1
  3651  1645  0824               	movf	ReadFIFO@value^(0+128),w
  3652  1646  0008               	return
  3653  1647                     __end_of_ReadFIFO:	
  3654                           
  3655                           	psect	text14
  3656  0F16                     __ptext14:	
  3657 ;; *************** function _TransiverInit *****************
  3658 ;; Defined at:
  3659 ;;		line 510 in file "functions.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;		None
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;		None
  3664 ;; Return value:  Size  Location     Type
  3665 ;;                  1    wreg      void 
  3666 ;; Registers used:
  3667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3673 ;;      Params:         0       0       0       0       0
  3674 ;;      Locals:         0       0       0       0       0
  3675 ;;      Temps:          0       0       1       0       0
  3676 ;;      Totals:         0       0       1       0       0
  3677 ;;Total ram usage:        1 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:   11
  3680 ;; This function calls:
  3681 ;;		_Blink
  3682 ;;		_FindChannel
  3683 ;;		_RegisterRead
  3684 ;;		_RegisterSet
  3685 ;;		_SetRFMode
  3686 ;; This function is called by:
  3687 ;;		_main
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           
  3692                           ;psect for function _TransiverInit
  3693  0F16                     _TransiverInit:	
  3694                           
  3695                           ;functions.c: 513: RegisterSet(0x00, 0x30);
  3696                           
  3697                           ;incstack = 0
  3698 ;; hardware stack exceeded
  3699                           ; Regs used in _TransiverInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3700  0F16  3030               	movlw	48
  3701  0F17  1683               	bsf	3,5	;RP0=1, select bank1
  3702  0F18  1303               	bcf	3,6	;RP1=0, select bank1
  3703  0F19  00B5               	movwf	??_TransiverInit^(0+128)
  3704  0F1A  0835               	movf	??_TransiverInit^(0+128),w
  3705  0F1B  00A7               	movwf	RegisterSet@value^(0+128)
  3706  0F1C  3000               	movlw	0
  3707  0F1D  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3708                           
  3709                           ;functions.c: 514: RegisterSet(0x01,(0xA8));
  3710  0F22  30A8               	movlw	168
  3711  0F23  1683               	bsf	3,5	;RP0=1, select bank1
  3712  0F24  1303               	bcf	3,6	;RP1=0, select bank1
  3713  0F25  00B5               	movwf	??_TransiverInit^(0+128)
  3714  0F26  0835               	movf	??_TransiverInit^(0+128),w
  3715  0F27  00A7               	movwf	RegisterSet@value^(0+128)
  3716  0F28  3001               	movlw	1
  3717  0F29  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3718                           
  3719                           ;functions.c: 515: RegisterSet(0x02, 0x09);
  3720  0F2E  3009               	movlw	9
  3721  0F2F  1683               	bsf	3,5	;RP0=1, select bank1
  3722  0F30  1303               	bcf	3,6	;RP1=0, select bank1
  3723  0F31  00B5               	movwf	??_TransiverInit^(0+128)
  3724  0F32  0835               	movf	??_TransiverInit^(0+128),w
  3725  0F33  00A7               	movwf	RegisterSet@value^(0+128)
  3726  0F34  3002               	movlw	2
  3727  0F35  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3728                           
  3729                           ;functions.c: 516: RegisterSet(0x03, 0x07);
  3730  0F3A  3007               	movlw	7
  3731  0F3B  1683               	bsf	3,5	;RP0=1, select bank1
  3732  0F3C  1303               	bcf	3,6	;RP1=0, select bank1
  3733  0F3D  00B5               	movwf	??_TransiverInit^(0+128)
  3734  0F3E  0835               	movf	??_TransiverInit^(0+128),w
  3735  0F3F  00A7               	movwf	RegisterSet@value^(0+128)
  3736  0F40  3003               	movlw	3
  3737  0F41  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3738                           
  3739                           ;functions.c: 517: RegisterSet(0x05,(0x0A));
  3740  0F46  300A               	movlw	10
  3741  0F47  1683               	bsf	3,5	;RP0=1, select bank1
  3742  0F48  1303               	bcf	3,6	;RP1=0, select bank1
  3743  0F49  00B5               	movwf	??_TransiverInit^(0+128)
  3744  0F4A  0835               	movf	??_TransiverInit^(0+128),w
  3745  0F4B  00A7               	movwf	RegisterSet@value^(0+128)
  3746  0F4C  3005               	movlw	5
  3747  0F4D  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3748                           
  3749                           ;functions.c: 518: RegisterSet(0x0D,(0x00|0xB0|0x09));
  3750  0F52  30B9               	movlw	185
  3751  0F53  1683               	bsf	3,5	;RP0=1, select bank1
  3752  0F54  1303               	bcf	3,6	;RP1=0, select bank1
  3753  0F55  00B5               	movwf	??_TransiverInit^(0+128)
  3754  0F56  0835               	movf	??_TransiverInit^(0+128),w
  3755  0F57  00A7               	movwf	RegisterSet@value^(0+128)
  3756  0F58  300D               	movlw	13
  3757  0F59  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3758                           
  3759                           ;functions.c: 519: RegisterSet(0x0E,(0x01|0x10|0x01));
  3760  0F5E  3011               	movlw	17
  3761  0F5F  1683               	bsf	3,5	;RP0=1, select bank1
  3762  0F60  1303               	bcf	3,6	;RP1=0, select bank1
  3763  0F61  00B5               	movwf	??_TransiverInit^(0+128)
  3764  0F62  0835               	movf	??_TransiverInit^(0+128),w
  3765  0F63  00A7               	movwf	RegisterSet@value^(0+128)
  3766  0F64  300E               	movlw	14
  3767  0F65  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3768                           
  3769                           ;functions.c: 520: RegisterSet(0x10, 0xA3);
  3770  0F6A  30A3               	movlw	163
  3771  0F6B  1683               	bsf	3,5	;RP0=1, select bank1
  3772  0F6C  1303               	bcf	3,6	;RP1=0, select bank1
  3773  0F6D  00B5               	movwf	??_TransiverInit^(0+128)
  3774  0F6E  0835               	movf	??_TransiverInit^(0+128),w
  3775  0F6F  00A7               	movwf	RegisterSet@value^(0+128)
  3776  0F70  3010               	movlw	16
  3777  0F71  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3778                           
  3779                           ;functions.c: 521: RegisterSet(0x12,(0x18|0x20|0x06));
  3780  0F76  303E               	movlw	62
  3781  0F77  1683               	bsf	3,5	;RP0=1, select bank1
  3782  0F78  1303               	bcf	3,6	;RP1=0, select bank1
  3783  0F79  00B5               	movwf	??_TransiverInit^(0+128)
  3784  0F7A  0835               	movf	??_TransiverInit^(0+128),w
  3785  0F7B  00A7               	movwf	RegisterSet@value^(0+128)
  3786  0F7C  3012               	movlw	18
  3787  0F7D  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3788                           
  3789                           ;functions.c: 522: RegisterSet(0x16,('S'));
  3790  0F82  3053               	movlw	83
  3791  0F83  1683               	bsf	3,5	;RP0=1, select bank1
  3792  0F84  1303               	bcf	3,6	;RP1=0, select bank1
  3793  0F85  00B5               	movwf	??_TransiverInit^(0+128)
  3794  0F86  0835               	movf	??_TransiverInit^(0+128),w
  3795  0F87  00A7               	movwf	RegisterSet@value^(0+128)
  3796  0F88  3016               	movlw	22
  3797  0F89  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3798                           
  3799                           ;functions.c: 523: RegisterSet(0x17,('Y'));
  3800  0F8E  3059               	movlw	89
  3801  0F8F  1683               	bsf	3,5	;RP0=1, select bank1
  3802  0F90  1303               	bcf	3,6	;RP1=0, select bank1
  3803  0F91  00B5               	movwf	??_TransiverInit^(0+128)
  3804  0F92  0835               	movf	??_TransiverInit^(0+128),w
  3805  0F93  00A7               	movwf	RegisterSet@value^(0+128)
  3806  0F94  3017               	movlw	23
  3807  0F95  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3808                           
  3809                           ;functions.c: 524: RegisterSet(0x18,('N'));
  3810  0F9A  304E               	movlw	78
  3811  0F9B  1683               	bsf	3,5	;RP0=1, select bank1
  3812  0F9C  1303               	bcf	3,6	;RP1=0, select bank1
  3813  0F9D  00B5               	movwf	??_TransiverInit^(0+128)
  3814  0F9E  0835               	movf	??_TransiverInit^(0+128),w
  3815  0F9F  00A7               	movwf	RegisterSet@value^(0+128)
  3816  0FA0  3018               	movlw	24
  3817  0FA1  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3818                           
  3819                           ;functions.c: 525: RegisterSet(0x19,('C'));
  3820  0FA6  3043               	movlw	67
  3821  0FA7  1683               	bsf	3,5	;RP0=1, select bank1
  3822  0FA8  1303               	bcf	3,6	;RP1=0, select bank1
  3823  0FA9  00B5               	movwf	??_TransiverInit^(0+128)
  3824  0FAA  0835               	movf	??_TransiverInit^(0+128),w
  3825  0FAB  00A7               	movwf	RegisterSet@value^(0+128)
  3826  0FAC  3019               	movlw	25
  3827  0FAD  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3828                           
  3829                           ;functions.c: 526: RegisterSet(0x1A, 0x72);
  3830  0FB2  3072               	movlw	114
  3831  0FB3  1683               	bsf	3,5	;RP0=1, select bank1
  3832  0FB4  1303               	bcf	3,6	;RP1=0, select bank1
  3833  0FB5  00B5               	movwf	??_TransiverInit^(0+128)
  3834  0FB6  0835               	movf	??_TransiverInit^(0+128),w
  3835  0FB7  00A7               	movwf	RegisterSet@value^(0+128)
  3836  0FB8  301A               	movlw	26
  3837  0FB9  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3838                           
  3839                           ;functions.c: 527: RegisterSet(0x1B, 0x3C);
  3840  0FBE  303C               	movlw	60
  3841  0FBF  1683               	bsf	3,5	;RP0=1, select bank1
  3842  0FC0  1303               	bcf	3,6	;RP1=0, select bank1
  3843  0FC1  00B5               	movwf	??_TransiverInit^(0+128)
  3844  0FC2  0835               	movf	??_TransiverInit^(0+128),w
  3845  0FC3  00A7               	movwf	RegisterSet@value^(0+128)
  3846  0FC4  301B               	movlw	27
  3847  0FC5  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3848                           
  3849                           ;functions.c: 528: RegisterSet(0x1F, 0x80);
  3850  0FCA  3080               	movlw	128
  3851  0FCB  1683               	bsf	3,5	;RP0=1, select bank1
  3852  0FCC  1303               	bcf	3,6	;RP1=0, select bank1
  3853  0FCD  00B5               	movwf	??_TransiverInit^(0+128)
  3854  0FCE  0835               	movf	??_TransiverInit^(0+128),w
  3855  0FCF  00A7               	movwf	RegisterSet@value^(0+128)
  3856  0FD0  301F               	movlw	31
  3857  0FD1  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3858                           
  3859                           ;functions.c: 529: RegisterSet(0x00, (RegisterRead(0x00)|0x01));
  3860  0FD6  3000               	movlw	0
  3861  0FD7  160A  118A  278D  120A  158A  	fcall	_RegisterRead
  3862  0FDC  3801               	iorlw	1
  3863  0FDD  1683               	bsf	3,5	;RP0=1, select bank1
  3864  0FDE  1303               	bcf	3,6	;RP1=0, select bank1
  3865  0FDF  00B5               	movwf	??_TransiverInit^(0+128)
  3866  0FE0  0835               	movf	??_TransiverInit^(0+128),w
  3867  0FE1  00A7               	movwf	RegisterSet@value^(0+128)
  3868  0FE2  3000               	movlw	0
  3869  0FE3  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  3870                           
  3871                           ;functions.c: 531: if(FindChannel() == 1)
  3872  0FE8  120A  118A  2661  120A  158A  	fcall	_FindChannel
  3873  0FED  3A01               	xorlw	1
  3874  0FEE  1D03               	skipz
  3875  0FEF  2FFB               	goto	l3931
  3876                           
  3877                           ;functions.c: 532: Blink(1);
  3878  0FF0  3001               	movlw	1
  3879  0FF1  1683               	bsf	3,5	;RP0=1, select bank1
  3880  0FF2  1303               	bcf	3,6	;RP1=0, select bank1
  3881  0FF3  00A6               	movwf	Blink@n^(0+128)
  3882  0FF4  3000               	movlw	0
  3883  0FF5  00A7               	movwf	(Blink@n^(0+128)+1)
  3884  0FF6  120A  158A  212C  120A  158A  	fcall	_Blink
  3885  0FFB                     l3931:	
  3886                           
  3887                           ;functions.c: 533: SetRFMode(0x00);
  3888  0FFB  3000               	movlw	0
  3889  0FFC  120A  158A  236D   	fcall	_SetRFMode
  3890  0FFF  0008               	return
  3891  1000                     __end_of_TransiverInit:	
  3892                           
  3893                           	psect	text15
  3894  092C                     __ptext15:	
  3895 ;; *************** function _Blink *****************
  3896 ;; Defined at:
  3897 ;;		line 658 in file "functions.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  n               2    6[BANK1 ] int 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;  i               2    9[BANK1 ] int 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      void 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0, pclath, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3911 ;;      Params:         0       0       2       0       0
  3912 ;;      Locals:         0       0       2       0       0
  3913 ;;      Temps:          0       0       1       0       0
  3914 ;;      Totals:         0       0       5       0       0
  3915 ;;Total ram usage:        5 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    7
  3918 ;; This function calls:
  3919 ;;		_DelayDs
  3920 ;; This function is called by:
  3921 ;;		_TransiverInit
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           
  3926                           ;psect for function _Blink
  3927  092C                     _Blink:	
  3928                           
  3929                           ;functions.c: 660: for(int i = 1;i<=n;i++)
  3930                           
  3931                           ;incstack = 0
  3932 ;; hardware stack exceeded
  3933                           ; Regs used in _Blink: [wreg+status,2+status,0+pclath+cstack]
  3934  092C  3001               	movlw	1
  3935  092D  1683               	bsf	3,5	;RP0=1, select bank1
  3936  092E  1303               	bcf	3,6	;RP1=0, select bank1
  3937  092F  00A9               	movwf	Blink@i^(0+128)
  3938  0930  3000               	movlw	0
  3939  0931  00AA               	movwf	(Blink@i^(0+128)+1)
  3940  0932                     l3833:	
  3941  0932  0827               	movf	(Blink@n+1)^(0+128),w
  3942  0933  3A80               	xorlw	128
  3943  0934  00A8               	movwf	??_Blink^(0+128)
  3944  0935  082A               	movf	(Blink@i+1)^(0+128),w
  3945  0936  3A80               	xorlw	128
  3946  0937  0228               	subwf	??_Blink^(0+128),w
  3947  0938  1D03               	skipz
  3948  0939  293C               	goto	u2875
  3949  093A  0829               	movf	Blink@i^(0+128),w
  3950  093B  0226               	subwf	Blink@n^(0+128),w
  3951  093C                     u2875:	
  3952  093C  1C03               	btfss	3,0
  3953  093D  0008               	return
  3954                           
  3955                           ;functions.c: 661: {
  3956                           ;functions.c: 662: RC1 = 1;
  3957  093E  1283               	bcf	3,5	;RP0=0, select bank0
  3958  093F  1303               	bcf	3,6	;RP1=0, select bank0
  3959  0940  1487               	bsf	7,1	;volatile
  3960                           
  3961                           ;functions.c: 663: DelayDs(2);
  3962  0941  3002               	movlw	2
  3963  0942  1683               	bsf	3,5	;RP0=1, select bank1
  3964  0943  1303               	bcf	3,6	;RP1=0, select bank1
  3965  0944  00A0               	movwf	DelayDs@cnt^(0+128)
  3966  0945  3000               	movlw	0
  3967  0946  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  3968  0947  160A  118A  2722  120A  158A  	fcall	_DelayDs
  3969                           
  3970                           ;functions.c: 664: RC1 = 0;
  3971  094C  1283               	bcf	3,5	;RP0=0, select bank0
  3972  094D  1303               	bcf	3,6	;RP1=0, select bank0
  3973  094E  1087               	bcf	7,1	;volatile
  3974                           
  3975                           ;functions.c: 665: DelayDs(6);
  3976  094F  3006               	movlw	6
  3977  0950  1683               	bsf	3,5	;RP0=1, select bank1
  3978  0951  1303               	bcf	3,6	;RP1=0, select bank1
  3979  0952  00A0               	movwf	DelayDs@cnt^(0+128)
  3980  0953  3000               	movlw	0
  3981  0954  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  3982  0955  160A  118A  2722  120A  158A  	fcall	_DelayDs
  3983  095A  3001               	movlw	1
  3984  095B  1683               	bsf	3,5	;RP0=1, select bank1
  3985  095C  1303               	bcf	3,6	;RP1=0, select bank1
  3986  095D  07A9               	addwf	Blink@i^(0+128),f
  3987  095E  1803               	skipnc
  3988  095F  0AAA               	incf	(Blink@i+1)^(0+128),f
  3989  0960  3000               	movlw	0
  3990  0961  07AA               	addwf	(Blink@i+1)^(0+128),f
  3991  0962  2932               	goto	l3833
  3992  0963                     __end_of_Blink:	
  3993                           
  3994                           	psect	text16
  3995  0A9C                     __ptext16:	
  3996 ;; *************** function _PICInit *****************
  3997 ;; Defined at:
  3998 ;;		line 398 in file "functions.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;		None
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;		None
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  1    wreg      void 
  4005 ;; Registers used:
  4006 ;;		wreg, status,2, status,0
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4012 ;;      Params:         0       0       0       0       0
  4013 ;;      Locals:         0       0       0       0       0
  4014 ;;      Temps:          0       0       0       0       0
  4015 ;;      Totals:         0       0       0       0       0
  4016 ;;Total ram usage:        0 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    6
  4019 ;; This function calls:
  4020 ;;		Nothing
  4021 ;; This function is called by:
  4022 ;;		_main
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           
  4027                           ;psect for function _PICInit
  4028  0A9C                     _PICInit:	
  4029                           
  4030                           ;functions.c: 402: OSCCONbits.IRCF2 = 1;
  4031                           
  4032                           ;incstack = 0
  4033                           ; Regs used in _PICInit: [wreg+status,2+status,0]
  4034  0A9C  1683               	bsf	3,5	;RP0=1, select bank1
  4035  0A9D  1303               	bcf	3,6	;RP1=0, select bank1
  4036  0A9E  170F               	bsf	15,6	;volatile
  4037                           
  4038                           ;functions.c: 403: OSCCONbits.IRCF1 = 1;
  4039  0A9F  168F               	bsf	15,5	;volatile
  4040                           
  4041                           ;functions.c: 404: OSCCONbits.IRCF0 = 0;
  4042  0AA0  120F               	bcf	15,4	;volatile
  4043                           
  4044                           ;functions.c: 405: OSCCONbits.SCS = 1;
  4045  0AA1  140F               	bsf	15,0	;volatile
  4046                           
  4047                           ;functions.c: 408: PORTA = 0x00;
  4048  0AA2  1283               	bcf	3,5	;RP0=0, select bank0
  4049  0AA3  1303               	bcf	3,6	;RP1=0, select bank0
  4050  0AA4  0185               	clrf	5	;volatile
  4051                           
  4052                           ;functions.c: 409: PORTB = 0x00;
  4053  0AA5  0186               	clrf	6	;volatile
  4054                           
  4055                           ;functions.c: 410: PORTC = 0x00;
  4056  0AA6  0187               	clrf	7	;volatile
  4057                           
  4058                           ;functions.c: 411: PORTD = 0x00;
  4059  0AA7  0188               	clrf	8	;volatile
  4060                           
  4061                           ;functions.c: 412: PORTE = 0x00;
  4062  0AA8  0189               	clrf	9	;volatile
  4063                           
  4064                           ;functions.c: 414: TRISA = 0b00001011;
  4065  0AA9  300B               	movlw	11
  4066  0AAA  1683               	bsf	3,5	;RP0=1, select bank1
  4067  0AAB  1303               	bcf	3,6	;RP1=0, select bank1
  4068  0AAC  0085               	movwf	5	;volatile
  4069                           
  4070                           ;functions.c: 415: TRISB = 0b00111101;
  4071  0AAD  303D               	movlw	61
  4072  0AAE  0086               	movwf	6	;volatile
  4073                           
  4074                           ;functions.c: 416: TRISC = 0b00010000;
  4075  0AAF  3010               	movlw	16
  4076  0AB0  0087               	movwf	7	;volatile
  4077                           
  4078                           ;functions.c: 417: TRISD = 0b00000111;
  4079  0AB1  3007               	movlw	7
  4080  0AB2  0088               	movwf	8	;volatile
  4081                           
  4082                           ;functions.c: 418: TRISE = 0b00000111;
  4083  0AB3  3007               	movlw	7
  4084  0AB4  0089               	movwf	9	;volatile
  4085                           
  4086                           ;functions.c: 420: ANSEL = 0b00000000;
  4087  0AB5  1683               	bsf	3,5	;RP0=1, select bank3
  4088  0AB6  1703               	bsf	3,6	;RP1=1, select bank3
  4089  0AB7  0188               	clrf	8	;volatile
  4090                           
  4091                           ;functions.c: 421: ANSELH = 0b00000000;
  4092  0AB8  0189               	clrf	9	;volatile
  4093                           
  4094                           ;functions.c: 422: ANSELbits.ANS0 = 1;
  4095  0AB9  1408               	bsf	8,0	;volatile
  4096                           
  4097                           ;functions.c: 423: ANSELbits.ANS3 = 1;
  4098  0ABA  1588               	bsf	8,3	;volatile
  4099                           
  4100                           ;functions.c: 424: ANSELbits.ANS5 = 1;
  4101  0ABB  1688               	bsf	8,5	;volatile
  4102                           
  4103                           ;functions.c: 425: ANSELbits.ANS6 = 1;
  4104  0ABC  1708               	bsf	8,6	;volatile
  4105                           
  4106                           ;functions.c: 426: ANSELbits.ANS7 = 1;
  4107  0ABD  1788               	bsf	8,7	;volatile
  4108                           
  4109                           ;functions.c: 427: ANSELHbits.ANS8 = 1;
  4110  0ABE  1409               	bsf	9,0	;volatile
  4111                           
  4112                           ;functions.c: 429: OPTION_REGbits.nRBPU = 0;
  4113  0ABF  1683               	bsf	3,5	;RP0=1, select bank1
  4114  0AC0  1303               	bcf	3,6	;RP1=0, select bank1
  4115  0AC1  1381               	bcf	1,7	;volatile
  4116                           
  4117                           ;functions.c: 430: WPUBbits.WPUB0 = 1;
  4118  0AC2  1415               	bsf	21,0	;volatile
  4119  0AC3                     l388:	
  4120                           ;functions.c: 431: while(!RB0);
  4121                           
  4122  0AC3  1283               	bcf	3,5	;RP0=0, select bank0
  4123  0AC4  1C06               	btfss	6,0	;volatile
  4124  0AC5  2AC3               	goto	l388
  4125                           
  4126                           ;functions.c: 432: WPUBbits.WPUB5 = 1;
  4127  0AC6  1683               	bsf	3,5	;RP0=1, select bank1
  4128  0AC7  1303               	bcf	3,6	;RP1=0, select bank1
  4129  0AC8  1695               	bsf	21,5	;volatile
  4130  0AC9                     l391:	
  4131                           ;functions.c: 433: while(!RB5);
  4132                           
  4133  0AC9  1283               	bcf	3,5	;RP0=0, select bank0
  4134  0ACA  1E86               	btfss	6,5	;volatile
  4135  0ACB  2AC9               	goto	l391
  4136                           
  4137                           ;functions.c: 436: SSPCONbits.SSPM=0x00;
  4138  0ACC  30F0               	movlw	-16
  4139  0ACD  0594               	andwf	20,f	;volatile
  4140                           
  4141                           ;functions.c: 437: SSPCONbits.CKP=0;
  4142  0ACE  1214               	bcf	20,4	;volatile
  4143                           
  4144                           ;functions.c: 438: SSPSTATbits.CKE=1;
  4145  0ACF  1683               	bsf	3,5	;RP0=1, select bank1
  4146  0AD0  1303               	bcf	3,6	;RP1=0, select bank1
  4147  0AD1  1714               	bsf	20,6	;volatile
  4148                           
  4149                           ;functions.c: 439: SSPSTATbits.SMP=0;
  4150  0AD2  1394               	bcf	20,7	;volatile
  4151                           
  4152                           ;functions.c: 440: SSPCONbits.SSPEN=0x01;
  4153  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  4154  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  4155  0AD5  1694               	bsf	20,5	;volatile
  4156                           
  4157                           ;functions.c: 441: SSPIE = 0;
  4158  0AD6  1683               	bsf	3,5	;RP0=1, select bank1
  4159  0AD7  1303               	bcf	3,6	;RP1=0, select bank1
  4160  0AD8  118C               	bcf	12,3	;volatile
  4161                           
  4162                           ;functions.c: 444: RA5 = 1;
  4163  0AD9  1283               	bcf	3,5	;RP0=0, select bank0
  4164  0ADA  1303               	bcf	3,6	;RP1=0, select bank0
  4165  0ADB  1685               	bsf	5,5	;volatile
  4166                           
  4167                           ;functions.c: 445: RA4 = 1;
  4168  0ADC  1605               	bsf	5,4	;volatile
  4169                           
  4170                           ;functions.c: 446: RD4 = 1;
  4171  0ADD  1608               	bsf	8,4	;volatile
  4172                           
  4173                           ;functions.c: 447: RD3 = 1;
  4174  0ADE  1588               	bsf	8,3	;volatile
  4175                           
  4176                           ;functions.c: 449: RB1 = 1;
  4177  0ADF  1486               	bsf	6,1	;volatile
  4178                           
  4179                           ;functions.c: 454: INTCONbits.RBIE = 1;
  4180  0AE0  158B               	bsf	11,3	;volatile
  4181                           
  4182                           ;functions.c: 455: INTCONbits.PEIE = 1;
  4183  0AE1  170B               	bsf	11,6	;volatile
  4184                           
  4185                           ;functions.c: 456: PIE1bits.TMR1IE = 1;
  4186  0AE2  1683               	bsf	3,5	;RP0=1, select bank1
  4187  0AE3  1303               	bcf	3,6	;RP1=0, select bank1
  4188  0AE4  140C               	bsf	12,0	;volatile
  4189                           
  4190                           ;functions.c: 457: INTCONbits.GIE = 1;
  4191  0AE5  178B               	bsf	11,7	;volatile
  4192                           
  4193                           ;functions.c: 458: IOCBbits.IOCB5 = 1;
  4194  0AE6  1696               	bsf	22,5	;volatile
  4195                           
  4196                           ;functions.c: 461: T1CON = 0b00110000;
  4197  0AE7  3030               	movlw	48
  4198  0AE8  1283               	bcf	3,5	;RP0=0, select bank0
  4199  0AE9  1303               	bcf	3,6	;RP1=0, select bank0
  4200  0AEA  0090               	movwf	16	;volatile
  4201                           
  4202                           ;functions.c: 462: TMR1H = 0x0B;
  4203  0AEB  300B               	movlw	11
  4204  0AEC  008F               	movwf	15	;volatile
  4205                           
  4206                           ;functions.c: 463: TMR1L = 0xDB;
  4207  0AED  30DB               	movlw	219
  4208  0AEE  008E               	movwf	14	;volatile
  4209                           
  4210                           ;functions.c: 464: T1CONbits.TMR1ON = 1;
  4211  0AEF  1410               	bsf	16,0	;volatile
  4212                           
  4213                           ;functions.c: 467: ADCON0bits.ADCS0 = 0;
  4214  0AF0  131F               	bcf	31,6	;volatile
  4215                           
  4216                           ;functions.c: 468: ADCON0bits.ADCS1 = 0;
  4217  0AF1  139F               	bcf	31,7	;volatile
  4218                           
  4219                           ;functions.c: 469: ADCON1bits.ADFM = 0;
  4220  0AF2  1683               	bsf	3,5	;RP0=1, select bank1
  4221  0AF3  1303               	bcf	3,6	;RP1=0, select bank1
  4222  0AF4  139F               	bcf	31,7	;volatile
  4223                           
  4224                           ;functions.c: 470: ADCON1bits.VCFG1 = 0;
  4225  0AF5  129F               	bcf	31,5	;volatile
  4226                           
  4227                           ;functions.c: 471: ADCON1bits.VCFG0 = 0;
  4228  0AF6  121F               	bcf	31,4	;volatile
  4229                           
  4230                           ;functions.c: 474: intSecondCounter = 0;
  4231  0AF7  1283               	bcf	3,5	;RP0=0, select bank0
  4232  0AF8  1303               	bcf	3,6	;RP1=0, select bank0
  4233  0AF9  01DE               	clrf	_intSecondCounter
  4234  0AFA  01DF               	clrf	_intSecondCounter+1
  4235                           
  4236                           ;functions.c: 475: intHalfSecondCounter = 0;
  4237  0AFB  01DA               	clrf	_intHalfSecondCounter
  4238  0AFC  01DB               	clrf	_intHalfSecondCounter+1
  4239                           
  4240                           ;functions.c: 476: intMinuteCounter = 0;
  4241  0AFD  01DC               	clrf	_intMinuteCounter
  4242  0AFE  01DD               	clrf	_intMinuteCounter+1
  4243  0AFF  0008               	return
  4244  0B00                     __end_of_PICInit:	
  4245                           
  4246                           	psect	text17
  4247  0830                     __ptext17:	
  4248 ;; *************** function _Mode_5 *****************
  4249 ;; Defined at:
  4250 ;;		line 299 in file "functions.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;		None
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;		None
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      void 
  4257 ;; Registers used:
  4258 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4264 ;;      Params:         0       0       0       0       0
  4265 ;;      Locals:         0       0       0       0       0
  4266 ;;      Temps:          0       0       1       0       0
  4267 ;;      Totals:         0       0       1       0       0
  4268 ;;Total ram usage:        1 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:   12
  4271 ;; This function calls:
  4272 ;;		_LightWithSensController
  4273 ;;		_TransmittPacket
  4274 ;; This function is called by:
  4275 ;;		_main
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           
  4280                           ;psect for function _Mode_5
  4281  0830                     _Mode_5:	
  4282                           
  4283                           ;functions.c: 301: if(!RB5)
  4284                           
  4285                           ;incstack = 0
  4286 ;; hardware stack exceeded
  4287                           ; Regs used in _Mode_5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4288  0830  1283               	bcf	3,5	;RP0=0, select bank0
  4289  0831  1303               	bcf	3,6	;RP1=0, select bank0
  4290  0832  1A86               	btfsc	6,5	;volatile
  4291  0833  2840               	goto	l4007
  4292                           
  4293                           ;functions.c: 302: {
  4294                           ;functions.c: 303: TransmittPacket(2, 2);
  4295  0834  3002               	movlw	2
  4296  0835  1683               	bsf	3,5	;RP0=1, select bank1
  4297  0836  1303               	bcf	3,6	;RP1=0, select bank1
  4298  0837  00BB               	movwf	??_Mode_5^(0+128)
  4299  0838  083B               	movf	??_Mode_5^(0+128),w
  4300  0839  00B5               	movwf	TransmittPacket@value^(0+128)
  4301  083A  3002               	movlw	2
  4302  083B  120A  158A  25A0  120A  158A  	fcall	_TransmittPacket
  4303  0840                     l4007:	
  4304                           
  4305                           ;functions.c: 304: }
  4306                           ;functions.c: 305: LightWithSensController();
  4307  0840  120A  158A  21A5   	fcall	_LightWithSensController
  4308  0843  0008               	return
  4309  0844                     __end_of_Mode_5:	
  4310                           
  4311                           	psect	text18
  4312  1623                     __ptext18:	
  4313 ;; *************** function _Mode_4 *****************
  4314 ;; Defined at:
  4315 ;;		line 287 in file "functions.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4329 ;;      Params:         0       0       0       0       0
  4330 ;;      Locals:         0       0       0       0       0
  4331 ;;      Temps:          0       0       0       0       0
  4332 ;;      Totals:         0       0       0       0       0
  4333 ;;Total ram usage:        0 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:   12
  4336 ;; This function calls:
  4337 ;;		_LightWithSensController
  4338 ;;		_TransmittPacket
  4339 ;; This function is called by:
  4340 ;;		_main
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           
  4345                           ;psect for function _Mode_4
  4346  1623                     _Mode_4:	
  4347                           
  4348                           ;functions.c: 289: if(!RB5)
  4349                           
  4350                           ;incstack = 0
  4351 ;; hardware stack exceeded
  4352                           ; Regs used in _Mode_4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4353  1623  1283               	bcf	3,5	;RP0=0, select bank0
  4354  1624  1303               	bcf	3,6	;RP1=0, select bank0
  4355  1625  1A86               	btfsc	6,5	;volatile
  4356  1626  2E31               	goto	l4001
  4357                           
  4358                           ;functions.c: 290: {
  4359                           ;functions.c: 291: TransmittPacket(2, 1);
  4360  1627  1683               	bsf	3,5	;RP0=1, select bank1
  4361  1628  1303               	bcf	3,6	;RP1=0, select bank1
  4362  1629  01B5               	clrf	TransmittPacket@value^(0+128)
  4363  162A  0AB5               	incf	TransmittPacket@value^(0+128),f
  4364  162B  3002               	movlw	2
  4365  162C  120A  158A  25A0  160A  118A  	fcall	_TransmittPacket
  4366  1631                     l4001:	
  4367                           
  4368                           ;functions.c: 292: }
  4369                           ;functions.c: 293: LightWithSensController();
  4370  1631  120A  158A  21A5   	fcall	_LightWithSensController
  4371  1634  0008               	return
  4372  1635                     __end_of_Mode_4:	
  4373                           
  4374                           	psect	text19
  4375  0DA0                     __ptext19:	
  4376 ;; *************** function _TransmittPacket *****************
  4377 ;; Defined at:
  4378 ;;		line 194 in file "functions.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  topic           1    wreg     unsigned char 
  4381 ;;  value           1   21[BANK1 ] unsigned char 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  topic           1   26[BANK1 ] unsigned char 
  4384 ;;  i               2   24[BANK1 ] int 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4394 ;;      Params:         0       0       1       0       0
  4395 ;;      Locals:         0       0       3       0       0
  4396 ;;      Temps:          0       0       2       0       0
  4397 ;;      Totals:         0       0       6       0       0
  4398 ;;Total ram usage:        6 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:   11
  4401 ;; This function calls:
  4402 ;;		_FindChannel
  4403 ;;		_RegisterRead
  4404 ;;		_RegisterSet
  4405 ;;		_SetRFMode
  4406 ;;		_WriteFIFO
  4407 ;;		_timerFunction
  4408 ;; This function is called by:
  4409 ;;		_ReceivedPacketHandler
  4410 ;;		_Mode_4
  4411 ;;		_Mode_5
  4412 ;;		_SendMemoryData
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           
  4417                           ;psect for function _TransmittPacket
  4418  0DA0                     _TransmittPacket:	
  4419                           
  4420                           ;incstack = 0
  4421 ;; hardware stack exceeded
  4422                           ; Regs used in _TransmittPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4423                           ;TransmittPacket@topic stored from wreg
  4424  0DA0  1683               	bsf	3,5	;RP0=1, select bank1
  4425  0DA1  1303               	bcf	3,6	;RP1=0, select bank1
  4426  0DA2  00BA               	movwf	TransmittPacket@topic^(0+128)
  4427                           
  4428                           ;functions.c: 196: timerFunction(4, 5);
  4429  0DA3  3004               	movlw	4
  4430  0DA4  00A0               	movwf	timerFunction@intTimerNumber^(0+128)
  4431  0DA5  3000               	movlw	0
  4432  0DA6  00A1               	movwf	(timerFunction@intTimerNumber^(0+128)+1)
  4433  0DA7  3005               	movlw	5
  4434  0DA8  00A2               	movwf	timerFunction@intSetSeconds^(0+128)
  4435  0DA9  3000               	movlw	0
  4436  0DAA  00A3               	movwf	(timerFunction@intSetSeconds^(0+128)+1)
  4437  0DAB  160A  118A  2611  120A  158A  	fcall	_timerFunction
  4438                           
  4439                           ;functions.c: 198: int i = 0;
  4440  0DB0  1683               	bsf	3,5	;RP0=1, select bank1
  4441  0DB1  1303               	bcf	3,6	;RP1=0, select bank1
  4442  0DB2  01B8               	clrf	TransmittPacket@i^(0+128)
  4443  0DB3  01B9               	clrf	(TransmittPacket@i+1)^(0+128)
  4444                           
  4445                           ;functions.c: 201: SetRFMode(0x20);
  4446  0DB4  3020               	movlw	32
  4447  0DB5  120A  158A  236D  120A  158A  	fcall	_SetRFMode
  4448                           
  4449                           ;functions.c: 202: _delay((unsigned long)((10)*(4000000/4000.0)));
  4450  0DBA  300D               	movlw	13
  4451  0DBB  1683               	bsf	3,5	;RP0=1, select bank1
  4452  0DBC  1303               	bcf	3,6	;RP1=0, select bank1
  4453  0DBD  00B7               	movwf	(??_TransmittPacket^(0+128)+1)
  4454  0DBE  30FB               	movlw	251
  4455  0DBF  00B6               	movwf	??_TransmittPacket^(0+128)
  4456  0DC0                     u3237:	
  4457  0DC0  0BB6               	decfsz	??_TransmittPacket^(0+128),f
  4458  0DC1  2DC0               	goto	u3237
  4459  0DC2  0BB7               	decfsz	(??_TransmittPacket^(0+128)+1),f
  4460  0DC3  2DC0               	goto	u3237
  4461                           
  4462                           ;functions.c: 203: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  4463  0DC4  300E               	movlw	14
  4464  0DC5  160A  118A  278D  120A  158A  	fcall	_RegisterRead
  4465  0DCA  3802               	iorlw	2
  4466  0DCB  1683               	bsf	3,5	;RP0=1, select bank1
  4467  0DCC  1303               	bcf	3,6	;RP1=0, select bank1
  4468  0DCD  00B6               	movwf	??_TransmittPacket^(0+128)
  4469  0DCE  0836               	movf	??_TransmittPacket^(0+128),w
  4470  0DCF  00A7               	movwf	RegisterSet@value^(0+128)
  4471  0DD0  300E               	movlw	14
  4472  0DD1  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  4473                           
  4474                           ;functions.c: 204: SetRFMode(0x40);
  4475  0DD6  3040               	movlw	64
  4476  0DD7  120A  158A  236D  120A  158A  	fcall	_SetRFMode
  4477  0DDC                     l3535:	
  4478                           ;functions.c: 205: while((RegisterRead(0x0E) & 0b00000010) == 0)
  4479                           
  4480  0DDC  300E               	movlw	14
  4481  0DDD  160A  118A  278D  120A  158A  	fcall	_RegisterRead
  4482  0DE2  3902               	andlw	2
  4483  0DE3  1D03               	btfss	3,2
  4484  0DE4  2DEF               	goto	l3537
  4485                           
  4486                           ;functions.c: 206: {
  4487                           ;functions.c: 207: if(bTimerComplete[4])
  4488  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  4489  0DE6  1303               	bcf	3,6	;RP1=0, select bank0
  4490  0DE7  0851               	movf	_bTimerComplete+4,w
  4491  0DE8  1903               	btfsc	3,2
  4492  0DE9  2DDC               	goto	l3535
  4493                           
  4494                           ;functions.c: 208: {
  4495                           ;functions.c: 209: FindChannel();
  4496  0DEA  120A  118A  2661  120A  158A  	fcall	_FindChannel
  4497  0DEF                     l3537:	
  4498                           ;functions.c: 210: break;
  4499                           
  4500                           
  4501                           ;functions.c: 211: }
  4502                           ;functions.c: 213: }
  4503                           ;functions.c: 214: SetRFMode(0x80);
  4504  0DEF  3080               	movlw	128
  4505  0DF0  120A  158A  236D  120A  158A  	fcall	_SetRFMode
  4506                           
  4507                           ;functions.c: 215: _delay((unsigned long)((500)*(4000000/4000000.0)));
  4508  0DF5  30A5               	movlw	165
  4509  0DF6  1683               	bsf	3,5	;RP0=1, select bank1
  4510  0DF7  1303               	bcf	3,6	;RP1=0, select bank1
  4511  0DF8  00B6               	movwf	??_TransmittPacket^(0+128)
  4512  0DF9                     u3247:	
  4513  0DF9  0BB6               	decfsz	??_TransmittPacket^(0+128),f
  4514  0DFA  2DF9               	goto	u3247
  4515  0DFB  2DFC               	nop2
  4516                           
  4517                           ;functions.c: 218: WriteFIFO('S');
  4518  0DFC  3053               	movlw	83
  4519  0DFD  160A  118A  25F0  120A  158A  	fcall	_WriteFIFO
  4520                           
  4521                           ;functions.c: 219: WriteFIFO('Y');
  4522  0E02  3059               	movlw	89
  4523  0E03  160A  118A  25F0  120A  158A  	fcall	_WriteFIFO
  4524                           
  4525                           ;functions.c: 220: WriteFIFO('N');
  4526  0E08  304E               	movlw	78
  4527  0E09  160A  118A  25F0  120A  158A  	fcall	_WriteFIFO
  4528                           
  4529                           ;functions.c: 221: WriteFIFO('C');
  4530  0E0E  3043               	movlw	67
  4531  0E0F  160A  118A  25F0  120A  158A  	fcall	_WriteFIFO
  4532                           
  4533                           ;functions.c: 224: WriteFIFO(44);
  4534  0E14  302C               	movlw	44
  4535  0E15  160A  118A  25F0  120A  158A  	fcall	_WriteFIFO
  4536                           
  4537                           ;functions.c: 225: WriteFIFO(topic);
  4538  0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  4539  0E1B  1303               	bcf	3,6	;RP1=0, select bank1
  4540  0E1C  083A               	movf	TransmittPacket@topic^(0+128),w
  4541  0E1D  160A  118A  25F0  120A  158A  	fcall	_WriteFIFO
  4542                           
  4543                           ;functions.c: 226: WriteFIFO(value);
  4544  0E22  1683               	bsf	3,5	;RP0=1, select bank1
  4545  0E23  1303               	bcf	3,6	;RP1=0, select bank1
  4546  0E24  0835               	movf	TransmittPacket@value^(0+128),w
  4547  0E25  160A  118A  25F0  120A  158A  	fcall	_WriteFIFO
  4548                           
  4549                           ;functions.c: 227: WriteFIFO(55);
  4550  0E2A  3037               	movlw	55
  4551  0E2B  160A  118A  25F0  120A  158A  	fcall	_WriteFIFO
  4552  0E30                     l338:	
  4553                           ;functions.c: 230: while(!RB4)
  4554                           
  4555  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  4556  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  4557  0E32  1A06               	btfsc	6,4	;volatile
  4558  0E33  2E39               	goto	l3561
  4559                           
  4560                           ;functions.c: 231: {
  4561                           ;functions.c: 232: if(bTimerComplete[4])
  4562  0E34  1283               	bcf	3,5	;RP0=0, select bank0
  4563  0E35  1303               	bcf	3,6	;RP1=0, select bank0
  4564  0E36  0851               	movf	_bTimerComplete+4,w
  4565  0E37  1903               	btfsc	3,2
  4566  0E38  2E30               	goto	l338
  4567  0E39                     l3561:	
  4568                           ;functions.c: 233: break;
  4569                           
  4570                           
  4571                           ;functions.c: 234: }
  4572                           ;functions.c: 235: _delay((unsigned long)((10)*(4000000/4000000.0)));
  4573  0E39  3002               	movlw	2
  4574  0E3A  1683               	bsf	3,5	;RP0=1, select bank1
  4575  0E3B  1303               	bcf	3,6	;RP1=0, select bank1
  4576  0E3C  00B6               	movwf	??_TransmittPacket^(0+128)
  4577  0E3D                     u3257:	
  4578  0E3D  0BB6               	decfsz	??_TransmittPacket^(0+128),f
  4579  0E3E  2E3D               	goto	u3257
  4580  0E3F  0000               	nop
  4581                           
  4582                           ;functions.c: 236: SetRFMode(0x00);
  4583  0E40  3000               	movlw	0
  4584  0E41  120A  158A  236D  120A  158A  	fcall	_SetRFMode
  4585                           
  4586                           ;functions.c: 237: _delay((unsigned long)((50)*(4000000/4000.0)));
  4587  0E46  3041               	movlw	65
  4588  0E47  1683               	bsf	3,5	;RP0=1, select bank1
  4589  0E48  1303               	bcf	3,6	;RP1=0, select bank1
  4590  0E49  00B7               	movwf	(??_TransmittPacket^(0+128)+1)
  4591  0E4A  30ED               	movlw	237
  4592  0E4B  00B6               	movwf	??_TransmittPacket^(0+128)
  4593  0E4C                     u3267:	
  4594  0E4C  0BB6               	decfsz	??_TransmittPacket^(0+128),f
  4595  0E4D  2E4C               	goto	u3267
  4596  0E4E  0BB7               	decfsz	(??_TransmittPacket^(0+128)+1),f
  4597  0E4F  2E4C               	goto	u3267
  4598  0E50  2E51               	nop2
  4599  0E51  0008               	return
  4600  0E52                     __end_of_TransmittPacket:	
  4601                           
  4602                           	psect	text20
  4603  15F0                     __ptext20:	
  4604 ;; *************** function _WriteFIFO *****************
  4605 ;; Defined at:
  4606 ;;		line 772 in file "functions.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;  Data            1    wreg     unsigned char 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  Data            1    3[BANK1 ] unsigned char 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      void 
  4613 ;; Registers used:
  4614 ;;		wreg, status,2, status,0, pclath, cstack
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4620 ;;      Params:         0       0       0       0       0
  4621 ;;      Locals:         0       0       1       0       0
  4622 ;;      Temps:          0       0       0       0       0
  4623 ;;      Totals:         0       0       1       0       0
  4624 ;;Total ram usage:        1 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; Hardware stack levels required when called:    7
  4627 ;; This function calls:
  4628 ;;		_WriteSPI
  4629 ;; This function is called by:
  4630 ;;		_TransmittPacket
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           
  4635                           ;psect for function _WriteFIFO
  4636  15F0                     _WriteFIFO:	
  4637                           
  4638                           ;incstack = 0
  4639 ;; hardware stack exceeded
  4640                           ; Regs used in _WriteFIFO: [wreg+status,2+status,0+pclath+cstack]
  4641                           ;WriteFIFO@Data stored from wreg
  4642  15F0  1683               	bsf	3,5	;RP0=1, select bank1
  4643  15F1  1303               	bcf	3,6	;RP1=0, select bank1
  4644  15F2  00A3               	movwf	WriteFIFO@Data^(0+128)
  4645                           
  4646                           ;functions.c: 774: RA5 = 0;
  4647  15F3  1283               	bcf	3,5	;RP0=0, select bank0
  4648  15F4  1303               	bcf	3,6	;RP1=0, select bank0
  4649  15F5  1285               	bcf	5,5	;volatile
  4650                           
  4651                           ;functions.c: 775: WriteSPI(Data);
  4652  15F6  1683               	bsf	3,5	;RP0=1, select bank1
  4653  15F7  1303               	bcf	3,6	;RP1=0, select bank1
  4654  15F8  0823               	movf	WriteFIFO@Data^(0+128),w
  4655  15F9  160A  118A  265B   	fcall	_WriteSPI
  4656                           
  4657                           ;functions.c: 776: RA5 = 1;
  4658  15FC  1283               	bcf	3,5	;RP0=0, select bank0
  4659  15FD  1303               	bcf	3,6	;RP1=0, select bank0
  4660  15FE  1685               	bsf	5,5	;volatile
  4661  15FF  0008               	return
  4662  1600                     __end_of_WriteFIFO:	
  4663                           
  4664                           	psect	text21
  4665  0661                     __ptext21:	
  4666 ;; *************** function _FindChannel *****************
  4667 ;; Defined at:
  4668 ;;		line 555 in file "functions.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;		None
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;  i               2   19[BANK1 ] int 
  4673 ;;  cnt             2   17[BANK1 ] int 
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  1    wreg      unsigned char 
  4676 ;; Registers used:
  4677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4683 ;;      Params:         0       0       0       0       0
  4684 ;;      Locals:         0       0       4       0       0
  4685 ;;      Temps:          0       0       3       0       0
  4686 ;;      Totals:         0       0       7       0       0
  4687 ;;Total ram usage:        7 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:   10
  4690 ;; This function calls:
  4691 ;;		_RegisterRead
  4692 ;;		_RegisterSet
  4693 ;;		_SetRFMode
  4694 ;; This function is called by:
  4695 ;;		_TransiverToReceive
  4696 ;;		_TransmittPacket
  4697 ;;		_TransiverInit
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           
  4702                           ;psect for function _FindChannel
  4703  0661                     _FindChannel:	
  4704                           
  4705                           ;functions.c: 557: int cnt = 0;
  4706                           
  4707                           ;incstack = 0
  4708 ;; hardware stack exceeded
  4709                           ; Regs used in _FindChannel: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4710  0661  1683               	bsf	3,5	;RP0=1, select bank1
  4711  0662  1303               	bcf	3,6	;RP1=0, select bank1
  4712  0663  01B1               	clrf	FindChannel@cnt^(0+128)
  4713  0664  01B2               	clrf	(FindChannel@cnt+1)^(0+128)
  4714                           
  4715                           ;functions.c: 558: bChannelFound = 0;
  4716  0665  1283               	bcf	3,5	;RP0=0, select bank0
  4717  0666  1303               	bcf	3,6	;RP1=0, select bank0
  4718  0667  01E0               	clrf	_bChannelFound
  4719                           
  4720                           ;functions.c: 559: channelFound = 0;
  4721  0668  01D2               	clrf	_channelFound
  4722  0669  01D3               	clrf	_channelFound+1
  4723                           
  4724                           ;functions.c: 561: _delay((unsigned long)((1000)*(4000000/4000.0)));
  4725  066A  3006               	movlw	6
  4726  066B  1683               	bsf	3,5	;RP0=1, select bank1
  4727  066C  1303               	bcf	3,6	;RP1=0, select bank1
  4728  066D  00B0               	movwf	(??_FindChannel^(0+128)+2)
  4729  066E  3013               	movlw	19
  4730  066F  00AF               	movwf	(??_FindChannel^(0+128)+1)
  4731  0670  30AD               	movlw	173
  4732  0671  00AE               	movwf	??_FindChannel^(0+128)
  4733  0672                     u3277:	
  4734  0672  0BAE               	decfsz	??_FindChannel^(0+128),f
  4735  0673  2E72               	goto	u3277
  4736  0674  0BAF               	decfsz	(??_FindChannel^(0+128)+1),f
  4737  0675  2E72               	goto	u3277
  4738  0676  0BB0               	decfsz	(??_FindChannel^(0+128)+2),f
  4739  0677  2E72               	goto	u3277
  4740                           
  4741                           ;functions.c: 562: for (int i = 0; i < 13; i++)
  4742  0678  1683               	bsf	3,5	;RP0=1, select bank1
  4743  0679  1303               	bcf	3,6	;RP1=0, select bank1
  4744  067A  01B3               	clrf	FindChannel@i^(0+128)
  4745  067B  01B4               	clrf	(FindChannel@i+1)^(0+128)
  4746  067C  0834               	movf	(FindChannel@i+1)^(0+128),w
  4747  067D  3A80               	xorlw	128
  4748  067E  00FF               	movwf	127
  4749  067F  3080               	movlw	128
  4750  0680  027F               	subwf	127,w
  4751  0681  1D03               	skipz
  4752  0682  2E85               	goto	u2385
  4753  0683  300D               	movlw	13
  4754  0684  0233               	subwf	FindChannel@i^(0+128),w
  4755  0685                     u2385:	
  4756  0685  1803               	btfsc	3,0
  4757  0686  2F61               	goto	l3487
  4758  0687                     l3463:	
  4759                           
  4760                           ;functions.c: 563: {
  4761                           ;functions.c: 564: RegisterSet(0x06,ChannelR[i]);
  4762  0687  1683               	bsf	3,5	;RP0=1, select bank1
  4763  0688  1303               	bcf	3,6	;RP1=0, select bank1
  4764  0689  0833               	movf	FindChannel@i^(0+128),w
  4765  068A  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  4766  068B  0084               	movwf	4
  4767  068C  120A  158A  2000  120A  118A  	fcall	stringdir
  4768  0691  00AE               	movwf	??_FindChannel^(0+128)
  4769  0692  082E               	movf	??_FindChannel^(0+128),w
  4770  0693  00A7               	movwf	RegisterSet@value^(0+128)
  4771  0694  3006               	movlw	6
  4772  0695  160A  118A  26C3  120A  118A  	fcall	_RegisterSet
  4773                           
  4774                           ;functions.c: 565: RegisterSet(0x07,ChannelP[i]);
  4775  069A  1683               	bsf	3,5	;RP0=1, select bank1
  4776  069B  1303               	bcf	3,6	;RP1=0, select bank1
  4777  069C  0833               	movf	FindChannel@i^(0+128),w
  4778  069D  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  4779  069E  0084               	movwf	4
  4780  069F  120A  158A  2000  120A  118A  	fcall	stringdir
  4781  06A4  00AE               	movwf	??_FindChannel^(0+128)
  4782  06A5  082E               	movf	??_FindChannel^(0+128),w
  4783  06A6  00A7               	movwf	RegisterSet@value^(0+128)
  4784  06A7  3007               	movlw	7
  4785  06A8  160A  118A  26C3  120A  118A  	fcall	_RegisterSet
  4786                           
  4787                           ;functions.c: 566: RegisterSet(0x08,ChannelS[i]);
  4788  06AD  1683               	bsf	3,5	;RP0=1, select bank1
  4789  06AE  1303               	bcf	3,6	;RP1=0, select bank1
  4790  06AF  0833               	movf	FindChannel@i^(0+128),w
  4791  06B0  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  4792  06B1  0084               	movwf	4
  4793  06B2  120A  158A  2000  120A  118A  	fcall	stringdir
  4794  06B7  00AE               	movwf	??_FindChannel^(0+128)
  4795  06B8  082E               	movf	??_FindChannel^(0+128),w
  4796  06B9  00A7               	movwf	RegisterSet@value^(0+128)
  4797  06BA  3008               	movlw	8
  4798  06BB  160A  118A  26C3  120A  118A  	fcall	_RegisterSet
  4799                           
  4800                           ;functions.c: 567: RegisterSet(0x09,ChannelR[i]);
  4801  06C0  1683               	bsf	3,5	;RP0=1, select bank1
  4802  06C1  1303               	bcf	3,6	;RP1=0, select bank1
  4803  06C2  0833               	movf	FindChannel@i^(0+128),w
  4804  06C3  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  4805  06C4  0084               	movwf	4
  4806  06C5  120A  158A  2000  120A  118A  	fcall	stringdir
  4807  06CA  00AE               	movwf	??_FindChannel^(0+128)
  4808  06CB  082E               	movf	??_FindChannel^(0+128),w
  4809  06CC  00A7               	movwf	RegisterSet@value^(0+128)
  4810  06CD  3009               	movlw	9
  4811  06CE  160A  118A  26C3  120A  118A  	fcall	_RegisterSet
  4812                           
  4813                           ;functions.c: 568: RegisterSet(0x0A,ChannelP[i]);
  4814  06D3  1683               	bsf	3,5	;RP0=1, select bank1
  4815  06D4  1303               	bcf	3,6	;RP1=0, select bank1
  4816  06D5  0833               	movf	FindChannel@i^(0+128),w
  4817  06D6  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  4818  06D7  0084               	movwf	4
  4819  06D8  120A  158A  2000  120A  118A  	fcall	stringdir
  4820  06DD  00AE               	movwf	??_FindChannel^(0+128)
  4821  06DE  082E               	movf	??_FindChannel^(0+128),w
  4822  06DF  00A7               	movwf	RegisterSet@value^(0+128)
  4823  06E0  300A               	movlw	10
  4824  06E1  160A  118A  26C3  120A  118A  	fcall	_RegisterSet
  4825                           
  4826                           ;functions.c: 569: RegisterSet(0x0B,ChannelS[i]);
  4827  06E6  1683               	bsf	3,5	;RP0=1, select bank1
  4828  06E7  1303               	bcf	3,6	;RP1=0, select bank1
  4829  06E8  0833               	movf	FindChannel@i^(0+128),w
  4830  06E9  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  4831  06EA  0084               	movwf	4
  4832  06EB  120A  158A  2000  120A  118A  	fcall	stringdir
  4833  06F0  00AE               	movwf	??_FindChannel^(0+128)
  4834  06F1  082E               	movf	??_FindChannel^(0+128),w
  4835  06F2  00A7               	movwf	RegisterSet@value^(0+128)
  4836  06F3  300B               	movlw	11
  4837  06F4  160A  118A  26C3  120A  118A  	fcall	_RegisterSet
  4838                           
  4839                           ;functions.c: 570: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  4840  06F9  300E               	movlw	14
  4841  06FA  160A  118A  278D  120A  118A  	fcall	_RegisterRead
  4842  06FF  3802               	iorlw	2
  4843  0700  1683               	bsf	3,5	;RP0=1, select bank1
  4844  0701  1303               	bcf	3,6	;RP1=0, select bank1
  4845  0702  00AE               	movwf	??_FindChannel^(0+128)
  4846  0703  082E               	movf	??_FindChannel^(0+128),w
  4847  0704  00A7               	movwf	RegisterSet@value^(0+128)
  4848  0705  300E               	movlw	14
  4849  0706  160A  118A  26C3  120A  118A  	fcall	_RegisterSet
  4850                           
  4851                           ;functions.c: 571: SetRFMode(0x40);
  4852  070B  3040               	movlw	64
  4853  070C  120A  158A  236D  120A  118A  	fcall	_SetRFMode
  4854                           
  4855                           ;functions.c: 572: cnt = 0;
  4856  0711  1683               	bsf	3,5	;RP0=1, select bank1
  4857  0712  1303               	bcf	3,6	;RP1=0, select bank1
  4858  0713  01B1               	clrf	FindChannel@cnt^(0+128)
  4859  0714  01B2               	clrf	(FindChannel@cnt+1)^(0+128)
  4860  0715                     l3481:	
  4861                           ;functions.c: 573: while(cnt < 5)
  4862                           
  4863  0715  1683               	bsf	3,5	;RP0=1, select bank1
  4864  0716  1303               	bcf	3,6	;RP1=0, select bank1
  4865  0717  0832               	movf	(FindChannel@cnt+1)^(0+128),w
  4866  0718  3A80               	xorlw	128
  4867  0719  00FF               	movwf	127
  4868  071A  3080               	movlw	128
  4869  071B  027F               	subwf	127,w
  4870  071C  1D03               	skipz
  4871  071D  2F20               	goto	u2405
  4872  071E  3005               	movlw	5
  4873  071F  0231               	subwf	FindChannel@cnt^(0+128),w
  4874  0720                     u2405:	
  4875  0720  1803               	btfsc	3,0
  4876  0721  2F4E               	goto	l3483
  4877                           
  4878                           ;functions.c: 574: {
  4879                           ;functions.c: 576: if((RegisterRead(0x0E) & 0b00000010) != 0)
  4880  0722  300E               	movlw	14
  4881  0723  160A  118A  278D  120A  118A  	fcall	_RegisterRead
  4882  0728  3902               	andlw	2
  4883  0729  1903               	btfsc	3,2
  4884  072A  2F3D               	goto	l3479
  4885                           
  4886                           ;functions.c: 577: {
  4887                           ;functions.c: 578: bChannelFound = 1;
  4888  072B  1283               	bcf	3,5	;RP0=0, select bank0
  4889  072C  1303               	bcf	3,6	;RP1=0, select bank0
  4890  072D  01E0               	clrf	_bChannelFound
  4891  072E  0AE0               	incf	_bChannelFound,f
  4892                           
  4893                           ;functions.c: 579: channelFound = i;
  4894  072F  1683               	bsf	3,5	;RP0=1, select bank1
  4895  0730  1303               	bcf	3,6	;RP1=0, select bank1
  4896  0731  0834               	movf	(FindChannel@i+1)^(0+128),w
  4897  0732  1283               	bcf	3,5	;RP0=0, select bank0
  4898  0733  1303               	bcf	3,6	;RP1=0, select bank0
  4899  0734  00D3               	movwf	_channelFound+1
  4900  0735  1683               	bsf	3,5	;RP0=1, select bank1
  4901  0736  1303               	bcf	3,6	;RP1=0, select bank1
  4902  0737  0833               	movf	FindChannel@i^(0+128),w
  4903  0738  1283               	bcf	3,5	;RP0=0, select bank0
  4904  0739  1303               	bcf	3,6	;RP1=0, select bank0
  4905  073A  00D2               	movwf	_channelFound
  4906                           
  4907                           ;functions.c: 580: return 1;
  4908  073B  3001               	movlw	1
  4909  073C  0008               	return
  4910  073D                     l3479:	
  4911                           
  4912                           ;functions.c: 581: }
  4913                           ;functions.c: 582: cnt++;
  4914  073D  3001               	movlw	1
  4915  073E  1683               	bsf	3,5	;RP0=1, select bank1
  4916  073F  1303               	bcf	3,6	;RP1=0, select bank1
  4917  0740  07B1               	addwf	FindChannel@cnt^(0+128),f
  4918  0741  1803               	skipnc
  4919  0742  0AB2               	incf	(FindChannel@cnt+1)^(0+128),f
  4920  0743  3000               	movlw	0
  4921  0744  07B2               	addwf	(FindChannel@cnt+1)^(0+128),f
  4922                           
  4923                           ;functions.c: 583: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  4924  0745  30C7               	movlw	199
  4925  0746  1683               	bsf	3,5	;RP0=1, select bank1
  4926  0747  1303               	bcf	3,6	;RP1=0, select bank1
  4927  0748  00AE               	movwf	??_FindChannel^(0+128)
  4928  0749                     u3287:	
  4929  0749  2F4A               	nop2
  4930  074A  0BAE               	decfsz	??_FindChannel^(0+128),f
  4931  074B  2F49               	goto	u3287
  4932  074C  2F4D               	nop2
  4933  074D  2F15               	goto	l3481
  4934  074E                     l3483:	
  4935  074E  3001               	movlw	1
  4936  074F  1683               	bsf	3,5	;RP0=1, select bank1
  4937  0750  1303               	bcf	3,6	;RP1=0, select bank1
  4938  0751  07B3               	addwf	FindChannel@i^(0+128),f
  4939  0752  1803               	skipnc
  4940  0753  0AB4               	incf	(FindChannel@i+1)^(0+128),f
  4941  0754  3000               	movlw	0
  4942  0755  07B4               	addwf	(FindChannel@i+1)^(0+128),f
  4943  0756  0834               	movf	(FindChannel@i+1)^(0+128),w
  4944  0757  3A80               	xorlw	128
  4945  0758  00FF               	movwf	127
  4946  0759  3080               	movlw	128
  4947  075A  027F               	subwf	127,w
  4948  075B  1D03               	skipz
  4949  075C  2F5F               	goto	u2415
  4950  075D  300D               	movlw	13
  4951  075E  0233               	subwf	FindChannel@i^(0+128),w
  4952  075F                     u2415:	
  4953  075F  1C03               	skipc
  4954  0760  2E87               	goto	l3463
  4955  0761                     l3487:	
  4956                           
  4957                           ;functions.c: 584: }
  4958                           ;functions.c: 587: }
  4959                           ;functions.c: 588: return 0;
  4960  0761  3000               	movlw	0
  4961  0762  0008               	return
  4962  0763                     __end_of_FindChannel:	
  4963                           
  4964                           	psect	text22
  4965  0B6D                     __ptext22:	
  4966 ;; *************** function _SetRFMode *****************
  4967 ;; Defined at:
  4968 ;;		line 610 in file "functions.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  mode            1    wreg     unsigned char 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  mode            1   12[BANK1 ] unsigned char 
  4973 ;;  mcparam0_rea    1   13[BANK1 ] unsigned char 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4983 ;;      Params:         0       0       0       0       0
  4984 ;;      Locals:         0       0       2       0       0
  4985 ;;      Temps:          0       0       1       0       0
  4986 ;;      Totals:         0       0       3       0       0
  4987 ;;Total ram usage:        3 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    9
  4990 ;; This function calls:
  4991 ;;		_RegisterRead
  4992 ;;		_RegisterSet
  4993 ;; This function is called by:
  4994 ;;		_TransiverToReceive
  4995 ;;		_TransiverReadFIFO
  4996 ;;		_TransmittPacket
  4997 ;;		_TransiverInit
  4998 ;;		_FindChannel
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           
  5003                           ;psect for function _SetRFMode
  5004  0B6D                     _SetRFMode:	
  5005                           
  5006                           ;incstack = 0
  5007 ;; hardware stack exceeded
  5008                           ; Regs used in _SetRFMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5009                           ;SetRFMode@mode stored from wreg
  5010  0B6D  1683               	bsf	3,5	;RP0=1, select bank1
  5011  0B6E  1303               	bcf	3,6	;RP1=0, select bank1
  5012  0B6F  00AC               	movwf	SetRFMode@mode^(0+128)
  5013                           
  5014                           ;functions.c: 612: RA4 = 0;
  5015  0B70  1283               	bcf	3,5	;RP0=0, select bank0
  5016  0B71  1303               	bcf	3,6	;RP1=0, select bank0
  5017  0B72  1205               	bcf	5,4	;volatile
  5018                           
  5019                           ;functions.c: 613: BYTE mcparam0_read;
  5020                           ;functions.c: 614: mcparam0_read = RegisterRead(0);
  5021  0B73  3000               	movlw	0
  5022  0B74  160A  118A  278D  120A  158A  	fcall	_RegisterRead
  5023  0B79  1683               	bsf	3,5	;RP0=1, select bank1
  5024  0B7A  1303               	bcf	3,6	;RP1=0, select bank1
  5025  0B7B  00AB               	movwf	??_SetRFMode^(0+128)
  5026  0B7C  082B               	movf	??_SetRFMode^(0+128),w
  5027  0B7D  00AD               	movwf	SetRFMode@mcparam0_read^(0+128)
  5028                           
  5029                           ;functions.c: 615: switch (mode) {
  5030  0B7E  2BC7               	goto	l3437
  5031  0B7F                     l3425:	
  5032                           ;functions.c: 616: case 0x80:
  5033                           
  5034                           
  5035                           ;functions.c: 617: RegisterSet(0, (mcparam0_read & 0x1F) | 0x80);
  5036  0B7F  082D               	movf	SetRFMode@mcparam0_read^(0+128),w
  5037  0B80  391F               	andlw	31
  5038  0B81  3880               	iorlw	128
  5039  0B82  00AB               	movwf	??_SetRFMode^(0+128)
  5040  0B83  082B               	movf	??_SetRFMode^(0+128),w
  5041  0B84  00A7               	movwf	RegisterSet@value^(0+128)
  5042  0B85  3000               	movlw	0
  5043  0B86  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  5044                           
  5045                           ;functions.c: 619: break;
  5046  0B8B  2BDA               	goto	l427
  5047  0B8C                     l3427:	
  5048                           ;functions.c: 620: case 0x60:
  5049                           
  5050                           
  5051                           ;functions.c: 621: RegisterSet(0, (mcparam0_read & 0x1F) | 0x60);
  5052  0B8C  1683               	bsf	3,5	;RP0=1, select bank1
  5053  0B8D  1303               	bcf	3,6	;RP1=0, select bank1
  5054  0B8E  082D               	movf	SetRFMode@mcparam0_read^(0+128),w
  5055  0B8F  391F               	andlw	31
  5056  0B90  3860               	iorlw	96
  5057  0B91  00AB               	movwf	??_SetRFMode^(0+128)
  5058  0B92  082B               	movf	??_SetRFMode^(0+128),w
  5059  0B93  00A7               	movwf	RegisterSet@value^(0+128)
  5060  0B94  3000               	movlw	0
  5061  0B95  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  5062                           
  5063                           ;functions.c: 623: break;
  5064  0B9A  2BDA               	goto	l427
  5065  0B9B                     l3429:	
  5066                           ;functions.c: 624: case 0x40:
  5067                           
  5068                           
  5069                           ;functions.c: 625: RegisterSet(0, (mcparam0_read & 0x1F) | 0x40);
  5070  0B9B  1683               	bsf	3,5	;RP0=1, select bank1
  5071  0B9C  1303               	bcf	3,6	;RP1=0, select bank1
  5072  0B9D  082D               	movf	SetRFMode@mcparam0_read^(0+128),w
  5073  0B9E  391F               	andlw	31
  5074  0B9F  3840               	iorlw	64
  5075  0BA0  00AB               	movwf	??_SetRFMode^(0+128)
  5076  0BA1  082B               	movf	??_SetRFMode^(0+128),w
  5077  0BA2  00A7               	movwf	RegisterSet@value^(0+128)
  5078  0BA3  3000               	movlw	0
  5079  0BA4  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  5080                           
  5081                           ;functions.c: 627: break;
  5082  0BA9  2BDA               	goto	l427
  5083  0BAA                     l3431:	
  5084                           ;functions.c: 628: case 0x20:
  5085                           
  5086                           
  5087                           ;functions.c: 629: RegisterSet(0, (mcparam0_read & 0x1F) | 0x20);
  5088  0BAA  1683               	bsf	3,5	;RP0=1, select bank1
  5089  0BAB  1303               	bcf	3,6	;RP1=0, select bank1
  5090  0BAC  082D               	movf	SetRFMode@mcparam0_read^(0+128),w
  5091  0BAD  391F               	andlw	31
  5092  0BAE  3820               	iorlw	32
  5093  0BAF  00AB               	movwf	??_SetRFMode^(0+128)
  5094  0BB0  082B               	movf	??_SetRFMode^(0+128),w
  5095  0BB1  00A7               	movwf	RegisterSet@value^(0+128)
  5096  0BB2  3000               	movlw	0
  5097  0BB3  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  5098                           
  5099                           ;functions.c: 631: break;
  5100  0BB8  2BDA               	goto	l427
  5101  0BB9                     l3433:	
  5102                           ;functions.c: 632: case 0x00:
  5103                           
  5104                           
  5105                           ;functions.c: 633: RegisterSet(0, (mcparam0_read & 0x1F) | 0x00);
  5106  0BB9  1683               	bsf	3,5	;RP0=1, select bank1
  5107  0BBA  1303               	bcf	3,6	;RP1=0, select bank1
  5108  0BBB  082D               	movf	SetRFMode@mcparam0_read^(0+128),w
  5109  0BBC  391F               	andlw	31
  5110  0BBD  00AB               	movwf	??_SetRFMode^(0+128)
  5111  0BBE  082B               	movf	??_SetRFMode^(0+128),w
  5112  0BBF  00A7               	movwf	RegisterSet@value^(0+128)
  5113  0BC0  3000               	movlw	0
  5114  0BC1  160A  118A  26C3  120A  158A  	fcall	_RegisterSet
  5115                           
  5116                           ;functions.c: 636: }
  5117                           
  5118                           ;functions.c: 635: break;
  5119  0BC6  2BDA               	goto	l427
  5120  0BC7                     l3437:	
  5121  0BC7  1683               	bsf	3,5	;RP0=1, select bank1
  5122  0BC8  1303               	bcf	3,6	;RP1=0, select bank1
  5123  0BC9  082C               	movf	SetRFMode@mode^(0+128),w
  5124                           
  5125                           ; Switch size 1, requested type "space"
  5126                           ; Number of cases is 5, Range of values is 0 to 128
  5127                           ; switch strategies available:
  5128                           ; Name         Instructions Cycles
  5129                           ; simple_byte           16     9 (average)
  5130                           ; jumptable            260     6 (fixed)
  5131                           ;	Chosen strategy is simple_byte
  5132  0BCA  3A00               	xorlw	0	; case 0
  5133  0BCB  1903               	skipnz
  5134  0BCC  2BB9               	goto	l3433
  5135  0BCD  3A20               	xorlw	32	; case 32
  5136  0BCE  1903               	skipnz
  5137  0BCF  2BAA               	goto	l3431
  5138  0BD0  3A60               	xorlw	96	; case 64
  5139  0BD1  1903               	skipnz
  5140  0BD2  2B9B               	goto	l3429
  5141  0BD3  3A20               	xorlw	32	; case 96
  5142  0BD4  1903               	skipnz
  5143  0BD5  2B8C               	goto	l3427
  5144  0BD6  3AE0               	xorlw	224	; case 128
  5145  0BD7  1903               	skipnz
  5146  0BD8  2B7F               	goto	l3425
  5147  0BD9  2BDA               	goto	l427
  5148  0BDA                     l427:	
  5149                           
  5150                           ;functions.c: 637: RA4 = 1;
  5151  0BDA  1283               	bcf	3,5	;RP0=0, select bank0
  5152  0BDB  1303               	bcf	3,6	;RP1=0, select bank0
  5153  0BDC  1605               	bsf	5,4	;volatile
  5154  0BDD  0008               	return
  5155  0BDE                     __end_of_SetRFMode:	
  5156                           
  5157                           	psect	text23
  5158  16C3                     __ptext23:	
  5159 ;; *************** function _RegisterSet *****************
  5160 ;; Defined at:
  5161 ;;		line 719 in file "functions.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  adress          1    wreg     unsigned char 
  5164 ;;  value           1    7[BANK1 ] unsigned char 
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;  adress          1   10[BANK1 ] unsigned char 
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  1    wreg      void 
  5169 ;; Registers used:
  5170 ;;		wreg, status,2, status,0, pclath, cstack
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5176 ;;      Params:         0       0       1       0       0
  5177 ;;      Locals:         0       0       1       0       0
  5178 ;;      Temps:          0       0       2       0       0
  5179 ;;      Totals:         0       0       4       0       0
  5180 ;;Total ram usage:        4 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; Hardware stack levels required when called:    7
  5183 ;; This function calls:
  5184 ;;		_WriteSPI
  5185 ;; This function is called by:
  5186 ;;		_TransiverToReceive
  5187 ;;		_TransmittPacket
  5188 ;;		_TransiverInit
  5189 ;;		_FindChannel
  5190 ;;		_SetRFMode
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           
  5195                           ;psect for function _RegisterSet
  5196  16C3                     _RegisterSet:	
  5197                           
  5198                           ;incstack = 0
  5199 ;; hardware stack exceeded
  5200                           ; Regs used in _RegisterSet: [wreg+status,2+status,0+pclath+cstack]
  5201                           ;RegisterSet@adress stored from wreg
  5202  16C3  1683               	bsf	3,5	;RP0=1, select bank1
  5203  16C4  1303               	bcf	3,6	;RP1=0, select bank1
  5204  16C5  00AA               	movwf	RegisterSet@adress^(0+128)
  5205                           
  5206                           ;functions.c: 721: RA4 = 0;
  5207  16C6  1283               	bcf	3,5	;RP0=0, select bank0
  5208  16C7  1303               	bcf	3,6	;RP1=0, select bank0
  5209  16C8  1205               	bcf	5,4	;volatile
  5210                           
  5211                           ;functions.c: 722: adress = (adress<<1);
  5212  16C9  1683               	bsf	3,5	;RP0=1, select bank1
  5213  16CA  1303               	bcf	3,6	;RP1=0, select bank1
  5214  16CB  082A               	movf	RegisterSet@adress^(0+128),w
  5215  16CC  00A8               	movwf	??_RegisterSet^(0+128)
  5216  16CD  0728               	addwf	??_RegisterSet^(0+128),w
  5217  16CE  00A9               	movwf	(??_RegisterSet+1)^(0+128)
  5218  16CF  0829               	movf	(??_RegisterSet+1)^(0+128),w
  5219  16D0  00AA               	movwf	RegisterSet@adress^(0+128)
  5220                           
  5221                           ;functions.c: 723: WriteSPI(adress);
  5222  16D1  082A               	movf	RegisterSet@adress^(0+128),w
  5223  16D2  160A  118A  265B  160A  118A  	fcall	_WriteSPI
  5224                           
  5225                           ;functions.c: 724: WriteSPI(value);
  5226  16D7  1683               	bsf	3,5	;RP0=1, select bank1
  5227  16D8  1303               	bcf	3,6	;RP1=0, select bank1
  5228  16D9  0827               	movf	RegisterSet@value^(0+128),w
  5229  16DA  160A  118A  265B   	fcall	_WriteSPI
  5230                           
  5231                           ;functions.c: 725: RA4 = 1;
  5232  16DD  1283               	bcf	3,5	;RP0=0, select bank0
  5233  16DE  1303               	bcf	3,6	;RP1=0, select bank0
  5234  16DF  1605               	bsf	5,4	;volatile
  5235  16E0  0008               	return
  5236  16E1                     __end_of_RegisterSet:	
  5237                           
  5238                           	psect	text24
  5239  178D                     __ptext24:	
  5240 ;; *************** function _RegisterRead *****************
  5241 ;; Defined at:
  5242 ;;		line 689 in file "functions.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  adress          1    wreg     unsigned char 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  adress          1    6[BANK1 ] unsigned char 
  5247 ;;  value           1    5[BANK1 ] unsigned char 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      unsigned char 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2, status,0, pclath, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5257 ;;      Params:         0       0       0       0       0
  5258 ;;      Locals:         0       0       2       0       0
  5259 ;;      Temps:          0       0       2       0       0
  5260 ;;      Totals:         0       0       4       0       0
  5261 ;;Total ram usage:        4 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    8
  5264 ;; This function calls:
  5265 ;;		_ReadSPI
  5266 ;;		_WriteSPI
  5267 ;; This function is called by:
  5268 ;;		_TransiverToReceive
  5269 ;;		_TransmittPacket
  5270 ;;		_TransiverInit
  5271 ;;		_FindChannel
  5272 ;;		_SetRFMode
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           
  5277                           ;psect for function _RegisterRead
  5278  178D                     _RegisterRead:	
  5279                           
  5280                           ;incstack = 0
  5281 ;; hardware stack exceeded
  5282                           ; Regs used in _RegisterRead: [wreg+status,2+status,0+pclath+cstack]
  5283                           ;RegisterRead@adress stored from wreg
  5284  178D  1683               	bsf	3,5	;RP0=1, select bank1
  5285  178E  1303               	bcf	3,6	;RP1=0, select bank1
  5286  178F  00A6               	movwf	RegisterRead@adress^(0+128)
  5287                           
  5288                           ;functions.c: 691: BYTE value;
  5289                           ;functions.c: 692: RA4 = 0;
  5290  1790  1283               	bcf	3,5	;RP0=0, select bank0
  5291  1791  1303               	bcf	3,6	;RP1=0, select bank0
  5292  1792  1205               	bcf	5,4	;volatile
  5293                           
  5294                           ;functions.c: 693: adress = ((adress<<1)|0x40);
  5295  1793  1683               	bsf	3,5	;RP0=1, select bank1
  5296  1794  1303               	bcf	3,6	;RP1=0, select bank1
  5297  1795  0826               	movf	RegisterRead@adress^(0+128),w
  5298  1796  00A3               	movwf	??_RegisterRead^(0+128)
  5299  1797  0723               	addwf	??_RegisterRead^(0+128),w
  5300  1798  3840               	iorlw	64
  5301  1799  00A4               	movwf	(??_RegisterRead+1)^(0+128)
  5302  179A  0824               	movf	(??_RegisterRead+1)^(0+128),w
  5303  179B  00A6               	movwf	RegisterRead@adress^(0+128)
  5304                           
  5305                           ;functions.c: 694: WriteSPI(adress);
  5306  179C  0826               	movf	RegisterRead@adress^(0+128),w
  5307  179D  160A  118A  265B  160A  118A  	fcall	_WriteSPI
  5308                           
  5309                           ;functions.c: 695: value = ReadSPI();
  5310  17A2  160A  118A  25B1   	fcall	_ReadSPI
  5311  17A5  1683               	bsf	3,5	;RP0=1, select bank1
  5312  17A6  1303               	bcf	3,6	;RP1=0, select bank1
  5313  17A7  00A3               	movwf	??_RegisterRead^(0+128)
  5314  17A8  0823               	movf	??_RegisterRead^(0+128),w
  5315  17A9  00A5               	movwf	RegisterRead@value^(0+128)
  5316                           
  5317                           ;functions.c: 696: RA4 = 1;
  5318  17AA  1283               	bcf	3,5	;RP0=0, select bank0
  5319  17AB  1303               	bcf	3,6	;RP1=0, select bank0
  5320  17AC  1605               	bsf	5,4	;volatile
  5321                           
  5322                           ;functions.c: 697: return value;
  5323  17AD  1683               	bsf	3,5	;RP0=1, select bank1
  5324  17AE  1303               	bcf	3,6	;RP1=0, select bank1
  5325  17AF  0825               	movf	RegisterRead@value^(0+128),w
  5326  17B0  0008               	return
  5327  17B1                     __end_of_RegisterRead:	
  5328                           
  5329                           	psect	text25
  5330  15D5                     __ptext25:	
  5331 ;; *************** function _Mode_2 *****************
  5332 ;; Defined at:
  5333 ;;		line 268 in file "functions.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;		None
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;		None
  5338 ;; Return value:  Size  Location     Type
  5339 ;;                  1    wreg      void 
  5340 ;; Registers used:
  5341 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5342 ;; Tracked objects:
  5343 ;;		On entry : 0/0
  5344 ;;		On exit  : 0/0
  5345 ;;		Unchanged: 0/0
  5346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5347 ;;      Params:         0       0       0       0       0
  5348 ;;      Locals:         0       0       0       0       0
  5349 ;;      Temps:          0       0       0       0       0
  5350 ;;      Totals:         0       0       0       0       0
  5351 ;;Total ram usage:        0 bytes
  5352 ;; Hardware stack levels used:    1
  5353 ;; Hardware stack levels required when called:   10
  5354 ;; This function calls:
  5355 ;;		_LightWithSensController
  5356 ;; This function is called by:
  5357 ;;		_main
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           
  5362                           ;psect for function _Mode_2
  5363  15D5                     _Mode_2:	
  5364                           
  5365                           ;functions.c: 270: LightWithSensController();
  5366                           
  5367                           ;incstack = 0
  5368 ;; hardware stack exceeded
  5369                           ; Regs used in _Mode_2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5370  15D5  120A  158A  21A5  160A  118A  	fcall	_LightWithSensController
  5371                           
  5372                           ;functions.c: 271: if(RC2)
  5373  15DA  1283               	bcf	3,5	;RP0=0, select bank0
  5374  15DB  1303               	bcf	3,6	;RP1=0, select bank0
  5375  15DC  1D07               	btfss	7,2	;volatile
  5376  15DD  2DE0               	goto	l354
  5377                           
  5378                           ;functions.c: 272: RC1 = 1;
  5379  15DE  1487               	bsf	7,1	;volatile
  5380  15DF  0008               	return
  5381  15E0                     l354:	
  5382                           
  5383                           ;functions.c: 273: else
  5384                           ;functions.c: 274: RC1 = 0;
  5385  15E0  1087               	bcf	7,1	;volatile
  5386  15E1  0008               	return
  5387  15E2                     __end_of_Mode_2:	
  5388                           
  5389                           	psect	text26
  5390  16E1                     __ptext26:	
  5391 ;; *************** function _Mode_1 *****************
  5392 ;; Defined at:
  5393 ;;		line 254 in file "functions.c"
  5394 ;; Parameters:    Size  Location     Type
  5395 ;;		None
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;		None
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      void 
  5400 ;; Registers used:
  5401 ;;		wreg, status,2, status,0, pclath, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5407 ;;      Params:         0       0       0       0       0
  5408 ;;      Locals:         0       0       0       0       0
  5409 ;;      Temps:          0       0       0       0       0
  5410 ;;      Totals:         0       0       0       0       0
  5411 ;;Total ram usage:        0 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    9
  5414 ;; This function calls:
  5415 ;;		_DarknessCheck
  5416 ;; This function is called by:
  5417 ;;		_main
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           
  5422                           ;psect for function _Mode_1
  5423  16E1                     _Mode_1:	
  5424                           
  5425                           ;functions.c: 257: if((intSecondCounter == 30)&&(!RC2))
  5426                           
  5427                           ;incstack = 0
  5428 ;; hardware stack exceeded
  5429                           ; Regs used in _Mode_1: [wreg+status,2+status,0+pclath+cstack]
  5430  16E1  301E               	movlw	30
  5431  16E2  1283               	bcf	3,5	;RP0=0, select bank0
  5432  16E3  1303               	bcf	3,6	;RP1=0, select bank0
  5433  16E4  065E               	xorwf	_intSecondCounter,w
  5434  16E5  045F               	iorwf	_intSecondCounter+1,w
  5435  16E6  1903               	btfsc	3,2
  5436  16E7  1907               	btfsc	7,2	;volatile
  5437  16E8  2EEE               	goto	l3985
  5438                           
  5439                           ;functions.c: 258: DarknessCheck();
  5440  16E9  120A  158A  2044  160A  118A  	fcall	_DarknessCheck
  5441  16EE                     l3985:	
  5442                           
  5443                           ;functions.c: 259: if((intBlinkCycle == 1)&&(bDark == 1))
  5444  16EE  1283               	bcf	3,5	;RP0=0, select bank0
  5445  16EF  1303               	bcf	3,6	;RP1=0, select bank0
  5446  16F0  0356               	decf	_intBlinkCycle,w
  5447  16F1  0457               	iorwf	_intBlinkCycle+1,w
  5448  16F2  1D03               	btfss	3,2
  5449  16F3  2EFD               	goto	l349
  5450  16F4  1683               	bsf	3,5	;RP0=1, select bank1
  5451  16F5  1303               	bcf	3,6	;RP1=0, select bank1
  5452  16F6  0356               	decf	_bDark^(0+128),w
  5453  16F7  1D03               	btfss	3,2
  5454  16F8  2EFD               	goto	l349
  5455                           
  5456                           ;functions.c: 260: RC2 = 1;
  5457  16F9  1283               	bcf	3,5	;RP0=0, select bank0
  5458  16FA  1303               	bcf	3,6	;RP1=0, select bank0
  5459  16FB  1507               	bsf	7,2	;volatile
  5460  16FC  0008               	return
  5461  16FD                     l349:	
  5462                           
  5463                           ;functions.c: 261: else
  5464                           ;functions.c: 262: RC2 = 0;
  5465  16FD  1283               	bcf	3,5	;RP0=0, select bank0
  5466  16FE  1107               	bcf	7,2	;volatile
  5467  16FF  0008               	return
  5468  1700                     __end_of_Mode_1:	
  5469                           
  5470                           	psect	text27
  5471  15A5                     __ptext27:	
  5472 ;; *************** function _Mode_0 *****************
  5473 ;; Defined at:
  5474 ;;		line 246 in file "functions.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;		None
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;		None
  5479 ;; Return value:  Size  Location     Type
  5480 ;;                  1    wreg      void 
  5481 ;; Registers used:
  5482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5488 ;;      Params:         0       0       0       0       0
  5489 ;;      Locals:         0       0       0       0       0
  5490 ;;      Temps:          0       0       0       0       0
  5491 ;;      Totals:         0       0       0       0       0
  5492 ;;Total ram usage:        0 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:   10
  5495 ;; This function calls:
  5496 ;;		_LightWithSensController
  5497 ;; This function is called by:
  5498 ;;		_main
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           
  5503                           ;psect for function _Mode_0
  5504  15A5                     _Mode_0:	
  5505                           
  5506                           ;functions.c: 248: LightWithSensController();
  5507                           
  5508                           ;incstack = 0
  5509 ;; hardware stack exceeded
  5510                           ; Regs used in _Mode_0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5511  15A5  120A  158A  21A5   	fcall	_LightWithSensController
  5512  15A8  0008               	return
  5513  15A9                     __end_of_Mode_0:	
  5514                           
  5515                           	psect	text28
  5516  09A5                     __ptext28:	
  5517 ;; *************** function _LightWithSensController *****************
  5518 ;; Defined at:
  5519 ;;		line 312 in file "functions.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;		None
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;		None
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  1    wreg      void 
  5526 ;; Registers used:
  5527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5533 ;;      Params:         0       0       0       0       0
  5534 ;;      Locals:         0       0       0       0       0
  5535 ;;      Temps:          0       0       0       0       0
  5536 ;;      Totals:         0       0       0       0       0
  5537 ;;Total ram usage:        0 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; Hardware stack levels required when called:    9
  5540 ;; This function calls:
  5541 ;;		_DarknessCheck
  5542 ;;		_timerFunction
  5543 ;; This function is called by:
  5544 ;;		_Mode_0
  5545 ;;		_Mode_2
  5546 ;;		_Mode_4
  5547 ;;		_Mode_5
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551                           
  5552                           ;psect for function _LightWithSensController
  5553  09A5                     _LightWithSensController:	
  5554                           
  5555                           ;functions.c: 316: if((intSecondCounter == 30)&&(!RC2))
  5556                           
  5557                           ;incstack = 0
  5558 ;; hardware stack exceeded
  5559                           ; Regs used in _LightWithSensController: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5560  09A5  301E               	movlw	30
  5561  09A6  1283               	bcf	3,5	;RP0=0, select bank0
  5562  09A7  1303               	bcf	3,6	;RP1=0, select bank0
  5563  09A8  065E               	xorwf	_intSecondCounter,w
  5564  09A9  045F               	iorwf	_intSecondCounter+1,w
  5565  09AA  1903               	btfsc	3,2
  5566  09AB  1907               	btfsc	7,2	;volatile
  5567  09AC  29B2               	goto	l3805
  5568                           
  5569                           ;functions.c: 317: DarknessCheck();
  5570  09AD  120A  158A  2044  120A  158A  	fcall	_DarknessCheck
  5571  09B2                     l3805:	
  5572                           
  5573                           ;functions.c: 321: if((bDark == 1)&&(RA1)&&(!RC2))
  5574  09B2  1683               	bsf	3,5	;RP0=1, select bank1
  5575  09B3  1303               	bcf	3,6	;RP1=0, select bank1
  5576  09B4  0356               	decf	_bDark^(0+128),w
  5577  09B5  1D03               	btfss	3,2
  5578  09B6  29CB               	goto	l3815
  5579  09B7  1283               	bcf	3,5	;RP0=0, select bank0
  5580  09B8  1303               	bcf	3,6	;RP1=0, select bank0
  5581  09B9  1885               	btfsc	5,1	;volatile
  5582  09BA  1907               	btfsc	7,2	;volatile
  5583  09BB  29CB               	goto	l3815
  5584                           
  5585                           ;functions.c: 322: {
  5586                           ;functions.c: 324: RC2 = 1;
  5587  09BC  1507               	bsf	7,2	;volatile
  5588                           
  5589                           ;functions.c: 326: timerFunction(0,120);
  5590  09BD  3000               	movlw	0
  5591  09BE  1683               	bsf	3,5	;RP0=1, select bank1
  5592  09BF  1303               	bcf	3,6	;RP1=0, select bank1
  5593  09C0  00A0               	movwf	timerFunction@intTimerNumber^(0+128)
  5594  09C1  00A1               	movwf	(timerFunction@intTimerNumber+1)^(0+128)
  5595  09C2  3078               	movlw	120
  5596  09C3  00A2               	movwf	timerFunction@intSetSeconds^(0+128)
  5597  09C4  3000               	movlw	0
  5598  09C5  00A3               	movwf	(timerFunction@intSetSeconds^(0+128)+1)
  5599  09C6  160A  118A  2611  120A  158A  	fcall	_timerFunction
  5600  09CB                     l3815:	
  5601                           
  5602                           ;functions.c: 327: }
  5603                           ;functions.c: 330: if(bTimerComplete[0])
  5604  09CB  1283               	bcf	3,5	;RP0=0, select bank0
  5605  09CC  1303               	bcf	3,6	;RP1=0, select bank0
  5606  09CD  084D               	movf	_bTimerComplete,w
  5607  09CE  1903               	btfsc	3,2
  5608  09CF  0008               	return
  5609                           
  5610                           ;functions.c: 331: {
  5611                           ;functions.c: 332: DarknessCheck();
  5612  09D0  120A  158A  2044  120A  158A  	fcall	_DarknessCheck
  5613                           
  5614                           ;functions.c: 333: if((bDark)&&(RA1))
  5615  09D5  1683               	bsf	3,5	;RP0=1, select bank1
  5616  09D6  1303               	bcf	3,6	;RP1=0, select bank1
  5617  09D7  0856               	movf	_bDark^(0+128),w
  5618  09D8  1903               	btfsc	3,2
  5619  09D9  29EB               	goto	l373
  5620  09DA  1283               	bcf	3,5	;RP0=0, select bank0
  5621  09DB  1303               	bcf	3,6	;RP1=0, select bank0
  5622  09DC  1C85               	btfss	5,1	;volatile
  5623  09DD  29EB               	goto	l373
  5624                           
  5625                           ;functions.c: 334: {
  5626                           ;functions.c: 335: timerFunction(0,120);
  5627  09DE  3000               	movlw	0
  5628  09DF  1683               	bsf	3,5	;RP0=1, select bank1
  5629  09E0  1303               	bcf	3,6	;RP1=0, select bank1
  5630  09E1  00A0               	movwf	timerFunction@intTimerNumber^(0+128)
  5631  09E2  00A1               	movwf	(timerFunction@intTimerNumber+1)^(0+128)
  5632  09E3  3078               	movlw	120
  5633  09E4  00A2               	movwf	timerFunction@intSetSeconds^(0+128)
  5634  09E5  3000               	movlw	0
  5635  09E6  00A3               	movwf	(timerFunction@intSetSeconds^(0+128)+1)
  5636  09E7  160A  118A  2611   	fcall	_timerFunction
  5637                           
  5638                           ;functions.c: 336: }
  5639  09EA  0008               	return
  5640  09EB                     l373:	
  5641                           
  5642                           ;functions.c: 337: else
  5643                           ;functions.c: 338: RC2 = 0;
  5644  09EB  1283               	bcf	3,5	;RP0=0, select bank0
  5645  09EC  1107               	bcf	7,2	;volatile
  5646  09ED  0008               	return
  5647  09EE                     __end_of_LightWithSensController:	
  5648                           
  5649                           	psect	text29
  5650  1611                     __ptext29:	
  5651 ;; *************** function _timerFunction *****************
  5652 ;; Defined at:
  5653 ;;		line 363 in file "functions.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  intTimerNumb    2    0[BANK1 ] int 
  5656 ;;  intSetSecond    2    2[BANK1 ] int 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;		None
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      unsigned char 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5668 ;;      Params:         0       0       4       0       0
  5669 ;;      Locals:         0       0       0       0       0
  5670 ;;      Temps:          0       0       1       0       0
  5671 ;;      Totals:         0       0       5       0       0
  5672 ;;Total ram usage:        5 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    6
  5675 ;; This function calls:
  5676 ;;		Nothing
  5677 ;; This function is called by:
  5678 ;;		_TransiverToReceive
  5679 ;;		_TransiverReadFIFO
  5680 ;;		_TransmittPacket
  5681 ;;		_LightWithSensController
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           
  5686                           ;psect for function _timerFunction
  5687  1611                     _timerFunction:	
  5688                           
  5689                           ;functions.c: 365: intClockTimer[intTimerNumber] = intSetSeconds;
  5690                           
  5691                           ;incstack = 0
  5692                           ; Regs used in _timerFunction: [wreg-fsr0h+status,2+status,0]
  5693  1611  1683               	bsf	3,5	;RP0=1, select bank1
  5694  1612  1303               	bcf	3,6	;RP1=0, select bank1
  5695  1613  0820               	movf	timerFunction@intTimerNumber^(0+128),w
  5696  1614  00A4               	movwf	??_timerFunction^(0+128)
  5697  1615  0724               	addwf	??_timerFunction^(0+128),w
  5698  1616  3E43               	addlw	(low (_intClockTimer| 0))& (0+255)
  5699  1617  0084               	movwf	4
  5700  1618  0822               	movf	timerFunction@intSetSeconds^(0+128),w
  5701  1619  1383               	bcf	3,7	;select IRP bank0
  5702  161A  0080               	movwf	0
  5703  161B  0A84               	incf	4,f
  5704  161C  0823               	movf	(timerFunction@intSetSeconds+1)^(0+128),w
  5705  161D  0080               	movwf	0
  5706                           
  5707                           ;functions.c: 366: bTimerComplete[intTimerNumber] = 0;
  5708  161E  0820               	movf	timerFunction@intTimerNumber^(0+128),w
  5709  161F  3E4D               	addlw	(low (_bTimerComplete| 0))& (0+255)
  5710  1620  0084               	movwf	4
  5711  1621  0180               	clrf	0
  5712  1622  0008               	return
  5713  1623                     __end_of_timerFunction:	
  5714                           ;functions.c: 367: return 1;
  5715                           ;	Return value of _timerFunction is never used
  5716                           
  5717                           
  5718                           	psect	text30
  5719  0844                     __ptext30:	
  5720 ;; *************** function _DarknessCheck *****************
  5721 ;; Defined at:
  5722 ;;		line 898 in file "functions.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;		None
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  darknessValu    1    9[BANK1 ] unsigned char 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0, pclath, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5736 ;;      Params:         0       0       0       0       0
  5737 ;;      Locals:         0       0       1       0       0
  5738 ;;      Temps:          0       0       1       0       0
  5739 ;;      Totals:         0       0       2       0       0
  5740 ;;Total ram usage:        2 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    8
  5743 ;; This function calls:
  5744 ;;		_AnalogValue
  5745 ;;		_eeprom_read
  5746 ;; This function is called by:
  5747 ;;		_ReceivedPacketHandler
  5748 ;;		_Mode_1
  5749 ;;		_LightWithSensController
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           
  5754                           ;psect for function _DarknessCheck
  5755  0844                     _DarknessCheck:	
  5756                           
  5757                           ;functions.c: 900: unsigned char darknessValue;
  5758                           ;functions.c: 901: RC0 = 0;
  5759                           
  5760                           ;incstack = 0
  5761 ;; hardware stack exceeded
  5762                           ; Regs used in _DarknessCheck: [wreg+status,2+status,0+pclath+cstack]
  5763  0844  1283               	bcf	3,5	;RP0=0, select bank0
  5764  0845  1303               	bcf	3,6	;RP1=0, select bank0
  5765  0846  1007               	bcf	7,0	;volatile
  5766                           
  5767                           ;functions.c: 903: if(bValueFromPot == TRUE)
  5768  0847  0363               	decf	_bValueFromPot,w
  5769  0848  1D03               	btfss	3,2
  5770  0849  2851               	goto	l3691
  5771                           
  5772                           ;functions.c: 904: darknessValue= AnalogValue(3);
  5773  084A  3003               	movlw	3
  5774  084B  120A  158A  20F9  120A  158A  	fcall	_AnalogValue
  5775  0850  2857               	goto	L3
  5776  0851                     l3691:	
  5777                           
  5778                           ;functions.c: 905: else
  5779                           ;functions.c: 906: darknessValue=eeprom_read(0);
  5780  0851  3000               	movlw	0
  5781  0852  160A  118A  2769  120A  158A  	fcall	_eeprom_read
  5782  0857                     L3:	
  5783  0857  1683               	bsf	3,5	;RP0=1, select bank1
  5784  0858  1303               	bcf	3,6	;RP1=0, select bank1
  5785  0859  00A8               	movwf	??_DarknessCheck^(0+128)
  5786  085A  0828               	movf	??_DarknessCheck^(0+128),w
  5787  085B  00A9               	movwf	DarknessCheck@darknessValue^(0+128)
  5788                           
  5789                           ;functions.c: 908: if(AnalogValue(0)>darknessValue)
  5790  085C  3000               	movlw	0
  5791  085D  120A  158A  20F9  120A  158A  	fcall	_AnalogValue
  5792  0862  1683               	bsf	3,5	;RP0=1, select bank1
  5793  0863  1303               	bcf	3,6	;RP1=0, select bank1
  5794  0864  0229               	subwf	DarknessCheck@darknessValue^(0+128),w
  5795  0865  1803               	skipnc
  5796  0866  286A               	goto	l3695
  5797                           
  5798                           ;functions.c: 909: bDark = 1;
  5799  0867  01D6               	clrf	_bDark^(0+128)
  5800  0868  0AD6               	incf	_bDark^(0+128),f
  5801  0869  286B               	goto	l3697
  5802  086A                     l3695:	
  5803                           
  5804                           ;functions.c: 910: else
  5805                           ;functions.c: 911: bDark = 0;
  5806  086A  01D6               	clrf	_bDark^(0+128)
  5807  086B                     l3697:	
  5808                           
  5809                           ;functions.c: 912: RC0 = 1;
  5810  086B  1283               	bcf	3,5	;RP0=0, select bank0
  5811  086C  1303               	bcf	3,6	;RP1=0, select bank0
  5812  086D  1407               	bsf	7,0	;volatile
  5813  086E  0008               	return
  5814  086F                     __end_of_DarknessCheck:	
  5815                           
  5816                           	psect	text31
  5817  1769                     __ptext31:	
  5818 ;; *************** function _eeprom_read *****************
  5819 ;; Defined at:
  5820 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eeread.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  addr            1    wreg     unsigned char 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;  addr            1    1[BANK1 ] unsigned char 
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      unsigned char 
  5827 ;; Registers used:
  5828 ;;		wreg, status,2, status,0
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5834 ;;      Params:         0       0       0       0       0
  5835 ;;      Locals:         0       0       1       0       0
  5836 ;;      Temps:          0       0       1       0       0
  5837 ;;      Totals:         0       0       2       0       0
  5838 ;;Total ram usage:        2 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    6
  5841 ;; This function calls:
  5842 ;;		Nothing
  5843 ;; This function is called by:
  5844 ;;		_ReceivedPacketHandler
  5845 ;;		_DarknessCheck
  5846 ;;		_ReadMemoryAdress
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           
  5851                           ;psect for function _eeprom_read
  5852  1769                     _eeprom_read:	
  5853                           
  5854                           ;incstack = 0
  5855 ;; hardware stack exceeded
  5856                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5857                           ;eeprom_read@addr stored from wreg
  5858  1769  1683               	bsf	3,5	;RP0=1, select bank1
  5859  176A  1303               	bcf	3,6	;RP1=0, select bank1
  5860  176B  00A1               	movwf	eeprom_read@addr^(0+128)
  5861  176C  2F6F               	goto	l663
  5862  176D                     u2431:	
  5863  176D  1683               	bsf	3,5	;RP0=1, select bank1
  5864  176E  1303               	bcf	3,6	;RP1=0, select bank1
  5865  176F                     l663:	
  5866  176F  0064               	clrwdt	;# 
  5867  1770  1683               	bsf	3,5	;RP0=1, select bank3
  5868  1771  1703               	bsf	3,6	;RP1=1, select bank3
  5869  1772  188C               	btfsc	12,1	;volsfr
  5870  1773  2F6D               	goto	u2431
  5871  1774  1683               	bsf	3,5	;RP0=1, select bank1
  5872  1775  1303               	bcf	3,6	;RP1=0, select bank1
  5873  1776  0821               	movf	eeprom_read@addr^(0+128),w
  5874  1777  1283               	bcf	3,5	;RP0=0, select bank2
  5875  1778  1703               	bsf	3,6	;RP1=1, select bank2
  5876  1779  008D               	movwf	13	;volatile
  5877  177A  303F               	movlw	63
  5878  177B  1683               	bsf	3,5	;RP0=1, select bank1
  5879  177C  1303               	bcf	3,6	;RP1=0, select bank1
  5880  177D  00A0               	movwf	??_eeprom_read^(0+128)
  5881  177E  0820               	movf	??_eeprom_read^(0+128),w
  5882  177F  1683               	bsf	3,5	;RP0=1, select bank3
  5883  1780  1703               	bsf	3,6	;RP1=1, select bank3
  5884  1781  058C               	andwf	12,f	;volsfr
  5885  1782  140C               	bsf	12,0	;volsfr
  5886  1783  1003               	clrc
  5887  1784  180C               	btfsc	12,0	;volsfr
  5888  1785  1403               	setc
  5889  1786  3000               	movlw	0
  5890  1787  1803               	skipnc
  5891  1788  3001               	movlw	1
  5892  1789  1283               	bcf	3,5	;RP0=0, select bank2
  5893  178A  1703               	bsf	3,6	;RP1=1, select bank2
  5894  178B  080C               	movf	12,w	;volatile
  5895  178C  0008               	return
  5896  178D                     __end_of_eeprom_read:	
  5897                           
  5898                           	psect	text32
  5899  08F9                     __ptext32:	
  5900 ;; *************** function _AnalogValue *****************
  5901 ;; Defined at:
  5902 ;;		line 871 in file "functions.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  channel         1    wreg     unsigned char 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  channel         1    7[BANK1 ] unsigned char 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  1    wreg      unsigned char 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0, pclath, cstack
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5916 ;;      Params:         0       0       0       0       0
  5917 ;;      Locals:         0       0       1       0       0
  5918 ;;      Temps:          0       0       1       0       0
  5919 ;;      Totals:         0       0       2       0       0
  5920 ;;Total ram usage:        2 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    7
  5923 ;; This function calls:
  5924 ;;		_DelayDs
  5925 ;; This function is called by:
  5926 ;;		_ReceivedPacketHandler
  5927 ;;		_DarknessCheck
  5928 ;; This function uses a non-reentrant model
  5929 ;;
  5930                           
  5931                           
  5932                           ;psect for function _AnalogValue
  5933  08F9                     _AnalogValue:	
  5934                           
  5935                           ;incstack = 0
  5936 ;; hardware stack exceeded
  5937                           ; Regs used in _AnalogValue: [wreg+status,2+status,0+pclath+cstack]
  5938                           ;AnalogValue@channel stored from wreg
  5939  08F9  1683               	bsf	3,5	;RP0=1, select bank1
  5940  08FA  1303               	bcf	3,6	;RP1=0, select bank1
  5941  08FB  00A7               	movwf	AnalogValue@channel^(0+128)
  5942                           
  5943                           ;functions.c: 873: ADCON0bits.CHS = channel;
  5944  08FC  0827               	movf	AnalogValue@channel^(0+128),w
  5945  08FD  00A6               	movwf	??_AnalogValue^(0+128)
  5946  08FE  0DA6               	rlf	??_AnalogValue^(0+128),f
  5947  08FF  0DA6               	rlf	??_AnalogValue^(0+128),f
  5948  0900  1283               	bcf	3,5	;RP0=0, select bank0
  5949  0901  1303               	bcf	3,6	;RP1=0, select bank0
  5950  0902  081F               	movf	31,w	;volatile
  5951  0903  1683               	bsf	3,5	;RP0=1, select bank1
  5952  0904  1303               	bcf	3,6	;RP1=0, select bank1
  5953  0905  0626               	xorwf	??_AnalogValue^(0+128),w
  5954  0906  39C3               	andlw	-61
  5955  0907  0626               	xorwf	??_AnalogValue^(0+128),w
  5956  0908  1283               	bcf	3,5	;RP0=0, select bank0
  5957  0909  1303               	bcf	3,6	;RP1=0, select bank0
  5958  090A  009F               	movwf	31	;volatile
  5959                           
  5960                           ;functions.c: 874: ADCON0bits.ADON = 1;
  5961  090B  141F               	bsf	31,0	;volatile
  5962                           
  5963                           ;functions.c: 875: DelayDs(1);
  5964  090C  3001               	movlw	1
  5965  090D  1683               	bsf	3,5	;RP0=1, select bank1
  5966  090E  1303               	bcf	3,6	;RP1=0, select bank1
  5967  090F  00A0               	movwf	DelayDs@cnt^(0+128)
  5968  0910  3000               	movlw	0
  5969  0911  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  5970  0912  160A  118A  2722  120A  158A  	fcall	_DelayDs
  5971                           
  5972                           ;functions.c: 876: ADCON0bits.GO = 1;
  5973  0917  1283               	bcf	3,5	;RP0=0, select bank0
  5974  0918  1303               	bcf	3,6	;RP1=0, select bank0
  5975  0919  149F               	bsf	31,1	;volatile
  5976                           
  5977                           ;functions.c: 877: DelayDs(1);
  5978  091A  3001               	movlw	1
  5979  091B  1683               	bsf	3,5	;RP0=1, select bank1
  5980  091C  1303               	bcf	3,6	;RP1=0, select bank1
  5981  091D  00A0               	movwf	DelayDs@cnt^(0+128)
  5982  091E  3000               	movlw	0
  5983  091F  00A1               	movwf	(DelayDs@cnt^(0+128)+1)
  5984  0920  160A  118A  2722  120A  158A  	fcall	_DelayDs
  5985  0925                     l467:	
  5986                           ;functions.c: 878: while(ADCON0bits.GO);
  5987                           
  5988  0925  1283               	bcf	3,5	;RP0=0, select bank0
  5989  0926  1303               	bcf	3,6	;RP1=0, select bank0
  5990  0927  189F               	btfsc	31,1	;volatile
  5991  0928  2925               	goto	l467
  5992                           
  5993                           ;functions.c: 879: ADCON0bits.ADON = 0;
  5994  0929  101F               	bcf	31,0	;volatile
  5995                           
  5996                           ;functions.c: 880: return ADRESH;
  5997  092A  081E               	movf	30,w	;volatile
  5998  092B  0008               	return
  5999  092C                     __end_of_AnalogValue:	
  6000                           
  6001                           	psect	text33
  6002  1722                     __ptext33:	
  6003 ;; *************** function _DelayDs *****************
  6004 ;; Defined at:
  6005 ;;		line 481 in file "functions.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  cnt             2    0[BANK1 ] int 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  i               2    4[BANK1 ] int 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		wreg, status,2
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6019 ;;      Params:         0       0       2       0       0
  6020 ;;      Locals:         0       0       2       0       0
  6021 ;;      Temps:          0       0       2       0       0
  6022 ;;      Totals:         0       0       6       0       0
  6023 ;;Total ram usage:        6 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    6
  6026 ;; This function calls:
  6027 ;;		Nothing
  6028 ;; This function is called by:
  6029 ;;		_ReceivedPacketHandler
  6030 ;;		_Blink
  6031 ;;		_AnalogValue
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           
  6036                           ;psect for function _DelayDs
  6037  1722                     _DelayDs:	
  6038                           
  6039                           ;functions.c: 482: int i;
  6040                           ;functions.c: 483: for(i=0;i<cnt;i++){
  6041                           
  6042                           ;incstack = 0
  6043 ;; hardware stack exceeded
  6044                           ; Regs used in _DelayDs: [wreg+status,2]
  6045  1722  1683               	bsf	3,5	;RP0=1, select bank1
  6046  1723  1303               	bcf	3,6	;RP1=0, select bank1
  6047  1724  01A4               	clrf	DelayDs@i^(0+128)
  6048  1725  01A5               	clrf	(DelayDs@i+1)^(0+128)
  6049  1726                     l397:	
  6050  1726  0825               	movf	(DelayDs@i+1)^(0+128),w
  6051  1727  3A80               	xorlw	128
  6052  1728  00A2               	movwf	??_DelayDs^(0+128)
  6053  1729  0821               	movf	(DelayDs@cnt+1)^(0+128),w
  6054  172A  3A80               	xorlw	128
  6055  172B  0222               	subwf	??_DelayDs^(0+128),w
  6056  172C  1D03               	skipz
  6057  172D  2F30               	goto	u2425
  6058  172E  0820               	movf	DelayDs@cnt^(0+128),w
  6059  172F  0224               	subwf	DelayDs@i^(0+128),w
  6060  1730                     u2425:	
  6061  1730  1803               	btfsc	3,0
  6062  1731  0008               	return
  6063                           
  6064                           ;functions.c: 484: _delay((unsigned long)((100)*(4000000/4000.0)));
  6065  1732  3082               	movlw	130
  6066  1733  1683               	bsf	3,5	;RP0=1, select bank1
  6067  1734  1303               	bcf	3,6	;RP1=0, select bank1
  6068  1735  00A3               	movwf	(??_DelayDs^(0+128)+1)
  6069  1736  30DD               	movlw	221
  6070  1737  00A2               	movwf	??_DelayDs^(0+128)
  6071  1738                     u3297:	
  6072  1738  0BA2               	decfsz	??_DelayDs^(0+128),f
  6073  1739  2F38               	goto	u3297
  6074  173A  0BA3               	decfsz	(??_DelayDs^(0+128)+1),f
  6075  173B  2F38               	goto	u3297
  6076  173C  3001               	movlw	1
  6077  173D  1683               	bsf	3,5	;RP0=1, select bank1
  6078  173E  1303               	bcf	3,6	;RP1=0, select bank1
  6079  173F  07A4               	addwf	DelayDs@i^(0+128),f
  6080  1740  1803               	skipnc
  6081  1741  0AA5               	incf	(DelayDs@i+1)^(0+128),f
  6082  1742  3000               	movlw	0
  6083  1743  07A5               	addwf	(DelayDs@i+1)^(0+128),f
  6084  1744  2F26               	goto	l397
  6085  1745                     __end_of_DelayDs:	
  6086                           
  6087                           	psect	text34
  6088  0C53                     __ptext34:	
  6089 ;; *************** function _ClockInit *****************
  6090 ;; Defined at:
  6091 ;;		line 6 in file "MCP79510.c"
  6092 ;; Parameters:    Size  Location     Type
  6093 ;;		None
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;  cnt             1    4[BANK1 ] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  1    wreg      void 
  6098 ;; Registers used:
  6099 ;;		wreg, status,2, status,0, pclath, cstack
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6105 ;;      Params:         0       0       0       0       0
  6106 ;;      Locals:         0       0       1       0       0
  6107 ;;      Temps:          0       0       1       0       0
  6108 ;;      Totals:         0       0       2       0       0
  6109 ;;Total ram usage:        2 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    8
  6112 ;; This function calls:
  6113 ;;		_ReadSPI
  6114 ;;		_WriteSPI
  6115 ;; This function is called by:
  6116 ;;		_main
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           
  6121                           ;psect for function _ClockInit
  6122  0C53                     _ClockInit:	
  6123                           
  6124                           ;MCP79510.c: 8: RD4 = 0;
  6125                           
  6126                           ;incstack = 0
  6127 ;; hardware stack exceeded
  6128                           ; Regs used in _ClockInit: [wreg+status,2+status,0+pclath+cstack]
  6129  0C53  1283               	bcf	3,5	;RP0=0, select bank0
  6130  0C54  1303               	bcf	3,6	;RP1=0, select bank0
  6131  0C55  1208               	bcf	8,4	;volatile
  6132                           
  6133                           ;MCP79510.c: 9: WriteSPI(0x12);
  6134  0C56  3012               	movlw	18
  6135  0C57  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6136                           
  6137                           ;MCP79510.c: 10: WriteSPI(0x01);
  6138  0C5C  3001               	movlw	1
  6139  0C5D  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6140                           
  6141                           ;MCP79510.c: 11: WriteSPI(0x00);
  6142  0C62  3000               	movlw	0
  6143  0C63  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6144                           
  6145                           ;MCP79510.c: 12: RD4 = 1;
  6146  0C68  1283               	bcf	3,5	;RP0=0, select bank0
  6147  0C69  1303               	bcf	3,6	;RP1=0, select bank0
  6148  0C6A  1608               	bsf	8,4	;volatile
  6149                           
  6150                           ;MCP79510.c: 13: _delay((unsigned long)((40)*(4000000/4000000.0)));
  6151  0C6B  300C               	movlw	12
  6152  0C6C  1683               	bsf	3,5	;RP0=1, select bank1
  6153  0C6D  1303               	bcf	3,6	;RP1=0, select bank1
  6154  0C6E  00A3               	movwf	??_ClockInit^(0+128)
  6155  0C6F                     u3307:	
  6156  0C6F  0BA3               	decfsz	??_ClockInit^(0+128),f
  6157  0C70  2C6F               	goto	u3307
  6158  0C71  0000               	nop
  6159                           
  6160                           ;MCP79510.c: 14: RD4 = 0;
  6161  0C72  1283               	bcf	3,5	;RP0=0, select bank0
  6162  0C73  1303               	bcf	3,6	;RP1=0, select bank0
  6163  0C74  1208               	bcf	8,4	;volatile
  6164                           
  6165                           ;MCP79510.c: 15: WriteSPI(0x12);
  6166  0C75  3012               	movlw	18
  6167  0C76  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6168                           
  6169                           ;MCP79510.c: 16: WriteSPI(0x02);
  6170  0C7B  3002               	movlw	2
  6171  0C7C  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6172                           
  6173                           ;MCP79510.c: 17: WriteSPI(0x00);
  6174  0C81  3000               	movlw	0
  6175  0C82  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6176                           
  6177                           ;MCP79510.c: 18: RD4 = 1;
  6178  0C87  1283               	bcf	3,5	;RP0=0, select bank0
  6179  0C88  1303               	bcf	3,6	;RP1=0, select bank0
  6180  0C89  1608               	bsf	8,4	;volatile
  6181                           
  6182                           ;MCP79510.c: 19: _delay((unsigned long)((40)*(4000000/4000000.0)));
  6183  0C8A  300C               	movlw	12
  6184  0C8B  1683               	bsf	3,5	;RP0=1, select bank1
  6185  0C8C  1303               	bcf	3,6	;RP1=0, select bank1
  6186  0C8D  00A3               	movwf	??_ClockInit^(0+128)
  6187  0C8E                     u3317:	
  6188  0C8E  0BA3               	decfsz	??_ClockInit^(0+128),f
  6189  0C8F  2C8E               	goto	u3317
  6190  0C90  0000               	nop
  6191                           
  6192                           ;MCP79510.c: 20: RD4 = 0;
  6193  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  6194  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  6195  0C93  1208               	bcf	8,4	;volatile
  6196                           
  6197                           ;MCP79510.c: 21: WriteSPI(0x12);
  6198  0C94  3012               	movlw	18
  6199  0C95  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6200                           
  6201                           ;MCP79510.c: 22: WriteSPI(0x08);
  6202  0C9A  3008               	movlw	8
  6203  0C9B  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6204                           
  6205                           ;MCP79510.c: 23: WriteSPI(0x00);
  6206  0CA0  3000               	movlw	0
  6207  0CA1  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6208                           
  6209                           ;MCP79510.c: 24: RD4 = 1;
  6210  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  6211  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  6212  0CA8  1608               	bsf	8,4	;volatile
  6213                           
  6214                           ;MCP79510.c: 25: _delay((unsigned long)((40)*(4000000/4000000.0)));
  6215  0CA9  300C               	movlw	12
  6216  0CAA  1683               	bsf	3,5	;RP0=1, select bank1
  6217  0CAB  1303               	bcf	3,6	;RP1=0, select bank1
  6218  0CAC  00A3               	movwf	??_ClockInit^(0+128)
  6219  0CAD                     u3327:	
  6220  0CAD  0BA3               	decfsz	??_ClockInit^(0+128),f
  6221  0CAE  2CAD               	goto	u3327
  6222  0CAF  0000               	nop
  6223                           
  6224                           ;MCP79510.c: 26: RD4 = 0;
  6225  0CB0  1283               	bcf	3,5	;RP0=0, select bank0
  6226  0CB1  1303               	bcf	3,6	;RP1=0, select bank0
  6227  0CB2  1208               	bcf	8,4	;volatile
  6228                           
  6229                           ;MCP79510.c: 27: WriteSPI(0x12);
  6230  0CB3  3012               	movlw	18
  6231  0CB4  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6232                           
  6233                           ;MCP79510.c: 28: WriteSPI(0x01);
  6234  0CB9  3001               	movlw	1
  6235  0CBA  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6236                           
  6237                           ;MCP79510.c: 29: WriteSPI(0x80);
  6238  0CBF  3080               	movlw	128
  6239  0CC0  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6240                           
  6241                           ;MCP79510.c: 30: RD4 = 1;
  6242  0CC5  1283               	bcf	3,5	;RP0=0, select bank0
  6243  0CC6  1303               	bcf	3,6	;RP1=0, select bank0
  6244  0CC7  1608               	bsf	8,4	;volatile
  6245                           
  6246                           ;MCP79510.c: 32: char cnt = 0;
  6247  0CC8  1683               	bsf	3,5	;RP0=1, select bank1
  6248  0CC9  1303               	bcf	3,6	;RP1=0, select bank1
  6249  0CCA  01A4               	clrf	ClockInit@cnt^(0+128)
  6250  0CCB                     l3975:	
  6251                           ;MCP79510.c: 33: while(cnt < 100)
  6252                           
  6253  0CCB  3064               	movlw	100
  6254  0CCC  0224               	subwf	ClockInit@cnt^(0+128),w
  6255  0CCD  1803               	btfsc	3,0
  6256  0CCE  2CED               	goto	l646
  6257                           
  6258                           ;MCP79510.c: 34: {
  6259                           ;MCP79510.c: 35: RD4 = 0;
  6260  0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  6261  0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  6262  0CD1  1208               	bcf	8,4	;volatile
  6263                           
  6264                           ;MCP79510.c: 36: WriteSPI(0x13);
  6265  0CD2  3013               	movlw	19
  6266  0CD3  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6267                           
  6268                           ;MCP79510.c: 37: WriteSPI(0x04);
  6269  0CD8  3004               	movlw	4
  6270  0CD9  160A  118A  265B  120A  158A  	fcall	_WriteSPI
  6271                           
  6272                           ;MCP79510.c: 38: if((ReadSPI() & 0b00100000) != 0)
  6273  0CDE  160A  118A  25B1  120A  158A  	fcall	_ReadSPI
  6274  0CE3  3920               	andlw	32
  6275  0CE4  1D03               	btfss	3,2
  6276  0CE5  2CED               	goto	l646
  6277                           
  6278                           ;MCP79510.c: 42: }
  6279                           ;MCP79510.c: 43: cnt++;
  6280                           
  6281                           ;MCP79510.c: 39: {
  6282                           ;MCP79510.c: 40: break;
  6283  0CE6  3001               	movlw	1
  6284  0CE7  1683               	bsf	3,5	;RP0=1, select bank1
  6285  0CE8  1303               	bcf	3,6	;RP1=0, select bank1
  6286  0CE9  00A3               	movwf	??_ClockInit^(0+128)
  6287  0CEA  0823               	movf	??_ClockInit^(0+128),w
  6288  0CEB  07A4               	addwf	ClockInit@cnt^(0+128),f
  6289  0CEC  2CCB               	goto	l3975
  6290  0CED                     l646:	
  6291                           
  6292                           ;MCP79510.c: 46: }
  6293                           ;MCP79510.c: 47: RD4 = 1;
  6294  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  6295  0CEE  1303               	bcf	3,6	;RP1=0, select bank0
  6296  0CEF  1608               	bsf	8,4	;volatile
  6297  0CF0  0008               	return
  6298  0CF1                     __end_of_ClockInit:	
  6299                           
  6300                           	psect	text35
  6301  15B1                     __ptext35:	
  6302 ;; *************** function _ReadSPI *****************
  6303 ;; Defined at:
  6304 ;;		line 502 in file "functions.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;		None
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;		None
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  1    wreg      unsigned char 
  6311 ;; Registers used:
  6312 ;;		wreg, status,2, status,0, pclath, cstack
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6318 ;;      Params:         0       0       0       0       0
  6319 ;;      Locals:         0       0       0       0       0
  6320 ;;      Temps:          0       0       0       0       0
  6321 ;;      Totals:         0       0       0       0       0
  6322 ;;Total ram usage:        0 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    7
  6325 ;; This function calls:
  6326 ;;		_WriteSPI
  6327 ;; This function is called by:
  6328 ;;		_RegisterRead
  6329 ;;		_ReadFIFO
  6330 ;;		_read_ram_status
  6331 ;;		_read_write_flash_ram
  6332 ;;		_ClockInit
  6333 ;;		_read_ram_id
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           
  6338                           ;psect for function _ReadSPI
  6339  15B1                     _ReadSPI:	
  6340                           
  6341                           ;functions.c: 504: WriteSPI(0x00);
  6342                           
  6343                           ;incstack = 0
  6344 ;; hardware stack exceeded
  6345                           ; Regs used in _ReadSPI: [wreg+status,2+status,0+pclath+cstack]
  6346  15B1  3000               	movlw	0
  6347  15B2  160A  118A  265B   	fcall	_WriteSPI
  6348                           
  6349                           ;functions.c: 505: return SSPBUF;
  6350  15B5  1283               	bcf	3,5	;RP0=0, select bank0
  6351  15B6  1303               	bcf	3,6	;RP1=0, select bank0
  6352  15B7  0813               	movf	19,w	;volatile
  6353  15B8  0008               	return
  6354  15B9                     __end_of_ReadSPI:	
  6355                           
  6356                           	psect	text36
  6357  165B                     __ptext36:	
  6358 ;; *************** function _WriteSPI *****************
  6359 ;; Defined at:
  6360 ;;		line 490 in file "functions.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  databyte        1    wreg     unsigned char 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  databyte        1    2[BANK1 ] unsigned char 
  6365 ;;  buffer          1    1[BANK1 ] unsigned char 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  1    wreg      void 
  6368 ;; Registers used:
  6369 ;;		wreg
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6375 ;;      Params:         0       0       0       0       0
  6376 ;;      Locals:         0       0       2       0       0
  6377 ;;      Temps:          0       0       1       0       0
  6378 ;;      Totals:         0       0       3       0       0
  6379 ;;Total ram usage:        3 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    6
  6382 ;; This function calls:
  6383 ;;		Nothing
  6384 ;; This function is called by:
  6385 ;;		_ReadSPI
  6386 ;;		_RegisterRead
  6387 ;;		_RegisterSet
  6388 ;;		_WriteFIFO
  6389 ;;		_read_ram_status
  6390 ;;		_ram_bulk_erase
  6391 ;;		_read_write_flash_ram
  6392 ;;		_write_ram_status
  6393 ;;		_ClockInit
  6394 ;;		_read_ram_id
  6395 ;;		_ram_sector_erase
  6396 ;;		_power_up_flash_ram
  6397 ;;		_power_down_flash_ram
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           
  6402                           ;psect for function _WriteSPI
  6403  165B                     _WriteSPI:	
  6404                           
  6405                           ;incstack = 0
  6406 ;; hardware stack exceeded
  6407                           ; Regs used in _WriteSPI: [wreg]
  6408                           ;WriteSPI@databyte stored from wreg
  6409  165B  1683               	bsf	3,5	;RP0=1, select bank1
  6410  165C  1303               	bcf	3,6	;RP1=0, select bank1
  6411  165D  00A2               	movwf	WriteSPI@databyte^(0+128)
  6412                           
  6413                           ;functions.c: 492: unsigned char buffer;
  6414                           ;functions.c: 493: buffer = SSPBUF;
  6415  165E  1283               	bcf	3,5	;RP0=0, select bank0
  6416  165F  1303               	bcf	3,6	;RP1=0, select bank0
  6417  1660  0813               	movf	19,w	;volatile
  6418  1661  1683               	bsf	3,5	;RP0=1, select bank1
  6419  1662  1303               	bcf	3,6	;RP1=0, select bank1
  6420  1663  00A0               	movwf	??_WriteSPI^(0+128)
  6421  1664  0820               	movf	??_WriteSPI^(0+128),w
  6422  1665  00A1               	movwf	WriteSPI@buffer^(0+128)
  6423                           
  6424                           ;functions.c: 494: PIR1bits.SSPIF=0;
  6425  1666  1283               	bcf	3,5	;RP0=0, select bank0
  6426  1667  1303               	bcf	3,6	;RP1=0, select bank0
  6427  1668  118C               	bcf	12,3	;volatile
  6428                           
  6429                           ;functions.c: 495: SSPBUF = databyte;
  6430  1669  1683               	bsf	3,5	;RP0=1, select bank1
  6431  166A  1303               	bcf	3,6	;RP1=0, select bank1
  6432  166B  0822               	movf	WriteSPI@databyte^(0+128),w
  6433  166C  1283               	bcf	3,5	;RP0=0, select bank0
  6434  166D  1303               	bcf	3,6	;RP1=0, select bank0
  6435  166E  0093               	movwf	19	;volatile
  6436  166F                     l403:	
  6437                           ;functions.c: 496: while(PIR1bits.SSPIF == 0);
  6438                           
  6439  166F  1D8C               	btfss	12,3	;volatile
  6440  1670  2E6F               	goto	l403
  6441                           
  6442                           ;functions.c: 497: PIR1bits.SSPIF = 0;
  6443  1671  118C               	bcf	12,3	;volatile
  6444  1672  0008               	return
  6445  1673                     __end_of_WriteSPI:	
  6446                           
  6447                           	psect	text37
  6448  0E52                     __ptext37:	
  6449 ;; *************** function _tc_int *****************
  6450 ;; Defined at:
  6451 ;;		line 796 in file "functions.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;		None
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;		None
  6456 ;; Return value:  Size  Location     Type
  6457 ;;                  1    wreg      void 
  6458 ;; Registers used:
  6459 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6465 ;;      Params:         0       0       0       0       0
  6466 ;;      Locals:         0       0       0       0       0
  6467 ;;      Temps:          0       7       0       0       0
  6468 ;;      Totals:         0       7       0       0       0
  6469 ;;Total ram usage:        7 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:    5
  6472 ;; This function calls:
  6473 ;;		_TimerCounter
  6474 ;;		_saveDataToFlash
  6475 ;;		i1_OperationMode
  6476 ;; This function is called by:
  6477 ;;		Interrupt level 1
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           
  6482                           ;psect for function _tc_int
  6483  0E52                     _tc_int:	
  6484                           
  6485                           ;functions.c: 799: if((RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2)){
  6486  0E52  1A86               	btfsc	6,5	;volatile
  6487  0E53  2E6A               	goto	i1l3285
  6488  0E54  0856               	movf	_intBlinkCycle,w
  6489  0E55  0457               	iorwf	_intBlinkCycle+1,w
  6490  0E56  1D03               	btfss	3,2
  6491  0E57  2E6A               	goto	i1l3285
  6492  0E58  160A  118A  25C1  120A  158A  	fcall	i1_OperationMode
  6493  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  6494  0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  6495  0E5F  00BC               	movwf	??_tc_int
  6496  0E60  3002               	movlw	2
  6497  0E61  023C               	subwf	??_tc_int,w
  6498  0E62  1803               	skipnc
  6499  0E63  2E6A               	goto	i1l3285
  6500                           
  6501                           ;functions.c: 800: intBlinkCycle = 1;
  6502  0E64  3001               	movlw	1
  6503  0E65  00D6               	movwf	_intBlinkCycle
  6504  0E66  3000               	movlw	0
  6505  0E67  00D7               	movwf	_intBlinkCycle+1
  6506                           
  6507                           ;functions.c: 801: intBlinkCounter = 0;
  6508  0E68  01D4               	clrf	_intBlinkCounter
  6509  0E69  01D5               	clrf	_intBlinkCounter+1
  6510  0E6A                     i1l3285:	
  6511                           
  6512                           ;functions.c: 803: }
  6513                           ;functions.c: 806: if(TMR1IF ==1){
  6514  0E6A  1C0C               	btfss	12,0	;volatile
  6515  0E6B  2F09               	goto	L4
  6516                           
  6517                           ;functions.c: 807: TMR1ON = 0;
  6518  0E6C  1010               	bcf	16,0	;volatile
  6519                           
  6520                           ;functions.c: 808: TMR1H = 0x0B;
  6521  0E6D  300B               	movlw	11
  6522  0E6E  008F               	movwf	15	;volatile
  6523                           
  6524                           ;functions.c: 809: TMR1L = 0xDB;
  6525  0E6F  30DB               	movlw	219
  6526  0E70  008E               	movwf	14	;volatile
  6527                           
  6528                           ;functions.c: 811: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
  6529  0E71  0356               	decf	_intBlinkCycle,w
  6530  0E72  0457               	iorwf	_intBlinkCycle+1,w
  6531  0E73  1D03               	btfss	3,2
  6532  0E74  2E98               	goto	i1l3303
  6533  0E75  0862               	movf	_intNumberOfBlinks+1,w
  6534  0E76  00BD               	movwf	??_tc_int+1
  6535  0E77  0861               	movf	_intNumberOfBlinks,w
  6536  0E78  00BC               	movwf	??_tc_int
  6537  0E79  1003               	clrc
  6538  0E7A  0DBC               	rlf	??_tc_int,f
  6539  0E7B  0DBD               	rlf	??_tc_int+1,f
  6540  0E7C  0855               	movf	_intBlinkCounter+1,w
  6541  0E7D  3A80               	xorlw	128
  6542  0E7E  00BE               	movwf	??_tc_int+2
  6543  0E7F  083D               	movf	??_tc_int+1,w
  6544  0E80  3A80               	xorlw	128
  6545  0E81  023E               	subwf	??_tc_int+2,w
  6546  0E82  1D03               	skipz
  6547  0E83  2E86               	goto	u228_25
  6548  0E84  083C               	movf	??_tc_int,w
  6549  0E85  0254               	subwf	_intBlinkCounter,w
  6550  0E86                     u228_25:	
  6551  0E86  1803               	skipnc
  6552  0E87  2E98               	goto	i1l3303
  6553                           
  6554                           ;functions.c: 812: intBlinkCounter++;
  6555  0E88  3001               	movlw	1
  6556  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  6557  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  6558  0E8B  07D4               	addwf	_intBlinkCounter,f
  6559  0E8C  1803               	skipnc
  6560  0E8D  0AD5               	incf	_intBlinkCounter+1,f
  6561  0E8E  3000               	movlw	0
  6562  0E8F  07D5               	addwf	_intBlinkCounter+1,f
  6563                           
  6564                           ;functions.c: 814: if(RB1 == 0)
  6565  0E90  1886               	btfsc	6,1	;volatile
  6566  0E91  2E94               	goto	i1l456
  6567                           
  6568                           ;functions.c: 815: RB1 = 1;
  6569  0E92  1486               	bsf	6,1	;volatile
  6570  0E93  2EB6               	goto	i1l3311
  6571  0E94                     i1l456:	
  6572                           
  6573                           ;functions.c: 816: else if(RB1 == 1)
  6574  0E94  1C86               	btfss	6,1	;volatile
  6575  0E95  2EB6               	goto	i1l3311
  6576                           
  6577                           ;functions.c: 817: RB1 = 0;
  6578  0E96  1086               	bcf	6,1	;volatile
  6579                           
  6580                           ;functions.c: 818: }
  6581  0E97  2EB6               	goto	i1l3311
  6582  0E98                     i1l3303:	
  6583                           
  6584                           ;functions.c: 820: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
  6585  0E98  1283               	bcf	3,5	;RP0=0, select bank0
  6586  0E99  1303               	bcf	3,6	;RP1=0, select bank0
  6587  0E9A  0356               	decf	_intBlinkCycle,w
  6588  0E9B  0457               	iorwf	_intBlinkCycle+1,w
  6589  0E9C  1D03               	btfss	3,2
  6590  0E9D  2EB6               	goto	i1l3311
  6591  0E9E  0862               	movf	_intNumberOfBlinks+1,w
  6592  0E9F  00BD               	movwf	??_tc_int+1
  6593  0EA0  0861               	movf	_intNumberOfBlinks,w
  6594  0EA1  00BC               	movwf	??_tc_int
  6595  0EA2  1003               	clrc
  6596  0EA3  0DBC               	rlf	??_tc_int,f
  6597  0EA4  0DBD               	rlf	??_tc_int+1,f
  6598  0EA5  0855               	movf	_intBlinkCounter+1,w
  6599  0EA6  3A80               	xorlw	128
  6600  0EA7  00BE               	movwf	??_tc_int+2
  6601  0EA8  083D               	movf	??_tc_int+1,w
  6602  0EA9  3A80               	xorlw	128
  6603  0EAA  023E               	subwf	??_tc_int+2,w
  6604  0EAB  1D03               	skipz
  6605  0EAC  2EAF               	goto	u232_25
  6606  0EAD  083C               	movf	??_tc_int,w
  6607  0EAE  0254               	subwf	_intBlinkCounter,w
  6608  0EAF                     u232_25:	
  6609  0EAF  1C03               	skipc
  6610  0EB0  2EB6               	goto	i1l3311
  6611                           
  6612                           ;functions.c: 821: intBlinkCycle = 0;
  6613  0EB1  1283               	bcf	3,5	;RP0=0, select bank0
  6614  0EB2  1303               	bcf	3,6	;RP1=0, select bank0
  6615  0EB3  01D6               	clrf	_intBlinkCycle
  6616  0EB4  01D7               	clrf	_intBlinkCycle+1
  6617                           
  6618                           ;functions.c: 822: RC1 = 0;
  6619  0EB5  1087               	bcf	7,1	;volatile
  6620  0EB6                     i1l3311:	
  6621                           
  6622                           ;functions.c: 823: }
  6623                           ;functions.c: 826: intHalfSecondCounter++;
  6624  0EB6  3001               	movlw	1
  6625  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
  6626  0EB8  1303               	bcf	3,6	;RP1=0, select bank0
  6627  0EB9  07DA               	addwf	_intHalfSecondCounter,f
  6628  0EBA  1803               	skipnc
  6629  0EBB  0ADB               	incf	_intHalfSecondCounter+1,f
  6630  0EBC  3000               	movlw	0
  6631  0EBD  07DB               	addwf	_intHalfSecondCounter+1,f
  6632                           
  6633                           ;functions.c: 827: if(intHalfSecondCounter>=2)
  6634  0EBE  085B               	movf	_intHalfSecondCounter+1,w
  6635  0EBF  3A80               	xorlw	128
  6636  0EC0  00FF               	movwf	127
  6637  0EC1  3080               	movlw	128
  6638  0EC2  027F               	subwf	127,w
  6639  0EC3  1D03               	skipz
  6640  0EC4  2EC7               	goto	u233_25
  6641  0EC5  3002               	movlw	2
  6642  0EC6  025A               	subwf	_intHalfSecondCounter,w
  6643  0EC7                     u233_25:	
  6644  0EC7  1C03               	skipc
  6645  0EC8  2ED8               	goto	i1l3321
  6646                           
  6647                           ;functions.c: 828: {
  6648                           ;functions.c: 829: intHalfSecondCounter = 0;
  6649  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  6650  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  6651  0ECB  01DA               	clrf	_intHalfSecondCounter
  6652  0ECC  01DB               	clrf	_intHalfSecondCounter+1
  6653                           
  6654                           ;functions.c: 830: intSecondCounter++;
  6655  0ECD  3001               	movlw	1
  6656  0ECE  07DE               	addwf	_intSecondCounter,f
  6657  0ECF  1803               	skipnc
  6658  0ED0  0ADF               	incf	_intSecondCounter+1,f
  6659  0ED1  3000               	movlw	0
  6660  0ED2  07DF               	addwf	_intSecondCounter+1,f
  6661                           
  6662                           ;functions.c: 831: TimerCounter();
  6663  0ED3  120A  158A  2163  120A  158A  	fcall	_TimerCounter
  6664  0ED8                     i1l3321:	
  6665                           
  6666                           ;functions.c: 833: }
  6667                           ;functions.c: 834: if(intSecondCounter >=60)
  6668  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  6669  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  6670  0EDA  085F               	movf	_intSecondCounter+1,w
  6671  0EDB  3A80               	xorlw	128
  6672  0EDC  00FF               	movwf	127
  6673  0EDD  3080               	movlw	128
  6674  0EDE  027F               	subwf	127,w
  6675  0EDF  1D03               	skipz
  6676  0EE0  2EE3               	goto	u234_25
  6677  0EE1  303C               	movlw	60
  6678  0EE2  025E               	subwf	_intSecondCounter,w
  6679  0EE3                     u234_25:	
  6680  0EE3  1C03               	skipc
  6681  0EE4  2EF4               	goto	i1l3329
  6682                           
  6683                           ;functions.c: 835: {
  6684                           ;functions.c: 836: intSecondCounter = 0;
  6685  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  6686  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  6687  0EE7  01DE               	clrf	_intSecondCounter
  6688  0EE8  01DF               	clrf	_intSecondCounter+1
  6689                           
  6690                           ;functions.c: 837: intMinuteCounter++;
  6691  0EE9  3001               	movlw	1
  6692  0EEA  07DC               	addwf	_intMinuteCounter,f
  6693  0EEB  1803               	skipnc
  6694  0EEC  0ADD               	incf	_intMinuteCounter+1,f
  6695  0EED  3000               	movlw	0
  6696  0EEE  07DD               	addwf	_intMinuteCounter+1,f
  6697                           
  6698                           ;functions.c: 838: saveDataToFlash();
  6699  0EEF  120A  118A  203F  120A  158A  	fcall	_saveDataToFlash
  6700  0EF4                     i1l3329:	
  6701                           
  6702                           ;functions.c: 840: }
  6703                           ;functions.c: 841: if(intMinuteCounter >= 60)
  6704  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  6705  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  6706  0EF6  085D               	movf	_intMinuteCounter+1,w
  6707  0EF7  3A80               	xorlw	128
  6708  0EF8  00FF               	movwf	127
  6709  0EF9  3080               	movlw	128
  6710  0EFA  027F               	subwf	127,w
  6711  0EFB  1D03               	skipz
  6712  0EFC  2EFF               	goto	u235_25
  6713  0EFD  303C               	movlw	60
  6714  0EFE  025C               	subwf	_intMinuteCounter,w
  6715  0EFF                     u235_25:	
  6716  0EFF  1C03               	skipc
  6717  0F00  2F05               	goto	i1l3333
  6718                           
  6719                           ;functions.c: 842: {
  6720                           ;functions.c: 843: intMinuteCounter = 0;
  6721  0F01  1283               	bcf	3,5	;RP0=0, select bank0
  6722  0F02  1303               	bcf	3,6	;RP1=0, select bank0
  6723  0F03  01DC               	clrf	_intMinuteCounter
  6724  0F04  01DD               	clrf	_intMinuteCounter+1
  6725  0F05                     i1l3333:	
  6726                           
  6727                           ;functions.c: 844: }
  6728                           ;functions.c: 847: TMR1ON = 1;
  6729  0F05  1283               	bcf	3,5	;RP0=0, select bank0
  6730  0F06  1303               	bcf	3,6	;RP1=0, select bank0
  6731  0F07  1410               	bsf	16,0	;volatile
  6732                           
  6733                           ;functions.c: 848: }
  6734                           ;functions.c: 849: TMR1IF = 0;
  6735  0F08  100C               	bcf	12,0	;volatile
  6736  0F09                     L4:	
  6737                           
  6738                           ;functions.c: 850: RBIF = 0;
  6739  0F09  100B               	bcf	11,0	;volatile
  6740                           
  6741                           ;functions.c: 851: GIE = 1;
  6742  0F0A  178B               	bsf	11,7	;volatile
  6743                           
  6744                           ;functions.c: 852: return;
  6745  0F0B  0842               	movf	??_tc_int+6,w
  6746  0F0C  00FF               	movwf	127
  6747  0F0D  0841               	movf	??_tc_int+5,w
  6748  0F0E  008A               	movwf	10
  6749  0F0F  0840               	movf	??_tc_int+4,w
  6750  0F10  0084               	movwf	4
  6751  0F11  0E3F               	swapf	(??_tc_int+3)^0,w
  6752  0F12  0083               	movwf	3
  6753  0F13  0EFE               	swapf	126,f
  6754  0F14  0E7E               	swapf	126,w
  6755  0F15  0009               	retfie
  6756  0F16                     __end_of_tc_int:	
  6757                           
  6758                           	psect	intentry
  6759  0004                     __pintentry:	
  6760                           ;incstack = 0
  6761 ;; hardware stack exceeded
  6762                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6763                           
  6764  0004                     interrupt_function:	
  6765  007E                     saved_w	set	btemp
  6766  0004  00FE               	movwf	btemp
  6767  0005  0E03               	swapf	3,w
  6768  0006  1283               	bcf	3,5	;RP0=0, select bank0
  6769  0007  1303               	bcf	3,6	;RP1=0, select bank0
  6770  0008  00BF               	movwf	??_tc_int+3
  6771  0009  0804               	movf	4,w
  6772  000A  00C0               	movwf	??_tc_int+4
  6773  000B  080A               	movf	10,w
  6774  000C  00C1               	movwf	??_tc_int+5
  6775  000D  087F               	movf	btemp+1,w
  6776  000E  00C2               	movwf	??_tc_int+6
  6777  000F  120A  158A  2E52   	ljmp	_tc_int
  6778                           
  6779                           	psect	text38
  6780  15C1                     __ptext38:	
  6781 ;; *************** function i1_OperationMode *****************
  6782 ;; Defined at:
  6783 ;;		line 932 in file "functions.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;  OperationMod    1    1[COMMON] unsigned char 
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      unsigned char 
  6790 ;; Registers used:
  6791 ;;		wreg, status,2
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6797 ;;      Params:         0       0       0       0       0
  6798 ;;      Locals:         1       0       0       0       0
  6799 ;;      Temps:          1       0       0       0       0
  6800 ;;      Totals:         2       0       0       0       0
  6801 ;;Total ram usage:        2 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		_tc_int
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           
  6811                           ;psect for function i1_OperationMode
  6812  15C1                     i1_OperationMode:	
  6813                           
  6814                           ;functions.c: 934: unsigned char bracketStatus;
  6815                           ;functions.c: 935: bracketStatus = ((~PORTB) & 0b00000111) ;
  6816                           
  6817                           ;incstack = 0
  6818 ;; hardware stack exceeded
  6819                           ; Regs used in i1_OperationMode: [wreg+status,2]
  6820  15C1  1283               	bcf	3,5	;RP0=0, select bank0
  6821  15C2  1303               	bcf	3,6	;RP1=0, select bank0
  6822  15C3  0906               	comf	6,w	;volatile
  6823  15C4  3907               	andlw	7
  6824  15C5  00F0               	movwf	??i1_OperationMode
  6825  15C6  0870               	movf	??i1_OperationMode,w
  6826  15C7  00F1               	movwf	i1OperationMode@bracketStatus
  6827                           
  6828                           ;functions.c: 937: return 6;
  6829  15C8  3006               	movlw	6
  6830  15C9  0008               	return
  6831  15CA                     __end_ofi1_OperationMode:	
  6832                           
  6833                           	psect	text39
  6834  003F                     __ptext39:	
  6835 ;; *************** function _saveDataToFlash *****************
  6836 ;; Defined at:
  6837 ;;		line 1043 in file "functions.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;		None
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;  addr3           1   27[BANK0 ] unsigned char 
  6842 ;;  addr2           1   26[BANK0 ] unsigned char 
  6843 ;;  addr1           1   25[BANK0 ] unsigned char 
  6844 ;;  value           1   24[BANK0 ] unsigned char 
  6845 ;;  year            1   23[BANK0 ] unsigned char 
  6846 ;;  month           1   22[BANK0 ] unsigned char 
  6847 ;;  date            1   21[BANK0 ] unsigned char 
  6848 ;;  hours           1   20[BANK0 ] unsigned char 
  6849 ;;  minutes         1   19[BANK0 ] unsigned char 
  6850 ;;  seconds         1   18[BANK0 ] unsigned char 
  6851 ;; Return value:  Size  Location     Type
  6852 ;;                  1    wreg      void 
  6853 ;; Registers used:
  6854 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6860 ;;      Params:         0       0       0       0       0
  6861 ;;      Locals:         0      10       0       0       0
  6862 ;;      Temps:          0       5       0       0       0
  6863 ;;      Totals:         0      15       0       0       0
  6864 ;;Total ram usage:       15 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    4
  6867 ;; This function calls:
  6868 ;;		_IncreaseMemoryAdress
  6869 ;;		_ReadClock
  6870 ;;		i1_AnalogValue
  6871 ;;		i1_ReadMemoryAdress
  6872 ;;		i1_read_write_flash_ram
  6873 ;; This function is called by:
  6874 ;;		_tc_int
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           
  6879                           ;psect for function _saveDataToFlash
  6880  003F                     _saveDataToFlash:	
  6881                           
  6882                           ;functions.c: 1045: unsigned char value, addr1, addr2, addr3, seconds, minutes, hours, d
      +                          ate, month, year;
  6883                           ;functions.c: 1047: ReadClock(&seconds, &minutes, &hours, &date, &month, &year);
  6884                           
  6885                           ;incstack = 0
  6886 ;; hardware stack exceeded
  6887                           ; Regs used in _saveDataToFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6888  003F  3033               	movlw	(low (saveDataToFlash@minutes| 0))& (0+255)
  6889  0040  1283               	bcf	3,5	;RP0=0, select bank0
  6890  0041  1303               	bcf	3,6	;RP1=0, select bank0
  6891  0042  00AD               	movwf	??_saveDataToFlash
  6892  0043  082D               	movf	??_saveDataToFlash,w
  6893  0044  00F4               	movwf	ReadClock@minutes
  6894  0045  3034               	movlw	(low (saveDataToFlash@hours| 0))& (0+255)
  6895  0046  00AE               	movwf	??_saveDataToFlash+1
  6896  0047  082E               	movf	??_saveDataToFlash+1,w
  6897  0048  00F5               	movwf	ReadClock@hour
  6898  0049  3035               	movlw	(low (saveDataToFlash@date| 0))& (0+255)
  6899  004A  00AF               	movwf	??_saveDataToFlash+2
  6900  004B  082F               	movf	??_saveDataToFlash+2,w
  6901  004C  00F6               	movwf	ReadClock@date
  6902  004D  3036               	movlw	(low (saveDataToFlash@month| 0))& (0+255)
  6903  004E  00B0               	movwf	??_saveDataToFlash+3
  6904  004F  0830               	movf	??_saveDataToFlash+3,w
  6905  0050  00F7               	movwf	ReadClock@month
  6906  0051  3037               	movlw	(low (saveDataToFlash@year| 0))& (0+255)
  6907  0052  00B1               	movwf	??_saveDataToFlash+4
  6908  0053  0831               	movf	??_saveDataToFlash+4,w
  6909  0054  00F8               	movwf	ReadClock@year
  6910  0055  3032               	movlw	(low (saveDataToFlash@seconds| 0))& (0+255)
  6911  0056  120A  118A  2418  120A  118A  	fcall	_ReadClock
  6912                           
  6913                           ;functions.c: 1049: value = year;
  6914  005B  1283               	bcf	3,5	;RP0=0, select bank0
  6915  005C  1303               	bcf	3,6	;RP1=0, select bank0
  6916  005D  0837               	movf	saveDataToFlash@year,w
  6917  005E  00AD               	movwf	??_saveDataToFlash
  6918  005F  082D               	movf	??_saveDataToFlash,w
  6919  0060  00B8               	movwf	saveDataToFlash@value
  6920                           
  6921                           ;functions.c: 1050: ReadMemoryAdress(&addr3, &addr2, &addr1);
  6922  0061  303A               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  6923  0062  00AD               	movwf	??_saveDataToFlash
  6924  0063  082D               	movf	??_saveDataToFlash,w
  6925  0064  00F2               	movwf	i1ReadMemoryAdress@var2
  6926  0065  3039               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  6927  0066  00AE               	movwf	??_saveDataToFlash+1
  6928  0067  082E               	movf	??_saveDataToFlash+1,w
  6929  0068  00F3               	movwf	i1ReadMemoryAdress@var1
  6930  0069  303B               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  6931  006A  160A  118A  2745  120A  118A  	fcall	i1_ReadMemoryAdress
  6932                           
  6933                           ;functions.c: 1051: read_write_flash_ram(
  6934                           ;functions.c: 1052: 0,
  6935                           ;functions.c: 1053: 1,
  6936                           ;functions.c: 1054: addr3,
  6937                           ;functions.c: 1055: addr2,
  6938                           ;functions.c: 1056: addr1,
  6939                           ;functions.c: 1057: &value);
  6940  006F  3001               	movlw	1
  6941  0070  00F5               	movwf	i1read_write_flash_ram@bytes_to_readwrite
  6942  0071  3000               	movlw	0
  6943  0072  00F6               	movwf	i1read_write_flash_ram@bytes_to_readwrite+1
  6944  0073  1283               	bcf	3,5	;RP0=0, select bank0
  6945  0074  1303               	bcf	3,6	;RP1=0, select bank0
  6946  0075  083B               	movf	saveDataToFlash@addr3,w
  6947  0076  00AD               	movwf	??_saveDataToFlash
  6948  0077  082D               	movf	??_saveDataToFlash,w
  6949  0078  00F7               	movwf	i1read_write_flash_ram@flash_sector
  6950  0079  083A               	movf	saveDataToFlash@addr2,w
  6951  007A  00AE               	movwf	??_saveDataToFlash+1
  6952  007B  082E               	movf	??_saveDataToFlash+1,w
  6953  007C  00F8               	movwf	i1read_write_flash_ram@flash_page
  6954  007D  0839               	movf	saveDataToFlash@addr1,w
  6955  007E  00AF               	movwf	??_saveDataToFlash+2
  6956  007F  082F               	movf	??_saveDataToFlash+2,w
  6957  0080  00F9               	movwf	i1read_write_flash_ram@offset
  6958  0081  3038               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  6959  0082  00B0               	movwf	??_saveDataToFlash+3
  6960  0083  0830               	movf	??_saveDataToFlash+3,w
  6961  0084  00FA               	movwf	i1read_write_flash_ram@mem_ptr
  6962  0085  3000               	movlw	0
  6963  0086  120A  158A  23DE  120A  118A  	fcall	i1_read_write_flash_ram
  6964                           
  6965                           ;functions.c: 1058: IncreaseMemoryAdress();
  6966  008B  120A  158A  21EE  120A  118A  	fcall	_IncreaseMemoryAdress
  6967                           
  6968                           ;functions.c: 1060: value = month;
  6969  0090  1283               	bcf	3,5	;RP0=0, select bank0
  6970  0091  1303               	bcf	3,6	;RP1=0, select bank0
  6971  0092  0836               	movf	saveDataToFlash@month,w
  6972  0093  00AD               	movwf	??_saveDataToFlash
  6973  0094  082D               	movf	??_saveDataToFlash,w
  6974  0095  00B8               	movwf	saveDataToFlash@value
  6975                           
  6976                           ;functions.c: 1061: ReadMemoryAdress(&addr3, &addr2, &addr1);
  6977  0096  303A               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  6978  0097  00AD               	movwf	??_saveDataToFlash
  6979  0098  082D               	movf	??_saveDataToFlash,w
  6980  0099  00F2               	movwf	i1ReadMemoryAdress@var2
  6981  009A  3039               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  6982  009B  00AE               	movwf	??_saveDataToFlash+1
  6983  009C  082E               	movf	??_saveDataToFlash+1,w
  6984  009D  00F3               	movwf	i1ReadMemoryAdress@var1
  6985  009E  303B               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  6986  009F  160A  118A  2745  120A  118A  	fcall	i1_ReadMemoryAdress
  6987                           
  6988                           ;functions.c: 1062: read_write_flash_ram(
  6989                           ;functions.c: 1063: 0,
  6990                           ;functions.c: 1064: 1,
  6991                           ;functions.c: 1065: addr3,
  6992                           ;functions.c: 1066: addr2,
  6993                           ;functions.c: 1067: addr1,
  6994                           ;functions.c: 1068: &value);
  6995  00A4  3001               	movlw	1
  6996  00A5  00F5               	movwf	i1read_write_flash_ram@bytes_to_readwrite
  6997  00A6  3000               	movlw	0
  6998  00A7  00F6               	movwf	i1read_write_flash_ram@bytes_to_readwrite+1
  6999  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  7000  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  7001  00AA  083B               	movf	saveDataToFlash@addr3,w
  7002  00AB  00AD               	movwf	??_saveDataToFlash
  7003  00AC  082D               	movf	??_saveDataToFlash,w
  7004  00AD  00F7               	movwf	i1read_write_flash_ram@flash_sector
  7005  00AE  083A               	movf	saveDataToFlash@addr2,w
  7006  00AF  00AE               	movwf	??_saveDataToFlash+1
  7007  00B0  082E               	movf	??_saveDataToFlash+1,w
  7008  00B1  00F8               	movwf	i1read_write_flash_ram@flash_page
  7009  00B2  0839               	movf	saveDataToFlash@addr1,w
  7010  00B3  00AF               	movwf	??_saveDataToFlash+2
  7011  00B4  082F               	movf	??_saveDataToFlash+2,w
  7012  00B5  00F9               	movwf	i1read_write_flash_ram@offset
  7013  00B6  3038               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  7014  00B7  00B0               	movwf	??_saveDataToFlash+3
  7015  00B8  0830               	movf	??_saveDataToFlash+3,w
  7016  00B9  00FA               	movwf	i1read_write_flash_ram@mem_ptr
  7017  00BA  3000               	movlw	0
  7018  00BB  120A  158A  23DE  120A  118A  	fcall	i1_read_write_flash_ram
  7019                           
  7020                           ;functions.c: 1069: IncreaseMemoryAdress();
  7021  00C0  120A  158A  21EE  120A  118A  	fcall	_IncreaseMemoryAdress
  7022                           
  7023                           ;functions.c: 1071: value = date;
  7024  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  7025  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  7026  00C7  0835               	movf	saveDataToFlash@date,w
  7027  00C8  00AD               	movwf	??_saveDataToFlash
  7028  00C9  082D               	movf	??_saveDataToFlash,w
  7029  00CA  00B8               	movwf	saveDataToFlash@value
  7030                           
  7031                           ;functions.c: 1072: ReadMemoryAdress(&addr3, &addr2, &addr1);
  7032  00CB  303A               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  7033  00CC  00AD               	movwf	??_saveDataToFlash
  7034  00CD  082D               	movf	??_saveDataToFlash,w
  7035  00CE  00F2               	movwf	i1ReadMemoryAdress@var2
  7036  00CF  3039               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  7037  00D0  00AE               	movwf	??_saveDataToFlash+1
  7038  00D1  082E               	movf	??_saveDataToFlash+1,w
  7039  00D2  00F3               	movwf	i1ReadMemoryAdress@var1
  7040  00D3  303B               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  7041  00D4  160A  118A  2745  120A  118A  	fcall	i1_ReadMemoryAdress
  7042                           
  7043                           ;functions.c: 1073: read_write_flash_ram(
  7044                           ;functions.c: 1074: 0,
  7045                           ;functions.c: 1075: 1,
  7046                           ;functions.c: 1076: addr3,
  7047                           ;functions.c: 1077: addr2,
  7048                           ;functions.c: 1078: addr1,
  7049                           ;functions.c: 1079: &value);
  7050  00D9  3001               	movlw	1
  7051  00DA  00F5               	movwf	i1read_write_flash_ram@bytes_to_readwrite
  7052  00DB  3000               	movlw	0
  7053  00DC  00F6               	movwf	i1read_write_flash_ram@bytes_to_readwrite+1
  7054  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  7055  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  7056  00DF  083B               	movf	saveDataToFlash@addr3,w
  7057  00E0  00AD               	movwf	??_saveDataToFlash
  7058  00E1  082D               	movf	??_saveDataToFlash,w
  7059  00E2  00F7               	movwf	i1read_write_flash_ram@flash_sector
  7060  00E3  083A               	movf	saveDataToFlash@addr2,w
  7061  00E4  00AE               	movwf	??_saveDataToFlash+1
  7062  00E5  082E               	movf	??_saveDataToFlash+1,w
  7063  00E6  00F8               	movwf	i1read_write_flash_ram@flash_page
  7064  00E7  0839               	movf	saveDataToFlash@addr1,w
  7065  00E8  00AF               	movwf	??_saveDataToFlash+2
  7066  00E9  082F               	movf	??_saveDataToFlash+2,w
  7067  00EA  00F9               	movwf	i1read_write_flash_ram@offset
  7068  00EB  3038               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  7069  00EC  00B0               	movwf	??_saveDataToFlash+3
  7070  00ED  0830               	movf	??_saveDataToFlash+3,w
  7071  00EE  00FA               	movwf	i1read_write_flash_ram@mem_ptr
  7072  00EF  3000               	movlw	0
  7073  00F0  120A  158A  23DE  120A  118A  	fcall	i1_read_write_flash_ram
  7074                           
  7075                           ;functions.c: 1080: IncreaseMemoryAdress();
  7076  00F5  120A  158A  21EE  120A  118A  	fcall	_IncreaseMemoryAdress
  7077                           
  7078                           ;functions.c: 1082: value = hours;
  7079  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  7080  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  7081  00FC  0834               	movf	saveDataToFlash@hours,w
  7082  00FD  00AD               	movwf	??_saveDataToFlash
  7083  00FE  082D               	movf	??_saveDataToFlash,w
  7084  00FF  00B8               	movwf	saveDataToFlash@value
  7085                           
  7086                           ;functions.c: 1083: ReadMemoryAdress(&addr3, &addr2, &addr1);
  7087  0100  303A               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  7088  0101  00AD               	movwf	??_saveDataToFlash
  7089  0102  082D               	movf	??_saveDataToFlash,w
  7090  0103  00F2               	movwf	i1ReadMemoryAdress@var2
  7091  0104  3039               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  7092  0105  00AE               	movwf	??_saveDataToFlash+1
  7093  0106  082E               	movf	??_saveDataToFlash+1,w
  7094  0107  00F3               	movwf	i1ReadMemoryAdress@var1
  7095  0108  303B               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  7096  0109  160A  118A  2745  120A  118A  	fcall	i1_ReadMemoryAdress
  7097                           
  7098                           ;functions.c: 1084: read_write_flash_ram(
  7099                           ;functions.c: 1085: 0,
  7100                           ;functions.c: 1086: 1,
  7101                           ;functions.c: 1087: addr3,
  7102                           ;functions.c: 1088: addr2,
  7103                           ;functions.c: 1089: addr1,
  7104                           ;functions.c: 1090: &value);
  7105  010E  3001               	movlw	1
  7106  010F  00F5               	movwf	i1read_write_flash_ram@bytes_to_readwrite
  7107  0110  3000               	movlw	0
  7108  0111  00F6               	movwf	i1read_write_flash_ram@bytes_to_readwrite+1
  7109  0112  1283               	bcf	3,5	;RP0=0, select bank0
  7110  0113  1303               	bcf	3,6	;RP1=0, select bank0
  7111  0114  083B               	movf	saveDataToFlash@addr3,w
  7112  0115  00AD               	movwf	??_saveDataToFlash
  7113  0116  082D               	movf	??_saveDataToFlash,w
  7114  0117  00F7               	movwf	i1read_write_flash_ram@flash_sector
  7115  0118  083A               	movf	saveDataToFlash@addr2,w
  7116  0119  00AE               	movwf	??_saveDataToFlash+1
  7117  011A  082E               	movf	??_saveDataToFlash+1,w
  7118  011B  00F8               	movwf	i1read_write_flash_ram@flash_page
  7119  011C  0839               	movf	saveDataToFlash@addr1,w
  7120  011D  00AF               	movwf	??_saveDataToFlash+2
  7121  011E  082F               	movf	??_saveDataToFlash+2,w
  7122  011F  00F9               	movwf	i1read_write_flash_ram@offset
  7123  0120  3038               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  7124  0121  00B0               	movwf	??_saveDataToFlash+3
  7125  0122  0830               	movf	??_saveDataToFlash+3,w
  7126  0123  00FA               	movwf	i1read_write_flash_ram@mem_ptr
  7127  0124  3000               	movlw	0
  7128  0125  120A  158A  23DE  120A  118A  	fcall	i1_read_write_flash_ram
  7129                           
  7130                           ;functions.c: 1091: IncreaseMemoryAdress();
  7131  012A  120A  158A  21EE  120A  118A  	fcall	_IncreaseMemoryAdress
  7132                           
  7133                           ;functions.c: 1094: value = AnalogValue(0);
  7134  012F  3000               	movlw	0
  7135  0130  160A  118A  27D7  120A  118A  	fcall	i1_AnalogValue
  7136  0135  1283               	bcf	3,5	;RP0=0, select bank0
  7137  0136  1303               	bcf	3,6	;RP1=0, select bank0
  7138  0137  00AD               	movwf	??_saveDataToFlash
  7139  0138  082D               	movf	??_saveDataToFlash,w
  7140  0139  00B8               	movwf	saveDataToFlash@value
  7141                           
  7142                           ;functions.c: 1095: ReadMemoryAdress(&addr3, &addr2, &addr1);
  7143  013A  303A               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  7144  013B  00AD               	movwf	??_saveDataToFlash
  7145  013C  082D               	movf	??_saveDataToFlash,w
  7146  013D  00F2               	movwf	i1ReadMemoryAdress@var2
  7147  013E  3039               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  7148  013F  00AE               	movwf	??_saveDataToFlash+1
  7149  0140  082E               	movf	??_saveDataToFlash+1,w
  7150  0141  00F3               	movwf	i1ReadMemoryAdress@var1
  7151  0142  303B               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  7152  0143  160A  118A  2745  120A  118A  	fcall	i1_ReadMemoryAdress
  7153                           
  7154                           ;functions.c: 1096: read_write_flash_ram(
  7155                           ;functions.c: 1097: 0,
  7156                           ;functions.c: 1098: 1,
  7157                           ;functions.c: 1099: addr3,
  7158                           ;functions.c: 1100: addr2,
  7159                           ;functions.c: 1101: addr1,
  7160                           ;functions.c: 1102: &value);
  7161  0148  3001               	movlw	1
  7162  0149  00F5               	movwf	i1read_write_flash_ram@bytes_to_readwrite
  7163  014A  3000               	movlw	0
  7164  014B  00F6               	movwf	i1read_write_flash_ram@bytes_to_readwrite+1
  7165  014C  1283               	bcf	3,5	;RP0=0, select bank0
  7166  014D  1303               	bcf	3,6	;RP1=0, select bank0
  7167  014E  083B               	movf	saveDataToFlash@addr3,w
  7168  014F  00AD               	movwf	??_saveDataToFlash
  7169  0150  082D               	movf	??_saveDataToFlash,w
  7170  0151  00F7               	movwf	i1read_write_flash_ram@flash_sector
  7171  0152  083A               	movf	saveDataToFlash@addr2,w
  7172  0153  00AE               	movwf	??_saveDataToFlash+1
  7173  0154  082E               	movf	??_saveDataToFlash+1,w
  7174  0155  00F8               	movwf	i1read_write_flash_ram@flash_page
  7175  0156  0839               	movf	saveDataToFlash@addr1,w
  7176  0157  00AF               	movwf	??_saveDataToFlash+2
  7177  0158  082F               	movf	??_saveDataToFlash+2,w
  7178  0159  00F9               	movwf	i1read_write_flash_ram@offset
  7179  015A  3038               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  7180  015B  00B0               	movwf	??_saveDataToFlash+3
  7181  015C  0830               	movf	??_saveDataToFlash+3,w
  7182  015D  00FA               	movwf	i1read_write_flash_ram@mem_ptr
  7183  015E  3000               	movlw	0
  7184  015F  120A  158A  23DE  120A  118A  	fcall	i1_read_write_flash_ram
  7185                           
  7186                           ;functions.c: 1103: IncreaseMemoryAdress();
  7187  0164  120A  158A  21EE  120A  118A  	fcall	_IncreaseMemoryAdress
  7188                           
  7189                           ;functions.c: 1105: value = AnalogValue(3);
  7190  0169  3003               	movlw	3
  7191  016A  160A  118A  27D7  120A  118A  	fcall	i1_AnalogValue
  7192  016F  1283               	bcf	3,5	;RP0=0, select bank0
  7193  0170  1303               	bcf	3,6	;RP1=0, select bank0
  7194  0171  00AD               	movwf	??_saveDataToFlash
  7195  0172  082D               	movf	??_saveDataToFlash,w
  7196  0173  00B8               	movwf	saveDataToFlash@value
  7197                           
  7198                           ;functions.c: 1106: ReadMemoryAdress(&addr3, &addr2, &addr1);
  7199  0174  303A               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  7200  0175  00AD               	movwf	??_saveDataToFlash
  7201  0176  082D               	movf	??_saveDataToFlash,w
  7202  0177  00F2               	movwf	i1ReadMemoryAdress@var2
  7203  0178  3039               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  7204  0179  00AE               	movwf	??_saveDataToFlash+1
  7205  017A  082E               	movf	??_saveDataToFlash+1,w
  7206  017B  00F3               	movwf	i1ReadMemoryAdress@var1
  7207  017C  303B               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  7208  017D  160A  118A  2745  120A  118A  	fcall	i1_ReadMemoryAdress
  7209                           
  7210                           ;functions.c: 1107: read_write_flash_ram(
  7211                           ;functions.c: 1108: 0,
  7212                           ;functions.c: 1109: 1,
  7213                           ;functions.c: 1110: addr3,
  7214                           ;functions.c: 1111: addr2,
  7215                           ;functions.c: 1112: addr1,
  7216                           ;functions.c: 1113: &value);
  7217  0182  3001               	movlw	1
  7218  0183  00F5               	movwf	i1read_write_flash_ram@bytes_to_readwrite
  7219  0184  3000               	movlw	0
  7220  0185  00F6               	movwf	i1read_write_flash_ram@bytes_to_readwrite+1
  7221  0186  1283               	bcf	3,5	;RP0=0, select bank0
  7222  0187  1303               	bcf	3,6	;RP1=0, select bank0
  7223  0188  083B               	movf	saveDataToFlash@addr3,w
  7224  0189  00AD               	movwf	??_saveDataToFlash
  7225  018A  082D               	movf	??_saveDataToFlash,w
  7226  018B  00F7               	movwf	i1read_write_flash_ram@flash_sector
  7227  018C  083A               	movf	saveDataToFlash@addr2,w
  7228  018D  00AE               	movwf	??_saveDataToFlash+1
  7229  018E  082E               	movf	??_saveDataToFlash+1,w
  7230  018F  00F8               	movwf	i1read_write_flash_ram@flash_page
  7231  0190  0839               	movf	saveDataToFlash@addr1,w
  7232  0191  00AF               	movwf	??_saveDataToFlash+2
  7233  0192  082F               	movf	??_saveDataToFlash+2,w
  7234  0193  00F9               	movwf	i1read_write_flash_ram@offset
  7235  0194  3038               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  7236  0195  00B0               	movwf	??_saveDataToFlash+3
  7237  0196  0830               	movf	??_saveDataToFlash+3,w
  7238  0197  00FA               	movwf	i1read_write_flash_ram@mem_ptr
  7239  0198  3000               	movlw	0
  7240  0199  120A  158A  23DE  120A  118A  	fcall	i1_read_write_flash_ram
  7241                           
  7242                           ;functions.c: 1114: IncreaseMemoryAdress();
  7243  019E  120A  158A  21EE  120A  118A  	fcall	_IncreaseMemoryAdress
  7244                           
  7245                           ;functions.c: 1116: value = AnalogValue(5);
  7246  01A3  3005               	movlw	5
  7247  01A4  160A  118A  27D7  120A  118A  	fcall	i1_AnalogValue
  7248  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  7249  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  7250  01AB  00AD               	movwf	??_saveDataToFlash
  7251  01AC  082D               	movf	??_saveDataToFlash,w
  7252  01AD  00B8               	movwf	saveDataToFlash@value
  7253                           
  7254                           ;functions.c: 1117: ReadMemoryAdress(&addr3, &addr2, &addr1);
  7255  01AE  303A               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  7256  01AF  00AD               	movwf	??_saveDataToFlash
  7257  01B0  082D               	movf	??_saveDataToFlash,w
  7258  01B1  00F2               	movwf	i1ReadMemoryAdress@var2
  7259  01B2  3039               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  7260  01B3  00AE               	movwf	??_saveDataToFlash+1
  7261  01B4  082E               	movf	??_saveDataToFlash+1,w
  7262  01B5  00F3               	movwf	i1ReadMemoryAdress@var1
  7263  01B6  303B               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  7264  01B7  160A  118A  2745  120A  118A  	fcall	i1_ReadMemoryAdress
  7265                           
  7266                           ;functions.c: 1118: read_write_flash_ram(
  7267                           ;functions.c: 1119: 0,
  7268                           ;functions.c: 1120: 1,
  7269                           ;functions.c: 1121: addr3,
  7270                           ;functions.c: 1122: addr2,
  7271                           ;functions.c: 1123: addr1,
  7272                           ;functions.c: 1124: &value);
  7273  01BC  3001               	movlw	1
  7274  01BD  00F5               	movwf	i1read_write_flash_ram@bytes_to_readwrite
  7275  01BE  3000               	movlw	0
  7276  01BF  00F6               	movwf	i1read_write_flash_ram@bytes_to_readwrite+1
  7277  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  7278  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  7279  01C2  083B               	movf	saveDataToFlash@addr3,w
  7280  01C3  00AD               	movwf	??_saveDataToFlash
  7281  01C4  082D               	movf	??_saveDataToFlash,w
  7282  01C5  00F7               	movwf	i1read_write_flash_ram@flash_sector
  7283  01C6  083A               	movf	saveDataToFlash@addr2,w
  7284  01C7  00AE               	movwf	??_saveDataToFlash+1
  7285  01C8  082E               	movf	??_saveDataToFlash+1,w
  7286  01C9  00F8               	movwf	i1read_write_flash_ram@flash_page
  7287  01CA  0839               	movf	saveDataToFlash@addr1,w
  7288  01CB  00AF               	movwf	??_saveDataToFlash+2
  7289  01CC  082F               	movf	??_saveDataToFlash+2,w
  7290  01CD  00F9               	movwf	i1read_write_flash_ram@offset
  7291  01CE  3038               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  7292  01CF  00B0               	movwf	??_saveDataToFlash+3
  7293  01D0  0830               	movf	??_saveDataToFlash+3,w
  7294  01D1  00FA               	movwf	i1read_write_flash_ram@mem_ptr
  7295  01D2  3000               	movlw	0
  7296  01D3  120A  158A  23DE  120A  118A  	fcall	i1_read_write_flash_ram
  7297                           
  7298                           ;functions.c: 1125: IncreaseMemoryAdress();
  7299  01D8  120A  158A  21EE  120A  118A  	fcall	_IncreaseMemoryAdress
  7300                           
  7301                           ;functions.c: 1127: value = AnalogValue(7);
  7302  01DD  3007               	movlw	7
  7303  01DE  160A  118A  27D7  120A  118A  	fcall	i1_AnalogValue
  7304  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  7305  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  7306  01E5  00AD               	movwf	??_saveDataToFlash
  7307  01E6  082D               	movf	??_saveDataToFlash,w
  7308  01E7  00B8               	movwf	saveDataToFlash@value
  7309                           
  7310                           ;functions.c: 1128: ReadMemoryAdress(&addr3, &addr2, &addr1);
  7311  01E8  303A               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  7312  01E9  00AD               	movwf	??_saveDataToFlash
  7313  01EA  082D               	movf	??_saveDataToFlash,w
  7314  01EB  00F2               	movwf	i1ReadMemoryAdress@var2
  7315  01EC  3039               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  7316  01ED  00AE               	movwf	??_saveDataToFlash+1
  7317  01EE  082E               	movf	??_saveDataToFlash+1,w
  7318  01EF  00F3               	movwf	i1ReadMemoryAdress@var1
  7319  01F0  303B               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  7320  01F1  160A  118A  2745  120A  118A  	fcall	i1_ReadMemoryAdress
  7321                           
  7322                           ;functions.c: 1129: read_write_flash_ram(
  7323                           ;functions.c: 1130: 0,
  7324                           ;functions.c: 1131: 1,
  7325                           ;functions.c: 1132: addr3,
  7326                           ;functions.c: 1133: addr2,
  7327                           ;functions.c: 1134: addr1,
  7328                           ;functions.c: 1135: &value);
  7329  01F6  3001               	movlw	1
  7330  01F7  00F5               	movwf	i1read_write_flash_ram@bytes_to_readwrite
  7331  01F8  3000               	movlw	0
  7332  01F9  00F6               	movwf	i1read_write_flash_ram@bytes_to_readwrite+1
  7333  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  7334  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  7335  01FC  083B               	movf	saveDataToFlash@addr3,w
  7336  01FD  00AD               	movwf	??_saveDataToFlash
  7337  01FE  082D               	movf	??_saveDataToFlash,w
  7338  01FF  00F7               	movwf	i1read_write_flash_ram@flash_sector
  7339  0200  083A               	movf	saveDataToFlash@addr2,w
  7340  0201  00AE               	movwf	??_saveDataToFlash+1
  7341  0202  082E               	movf	??_saveDataToFlash+1,w
  7342  0203  00F8               	movwf	i1read_write_flash_ram@flash_page
  7343  0204  0839               	movf	saveDataToFlash@addr1,w
  7344  0205  00AF               	movwf	??_saveDataToFlash+2
  7345  0206  082F               	movf	??_saveDataToFlash+2,w
  7346  0207  00F9               	movwf	i1read_write_flash_ram@offset
  7347  0208  3038               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  7348  0209  00B0               	movwf	??_saveDataToFlash+3
  7349  020A  0830               	movf	??_saveDataToFlash+3,w
  7350  020B  00FA               	movwf	i1read_write_flash_ram@mem_ptr
  7351  020C  3000               	movlw	0
  7352  020D  120A  158A  23DE  120A  118A  	fcall	i1_read_write_flash_ram
  7353                           
  7354                           ;functions.c: 1136: IncreaseMemoryAdress();
  7355  0212  120A  158A  21EE  120A  118A  	fcall	_IncreaseMemoryAdress
  7356                           
  7357                           ;functions.c: 1139: value = AnalogValue(6);
  7358  0217  3006               	movlw	6
  7359  0218  160A  118A  27D7  120A  118A  	fcall	i1_AnalogValue
  7360  021D  1283               	bcf	3,5	;RP0=0, select bank0
  7361  021E  1303               	bcf	3,6	;RP1=0, select bank0
  7362  021F  00AD               	movwf	??_saveDataToFlash
  7363  0220  082D               	movf	??_saveDataToFlash,w
  7364  0221  00B8               	movwf	saveDataToFlash@value
  7365                           
  7366                           ;functions.c: 1140: ReadMemoryAdress(&addr3, &addr2, &addr1);
  7367  0222  303A               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  7368  0223  00AD               	movwf	??_saveDataToFlash
  7369  0224  082D               	movf	??_saveDataToFlash,w
  7370  0225  00F2               	movwf	i1ReadMemoryAdress@var2
  7371  0226  3039               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  7372  0227  00AE               	movwf	??_saveDataToFlash+1
  7373  0228  082E               	movf	??_saveDataToFlash+1,w
  7374  0229  00F3               	movwf	i1ReadMemoryAdress@var1
  7375  022A  303B               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  7376  022B  160A  118A  2745  120A  118A  	fcall	i1_ReadMemoryAdress
  7377                           
  7378                           ;functions.c: 1141: read_write_flash_ram(
  7379                           ;functions.c: 1142: 0,
  7380                           ;functions.c: 1143: 1,
  7381                           ;functions.c: 1144: addr3,
  7382                           ;functions.c: 1145: addr2,
  7383                           ;functions.c: 1146: addr1,
  7384                           ;functions.c: 1147: &value);
  7385  0230  3001               	movlw	1
  7386  0231  00F5               	movwf	i1read_write_flash_ram@bytes_to_readwrite
  7387  0232  3000               	movlw	0
  7388  0233  00F6               	movwf	i1read_write_flash_ram@bytes_to_readwrite+1
  7389  0234  1283               	bcf	3,5	;RP0=0, select bank0
  7390  0235  1303               	bcf	3,6	;RP1=0, select bank0
  7391  0236  083B               	movf	saveDataToFlash@addr3,w
  7392  0237  00AD               	movwf	??_saveDataToFlash
  7393  0238  082D               	movf	??_saveDataToFlash,w
  7394  0239  00F7               	movwf	i1read_write_flash_ram@flash_sector
  7395  023A  083A               	movf	saveDataToFlash@addr2,w
  7396  023B  00AE               	movwf	??_saveDataToFlash+1
  7397  023C  082E               	movf	??_saveDataToFlash+1,w
  7398  023D  00F8               	movwf	i1read_write_flash_ram@flash_page
  7399  023E  0839               	movf	saveDataToFlash@addr1,w
  7400  023F  00AF               	movwf	??_saveDataToFlash+2
  7401  0240  082F               	movf	??_saveDataToFlash+2,w
  7402  0241  00F9               	movwf	i1read_write_flash_ram@offset
  7403  0242  3038               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  7404  0243  00B0               	movwf	??_saveDataToFlash+3
  7405  0244  0830               	movf	??_saveDataToFlash+3,w
  7406  0245  00FA               	movwf	i1read_write_flash_ram@mem_ptr
  7407  0246  3000               	movlw	0
  7408  0247  120A  158A  23DE  120A  118A  	fcall	i1_read_write_flash_ram
  7409                           
  7410                           ;functions.c: 1148: IncreaseMemoryAdress();
  7411  024C  120A  158A  21EE  120A  118A  	fcall	_IncreaseMemoryAdress
  7412                           
  7413                           ;functions.c: 1151: value = AnalogValue(8);
  7414  0251  3008               	movlw	8
  7415  0252  160A  118A  27D7  120A  118A  	fcall	i1_AnalogValue
  7416  0257  1283               	bcf	3,5	;RP0=0, select bank0
  7417  0258  1303               	bcf	3,6	;RP1=0, select bank0
  7418  0259  00AD               	movwf	??_saveDataToFlash
  7419  025A  082D               	movf	??_saveDataToFlash,w
  7420  025B  00B8               	movwf	saveDataToFlash@value
  7421                           
  7422                           ;functions.c: 1152: ReadMemoryAdress(&addr3, &addr2, &addr1);
  7423  025C  303A               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  7424  025D  00AD               	movwf	??_saveDataToFlash
  7425  025E  082D               	movf	??_saveDataToFlash,w
  7426  025F  00F2               	movwf	i1ReadMemoryAdress@var2
  7427  0260  3039               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  7428  0261  00AE               	movwf	??_saveDataToFlash+1
  7429  0262  082E               	movf	??_saveDataToFlash+1,w
  7430  0263  00F3               	movwf	i1ReadMemoryAdress@var1
  7431  0264  303B               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  7432  0265  160A  118A  2745  120A  118A  	fcall	i1_ReadMemoryAdress
  7433                           
  7434                           ;functions.c: 1153: read_write_flash_ram(
  7435                           ;functions.c: 1154: 0,
  7436                           ;functions.c: 1155: 1,
  7437                           ;functions.c: 1156: addr3,
  7438                           ;functions.c: 1157: addr2,
  7439                           ;functions.c: 1158: addr1,
  7440                           ;functions.c: 1159: &value);
  7441  026A  3001               	movlw	1
  7442  026B  00F5               	movwf	i1read_write_flash_ram@bytes_to_readwrite
  7443  026C  3000               	movlw	0
  7444  026D  00F6               	movwf	i1read_write_flash_ram@bytes_to_readwrite+1
  7445  026E  1283               	bcf	3,5	;RP0=0, select bank0
  7446  026F  1303               	bcf	3,6	;RP1=0, select bank0
  7447  0270  083B               	movf	saveDataToFlash@addr3,w
  7448  0271  00AD               	movwf	??_saveDataToFlash
  7449  0272  082D               	movf	??_saveDataToFlash,w
  7450  0273  00F7               	movwf	i1read_write_flash_ram@flash_sector
  7451  0274  083A               	movf	saveDataToFlash@addr2,w
  7452  0275  00AE               	movwf	??_saveDataToFlash+1
  7453  0276  082E               	movf	??_saveDataToFlash+1,w
  7454  0277  00F8               	movwf	i1read_write_flash_ram@flash_page
  7455  0278  0839               	movf	saveDataToFlash@addr1,w
  7456  0279  00AF               	movwf	??_saveDataToFlash+2
  7457  027A  082F               	movf	??_saveDataToFlash+2,w
  7458  027B  00F9               	movwf	i1read_write_flash_ram@offset
  7459  027C  3038               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  7460  027D  00B0               	movwf	??_saveDataToFlash+3
  7461  027E  0830               	movf	??_saveDataToFlash+3,w
  7462  027F  00FA               	movwf	i1read_write_flash_ram@mem_ptr
  7463  0280  3000               	movlw	0
  7464  0281  120A  158A  23DE  120A  118A  	fcall	i1_read_write_flash_ram
  7465                           
  7466                           ;functions.c: 1160: IncreaseMemoryAdress();
  7467  0286  120A  158A  21EE   	fcall	_IncreaseMemoryAdress
  7468  0289  0008               	return
  7469  028A                     __end_of_saveDataToFlash:	
  7470                           
  7471                           	psect	text40
  7472  0BDE                     __ptext40:	
  7473 ;; *************** function i1_read_write_flash_ram *****************
  7474 ;; Defined at:
  7475 ;;		line 107 in file "m25p16.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;  one_read_zer    1    wreg     unsigned char 
  7478 ;;  bytes_to_rea    2    5[COMMON] unsigned short 
  7479 ;;  flash_sector    1    7[COMMON] unsigned char 
  7480 ;;  flash_page      1    8[COMMON] unsigned char 
  7481 ;;  offset          1    9[COMMON] unsigned char 
  7482 ;;  mem_ptr         1   10[COMMON] PTR unsigned char 
  7483 ;;		 -> SendMemoryData@value(1), saveDataToFlash@value(1), 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  one_read_zer    1    0[BANK0 ] unsigned char 
  7486 ;;  read_write_f    2    1[BANK0 ] unsigned short 
  7487 ;; Return value:  Size  Location     Type
  7488 ;;                  1    wreg      void 
  7489 ;; Registers used:
  7490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7491 ;; Tracked objects:
  7492 ;;		On entry : 0/0
  7493 ;;		On exit  : 0/0
  7494 ;;		Unchanged: 0/0
  7495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7496 ;;      Params:         6       0       0       0       0
  7497 ;;      Locals:         0       3       0       0       0
  7498 ;;      Temps:          2       0       0       0       0
  7499 ;;      Totals:         8       3       0       0       0
  7500 ;;Total ram usage:       11 bytes
  7501 ;; Hardware stack levels used:    1
  7502 ;; Hardware stack levels required when called:    3
  7503 ;; This function calls:
  7504 ;;		i1_ReadSPI
  7505 ;;		i1_WriteSPI
  7506 ;;		i1_read_ram_status
  7507 ;; This function is called by:
  7508 ;;		_saveDataToFlash
  7509 ;; This function uses a non-reentrant model
  7510 ;;
  7511                           
  7512                           
  7513                           ;psect for function i1_read_write_flash_ram
  7514  0BDE                     i1_read_write_flash_ram:	
  7515                           
  7516                           ;incstack = 0
  7517 ;; hardware stack exceeded
  7518                           ; Regs used in i1_read_write_flash_ram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7519                           ;i1read_write_flash_ram@one_read_zero_write stored from wreg
  7520  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  7521  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  7522  0BE0  00A0               	movwf	i1read_write_flash_ram@one_read_zero_write
  7523                           
  7524                           ;m25p16.c: 122: unsigned short int i;
  7525                           ;m25p16.c: 126: RD3 = 0;
  7526  0BE1  1188               	bcf	8,3	;volatile
  7527                           
  7528                           ;m25p16.c: 127: if(one_read_zero_write)
  7529  0BE2  0820               	movf	i1read_write_flash_ram@one_read_zero_write,w
  7530  0BE3  1903               	btfsc	3,2
  7531  0BE4  2BE7               	goto	i1l2867
  7532                           
  7533                           ;m25p16.c: 128: {
  7534                           ;m25p16.c: 129: WriteSPI(0x03);
  7535  0BE5  3003               	movlw	3
  7536  0BE6  2BF5               	goto	L5
  7537  0BE7                     i1l2867:	
  7538                           ;m25p16.c: 130: }
  7539                           
  7540                           
  7541                           ;m25p16.c: 131: else
  7542                           ;m25p16.c: 132: {
  7543                           ;m25p16.c: 133: WriteSPI(0x06);
  7544  0BE7  3006               	movlw	6
  7545  0BE8  160A  118A  25E2  120A  158A  	fcall	i1_WriteSPI
  7546                           
  7547                           ;m25p16.c: 134: RD3 = 1;
  7548  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  7549  0BEE  1303               	bcf	3,6	;RP1=0, select bank0
  7550  0BEF  1588               	bsf	8,3	;volatile
  7551                           
  7552                           ;m25p16.c: 135: _delay((unsigned long)((1)*(4000000/4000000.0)));
  7553  0BF0  0000               	nop
  7554                           
  7555                           ;m25p16.c: 136: RD3 = 0;
  7556  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  7557  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  7558  0BF3  1188               	bcf	8,3	;volatile
  7559                           
  7560                           ;m25p16.c: 137: WriteSPI(0x02);
  7561  0BF4  3002               	movlw	2
  7562  0BF5                     L5:	
  7563  0BF5  160A  118A  25E2  120A  158A  	fcall	i1_WriteSPI
  7564                           
  7565                           ;m25p16.c: 139: }
  7566                           ;m25p16.c: 141: WriteSPI(flash_sector);
  7567  0BFA  0877               	movf	i1read_write_flash_ram@flash_sector,w
  7568  0BFB  160A  118A  25E2  120A  158A  	fcall	i1_WriteSPI
  7569                           
  7570                           ;m25p16.c: 142: WriteSPI(flash_page);
  7571  0C00  0878               	movf	i1read_write_flash_ram@flash_page,w
  7572  0C01  160A  118A  25E2  120A  158A  	fcall	i1_WriteSPI
  7573                           
  7574                           ;m25p16.c: 143: WriteSPI(offset);
  7575  0C06  0879               	movf	i1read_write_flash_ram@offset,w
  7576  0C07  160A  118A  25E2  120A  158A  	fcall	i1_WriteSPI
  7577                           
  7578                           ;m25p16.c: 145: for (i=0;i<bytes_to_readwrite;i++)
  7579  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  7580  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  7581  0C0E  01A1               	clrf	i1read_write_flash_ram@i
  7582  0C0F  01A2               	clrf	i1read_write_flash_ram@i+1
  7583  0C10                     i1l2885:	
  7584  0C10  0876               	movf	i1read_write_flash_ram@bytes_to_readwrite+1,w
  7585  0C11  0222               	subwf	i1read_write_flash_ram@i+1,w
  7586  0C12  1D03               	skipz
  7587  0C13  2C16               	goto	u190_25
  7588  0C14  0875               	movf	i1read_write_flash_ram@bytes_to_readwrite,w
  7589  0C15  0221               	subwf	i1read_write_flash_ram@i,w
  7590  0C16                     u190_25:	
  7591  0C16  1803               	btfsc	3,0
  7592  0C17  2C41               	goto	i1l580
  7593                           
  7594                           ;m25p16.c: 146: {
  7595                           ;m25p16.c: 147: if (one_read_zero_write)
  7596  0C18  0820               	movf	i1read_write_flash_ram@one_read_zero_write,w
  7597  0C19  1903               	btfsc	3,2
  7598  0C1A  2C2C               	goto	i1l2881
  7599                           
  7600                           ;m25p16.c: 148: {
  7601                           ;m25p16.c: 149: mem_ptr[i] = ReadSPI();
  7602  0C1B  160A  118A  25A9  120A  158A  	fcall	i1_ReadSPI
  7603  0C20  00FB               	movwf	??i1_read_write_flash_ram
  7604  0C21  1283               	bcf	3,5	;RP0=0, select bank0
  7605  0C22  1303               	bcf	3,6	;RP1=0, select bank0
  7606  0C23  0821               	movf	i1read_write_flash_ram@i,w
  7607  0C24  077A               	addwf	i1read_write_flash_ram@mem_ptr,w
  7608  0C25  00FC               	movwf	??i1_read_write_flash_ram+1
  7609  0C26  087C               	movf	??i1_read_write_flash_ram+1,w
  7610  0C27  0084               	movwf	4
  7611  0C28  087B               	movf	??i1_read_write_flash_ram,w
  7612  0C29  1383               	bcf	3,7	;select IRP bank0
  7613  0C2A  0080               	movwf	0
  7614                           
  7615                           ;m25p16.c: 150: }
  7616  0C2B  2C38               	goto	i1l2883
  7617  0C2C                     i1l2881:	
  7618                           
  7619                           ;m25p16.c: 151: else
  7620                           ;m25p16.c: 152: {
  7621                           ;m25p16.c: 153: WriteSPI(mem_ptr[i]);
  7622  0C2C  0821               	movf	i1read_write_flash_ram@i,w
  7623  0C2D  077A               	addwf	i1read_write_flash_ram@mem_ptr,w
  7624  0C2E  00FB               	movwf	??i1_read_write_flash_ram
  7625  0C2F  087B               	movf	??i1_read_write_flash_ram,w
  7626  0C30  0084               	movwf	4
  7627  0C31  1383               	bcf	3,7	;select IRP bank0
  7628  0C32  0800               	movf	0,w
  7629  0C33  160A  118A  25E2  120A  158A  	fcall	i1_WriteSPI
  7630  0C38                     i1l2883:	
  7631  0C38  3001               	movlw	1
  7632  0C39  1283               	bcf	3,5	;RP0=0, select bank0
  7633  0C3A  1303               	bcf	3,6	;RP1=0, select bank0
  7634  0C3B  07A1               	addwf	i1read_write_flash_ram@i,f
  7635  0C3C  1803               	skipnc
  7636  0C3D  0AA2               	incf	i1read_write_flash_ram@i+1,f
  7637  0C3E  3000               	movlw	0
  7638  0C3F  07A2               	addwf	i1read_write_flash_ram@i+1,f
  7639  0C40  2C10               	goto	i1l2885
  7640  0C41                     i1l580:	
  7641                           
  7642                           ;m25p16.c: 154: }
  7643                           ;m25p16.c: 155: }
  7644                           ;m25p16.c: 157: RD3 = 1;
  7645  0C41  1588               	bsf	8,3	;volatile
  7646                           
  7647                           ;m25p16.c: 159: _delay((unsigned long)((1)*(4000000/4000000.0)));
  7648  0C42  0000               	nop
  7649  0C43                     i1l2889:	
  7650                           ;m25p16.c: 160: while (read_ram_status() & 0b00000011) {
  7651                           
  7652  0C43  160A  118A  2647  120A  158A  	fcall	i1_read_ram_status
  7653  0C48  3903               	andlw	3
  7654  0C49  1903               	btfsc	3,2
  7655  0C4A  0008               	return
  7656                           
  7657                           ;m25p16.c: 161: _delay((unsigned long)((1)*(4000000/4000.0)));
  7658  0C4B  30C7               	movlw	199
  7659  0C4C  00FB               	movwf	??i1_read_write_flash_ram
  7660  0C4D                     u333_27:	
  7661  0C4D  2C4E               	nop2
  7662  0C4E  0BFB               	decfsz	??i1_read_write_flash_ram,f
  7663  0C4F  2C4D               	goto	u333_27
  7664  0C50  2C51               	nop2
  7665  0C51  2C52               	nop2
  7666  0C52  2C43               	goto	i1l2889
  7667  0C53                     __end_ofi1_read_write_flash_ram:	
  7668                           
  7669                           	psect	text41
  7670  1647                     __ptext41:	
  7671 ;; *************** function i1_read_ram_status *****************
  7672 ;; Defined at:
  7673 ;;		line 57 in file "m25p16.c"
  7674 ;; Parameters:    Size  Location     Type
  7675 ;;		None
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  read_ram_sta    1    4[COMMON] unsigned char 
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  1    wreg      unsigned char 
  7680 ;; Registers used:
  7681 ;;		wreg, status,2, status,0, pclath, cstack
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7687 ;;      Params:         0       0       0       0       0
  7688 ;;      Locals:         1       0       0       0       0
  7689 ;;      Temps:          1       0       0       0       0
  7690 ;;      Totals:         2       0       0       0       0
  7691 ;;Total ram usage:        2 bytes
  7692 ;; Hardware stack levels used:    1
  7693 ;; Hardware stack levels required when called:    2
  7694 ;; This function calls:
  7695 ;;		i1_ReadSPI
  7696 ;;		i1_WriteSPI
  7697 ;; This function is called by:
  7698 ;;		i1_read_write_flash_ram
  7699 ;; This function uses a non-reentrant model
  7700 ;;
  7701                           
  7702                           
  7703                           ;psect for function i1_read_ram_status
  7704  1647                     i1_read_ram_status:	
  7705                           
  7706                           ;m25p16.c: 59: unsigned char status;
  7707                           ;m25p16.c: 60: RD3 = 0;
  7708                           
  7709                           ;incstack = 0
  7710 ;; hardware stack exceeded
  7711                           ; Regs used in i1_read_ram_status: [wreg+status,2+status,0+pclath+cstack]
  7712  1647  1283               	bcf	3,5	;RP0=0, select bank0
  7713  1648  1303               	bcf	3,6	;RP1=0, select bank0
  7714  1649  1188               	bcf	8,3	;volatile
  7715                           
  7716                           ;m25p16.c: 61: WriteSPI(0x05);
  7717  164A  3005               	movlw	5
  7718  164B  160A  118A  25E2  160A  118A  	fcall	i1_WriteSPI
  7719                           
  7720                           ;m25p16.c: 62: status = ReadSPI();
  7721  1650  160A  118A  25A9   	fcall	i1_ReadSPI
  7722  1653  00F3               	movwf	??i1_read_ram_status
  7723  1654  0873               	movf	??i1_read_ram_status,w
  7724  1655  00F4               	movwf	i1read_ram_status@status
  7725                           
  7726                           ;m25p16.c: 63: RD3 = 1;
  7727  1656  1283               	bcf	3,5	;RP0=0, select bank0
  7728  1657  1303               	bcf	3,6	;RP1=0, select bank0
  7729  1658  1588               	bsf	8,3	;volatile
  7730                           
  7731                           ;m25p16.c: 64: return status;
  7732  1659  0874               	movf	i1read_ram_status@status,w
  7733  165A  0008               	return
  7734  165B                     __end_ofi1_read_ram_status:	
  7735                           
  7736                           	psect	text42
  7737  1745                     __ptext42:	
  7738 ;; *************** function i1_ReadMemoryAdress *****************
  7739 ;; Defined at:
  7740 ;;		line 956 in file "functions.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;  var3            1    wreg     PTR unsigned char 
  7743 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), 
  7744 ;;  var2            1    2[COMMON] PTR unsigned char 
  7745 ;;		 -> SendMemoryData@addr2(1), saveDataToFlash@addr2(1), 
  7746 ;;  var1            1    3[COMMON] PTR unsigned char 
  7747 ;;		 -> SendMemoryData@addr1(1), saveDataToFlash@addr1(1), 
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;  var3            1    5[COMMON] PTR unsigned char 
  7750 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  1    wreg      void 
  7753 ;; Registers used:
  7754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7760 ;;      Params:         2       0       0       0       0
  7761 ;;      Locals:         1       0       0       0       0
  7762 ;;      Temps:          1       0       0       0       0
  7763 ;;      Totals:         4       0       0       0       0
  7764 ;;Total ram usage:        4 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    1
  7767 ;; This function calls:
  7768 ;;		i1_eeprom_read
  7769 ;; This function is called by:
  7770 ;;		_saveDataToFlash
  7771 ;; This function uses a non-reentrant model
  7772 ;;
  7773                           
  7774                           
  7775                           ;psect for function i1_ReadMemoryAdress
  7776  1745                     i1_ReadMemoryAdress:	
  7777                           
  7778                           ;incstack = 0
  7779 ;; hardware stack exceeded
  7780                           ; Regs used in i1_ReadMemoryAdress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7781                           ;i1ReadMemoryAdress@var3 stored from wreg
  7782  1745  00F5               	movwf	i1ReadMemoryAdress@var3
  7783                           
  7784                           ;functions.c: 958: *var3 = eeprom_read(1);
  7785  1746  3001               	movlw	1
  7786  1747  120A  118A  27E5  160A  118A  	fcall	i1_eeprom_read
  7787  174C  00F4               	movwf	??i1_ReadMemoryAdress
  7788  174D  0875               	movf	i1ReadMemoryAdress@var3,w
  7789  174E  0084               	movwf	4
  7790  174F  0874               	movf	??i1_ReadMemoryAdress,w
  7791  1750  1383               	bcf	3,7	;select IRP bank0
  7792  1751  0080               	movwf	0
  7793                           
  7794                           ;functions.c: 959: *var2 = eeprom_read(2);
  7795  1752  3002               	movlw	2
  7796  1753  120A  118A  27E5  160A  118A  	fcall	i1_eeprom_read
  7797  1758  00F4               	movwf	??i1_ReadMemoryAdress
  7798  1759  0872               	movf	i1ReadMemoryAdress@var2,w
  7799  175A  0084               	movwf	4
  7800  175B  0874               	movf	??i1_ReadMemoryAdress,w
  7801  175C  1383               	bcf	3,7	;select IRP bank0
  7802  175D  0080               	movwf	0
  7803                           
  7804                           ;functions.c: 960: *var1 = eeprom_read(3);
  7805  175E  3003               	movlw	3
  7806  175F  120A  118A  27E5   	fcall	i1_eeprom_read
  7807  1762  00F4               	movwf	??i1_ReadMemoryAdress
  7808  1763  0873               	movf	i1ReadMemoryAdress@var1,w
  7809  1764  0084               	movwf	4
  7810  1765  0874               	movf	??i1_ReadMemoryAdress,w
  7811  1766  1383               	bcf	3,7	;select IRP bank0
  7812  1767  0080               	movwf	0
  7813  1768  0008               	return
  7814  1769                     __end_ofi1_ReadMemoryAdress:	
  7815                           
  7816                           	psect	text43
  7817  17D7                     __ptext43:	
  7818 ;; *************** function i1_AnalogValue *****************
  7819 ;; Defined at:
  7820 ;;		line 871 in file "functions.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  channel         1    wreg     unsigned char 
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;  channel         1    7[COMMON] unsigned char 
  7825 ;; Return value:  Size  Location     Type
  7826 ;;                  1    wreg      unsigned char 
  7827 ;; Registers used:
  7828 ;;		wreg, status,2, status,0, pclath, cstack
  7829 ;; Tracked objects:
  7830 ;;		On entry : 0/0
  7831 ;;		On exit  : 0/0
  7832 ;;		Unchanged: 0/0
  7833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7834 ;;      Params:         0       0       0       0       0
  7835 ;;      Locals:         1       0       0       0       0
  7836 ;;      Temps:          1       0       0       0       0
  7837 ;;      Totals:         2       0       0       0       0
  7838 ;;Total ram usage:        2 bytes
  7839 ;; Hardware stack levels used:    1
  7840 ;; Hardware stack levels required when called:    1
  7841 ;; This function calls:
  7842 ;;		i1_DelayDs
  7843 ;; This function is called by:
  7844 ;;		_saveDataToFlash
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           
  7849                           ;psect for function i1_AnalogValue
  7850  17D7                     i1_AnalogValue:	
  7851                           
  7852                           ;incstack = 0
  7853 ;; hardware stack exceeded
  7854                           ; Regs used in i1_AnalogValue: [wreg+status,2+status,0+pclath+cstack]
  7855                           ;i1AnalogValue@channel stored from wreg
  7856  17D7  00F7               	movwf	i1AnalogValue@channel
  7857                           
  7858                           ;functions.c: 873: ADCON0bits.CHS = channel;
  7859  17D8  0877               	movf	i1AnalogValue@channel,w
  7860  17D9  00F6               	movwf	??i1_AnalogValue
  7861  17DA  0DF6               	rlf	??i1_AnalogValue,f
  7862  17DB  0DF6               	rlf	??i1_AnalogValue,f
  7863  17DC  1283               	bcf	3,5	;RP0=0, select bank0
  7864  17DD  1303               	bcf	3,6	;RP1=0, select bank0
  7865  17DE  081F               	movf	31,w	;volatile
  7866  17DF  0676               	xorwf	??i1_AnalogValue,w
  7867  17E0  39C3               	andlw	-61
  7868  17E1  0676               	xorwf	??i1_AnalogValue,w
  7869  17E2  009F               	movwf	31	;volatile
  7870                           
  7871                           ;functions.c: 874: ADCON0bits.ADON = 1;
  7872  17E3  141F               	bsf	31,0	;volatile
  7873                           
  7874                           ;functions.c: 875: DelayDs(1);
  7875  17E4  3001               	movlw	1
  7876  17E5  00F0               	movwf	i1DelayDs@cnt
  7877  17E6  3000               	movlw	0
  7878  17E7  00F1               	movwf	i1DelayDs@cnt+1
  7879  17E8  160A  118A  26A5  160A  118A  	fcall	i1_DelayDs
  7880                           
  7881                           ;functions.c: 876: ADCON0bits.GO = 1;
  7882  17ED  1283               	bcf	3,5	;RP0=0, select bank0
  7883  17EE  1303               	bcf	3,6	;RP1=0, select bank0
  7884  17EF  149F               	bsf	31,1	;volatile
  7885                           
  7886                           ;functions.c: 877: DelayDs(1);
  7887  17F0  3001               	movlw	1
  7888  17F1  00F0               	movwf	i1DelayDs@cnt
  7889  17F2  3000               	movlw	0
  7890  17F3  00F1               	movwf	i1DelayDs@cnt+1
  7891  17F4  160A  118A  26A5  160A  118A  	fcall	i1_DelayDs
  7892  17F9                     i1l467:	
  7893                           ;functions.c: 878: while(ADCON0bits.GO);
  7894                           
  7895  17F9  1283               	bcf	3,5	;RP0=0, select bank0
  7896  17FA  1303               	bcf	3,6	;RP1=0, select bank0
  7897  17FB  189F               	btfsc	31,1	;volatile
  7898  17FC  2FF9               	goto	i1l467
  7899                           
  7900                           ;functions.c: 879: ADCON0bits.ADON = 0;
  7901  17FD  101F               	bcf	31,0	;volatile
  7902                           
  7903                           ;functions.c: 880: return ADRESH;
  7904  17FE  081E               	movf	30,w	;volatile
  7905  17FF  0008               	return
  7906  1800                     __end_ofi1_AnalogValue:	
  7907                           
  7908                           	psect	text44
  7909  16A5                     __ptext44:	
  7910 ;; *************** function i1_DelayDs *****************
  7911 ;; Defined at:
  7912 ;;		line 481 in file "functions.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;  cnt             2    0[COMMON] int 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  DelayDs         2    4[COMMON] int 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      void 
  7919 ;; Registers used:
  7920 ;;		wreg, status,2
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7926 ;;      Params:         2       0       0       0       0
  7927 ;;      Locals:         2       0       0       0       0
  7928 ;;      Temps:          2       0       0       0       0
  7929 ;;      Totals:         6       0       0       0       0
  7930 ;;Total ram usage:        6 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; This function calls:
  7933 ;;		Nothing
  7934 ;; This function is called by:
  7935 ;;		i1_AnalogValue
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           
  7940                           ;psect for function i1_DelayDs
  7941  16A5                     i1_DelayDs:	
  7942                           
  7943                           ;functions.c: 482: int i;
  7944                           ;functions.c: 483: for(i=0;i<cnt;i++){
  7945                           
  7946                           ;incstack = 0
  7947 ;; hardware stack exceeded
  7948                           ; Regs used in i1_DelayDs: [wreg+status,2]
  7949  16A5  01F4               	clrf	i1DelayDs@i
  7950  16A6  01F5               	clrf	i1DelayDs@i+1
  7951  16A7                     i1l397:	
  7952  16A7  0875               	movf	i1DelayDs@i+1,w
  7953  16A8  3A80               	xorlw	128
  7954  16A9  00F2               	movwf	??i1_DelayDs
  7955  16AA  0871               	movf	i1DelayDs@cnt+1,w
  7956  16AB  3A80               	xorlw	128
  7957  16AC  0272               	subwf	??i1_DelayDs,w
  7958  16AD  1D03               	skipz
  7959  16AE  2EB1               	goto	u151_25
  7960  16AF  0870               	movf	i1DelayDs@cnt,w
  7961  16B0  0274               	subwf	i1DelayDs@i,w
  7962  16B1                     u151_25:	
  7963  16B1  1803               	btfsc	3,0
  7964  16B2  0008               	return
  7965                           
  7966                           ;functions.c: 484: _delay((unsigned long)((100)*(4000000/4000.0)));
  7967  16B3  3082               	movlw	130
  7968  16B4  00F3               	movwf	??i1_DelayDs+1
  7969  16B5  30DD               	movlw	221
  7970  16B6  00F2               	movwf	??i1_DelayDs
  7971  16B7                     u334_27:	
  7972  16B7  0BF2               	decfsz	??i1_DelayDs,f
  7973  16B8  2EB7               	goto	u334_27
  7974  16B9  0BF3               	decfsz	??i1_DelayDs+1,f
  7975  16BA  2EB7               	goto	u334_27
  7976  16BB  2EBC               	nop2
  7977  16BC  3001               	movlw	1
  7978  16BD  07F4               	addwf	i1DelayDs@i,f
  7979  16BE  1803               	skipnc
  7980  16BF  0AF5               	incf	i1DelayDs@i+1,f
  7981  16C0  3000               	movlw	0
  7982  16C1  07F5               	addwf	i1DelayDs@i+1,f
  7983  16C2  2EA7               	goto	i1l397
  7984  16C3                     __end_ofi1_DelayDs:	
  7985                           
  7986                           	psect	text45
  7987  0418                     __ptext45:	
  7988 ;; *************** function _ReadClock *****************
  7989 ;; Defined at:
  7990 ;;		line 49 in file "MCP79510.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;  seconds         1    wreg     PTR unsigned char 
  7993 ;;		 -> saveDataToFlash@seconds(1), 
  7994 ;;  minutes         1    4[COMMON] PTR unsigned char 
  7995 ;;		 -> saveDataToFlash@minutes(1), 
  7996 ;;  hour            1    5[COMMON] PTR unsigned char 
  7997 ;;		 -> saveDataToFlash@hours(1), 
  7998 ;;  date            1    6[COMMON] PTR unsigned char 
  7999 ;;		 -> saveDataToFlash@date(1), 
  8000 ;;  month           1    7[COMMON] PTR unsigned char 
  8001 ;;		 -> saveDataToFlash@month(1), 
  8002 ;;  year            1    8[COMMON] PTR unsigned char 
  8003 ;;		 -> saveDataToFlash@year(1), 
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;  seconds         1    6[BANK0 ] PTR unsigned char 
  8006 ;;		 -> saveDataToFlash@seconds(1), 
  8007 ;;  date1           1   12[BANK0 ] unsigned char 
  8008 ;;  year1           1   11[BANK0 ] unsigned char 
  8009 ;;  month1          1   10[BANK0 ] unsigned char 
  8010 ;;  hour1           1    9[BANK0 ] unsigned char 
  8011 ;;  min1            1    8[BANK0 ] unsigned char 
  8012 ;;  sec1            1    7[BANK0 ] unsigned char 
  8013 ;;  year10          1    5[BANK0 ] unsigned char 
  8014 ;;  month10         1    4[BANK0 ] unsigned char 
  8015 ;;  date10          1    3[BANK0 ] unsigned char 
  8016 ;;  hour10          1    2[BANK0 ] unsigned char 
  8017 ;;  min10           1    1[BANK0 ] unsigned char 
  8018 ;;  sec10           1    0[BANK0 ] unsigned char 
  8019 ;; Return value:  Size  Location     Type
  8020 ;;                  1    wreg      void 
  8021 ;; Registers used:
  8022 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8023 ;; Tracked objects:
  8024 ;;		On entry : 0/0
  8025 ;;		On exit  : 0/0
  8026 ;;		Unchanged: 0/0
  8027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8028 ;;      Params:         5       0       0       0       0
  8029 ;;      Locals:         0      13       0       0       0
  8030 ;;      Temps:          2       0       0       0       0
  8031 ;;      Totals:         7      13       0       0       0
  8032 ;;Total ram usage:       20 bytes
  8033 ;; Hardware stack levels used:    1
  8034 ;; Hardware stack levels required when called:    2
  8035 ;; This function calls:
  8036 ;;		___bmul
  8037 ;;		i1_ReadSPI
  8038 ;;		i1_WriteSPI
  8039 ;; This function is called by:
  8040 ;;		_saveDataToFlash
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           
  8045                           ;psect for function _ReadClock
  8046  0418                     _ReadClock:	
  8047                           
  8048                           ;incstack = 0
  8049 ;; hardware stack exceeded
  8050                           ; Regs used in _ReadClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8051                           ;ReadClock@seconds stored from wreg
  8052  0418  1283               	bcf	3,5	;RP0=0, select bank0
  8053  0419  1303               	bcf	3,6	;RP1=0, select bank0
  8054  041A  00A6               	movwf	ReadClock@seconds
  8055                           
  8056                           ;MCP79510.c: 51: unsigned char sec10, min10, hour10, date10, month10, year10, sec1, min1
      +                          , hour1, date1, month1, year1;
  8057                           ;MCP79510.c: 53: RD4 = 0;
  8058  041B  1208               	bcf	8,4	;volatile
  8059                           
  8060                           ;MCP79510.c: 55: WriteSPI(0x13);
  8061  041C  3013               	movlw	19
  8062  041D  160A  118A  25E2  120A  118A  	fcall	i1_WriteSPI
  8063                           
  8064                           ;MCP79510.c: 56: WriteSPI(0x01);
  8065  0422  3001               	movlw	1
  8066  0423  160A  118A  25E2  120A  118A  	fcall	i1_WriteSPI
  8067                           
  8068                           ;MCP79510.c: 58: sec1 = ReadSPI() & 0x7F;
  8069  0428  160A  118A  25A9  120A  118A  	fcall	i1_ReadSPI
  8070  042D  397F               	andlw	127
  8071  042E  00F9               	movwf	??_ReadClock
  8072  042F  0879               	movf	??_ReadClock,w
  8073  0430  1283               	bcf	3,5	;RP0=0, select bank0
  8074  0431  1303               	bcf	3,6	;RP1=0, select bank0
  8075  0432  00A7               	movwf	ReadClock@sec1
  8076                           
  8077                           ;MCP79510.c: 59: min1 = ReadSPI() & 0x7F;
  8078  0433  160A  118A  25A9  120A  118A  	fcall	i1_ReadSPI
  8079  0438  397F               	andlw	127
  8080  0439  00F9               	movwf	??_ReadClock
  8081  043A  0879               	movf	??_ReadClock,w
  8082  043B  1283               	bcf	3,5	;RP0=0, select bank0
  8083  043C  1303               	bcf	3,6	;RP1=0, select bank0
  8084  043D  00A8               	movwf	ReadClock@min1
  8085                           
  8086                           ;MCP79510.c: 60: hour1 = ReadSPI() & 0x3F;
  8087  043E  160A  118A  25A9  120A  118A  	fcall	i1_ReadSPI
  8088  0443  393F               	andlw	63
  8089  0444  00F9               	movwf	??_ReadClock
  8090  0445  0879               	movf	??_ReadClock,w
  8091  0446  1283               	bcf	3,5	;RP0=0, select bank0
  8092  0447  1303               	bcf	3,6	;RP1=0, select bank0
  8093  0448  00A9               	movwf	ReadClock@hour1
  8094                           
  8095                           ;MCP79510.c: 61: date1 = ReadSPI();
  8096  0449  160A  118A  25A9  120A  118A  	fcall	i1_ReadSPI
  8097  044E  00F9               	movwf	??_ReadClock
  8098  044F  0879               	movf	??_ReadClock,w
  8099  0450  1283               	bcf	3,5	;RP0=0, select bank0
  8100  0451  1303               	bcf	3,6	;RP1=0, select bank0
  8101  0452  00AC               	movwf	ReadClock@date1
  8102                           
  8103                           ;MCP79510.c: 62: date1 = ReadSPI() & 0x3F;
  8104  0453  160A  118A  25A9  120A  118A  	fcall	i1_ReadSPI
  8105  0458  393F               	andlw	63
  8106  0459  00F9               	movwf	??_ReadClock
  8107  045A  0879               	movf	??_ReadClock,w
  8108  045B  1283               	bcf	3,5	;RP0=0, select bank0
  8109  045C  1303               	bcf	3,6	;RP1=0, select bank0
  8110  045D  00AC               	movwf	ReadClock@date1
  8111                           
  8112                           ;MCP79510.c: 63: month1 = ReadSPI() & 0x1F;
  8113  045E  160A  118A  25A9  120A  118A  	fcall	i1_ReadSPI
  8114  0463  391F               	andlw	31
  8115  0464  00F9               	movwf	??_ReadClock
  8116  0465  0879               	movf	??_ReadClock,w
  8117  0466  1283               	bcf	3,5	;RP0=0, select bank0
  8118  0467  1303               	bcf	3,6	;RP1=0, select bank0
  8119  0468  00AA               	movwf	ReadClock@month1
  8120                           
  8121                           ;MCP79510.c: 64: year1 = ReadSPI();
  8122  0469  160A  118A  25A9  120A  118A  	fcall	i1_ReadSPI
  8123  046E  00F9               	movwf	??_ReadClock
  8124  046F  0879               	movf	??_ReadClock,w
  8125  0470  1283               	bcf	3,5	;RP0=0, select bank0
  8126  0471  1303               	bcf	3,6	;RP1=0, select bank0
  8127  0472  00AB               	movwf	ReadClock@year1
  8128                           
  8129                           ;MCP79510.c: 66: RD4 = 1;
  8130  0473  1608               	bsf	8,4	;volatile
  8131                           
  8132                           ;MCP79510.c: 69: sec10 = (sec1 & 0x70) >> 4;
  8133  0474  0827               	movf	ReadClock@sec1,w
  8134  0475  00F9               	movwf	??_ReadClock
  8135  0476  3004               	movlw	4
  8136  0477                     u181_25:	
  8137  0477  1003               	clrc
  8138  0478  0CF9               	rrf	??_ReadClock,f
  8139  0479  3EFF               	addlw	-1
  8140  047A  1D03               	skipz
  8141  047B  2C77               	goto	u181_25
  8142  047C  0879               	movf	??_ReadClock,w
  8143  047D  3907               	andlw	7
  8144  047E  00FA               	movwf	??_ReadClock+1
  8145  047F  087A               	movf	??_ReadClock+1,w
  8146  0480  00A0               	movwf	ReadClock@sec10
  8147                           
  8148                           ;MCP79510.c: 70: sec1 = sec1 & 0x0F;
  8149  0481  0827               	movf	ReadClock@sec1,w
  8150  0482  390F               	andlw	15
  8151  0483  00F9               	movwf	??_ReadClock
  8152  0484  0879               	movf	??_ReadClock,w
  8153  0485  00A7               	movwf	ReadClock@sec1
  8154                           
  8155                           ;MCP79510.c: 71: *seconds = sec1 + sec10 * 10;
  8156  0486  300A               	movlw	10
  8157  0487  00F9               	movwf	??_ReadClock
  8158  0488  0879               	movf	??_ReadClock,w
  8159  0489  00F0               	movwf	___bmul@multiplicand
  8160  048A  0820               	movf	ReadClock@sec10,w
  8161  048B  160A  118A  2600  120A  118A  	fcall	___bmul
  8162  0490  1283               	bcf	3,5	;RP0=0, select bank0
  8163  0491  1303               	bcf	3,6	;RP1=0, select bank0
  8164  0492  0727               	addwf	ReadClock@sec1,w
  8165  0493  00FA               	movwf	??_ReadClock+1
  8166  0494  0826               	movf	ReadClock@seconds,w
  8167  0495  0084               	movwf	4
  8168  0496  087A               	movf	??_ReadClock+1,w
  8169  0497  1383               	bcf	3,7	;select IRP bank0
  8170  0498  0080               	movwf	0
  8171                           
  8172                           ;MCP79510.c: 73: min10 = (min1 & 0x70) >> 4;
  8173  0499  0828               	movf	ReadClock@min1,w
  8174  049A  00F9               	movwf	??_ReadClock
  8175  049B  3004               	movlw	4
  8176  049C                     u182_25:	
  8177  049C  1003               	clrc
  8178  049D  0CF9               	rrf	??_ReadClock,f
  8179  049E  3EFF               	addlw	-1
  8180  049F  1D03               	skipz
  8181  04A0  2C9C               	goto	u182_25
  8182  04A1  0879               	movf	??_ReadClock,w
  8183  04A2  3907               	andlw	7
  8184  04A3  00FA               	movwf	??_ReadClock+1
  8185  04A4  087A               	movf	??_ReadClock+1,w
  8186  04A5  00A1               	movwf	ReadClock@min10
  8187                           
  8188                           ;MCP79510.c: 74: min1 = min1 & 0x0F;
  8189  04A6  0828               	movf	ReadClock@min1,w
  8190  04A7  390F               	andlw	15
  8191  04A8  00F9               	movwf	??_ReadClock
  8192  04A9  0879               	movf	??_ReadClock,w
  8193  04AA  00A8               	movwf	ReadClock@min1
  8194                           
  8195                           ;MCP79510.c: 75: *minutes = min1 + min10 * 10;
  8196  04AB  300A               	movlw	10
  8197  04AC  00F9               	movwf	??_ReadClock
  8198  04AD  0879               	movf	??_ReadClock,w
  8199  04AE  00F0               	movwf	___bmul@multiplicand
  8200  04AF  0821               	movf	ReadClock@min10,w
  8201  04B0  160A  118A  2600  120A  118A  	fcall	___bmul
  8202  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  8203  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  8204  04B7  0728               	addwf	ReadClock@min1,w
  8205  04B8  00FA               	movwf	??_ReadClock+1
  8206  04B9  0874               	movf	ReadClock@minutes,w
  8207  04BA  0084               	movwf	4
  8208  04BB  087A               	movf	??_ReadClock+1,w
  8209  04BC  1383               	bcf	3,7	;select IRP bank0
  8210  04BD  0080               	movwf	0
  8211                           
  8212                           ;MCP79510.c: 77: hour10 = (hour1 & 0x30) >> 4;
  8213  04BE  0829               	movf	ReadClock@hour1,w
  8214  04BF  00F9               	movwf	??_ReadClock
  8215  04C0  3004               	movlw	4
  8216  04C1                     u183_25:	
  8217  04C1  1003               	clrc
  8218  04C2  0CF9               	rrf	??_ReadClock,f
  8219  04C3  3EFF               	addlw	-1
  8220  04C4  1D03               	skipz
  8221  04C5  2CC1               	goto	u183_25
  8222  04C6  0879               	movf	??_ReadClock,w
  8223  04C7  3903               	andlw	3
  8224  04C8  00FA               	movwf	??_ReadClock+1
  8225  04C9  087A               	movf	??_ReadClock+1,w
  8226  04CA  00A2               	movwf	ReadClock@hour10
  8227                           
  8228                           ;MCP79510.c: 78: hour1 = hour1 & 0x0F;
  8229  04CB  0829               	movf	ReadClock@hour1,w
  8230  04CC  390F               	andlw	15
  8231  04CD  00F9               	movwf	??_ReadClock
  8232  04CE  0879               	movf	??_ReadClock,w
  8233  04CF  00A9               	movwf	ReadClock@hour1
  8234                           
  8235                           ;MCP79510.c: 79: *hour = hour1 + hour10 * 10;
  8236  04D0  300A               	movlw	10
  8237  04D1  00F9               	movwf	??_ReadClock
  8238  04D2  0879               	movf	??_ReadClock,w
  8239  04D3  00F0               	movwf	___bmul@multiplicand
  8240  04D4  0822               	movf	ReadClock@hour10,w
  8241  04D5  160A  118A  2600  120A  118A  	fcall	___bmul
  8242  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  8243  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  8244  04DC  0729               	addwf	ReadClock@hour1,w
  8245  04DD  00FA               	movwf	??_ReadClock+1
  8246  04DE  0875               	movf	ReadClock@hour,w
  8247  04DF  0084               	movwf	4
  8248  04E0  087A               	movf	??_ReadClock+1,w
  8249  04E1  1383               	bcf	3,7	;select IRP bank0
  8250  04E2  0080               	movwf	0
  8251                           
  8252                           ;MCP79510.c: 81: date10 = (date1 & 0x30) >> 4;
  8253  04E3  082C               	movf	ReadClock@date1,w
  8254  04E4  00F9               	movwf	??_ReadClock
  8255  04E5  3004               	movlw	4
  8256  04E6                     u184_25:	
  8257  04E6  1003               	clrc
  8258  04E7  0CF9               	rrf	??_ReadClock,f
  8259  04E8  3EFF               	addlw	-1
  8260  04E9  1D03               	skipz
  8261  04EA  2CE6               	goto	u184_25
  8262  04EB  0879               	movf	??_ReadClock,w
  8263  04EC  3903               	andlw	3
  8264  04ED  00FA               	movwf	??_ReadClock+1
  8265  04EE  087A               	movf	??_ReadClock+1,w
  8266  04EF  00A3               	movwf	ReadClock@date10
  8267                           
  8268                           ;MCP79510.c: 82: date1 = date1 & 0x0F;
  8269  04F0  082C               	movf	ReadClock@date1,w
  8270  04F1  390F               	andlw	15
  8271  04F2  00F9               	movwf	??_ReadClock
  8272  04F3  0879               	movf	??_ReadClock,w
  8273  04F4  00AC               	movwf	ReadClock@date1
  8274                           
  8275                           ;MCP79510.c: 83: *date = date1 + date10 * 10;
  8276  04F5  300A               	movlw	10
  8277  04F6  00F9               	movwf	??_ReadClock
  8278  04F7  0879               	movf	??_ReadClock,w
  8279  04F8  00F0               	movwf	___bmul@multiplicand
  8280  04F9  0823               	movf	ReadClock@date10,w
  8281  04FA  160A  118A  2600  120A  118A  	fcall	___bmul
  8282  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  8283  0500  1303               	bcf	3,6	;RP1=0, select bank0
  8284  0501  072C               	addwf	ReadClock@date1,w
  8285  0502  00FA               	movwf	??_ReadClock+1
  8286  0503  0876               	movf	ReadClock@date,w
  8287  0504  0084               	movwf	4
  8288  0505  087A               	movf	??_ReadClock+1,w
  8289  0506  1383               	bcf	3,7	;select IRP bank0
  8290  0507  0080               	movwf	0
  8291                           
  8292                           ;MCP79510.c: 85: month10 = (month1 & 0x10) >> 4;
  8293  0508  082A               	movf	ReadClock@month1,w
  8294  0509  00F9               	movwf	??_ReadClock
  8295  050A  3004               	movlw	4
  8296  050B                     u185_25:	
  8297  050B  1003               	clrc
  8298  050C  0CF9               	rrf	??_ReadClock,f
  8299  050D  3EFF               	addlw	-1
  8300  050E  1D03               	skipz
  8301  050F  2D0B               	goto	u185_25
  8302  0510  0879               	movf	??_ReadClock,w
  8303  0511  3901               	andlw	1
  8304  0512  00FA               	movwf	??_ReadClock+1
  8305  0513  087A               	movf	??_ReadClock+1,w
  8306  0514  00A4               	movwf	ReadClock@month10
  8307                           
  8308                           ;MCP79510.c: 86: month1 = month1 & 0x0F;
  8309  0515  082A               	movf	ReadClock@month1,w
  8310  0516  390F               	andlw	15
  8311  0517  00F9               	movwf	??_ReadClock
  8312  0518  0879               	movf	??_ReadClock,w
  8313  0519  00AA               	movwf	ReadClock@month1
  8314                           
  8315                           ;MCP79510.c: 87: *month = month1 + month10 * 10;
  8316  051A  300A               	movlw	10
  8317  051B  00F9               	movwf	??_ReadClock
  8318  051C  0879               	movf	??_ReadClock,w
  8319  051D  00F0               	movwf	___bmul@multiplicand
  8320  051E  0824               	movf	ReadClock@month10,w
  8321  051F  160A  118A  2600  120A  118A  	fcall	___bmul
  8322  0524  1283               	bcf	3,5	;RP0=0, select bank0
  8323  0525  1303               	bcf	3,6	;RP1=0, select bank0
  8324  0526  072A               	addwf	ReadClock@month1,w
  8325  0527  00FA               	movwf	??_ReadClock+1
  8326  0528  0877               	movf	ReadClock@month,w
  8327  0529  0084               	movwf	4
  8328  052A  087A               	movf	??_ReadClock+1,w
  8329  052B  1383               	bcf	3,7	;select IRP bank0
  8330  052C  0080               	movwf	0
  8331                           
  8332                           ;MCP79510.c: 89: year10 = (year1 & 0xF0) >> 4;
  8333  052D  082B               	movf	ReadClock@year1,w
  8334  052E  00F9               	movwf	??_ReadClock
  8335  052F  3004               	movlw	4
  8336  0530                     u186_25:	
  8337  0530  1003               	clrc
  8338  0531  0CF9               	rrf	??_ReadClock,f
  8339  0532  3EFF               	addlw	-1
  8340  0533  1D03               	skipz
  8341  0534  2D30               	goto	u186_25
  8342  0535  0879               	movf	??_ReadClock,w
  8343  0536  390F               	andlw	15
  8344  0537  00FA               	movwf	??_ReadClock+1
  8345  0538  087A               	movf	??_ReadClock+1,w
  8346  0539  00A5               	movwf	ReadClock@year10
  8347                           
  8348                           ;MCP79510.c: 90: year1 = year1 & 0x0F;
  8349  053A  082B               	movf	ReadClock@year1,w
  8350  053B  390F               	andlw	15
  8351  053C  00F9               	movwf	??_ReadClock
  8352  053D  0879               	movf	??_ReadClock,w
  8353  053E  00AB               	movwf	ReadClock@year1
  8354                           
  8355                           ;MCP79510.c: 91: *year = year1 + year10 * 10;
  8356  053F  300A               	movlw	10
  8357  0540  00F9               	movwf	??_ReadClock
  8358  0541  0879               	movf	??_ReadClock,w
  8359  0542  00F0               	movwf	___bmul@multiplicand
  8360  0543  0825               	movf	ReadClock@year10,w
  8361  0544  160A  118A  2600   	fcall	___bmul
  8362  0547  1283               	bcf	3,5	;RP0=0, select bank0
  8363  0548  1303               	bcf	3,6	;RP1=0, select bank0
  8364  0549  072B               	addwf	ReadClock@year1,w
  8365  054A  00FA               	movwf	??_ReadClock+1
  8366  054B  0878               	movf	ReadClock@year,w
  8367  054C  0084               	movwf	4
  8368  054D  087A               	movf	??_ReadClock+1,w
  8369  054E  1383               	bcf	3,7	;select IRP bank0
  8370  054F  0080               	movwf	0
  8371  0550  0008               	return
  8372  0551                     __end_of_ReadClock:	
  8373                           
  8374                           	psect	text46
  8375  15A9                     __ptext46:	
  8376 ;; *************** function i1_ReadSPI *****************
  8377 ;; Defined at:
  8378 ;;		line 502 in file "functions.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;		None
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;		None
  8383 ;; Return value:  Size  Location     Type
  8384 ;;                  1    wreg      unsigned char 
  8385 ;; Registers used:
  8386 ;;		wreg, status,2, status,0, pclath, cstack
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8392 ;;      Params:         0       0       0       0       0
  8393 ;;      Locals:         0       0       0       0       0
  8394 ;;      Temps:          0       0       0       0       0
  8395 ;;      Totals:         0       0       0       0       0
  8396 ;;Total ram usage:        0 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:    1
  8399 ;; This function calls:
  8400 ;;		i1_WriteSPI
  8401 ;; This function is called by:
  8402 ;;		_ReadClock
  8403 ;;		i1_read_ram_status
  8404 ;;		i1_read_write_flash_ram
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           
  8409                           ;psect for function i1_ReadSPI
  8410  15A9                     i1_ReadSPI:	
  8411                           
  8412                           ;functions.c: 504: WriteSPI(0x00);
  8413                           
  8414                           ;incstack = 0
  8415 ;; hardware stack exceeded
  8416                           ; Regs used in i1_ReadSPI: [wreg+status,2+status,0+pclath+cstack]
  8417  15A9  3000               	movlw	0
  8418  15AA  160A  118A  25E2   	fcall	i1_WriteSPI
  8419                           
  8420                           ;functions.c: 505: return SSPBUF;
  8421  15AD  1283               	bcf	3,5	;RP0=0, select bank0
  8422  15AE  1303               	bcf	3,6	;RP1=0, select bank0
  8423  15AF  0813               	movf	19,w	;volatile
  8424  15B0  0008               	return
  8425  15B1                     __end_ofi1_ReadSPI:	
  8426                           
  8427                           	psect	text47
  8428  15E2                     __ptext47:	
  8429 ;; *************** function i1_WriteSPI *****************
  8430 ;; Defined at:
  8431 ;;		line 490 in file "functions.c"
  8432 ;; Parameters:    Size  Location     Type
  8433 ;;  databyte        1    wreg     unsigned char 
  8434 ;; Auto vars:     Size  Location     Type
  8435 ;;  databyte        1    2[COMMON] unsigned char 
  8436 ;;  WriteSPI        1    1[COMMON] unsigned char 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  1    wreg      void 
  8439 ;; Registers used:
  8440 ;;		wreg
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8446 ;;      Params:         0       0       0       0       0
  8447 ;;      Locals:         2       0       0       0       0
  8448 ;;      Temps:          1       0       0       0       0
  8449 ;;      Totals:         3       0       0       0       0
  8450 ;;Total ram usage:        3 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; This function calls:
  8453 ;;		Nothing
  8454 ;; This function is called by:
  8455 ;;		_ReadClock
  8456 ;;		i1_ReadSPI
  8457 ;;		i1_read_ram_status
  8458 ;;		i1_read_write_flash_ram
  8459 ;; This function uses a non-reentrant model
  8460 ;;
  8461                           
  8462                           
  8463                           ;psect for function i1_WriteSPI
  8464  15E2                     i1_WriteSPI:	
  8465                           
  8466                           ;incstack = 0
  8467 ;; hardware stack exceeded
  8468                           ; Regs used in i1_WriteSPI: [wreg]
  8469                           ;i1WriteSPI@databyte stored from wreg
  8470  15E2  00F2               	movwf	i1WriteSPI@databyte
  8471                           
  8472                           ;functions.c: 492: unsigned char buffer;
  8473                           ;functions.c: 493: buffer = SSPBUF;
  8474  15E3  1283               	bcf	3,5	;RP0=0, select bank0
  8475  15E4  1303               	bcf	3,6	;RP1=0, select bank0
  8476  15E5  0813               	movf	19,w	;volatile
  8477  15E6  00F0               	movwf	??i1_WriteSPI
  8478  15E7  0870               	movf	??i1_WriteSPI,w
  8479  15E8  00F1               	movwf	i1WriteSPI@buffer
  8480                           
  8481                           ;functions.c: 494: PIR1bits.SSPIF=0;
  8482  15E9  118C               	bcf	12,3	;volatile
  8483                           
  8484                           ;functions.c: 495: SSPBUF = databyte;
  8485  15EA  0872               	movf	i1WriteSPI@databyte,w
  8486  15EB  0093               	movwf	19	;volatile
  8487  15EC                     i1l403:	
  8488                           ;functions.c: 496: while(PIR1bits.SSPIF == 0);
  8489                           
  8490  15EC  1D8C               	btfss	12,3	;volatile
  8491  15ED  2DEC               	goto	i1l403
  8492                           
  8493                           ;functions.c: 497: PIR1bits.SSPIF = 0;
  8494  15EE  118C               	bcf	12,3	;volatile
  8495  15EF  0008               	return
  8496  15F0                     __end_ofi1_WriteSPI:	
  8497                           
  8498                           	psect	text48
  8499  1600                     __ptext48:	
  8500 ;; *************** function ___bmul *****************
  8501 ;; Defined at:
  8502 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  multiplier      1    wreg     unsigned char 
  8505 ;;  multiplicand    1    0[COMMON] unsigned char 
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  multiplier      1    3[COMMON] unsigned char 
  8508 ;;  product         1    2[COMMON] unsigned char 
  8509 ;; Return value:  Size  Location     Type
  8510 ;;                  1    wreg      unsigned char 
  8511 ;; Registers used:
  8512 ;;		wreg, status,2, status,0
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8518 ;;      Params:         1       0       0       0       0
  8519 ;;      Locals:         2       0       0       0       0
  8520 ;;      Temps:          1       0       0       0       0
  8521 ;;      Totals:         4       0       0       0       0
  8522 ;;Total ram usage:        4 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; This function calls:
  8525 ;;		Nothing
  8526 ;; This function is called by:
  8527 ;;		_ReadClock
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           
  8532                           ;psect for function ___bmul
  8533  1600                     ___bmul:	
  8534                           
  8535                           ;incstack = 0
  8536 ;; hardware stack exceeded
  8537                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8538                           ;___bmul@multiplier stored from wreg
  8539  1600  00F3               	movwf	___bmul@multiplier
  8540  1601  01F2               	clrf	___bmul@product
  8541  1602                     i1l2595:	
  8542  1602  1C73               	btfss	___bmul@multiplier,0
  8543  1603  2E08               	goto	i1l2599
  8544  1604  0870               	movf	___bmul@multiplicand,w
  8545  1605  00F1               	movwf	??___bmul
  8546  1606  0871               	movf	??___bmul,w
  8547  1607  07F2               	addwf	___bmul@product,f
  8548  1608                     i1l2599:	
  8549  1608  1003               	clrc
  8550  1609  0DF0               	rlf	___bmul@multiplicand,f
  8551  160A  1003               	clrc
  8552  160B  0CF3               	rrf	___bmul@multiplier,f
  8553  160C  0873               	movf	___bmul@multiplier,w
  8554  160D  1D03               	btfss	3,2
  8555  160E  2E02               	goto	i1l2595
  8556  160F  0872               	movf	___bmul@product,w
  8557  1610  0008               	return
  8558  1611                     __end_of___bmul:	
  8559                           
  8560                           	psect	text49
  8561  09EE                     __ptext49:	
  8562 ;; *************** function _IncreaseMemoryAdress *****************
  8563 ;; Defined at:
  8564 ;;		line 981 in file "functions.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;		None
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  var3            1    6[COMMON] unsigned char 
  8569 ;;  var2            1    5[COMMON] unsigned char 
  8570 ;;  var1            1    4[COMMON] unsigned char 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  1    wreg      void 
  8573 ;; Registers used:
  8574 ;;		wreg, status,2, status,0, pclath, cstack
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8580 ;;      Params:         0       0       0       0       0
  8581 ;;      Locals:         3       0       0       0       0
  8582 ;;      Temps:          1       0       0       0       0
  8583 ;;      Totals:         4       0       0       0       0
  8584 ;;Total ram usage:        4 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    1
  8587 ;; This function calls:
  8588 ;;		i1_eeprom_read
  8589 ;;		i1_eeprom_write
  8590 ;; This function is called by:
  8591 ;;		_saveDataToFlash
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           
  8596                           ;psect for function _IncreaseMemoryAdress
  8597  09EE                     _IncreaseMemoryAdress:	
  8598                           
  8599                           ;functions.c: 983: unsigned char var1, var2, var3;
  8600                           ;functions.c: 984: var1 = eeprom_read(3);
  8601                           
  8602                           ;incstack = 0
  8603 ;; hardware stack exceeded
  8604                           ; Regs used in _IncreaseMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  8605  09EE  3003               	movlw	3
  8606  09EF  120A  118A  27E5  120A  158A  	fcall	i1_eeprom_read
  8607  09F4  00F3               	movwf	??_IncreaseMemoryAdress
  8608  09F5  0873               	movf	??_IncreaseMemoryAdress,w
  8609  09F6  00F4               	movwf	IncreaseMemoryAdress@var1
  8610                           
  8611                           ;functions.c: 985: var1++;
  8612  09F7  3001               	movlw	1
  8613  09F8  00F3               	movwf	??_IncreaseMemoryAdress
  8614  09F9  0873               	movf	??_IncreaseMemoryAdress,w
  8615  09FA  07F4               	addwf	IncreaseMemoryAdress@var1,f
  8616                           
  8617                           ;functions.c: 986: eeprom_write(3,var1);
  8618  09FB  0874               	movf	IncreaseMemoryAdress@var1,w
  8619  09FC  00F3               	movwf	??_IncreaseMemoryAdress
  8620  09FD  0873               	movf	??_IncreaseMemoryAdress,w
  8621  09FE  00F0               	movwf	i1eeprom_write@value
  8622  09FF  3003               	movlw	3
  8623  0A00  160A  118A  27B1  120A  158A  	fcall	i1_eeprom_write
  8624                           
  8625                           ;functions.c: 987: if(var1 == 0)
  8626  0A05  0874               	movf	IncreaseMemoryAdress@var1,w
  8627  0A06  1D03               	btfss	3,2
  8628  0A07  0008               	return
  8629                           
  8630                           ;functions.c: 988: {
  8631                           ;functions.c: 989: var2 = eeprom_read(2);
  8632  0A08  3002               	movlw	2
  8633  0A09  120A  118A  27E5  120A  158A  	fcall	i1_eeprom_read
  8634  0A0E  00F3               	movwf	??_IncreaseMemoryAdress
  8635  0A0F  0873               	movf	??_IncreaseMemoryAdress,w
  8636  0A10  00F5               	movwf	IncreaseMemoryAdress@var2
  8637                           
  8638                           ;functions.c: 990: var2++;
  8639  0A11  3001               	movlw	1
  8640  0A12  00F3               	movwf	??_IncreaseMemoryAdress
  8641  0A13  0873               	movf	??_IncreaseMemoryAdress,w
  8642  0A14  07F5               	addwf	IncreaseMemoryAdress@var2,f
  8643                           
  8644                           ;functions.c: 991: eeprom_write(2,var2);
  8645  0A15  0875               	movf	IncreaseMemoryAdress@var2,w
  8646  0A16  00F3               	movwf	??_IncreaseMemoryAdress
  8647  0A17  0873               	movf	??_IncreaseMemoryAdress,w
  8648  0A18  00F0               	movwf	i1eeprom_write@value
  8649  0A19  3002               	movlw	2
  8650  0A1A  160A  118A  27B1  120A  158A  	fcall	i1_eeprom_write
  8651                           
  8652                           ;functions.c: 992: if(var2 == 0)
  8653  0A1F  0875               	movf	IncreaseMemoryAdress@var2,w
  8654  0A20  1D03               	btfss	3,2
  8655  0A21  0008               	return
  8656                           
  8657                           ;functions.c: 993: {
  8658                           ;functions.c: 994: var3 = eeprom_read(1);
  8659  0A22  3001               	movlw	1
  8660  0A23  120A  118A  27E5  120A  158A  	fcall	i1_eeprom_read
  8661  0A28  00F3               	movwf	??_IncreaseMemoryAdress
  8662  0A29  0873               	movf	??_IncreaseMemoryAdress,w
  8663  0A2A  00F6               	movwf	IncreaseMemoryAdress@var3
  8664                           
  8665                           ;functions.c: 995: var3++;
  8666  0A2B  3001               	movlw	1
  8667  0A2C  00F3               	movwf	??_IncreaseMemoryAdress
  8668  0A2D  0873               	movf	??_IncreaseMemoryAdress,w
  8669  0A2E  07F6               	addwf	IncreaseMemoryAdress@var3,f
  8670                           
  8671                           ;functions.c: 996: if(var3 > 0x1F)
  8672  0A2F  3020               	movlw	32
  8673  0A30  0276               	subwf	IncreaseMemoryAdress@var3,w
  8674  0A31  1C03               	skipc
  8675  0A32  2A37               	goto	i1l2801
  8676                           
  8677                           ;functions.c: 997: var3 = 0x1F;
  8678  0A33  301F               	movlw	31
  8679  0A34  00F3               	movwf	??_IncreaseMemoryAdress
  8680  0A35  0873               	movf	??_IncreaseMemoryAdress,w
  8681  0A36  00F6               	movwf	IncreaseMemoryAdress@var3
  8682  0A37                     i1l2801:	
  8683                           
  8684                           ;functions.c: 999: eeprom_write(1, var3);
  8685  0A37  0876               	movf	IncreaseMemoryAdress@var3,w
  8686  0A38  00F3               	movwf	??_IncreaseMemoryAdress
  8687  0A39  0873               	movf	??_IncreaseMemoryAdress,w
  8688  0A3A  00F0               	movwf	i1eeprom_write@value
  8689  0A3B  3001               	movlw	1
  8690  0A3C  160A  118A  27B1   	fcall	i1_eeprom_write
  8691  0A3F  0008               	return
  8692  0A40                     __end_of_IncreaseMemoryAdress:	
  8693                           
  8694                           	psect	text50
  8695  17B1                     __ptext50:	
  8696 ;; *************** function i1_eeprom_write *****************
  8697 ;; Defined at:
  8698 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eewrite.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;  addr            1    wreg     unsigned char 
  8701 ;;  value           1    0[COMMON] unsigned char 
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;  addr            1    2[COMMON] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  1    wreg      void 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8713 ;;      Params:         1       0       0       0       0
  8714 ;;      Locals:         1       0       0       0       0
  8715 ;;      Temps:          1       0       0       0       0
  8716 ;;      Totals:         3       0       0       0       0
  8717 ;;Total ram usage:        3 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; This function calls:
  8720 ;;		Nothing
  8721 ;; This function is called by:
  8722 ;;		_IncreaseMemoryAdress
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           
  8727                           ;psect for function i1_eeprom_write
  8728  17B1                     i1_eeprom_write:	
  8729                           
  8730                           ;incstack = 0
  8731 ;; hardware stack exceeded
  8732                           ; Regs used in i1_eeprom_write: [wreg+status,2+status,0]
  8733                           ;i1eeprom_write@addr stored from wreg
  8734  17B1  00F2               	movwf	i1eeprom_write@addr
  8735  17B2                     i1l685:	
  8736  17B2  1683               	bsf	3,5	;RP0=1, select bank3
  8737  17B3  1703               	bsf	3,6	;RP1=1, select bank3
  8738  17B4  188C               	btfsc	12,1	;volsfr
  8739  17B5  2FB2               	goto	i1l685
  8740  17B6  0872               	movf	i1eeprom_write@addr,w
  8741  17B7  1283               	bcf	3,5	;RP0=0, select bank2
  8742  17B8  1703               	bsf	3,6	;RP1=1, select bank2
  8743  17B9  008D               	movwf	13	;volatile
  8744  17BA  0870               	movf	i1eeprom_write@value,w
  8745  17BB  008C               	movwf	12	;volatile
  8746  17BC  303F               	movlw	63
  8747  17BD  00F1               	movwf	??i1_eeprom_write
  8748  17BE  0871               	movf	??i1_eeprom_write,w
  8749  17BF  1683               	bsf	3,5	;RP0=1, select bank3
  8750  17C0  1703               	bsf	3,6	;RP1=1, select bank3
  8751  17C1  058C               	andwf	12,f	;volsfr
  8752  17C2  1283               	bcf	3,5	;RP0=0, select bank0
  8753  17C3  1303               	bcf	3,6	;RP1=0, select bank0
  8754  17C4  1003               	bcf	3,0	;volatile
  8755  17C5  1B8B               	btfsc	11,7	;volatile
  8756  17C6  1403               	bsf	3,0	;volatile
  8757  17C7  138B               	bcf	11,7	;volatile
  8758  17C8  1683               	bsf	3,5	;RP0=1, select bank3
  8759  17C9  1703               	bsf	3,6	;RP1=1, select bank3
  8760  17CA  150C               	bsf	12,2	;volsfr
  8761  17CB  3055               	movlw	85
  8762  17CC  008D               	movwf	13	;volsfr
  8763  17CD  30AA               	movlw	170
  8764  17CE  008D               	movwf	13	;volsfr
  8765  17CF  148C               	bsf	12,1	;volsfr
  8766  17D0  110C               	bcf	12,2	;volsfr
  8767  17D1  1283               	bcf	3,5	;RP0=0, select bank0
  8768  17D2  1303               	bcf	3,6	;RP1=0, select bank0
  8769  17D3  1C03               	btfss	3,0	;volatile
  8770  17D4  0008               	return
  8771  17D5  178B               	bsf	11,7	;volatile
  8772  17D6  0008               	return
  8773  17D7                     __end_ofi1_eeprom_write:	
  8774                           
  8775                           	psect	text51
  8776  07E5                     __ptext51:	
  8777 ;; *************** function i1_eeprom_read *****************
  8778 ;; Defined at:
  8779 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eeread.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;  addr            1    wreg     unsigned char 
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;  addr            1    1[COMMON] unsigned char 
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      unsigned char 
  8786 ;; Registers used:
  8787 ;;		wreg, status,2, status,0
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8793 ;;      Params:         0       0       0       0       0
  8794 ;;      Locals:         1       0       0       0       0
  8795 ;;      Temps:          1       0       0       0       0
  8796 ;;      Totals:         2       0       0       0       0
  8797 ;;Total ram usage:        2 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; This function calls:
  8800 ;;		Nothing
  8801 ;; This function is called by:
  8802 ;;		_IncreaseMemoryAdress
  8803 ;;		i1_ReadMemoryAdress
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function i1_eeprom_read
  8809  07E5                     i1_eeprom_read:	
  8810                           
  8811                           ;incstack = 0
  8812 ;; hardware stack exceeded
  8813                           ; Regs used in i1_eeprom_read: [wreg+status,2+status,0]
  8814                           ;i1eeprom_read@addr stored from wreg
  8815  07E5  00F1               	movwf	i1eeprom_read@addr
  8816  07E6                     i1l663:	
  8817  07E6  0064               	clrwdt	;# 
  8818  07E7  1683               	bsf	3,5	;RP0=1, select bank3
  8819  07E8  1703               	bsf	3,6	;RP1=1, select bank3
  8820  07E9  188C               	btfsc	12,1	;volsfr
  8821  07EA  2FE6               	goto	i1l663
  8822  07EB  0871               	movf	i1eeprom_read@addr,w
  8823  07EC  1283               	bcf	3,5	;RP0=0, select bank2
  8824  07ED  1703               	bsf	3,6	;RP1=1, select bank2
  8825  07EE  008D               	movwf	13	;volatile
  8826  07EF  303F               	movlw	63
  8827  07F0  00F0               	movwf	??i1_eeprom_read
  8828  07F1  0870               	movf	??i1_eeprom_read,w
  8829  07F2  1683               	bsf	3,5	;RP0=1, select bank3
  8830  07F3  1703               	bsf	3,6	;RP1=1, select bank3
  8831  07F4  058C               	andwf	12,f	;volsfr
  8832  07F5  140C               	bsf	12,0	;volsfr
  8833  07F6  1003               	clrc
  8834  07F7  180C               	btfsc	12,0	;volsfr
  8835  07F8  1403               	setc
  8836  07F9  3000               	movlw	0
  8837  07FA  1803               	skipnc
  8838  07FB  3001               	movlw	1
  8839  07FC  1283               	bcf	3,5	;RP0=0, select bank2
  8840  07FD  1703               	bsf	3,6	;RP1=1, select bank2
  8841  07FE  080C               	movf	12,w	;volatile
  8842  07FF  0008               	return
  8843  0800                     __end_ofi1_eeprom_read:	
  8844                           
  8845                           	psect	text52
  8846  0963                     __ptext52:	
  8847 ;; *************** function _TimerCounter *****************
  8848 ;; Defined at:
  8849 ;;		line 385 in file "functions.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;		None
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;  i               2    3[COMMON] int 
  8854 ;; Return value:  Size  Location     Type
  8855 ;;                  1    wreg      void 
  8856 ;; Registers used:
  8857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8863 ;;      Params:         0       0       0       0       0
  8864 ;;      Locals:         2       0       0       0       0
  8865 ;;      Temps:          3       0       0       0       0
  8866 ;;      Totals:         5       0       0       0       0
  8867 ;;Total ram usage:        5 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; This function calls:
  8870 ;;		Nothing
  8871 ;; This function is called by:
  8872 ;;		_tc_int
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           
  8877                           ;psect for function _TimerCounter
  8878  0963                     _TimerCounter:	
  8879                           
  8880                           ;functions.c: 387: for (int i = 0; i < 5; i++)
  8881                           
  8882                           ;incstack = 0
  8883 ;; hardware stack exceeded
  8884                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  8885  0963  01F3               	clrf	TimerCounter@i
  8886  0964  01F4               	clrf	TimerCounter@i+1
  8887  0965                     L6:	
  8888  0965  0874               	movf	TimerCounter@i+1,w
  8889  0966  3A80               	xorlw	128
  8890  0967  00FF               	movwf	127
  8891  0968  3080               	movlw	128
  8892  0969  027F               	subwf	127,w
  8893  096A  1D03               	skipz
  8894  096B  296E               	goto	u210_25
  8895  096C  3005               	movlw	5
  8896  096D  0273               	subwf	TimerCounter@i,w
  8897  096E                     u210_25:	
  8898  096E  1803               	btfsc	3,0
  8899  096F  0008               	return
  8900                           
  8901                           ;functions.c: 388: {
  8902                           ;functions.c: 389: if(intClockTimer[i]>0)
  8903  0970  0873               	movf	TimerCounter@i,w
  8904  0971  00F0               	movwf	??_TimerCounter
  8905  0972  0770               	addwf	??_TimerCounter,w
  8906  0973  3E43               	addlw	(low (_intClockTimer| 0))& (0+255)
  8907  0974  0084               	movwf	4
  8908  0975  1383               	bcf	3,7	;select IRP bank0
  8909  0976  0800               	movf	0,w
  8910  0977  00F1               	movwf	??_TimerCounter+1
  8911  0978  0A84               	incf	4,f
  8912  0979  0800               	movf	0,w
  8913  097A  00F2               	movwf	??_TimerCounter+2
  8914  097B  0872               	movf	??_TimerCounter+2,w
  8915  097C  3A80               	xorlw	128
  8916  097D  00FF               	movwf	127
  8917  097E  3080               	movlw	128
  8918  097F  027F               	subwf	127,w
  8919  0980  1D03               	skipz
  8920  0981  2984               	goto	u211_25
  8921  0982  3001               	movlw	1
  8922  0983  0271               	subwf	??_TimerCounter+1,w
  8923  0984                     u211_25:	
  8924  0984  1C03               	skipc
  8925  0985  2998               	goto	i1l3127
  8926                           
  8927                           ;functions.c: 390: intClockTimer[i]--;
  8928  0986  0873               	movf	TimerCounter@i,w
  8929  0987  00F0               	movwf	??_TimerCounter
  8930  0988  0770               	addwf	??_TimerCounter,w
  8931  0989  3E43               	addlw	(low (_intClockTimer| 0))& (0+255)
  8932  098A  0084               	movwf	4
  8933  098B  30FF               	movlw	255
  8934  098C  1383               	bcf	3,7	;select IRP bank0
  8935  098D  0780               	addwf	0,f
  8936  098E  0F84               	incfsz	4,f
  8937  098F  0800               	movf	0,w
  8938  0990  1803               	skipnc
  8939  0991  0A00               	incf	0,w
  8940  0992  00FF               	movwf	127
  8941  0993  30FF               	movlw	255
  8942  0994  077F               	addwf	127,w
  8943  0995  0080               	movwf	0
  8944  0996  0384               	decf	4,f
  8945  0997  299E               	goto	i1l3129
  8946  0998                     i1l3127:	
  8947                           
  8948                           ;functions.c: 391: else
  8949                           ;functions.c: 392: bTimerComplete[i] = 1;
  8950  0998  0873               	movf	TimerCounter@i,w
  8951  0999  3E4D               	addlw	(low (_bTimerComplete| 0))& (0+255)
  8952  099A  0084               	movwf	4
  8953  099B  1383               	bcf	3,7	;select IRP bank0
  8954  099C  0180               	clrf	0
  8955  099D  0A80               	incf	0,f
  8956  099E                     i1l3129:	
  8957  099E  3001               	movlw	1
  8958  099F  07F3               	addwf	TimerCounter@i,f
  8959  09A0  1803               	skipnc
  8960  09A1  0AF4               	incf	TimerCounter@i+1,f
  8961  09A2  3000               	movlw	0
  8962  09A3  07F4               	addwf	TimerCounter@i+1,f
  8963  09A4  2965               	goto	L6
  8964  09A5                     __end_of_TimerCounter:	
  8965  007E                     btemp	set	126	;btemp
  8966  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    39
    Data        3
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     35      68
    BANK1            80     54      56
    BANK3            96     34      74
    BANK2            96      0       0

Pointer List with Targets:

    ReadClock@year	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@year(BANK0[1]), 

    ReadClock@month	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@month(BANK0[1]), 

    ReadClock@date	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@date(BANK0[1]), 

    ReadClock@hour	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@hours(BANK0[1]), 

    ReadClock@minutes	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@minutes(BANK0[1]), 

    ReadClock@seconds	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@seconds(BANK0[1]), 

    read_write_flash_ram@mem_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@value(BANK1[1]), saveDataToFlash@value(BANK0[1]), 

    ReadMemoryAdress@var1	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr1(BANK1[1]), saveDataToFlash@addr1(BANK0[1]), 

    ReadMemoryAdress@var2	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr2(BANK1[1]), saveDataToFlash@addr2(BANK0[1]), 

    ReadMemoryAdress@var3	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr3(BANK1[1]), saveDataToFlash@addr3(BANK0[1]), 

    ReceivedPacketHandler@Data	PTR unsigned char  size(1) Largest target is 30
		 -> TransiverReadFIFO@ReceivedString(BANK3[30]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _saveDataToFlash->i1_read_write_flash_ram
    i1_read_write_flash_ram->i1_read_ram_status
    i1_read_ram_status->i1_WriteSPI
    i1_ReadMemoryAdress->i1_eeprom_read
    i1_AnalogValue->i1_DelayDs
    _ReadClock->___bmul
    i1_ReadSPI->i1_WriteSPI
    _IncreaseMemoryAdress->i1_eeprom_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _tc_int in BANK0

    _tc_int->_saveDataToFlash
    _saveDataToFlash->_ReadClock

Critical Paths under _main in BANK1

    _main->_TransiverReadFIFO
    _TransiverToReceive->_FindChannel
    _TransiverReadFIFO->_ReceivedPacketHandler
    _ReceivedPacketHandler->_SendMemoryData
    _write_ram_status->_read_ram_status
    _ram_bulk_erase->_read_ram_status
    _SendMemoryData->_TransmittPacket
    _read_write_flash_ram->_read_ram_status
    _read_ram_status->_WriteSPI
    _ReadMemoryAdress->_eeprom_read
    _ResetMemoryAdress->_eeprom_write
    _TransiverInit->_FindChannel
    _Blink->_DelayDs
    _Mode_5->_TransmittPacket
    _Mode_4->_TransmittPacket
    _TransmittPacket->_FindChannel
    _WriteFIFO->_WriteSPI
    _FindChannel->_SetRFMode
    _SetRFMode->_RegisterSet
    _RegisterSet->_RegisterRead
    _RegisterRead->_WriteSPI
    _Mode_1->_DarknessCheck
    _LightWithSensController->_DarknessCheck
    _DarknessCheck->_AnalogValue
    _AnalogValue->_DelayDs
    _ClockInit->_WriteSPI
    _ReadSPI->_WriteSPI

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_TransiverReadFIFO

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  121765
                                             51 BANK1      3     3      0
                          _ClockInit
                             _Mode_0
                             _Mode_1
                             _Mode_2
                             _Mode_4
                             _Mode_5
                      _OperationMode
                            _PICInit
                  _ResetMemoryAdress
                     _SendMemoryData
                      _TransiverInit
                  _TransiverReadFIFO
                 _TransiverToReceive
                     _ram_bulk_erase
                    _read_ram_status
                   _write_ram_status
 ---------------------------------------------------------------------------------
 (1) _TransiverToReceive                                   2     2      0   12302
                                             21 BANK1      2     2      0
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (1) _TransiverReadFIFO                                   36    36      0   41057
                                             49 BANK1      2     2      0
                                              0 BANK3     34    34      0
                           _ReadFIFO
              _ReceivedPacketHandler
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _ReceivedPacketHandler                                2     2      0   36973
                                             47 BANK1      2     2      0
                        _AnalogValue
                      _DarknessCheck
                            _DelayDs
                      _OperationMode
                  _ResetMemoryAdress
                     _SendMemoryData
                    _TransmittPacket
                        _eeprom_read
                     _ram_bulk_erase
                    _read_ram_status
                   _write_ram_status
 ---------------------------------------------------------------------------------
 (1) _write_ram_status                                     1     1      0     167
                                              5 BANK1      1     1      0
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (1) _ram_bulk_erase                                       0     0      0     136
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _SendMemoryData                                      20    20      0   19279
                                             27 BANK1     20    20      0
                   _ReadMemoryAdress
                    _TransmittPacket
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (4) _read_write_flash_ram                                11     5      6    3772
                                              5 BANK1     11     5      6
                            _ReadSPI
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (2) _read_ram_status                                      2     2      0     102
                                              3 BANK1      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _ReadMemoryAdress                                     4     2      2    1481
                                              2 BANK1      4     2      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _ResetMemoryAdress                                    0     0      0     419
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (4) _eeprom_write                                         3     2      1     419
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0       3
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadFIFO                                             2     2      0      68
                                              3 BANK1      2     2      0
                            _ReadSPI
 ---------------------------------------------------------------------------------
 (1) _TransiverInit                                        1     1      0   12576
                                             21 BANK1      1     1      0
                              _Blink
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _Blink                                                5     3      2    1137
                                              6 BANK1      5     3      2
                            _DelayDs
 ---------------------------------------------------------------------------------
 (1) _PICInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mode_5                                               1     1      0   15310
                                             27 BANK1      1     1      0
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (1) _Mode_4                                               0     0      0   15310
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (3) _TransmittPacket                                      6     5      1   13356
                                             21 BANK1      6     5      1
                        _AnalogValue (ARG)
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                          _WriteFIFO
                        _eeprom_read (ARG)
                      _timerFunction
 ---------------------------------------------------------------------------------
 (4) _WriteFIFO                                            1     1      0      65
                                              3 BANK1      1     1      0
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _FindChannel                                          7     7      0    5882
                                             14 BANK1      7     7      0
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _SetRFMode                                            3     3      0    2873
                                             11 BANK1      3     3      0
                       _RegisterRead
                        _RegisterSet
 ---------------------------------------------------------------------------------
 (3) _RegisterSet                                          4     3      1    2517
                                              7 BANK1      4     3      1
                       _RegisterRead (ARG)
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _RegisterRead                                         4     4      0     167
                                              3 BANK1      4     4      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (1) _Mode_2                                               0     0      0    1954
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (1) _Mode_1                                               0     0      0    1091
                      _DarknessCheck
 ---------------------------------------------------------------------------------
 (1) _Mode_0                                               0     0      0    1954
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (2) _LightWithSensController                              0     0      0    1954
                      _DarknessCheck
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _timerFunction                                        5     1      4     863
                                              0 BANK1      5     1      4
 ---------------------------------------------------------------------------------
 (3) _DarknessCheck                                        2     2      0    1091
                                              8 BANK1      2     2      0
                        _AnalogValue
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (4) _AnalogValue                                          2     2      0    1023
                                              6 BANK1      2     2      0
                            _DelayDs
 ---------------------------------------------------------------------------------
 (3) _DelayDs                                              6     4      2     992
                                              0 BANK1      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            2     2      0     105
                                              3 BANK1      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _ReadSPI                                              0     0      0      34
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _WriteSPI                                             3     3      0      34
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _tc_int                                              7     7      0    6134
                                             28 BANK0      7     7      0
                       _TimerCounter
                    _saveDataToFlash
                    i1_OperationMode
 ---------------------------------------------------------------------------------
 (11) i1_OperationMode                                     2     2      0       1
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _saveDataToFlash                                    15    15      0    6021
                                             13 BANK0     15    15      0
               _IncreaseMemoryAdress
                          _ReadClock
                      i1_AnalogValue
                 i1_ReadMemoryAdress
             i1_read_write_flash_ram
 ---------------------------------------------------------------------------------
 (12) i1_read_write_flash_ram                             11     5      6    1659
                                              5 COMMON     8     2      6
                                              0 BANK0      3     3      0
                          i1_ReadSPI
                         i1_WriteSPI
                  i1_read_ram_status
 ---------------------------------------------------------------------------------
 (13) i1_read_ram_status                                   2     2      0      69
                                              3 COMMON     2     2      0
                          i1_ReadSPI
                         i1_WriteSPI
 ---------------------------------------------------------------------------------
 (12) i1_ReadMemoryAdress                                  4     2      2     608
                                              2 COMMON     4     2      2
                      i1_eeprom_read
 ---------------------------------------------------------------------------------
 (12) i1_AnalogValue                                       2     2      0     120
                                              6 COMMON     2     2      0
                          i1_DelayDs
 ---------------------------------------------------------------------------------
 (13) i1_DelayDs                                           6     4      2      98
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (12) _ReadClock                                          20    15      5    1551
                                              4 COMMON     7     2      5
                                              0 BANK0     13    13      0
                             ___bmul
                          i1_ReadSPI
                         i1_WriteSPI
 ---------------------------------------------------------------------------------
 (14) i1_ReadSPI                                           0     0      0      23
                         i1_WriteSPI
 ---------------------------------------------------------------------------------
 (14) i1_WriteSPI                                          3     3      0      23
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (13) ___bmul                                              4     3      1     476
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (12) _IncreaseMemoryAdress                                4     4      0     283
                                              3 COMMON     4     4      0
                      i1_eeprom_read
                     i1_eeprom_write
 ---------------------------------------------------------------------------------
 (13) i1_eeprom_write                                      3     2      1     122
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (13) i1_eeprom_read                                       2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _TimerCounter                                        5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClockInit
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _Mode_0
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_1
     _DarknessCheck
       _AnalogValue
         _DelayDs
       _eeprom_read
   _Mode_2
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_4
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _Mode_5
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _OperationMode
   _PICInit
   _ResetMemoryAdress
     _eeprom_write
   _SendMemoryData
     _ReadMemoryAdress
       _eeprom_read
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
     _read_write_flash_ram
       _ReadSPI
         _WriteSPI
       _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI
   _TransiverInit
     _Blink
       _DelayDs
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
   _TransiverReadFIFO
     _ReadFIFO
       _ReadSPI
         _WriteSPI
     _ReceivedPacketHandler
       _AnalogValue
         _DelayDs
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _DelayDs
       _OperationMode
       _ResetMemoryAdress
         _eeprom_write
       _SendMemoryData
         _ReadMemoryAdress
           _eeprom_read
         _TransmittPacket
           _AnalogValue (ARG)
             _DelayDs
           _FindChannel (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
             _SetRFMode
               _RegisterRead
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _RegisterSet
                 _RegisterRead (ARG)
                   _ReadSPI
                     _WriteSPI
                   _WriteSPI
                 _WriteSPI (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet (ARG)
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
           _WriteFIFO (ARG)
             _WriteSPI
           _eeprom_read (ARG)
           _timerFunction (ARG)
         _read_write_flash_ram
           _ReadSPI
             _WriteSPI
           _WriteSPI
           _read_ram_status
             _ReadSPI
               _WriteSPI
             _WriteSPI
       _TransmittPacket
         _AnalogValue (ARG)
           _DelayDs
         _FindChannel (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
         _WriteFIFO (ARG)
           _WriteSPI
         _eeprom_read (ARG)
         _timerFunction (ARG)
       _eeprom_read
       _ram_bulk_erase
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _write_ram_status
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _TransiverToReceive
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _ram_bulk_erase
     _WriteSPI
     _read_ram_status
       _ReadSPI
         _WriteSPI
       _WriteSPI
   _read_ram_status
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _write_ram_status
     _WriteSPI
     _read_ram_status
       _ReadSPI
         _WriteSPI
       _WriteSPI

 _tc_int (ROOT)
   _TimerCounter
   _saveDataToFlash
     _IncreaseMemoryAdress
       i1_eeprom_read
       i1_eeprom_write
     _ReadClock
       ___bmul
       i1_ReadSPI
         i1_WriteSPI
       i1_WriteSPI
     i1_AnalogValue
       i1_DelayDs
     i1_ReadMemoryAdress
       i1_eeprom_read
     i1_read_write_flash_ram
       i1_ReadSPI
         i1_WriteSPI
       i1_WriteSPI
       i1_read_ram_status
         i1_ReadSPI
           i1_WriteSPI
         i1_WriteSPI
   i1_OperationMode

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     22      4A       9       77.1%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     36      38       7       70.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      44       5       85.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D3      12        0.0%
ABS                  0      0      D3       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Feb 12 17:34:49 2017

                               __CFG_CP$ON 0000                   __size_of_read_ram_status 0018  
                                        pc 0002                 __size_of_TransiverReadFIFO 006D  
             i1read_write_flash_ram@offset 0079                      _bTransiverModeReceive 00D7  
                           ___bmul@product 0072                                 i1_WriteSPI 15E2  
                              _SSPSTATbits 0094                                         l81 0D42  
                                       _RD 0C60                                __CFG_CPD$ON 0000  
                                       _WR 0C61              i1read_write_flash_ram@mem_ptr 007A  
                          _saveDataToFlash 003F                                         fsr 0004  
                      ??i1_read_ram_status 0073                                        l302 0417  
                                      l306 029C                                        l403 166F  
                                      l308 02B7              __size_of_read_write_flash_ram 0082  
                                      l309 02D2                                        l354 15E0  
                                      l338 0E30                                        l427 0BDA  
                                      l373 09EB                                        l349 16FD  
                                      l391 0AC9                                        l467 0925  
                                      l388 0AC3                                        l580 07D0  
                                      l397 1726                                        l646 0CED  
                                      l663 176F                                        l685 08CC  
                                      _GIE 005F                                        _RA1 0029  
                                      _RB0 0030                                        _RB1 0031  
                                      _RC0 0038                                        _RA4 002C  
                                      _RC1 0039                                        _RB3 0033  
                                      _RA5 002D                                        _RC2 003A  
                                      _RB4 0034                                        _RB5 0035  
                                      _RD3 0043                                        _RD4 0044  
                    __end_of_DarknessCheck 086F                                        fsr0 0004  
                                      indf 0000                           TransmittPacket@i 00B8  
                      __end_of_FindChannel 0763                            ??_timerFunction 00A4  
                             __CFG_LVP$OFF 0000                                       l4001 1631  
                                     l4021 0A77                                       l4101 0D7A  
                                     l4007 0840                                       l4023 0A8A  
                                     l4105 0D87                                       l4051 0B51  
                                     l4109 0D91                                       l3431 0BAA  
                                     l4055 0B58                                       l4047 0B37  
                                     l3433 0BB9                                       l3425 0B7F  
                                     l4081 0D39                                       l3427 0B8C  
                                     l3611 07C7                                       l3429 0B9B  
                                     l3437 0BC7                                       l3613 079F  
                                     l4093 0D60                                       l4085 0D46  
                                     l3463 0687                                       l3535 0DDC  
                                     l3481 0715                                       l3561 0E39  
                                     l3537 0DEF                                       l3617 07D4  
                                     l3609 07BB                                       l3633 08C0  
                                     l4097 0D6D                                       l4089 0D53  
                                     l3483 074E                                       l3805 09B2  
                                     l3815 09CB                                       l3479 073D  
                                     l3487 0761                                       l3647 1719  
                                     l3727 02ED                                       l3833 0932  
                                     l3761 0376                                       l3729 02FF  
                                     l3691 0851                                       l3931 0FFB  
                                     l3595 0770                                       l3675 05E5  
                                     l3755 035D                                       l3739 0320  
                                     l3677 065A                                       l3749 0344  
                                     l3695 086A                                       l3775 03A6  
                                     l3767 038F                __size_of_TransiverToReceive 005C  
                                     l3697 086B                                       l3793 03F1  
                                     l3777 03AE                                       l3787 03C8  
                                     l3789 03D3                                       l3797 03F5  
                                     l3975 0CCB                                       l3985 16EE  
                                     u3025 0B27                                       u2405 0720  
                                     u2431 176D                                       u2415 075F  
                                     u3207 0A94                                       u2425 1730  
                                     u3217 0B5E                                       u3307 0C6F  
                                     u3227 07E0                                       u3317 0C8E  
                                     u3237 0DC0                                       u2605 05C5  
                                     u3327 0CAD                                       u3247 0DF9  
                                     u2615 0602                                       u2385 0685  
                                     u3257 0E3D                                       u2545 07A5  
                                     u2625 0617                                       u3177 0D20  
                                     u3267 0E4C                                       u2635 05F3  
                                     u3187 0D32                                       u3277 0672  
                                     u3197 0A5B                                       u3287 0749  
                                     u3297 1738                                       u2585 0579  
                                     u2595 059F                                       _RBIF 0058  
                                     u2875 093C                            __end_of_PICInit 0B00  
                                     _WREN 0C62                             ??_eeprom_write 00A1  
                     i1AnalogValue@channel 0077                     i1ReadMemoryAdress@var1 0073  
                   i1ReadMemoryAdress@var2 0072                     i1ReadMemoryAdress@var3 0075  
                __end_ofi1_read_ram_status 165B                                       _main 0CF1  
                                     btemp 007E                                       start 0012  
                            __CFG_IESO$OFF 0000                            __end_of_DelayDs 1745  
         __size_of_LightWithSensController 0049                          ___bmul@multiplier 0073  
                          __end_of_ReadSPI 15B9                 SendMemoryData@finalAddress 00CB  
                                    ?_main 0070                           ReadClock@month10 0024  
                                    _EEADR 010D                              __CFG_WDTE$OFF 0000  
                         ReadClock@minutes 0074                           ReadClock@seconds 0026  
                                    _CARRY 0018                                      _ANSEL 0188  
                    __end_of_OperationMode 15D5                                      _T1CON 0010  
                           __CFG_DEBUG$OFF 0000                                      i1l403 15EC  
                                    i1l456 0E94                                      i1l467 17F9  
                                    i1l580 0C41                                      i1l397 16A7  
                                    i1l663 07E6                                      i1l685 17B2  
                                    _TMR1H 000F                                      _TMR1L 000E  
                                    _PORTA 0005                                      _PORTB 0006  
                                    _PORTC 0007                                      _PORTD 0008  
                                    _PORTE 0009                                      _TRISA 0085  
                                    _TRISB 0086                                      _TRISC 0087  
                                    _TRISD 0088                                      _SSPIE 0463  
                                    _TRISE 0089                      read_write_flash_ram@i 00AE  
                                    _Blink 092C                         __size_ofi1_DelayDs 001E  
                                    _bDark 00D6                             __CFG_FCMEN$OFF 0000  
                       __size_ofi1_ReadSPI 0008                    ??_ReceivedPacketHandler 00CF  
                              _AnalogValue 08F9                             __CFG_BOREN$OFF 0000  
                                    pclath 000A                            ??_TransiverInit 00B5  
                                    status 0003                              _intBlinkCycle 0056  
                                    wtemp0 007E                             WriteSPI@buffer 00A1  
                     ReadMemoryAdress@var1 00A3                       ReadMemoryAdress@var2 00A2  
                     ReadMemoryAdress@var3 00A5                           __end_of_ChannelP 0813  
                         __end_of_ChannelR 0820                           __end_of_ChannelS 082D  
                  __end_of_saveDataToFlash 028A                             __CFG_MCLRE$OFF 0000  
                            _intClockTimer 0043                          _intNumberOfBlinks 0061  
                          __initialization 0015                               __end_of_main 0DA0  
                         __end_of_ReadFIFO 1647                                ?i1_WriteSPI 0070  
                            ReadFIFO@value 00A4                           ??_SendMemoryData 00BB  
                              _FindChannel 0661                              ??_RegisterSet 00A8  
                                   ??_main 00D3                          ??_read_ram_status 00A3  
                       __size_of_ClockInit 009E                                     ?_Blink 00A6  
                   __size_ofi1_eeprom_read 001B                                  ??_PICInit 00A0  
                                   _ADRESH 001E                                     _EEDATA 010C  
                                   _EECON1 018C                                     _EECON2 018D  
                    __end_ofi1_AnalogValue 1800                                     _ANSELH 0189  
                         __end_of_WriteSPI 1673                                     i1l3127 0998  
                                   i1l3311 0EB6                                     i1l3303 0E98  
                                   i1l3129 099E                                     i1l3321 0ED8  
                                   i1l3333 0F05                                     i1l2801 0A37  
                                   i1l3329 0EF4                                     u210_25 096E  
                                   i1l3285 0E6A                                     i1l2595 1602  
                                   u211_25 0984                                     i1l2599 1608  
                                   i1l2881 0C2C                                     i1l2883 0C38  
                                   i1l2867 0BE7                                     i1l2885 0C10  
                                   i1l2889 0C43                                     u151_25 16B1  
                                   u232_25 0EAF                                     u233_25 0EC7  
                                   u234_25 0EE3                                     u235_25 0EFF  
                                   u228_25 0E86                                  ??_DelayDs 00A2  
                                   u181_25 0477                                     u333_27 0C4D  
                                   u182_25 049C                                     u190_25 0C16  
                                   u334_27 16B7                                     u183_25 04C1  
                                   u184_25 04E6                                     Blink@i 00A9  
                                   Blink@n 00A6                                     u185_25 050B  
                                   u186_25 0530                           _write_ram_status 089B  
               __size_ofi1_read_ram_status 0014                           ??_ram_bulk_erase 00A5  
                 ??i1_read_write_flash_ram 007B                                     _TMR1IF 0060  
                                   _TMR1ON 0080               i1OperationMode@bracketStatus 0071  
            __size_of_IncreaseMemoryAdress 0052                         __size_of_ReadClock 0139  
                                   _SSPBUF 0013                                  ??_ReadSPI 00A3  
                           __CFG_PWRTE$OFF 0000           i1read_write_flash_ram@flash_page 0078  
                                   _Mode_0 15A5                                     _Mode_1 16E1  
                                   _Mode_2 15D5                                     _Mode_4 1623  
                                   _Mode_5 0830                         __size_of_SetRFMode 0071  
                        __end_ofi1_DelayDs 16C3                       __size_of_eeprom_read 0024  
          TransiverReadFIFO@ReceivedString 01B8                                     ___bmul 1600  
                        __end_ofi1_ReadSPI 15B1                                     _tc_int 0E52  
                     __end_of_eeprom_write 08F9                                     saved_w 007E  
                        _ResetMemoryAdress 168B                        __end_of_RegisterSet 16E1  
                            ?_RegisterRead 0070                         ?_ResetMemoryAdress 0070  
                       RegisterRead@adress 00A6                        __size_ofi1_WriteSPI 000E  
                       __size_of_WriteFIFO 0010                    __end_of__initialization 003B  
                          eeprom_read@addr 00A1                        ??_ResetMemoryAdress 00A3  
                        __end_of_ClockInit 0CF1                    _LightWithSensController 09A5  
                            _bChannelFound 0060                              i1_eeprom_read 07E5  
                      ___bmul@multiplicand 0070                    i1read_ram_status@status 0074  
                         ?_saveDataToFlash 0070                              __end_of_Blink 0963  
                           __pcstackCOMMON 0070                          ?_ReadMemoryAdress 00A2  
                             __pidataBANK0 082D                               _channelFound 0052  
                       ??_ReadMemoryAdress 00A4                          __end_of_ReadClock 0551  
                __end_of_ResetMemoryAdress 16A5                             _OPTION_REGbits 0081  
                                  ??_Blink 00A8                          __end_of_SetRFMode 0BDE  
                        eeprom_write@value 00A0                             ??_RegisterRead 00A3  
                               __pbssBANK0 0043                                 __pbssBANK1 00D6  
                               __pbssBANK3 0190                   __size_ofi1_OperationMode 0009  
                                ?_ReadFIFO 0070                 timerFunction@intSetSeconds 00A2  
                       AnalogValue@channel 00A7               __end_of_read_write_flash_ram 07E5  
          __size_ofi1_read_write_flash_ram 0075                   __size_of_TransmittPacket 00B2  
                           ?i1_eeprom_read 0070                                    ?_Mode_0 0070  
                                  ?_Mode_1 0070                                    ?_Mode_2 0070  
                                  ?_Mode_4 0070                                    ?_Mode_5 0070  
                  __size_ofi1_eeprom_write 0026                                 __pmaintext 0CF1  
              __size_ofi1_ReadMemoryAdress 0024                                    ?___bmul 0070  
                               __pintentry 0004                                    ?_tc_int 0070  
                                ?_WriteSPI 0070                          __end_of_WriteFIFO 1600  
                              _RegisterSet 16C3                                    _PICInit 0A9C  
                            ?_TimerCounter 0070                 __end_of_TransiverToReceive 0A9C  
                    __end_of_timerFunction 1623                               ?_AnalogValue 0070  
                               __stringtab 0800                                 ??_ReadFIFO 00A3  
                      SendMemoryData@addr1 00CA                        SendMemoryData@addr2 00C9  
                      SendMemoryData@addr3 00C8             __size_of_ReceivedPacketHandler 018E  
            __end_of_ReceivedPacketHandler 0418                                    _DelayDs 1722  
                ??_LightWithSensController 00AA                              ReadClock@date 0076  
                            ReadClock@min1 0028                              ReadClock@sec1 0027  
                            ReadClock@hour 0075                        SendMemoryData@value 00C3  
                            ReadClock@year 0078                                    _ReadSPI 15B1  
                   __size_of_DarknessCheck 002B                            __size_of_Mode_0 0004  
                          __size_of_Mode_1 001F                            __size_of_Mode_2 000D  
                          __size_of_Mode_4 0012                            __size_of_Mode_5 0014  
               OperationMode@bracketStatus 00A1                            _read_ram_status 1673  
                    __size_of_eeprom_write 0030                            __size_of___bmul 0011  
                    read_ram_status@status 00A4                               ??i1_WriteSPI 0070  
                             ?_FindChannel 0070                                  _ANSELbits 0188  
                         i1WriteSPI@buffer 0071                   __end_of_write_ram_status 08C9  
                               ??_WriteSPI 00A0                            __size_of_tc_int 00C4  
                   i1_read_write_flash_ram 0BDE                                    __ptext1 0A40  
                                  __ptext2 0B00                                    __ptext3 028A  
                                  __ptext4 089B                                    __ptext5 1700  
                                  __ptext6 0551                                    __ptext7 0763  
                                  __ptext8 1673                                    __ptext9 086F  
               __size_of_ResetMemoryAdress 001A                                  _T1CONbits 0010  
                           ??_TimerCounter 0070                       saveDataToFlash@addr1 0039  
                     saveDataToFlash@addr2 003A                       saveDataToFlash@addr3 003B  
i1read_write_flash_ram@one_read_zero_write 0020    read_write_flash_ram@one_read_zero_write 00AD  
                     saveDataToFlash@hours 0034                       saveDataToFlash@month 0036  
                     saveDataToFlash@value 0038                                    clrloop0 15BA  
                     end_of_initialization 003B                            ??i1_eeprom_read 0070  
                       __end_ofi1_WriteSPI 15F0                               _eeprom_write 08C9  
                    __end_of_TransiverInit 1000                       TransmittPacket@value 00B5  
                     TransmittPacket@topic 00BA                     __size_of_OperationMode 000B  
                        ??i1_OperationMode 0070                           WriteSPI@databyte 00A2  
                     __end_of_RegisterRead 17B1                          ??_TransmittPacket 00B6  
                                i1_DelayDs 16A5                              WriteFIFO@Data 00A3  
             __end_of_IncreaseMemoryAdress 0A40                            _intBlinkCounter 0054  
                                i1_ReadSPI 15A9                       _read_write_flash_ram 0763  
                            _DarknessCheck 0844                    __end_of_read_ram_status 168B  
                    SendMemoryData@address 00C4                              ??_eeprom_read 00A0  
                           i1_eeprom_write 17B1                            ReadClock@date10 0023  
                           __end_of_Mode_0 15A9                             __end_of_Mode_1 1700  
                           __end_of_Mode_2 15E2                             __end_of_Mode_4 1635  
                           __end_of_Mode_5 0844                                  _ClockInit 0C53  
                          ReadClock@hour10 0022                             __end_of___bmul 1611  
                          ReadClock@month1 002A                            ReadClock@year10 0025  
                               ?i1_DelayDs 0070                     __size_ofi1_AnalogValue 0029  
                    ?_read_write_flash_ram 00A5                                 ?i1_ReadSPI 0070  
                           __end_of_tc_int 0F16                             ?_DarknessCheck 0070  
                            _OperationMode 15CA                        start_initialization 0015  
                                _ReadClock 0418                  __size_of_ReadMemoryAdress 002C  
                  __size_of_SendMemoryData 0110                      _intDarkCheckIntervall 0058  
               DarknessCheck@darknessValue 00A9                                  _SetRFMode 0B6D  
                     __size_of_AnalogValue 0033                     __end_ofi1_eeprom_write 17D7  
                        __size_of_ReadFIFO 0012                   __CFG_FOSC$INTRC_NOCLKOUT 0000  
                                 ??_Mode_0 00AA                                   ??_Mode_1 00AA  
                                 ??_Mode_2 00AA                                   ??_Mode_4 00BB  
                                 ??_Mode_5 00BB                       __end_of_TimerCounter 09A5  
                                 ??___bmul 0071                                 ?_ClockInit 0070  
                      __end_of_eeprom_read 178D                              TimerCounter@i 0073  
                  __size_of_ram_bulk_erase 0022                                __pdataBANK0 0061  
                                 ??_tc_int 003C                   __size_of_saveDataToFlash 024B  
                             ?_RegisterSet 00A7                             ?_OperationMode 0070  
                     __size_of_FindChannel 0102                read_write_flash_ram@mem_ptr 00AA  
                        RegisterRead@value 00A5                          __size_of_WriteSPI 0018  
                                ___latbits 0002                                  _WriteFIFO 15F0  
                            __pcstackBANK0 0020                              __pcstackBANK1 00A0  
                            __pcstackBANK3 01B8                                   ?_PICInit 0070  
                               ?_ReadClock 0074                               _ReceivedData 0190  
                   SetRFMode@mcparam0_read 00AD                                 ?_SetRFMode 0070  
                            i1_AnalogValue 17D7                           eeprom_write@addr 00A2  
                                 ?_DelayDs 00A0                          RegisterSet@adress 00AA  
                     _IncreaseMemoryAdress 09EE                           ?_read_ram_status 0070  
                          ?i1_eeprom_write 0070                               i1DelayDs@cnt 0070  
                   write_ram_status@status 00A5                         i1WriteSPI@databyte 0072  
                                 ?_ReadSPI 0070                 __end_ofi1_ReadMemoryAdress 1769  
                    __size_of_RegisterRead 0024                         _TransiverToReceive 0A40  
                      i1eeprom_write@value 0070                    ?i1_read_write_flash_ram 0075  
                      ?_TransiverToReceive 0070                                ??i1_DelayDs 0072  
                   ??_read_write_flash_ram 00AB                            ??_DarknessCheck 00A8  
                                __pstrings 0800                                ??i1_ReadSPI 0073  
                        ?_write_ram_status 0070                timerFunction@intTimerNumber 00A0  
                       ??_write_ram_status 00A5                             __size_of_Blink 0037  
                               ?_WriteFIFO 0070                            i1_OperationMode 15C1  
                     ??_TransiverToReceive 00B5                               _RegisterRead 178D  
                           ?i1_AnalogValue 0070                      ?_IncreaseMemoryAdress 0070  
                      saveDataToFlash@date 0035                            _TransmittPacket 0DA0  
                        interrupt_function 0004                        saveDataToFlash@year 0037  
                                 _IOCBbits 0096                                   DelayDs@i 00A4  
                             FindChannel@i 00B3                      _ReceivedPacketHandler 028A  
                                clear_ram0 15B9                                _eeprom_read 1769  
                                 _PIE1bits 008C                                   _PIR1bits 000C  
           __end_ofi1_read_write_flash_ram 0C53                                ??_ClockInit 00A3  
                             ClockInit@cnt 00A4                     __size_of_timerFunction 0012  
                   saveDataToFlash@minutes 0033                     saveDataToFlash@seconds 0032  
                          ??_OperationMode 00A0                              SetRFMode@mode 00AC  
                               _ADCON0bits 001F                                __stringbase 0805  
                               _ADCON1bits 009F                                   _WPUBbits 0095  
                                 _ChannelP 0806                                   _ChannelR 0813  
                                 _ChannelS 0820                                ??_ReadClock 0079  
                           ReadClock@date1 002C                             _SendMemoryData 0551  
                         _ReadMemoryAdress 086F                             ReadClock@min10 0021  
                           ReadClock@sec10 0020                          ??_saveDataToFlash 002D  
                           ReadClock@hour1 0029                           __size_of_PICInit 0064  
                 ?_LightWithSensController 0070                             ReadClock@month 0077  
                           ReadClock@year1 002B                                ??_SetRFMode 00AB  
                                 _ReadFIFO 1635                      __size_of_TimerCounter 0042  
                         __size_of_DelayDs 0023         i1read_write_flash_ram@flash_sector 0077  
         read_write_flash_ram@flash_sector 00A7                      __end_ofi1_eeprom_read 0800  
                         __size_of_ReadSPI 0008                             _bTimerComplete 004D  
                           _ram_bulk_erase 1700                           _intMinuteCounter 005C  
               read_write_flash_ram@offset 00A9                          _TransiverReadFIFO 0B00  
                                 _WriteSPI 165B                         __end_of__stringtab 0806  
                         _intSecondCounter 005E                         ?_TransiverReadFIFO 0070  
                               _ANSELHbits 0189                    __end_ofi1_OperationMode 15CA  
                   __end_of_SendMemoryData 0661                     __size_of_TransiverInit 00EA  
                     __size_of_RegisterSet 001E                           RegisterSet@value 00A7  
                       i1eeprom_write@addr 0072                                ??_WriteFIFO 00A3  
                  __end_of_TransmittPacket 0E52                            ??i1_AnalogValue 0076  
                             _TimerCounter 0963                                   __ptext10 168B  
                                 __ptext11 08C9                                   __ptext20 15F0  
                                 __ptext12 15CA                                   __ptext21 0661  
                                 __ptext13 1635                                   __ptext30 0844  
                                 __ptext22 0B6D                                   __ptext14 0F16  
                                 __ptext31 1769                                   __ptext23 16C3  
                                 __ptext15 092C                                   __ptext40 0BDE  
                                 __ptext32 08F9                                   __ptext24 178D  
                                 __ptext16 0A9C                                   __ptext41 1647  
                                 __ptext33 1722                                   __ptext25 15D5  
                                 __ptext17 0830                                   __ptext50 17B1  
                                 __ptext42 1745                                   __ptext34 0C53  
                                 __ptext26 16E1                                   __ptext18 1623  
                                 __ptext51 07E5                                   __ptext43 17D7  
                                 __ptext35 15B1                                   __ptext27 15A5  
                                 __ptext19 0DA0                                   __ptext52 0963  
                                 __ptext44 16A5                                   __ptext36 165B  
                                 __ptext28 09A5                                   __ptext45 0418  
                                 __ptext37 0E52                                   __ptext29 1611  
                                 __ptext46 15A9                                   __ptext38 15C1  
                                 __ptext47 15E2                                   __ptext39 003F  
                                 __ptext48 1600                                   __ptext49 09EE  
                      ??_TransiverReadFIFO 00D1                              _timerFunction 1611  
                   ??_IncreaseMemoryAdress 0073                          i1eeprom_read@addr 0071  
                   ?_ReceivedPacketHandler 0070                              __size_of_main 00AF  
                   __end_of_ram_bulk_erase 1722                              _bValueFromPot 0063  
                __end_of_TransiverReadFIFO 0B6D                                 DelayDs@cnt 00A0  
                           FindChannel@cnt 00B1            __end_of_LightWithSensController 09EE  
                     _intHalfSecondCounter 005A                            ?_SendMemoryData 0070  
                               _INTCONbits 000B             read_write_flash_ram@flash_page 00A8  
                       TransiverReadFIFO@i 01D6                         TransiverReadFIFO@j 01D8  
                         ??i1_eeprom_write 0071                             ?_timerFunction 00A0  
                            ??_AnalogValue 00A6                                   intlevel1 0000  
                               i1DelayDs@i 0074                              _TransiverInit 0F16  
 i1read_write_flash_ram@bytes_to_readwrite 0075     read_write_flash_ram@bytes_to_readwrite 00A5  
                                stringcode 0800                                 _OSCCONbits 008F  
                          ?_ram_bulk_erase 0070                              ??_FindChannel 00AE  
                       i1_ReadMemoryAdress 1745                    i1read_write_flash_ram@i 0021  
                         ?i1_OperationMode 0070                                   stringdir 0800  
                                 stringtab 0800                        ?i1_ReadMemoryAdress 0072  
                         ?_TransmittPacket 00B5                  ReceivedPacketHandler@Data 00D0  
                __size_of_write_ram_status 002E                              ?_eeprom_write 00A0  
                 IncreaseMemoryAdress@var1 0074                   IncreaseMemoryAdress@var2 0075  
                 IncreaseMemoryAdress@var3 0076                             ?_TransiverInit 0070  
                             ?_eeprom_read 0070                        __end_of_AnalogValue 092C  
                               _SSPCONbits 0014                          i1_read_ram_status 1647  
                     ??i1_ReadMemoryAdress 0074                         ?i1_read_ram_status 0070  
                 __end_of_ReadMemoryAdress 089B  
