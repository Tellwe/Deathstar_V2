

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Mar 23 21:39:44 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	intentry,global,class=CODE,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	dabs	1,0x7E,2
    68  0000                     
    69                           ; Version 1.40
    70                           ; Generated 01/12/2016 GMT
    71                           ; 
    72                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC16F887 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     	;# 
   104  0001                     	;# 
   105  0002                     	;# 
   106  0003                     	;# 
   107  0004                     	;# 
   108  0005                     	;# 
   109  0006                     	;# 
   110  0007                     	;# 
   111  0008                     	;# 
   112  0009                     	;# 
   113  000A                     	;# 
   114  000B                     	;# 
   115  000C                     	;# 
   116  000D                     	;# 
   117  000E                     	;# 
   118  000E                     	;# 
   119  000F                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0014                     	;# 
   125  0015                     	;# 
   126  0015                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001B                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  0081                     	;# 
   139  0085                     	;# 
   140  0086                     	;# 
   141  0087                     	;# 
   142  0088                     	;# 
   143  0089                     	;# 
   144  008C                     	;# 
   145  008D                     	;# 
   146  008E                     	;# 
   147  008F                     	;# 
   148  0090                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0093                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0095                     	;# 
   156  0096                     	;# 
   157  0097                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009A                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  0105                     	;# 
   167  0107                     	;# 
   168  0108                     	;# 
   169  0109                     	;# 
   170  010C                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  0185                     	;# 
   176  0187                     	;# 
   177  0188                     	;# 
   178  0189                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000D                     	;# 
   195  000E                     	;# 
   196  000E                     	;# 
   197  000F                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0013                     	;# 
   202  0014                     	;# 
   203  0015                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0017                     	;# 
   207  0018                     	;# 
   208  0019                     	;# 
   209  001A                     	;# 
   210  001B                     	;# 
   211  001B                     	;# 
   212  001C                     	;# 
   213  001D                     	;# 
   214  001E                     	;# 
   215  001F                     	;# 
   216  0081                     	;# 
   217  0085                     	;# 
   218  0086                     	;# 
   219  0087                     	;# 
   220  0088                     	;# 
   221  0089                     	;# 
   222  008C                     	;# 
   223  008D                     	;# 
   224  008E                     	;# 
   225  008F                     	;# 
   226  0090                     	;# 
   227  0091                     	;# 
   228  0092                     	;# 
   229  0093                     	;# 
   230  0093                     	;# 
   231  0093                     	;# 
   232  0094                     	;# 
   233  0095                     	;# 
   234  0096                     	;# 
   235  0097                     	;# 
   236  0098                     	;# 
   237  0099                     	;# 
   238  009A                     	;# 
   239  009B                     	;# 
   240  009C                     	;# 
   241  009D                     	;# 
   242  009E                     	;# 
   243  009F                     	;# 
   244  0105                     	;# 
   245  0107                     	;# 
   246  0108                     	;# 
   247  0109                     	;# 
   248  010C                     	;# 
   249  010C                     	;# 
   250  010D                     	;# 
   251  010E                     	;# 
   252  010F                     	;# 
   253  0185                     	;# 
   254  0187                     	;# 
   255  0188                     	;# 
   256  0189                     	;# 
   257  018C                     	;# 
   258  018D                     	;# 
   259  0000                     	;# 
   260  0001                     	;# 
   261  0002                     	;# 
   262  0003                     	;# 
   263  0004                     	;# 
   264  0005                     	;# 
   265  0006                     	;# 
   266  0007                     	;# 
   267  0008                     	;# 
   268  0009                     	;# 
   269  000A                     	;# 
   270  000B                     	;# 
   271  000C                     	;# 
   272  000D                     	;# 
   273  000E                     	;# 
   274  000E                     	;# 
   275  000F                     	;# 
   276  0010                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0014                     	;# 
   281  0015                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0017                     	;# 
   285  0018                     	;# 
   286  0019                     	;# 
   287  001A                     	;# 
   288  001B                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  001D                     	;# 
   292  001E                     	;# 
   293  001F                     	;# 
   294  0081                     	;# 
   295  0085                     	;# 
   296  0086                     	;# 
   297  0087                     	;# 
   298  0088                     	;# 
   299  0089                     	;# 
   300  008C                     	;# 
   301  008D                     	;# 
   302  008E                     	;# 
   303  008F                     	;# 
   304  0090                     	;# 
   305  0091                     	;# 
   306  0092                     	;# 
   307  0093                     	;# 
   308  0093                     	;# 
   309  0093                     	;# 
   310  0094                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0098                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  009F                     	;# 
   322  0105                     	;# 
   323  0107                     	;# 
   324  0108                     	;# 
   325  0109                     	;# 
   326  010C                     	;# 
   327  010C                     	;# 
   328  010D                     	;# 
   329  010E                     	;# 
   330  010F                     	;# 
   331  0185                     	;# 
   332  0187                     	;# 
   333  0188                     	;# 
   334  0189                     	;# 
   335  018C                     	;# 
   336  018D                     	;# 
   337  0000                     	;# 
   338  0001                     	;# 
   339  0002                     	;# 
   340  0003                     	;# 
   341  0004                     	;# 
   342  0005                     	;# 
   343  0006                     	;# 
   344  0007                     	;# 
   345  0008                     	;# 
   346  0009                     	;# 
   347  000A                     	;# 
   348  000B                     	;# 
   349  000C                     	;# 
   350  000D                     	;# 
   351  000E                     	;# 
   352  000E                     	;# 
   353  000F                     	;# 
   354  0010                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0014                     	;# 
   359  0015                     	;# 
   360  0015                     	;# 
   361  0016                     	;# 
   362  0017                     	;# 
   363  0018                     	;# 
   364  0019                     	;# 
   365  001A                     	;# 
   366  001B                     	;# 
   367  001B                     	;# 
   368  001C                     	;# 
   369  001D                     	;# 
   370  001E                     	;# 
   371  001F                     	;# 
   372  0081                     	;# 
   373  0085                     	;# 
   374  0086                     	;# 
   375  0087                     	;# 
   376  0088                     	;# 
   377  0089                     	;# 
   378  008C                     	;# 
   379  008D                     	;# 
   380  008E                     	;# 
   381  008F                     	;# 
   382  0090                     	;# 
   383  0091                     	;# 
   384  0092                     	;# 
   385  0093                     	;# 
   386  0093                     	;# 
   387  0093                     	;# 
   388  0094                     	;# 
   389  0095                     	;# 
   390  0096                     	;# 
   391  0097                     	;# 
   392  0098                     	;# 
   393  0099                     	;# 
   394  009A                     	;# 
   395  009B                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009E                     	;# 
   399  009F                     	;# 
   400  0105                     	;# 
   401  0107                     	;# 
   402  0108                     	;# 
   403  0109                     	;# 
   404  010C                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  010F                     	;# 
   409  0185                     	;# 
   410  0187                     	;# 
   411  0188                     	;# 
   412  0189                     	;# 
   413  018C                     	;# 
   414  018D                     	;# 
   415                           
   416                           	psect	idataBANK0
   417  149A                     __pidataBANK0:	
   418                           
   419                           ;initializer for _intNumberOfBlinks
   420  149A  3458               	retlw	88
   421  149B  3402               	retlw	2
   422                           
   423                           ;initializer for _bValueFromPot
   424  149C  3401               	retlw	1
   425                           
   426                           	psect	strings
   427  1000                     __pstrings:	
   428  1000                     stringtab:	
   429  1000                     __stringtab:	
   430  1000                     stringcode:	
   431                           ;	String table - string pointers are 1 byte each
   432                           
   433  1000                     stringdir:	
   434  1000  3010               	movlw	high stringdir
   435  1001  008A               	movwf	10
   436  1002  0804               	movf	4,w
   437  1003  0A84               	incf	4,f
   438  1004  0782               	addwf	2,f
   439  1005                     __stringbase:	
   440  1005  3400               	retlw	0
   441  1006                     __end_of__stringtab:	
   442  1006                     _ChannelP:	
   443  1006  343F               	retlw	63
   444  1007  3447               	retlw	71
   445  1008  344F               	retlw	79
   446  1009  3457               	retlw	87
   447  100A  345F               	retlw	95
   448  100B  3477               	retlw	119
   449  100C  347E               	retlw	126
   450  100D  347F               	retlw	127
   451  100E  3486               	retlw	134
   452  100F  3487               	retlw	135
   453  1010  3437               	retlw	55
   454  1011  3467               	retlw	103
   455  1012  346F               	retlw	111
   456  1013                     __end_of_ChannelP:	
   457  1013                     _ChannelR:	
   458  1013  344F               	retlw	79
   459  1014  3459               	retlw	89
   460  1015  3463               	retlw	99
   461  1016  346D               	retlw	109
   462  1017  3477               	retlw	119
   463  1018  3495               	retlw	149
   464  1019  349F               	retlw	159
   465  101A  349F               	retlw	159
   466  101B  34A9               	retlw	169
   467  101C  34A9               	retlw	169
   468  101D  3445               	retlw	69
   469  101E  3481               	retlw	129
   470  101F  348B               	retlw	139
   471  1020                     __end_of_ChannelR:	
   472  1020                     _ChannelS:	
   473  1020  3418               	retlw	24
   474  1021  341B               	retlw	27
   475  1022  341E               	retlw	30
   476  1023  3421               	retlw	33
   477  1024  3424               	retlw	36
   478  1025  342D               	retlw	45
   479  1026  347B               	retlw	123
   480  1027  3430               	retlw	48
   481  1028  347E               	retlw	126
   482  1029  3433               	retlw	51
   483  102A  3415               	retlw	21
   484  102B  3427               	retlw	39
   485  102C  342A               	retlw	42
   486  102D                     __end_of_ChannelS:	
   487  001F                     _ADCON0bits	set	31
   488  001E                     _ADRESH	set	30
   489  000B                     _INTCONbits	set	11
   490  000C                     _PIR1bits	set	12
   491  0005                     _PORTA	set	5
   492  0006                     _PORTB	set	6
   493  0007                     _PORTC	set	7
   494  0008                     _PORTD	set	8
   495  0009                     _PORTE	set	9
   496  0013                     _SSPBUF	set	19
   497  0014                     _SSPCONbits	set	20
   498  0010                     _T1CON	set	16
   499  0010                     _T1CONbits	set	16
   500  000F                     _TMR1H	set	15
   501  000E                     _TMR1L	set	14
   502  0018                     _CARRY	set	24
   503  005F                     _GIE	set	95
   504  0029                     _RA1	set	41
   505  002C                     _RA4	set	44
   506  002D                     _RA5	set	45
   507  0030                     _RB0	set	48
   508  0031                     _RB1	set	49
   509  0033                     _RB3	set	51
   510  0034                     _RB4	set	52
   511  0035                     _RB5	set	53
   512  0058                     _RBIF	set	88
   513  0038                     _RC0	set	56
   514  0039                     _RC1	set	57
   515  003A                     _RC2	set	58
   516  0043                     _RD3	set	67
   517  0044                     _RD4	set	68
   518  0060                     _TMR1IF	set	96
   519  0080                     _TMR1ON	set	128
   520  009F                     _ADCON1bits	set	159
   521  0096                     _IOCBbits	set	150
   522  0081                     _OPTION_REGbits	set	129
   523  008F                     _OSCCONbits	set	143
   524  008C                     _PIE1bits	set	140
   525  0094                     _SSPSTATbits	set	148
   526  0085                     _TRISA	set	133
   527  0086                     _TRISB	set	134
   528  0087                     _TRISC	set	135
   529  0088                     _TRISD	set	136
   530  0089                     _TRISE	set	137
   531  0095                     _WPUBbits	set	149
   532  0463                     _SSPIE	set	1123
   533  010D                     _EEADR	set	269
   534  010C                     _EEDATA	set	268
   535  0188                     _ANSEL	set	392
   536  0189                     _ANSELH	set	393
   537  0189                     _ANSELHbits	set	393
   538  0188                     _ANSELbits	set	392
   539  018C                     _EECON1	set	396
   540  018D                     _EECON2	set	397
   541  0C60                     _RD	set	3168
   542  0C61                     _WR	set	3169
   543  0C62                     _WREN	set	3170
   544  102D                     STR_1:	
   545  102D  344E               	retlw	78	;'N'
   546  102E  3431               	retlw	49	;'1'
   547  102F  3442               	retlw	66	;'B'
   548  1030  344C               	retlw	76	;'L'
   549  1031  3449               	retlw	73	;'I'
   550  1032  344E               	retlw	78	;'N'
   551  1033  344B               	retlw	75	;'K'
   552  1034  3400               	retlw	0
   553  1035                     STR_2:	
   554  1035  344E               	retlw	78	;'N'
   555  1036  3432               	retlw	50	;'2'
   556  1037  3442               	retlw	66	;'B'
   557  1038  344C               	retlw	76	;'L'
   558  1039  3449               	retlw	73	;'I'
   559  103A  344E               	retlw	78	;'N'
   560  103B  344B               	retlw	75	;'K'
   561  103C  3400               	retlw	0
   562                           
   563                           ; #config settings
   564  0000                     
   565                           	psect	cinit
   566  0015                     start_initialization:	
   567  0015                     __initialization:	
   568                           
   569                           ; Initialize objects allocated to BANK0
   570  0015  160A  118A  249A  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   571  001A  00ED               	movwf	__pdataBANK0& (0+127)
   572  001B  160A  118A  249B  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   573  0020  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   574  0021  160A  118A  249C  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   575  0026  00EF               	movwf	(__pdataBANK0+2)& (0+127)
   576                           
   577                           ; Clear objects allocated to BANK3
   578  0027  1783               	bsf	3,7	;select IRP bank2
   579  0028  3090               	movlw	low __pbssBANK3
   580  0029  0084               	movwf	4
   581  002A  30B8               	movlw	low (__pbssBANK3+40)
   582  002B  160A  118A  24A5  120A  118A  	fcall	clear_ram0
   583                           
   584                           ; Clear objects allocated to BANK1
   585  0030  1383               	bcf	3,7	;select IRP bank0
   586  0031  30C2               	movlw	low __pbssBANK1
   587  0032  0084               	movwf	4
   588  0033  30CC               	movlw	low (__pbssBANK1+10)
   589  0034  160A  118A  24A5  120A  118A  	fcall	clear_ram0
   590                           
   591                           ; Clear objects allocated to BANK0
   592  0039  3058               	movlw	low __pbssBANK0
   593  003A  0084               	movwf	4
   594  003B  306D               	movlw	low (__pbssBANK0+21)
   595  003C  160A  118A  24A5   	fcall	clear_ram0
   596                           
   597                           ; Clear objects allocated to COMMON
   598  003F  01FC               	clrf	__pbssCOMMON& (0+127)
   599  0040  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   600  0041                     end_of_initialization:	
   601                           ;End of C runtime variable initialization code
   602                           
   603  0041                     __end_of__initialization:	
   604  0041  0183               	clrf	3
   605  0042  120A  158A  2C53   	ljmp	_main	;jump to C main() function
   606                           
   607                           	psect	bssCOMMON
   608  007C                     __pbssCOMMON:	
   609  007C                     _intBlinkCounter:	
   610  007C                     	ds	2
   611                           
   612                           	psect	bssBANK0
   613  0058                     __pbssBANK0:	
   614  0058                     _bTimerComplete:	
   615  0058                     	ds	5
   616  005D                     _channelFound:	
   617  005D                     	ds	2
   618  005F                     _intBlinkCycle:	
   619  005F                     	ds	2
   620  0061                     _intDarkCheckIntervall:	
   621  0061                     	ds	2
   622  0063                     _intHalfSecondCounter:	
   623  0063                     	ds	2
   624  0065                     _intMinuteCounter:	
   625  0065                     	ds	2
   626  0067                     _intSecondCounter:	
   627  0067                     	ds	2
   628  0069                     _bChannelFound:	
   629  0069                     	ds	1
   630  006A                     _bDark:	
   631  006A                     	ds	1
   632  006B                     _bSaveDataToFlash:	
   633  006B                     	ds	1
   634  006C                     _bTransiverModeReceive:	
   635  006C                     	ds	1
   636                           
   637                           	psect	dataBANK0
   638  006D                     __pdataBANK0:	
   639  006D                     _intNumberOfBlinks:	
   640  006D                     	ds	2
   641  006F                     _bValueFromPot:	
   642  006F                     	ds	1
   643                           
   644                           	psect	bssBANK1
   645  00C2                     __pbssBANK1:	
   646  00C2                     _intClockTimer:	
   647  00C2                     	ds	10
   648                           
   649                           	psect	bssBANK3
   650  0190                     __pbssBANK3:	
   651  0190                     _ReceivedData:	
   652  0190                     	ds	40
   653                           
   654                           	psect	clrtext
   655  14A5                     clear_ram0:	
   656                           ;	Called with FSR containing the base address, and
   657                           ;	W with the last address+1
   658                           
   659  14A5  0064               	clrwdt	;clear the watchdog before getting into this loop
   660  14A6                     clrloop0:	
   661  14A6  0180               	clrf	0	;clear RAM location pointed to by FSR
   662  14A7  0A84               	incf	4,f	;increment pointer
   663  14A8  0604               	xorwf	4,w	;XOR with final address
   664  14A9  1903               	btfsc	3,2	;have we reached the end yet?
   665  14AA  3400               	retlw	0	;all done for this memory range, return
   666  14AB  0604               	xorwf	4,w	;XOR again to restore value
   667  14AC  2CA6               	goto	clrloop0	;do the next byte
   668                           
   669                           	psect	cstackBANK1
   670  00A0                     __pcstackBANK1:	
   671  00A0                     TransiverReadFIFO@ReceivedString:	
   672                           
   673                           ; 30 bytes @ 0x0
   674  00A0                     	ds	30
   675  00BE                     TransiverReadFIFO@i:	
   676                           
   677                           ; 2 bytes @ 0x1E
   678  00BE                     	ds	2
   679  00C0                     TransiverReadFIFO@j:	
   680                           
   681                           ; 2 bytes @ 0x20
   682  00C0                     	ds	2
   683                           
   684                           	psect	cstackCOMMON
   685  0070                     __pcstackCOMMON:	
   686  0070                     ?_PICInit:	
   687  0070                     ?_TransiverInit:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     ?_ClockInit:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     ?_OperationMode:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     ?_Mode_0:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     ?_Mode_1:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0070                     ?_Mode_2:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0070                     ?_Mode_4:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0070                     ?_Mode_5:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0070                     ?_TransiverToReceive:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0070                     ?_TransiverReadFIFO:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0070                     ?_saveDataToFlash:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0070                     ?_SetRFMode:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0070                     ?_RegisterRead:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ?_FindChannel:	
   727                           ; 1 bytes @ 0x0
   728                           
   729  0070                     ?_ReadFIFO:	
   730                           ; 1 bytes @ 0x0
   731                           
   732  0070                     ?_ReceivedPacketHandler:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0070                     ?_AnalogValue:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0070                     ?_eeprom_read:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0070                     ?_DarknessCheck:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0070                     ?_write_ram_status:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0070                     ?_read_ram_status:	
   748                           ; 1 bytes @ 0x0
   749                           
   750  0070                     ?_ResetMemoryAdress:	
   751                           ; 1 bytes @ 0x0
   752                           
   753  0070                     ?_ram_bulk_erase:	
   754                           ; 1 bytes @ 0x0
   755                           
   756  0070                     ?_SendMemoryData:	
   757                           ; 1 bytes @ 0x0
   758                           
   759  0070                     ?_WriteFIFO:	
   760                           ; 1 bytes @ 0x0
   761                           
   762  0070                     ?_LightWithSensController:	
   763                           ; 1 bytes @ 0x0
   764                           
   765  0070                     ?_TimerCounter:	
   766                           ; 1 bytes @ 0x0
   767                           
   768  0070                     ??_TimerCounter:	
   769                           ; 1 bytes @ 0x0
   770                           
   771  0070                     ?_WriteSPI:	
   772                           ; 1 bytes @ 0x0
   773                           
   774  0070                     ?_ReadSPI:	
   775                           ; 1 bytes @ 0x0
   776                           
   777  0070                     ?_tc_int:	
   778                           ; 1 bytes @ 0x0
   779                           
   780  0070                     ?_IncreaseMemoryAdress:	
   781                           ; 1 bytes @ 0x0
   782                           
   783  0070                     ?i1_OperationMode:	
   784                           ; 1 bytes @ 0x0
   785                           
   786  0070                     ??i1_OperationMode:	
   787                           ; 1 bytes @ 0x0
   788                           
   789  0070                     ?_main:	
   790                           ; 1 bytes @ 0x0
   791                           
   792                           
   793                           ; 2 bytes @ 0x0
   794  0070                     	ds	1
   795  0071                     i1OperationMode@bracketStatus:	
   796                           
   797                           ; 1 bytes @ 0x1
   798  0071                     	ds	2
   799  0073                     TimerCounter@i:	
   800                           
   801                           ; 2 bytes @ 0x3
   802  0073                     	ds	2
   803  0075                     ??_tc_int:	
   804                           
   805                           ; 1 bytes @ 0x5
   806  0075                     	ds	7
   807                           
   808                           	psect	cstackBANK0
   809  0020                     __pcstackBANK0:	
   810  0020                     ??_PICInit:	
   811  0020                     ??_OperationMode:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0020                     ?_timerFunction:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0020                     ?_DelayDs:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0020                     ?_eeprom_write:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0020                     ??_eeprom_read:	
   824                           ; 1 bytes @ 0x0
   825                           
   826  0020                     ?_strchr:	
   827                           ; 1 bytes @ 0x0
   828                           
   829  0020                     ??_WriteSPI:	
   830                           ; 1 bytes @ 0x0
   831                           
   832  0020                     ?___bmul:	
   833                           ; 1 bytes @ 0x0
   834                           
   835  0020                     ?_strlen:	
   836                           ; 1 bytes @ 0x0
   837                           
   838  0020                     ?___llmod:	
   839                           ; 2 bytes @ 0x0
   840                           
   841  0020                     eeprom_write@value:	
   842                           ; 4 bytes @ 0x0
   843                           
   844  0020                     ___bmul@multiplicand:	
   845                           ; 1 bytes @ 0x0
   846                           
   847  0020                     timerFunction@intTimerNumber:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0020                     DelayDs@cnt:	
   851                           ; 2 bytes @ 0x0
   852                           
   853  0020                     strchr@chr:	
   854                           ; 2 bytes @ 0x0
   855                           
   856  0020                     ___llmod@divisor:	
   857                           ; 2 bytes @ 0x0
   858                           
   859                           
   860                           ; 4 bytes @ 0x0
   861  0020                     	ds	1
   862  0021                     ??_eeprom_write:	
   863  0021                     ??___bmul:	
   864                           ; 1 bytes @ 0x1
   865                           
   866  0021                     WriteSPI@buffer:	
   867                           ; 1 bytes @ 0x1
   868                           
   869  0021                     OperationMode@bracketStatus:	
   870                           ; 1 bytes @ 0x1
   871                           
   872  0021                     eeprom_read@addr:	
   873                           ; 1 bytes @ 0x1
   874                           
   875                           
   876                           ; 1 bytes @ 0x1
   877  0021                     	ds	1
   878  0022                     ??_DelayDs:	
   879  0022                     ??_strlen:	
   880                           ; 1 bytes @ 0x2
   881                           
   882  0022                     ??_strchr:	
   883                           ; 1 bytes @ 0x2
   884                           
   885  0022                     ?_ReadMemoryAdress:	
   886                           ; 1 bytes @ 0x2
   887                           
   888  0022                     WriteSPI@databyte:	
   889                           ; 1 bytes @ 0x2
   890                           
   891  0022                     ReadMemoryAdress@var2:	
   892                           ; 1 bytes @ 0x2
   893                           
   894  0022                     eeprom_write@addr:	
   895                           ; 1 bytes @ 0x2
   896                           
   897  0022                     ___bmul@product:	
   898                           ; 1 bytes @ 0x2
   899                           
   900  0022                     strchr@ptr:	
   901                           ; 1 bytes @ 0x2
   902                           
   903  0022                     timerFunction@intSetSeconds:	
   904                           ; 1 bytes @ 0x2
   905                           
   906                           
   907                           ; 2 bytes @ 0x2
   908  0022                     	ds	1
   909  0023                     ??_ClockInit:	
   910  0023                     ??_RegisterRead:	
   911                           ; 1 bytes @ 0x3
   912                           
   913  0023                     ??_ReadFIFO:	
   914                           ; 1 bytes @ 0x3
   915                           
   916  0023                     ??_read_ram_status:	
   917                           ; 1 bytes @ 0x3
   918                           
   919  0023                     ??_ResetMemoryAdress:	
   920                           ; 1 bytes @ 0x3
   921                           
   922  0023                     ??_WriteFIFO:	
   923                           ; 1 bytes @ 0x3
   924                           
   925  0023                     ??_ReadSPI:	
   926                           ; 1 bytes @ 0x3
   927                           
   928  0023                     ?_WriteMemoryAdress:	
   929                           ; 1 bytes @ 0x3
   930                           
   931  0023                     WriteFIFO@Data:	
   932                           ; 1 bytes @ 0x3
   933                           
   934  0023                     ReadMemoryAdress@var1:	
   935                           ; 1 bytes @ 0x3
   936                           
   937  0023                     WriteMemoryAdress@var2:	
   938                           ; 1 bytes @ 0x3
   939                           
   940  0023                     ___bmul@multiplier:	
   941                           ; 1 bytes @ 0x3
   942                           
   943                           
   944                           ; 1 bytes @ 0x3
   945  0023                     	ds	1
   946  0024                     ??_timerFunction:	
   947  0024                     ?_ReadClock:	
   948                           ; 1 bytes @ 0x4
   949                           
   950  0024                     ??_ReadMemoryAdress:	
   951                           ; 1 bytes @ 0x4
   952                           
   953  0024                     ReadFIFO@value:	
   954                           ; 1 bytes @ 0x4
   955                           
   956  0024                     WriteMemoryAdress@var1:	
   957                           ; 1 bytes @ 0x4
   958                           
   959  0024                     read_ram_status@status:	
   960                           ; 1 bytes @ 0x4
   961                           
   962  0024                     ClockInit@cnt:	
   963                           ; 1 bytes @ 0x4
   964                           
   965  0024                     ReadClock@minutes:	
   966                           ; 1 bytes @ 0x4
   967                           
   968  0024                     DelayDs@i:	
   969                           ; 1 bytes @ 0x4
   970                           
   971  0024                     ___llmod@dividend:	
   972                           ; 2 bytes @ 0x4
   973                           
   974                           
   975                           ; 4 bytes @ 0x4
   976  0024                     	ds	1
   977  0025                     ??_write_ram_status:	
   978  0025                     ??_ram_bulk_erase:	
   979                           ; 1 bytes @ 0x5
   980                           
   981  0025                     ?_read_write_flash_ram:	
   982                           ; 1 bytes @ 0x5
   983                           
   984  0025                     ??_WriteMemoryAdress:	
   985                           ; 1 bytes @ 0x5
   986                           
   987  0025                     RegisterRead@value:	
   988                           ; 1 bytes @ 0x5
   989                           
   990  0025                     ReadMemoryAdress@var3:	
   991                           ; 1 bytes @ 0x5
   992                           
   993  0025                     write_ram_status@status:	
   994                           ; 1 bytes @ 0x5
   995                           
   996  0025                     ReadClock@hour:	
   997                           ; 1 bytes @ 0x5
   998                           
   999  0025                     read_write_flash_ram@bytes_to_readwrite:	
  1000                           ; 1 bytes @ 0x5
  1001                           
  1002                           
  1003                           ; 2 bytes @ 0x5
  1004  0025                     	ds	1
  1005  0026                     ??_AnalogValue:	
  1006  0026                     ?_Blink:	
  1007                           ; 1 bytes @ 0x6
  1008                           
  1009  0026                     RegisterRead@adress:	
  1010                           ; 1 bytes @ 0x6
  1011                           
  1012  0026                     WriteMemoryAdress@var3:	
  1013                           ; 1 bytes @ 0x6
  1014                           
  1015  0026                     ReadClock@date:	
  1016                           ; 1 bytes @ 0x6
  1017                           
  1018  0026                     strlen@s:	
  1019                           ; 1 bytes @ 0x6
  1020                           
  1021  0026                     Blink@n:	
  1022                           ; 1 bytes @ 0x6
  1023                           
  1024                           
  1025                           ; 2 bytes @ 0x6
  1026  0026                     	ds	1
  1027  0027                     ?_RegisterSet:	
  1028  0027                     ??_IncreaseMemoryAdress:	
  1029                           ; 1 bytes @ 0x7
  1030                           
  1031  0027                     RegisterSet@value:	
  1032                           ; 1 bytes @ 0x7
  1033                           
  1034  0027                     AnalogValue@channel:	
  1035                           ; 1 bytes @ 0x7
  1036                           
  1037  0027                     read_write_flash_ram@flash_sector:	
  1038                           ; 1 bytes @ 0x7
  1039                           
  1040  0027                     ReadClock@month:	
  1041                           ; 1 bytes @ 0x7
  1042                           
  1043  0027                     strlen@cp:	
  1044                           ; 1 bytes @ 0x7
  1045                           
  1046                           
  1047                           ; 1 bytes @ 0x7
  1048  0027                     	ds	1
  1049  0028                     ??_RegisterSet:	
  1050  0028                     ??_DarknessCheck:	
  1051                           ; 1 bytes @ 0x8
  1052                           
  1053  0028                     ??_Blink:	
  1054                           ; 1 bytes @ 0x8
  1055                           
  1056  0028                     ??___llmod:	
  1057                           ; 1 bytes @ 0x8
  1058                           
  1059  0028                     ?_strncmp:	
  1060                           ; 1 bytes @ 0x8
  1061                           
  1062  0028                     read_write_flash_ram@flash_page:	
  1063                           ; 2 bytes @ 0x8
  1064                           
  1065  0028                     ReadClock@year:	
  1066                           ; 1 bytes @ 0x8
  1067                           
  1068  0028                     strncmp@s2:	
  1069                           ; 1 bytes @ 0x8
  1070                           
  1071                           
  1072                           ; 1 bytes @ 0x8
  1073  0028                     	ds	1
  1074  0029                     ??_ReadClock:	
  1075  0029                     DarknessCheck@darknessValue:	
  1076                           ; 1 bytes @ 0x9
  1077                           
  1078  0029                     read_write_flash_ram@offset:	
  1079                           ; 1 bytes @ 0x9
  1080                           
  1081  0029                     ___llmod@counter:	
  1082                           ; 1 bytes @ 0x9
  1083                           
  1084  0029                     Blink@i:	
  1085                           ; 1 bytes @ 0x9
  1086                           
  1087  0029                     strncmp@len:	
  1088                           ; 2 bytes @ 0x9
  1089                           
  1090                           
  1091                           ; 2 bytes @ 0x9
  1092  0029                     	ds	1
  1093  002A                     ??_Mode_0:	
  1094  002A                     ??_Mode_1:	
  1095                           ; 1 bytes @ 0xA
  1096                           
  1097  002A                     ??_Mode_2:	
  1098                           ; 1 bytes @ 0xA
  1099                           
  1100  002A                     ??_LightWithSensController:	
  1101                           ; 1 bytes @ 0xA
  1102                           
  1103  002A                     RegisterSet@adress:	
  1104                           ; 1 bytes @ 0xA
  1105                           
  1106  002A                     read_write_flash_ram@mem_ptr:	
  1107                           ; 1 bytes @ 0xA
  1108                           
  1109                           
  1110                           ; 1 bytes @ 0xA
  1111  002A                     	ds	1
  1112  002B                     ??_SetRFMode:	
  1113  002B                     ??_read_write_flash_ram:	
  1114                           ; 1 bytes @ 0xB
  1115                           
  1116  002B                     ??_strncmp:	
  1117                           ; 1 bytes @ 0xB
  1118                           
  1119  002B                     ReadClock@sec10:	
  1120                           ; 1 bytes @ 0xB
  1121                           
  1122                           
  1123                           ; 1 bytes @ 0xB
  1124  002B                     	ds	1
  1125  002C                     SetRFMode@mode:	
  1126  002C                     ReadClock@min10:	
  1127                           ; 1 bytes @ 0xC
  1128                           
  1129                           
  1130                           ; 1 bytes @ 0xC
  1131  002C                     	ds	1
  1132  002D                     SetRFMode@mcparam0_read:	
  1133  002D                     read_write_flash_ram@one_read_zero_write:	
  1134                           ; 1 bytes @ 0xD
  1135                           
  1136  002D                     ReadClock@hour10:	
  1137                           ; 1 bytes @ 0xD
  1138                           
  1139  002D                     strncmp@s1:	
  1140                           ; 1 bytes @ 0xD
  1141                           
  1142                           
  1143                           ; 1 bytes @ 0xD
  1144  002D                     	ds	1
  1145  002E                     ??_FindChannel:	
  1146  002E                     ?_strstr:	
  1147                           ; 1 bytes @ 0xE
  1148                           
  1149  002E                     ReadClock@date10:	
  1150                           ; 1 bytes @ 0xE
  1151                           
  1152  002E                     strstr@s2:	
  1153                           ; 1 bytes @ 0xE
  1154                           
  1155  002E                     read_write_flash_ram@i:	
  1156                           ; 1 bytes @ 0xE
  1157                           
  1158                           
  1159                           ; 2 bytes @ 0xE
  1160  002E                     	ds	1
  1161  002F                     ??_strstr:	
  1162  002F                     IncreaseMemoryAdress@addr1:	
  1163                           ; 1 bytes @ 0xF
  1164                           
  1165  002F                     ReadClock@month10:	
  1166                           ; 1 bytes @ 0xF
  1167                           
  1168                           
  1169                           ; 1 bytes @ 0xF
  1170  002F                     	ds	1
  1171  0030                     IncreaseMemoryAdress@addr2:	
  1172  0030                     ReadClock@year10:	
  1173                           ; 1 bytes @ 0x10
  1174                           
  1175                           
  1176                           ; 1 bytes @ 0x10
  1177  0030                     	ds	1
  1178  0031                     IncreaseMemoryAdress@addr3:	
  1179  0031                     ReadClock@seconds:	
  1180                           ; 1 bytes @ 0x11
  1181                           
  1182  0031                     FindChannel@cnt:	
  1183                           ; 1 bytes @ 0x11
  1184                           
  1185                           
  1186                           ; 2 bytes @ 0x11
  1187  0031                     	ds	1
  1188  0032                     ReadClock@sec1:	
  1189  0032                     strstr@s1:	
  1190                           ; 1 bytes @ 0x12
  1191                           
  1192  0032                     IncreaseMemoryAdress@address:	
  1193                           ; 1 bytes @ 0x12
  1194                           
  1195                           
  1196                           ; 4 bytes @ 0x12
  1197  0032                     	ds	1
  1198  0033                     ReadClock@min1:	
  1199  0033                     FindChannel@i:	
  1200                           ; 1 bytes @ 0x13
  1201                           
  1202                           
  1203                           ; 2 bytes @ 0x13
  1204  0033                     	ds	1
  1205  0034                     ReadClock@hour1:	
  1206                           
  1207                           ; 1 bytes @ 0x14
  1208  0034                     	ds	1
  1209  0035                     ??_TransiverInit:	
  1210  0035                     ??_TransiverToReceive:	
  1211                           ; 1 bytes @ 0x15
  1212                           
  1213  0035                     ?_TransmittPacket:	
  1214                           ; 1 bytes @ 0x15
  1215                           
  1216  0035                     TransmittPacket@value:	
  1217                           ; 1 bytes @ 0x15
  1218                           
  1219  0035                     ReadClock@month1:	
  1220                           ; 1 bytes @ 0x15
  1221                           
  1222                           
  1223                           ; 1 bytes @ 0x15
  1224  0035                     	ds	1
  1225  0036                     ??_TransmittPacket:	
  1226  0036                     ReadClock@year1:	
  1227                           ; 1 bytes @ 0x16
  1228                           
  1229                           
  1230                           ; 1 bytes @ 0x16
  1231  0036                     	ds	1
  1232  0037                     ReadClock@date1:	
  1233                           
  1234                           ; 1 bytes @ 0x17
  1235  0037                     	ds	1
  1236  0038                     ??_saveDataToFlash:	
  1237  0038                     TransmittPacket@i:	
  1238                           ; 1 bytes @ 0x18
  1239                           
  1240                           
  1241                           ; 2 bytes @ 0x18
  1242  0038                     	ds	2
  1243  003A                     TransmittPacket@topic:	
  1244                           
  1245                           ; 1 bytes @ 0x1A
  1246  003A                     	ds	1
  1247  003B                     ??_Mode_4:	
  1248  003B                     ??_Mode_5:	
  1249                           ; 1 bytes @ 0x1B
  1250                           
  1251  003B                     ??_SendMemoryData:	
  1252                           ; 1 bytes @ 0x1B
  1253                           
  1254                           
  1255                           ; 1 bytes @ 0x1B
  1256  003B                     	ds	2
  1257  003D                     saveDataToFlash@seconds:	
  1258                           
  1259                           ; 1 bytes @ 0x1D
  1260  003D                     	ds	1
  1261  003E                     saveDataToFlash@minutes:	
  1262                           
  1263                           ; 1 bytes @ 0x1E
  1264  003E                     	ds	1
  1265  003F                     saveDataToFlash@hours:	
  1266                           
  1267                           ; 1 bytes @ 0x1F
  1268  003F                     	ds	1
  1269  0040                     saveDataToFlash@date:	
  1270                           
  1271                           ; 1 bytes @ 0x20
  1272  0040                     	ds	1
  1273  0041                     saveDataToFlash@month:	
  1274                           
  1275                           ; 1 bytes @ 0x21
  1276  0041                     	ds	1
  1277  0042                     saveDataToFlash@year:	
  1278                           
  1279                           ; 1 bytes @ 0x22
  1280  0042                     	ds	1
  1281  0043                     saveDataToFlash@value:	
  1282  0043                     SendMemoryData@value:	
  1283                           ; 1 bytes @ 0x23
  1284                           
  1285                           
  1286                           ; 1 bytes @ 0x23
  1287  0043                     	ds	1
  1288  0044                     saveDataToFlash@addr1:	
  1289  0044                     SendMemoryData@finalAddress:	
  1290                           ; 1 bytes @ 0x24
  1291                           
  1292                           
  1293                           ; 4 bytes @ 0x24
  1294  0044                     	ds	1
  1295  0045                     saveDataToFlash@addr2:	
  1296                           
  1297                           ; 1 bytes @ 0x25
  1298  0045                     	ds	1
  1299  0046                     saveDataToFlash@addr3:	
  1300                           
  1301                           ; 1 bytes @ 0x26
  1302  0046                     	ds	2
  1303  0048                     SendMemoryData@addr3:	
  1304                           
  1305                           ; 1 bytes @ 0x28
  1306  0048                     	ds	1
  1307  0049                     SendMemoryData@addr2:	
  1308                           
  1309                           ; 1 bytes @ 0x29
  1310  0049                     	ds	1
  1311  004A                     SendMemoryData@addr1:	
  1312                           
  1313                           ; 1 bytes @ 0x2A
  1314  004A                     	ds	1
  1315  004B                     SendMemoryData@address:	
  1316                           
  1317                           ; 4 bytes @ 0x2B
  1318  004B                     	ds	4
  1319  004F                     ??_ReceivedPacketHandler:	
  1320                           
  1321                           ; 1 bytes @ 0x2F
  1322  004F                     	ds	1
  1323  0050                     ReceivedPacketHandler@Data:	
  1324                           
  1325                           ; 1 bytes @ 0x30
  1326  0050                     	ds	1
  1327  0051                     ??_TransiverReadFIFO:	
  1328                           
  1329                           ; 1 bytes @ 0x31
  1330  0051                     	ds	2
  1331  0053                     ??_main:	
  1332                           
  1333                           ; 1 bytes @ 0x33
  1334  0053                     	ds	3
  1335  0056                     main@i:	
  1336                           
  1337                           ; 2 bytes @ 0x36
  1338  0056                     	ds	2
  1339                           
  1340                           	psect	maintext
  1341  0C53                     __pmaintext:	
  1342 ;;
  1343 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1344 ;;
  1345 ;; *************** function _main *****************
  1346 ;; Defined at:
  1347 ;;		line 21 in file "main.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  i               2   54[BANK0 ] int 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  2   72[None  ] int 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : B00/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1361 ;;      Params:         0       0       0       0       0
  1362 ;;      Locals:         0       2       0       0       0
  1363 ;;      Temps:          0       3       0       0       0
  1364 ;;      Totals:         0       5       0       0       0
  1365 ;;Total ram usage:        5 bytes
  1366 ;; Hardware stack levels required when called:   11
  1367 ;; This function calls:
  1368 ;;		_ClockInit
  1369 ;;		_Mode_0
  1370 ;;		_Mode_1
  1371 ;;		_Mode_2
  1372 ;;		_Mode_4
  1373 ;;		_Mode_5
  1374 ;;		_OperationMode
  1375 ;;		_PICInit
  1376 ;;		_TransiverInit
  1377 ;;		_TransiverReadFIFO
  1378 ;;		_TransiverToReceive
  1379 ;;		_saveDataToFlash
  1380 ;; This function is called by:
  1381 ;;		Startup code after reset
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function _main
  1387  0C53                     _main:	
  1388                           
  1389                           ;main.c: 24: PICInit();
  1390                           
  1391                           ;incstack = 0
  1392 ;; hardware stack exceeded
  1393                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1394  0C53  120A  158A  214B  120A  158A  	fcall	_PICInit
  1395                           
  1396                           ;main.c: 25: TransiverInit();
  1397  0C58  120A  158A  2531  120A  158A  	fcall	_TransiverInit
  1398                           
  1399                           ;main.c: 26: ClockInit();
  1400  0C5D  120A  158A  2307  120A  158A  	fcall	_ClockInit
  1401                           
  1402                           ;main.c: 30: RB1 = 0;
  1403  0C62  1283               	bcf	3,5	;RP0=0, select bank0
  1404  0C63  1303               	bcf	3,6	;RP1=0, select bank0
  1405  0C64  1086               	bcf	6,1	;volatile
  1406                           
  1407                           ;main.c: 31: _delay((unsigned long)((300)*(4000000/4000.0)));
  1408  0C65  3002               	movlw	2
  1409  0C66  1283               	bcf	3,5	;RP0=0, select bank0
  1410  0C67  1303               	bcf	3,6	;RP1=0, select bank0
  1411  0C68  00D5               	movwf	??_main+2
  1412  0C69  3086               	movlw	134
  1413  0C6A  00D4               	movwf	??_main+1
  1414  0C6B  3098               	movlw	152
  1415  0C6C  00D3               	movwf	??_main
  1416  0C6D                     u2817:	
  1417  0C6D  0BD3               	decfsz	??_main,f
  1418  0C6E  2C6D               	goto	u2817
  1419  0C6F  0BD4               	decfsz	??_main+1,f
  1420  0C70  2C6D               	goto	u2817
  1421  0C71  0BD5               	decfsz	??_main+2,f
  1422  0C72  2C6D               	goto	u2817
  1423  0C73  0000               	nop
  1424                           
  1425                           ;main.c: 32: RB1 = 1;
  1426  0C74  1283               	bcf	3,5	;RP0=0, select bank0
  1427  0C75  1303               	bcf	3,6	;RP1=0, select bank0
  1428  0C76  1486               	bsf	6,1	;volatile
  1429                           
  1430                           ;main.c: 33: _delay((unsigned long)((300)*(4000000/4000.0)));
  1431  0C77  3002               	movlw	2
  1432  0C78  1283               	bcf	3,5	;RP0=0, select bank0
  1433  0C79  1303               	bcf	3,6	;RP1=0, select bank0
  1434  0C7A  00D5               	movwf	??_main+2
  1435  0C7B  3086               	movlw	134
  1436  0C7C  00D4               	movwf	??_main+1
  1437  0C7D  3098               	movlw	152
  1438  0C7E  00D3               	movwf	??_main
  1439  0C7F                     u2827:	
  1440  0C7F  0BD3               	decfsz	??_main,f
  1441  0C80  2C7F               	goto	u2827
  1442  0C81  0BD4               	decfsz	??_main+1,f
  1443  0C82  2C7F               	goto	u2827
  1444  0C83  0BD5               	decfsz	??_main+2,f
  1445  0C84  2C7F               	goto	u2827
  1446  0C85  0000               	nop
  1447  0C86                     l3346:	
  1448                           ;main.c: 35: while(1)
  1449                           
  1450                           
  1451                           ;main.c: 36: {
  1452                           ;main.c: 37: if(!RB0)
  1453  0C86  1283               	bcf	3,5	;RP0=0, select bank0
  1454  0C87  1303               	bcf	3,6	;RP1=0, select bank0
  1455  0C88  1806               	btfsc	6,0	;volatile
  1456  0C89  2CCC               	goto	l3356
  1457                           
  1458                           ;main.c: 38: {
  1459                           ;main.c: 52: for(int i = 0; i < OperationMode(); i++)
  1460  0C8A  01D6               	clrf	main@i
  1461  0C8B  01D7               	clrf	main@i+1
  1462  0C8C                     l3354:	
  1463  0C8C  160A  118A  24B6  120A  158A  	fcall	_OperationMode
  1464  0C91  1283               	bcf	3,5	;RP0=0, select bank0
  1465  0C92  1303               	bcf	3,6	;RP1=0, select bank0
  1466  0C93  00D3               	movwf	??_main
  1467  0C94  0857               	movf	main@i+1,w
  1468  0C95  3A80               	xorlw	128
  1469  0C96  00D4               	movwf	??_main+1
  1470  0C97  3080               	movlw	128
  1471  0C98  0254               	subwf	??_main+1,w
  1472  0C99  1D03               	skipz
  1473  0C9A  2C9D               	goto	u2575
  1474  0C9B  0853               	movf	??_main,w
  1475  0C9C  0256               	subwf	main@i,w
  1476  0C9D                     u2575:	
  1477  0C9D  1803               	btfsc	3,0
  1478  0C9E  2CCC               	goto	l3356
  1479                           
  1480                           ;main.c: 53: {
  1481                           ;main.c: 54: RB1 = 0;
  1482  0C9F  1283               	bcf	3,5	;RP0=0, select bank0
  1483  0CA0  1303               	bcf	3,6	;RP1=0, select bank0
  1484  0CA1  1086               	bcf	6,1	;volatile
  1485                           
  1486                           ;main.c: 55: _delay((unsigned long)((300)*(4000000/4000.0)));
  1487  0CA2  3002               	movlw	2
  1488  0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  1489  0CA4  1303               	bcf	3,6	;RP1=0, select bank0
  1490  0CA5  00D5               	movwf	??_main+2
  1491  0CA6  3086               	movlw	134
  1492  0CA7  00D4               	movwf	??_main+1
  1493  0CA8  3098               	movlw	152
  1494  0CA9  00D3               	movwf	??_main
  1495  0CAA                     u2837:	
  1496  0CAA  0BD3               	decfsz	??_main,f
  1497  0CAB  2CAA               	goto	u2837
  1498  0CAC  0BD4               	decfsz	??_main+1,f
  1499  0CAD  2CAA               	goto	u2837
  1500  0CAE  0BD5               	decfsz	??_main+2,f
  1501  0CAF  2CAA               	goto	u2837
  1502  0CB0  0000               	nop
  1503                           
  1504                           ;main.c: 56: RB1 = 1;
  1505  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  1506  0CB2  1303               	bcf	3,6	;RP1=0, select bank0
  1507  0CB3  1486               	bsf	6,1	;volatile
  1508                           
  1509                           ;main.c: 57: _delay((unsigned long)((300)*(4000000/4000.0)));
  1510  0CB4  3002               	movlw	2
  1511  0CB5  1283               	bcf	3,5	;RP0=0, select bank0
  1512  0CB6  1303               	bcf	3,6	;RP1=0, select bank0
  1513  0CB7  00D5               	movwf	??_main+2
  1514  0CB8  3086               	movlw	134
  1515  0CB9  00D4               	movwf	??_main+1
  1516  0CBA  3098               	movlw	152
  1517  0CBB  00D3               	movwf	??_main
  1518  0CBC                     u2847:	
  1519  0CBC  0BD3               	decfsz	??_main,f
  1520  0CBD  2CBC               	goto	u2847
  1521  0CBE  0BD4               	decfsz	??_main+1,f
  1522  0CBF  2CBC               	goto	u2847
  1523  0CC0  0BD5               	decfsz	??_main+2,f
  1524  0CC1  2CBC               	goto	u2847
  1525  0CC2  0000               	nop
  1526  0CC3  3001               	movlw	1
  1527  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  1528  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  1529  0CC6  07D6               	addwf	main@i,f
  1530  0CC7  1803               	skipnc
  1531  0CC8  0AD7               	incf	main@i+1,f
  1532  0CC9  3000               	movlw	0
  1533  0CCA  07D7               	addwf	main@i+1,f
  1534  0CCB  2C8C               	goto	l3354
  1535  0CCC                     l3356:	
  1536                           
  1537                           ;main.c: 58: }
  1538                           ;main.c: 62: }
  1539                           ;main.c: 64: if(OperationMode() == 0)
  1540  0CCC  160A  118A  24B6  120A  158A  	fcall	_OperationMode
  1541  0CD1  3A00               	xorlw	0
  1542  0CD2  1D03               	skipz
  1543  0CD3  2CD9               	goto	l3360
  1544                           
  1545                           ;main.c: 65: {
  1546                           ;main.c: 66: Mode_0();
  1547  0CD4  120A  118A  27FB  120A  158A  	fcall	_Mode_0
  1548  0CD9                     l3360:	
  1549                           
  1550                           ;main.c: 67: }
  1551                           ;main.c: 68: if(OperationMode() == 1)
  1552  0CD9  160A  118A  24B6  120A  158A  	fcall	_OperationMode
  1553  0CDE  3A01               	xorlw	1
  1554  0CDF  1D03               	skipz
  1555  0CE0  2CE6               	goto	l3364
  1556                           
  1557                           ;main.c: 69: {
  1558                           ;main.c: 70: Mode_1();
  1559  0CE1  160A  118A  254F  120A  158A  	fcall	_Mode_1
  1560  0CE6                     l3364:	
  1561                           
  1562                           ;main.c: 71: }
  1563                           ;main.c: 74: if(OperationMode() == 2)
  1564  0CE6  160A  118A  24B6  120A  158A  	fcall	_OperationMode
  1565  0CEB  3A02               	xorlw	2
  1566  0CEC  1D03               	skipz
  1567  0CED  2CF3               	goto	l3368
  1568                           
  1569                           ;main.c: 75: {
  1570                           ;main.c: 76: Mode_2();
  1571  0CEE  160A  118A  24CB  120A  158A  	fcall	_Mode_2
  1572  0CF3                     l3368:	
  1573                           
  1574                           ;main.c: 77: }
  1575                           ;main.c: 79: if(OperationMode() == 4)
  1576  0CF3  160A  118A  24B6  120A  158A  	fcall	_OperationMode
  1577  0CF8  3A04               	xorlw	4
  1578  0CF9  1D03               	skipz
  1579  0CFA  2D00               	goto	l3372
  1580                           
  1581                           ;main.c: 80: {
  1582                           ;main.c: 81: Mode_4();
  1583  0CFB  160A  118A  24F4  120A  158A  	fcall	_Mode_4
  1584  0D00                     l3372:	
  1585                           
  1586                           ;main.c: 82: }
  1587                           ;main.c: 84: if(OperationMode() == 5)
  1588  0D00  160A  118A  24B6  120A  158A  	fcall	_OperationMode
  1589  0D05  3A05               	xorlw	5
  1590  0D06  1D03               	skipz
  1591  0D07  2D0D               	goto	l3376
  1592                           
  1593                           ;main.c: 85: {
  1594                           ;main.c: 86: Mode_5();
  1595  0D08  160A  118A  2516  120A  158A  	fcall	_Mode_5
  1596  0D0D                     l3376:	
  1597                           
  1598                           ;main.c: 87: }
  1599                           ;main.c: 91: if(!bTransiverModeReceive)
  1600  0D0D  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0D0E  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0D0F  086C               	movf	_bTransiverModeReceive,w
  1603  0D10  1D03               	btfss	3,2
  1604  0D11  2D17               	goto	l3380
  1605                           
  1606                           ;main.c: 92: TransiverToReceive();
  1607  0D12  120A  158A  20EF  120A  158A  	fcall	_TransiverToReceive
  1608  0D17                     l3380:	
  1609                           
  1610                           ;main.c: 93: if(RB4 && bTransiverModeReceive)
  1611  0D17  1283               	bcf	3,5	;RP0=0, select bank0
  1612  0D18  1303               	bcf	3,6	;RP1=0, select bank0
  1613  0D19  1E06               	btfss	6,4	;volatile
  1614  0D1A  2D23               	goto	l3386
  1615  0D1B  086C               	movf	_bTransiverModeReceive,w
  1616  0D1C  1903               	btfsc	3,2
  1617  0D1D  2D23               	goto	l3386
  1618                           
  1619                           ;main.c: 94: TransiverReadFIFO();
  1620  0D1E  120A  158A  21AF  120A  158A  	fcall	_TransiverReadFIFO
  1621  0D23                     l3386:	
  1622                           
  1623                           ;main.c: 96: if(bSaveDataToFlash)
  1624  0D23  1283               	bcf	3,5	;RP0=0, select bank0
  1625  0D24  1303               	bcf	3,6	;RP1=0, select bank0
  1626  0D25  086B               	movf	_bSaveDataToFlash,w
  1627  0D26  1903               	btfsc	3,2
  1628  0D27  2C86               	goto	l3346
  1629                           
  1630                           ;main.c: 97: {
  1631                           ;main.c: 98: saveDataToFlash();
  1632  0D28  120A  118A  2045  120A  158A  	fcall	_saveDataToFlash
  1633                           
  1634                           ;main.c: 99: bSaveDataToFlash = FALSE;
  1635  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  1636  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  1637  0D2F  01EB               	clrf	_bSaveDataToFlash
  1638  0D30  2C86               	goto	l3346
  1639  0D31                     __end_of_main:	
  1640                           
  1641                           	psect	text1
  1642  0045                     __ptext1:	
  1643 ;; *************** function _saveDataToFlash *****************
  1644 ;; Defined at:
  1645 ;;		line 1109 in file "functions.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  addr3           1   38[BANK0 ] unsigned char 
  1650 ;;  addr2           1   37[BANK0 ] unsigned char 
  1651 ;;  addr1           1   36[BANK0 ] unsigned char 
  1652 ;;  value           1   35[BANK0 ] unsigned char 
  1653 ;;  year            1   34[BANK0 ] unsigned char 
  1654 ;;  month           1   33[BANK0 ] unsigned char 
  1655 ;;  date            1   32[BANK0 ] unsigned char 
  1656 ;;  hours           1   31[BANK0 ] unsigned char 
  1657 ;;  minutes         1   30[BANK0 ] unsigned char 
  1658 ;;  seconds         1   29[BANK0 ] unsigned char 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1668 ;;      Params:         0       0       0       0       0
  1669 ;;      Locals:         0      10       0       0       0
  1670 ;;      Temps:          0       5       0       0       0
  1671 ;;      Totals:         0      15       0       0       0
  1672 ;;Total ram usage:       15 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    6
  1675 ;; This function calls:
  1676 ;;		_AnalogValue
  1677 ;;		_IncreaseMemoryAdress
  1678 ;;		_ReadClock
  1679 ;;		_ReadMemoryAdress
  1680 ;;		_read_write_flash_ram
  1681 ;; This function is called by:
  1682 ;;		_main
  1683 ;; This function uses a non-reentrant model
  1684 ;;
  1685                           
  1686                           
  1687                           ;psect for function _saveDataToFlash
  1688  0045                     _saveDataToFlash:	
  1689                           
  1690                           ;functions.c: 1111: unsigned char value, addr1, addr2, addr3, seconds, minutes, hours, d
      +                          ate, month, year;
  1691                           ;functions.c: 1113: ReadClock(&seconds, &minutes, &hours, &date, &month, &year);
  1692                           
  1693                           ;incstack = 0
  1694                           ; Regs used in _saveDataToFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1695  0045  303E               	movlw	(low (saveDataToFlash@minutes| 0))& (0+255)
  1696  0046  1283               	bcf	3,5	;RP0=0, select bank0
  1697  0047  1303               	bcf	3,6	;RP1=0, select bank0
  1698  0048  00B8               	movwf	??_saveDataToFlash
  1699  0049  0838               	movf	??_saveDataToFlash,w
  1700  004A  00A4               	movwf	ReadClock@minutes
  1701  004B  303F               	movlw	(low (saveDataToFlash@hours| 0))& (0+255)
  1702  004C  00B9               	movwf	??_saveDataToFlash+1
  1703  004D  0839               	movf	??_saveDataToFlash+1,w
  1704  004E  00A5               	movwf	ReadClock@hour
  1705  004F  3040               	movlw	(low (saveDataToFlash@date| 0))& (0+255)
  1706  0050  00BA               	movwf	??_saveDataToFlash+2
  1707  0051  083A               	movf	??_saveDataToFlash+2,w
  1708  0052  00A6               	movwf	ReadClock@date
  1709  0053  3041               	movlw	(low (saveDataToFlash@month| 0))& (0+255)
  1710  0054  00BB               	movwf	??_saveDataToFlash+3
  1711  0055  083B               	movf	??_saveDataToFlash+3,w
  1712  0056  00A7               	movwf	ReadClock@month
  1713  0057  3042               	movlw	(low (saveDataToFlash@year| 0))& (0+255)
  1714  0058  00BC               	movwf	??_saveDataToFlash+4
  1715  0059  083C               	movf	??_saveDataToFlash+4,w
  1716  005A  00A8               	movwf	ReadClock@year
  1717  005B  303D               	movlw	(low (saveDataToFlash@seconds| 0))& (0+255)
  1718  005C  120A  118A  2600  120A  118A  	fcall	_ReadClock
  1719                           
  1720                           ;functions.c: 1115: value = year;
  1721  0061  1283               	bcf	3,5	;RP0=0, select bank0
  1722  0062  1303               	bcf	3,6	;RP1=0, select bank0
  1723  0063  0842               	movf	saveDataToFlash@year,w
  1724  0064  00B8               	movwf	??_saveDataToFlash
  1725  0065  0838               	movf	??_saveDataToFlash,w
  1726  0066  00C3               	movwf	saveDataToFlash@value
  1727                           
  1728                           ;functions.c: 1116: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1729  0067  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1730  0068  00B8               	movwf	??_saveDataToFlash
  1731  0069  0838               	movf	??_saveDataToFlash,w
  1732  006A  00A2               	movwf	ReadMemoryAdress@var2
  1733  006B  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1734  006C  00B9               	movwf	??_saveDataToFlash+1
  1735  006D  0839               	movf	??_saveDataToFlash+1,w
  1736  006E  00A3               	movwf	ReadMemoryAdress@var1
  1737  006F  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1738  0070  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  1739                           
  1740                           ;functions.c: 1117: read_write_flash_ram(
  1741                           ;functions.c: 1118: 0,
  1742                           ;functions.c: 1119: 1,
  1743                           ;functions.c: 1120: addr3,
  1744                           ;functions.c: 1121: addr2,
  1745                           ;functions.c: 1122: addr1,
  1746                           ;functions.c: 1123: &value);
  1747  0075  3001               	movlw	1
  1748  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1749  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1750  0078  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1751  0079  3000               	movlw	0
  1752  007A  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1753  007B  0846               	movf	saveDataToFlash@addr3,w
  1754  007C  00B8               	movwf	??_saveDataToFlash
  1755  007D  0838               	movf	??_saveDataToFlash,w
  1756  007E  00A7               	movwf	read_write_flash_ram@flash_sector
  1757  007F  0845               	movf	saveDataToFlash@addr2,w
  1758  0080  00B9               	movwf	??_saveDataToFlash+1
  1759  0081  0839               	movf	??_saveDataToFlash+1,w
  1760  0082  00A8               	movwf	read_write_flash_ram@flash_page
  1761  0083  0844               	movf	saveDataToFlash@addr1,w
  1762  0084  00BA               	movwf	??_saveDataToFlash+2
  1763  0085  083A               	movf	??_saveDataToFlash+2,w
  1764  0086  00A9               	movwf	read_write_flash_ram@offset
  1765  0087  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1766  0088  00BB               	movwf	??_saveDataToFlash+3
  1767  0089  083B               	movf	??_saveDataToFlash+3,w
  1768  008A  00AA               	movwf	read_write_flash_ram@mem_ptr
  1769  008B  3000               	movlw	0
  1770  008C  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  1771                           
  1772                           ;functions.c: 1124: IncreaseMemoryAdress();
  1773  0091  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  1774                           
  1775                           ;functions.c: 1126: value = month;
  1776  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1777  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1778  0098  0841               	movf	saveDataToFlash@month,w
  1779  0099  00B8               	movwf	??_saveDataToFlash
  1780  009A  0838               	movf	??_saveDataToFlash,w
  1781  009B  00C3               	movwf	saveDataToFlash@value
  1782                           
  1783                           ;functions.c: 1127: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1784  009C  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1785  009D  00B8               	movwf	??_saveDataToFlash
  1786  009E  0838               	movf	??_saveDataToFlash,w
  1787  009F  00A2               	movwf	ReadMemoryAdress@var2
  1788  00A0  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1789  00A1  00B9               	movwf	??_saveDataToFlash+1
  1790  00A2  0839               	movf	??_saveDataToFlash+1,w
  1791  00A3  00A3               	movwf	ReadMemoryAdress@var1
  1792  00A4  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1793  00A5  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  1794                           
  1795                           ;functions.c: 1128: read_write_flash_ram(
  1796                           ;functions.c: 1129: 0,
  1797                           ;functions.c: 1130: 1,
  1798                           ;functions.c: 1131: addr3,
  1799                           ;functions.c: 1132: addr2,
  1800                           ;functions.c: 1133: addr1,
  1801                           ;functions.c: 1134: &value);
  1802  00AA  3001               	movlw	1
  1803  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  1804  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  1805  00AD  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1806  00AE  3000               	movlw	0
  1807  00AF  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1808  00B0  0846               	movf	saveDataToFlash@addr3,w
  1809  00B1  00B8               	movwf	??_saveDataToFlash
  1810  00B2  0838               	movf	??_saveDataToFlash,w
  1811  00B3  00A7               	movwf	read_write_flash_ram@flash_sector
  1812  00B4  0845               	movf	saveDataToFlash@addr2,w
  1813  00B5  00B9               	movwf	??_saveDataToFlash+1
  1814  00B6  0839               	movf	??_saveDataToFlash+1,w
  1815  00B7  00A8               	movwf	read_write_flash_ram@flash_page
  1816  00B8  0844               	movf	saveDataToFlash@addr1,w
  1817  00B9  00BA               	movwf	??_saveDataToFlash+2
  1818  00BA  083A               	movf	??_saveDataToFlash+2,w
  1819  00BB  00A9               	movwf	read_write_flash_ram@offset
  1820  00BC  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1821  00BD  00BB               	movwf	??_saveDataToFlash+3
  1822  00BE  083B               	movf	??_saveDataToFlash+3,w
  1823  00BF  00AA               	movwf	read_write_flash_ram@mem_ptr
  1824  00C0  3000               	movlw	0
  1825  00C1  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  1826                           
  1827                           ;functions.c: 1135: IncreaseMemoryAdress();
  1828  00C6  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  1829                           
  1830                           ;functions.c: 1137: value = date;
  1831  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1832  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1833  00CD  0840               	movf	saveDataToFlash@date,w
  1834  00CE  00B8               	movwf	??_saveDataToFlash
  1835  00CF  0838               	movf	??_saveDataToFlash,w
  1836  00D0  00C3               	movwf	saveDataToFlash@value
  1837                           
  1838                           ;functions.c: 1138: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1839  00D1  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1840  00D2  00B8               	movwf	??_saveDataToFlash
  1841  00D3  0838               	movf	??_saveDataToFlash,w
  1842  00D4  00A2               	movwf	ReadMemoryAdress@var2
  1843  00D5  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1844  00D6  00B9               	movwf	??_saveDataToFlash+1
  1845  00D7  0839               	movf	??_saveDataToFlash+1,w
  1846  00D8  00A3               	movwf	ReadMemoryAdress@var1
  1847  00D9  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1848  00DA  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  1849                           
  1850                           ;functions.c: 1139: read_write_flash_ram(
  1851                           ;functions.c: 1140: 0,
  1852                           ;functions.c: 1141: 1,
  1853                           ;functions.c: 1142: addr3,
  1854                           ;functions.c: 1143: addr2,
  1855                           ;functions.c: 1144: addr1,
  1856                           ;functions.c: 1145: &value);
  1857  00DF  3001               	movlw	1
  1858  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1859  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1860  00E2  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1861  00E3  3000               	movlw	0
  1862  00E4  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1863  00E5  0846               	movf	saveDataToFlash@addr3,w
  1864  00E6  00B8               	movwf	??_saveDataToFlash
  1865  00E7  0838               	movf	??_saveDataToFlash,w
  1866  00E8  00A7               	movwf	read_write_flash_ram@flash_sector
  1867  00E9  0845               	movf	saveDataToFlash@addr2,w
  1868  00EA  00B9               	movwf	??_saveDataToFlash+1
  1869  00EB  0839               	movf	??_saveDataToFlash+1,w
  1870  00EC  00A8               	movwf	read_write_flash_ram@flash_page
  1871  00ED  0844               	movf	saveDataToFlash@addr1,w
  1872  00EE  00BA               	movwf	??_saveDataToFlash+2
  1873  00EF  083A               	movf	??_saveDataToFlash+2,w
  1874  00F0  00A9               	movwf	read_write_flash_ram@offset
  1875  00F1  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1876  00F2  00BB               	movwf	??_saveDataToFlash+3
  1877  00F3  083B               	movf	??_saveDataToFlash+3,w
  1878  00F4  00AA               	movwf	read_write_flash_ram@mem_ptr
  1879  00F5  3000               	movlw	0
  1880  00F6  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  1881                           
  1882                           ;functions.c: 1146: IncreaseMemoryAdress();
  1883  00FB  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  1884                           
  1885                           ;functions.c: 1148: value = hours;
  1886  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1887  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1888  0102  083F               	movf	saveDataToFlash@hours,w
  1889  0103  00B8               	movwf	??_saveDataToFlash
  1890  0104  0838               	movf	??_saveDataToFlash,w
  1891  0105  00C3               	movwf	saveDataToFlash@value
  1892                           
  1893                           ;functions.c: 1149: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1894  0106  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1895  0107  00B8               	movwf	??_saveDataToFlash
  1896  0108  0838               	movf	??_saveDataToFlash,w
  1897  0109  00A2               	movwf	ReadMemoryAdress@var2
  1898  010A  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1899  010B  00B9               	movwf	??_saveDataToFlash+1
  1900  010C  0839               	movf	??_saveDataToFlash+1,w
  1901  010D  00A3               	movwf	ReadMemoryAdress@var1
  1902  010E  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1903  010F  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  1904                           
  1905                           ;functions.c: 1150: read_write_flash_ram(
  1906                           ;functions.c: 1151: 0,
  1907                           ;functions.c: 1152: 1,
  1908                           ;functions.c: 1153: addr3,
  1909                           ;functions.c: 1154: addr2,
  1910                           ;functions.c: 1155: addr1,
  1911                           ;functions.c: 1156: &value);
  1912  0114  3001               	movlw	1
  1913  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1914  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1915  0117  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1916  0118  3000               	movlw	0
  1917  0119  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1918  011A  0846               	movf	saveDataToFlash@addr3,w
  1919  011B  00B8               	movwf	??_saveDataToFlash
  1920  011C  0838               	movf	??_saveDataToFlash,w
  1921  011D  00A7               	movwf	read_write_flash_ram@flash_sector
  1922  011E  0845               	movf	saveDataToFlash@addr2,w
  1923  011F  00B9               	movwf	??_saveDataToFlash+1
  1924  0120  0839               	movf	??_saveDataToFlash+1,w
  1925  0121  00A8               	movwf	read_write_flash_ram@flash_page
  1926  0122  0844               	movf	saveDataToFlash@addr1,w
  1927  0123  00BA               	movwf	??_saveDataToFlash+2
  1928  0124  083A               	movf	??_saveDataToFlash+2,w
  1929  0125  00A9               	movwf	read_write_flash_ram@offset
  1930  0126  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1931  0127  00BB               	movwf	??_saveDataToFlash+3
  1932  0128  083B               	movf	??_saveDataToFlash+3,w
  1933  0129  00AA               	movwf	read_write_flash_ram@mem_ptr
  1934  012A  3000               	movlw	0
  1935  012B  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  1936                           
  1937                           ;functions.c: 1157: IncreaseMemoryAdress();
  1938  0130  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  1939                           
  1940                           ;functions.c: 1160: value = AnalogValue(0);
  1941  0135  3000               	movlw	0
  1942  0136  160A  118A  266D  120A  118A  	fcall	_AnalogValue
  1943  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1944  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1945  013D  00B8               	movwf	??_saveDataToFlash
  1946  013E  0838               	movf	??_saveDataToFlash,w
  1947  013F  00C3               	movwf	saveDataToFlash@value
  1948                           
  1949                           ;functions.c: 1161: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1950  0140  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1951  0141  00B8               	movwf	??_saveDataToFlash
  1952  0142  0838               	movf	??_saveDataToFlash,w
  1953  0143  00A2               	movwf	ReadMemoryAdress@var2
  1954  0144  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1955  0145  00B9               	movwf	??_saveDataToFlash+1
  1956  0146  0839               	movf	??_saveDataToFlash+1,w
  1957  0147  00A3               	movwf	ReadMemoryAdress@var1
  1958  0148  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1959  0149  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  1960                           
  1961                           ;functions.c: 1162: read_write_flash_ram(
  1962                           ;functions.c: 1163: 0,
  1963                           ;functions.c: 1164: 1,
  1964                           ;functions.c: 1165: addr3,
  1965                           ;functions.c: 1166: addr2,
  1966                           ;functions.c: 1167: addr1,
  1967                           ;functions.c: 1168: &value);
  1968  014E  3001               	movlw	1
  1969  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1970  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1971  0151  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1972  0152  3000               	movlw	0
  1973  0153  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1974  0154  0846               	movf	saveDataToFlash@addr3,w
  1975  0155  00B8               	movwf	??_saveDataToFlash
  1976  0156  0838               	movf	??_saveDataToFlash,w
  1977  0157  00A7               	movwf	read_write_flash_ram@flash_sector
  1978  0158  0845               	movf	saveDataToFlash@addr2,w
  1979  0159  00B9               	movwf	??_saveDataToFlash+1
  1980  015A  0839               	movf	??_saveDataToFlash+1,w
  1981  015B  00A8               	movwf	read_write_flash_ram@flash_page
  1982  015C  0844               	movf	saveDataToFlash@addr1,w
  1983  015D  00BA               	movwf	??_saveDataToFlash+2
  1984  015E  083A               	movf	??_saveDataToFlash+2,w
  1985  015F  00A9               	movwf	read_write_flash_ram@offset
  1986  0160  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1987  0161  00BB               	movwf	??_saveDataToFlash+3
  1988  0162  083B               	movf	??_saveDataToFlash+3,w
  1989  0163  00AA               	movwf	read_write_flash_ram@mem_ptr
  1990  0164  3000               	movlw	0
  1991  0165  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  1992                           
  1993                           ;functions.c: 1169: IncreaseMemoryAdress();
  1994  016A  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  1995                           
  1996                           ;functions.c: 1171: value = AnalogValue(3);
  1997  016F  3003               	movlw	3
  1998  0170  160A  118A  266D  120A  118A  	fcall	_AnalogValue
  1999  0175  1283               	bcf	3,5	;RP0=0, select bank0
  2000  0176  1303               	bcf	3,6	;RP1=0, select bank0
  2001  0177  00B8               	movwf	??_saveDataToFlash
  2002  0178  0838               	movf	??_saveDataToFlash,w
  2003  0179  00C3               	movwf	saveDataToFlash@value
  2004                           
  2005                           ;functions.c: 1172: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2006  017A  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2007  017B  00B8               	movwf	??_saveDataToFlash
  2008  017C  0838               	movf	??_saveDataToFlash,w
  2009  017D  00A2               	movwf	ReadMemoryAdress@var2
  2010  017E  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2011  017F  00B9               	movwf	??_saveDataToFlash+1
  2012  0180  0839               	movf	??_saveDataToFlash+1,w
  2013  0181  00A3               	movwf	ReadMemoryAdress@var1
  2014  0182  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2015  0183  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  2016                           
  2017                           ;functions.c: 1173: read_write_flash_ram(
  2018                           ;functions.c: 1174: 0,
  2019                           ;functions.c: 1175: 1,
  2020                           ;functions.c: 1176: addr3,
  2021                           ;functions.c: 1177: addr2,
  2022                           ;functions.c: 1178: addr1,
  2023                           ;functions.c: 1179: &value);
  2024  0188  3001               	movlw	1
  2025  0189  1283               	bcf	3,5	;RP0=0, select bank0
  2026  018A  1303               	bcf	3,6	;RP1=0, select bank0
  2027  018B  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2028  018C  3000               	movlw	0
  2029  018D  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2030  018E  0846               	movf	saveDataToFlash@addr3,w
  2031  018F  00B8               	movwf	??_saveDataToFlash
  2032  0190  0838               	movf	??_saveDataToFlash,w
  2033  0191  00A7               	movwf	read_write_flash_ram@flash_sector
  2034  0192  0845               	movf	saveDataToFlash@addr2,w
  2035  0193  00B9               	movwf	??_saveDataToFlash+1
  2036  0194  0839               	movf	??_saveDataToFlash+1,w
  2037  0195  00A8               	movwf	read_write_flash_ram@flash_page
  2038  0196  0844               	movf	saveDataToFlash@addr1,w
  2039  0197  00BA               	movwf	??_saveDataToFlash+2
  2040  0198  083A               	movf	??_saveDataToFlash+2,w
  2041  0199  00A9               	movwf	read_write_flash_ram@offset
  2042  019A  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2043  019B  00BB               	movwf	??_saveDataToFlash+3
  2044  019C  083B               	movf	??_saveDataToFlash+3,w
  2045  019D  00AA               	movwf	read_write_flash_ram@mem_ptr
  2046  019E  3000               	movlw	0
  2047  019F  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  2048                           
  2049                           ;functions.c: 1180: IncreaseMemoryAdress();
  2050  01A4  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  2051                           
  2052                           ;functions.c: 1182: value = AnalogValue(5);
  2053  01A9  3005               	movlw	5
  2054  01AA  160A  118A  266D  120A  118A  	fcall	_AnalogValue
  2055  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  2056  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  2057  01B1  00B8               	movwf	??_saveDataToFlash
  2058  01B2  0838               	movf	??_saveDataToFlash,w
  2059  01B3  00C3               	movwf	saveDataToFlash@value
  2060                           
  2061                           ;functions.c: 1183: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2062  01B4  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2063  01B5  00B8               	movwf	??_saveDataToFlash
  2064  01B6  0838               	movf	??_saveDataToFlash,w
  2065  01B7  00A2               	movwf	ReadMemoryAdress@var2
  2066  01B8  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2067  01B9  00B9               	movwf	??_saveDataToFlash+1
  2068  01BA  0839               	movf	??_saveDataToFlash+1,w
  2069  01BB  00A3               	movwf	ReadMemoryAdress@var1
  2070  01BC  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2071  01BD  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  2072                           
  2073                           ;functions.c: 1184: read_write_flash_ram(
  2074                           ;functions.c: 1185: 0,
  2075                           ;functions.c: 1186: 1,
  2076                           ;functions.c: 1187: addr3,
  2077                           ;functions.c: 1188: addr2,
  2078                           ;functions.c: 1189: addr1,
  2079                           ;functions.c: 1190: &value);
  2080  01C2  3001               	movlw	1
  2081  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  2082  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  2083  01C5  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2084  01C6  3000               	movlw	0
  2085  01C7  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2086  01C8  0846               	movf	saveDataToFlash@addr3,w
  2087  01C9  00B8               	movwf	??_saveDataToFlash
  2088  01CA  0838               	movf	??_saveDataToFlash,w
  2089  01CB  00A7               	movwf	read_write_flash_ram@flash_sector
  2090  01CC  0845               	movf	saveDataToFlash@addr2,w
  2091  01CD  00B9               	movwf	??_saveDataToFlash+1
  2092  01CE  0839               	movf	??_saveDataToFlash+1,w
  2093  01CF  00A8               	movwf	read_write_flash_ram@flash_page
  2094  01D0  0844               	movf	saveDataToFlash@addr1,w
  2095  01D1  00BA               	movwf	??_saveDataToFlash+2
  2096  01D2  083A               	movf	??_saveDataToFlash+2,w
  2097  01D3  00A9               	movwf	read_write_flash_ram@offset
  2098  01D4  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2099  01D5  00BB               	movwf	??_saveDataToFlash+3
  2100  01D6  083B               	movf	??_saveDataToFlash+3,w
  2101  01D7  00AA               	movwf	read_write_flash_ram@mem_ptr
  2102  01D8  3000               	movlw	0
  2103  01D9  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  2104                           
  2105                           ;functions.c: 1191: IncreaseMemoryAdress();
  2106  01DE  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  2107                           
  2108                           ;functions.c: 1193: value = AnalogValue(7);
  2109  01E3  3007               	movlw	7
  2110  01E4  160A  118A  266D  120A  118A  	fcall	_AnalogValue
  2111  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  2112  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  2113  01EB  00B8               	movwf	??_saveDataToFlash
  2114  01EC  0838               	movf	??_saveDataToFlash,w
  2115  01ED  00C3               	movwf	saveDataToFlash@value
  2116                           
  2117                           ;functions.c: 1194: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2118  01EE  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2119  01EF  00B8               	movwf	??_saveDataToFlash
  2120  01F0  0838               	movf	??_saveDataToFlash,w
  2121  01F1  00A2               	movwf	ReadMemoryAdress@var2
  2122  01F2  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2123  01F3  00B9               	movwf	??_saveDataToFlash+1
  2124  01F4  0839               	movf	??_saveDataToFlash+1,w
  2125  01F5  00A3               	movwf	ReadMemoryAdress@var1
  2126  01F6  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2127  01F7  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  2128                           
  2129                           ;functions.c: 1195: read_write_flash_ram(
  2130                           ;functions.c: 1196: 0,
  2131                           ;functions.c: 1197: 1,
  2132                           ;functions.c: 1198: addr3,
  2133                           ;functions.c: 1199: addr2,
  2134                           ;functions.c: 1200: addr1,
  2135                           ;functions.c: 1201: &value);
  2136  01FC  3001               	movlw	1
  2137  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2138  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2139  01FF  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2140  0200  3000               	movlw	0
  2141  0201  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2142  0202  0846               	movf	saveDataToFlash@addr3,w
  2143  0203  00B8               	movwf	??_saveDataToFlash
  2144  0204  0838               	movf	??_saveDataToFlash,w
  2145  0205  00A7               	movwf	read_write_flash_ram@flash_sector
  2146  0206  0845               	movf	saveDataToFlash@addr2,w
  2147  0207  00B9               	movwf	??_saveDataToFlash+1
  2148  0208  0839               	movf	??_saveDataToFlash+1,w
  2149  0209  00A8               	movwf	read_write_flash_ram@flash_page
  2150  020A  0844               	movf	saveDataToFlash@addr1,w
  2151  020B  00BA               	movwf	??_saveDataToFlash+2
  2152  020C  083A               	movf	??_saveDataToFlash+2,w
  2153  020D  00A9               	movwf	read_write_flash_ram@offset
  2154  020E  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2155  020F  00BB               	movwf	??_saveDataToFlash+3
  2156  0210  083B               	movf	??_saveDataToFlash+3,w
  2157  0211  00AA               	movwf	read_write_flash_ram@mem_ptr
  2158  0212  3000               	movlw	0
  2159  0213  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  2160                           
  2161                           ;functions.c: 1202: IncreaseMemoryAdress();
  2162  0218  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  2163                           
  2164                           ;functions.c: 1205: value = AnalogValue(6);
  2165  021D  3006               	movlw	6
  2166  021E  160A  118A  266D  120A  118A  	fcall	_AnalogValue
  2167  0223  1283               	bcf	3,5	;RP0=0, select bank0
  2168  0224  1303               	bcf	3,6	;RP1=0, select bank0
  2169  0225  00B8               	movwf	??_saveDataToFlash
  2170  0226  0838               	movf	??_saveDataToFlash,w
  2171  0227  00C3               	movwf	saveDataToFlash@value
  2172                           
  2173                           ;functions.c: 1206: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2174  0228  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2175  0229  00B8               	movwf	??_saveDataToFlash
  2176  022A  0838               	movf	??_saveDataToFlash,w
  2177  022B  00A2               	movwf	ReadMemoryAdress@var2
  2178  022C  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2179  022D  00B9               	movwf	??_saveDataToFlash+1
  2180  022E  0839               	movf	??_saveDataToFlash+1,w
  2181  022F  00A3               	movwf	ReadMemoryAdress@var1
  2182  0230  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2183  0231  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  2184                           
  2185                           ;functions.c: 1207: read_write_flash_ram(
  2186                           ;functions.c: 1208: 0,
  2187                           ;functions.c: 1209: 1,
  2188                           ;functions.c: 1210: addr3,
  2189                           ;functions.c: 1211: addr2,
  2190                           ;functions.c: 1212: addr1,
  2191                           ;functions.c: 1213: &value);
  2192  0236  3001               	movlw	1
  2193  0237  1283               	bcf	3,5	;RP0=0, select bank0
  2194  0238  1303               	bcf	3,6	;RP1=0, select bank0
  2195  0239  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2196  023A  3000               	movlw	0
  2197  023B  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2198  023C  0846               	movf	saveDataToFlash@addr3,w
  2199  023D  00B8               	movwf	??_saveDataToFlash
  2200  023E  0838               	movf	??_saveDataToFlash,w
  2201  023F  00A7               	movwf	read_write_flash_ram@flash_sector
  2202  0240  0845               	movf	saveDataToFlash@addr2,w
  2203  0241  00B9               	movwf	??_saveDataToFlash+1
  2204  0242  0839               	movf	??_saveDataToFlash+1,w
  2205  0243  00A8               	movwf	read_write_flash_ram@flash_page
  2206  0244  0844               	movf	saveDataToFlash@addr1,w
  2207  0245  00BA               	movwf	??_saveDataToFlash+2
  2208  0246  083A               	movf	??_saveDataToFlash+2,w
  2209  0247  00A9               	movwf	read_write_flash_ram@offset
  2210  0248  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2211  0249  00BB               	movwf	??_saveDataToFlash+3
  2212  024A  083B               	movf	??_saveDataToFlash+3,w
  2213  024B  00AA               	movwf	read_write_flash_ram@mem_ptr
  2214  024C  3000               	movlw	0
  2215  024D  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  2216                           
  2217                           ;functions.c: 1214: IncreaseMemoryAdress();
  2218  0252  120A  158A  261B  120A  118A  	fcall	_IncreaseMemoryAdress
  2219                           
  2220                           ;functions.c: 1217: value = AnalogValue(8);
  2221  0257  3008               	movlw	8
  2222  0258  160A  118A  266D  120A  118A  	fcall	_AnalogValue
  2223  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2224  025E  1303               	bcf	3,6	;RP1=0, select bank0
  2225  025F  00B8               	movwf	??_saveDataToFlash
  2226  0260  0838               	movf	??_saveDataToFlash,w
  2227  0261  00C3               	movwf	saveDataToFlash@value
  2228                           
  2229                           ;functions.c: 1218: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2230  0262  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2231  0263  00B8               	movwf	??_saveDataToFlash
  2232  0264  0838               	movf	??_saveDataToFlash,w
  2233  0265  00A2               	movwf	ReadMemoryAdress@var2
  2234  0266  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2235  0267  00B9               	movwf	??_saveDataToFlash+1
  2236  0268  0839               	movf	??_saveDataToFlash+1,w
  2237  0269  00A3               	movwf	ReadMemoryAdress@var1
  2238  026A  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2239  026B  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  2240                           
  2241                           ;functions.c: 1219: read_write_flash_ram(
  2242                           ;functions.c: 1220: 0,
  2243                           ;functions.c: 1221: 1,
  2244                           ;functions.c: 1222: addr3,
  2245                           ;functions.c: 1223: addr2,
  2246                           ;functions.c: 1224: addr1,
  2247                           ;functions.c: 1225: &value);
  2248  0270  3001               	movlw	1
  2249  0271  1283               	bcf	3,5	;RP0=0, select bank0
  2250  0272  1303               	bcf	3,6	;RP1=0, select bank0
  2251  0273  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2252  0274  3000               	movlw	0
  2253  0275  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2254  0276  0846               	movf	saveDataToFlash@addr3,w
  2255  0277  00B8               	movwf	??_saveDataToFlash
  2256  0278  0838               	movf	??_saveDataToFlash,w
  2257  0279  00A7               	movwf	read_write_flash_ram@flash_sector
  2258  027A  0845               	movf	saveDataToFlash@addr2,w
  2259  027B  00B9               	movwf	??_saveDataToFlash+1
  2260  027C  0839               	movf	??_saveDataToFlash+1,w
  2261  027D  00A8               	movwf	read_write_flash_ram@flash_page
  2262  027E  0844               	movf	saveDataToFlash@addr1,w
  2263  027F  00BA               	movwf	??_saveDataToFlash+2
  2264  0280  083A               	movf	??_saveDataToFlash+2,w
  2265  0281  00A9               	movwf	read_write_flash_ram@offset
  2266  0282  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2267  0283  00BB               	movwf	??_saveDataToFlash+3
  2268  0284  083B               	movf	??_saveDataToFlash+3,w
  2269  0285  00AA               	movwf	read_write_flash_ram@mem_ptr
  2270  0286  3000               	movlw	0
  2271  0287  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  2272                           
  2273                           ;functions.c: 1226: IncreaseMemoryAdress();
  2274  028C  120A  158A  261B   	fcall	_IncreaseMemoryAdress
  2275  028F  0008               	return
  2276  0290                     __end_of_saveDataToFlash:	
  2277                           
  2278                           	psect	text2
  2279  0600                     __ptext2:	
  2280 ;; *************** function _ReadClock *****************
  2281 ;; Defined at:
  2282 ;;		line 49 in file "MCP79510.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  seconds         1    wreg     PTR unsigned char 
  2285 ;;		 -> saveDataToFlash@seconds(1), 
  2286 ;;  minutes         1    4[BANK0 ] PTR unsigned char 
  2287 ;;		 -> saveDataToFlash@minutes(1), 
  2288 ;;  hour            1    5[BANK0 ] PTR unsigned char 
  2289 ;;		 -> saveDataToFlash@hours(1), 
  2290 ;;  date            1    6[BANK0 ] PTR unsigned char 
  2291 ;;		 -> saveDataToFlash@date(1), 
  2292 ;;  month           1    7[BANK0 ] PTR unsigned char 
  2293 ;;		 -> saveDataToFlash@month(1), 
  2294 ;;  year            1    8[BANK0 ] PTR unsigned char 
  2295 ;;		 -> saveDataToFlash@year(1), 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  seconds         1   17[BANK0 ] PTR unsigned char 
  2298 ;;		 -> saveDataToFlash@seconds(1), 
  2299 ;;  date1           1   23[BANK0 ] unsigned char 
  2300 ;;  year1           1   22[BANK0 ] unsigned char 
  2301 ;;  month1          1   21[BANK0 ] unsigned char 
  2302 ;;  hour1           1   20[BANK0 ] unsigned char 
  2303 ;;  min1            1   19[BANK0 ] unsigned char 
  2304 ;;  sec1            1   18[BANK0 ] unsigned char 
  2305 ;;  year10          1   16[BANK0 ] unsigned char 
  2306 ;;  month10         1   15[BANK0 ] unsigned char 
  2307 ;;  date10          1   14[BANK0 ] unsigned char 
  2308 ;;  hour10          1   13[BANK0 ] unsigned char 
  2309 ;;  min10           1   12[BANK0 ] unsigned char 
  2310 ;;  sec10           1   11[BANK0 ] unsigned char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2320 ;;      Params:         0       5       0       0       0
  2321 ;;      Locals:         0      13       0       0       0
  2322 ;;      Temps:          0       2       0       0       0
  2323 ;;      Totals:         0      20       0       0       0
  2324 ;;Total ram usage:       20 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    4
  2327 ;; This function calls:
  2328 ;;		_ReadSPI
  2329 ;;		_WriteSPI
  2330 ;;		___bmul
  2331 ;; This function is called by:
  2332 ;;		_saveDataToFlash
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           
  2337                           ;psect for function _ReadClock
  2338  0600                     _ReadClock:	
  2339                           
  2340                           ;incstack = 0
  2341                           ; Regs used in _ReadClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2342                           ;ReadClock@seconds stored from wreg
  2343  0600  1283               	bcf	3,5	;RP0=0, select bank0
  2344  0601  1303               	bcf	3,6	;RP1=0, select bank0
  2345  0602  00B1               	movwf	ReadClock@seconds
  2346                           
  2347                           ;MCP79510.c: 51: unsigned char sec10, min10, hour10, date10, month10, year10, sec1, min1
      +                          , hour1, date1, month1, year1;
  2348                           ;MCP79510.c: 53: RD4 = 0;
  2349  0603  1208               	bcf	8,4	;volatile
  2350                           
  2351                           ;MCP79510.c: 55: WriteSPI(0x13);
  2352  0604  3013               	movlw	19
  2353  0605  160A  118A  24D8  120A  118A  	fcall	_WriteSPI
  2354                           
  2355                           ;MCP79510.c: 56: WriteSPI(0x01);
  2356  060A  3001               	movlw	1
  2357  060B  160A  118A  24D8  120A  118A  	fcall	_WriteSPI
  2358                           
  2359                           ;MCP79510.c: 58: sec1 = ReadSPI() & 0x7F;
  2360  0610  160A  118A  249D  120A  118A  	fcall	_ReadSPI
  2361  0615  397F               	andlw	127
  2362  0616  1283               	bcf	3,5	;RP0=0, select bank0
  2363  0617  1303               	bcf	3,6	;RP1=0, select bank0
  2364  0618  00A9               	movwf	??_ReadClock
  2365  0619  0829               	movf	??_ReadClock,w
  2366  061A  00B2               	movwf	ReadClock@sec1
  2367                           
  2368                           ;MCP79510.c: 59: min1 = ReadSPI() & 0x7F;
  2369  061B  160A  118A  249D  120A  118A  	fcall	_ReadSPI
  2370  0620  397F               	andlw	127
  2371  0621  1283               	bcf	3,5	;RP0=0, select bank0
  2372  0622  1303               	bcf	3,6	;RP1=0, select bank0
  2373  0623  00A9               	movwf	??_ReadClock
  2374  0624  0829               	movf	??_ReadClock,w
  2375  0625  00B3               	movwf	ReadClock@min1
  2376                           
  2377                           ;MCP79510.c: 60: hour1 = ReadSPI() & 0x3F;
  2378  0626  160A  118A  249D  120A  118A  	fcall	_ReadSPI
  2379  062B  393F               	andlw	63
  2380  062C  1283               	bcf	3,5	;RP0=0, select bank0
  2381  062D  1303               	bcf	3,6	;RP1=0, select bank0
  2382  062E  00A9               	movwf	??_ReadClock
  2383  062F  0829               	movf	??_ReadClock,w
  2384  0630  00B4               	movwf	ReadClock@hour1
  2385                           
  2386                           ;MCP79510.c: 61: date1 = ReadSPI();
  2387  0631  160A  118A  249D  120A  118A  	fcall	_ReadSPI
  2388  0636  1283               	bcf	3,5	;RP0=0, select bank0
  2389  0637  1303               	bcf	3,6	;RP1=0, select bank0
  2390  0638  00A9               	movwf	??_ReadClock
  2391  0639  0829               	movf	??_ReadClock,w
  2392  063A  00B7               	movwf	ReadClock@date1
  2393                           
  2394                           ;MCP79510.c: 62: date1 = ReadSPI() & 0x3F;
  2395  063B  160A  118A  249D  120A  118A  	fcall	_ReadSPI
  2396  0640  393F               	andlw	63
  2397  0641  1283               	bcf	3,5	;RP0=0, select bank0
  2398  0642  1303               	bcf	3,6	;RP1=0, select bank0
  2399  0643  00A9               	movwf	??_ReadClock
  2400  0644  0829               	movf	??_ReadClock,w
  2401  0645  00B7               	movwf	ReadClock@date1
  2402                           
  2403                           ;MCP79510.c: 63: month1 = ReadSPI() & 0x1F;
  2404  0646  160A  118A  249D  120A  118A  	fcall	_ReadSPI
  2405  064B  391F               	andlw	31
  2406  064C  1283               	bcf	3,5	;RP0=0, select bank0
  2407  064D  1303               	bcf	3,6	;RP1=0, select bank0
  2408  064E  00A9               	movwf	??_ReadClock
  2409  064F  0829               	movf	??_ReadClock,w
  2410  0650  00B5               	movwf	ReadClock@month1
  2411                           
  2412                           ;MCP79510.c: 64: year1 = ReadSPI();
  2413  0651  160A  118A  249D  120A  118A  	fcall	_ReadSPI
  2414  0656  1283               	bcf	3,5	;RP0=0, select bank0
  2415  0657  1303               	bcf	3,6	;RP1=0, select bank0
  2416  0658  00A9               	movwf	??_ReadClock
  2417  0659  0829               	movf	??_ReadClock,w
  2418  065A  00B6               	movwf	ReadClock@year1
  2419                           
  2420                           ;MCP79510.c: 66: RD4 = 1;
  2421  065B  1608               	bsf	8,4	;volatile
  2422                           
  2423                           ;MCP79510.c: 69: sec10 = (sec1 & 0x70) >> 4;
  2424  065C  0832               	movf	ReadClock@sec1,w
  2425  065D  00A9               	movwf	??_ReadClock
  2426  065E  3004               	movlw	4
  2427  065F                     u2295:	
  2428  065F  1003               	clrc
  2429  0660  0CA9               	rrf	??_ReadClock,f
  2430  0661  3EFF               	addlw	-1
  2431  0662  1D03               	skipz
  2432  0663  2E5F               	goto	u2295
  2433  0664  0829               	movf	??_ReadClock,w
  2434  0665  3907               	andlw	7
  2435  0666  00AA               	movwf	??_ReadClock+1
  2436  0667  082A               	movf	??_ReadClock+1,w
  2437  0668  00AB               	movwf	ReadClock@sec10
  2438                           
  2439                           ;MCP79510.c: 70: sec1 = sec1 & 0x0F;
  2440  0669  0832               	movf	ReadClock@sec1,w
  2441  066A  390F               	andlw	15
  2442  066B  00A9               	movwf	??_ReadClock
  2443  066C  0829               	movf	??_ReadClock,w
  2444  066D  00B2               	movwf	ReadClock@sec1
  2445                           
  2446                           ;MCP79510.c: 71: *seconds = sec1 + sec10 * 10;
  2447  066E  300A               	movlw	10
  2448  066F  00A9               	movwf	??_ReadClock
  2449  0670  0829               	movf	??_ReadClock,w
  2450  0671  00A0               	movwf	___bmul@multiplicand
  2451  0672  082B               	movf	ReadClock@sec10,w
  2452  0673  160A  118A  2528  120A  118A  	fcall	___bmul
  2453  0678  1283               	bcf	3,5	;RP0=0, select bank0
  2454  0679  1303               	bcf	3,6	;RP1=0, select bank0
  2455  067A  0732               	addwf	ReadClock@sec1,w
  2456  067B  00AA               	movwf	??_ReadClock+1
  2457  067C  0831               	movf	ReadClock@seconds,w
  2458  067D  0084               	movwf	4
  2459  067E  082A               	movf	??_ReadClock+1,w
  2460  067F  1383               	bcf	3,7	;select IRP bank0
  2461  0680  0080               	movwf	0
  2462                           
  2463                           ;MCP79510.c: 73: min10 = (min1 & 0x70) >> 4;
  2464  0681  0833               	movf	ReadClock@min1,w
  2465  0682  00A9               	movwf	??_ReadClock
  2466  0683  3004               	movlw	4
  2467  0684                     u2305:	
  2468  0684  1003               	clrc
  2469  0685  0CA9               	rrf	??_ReadClock,f
  2470  0686  3EFF               	addlw	-1
  2471  0687  1D03               	skipz
  2472  0688  2E84               	goto	u2305
  2473  0689  0829               	movf	??_ReadClock,w
  2474  068A  3907               	andlw	7
  2475  068B  00AA               	movwf	??_ReadClock+1
  2476  068C  082A               	movf	??_ReadClock+1,w
  2477  068D  00AC               	movwf	ReadClock@min10
  2478                           
  2479                           ;MCP79510.c: 74: min1 = min1 & 0x0F;
  2480  068E  0833               	movf	ReadClock@min1,w
  2481  068F  390F               	andlw	15
  2482  0690  00A9               	movwf	??_ReadClock
  2483  0691  0829               	movf	??_ReadClock,w
  2484  0692  00B3               	movwf	ReadClock@min1
  2485                           
  2486                           ;MCP79510.c: 75: *minutes = min1 + min10 * 10;
  2487  0693  300A               	movlw	10
  2488  0694  00A9               	movwf	??_ReadClock
  2489  0695  0829               	movf	??_ReadClock,w
  2490  0696  00A0               	movwf	___bmul@multiplicand
  2491  0697  082C               	movf	ReadClock@min10,w
  2492  0698  160A  118A  2528  120A  118A  	fcall	___bmul
  2493  069D  1283               	bcf	3,5	;RP0=0, select bank0
  2494  069E  1303               	bcf	3,6	;RP1=0, select bank0
  2495  069F  0733               	addwf	ReadClock@min1,w
  2496  06A0  00AA               	movwf	??_ReadClock+1
  2497  06A1  0824               	movf	ReadClock@minutes,w
  2498  06A2  0084               	movwf	4
  2499  06A3  082A               	movf	??_ReadClock+1,w
  2500  06A4  1383               	bcf	3,7	;select IRP bank0
  2501  06A5  0080               	movwf	0
  2502                           
  2503                           ;MCP79510.c: 77: hour10 = (hour1 & 0x30) >> 4;
  2504  06A6  0834               	movf	ReadClock@hour1,w
  2505  06A7  00A9               	movwf	??_ReadClock
  2506  06A8  3004               	movlw	4
  2507  06A9                     u2315:	
  2508  06A9  1003               	clrc
  2509  06AA  0CA9               	rrf	??_ReadClock,f
  2510  06AB  3EFF               	addlw	-1
  2511  06AC  1D03               	skipz
  2512  06AD  2EA9               	goto	u2315
  2513  06AE  0829               	movf	??_ReadClock,w
  2514  06AF  3903               	andlw	3
  2515  06B0  00AA               	movwf	??_ReadClock+1
  2516  06B1  082A               	movf	??_ReadClock+1,w
  2517  06B2  00AD               	movwf	ReadClock@hour10
  2518                           
  2519                           ;MCP79510.c: 78: hour1 = hour1 & 0x0F;
  2520  06B3  0834               	movf	ReadClock@hour1,w
  2521  06B4  390F               	andlw	15
  2522  06B5  00A9               	movwf	??_ReadClock
  2523  06B6  0829               	movf	??_ReadClock,w
  2524  06B7  00B4               	movwf	ReadClock@hour1
  2525                           
  2526                           ;MCP79510.c: 79: *hour = hour1 + hour10 * 10;
  2527  06B8  300A               	movlw	10
  2528  06B9  00A9               	movwf	??_ReadClock
  2529  06BA  0829               	movf	??_ReadClock,w
  2530  06BB  00A0               	movwf	___bmul@multiplicand
  2531  06BC  082D               	movf	ReadClock@hour10,w
  2532  06BD  160A  118A  2528  120A  118A  	fcall	___bmul
  2533  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  2534  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  2535  06C4  0734               	addwf	ReadClock@hour1,w
  2536  06C5  00AA               	movwf	??_ReadClock+1
  2537  06C6  0825               	movf	ReadClock@hour,w
  2538  06C7  0084               	movwf	4
  2539  06C8  082A               	movf	??_ReadClock+1,w
  2540  06C9  1383               	bcf	3,7	;select IRP bank0
  2541  06CA  0080               	movwf	0
  2542                           
  2543                           ;MCP79510.c: 81: date10 = (date1 & 0x30) >> 4;
  2544  06CB  0837               	movf	ReadClock@date1,w
  2545  06CC  00A9               	movwf	??_ReadClock
  2546  06CD  3004               	movlw	4
  2547  06CE                     u2325:	
  2548  06CE  1003               	clrc
  2549  06CF  0CA9               	rrf	??_ReadClock,f
  2550  06D0  3EFF               	addlw	-1
  2551  06D1  1D03               	skipz
  2552  06D2  2ECE               	goto	u2325
  2553  06D3  0829               	movf	??_ReadClock,w
  2554  06D4  3903               	andlw	3
  2555  06D5  00AA               	movwf	??_ReadClock+1
  2556  06D6  082A               	movf	??_ReadClock+1,w
  2557  06D7  00AE               	movwf	ReadClock@date10
  2558                           
  2559                           ;MCP79510.c: 82: date1 = date1 & 0x0F;
  2560  06D8  0837               	movf	ReadClock@date1,w
  2561  06D9  390F               	andlw	15
  2562  06DA  00A9               	movwf	??_ReadClock
  2563  06DB  0829               	movf	??_ReadClock,w
  2564  06DC  00B7               	movwf	ReadClock@date1
  2565                           
  2566                           ;MCP79510.c: 83: *date = date1 + date10 * 10;
  2567  06DD  300A               	movlw	10
  2568  06DE  00A9               	movwf	??_ReadClock
  2569  06DF  0829               	movf	??_ReadClock,w
  2570  06E0  00A0               	movwf	___bmul@multiplicand
  2571  06E1  082E               	movf	ReadClock@date10,w
  2572  06E2  160A  118A  2528  120A  118A  	fcall	___bmul
  2573  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  2574  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  2575  06E9  0737               	addwf	ReadClock@date1,w
  2576  06EA  00AA               	movwf	??_ReadClock+1
  2577  06EB  0826               	movf	ReadClock@date,w
  2578  06EC  0084               	movwf	4
  2579  06ED  082A               	movf	??_ReadClock+1,w
  2580  06EE  1383               	bcf	3,7	;select IRP bank0
  2581  06EF  0080               	movwf	0
  2582                           
  2583                           ;MCP79510.c: 85: month10 = (month1 & 0x10) >> 4;
  2584  06F0  0835               	movf	ReadClock@month1,w
  2585  06F1  00A9               	movwf	??_ReadClock
  2586  06F2  3004               	movlw	4
  2587  06F3                     u2335:	
  2588  06F3  1003               	clrc
  2589  06F4  0CA9               	rrf	??_ReadClock,f
  2590  06F5  3EFF               	addlw	-1
  2591  06F6  1D03               	skipz
  2592  06F7  2EF3               	goto	u2335
  2593  06F8  0829               	movf	??_ReadClock,w
  2594  06F9  3901               	andlw	1
  2595  06FA  00AA               	movwf	??_ReadClock+1
  2596  06FB  082A               	movf	??_ReadClock+1,w
  2597  06FC  00AF               	movwf	ReadClock@month10
  2598                           
  2599                           ;MCP79510.c: 86: month1 = month1 & 0x0F;
  2600  06FD  0835               	movf	ReadClock@month1,w
  2601  06FE  390F               	andlw	15
  2602  06FF  00A9               	movwf	??_ReadClock
  2603  0700  0829               	movf	??_ReadClock,w
  2604  0701  00B5               	movwf	ReadClock@month1
  2605                           
  2606                           ;MCP79510.c: 87: *month = month1 + month10 * 10;
  2607  0702  300A               	movlw	10
  2608  0703  00A9               	movwf	??_ReadClock
  2609  0704  0829               	movf	??_ReadClock,w
  2610  0705  00A0               	movwf	___bmul@multiplicand
  2611  0706  082F               	movf	ReadClock@month10,w
  2612  0707  160A  118A  2528  120A  118A  	fcall	___bmul
  2613  070C  1283               	bcf	3,5	;RP0=0, select bank0
  2614  070D  1303               	bcf	3,6	;RP1=0, select bank0
  2615  070E  0735               	addwf	ReadClock@month1,w
  2616  070F  00AA               	movwf	??_ReadClock+1
  2617  0710  0827               	movf	ReadClock@month,w
  2618  0711  0084               	movwf	4
  2619  0712  082A               	movf	??_ReadClock+1,w
  2620  0713  1383               	bcf	3,7	;select IRP bank0
  2621  0714  0080               	movwf	0
  2622                           
  2623                           ;MCP79510.c: 89: year10 = (year1 & 0xF0) >> 4;
  2624  0715  0836               	movf	ReadClock@year1,w
  2625  0716  00A9               	movwf	??_ReadClock
  2626  0717  3004               	movlw	4
  2627  0718                     u2345:	
  2628  0718  1003               	clrc
  2629  0719  0CA9               	rrf	??_ReadClock,f
  2630  071A  3EFF               	addlw	-1
  2631  071B  1D03               	skipz
  2632  071C  2F18               	goto	u2345
  2633  071D  0829               	movf	??_ReadClock,w
  2634  071E  390F               	andlw	15
  2635  071F  00AA               	movwf	??_ReadClock+1
  2636  0720  082A               	movf	??_ReadClock+1,w
  2637  0721  00B0               	movwf	ReadClock@year10
  2638                           
  2639                           ;MCP79510.c: 90: year1 = year1 & 0x0F;
  2640  0722  0836               	movf	ReadClock@year1,w
  2641  0723  390F               	andlw	15
  2642  0724  00A9               	movwf	??_ReadClock
  2643  0725  0829               	movf	??_ReadClock,w
  2644  0726  00B6               	movwf	ReadClock@year1
  2645                           
  2646                           ;MCP79510.c: 91: *year = year1 + year10 * 10;
  2647  0727  300A               	movlw	10
  2648  0728  00A9               	movwf	??_ReadClock
  2649  0729  0829               	movf	??_ReadClock,w
  2650  072A  00A0               	movwf	___bmul@multiplicand
  2651  072B  0830               	movf	ReadClock@year10,w
  2652  072C  160A  118A  2528   	fcall	___bmul
  2653  072F  1283               	bcf	3,5	;RP0=0, select bank0
  2654  0730  1303               	bcf	3,6	;RP1=0, select bank0
  2655  0731  0736               	addwf	ReadClock@year1,w
  2656  0732  00AA               	movwf	??_ReadClock+1
  2657  0733  0828               	movf	ReadClock@year,w
  2658  0734  0084               	movwf	4
  2659  0735  082A               	movf	??_ReadClock+1,w
  2660  0736  1383               	bcf	3,7	;select IRP bank0
  2661  0737  0080               	movwf	0
  2662  0738  0008               	return
  2663  0739                     __end_of_ReadClock:	
  2664                           
  2665                           	psect	text3
  2666  1528                     __ptext3:	
  2667 ;; *************** function ___bmul *****************
  2668 ;; Defined at:
  2669 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  multiplier      1    wreg     unsigned char 
  2672 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2675 ;;  product         1    2[BANK0 ] unsigned char 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      unsigned char 
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2685 ;;      Params:         0       1       0       0       0
  2686 ;;      Locals:         0       2       0       0       0
  2687 ;;      Temps:          0       1       0       0       0
  2688 ;;      Totals:         0       4       0       0       0
  2689 ;;Total ram usage:        4 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    2
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_ReadClock
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           
  2700                           ;psect for function ___bmul
  2701  1528                     ___bmul:	
  2702                           
  2703                           ;incstack = 0
  2704                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2705                           ;___bmul@multiplier stored from wreg
  2706  1528  1283               	bcf	3,5	;RP0=0, select bank0
  2707  1529  1303               	bcf	3,6	;RP1=0, select bank0
  2708  152A  00A3               	movwf	___bmul@multiplier
  2709  152B  01A2               	clrf	___bmul@product
  2710  152C                     l2754:	
  2711  152C  1C23               	btfss	___bmul@multiplier,0
  2712  152D  2D32               	goto	l2758
  2713  152E  0820               	movf	___bmul@multiplicand,w
  2714  152F  00A1               	movwf	??___bmul
  2715  1530  0821               	movf	??___bmul,w
  2716  1531  07A2               	addwf	___bmul@product,f
  2717  1532                     l2758:	
  2718  1532  1003               	clrc
  2719  1533  0DA0               	rlf	___bmul@multiplicand,f
  2720  1534  1003               	clrc
  2721  1535  0CA3               	rrf	___bmul@multiplier,f
  2722  1536  0823               	movf	___bmul@multiplier,w
  2723  1537  1D03               	btfss	3,2
  2724  1538  2D2C               	goto	l2754
  2725  1539  0822               	movf	___bmul@product,w
  2726  153A  0008               	return
  2727  153B                     __end_of___bmul:	
  2728                           
  2729                           	psect	text4
  2730  0E1B                     __ptext4:	
  2731 ;; *************** function _IncreaseMemoryAdress *****************
  2732 ;; Defined at:
  2733 ;;		line 1048 in file "functions.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;		None
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  address         4   18[BANK0 ] unsigned long 
  2738 ;;  addr3           1   17[BANK0 ] unsigned char 
  2739 ;;  addr2           1   16[BANK0 ] unsigned char 
  2740 ;;  addr1           1   15[BANK0 ] unsigned char 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2750 ;;      Params:         0       0       0       0       0
  2751 ;;      Locals:         0       7       0       0       0
  2752 ;;      Temps:          0       8       0       0       0
  2753 ;;      Totals:         0      15       0       0       0
  2754 ;;Total ram usage:       15 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    4
  2757 ;; This function calls:
  2758 ;;		_ReadMemoryAdress
  2759 ;;		_WriteMemoryAdress
  2760 ;; This function is called by:
  2761 ;;		_saveDataToFlash
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           
  2766                           ;psect for function _IncreaseMemoryAdress
  2767  0E1B                     _IncreaseMemoryAdress:	
  2768                           
  2769                           ;functions.c: 1050: unsigned char addr1, addr2, addr3;
  2770                           ;functions.c: 1051: unsigned long address = 0;
  2771                           
  2772                           ;incstack = 0
  2773                           ; Regs used in _IncreaseMemoryAdress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2774  0E1B  3000               	movlw	0
  2775  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  2776  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  2777  0E1E  00B5               	movwf	IncreaseMemoryAdress@address+3
  2778  0E1F  3000               	movlw	0
  2779  0E20  00B4               	movwf	IncreaseMemoryAdress@address+2
  2780  0E21  3000               	movlw	0
  2781  0E22  00B3               	movwf	IncreaseMemoryAdress@address+1
  2782  0E23  3000               	movlw	0
  2783  0E24  00B2               	movwf	IncreaseMemoryAdress@address
  2784                           
  2785                           ;functions.c: 1053: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2786  0E25  3030               	movlw	(low (IncreaseMemoryAdress@addr2| 0))& (0+255)
  2787  0E26  00A7               	movwf	??_IncreaseMemoryAdress
  2788  0E27  0827               	movf	??_IncreaseMemoryAdress,w
  2789  0E28  00A2               	movwf	ReadMemoryAdress@var2
  2790  0E29  302F               	movlw	(low (IncreaseMemoryAdress@addr1| 0))& (0+255)
  2791  0E2A  00A8               	movwf	??_IncreaseMemoryAdress+1
  2792  0E2B  0828               	movf	??_IncreaseMemoryAdress+1,w
  2793  0E2C  00A3               	movwf	ReadMemoryAdress@var1
  2794  0E2D  3031               	movlw	(low (IncreaseMemoryAdress@addr3| 0))& (0+255)
  2795  0E2E  160A  118A  2698  120A  158A  	fcall	_ReadMemoryAdress
  2796                           
  2797                           ;functions.c: 1054: address = addr3;
  2798  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  2799  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  2800  0E35  0831               	movf	IncreaseMemoryAdress@addr3,w
  2801  0E36  00A7               	movwf	??_IncreaseMemoryAdress
  2802  0E37  01A8               	clrf	??_IncreaseMemoryAdress+1
  2803  0E38  01A9               	clrf	??_IncreaseMemoryAdress+2
  2804  0E39  01AA               	clrf	??_IncreaseMemoryAdress+3
  2805  0E3A  082A               	movf	??_IncreaseMemoryAdress+3,w
  2806  0E3B  00B5               	movwf	IncreaseMemoryAdress@address+3
  2807  0E3C  0829               	movf	??_IncreaseMemoryAdress+2,w
  2808  0E3D  00B4               	movwf	IncreaseMemoryAdress@address+2
  2809  0E3E  0828               	movf	??_IncreaseMemoryAdress+1,w
  2810  0E3F  00B3               	movwf	IncreaseMemoryAdress@address+1
  2811  0E40  0827               	movf	??_IncreaseMemoryAdress,w
  2812  0E41  00B2               	movwf	IncreaseMemoryAdress@address
  2813                           
  2814                           ;functions.c: 1055: address = (address << 8) + addr2;
  2815  0E42  0830               	movf	IncreaseMemoryAdress@addr2,w
  2816  0E43  00A7               	movwf	??_IncreaseMemoryAdress
  2817  0E44  01A8               	clrf	??_IncreaseMemoryAdress+1
  2818  0E45  01A9               	clrf	??_IncreaseMemoryAdress+2
  2819  0E46  01AA               	clrf	??_IncreaseMemoryAdress+3
  2820  0E47  0832               	movf	IncreaseMemoryAdress@address,w
  2821  0E48  00AB               	movwf	??_IncreaseMemoryAdress+4
  2822  0E49  0833               	movf	IncreaseMemoryAdress@address+1,w
  2823  0E4A  00AC               	movwf	??_IncreaseMemoryAdress+5
  2824  0E4B  0834               	movf	IncreaseMemoryAdress@address+2,w
  2825  0E4C  00AD               	movwf	??_IncreaseMemoryAdress+6
  2826  0E4D  0835               	movf	IncreaseMemoryAdress@address+3,w
  2827  0E4E  00AE               	movwf	??_IncreaseMemoryAdress+7
  2828  0E4F  3008               	movlw	8
  2829  0E50                     u2225:	
  2830  0E50  1003               	clrc
  2831  0E51  0DAB               	rlf	??_IncreaseMemoryAdress+4,f
  2832  0E52  0DAC               	rlf	??_IncreaseMemoryAdress+5,f
  2833  0E53  0DAD               	rlf	??_IncreaseMemoryAdress+6,f
  2834  0E54  0DAE               	rlf	??_IncreaseMemoryAdress+7,f
  2835  0E55  3EFF               	addlw	-1
  2836  0E56  1D03               	skipz
  2837  0E57  2E50               	goto	u2225
  2838  0E58  082B               	movf	??_IncreaseMemoryAdress+4,w
  2839  0E59  07A7               	addwf	??_IncreaseMemoryAdress,f
  2840  0E5A  082C               	movf	??_IncreaseMemoryAdress+5,w
  2841  0E5B  1803               	skipnc
  2842  0E5C  0F2C               	incfsz	??_IncreaseMemoryAdress+5,w
  2843  0E5D  2E5F               	goto	u2230
  2844  0E5E  2E60               	goto	u2231
  2845  0E5F                     u2230:	
  2846  0E5F  07A8               	addwf	??_IncreaseMemoryAdress+1,f
  2847  0E60                     u2231:	
  2848  0E60  082D               	movf	??_IncreaseMemoryAdress+6,w
  2849  0E61  1803               	skipnc
  2850  0E62  0F2D               	incfsz	??_IncreaseMemoryAdress+6,w
  2851  0E63  2E65               	goto	u2232
  2852  0E64  2E66               	goto	u2233
  2853  0E65                     u2232:	
  2854  0E65  07A9               	addwf	??_IncreaseMemoryAdress+2,f
  2855  0E66                     u2233:	
  2856  0E66  082E               	movf	??_IncreaseMemoryAdress+7,w
  2857  0E67  1803               	skipnc
  2858  0E68  0A2E               	incf	??_IncreaseMemoryAdress+7,w
  2859  0E69  07AA               	addwf	??_IncreaseMemoryAdress+3,f
  2860  0E6A  082A               	movf	??_IncreaseMemoryAdress+3,w
  2861  0E6B  00B5               	movwf	IncreaseMemoryAdress@address+3
  2862  0E6C  0829               	movf	??_IncreaseMemoryAdress+2,w
  2863  0E6D  00B4               	movwf	IncreaseMemoryAdress@address+2
  2864  0E6E  0828               	movf	??_IncreaseMemoryAdress+1,w
  2865  0E6F  00B3               	movwf	IncreaseMemoryAdress@address+1
  2866  0E70  0827               	movf	??_IncreaseMemoryAdress,w
  2867  0E71  00B2               	movwf	IncreaseMemoryAdress@address
  2868                           
  2869                           ;functions.c: 1056: address = (address << 8) + addr1;
  2870  0E72  082F               	movf	IncreaseMemoryAdress@addr1,w
  2871  0E73  00A7               	movwf	??_IncreaseMemoryAdress
  2872  0E74  01A8               	clrf	??_IncreaseMemoryAdress+1
  2873  0E75  01A9               	clrf	??_IncreaseMemoryAdress+2
  2874  0E76  01AA               	clrf	??_IncreaseMemoryAdress+3
  2875  0E77  0832               	movf	IncreaseMemoryAdress@address,w
  2876  0E78  00AB               	movwf	??_IncreaseMemoryAdress+4
  2877  0E79  0833               	movf	IncreaseMemoryAdress@address+1,w
  2878  0E7A  00AC               	movwf	??_IncreaseMemoryAdress+5
  2879  0E7B  0834               	movf	IncreaseMemoryAdress@address+2,w
  2880  0E7C  00AD               	movwf	??_IncreaseMemoryAdress+6
  2881  0E7D  0835               	movf	IncreaseMemoryAdress@address+3,w
  2882  0E7E  00AE               	movwf	??_IncreaseMemoryAdress+7
  2883  0E7F  3008               	movlw	8
  2884  0E80                     u2245:	
  2885  0E80  1003               	clrc
  2886  0E81  0DAB               	rlf	??_IncreaseMemoryAdress+4,f
  2887  0E82  0DAC               	rlf	??_IncreaseMemoryAdress+5,f
  2888  0E83  0DAD               	rlf	??_IncreaseMemoryAdress+6,f
  2889  0E84  0DAE               	rlf	??_IncreaseMemoryAdress+7,f
  2890  0E85  3EFF               	addlw	-1
  2891  0E86  1D03               	skipz
  2892  0E87  2E80               	goto	u2245
  2893  0E88  082B               	movf	??_IncreaseMemoryAdress+4,w
  2894  0E89  07A7               	addwf	??_IncreaseMemoryAdress,f
  2895  0E8A  082C               	movf	??_IncreaseMemoryAdress+5,w
  2896  0E8B  1803               	skipnc
  2897  0E8C  0F2C               	incfsz	??_IncreaseMemoryAdress+5,w
  2898  0E8D  2E8F               	goto	u2250
  2899  0E8E  2E90               	goto	u2251
  2900  0E8F                     u2250:	
  2901  0E8F  07A8               	addwf	??_IncreaseMemoryAdress+1,f
  2902  0E90                     u2251:	
  2903  0E90  082D               	movf	??_IncreaseMemoryAdress+6,w
  2904  0E91  1803               	skipnc
  2905  0E92  0F2D               	incfsz	??_IncreaseMemoryAdress+6,w
  2906  0E93  2E95               	goto	u2252
  2907  0E94  2E96               	goto	u2253
  2908  0E95                     u2252:	
  2909  0E95  07A9               	addwf	??_IncreaseMemoryAdress+2,f
  2910  0E96                     u2253:	
  2911  0E96  082E               	movf	??_IncreaseMemoryAdress+7,w
  2912  0E97  1803               	skipnc
  2913  0E98  0A2E               	incf	??_IncreaseMemoryAdress+7,w
  2914  0E99  07AA               	addwf	??_IncreaseMemoryAdress+3,f
  2915  0E9A  082A               	movf	??_IncreaseMemoryAdress+3,w
  2916  0E9B  00B5               	movwf	IncreaseMemoryAdress@address+3
  2917  0E9C  0829               	movf	??_IncreaseMemoryAdress+2,w
  2918  0E9D  00B4               	movwf	IncreaseMemoryAdress@address+2
  2919  0E9E  0828               	movf	??_IncreaseMemoryAdress+1,w
  2920  0E9F  00B3               	movwf	IncreaseMemoryAdress@address+1
  2921  0EA0  0827               	movf	??_IncreaseMemoryAdress,w
  2922  0EA1  00B2               	movwf	IncreaseMemoryAdress@address
  2923                           
  2924                           ;functions.c: 1058: if(address++ >= 0x1FFFFF)
  2925  0EA2  0835               	movf	IncreaseMemoryAdress@address+3,w
  2926  0EA3  00AA               	movwf	??_IncreaseMemoryAdress+3
  2927  0EA4  0834               	movf	IncreaseMemoryAdress@address+2,w
  2928  0EA5  00A9               	movwf	??_IncreaseMemoryAdress+2
  2929  0EA6  0833               	movf	IncreaseMemoryAdress@address+1,w
  2930  0EA7  00A8               	movwf	??_IncreaseMemoryAdress+1
  2931  0EA8  0832               	movf	IncreaseMemoryAdress@address,w
  2932  0EA9  00A7               	movwf	??_IncreaseMemoryAdress
  2933  0EAA  3001               	movlw	1
  2934  0EAB  07B2               	addwf	IncreaseMemoryAdress@address,f
  2935  0EAC  3000               	movlw	0
  2936  0EAD  07B3               	addwf	IncreaseMemoryAdress@address+1,f
  2937  0EAE  1803               	skipnc
  2938  0EAF  0AB4               	incf	IncreaseMemoryAdress@address+2,f
  2939  0EB0  07B4               	addwf	IncreaseMemoryAdress@address+2,f
  2940  0EB1  1803               	skipnc
  2941  0EB2  0AB5               	incf	IncreaseMemoryAdress@address+3,f
  2942  0EB3  07B5               	addwf	IncreaseMemoryAdress@address+3,f
  2943  0EB4  082A               	movf	??_IncreaseMemoryAdress+3,w
  2944  0EB5  1D03               	btfss	3,2
  2945  0EB6  2EC5               	goto	l2960
  2946  0EB7  301F               	movlw	31
  2947  0EB8  0229               	subwf	??_IncreaseMemoryAdress+2,w
  2948  0EB9  1D03               	skipz
  2949  0EBA  2EC3               	goto	u2263
  2950  0EBB  30FF               	movlw	255
  2951  0EBC  0228               	subwf	??_IncreaseMemoryAdress+1,w
  2952  0EBD  1D03               	skipz
  2953  0EBE  2EC3               	goto	u2263
  2954  0EBF  30FF               	movlw	255
  2955  0EC0  0227               	subwf	??_IncreaseMemoryAdress,w
  2956  0EC1  1D03               	skipz
  2957  0EC2  2EC3               	goto	u2263
  2958  0EC3                     u2263:	
  2959  0EC3  1C03               	btfss	3,0
  2960  0EC4  2ECD               	goto	l498
  2961  0EC5                     l2960:	
  2962                           
  2963                           ;functions.c: 1059: address = 0x1FFFFF;
  2964  0EC5  3000               	movlw	0
  2965  0EC6  00B5               	movwf	IncreaseMemoryAdress@address+3
  2966  0EC7  301F               	movlw	31
  2967  0EC8  00B4               	movwf	IncreaseMemoryAdress@address+2
  2968  0EC9  30FF               	movlw	255
  2969  0ECA  00B3               	movwf	IncreaseMemoryAdress@address+1
  2970  0ECB  30FF               	movlw	255
  2971  0ECC  00B2               	movwf	IncreaseMemoryAdress@address
  2972  0ECD                     l498:	
  2973                           
  2974                           ;functions.c: 1061: addr1 = address & 0xFF;
  2975  0ECD  0832               	movf	IncreaseMemoryAdress@address,w
  2976  0ECE  00A7               	movwf	??_IncreaseMemoryAdress
  2977  0ECF  0827               	movf	??_IncreaseMemoryAdress,w
  2978  0ED0  00AF               	movwf	IncreaseMemoryAdress@addr1
  2979                           
  2980                           ;functions.c: 1062: addr2 = (address >> 8) & 0xFF;
  2981  0ED1  0832               	movf	IncreaseMemoryAdress@address,w
  2982  0ED2  00A7               	movwf	??_IncreaseMemoryAdress
  2983  0ED3  0833               	movf	IncreaseMemoryAdress@address+1,w
  2984  0ED4  00A8               	movwf	??_IncreaseMemoryAdress+1
  2985  0ED5  0834               	movf	IncreaseMemoryAdress@address+2,w
  2986  0ED6  00A9               	movwf	??_IncreaseMemoryAdress+2
  2987  0ED7  0835               	movf	IncreaseMemoryAdress@address+3,w
  2988  0ED8  00AA               	movwf	??_IncreaseMemoryAdress+3
  2989  0ED9  3008               	movlw	8
  2990  0EDA                     u2275:	
  2991  0EDA  1003               	clrc
  2992  0EDB  0CAA               	rrf	??_IncreaseMemoryAdress+3,f
  2993  0EDC  0CA9               	rrf	??_IncreaseMemoryAdress+2,f
  2994  0EDD  0CA8               	rrf	??_IncreaseMemoryAdress+1,f
  2995  0EDE  0CA7               	rrf	??_IncreaseMemoryAdress,f
  2996  0EDF  3EFF               	addlw	-1
  2997  0EE0  1D03               	skipz
  2998  0EE1  2EDA               	goto	u2275
  2999  0EE2  0827               	movf	??_IncreaseMemoryAdress,w
  3000  0EE3  00AB               	movwf	??_IncreaseMemoryAdress+4
  3001  0EE4  082B               	movf	??_IncreaseMemoryAdress+4,w
  3002  0EE5  00B0               	movwf	IncreaseMemoryAdress@addr2
  3003                           
  3004                           ;functions.c: 1063: addr3 = (address >> 16) & 0xFF;
  3005  0EE6  0832               	movf	IncreaseMemoryAdress@address,w
  3006  0EE7  00A7               	movwf	??_IncreaseMemoryAdress
  3007  0EE8  0833               	movf	IncreaseMemoryAdress@address+1,w
  3008  0EE9  00A8               	movwf	??_IncreaseMemoryAdress+1
  3009  0EEA  0834               	movf	IncreaseMemoryAdress@address+2,w
  3010  0EEB  00A9               	movwf	??_IncreaseMemoryAdress+2
  3011  0EEC  0835               	movf	IncreaseMemoryAdress@address+3,w
  3012  0EED  00AA               	movwf	??_IncreaseMemoryAdress+3
  3013  0EEE  3010               	movlw	16
  3014  0EEF                     u2285:	
  3015  0EEF  1003               	clrc
  3016  0EF0  0CAA               	rrf	??_IncreaseMemoryAdress+3,f
  3017  0EF1  0CA9               	rrf	??_IncreaseMemoryAdress+2,f
  3018  0EF2  0CA8               	rrf	??_IncreaseMemoryAdress+1,f
  3019  0EF3  0CA7               	rrf	??_IncreaseMemoryAdress,f
  3020  0EF4  3EFF               	addlw	-1
  3021  0EF5  1D03               	skipz
  3022  0EF6  2EEF               	goto	u2285
  3023  0EF7  0827               	movf	??_IncreaseMemoryAdress,w
  3024  0EF8  00AB               	movwf	??_IncreaseMemoryAdress+4
  3025  0EF9  082B               	movf	??_IncreaseMemoryAdress+4,w
  3026  0EFA  00B1               	movwf	IncreaseMemoryAdress@addr3
  3027                           
  3028                           ;functions.c: 1065: WriteMemoryAdress(addr3, addr2, addr1);
  3029  0EFB  0830               	movf	IncreaseMemoryAdress@addr2,w
  3030  0EFC  00A7               	movwf	??_IncreaseMemoryAdress
  3031  0EFD  0827               	movf	??_IncreaseMemoryAdress,w
  3032  0EFE  00A3               	movwf	WriteMemoryAdress@var2
  3033  0EFF  082F               	movf	IncreaseMemoryAdress@addr1,w
  3034  0F00  00A8               	movwf	??_IncreaseMemoryAdress+1
  3035  0F01  0828               	movf	??_IncreaseMemoryAdress+1,w
  3036  0F02  00A4               	movwf	WriteMemoryAdress@var1
  3037  0F03  0831               	movf	IncreaseMemoryAdress@addr3,w
  3038  0F04  160A  118A  2622   	fcall	_WriteMemoryAdress
  3039  0F07  0008               	return
  3040  0F08                     __end_of_IncreaseMemoryAdress:	
  3041                           
  3042                           	psect	text5
  3043  1622                     __ptext5:	
  3044 ;; *************** function _WriteMemoryAdress *****************
  3045 ;; Defined at:
  3046 ;;		line 1023 in file "functions.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;  var3            1    wreg     unsigned char 
  3049 ;;  var2            1    3[BANK0 ] unsigned char 
  3050 ;;  var1            1    4[BANK0 ] unsigned char 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  var3            1    6[BANK0 ] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0, pclath, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3062 ;;      Params:         0       2       0       0       0
  3063 ;;      Locals:         0       1       0       0       0
  3064 ;;      Temps:          0       1       0       0       0
  3065 ;;      Totals:         0       4       0       0       0
  3066 ;;Total ram usage:        4 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    3
  3069 ;; This function calls:
  3070 ;;		_eeprom_write
  3071 ;; This function is called by:
  3072 ;;		_IncreaseMemoryAdress
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           
  3077                           ;psect for function _WriteMemoryAdress
  3078  1622                     _WriteMemoryAdress:	
  3079                           
  3080                           ;incstack = 0
  3081                           ; Regs used in _WriteMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  3082                           ;WriteMemoryAdress@var3 stored from wreg
  3083  1622  1283               	bcf	3,5	;RP0=0, select bank0
  3084  1623  1303               	bcf	3,6	;RP1=0, select bank0
  3085  1624  00A6               	movwf	WriteMemoryAdress@var3
  3086                           
  3087                           ;functions.c: 1025: eeprom_write(1, var3);
  3088  1625  0826               	movf	WriteMemoryAdress@var3,w
  3089  1626  00A5               	movwf	??_WriteMemoryAdress
  3090  1627  0825               	movf	??_WriteMemoryAdress,w
  3091  1628  00A0               	movwf	eeprom_write@value
  3092  1629  3001               	movlw	1
  3093  162A  160A  118A  271C  160A  118A  	fcall	_eeprom_write
  3094                           
  3095                           ;functions.c: 1026: eeprom_write(2, var2);
  3096  162F  1283               	bcf	3,5	;RP0=0, select bank0
  3097  1630  1303               	bcf	3,6	;RP1=0, select bank0
  3098  1631  0823               	movf	WriteMemoryAdress@var2,w
  3099  1632  00A5               	movwf	??_WriteMemoryAdress
  3100  1633  0825               	movf	??_WriteMemoryAdress,w
  3101  1634  00A0               	movwf	eeprom_write@value
  3102  1635  3002               	movlw	2
  3103  1636  160A  118A  271C  160A  118A  	fcall	_eeprom_write
  3104                           
  3105                           ;functions.c: 1027: eeprom_write(3, var1);
  3106  163B  1283               	bcf	3,5	;RP0=0, select bank0
  3107  163C  1303               	bcf	3,6	;RP1=0, select bank0
  3108  163D  0824               	movf	WriteMemoryAdress@var1,w
  3109  163E  00A5               	movwf	??_WriteMemoryAdress
  3110  163F  0825               	movf	??_WriteMemoryAdress,w
  3111  1640  00A0               	movwf	eeprom_write@value
  3112  1641  3003               	movlw	3
  3113  1642  160A  118A  271C   	fcall	_eeprom_write
  3114  1645  0008               	return
  3115  1646                     __end_of_WriteMemoryAdress:	
  3116                           
  3117                           	psect	text6
  3118  08EF                     __ptext6:	
  3119 ;; *************** function _TransiverToReceive *****************
  3120 ;; Defined at:
  3121 ;;		line 16 in file "functions.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3135 ;;      Params:         0       0       0       0       0
  3136 ;;      Locals:         0       0       0       0       0
  3137 ;;      Temps:          0       2       0       0       0
  3138 ;;      Totals:         0       2       0       0       0
  3139 ;;Total ram usage:        2 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    7
  3142 ;; This function calls:
  3143 ;;		_FindChannel
  3144 ;;		_RegisterRead
  3145 ;;		_RegisterSet
  3146 ;;		_SetRFMode
  3147 ;;		_timerFunction
  3148 ;; This function is called by:
  3149 ;;		_main
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           
  3154                           ;psect for function _TransiverToReceive
  3155  08EF                     _TransiverToReceive:	
  3156                           
  3157                           ;functions.c: 18: timerFunction(2, 5);
  3158                           
  3159                           ;incstack = 0
  3160                           ; Regs used in _TransiverToReceive: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3161  08EF  3002               	movlw	2
  3162  08F0  1283               	bcf	3,5	;RP0=0, select bank0
  3163  08F1  1303               	bcf	3,6	;RP1=0, select bank0
  3164  08F2  00A0               	movwf	timerFunction@intTimerNumber
  3165  08F3  3000               	movlw	0
  3166  08F4  00A1               	movwf	timerFunction@intTimerNumber+1
  3167  08F5  3005               	movlw	5
  3168  08F6  00A2               	movwf	timerFunction@intSetSeconds
  3169  08F7  3000               	movlw	0
  3170  08F8  00A3               	movwf	timerFunction@intSetSeconds+1
  3171  08F9  160A  118A  2504  120A  158A  	fcall	_timerFunction
  3172                           
  3173                           ;functions.c: 22: SetRFMode(0x20);
  3174  08FE  3020               	movlw	32
  3175  08FF  120A  158A  221C  120A  158A  	fcall	_SetRFMode
  3176                           
  3177                           ;functions.c: 23: _delay((unsigned long)((10)*(4000000/4000.0)));
  3178  0904  300D               	movlw	13
  3179  0905  1283               	bcf	3,5	;RP0=0, select bank0
  3180  0906  1303               	bcf	3,6	;RP1=0, select bank0
  3181  0907  00B6               	movwf	??_TransiverToReceive+1
  3182  0908  30FB               	movlw	251
  3183  0909  00B5               	movwf	??_TransiverToReceive
  3184  090A                     u2857:	
  3185  090A  0BB5               	decfsz	??_TransiverToReceive,f
  3186  090B  290A               	goto	u2857
  3187  090C  0BB6               	decfsz	??_TransiverToReceive+1,f
  3188  090D  290A               	goto	u2857
  3189                           
  3190                           ;functions.c: 24: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  3191  090E  300E               	movlw	14
  3192  090F  160A  118A  259D  120A  158A  	fcall	_RegisterRead
  3193  0914  3802               	iorlw	2
  3194  0915  1283               	bcf	3,5	;RP0=0, select bank0
  3195  0916  1303               	bcf	3,6	;RP1=0, select bank0
  3196  0917  00B5               	movwf	??_TransiverToReceive
  3197  0918  0835               	movf	??_TransiverToReceive,w
  3198  0919  00A7               	movwf	RegisterSet@value
  3199  091A  300E               	movlw	14
  3200  091B  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  3201                           
  3202                           ;functions.c: 25: SetRFMode(0x40);
  3203  0920  3040               	movlw	64
  3204  0921  120A  158A  221C  120A  158A  	fcall	_SetRFMode
  3205  0926                     l3196:	
  3206                           ;functions.c: 26: while((RegisterRead(0x0E) & 0b00000010) == 0)
  3207                           
  3208  0926  300E               	movlw	14
  3209  0927  160A  118A  259D  120A  158A  	fcall	_RegisterRead
  3210  092C  3902               	andlw	2
  3211  092D  1D03               	btfss	3,2
  3212  092E  2939               	goto	l3198
  3213                           
  3214                           ;functions.c: 27: {
  3215                           ;functions.c: 28: if(bTimerComplete[2])
  3216  092F  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0930  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0931  085A               	movf	_bTimerComplete+2,w
  3219  0932  1903               	btfsc	3,2
  3220  0933  2926               	goto	l3196
  3221                           
  3222                           ;functions.c: 29: {
  3223                           ;functions.c: 30: FindChannel();
  3224  0934  120A  158A  2708  120A  158A  	fcall	_FindChannel
  3225  0939                     l3198:	
  3226                           ;functions.c: 31: break;
  3227                           
  3228                           
  3229                           ;functions.c: 32: }
  3230                           ;functions.c: 33: }
  3231                           ;functions.c: 35: SetRFMode(0x60);
  3232  0939  3060               	movlw	96
  3233  093A  120A  158A  221C  120A  158A  	fcall	_SetRFMode
  3234                           
  3235                           ;functions.c: 36: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3236  093F  30A5               	movlw	165
  3237  0940  1283               	bcf	3,5	;RP0=0, select bank0
  3238  0941  1303               	bcf	3,6	;RP1=0, select bank0
  3239  0942  00B5               	movwf	??_TransiverToReceive
  3240  0943                     u2867:	
  3241  0943  0BB5               	decfsz	??_TransiverToReceive,f
  3242  0944  2943               	goto	u2867
  3243  0945  2946               	nop2
  3244                           
  3245                           ;functions.c: 37: bTransiverModeReceive = 1;
  3246  0946  1283               	bcf	3,5	;RP0=0, select bank0
  3247  0947  1303               	bcf	3,6	;RP1=0, select bank0
  3248  0948  01EC               	clrf	_bTransiverModeReceive
  3249  0949  0AEC               	incf	_bTransiverModeReceive,f
  3250  094A  0008               	return
  3251  094B                     __end_of_TransiverToReceive:	
  3252                           
  3253                           	psect	text7
  3254  09AF                     __ptext7:	
  3255 ;; *************** function _TransiverReadFIFO *****************
  3256 ;; Defined at:
  3257 ;;		line 42 in file "functions.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;		None
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  j               2   32[BANK1 ] int 
  3262 ;;  ReceivedStri   30    0[BANK1 ] unsigned char [30]
  3263 ;;  i               2   30[BANK1 ] int 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3273 ;;      Params:         0       0       0       0       0
  3274 ;;      Locals:         0       0      34       0       0
  3275 ;;      Temps:          0       2       0       0       0
  3276 ;;      Totals:         0       2      34       0       0
  3277 ;;Total ram usage:       36 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:   10
  3280 ;; This function calls:
  3281 ;;		_ReadFIFO
  3282 ;;		_ReceivedPacketHandler
  3283 ;;		_SetRFMode
  3284 ;;		_timerFunction
  3285 ;; This function is called by:
  3286 ;;		_main
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           
  3291                           ;psect for function _TransiverReadFIFO
  3292  09AF                     _TransiverReadFIFO:	
  3293                           
  3294                           ;functions.c: 44: unsigned char ReceivedString[30];
  3295                           ;functions.c: 45: timerFunction(3, 5);
  3296                           
  3297                           ;incstack = 0
  3298 ;; hardware stack exceeded
  3299                           ; Regs used in _TransiverReadFIFO: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3300  09AF  3003               	movlw	3
  3301  09B0  1283               	bcf	3,5	;RP0=0, select bank0
  3302  09B1  1303               	bcf	3,6	;RP1=0, select bank0
  3303  09B2  00A0               	movwf	timerFunction@intTimerNumber
  3304  09B3  3000               	movlw	0
  3305  09B4  00A1               	movwf	timerFunction@intTimerNumber+1
  3306  09B5  3005               	movlw	5
  3307  09B6  00A2               	movwf	timerFunction@intSetSeconds
  3308  09B7  3000               	movlw	0
  3309  09B8  00A3               	movwf	timerFunction@intSetSeconds+1
  3310  09B9  160A  118A  2504  120A  158A  	fcall	_timerFunction
  3311                           
  3312                           ;functions.c: 47: SetRFMode(0x20);
  3313  09BE  3020               	movlw	32
  3314  09BF  120A  158A  221C  120A  158A  	fcall	_SetRFMode
  3315                           
  3316                           ;functions.c: 48: bTransiverModeReceive = 0;
  3317  09C4  1283               	bcf	3,5	;RP0=0, select bank0
  3318  09C5  1303               	bcf	3,6	;RP1=0, select bank0
  3319  09C6  01EC               	clrf	_bTransiverModeReceive
  3320                           
  3321                           ;functions.c: 49: int i = 0;
  3322  09C7  1683               	bsf	3,5	;RP0=1, select bank1
  3323  09C8  1303               	bcf	3,6	;RP1=0, select bank1
  3324  09C9  01BE               	clrf	TransiverReadFIFO@i^(0+128)
  3325  09CA  01BF               	clrf	(TransiverReadFIFO@i+1)^(0+128)
  3326                           
  3327                           ;functions.c: 50: for (int j = 0; j < 30; ++j)
  3328  09CB  01C0               	clrf	TransiverReadFIFO@j^(0+128)
  3329  09CC  01C1               	clrf	(TransiverReadFIFO@j+1)^(0+128)
  3330  09CD                     L1:	
  3331  09CD  0841               	movf	(TransiverReadFIFO@j+1)^(0+128),w
  3332  09CE  3A80               	xorlw	128
  3333  09CF  00FF               	movwf	127
  3334  09D0  3080               	movlw	128
  3335  09D1  027F               	subwf	127,w
  3336  09D2  1D03               	skipz
  3337  09D3  29D6               	goto	u2495
  3338  09D4  301E               	movlw	30
  3339  09D5  0240               	subwf	TransiverReadFIFO@j^(0+128),w
  3340  09D6                     u2495:	
  3341  09D6  1803               	btfsc	3,0
  3342  09D7  2A00               	goto	l3226
  3343                           
  3344                           ;functions.c: 51: {
  3345                           ;functions.c: 52: ReceivedString[j] = 0;
  3346  09D8  1683               	bsf	3,5	;RP0=1, select bank1
  3347  09D9  1303               	bcf	3,6	;RP1=0, select bank1
  3348  09DA  0840               	movf	TransiverReadFIFO@j^(0+128),w
  3349  09DB  3EA0               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3350  09DC  0084               	movwf	4
  3351  09DD  1383               	bcf	3,7	;select IRP bank1
  3352  09DE  0180               	clrf	0
  3353  09DF  3001               	movlw	1
  3354  09E0  07C0               	addwf	TransiverReadFIFO@j^(0+128),f
  3355  09E1  1803               	skipnc
  3356  09E2  0AC1               	incf	(TransiverReadFIFO@j+1)^(0+128),f
  3357  09E3  3000               	movlw	0
  3358  09E4  07C1               	addwf	(TransiverReadFIFO@j+1)^(0+128),f
  3359  09E5  29CD               	goto	L1
  3360  09E6                     l3222:	
  3361                           ;functions.c: 53: }
  3362                           ;functions.c: 54: while((RB3)&&(!bTimerComplete[3]))
  3363                           
  3364                           
  3365                           ;functions.c: 55: {
  3366                           ;functions.c: 56: ReceivedString[i] = ReadFIFO();
  3367  09E6  160A  118A  24E6  120A  158A  	fcall	_ReadFIFO
  3368  09EB  1283               	bcf	3,5	;RP0=0, select bank0
  3369  09EC  1303               	bcf	3,6	;RP1=0, select bank0
  3370  09ED  00D1               	movwf	??_TransiverReadFIFO
  3371  09EE  1683               	bsf	3,5	;RP0=1, select bank1
  3372  09EF  1303               	bcf	3,6	;RP1=0, select bank1
  3373  09F0  083E               	movf	TransiverReadFIFO@i^(0+128),w
  3374  09F1  3EA0               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3375  09F2  0084               	movwf	4
  3376  09F3  1283               	bcf	3,5	;RP0=0, select bank0
  3377  09F4  1303               	bcf	3,6	;RP1=0, select bank0
  3378  09F5  0851               	movf	??_TransiverReadFIFO,w
  3379  09F6  1383               	bcf	3,7	;select IRP bank1
  3380  09F7  0080               	movwf	0
  3381                           
  3382                           ;functions.c: 57: i++;
  3383  09F8  3001               	movlw	1
  3384  09F9  1683               	bsf	3,5	;RP0=1, select bank1
  3385  09FA  1303               	bcf	3,6	;RP1=0, select bank1
  3386  09FB  07BE               	addwf	TransiverReadFIFO@i^(0+128),f
  3387  09FC  1803               	skipnc
  3388  09FD  0ABF               	incf	(TransiverReadFIFO@i+1)^(0+128),f
  3389  09FE  3000               	movlw	0
  3390  09FF  07BF               	addwf	(TransiverReadFIFO@i+1)^(0+128),f
  3391  0A00                     l3226:	
  3392  0A00  1283               	bcf	3,5	;RP0=0, select bank0
  3393  0A01  1303               	bcf	3,6	;RP1=0, select bank0
  3394  0A02  1D86               	btfss	6,3	;volatile
  3395  0A03  2A07               	goto	l3230
  3396  0A04  085B               	movf	_bTimerComplete+3,w
  3397  0A05  1903               	btfsc	3,2
  3398  0A06  29E6               	goto	l3222
  3399  0A07                     l3230:	
  3400                           
  3401                           ;functions.c: 58: }
  3402                           ;functions.c: 60: _delay((unsigned long)((10)*(4000000/4000.0)));
  3403  0A07  300D               	movlw	13
  3404  0A08  1283               	bcf	3,5	;RP0=0, select bank0
  3405  0A09  1303               	bcf	3,6	;RP1=0, select bank0
  3406  0A0A  00D2               	movwf	??_TransiverReadFIFO+1
  3407  0A0B  30FB               	movlw	251
  3408  0A0C  00D1               	movwf	??_TransiverReadFIFO
  3409  0A0D                     u2877:	
  3410  0A0D  0BD1               	decfsz	??_TransiverReadFIFO,f
  3411  0A0E  2A0D               	goto	u2877
  3412  0A0F  0BD2               	decfsz	??_TransiverReadFIFO+1,f
  3413  0A10  2A0D               	goto	u2877
  3414                           
  3415                           ;functions.c: 61: SetRFMode(0x00);
  3416  0A11  3000               	movlw	0
  3417  0A12  120A  158A  221C  120A  158A  	fcall	_SetRFMode
  3418                           
  3419                           ;functions.c: 63: ReceivedPacketHandler(ReceivedString);
  3420  0A17  30A0               	movlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3421  0A18  120A  118A  2290   	fcall	_ReceivedPacketHandler
  3422  0A1B  0008               	return
  3423  0A1C                     __end_of_TransiverReadFIFO:	
  3424                           
  3425                           	psect	text8
  3426  0290                     __ptext8:	
  3427 ;; *************** function _ReceivedPacketHandler *****************
  3428 ;; Defined at:
  3429 ;;		line 73 in file "functions.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;  Data            1    wreg     PTR unsigned char 
  3432 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  Data            1   48[BANK0 ] PTR unsigned char 
  3435 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3445 ;;      Params:         0       0       0       0       0
  3446 ;;      Locals:         0       1       0       0       0
  3447 ;;      Temps:          0       1       0       0       0
  3448 ;;      Totals:         0       2       0       0       0
  3449 ;;Total ram usage:        2 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    9
  3452 ;; This function calls:
  3453 ;;		_AnalogValue
  3454 ;;		_DarknessCheck
  3455 ;;		_DelayDs
  3456 ;;		_OperationMode
  3457 ;;		_ResetMemoryAdress
  3458 ;;		_SendMemoryData
  3459 ;;		_TransmittPacket
  3460 ;;		_eeprom_read
  3461 ;;		_eeprom_write
  3462 ;;		_ram_bulk_erase
  3463 ;;		_read_ram_status
  3464 ;;		_strstr
  3465 ;;		_write_ram_status
  3466 ;; This function is called by:
  3467 ;;		_TransiverReadFIFO
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           
  3472                           ;psect for function _ReceivedPacketHandler
  3473  0290                     _ReceivedPacketHandler:	
  3474                           
  3475                           ;incstack = 0
  3476 ;; hardware stack exceeded
  3477                           ; Regs used in _ReceivedPacketHandler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  3478                           ;ReceivedPacketHandler@Data stored from wreg
  3479  0290  1283               	bcf	3,5	;RP0=0, select bank0
  3480  0291  1303               	bcf	3,6	;RP1=0, select bank0
  3481  0292  00D0               	movwf	ReceivedPacketHandler@Data
  3482                           
  3483                           ;functions.c: 77: if((strstr(Data, "N1BLINK")) && (OperationMode() == 6))
  3484  0293  3028               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3485  0294  00CF               	movwf	??_ReceivedPacketHandler
  3486  0295  084F               	movf	??_ReceivedPacketHandler,w
  3487  0296  00AE               	movwf	strstr@s2
  3488  0297  0850               	movf	ReceivedPacketHandler@Data,w
  3489  0298  120A  158A  205B  120A  118A  	fcall	_strstr
  3490  029D  3A00               	xorlw	0
  3491  029E  1903               	skipnz
  3492  029F  2AA8               	goto	l2786
  3493  02A0  160A  118A  24B6  120A  118A  	fcall	_OperationMode
  3494  02A5  3A06               	xorlw	6
  3495  02A6  1903               	btfsc	3,2
  3496  02A7  2ABF               	goto	l2790
  3497  02A8                     l2786:	
  3498                           ;functions.c: 82: }
  3499                           
  3500                           ;functions.c: 81: DelayDs(100);
  3501                           
  3502                           ;functions.c: 80: intBlinkCounter = 0;
  3503                           
  3504                           ;functions.c: 78: {
  3505                           ;functions.c: 79: intBlinkCycle = 1;
  3506                           
  3507                           
  3508                           ;functions.c: 83: else if((strstr(Data, "N2BLINK")) && (OperationMode() == 7))
  3509  02A8  3030               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3510  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  3511  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  3512  02AB  00CF               	movwf	??_ReceivedPacketHandler
  3513  02AC  084F               	movf	??_ReceivedPacketHandler,w
  3514  02AD  00AE               	movwf	strstr@s2
  3515  02AE  0850               	movf	ReceivedPacketHandler@Data,w
  3516  02AF  120A  158A  205B  120A  118A  	fcall	_strstr
  3517  02B4  3A00               	xorlw	0
  3518  02B5  1903               	skipnz
  3519  02B6  2AD0               	goto	l2796
  3520  02B7  160A  118A  24B6  120A  118A  	fcall	_OperationMode
  3521  02BC  3A07               	xorlw	7
  3522  02BD  1D03               	skipz
  3523  02BE  2AD0               	goto	l2796
  3524  02BF                     l2790:	
  3525                           
  3526                           ;functions.c: 84: {
  3527                           ;functions.c: 85: intBlinkCycle = 1;
  3528  02BF  3001               	movlw	1
  3529  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3530  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3531  02C2  00DF               	movwf	_intBlinkCycle
  3532  02C3  3000               	movlw	0
  3533  02C4  00E0               	movwf	_intBlinkCycle+1
  3534                           
  3535                           ;functions.c: 86: intBlinkCounter = 0;
  3536  02C5  01FC               	clrf	_intBlinkCounter
  3537  02C6  01FD               	clrf	_intBlinkCounter+1
  3538                           
  3539                           ;functions.c: 87: DelayDs(100);
  3540  02C7  3064               	movlw	100
  3541  02C8  00A0               	movwf	DelayDs@cnt
  3542  02C9  3000               	movlw	0
  3543  02CA  00A1               	movwf	DelayDs@cnt+1
  3544  02CB  160A  118A  25DB  120A  118A  	fcall	_DelayDs
  3545  02D0                     l2796:	
  3546                           
  3547                           ;functions.c: 88: }
  3548                           ;functions.c: 92: if(Data[0] != 44 || Data[3] != 55)
  3549  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3550  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3551  02D2  0850               	movf	ReceivedPacketHandler@Data,w
  3552  02D3  0084               	movwf	4
  3553  02D4  302C               	movlw	44
  3554  02D5  1383               	bcf	3,7	;select IRP bank0
  3555  02D6  0600               	xorwf	0,w
  3556  02D7  1D03               	btfss	3,2
  3557  02D8  0008               	return
  3558  02D9  0850               	movf	ReceivedPacketHandler@Data,w
  3559  02DA  3E03               	addlw	3
  3560  02DB  0084               	movwf	4
  3561  02DC  3037               	movlw	55
  3562  02DD  0600               	xorwf	0,w
  3563  02DE  1D03               	btfss	3,2
  3564  02DF  0008               	return
  3565  02E0  2C8D               	goto	l2910
  3566  02E1                     l306:	
  3567                           ;functions.c: 99: {
  3568                           ;functions.c: 100: case 1:
  3569                           
  3570                           ;functions.c: 98: switch (Data[2])
  3571                           
  3572                           ;functions.c: 96: {
  3573                           ;functions.c: 97: case 1:
  3574                           
  3575                           ;functions.c: 95: switch (Data[1])
  3576                           
  3577                           ;functions.c: 93: return;
  3578                           
  3579                           
  3580                           ;functions.c: 101: RC2 = 1;
  3581  02E1  1507               	bsf	7,2	;volatile
  3582                           
  3583                           ;functions.c: 102: DelayDs(10);
  3584  02E2  300A               	movlw	10
  3585  02E3  00A0               	movwf	DelayDs@cnt
  3586  02E4  3000               	movlw	0
  3587  02E5  00A1               	movwf	DelayDs@cnt+1
  3588  02E6  160A  118A  25DB  120A  118A  	fcall	_DelayDs
  3589                           
  3590                           ;functions.c: 103: RC2 = 0;
  3591  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  3592  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  3593  02ED  1107               	bcf	7,2	;volatile
  3594                           
  3595                           ;functions.c: 104: DelayDs(5);
  3596  02EE  3005               	movlw	5
  3597  02EF  00A0               	movwf	DelayDs@cnt
  3598  02F0  3000               	movlw	0
  3599  02F1  00A1               	movwf	DelayDs@cnt+1
  3600  02F2  160A  118A  25DB   	fcall	_DelayDs
  3601                           
  3602                           ;functions.c: 105: break;
  3603  02F5  0008               	return
  3604  02F6                     l308:	
  3605                           ;functions.c: 107: case 2:
  3606                           
  3607                           
  3608                           ;functions.c: 108: RC1 = 1;
  3609  02F6  1487               	bsf	7,1	;volatile
  3610                           
  3611                           ;functions.c: 109: DelayDs(10);
  3612  02F7  300A               	movlw	10
  3613  02F8  00A0               	movwf	DelayDs@cnt
  3614  02F9  3000               	movlw	0
  3615  02FA  00A1               	movwf	DelayDs@cnt+1
  3616  02FB  160A  118A  25DB  120A  118A  	fcall	_DelayDs
  3617                           
  3618                           ;functions.c: 110: RC1 = 0;
  3619  0300  1283               	bcf	3,5	;RP0=0, select bank0
  3620  0301  1303               	bcf	3,6	;RP1=0, select bank0
  3621  0302  1087               	bcf	7,1	;volatile
  3622                           
  3623                           ;functions.c: 111: DelayDs(5);
  3624  0303  3005               	movlw	5
  3625  0304  00A0               	movwf	DelayDs@cnt
  3626  0305  3000               	movlw	0
  3627  0306  00A1               	movwf	DelayDs@cnt+1
  3628  0307  160A  118A  25DB   	fcall	_DelayDs
  3629                           
  3630                           ;functions.c: 112: break;
  3631  030A  0008               	return
  3632  030B                     l309:	
  3633                           ;functions.c: 114: case 3:
  3634                           
  3635                           
  3636                           ;functions.c: 115: RB1 = 0;
  3637  030B  1086               	bcf	6,1	;volatile
  3638                           
  3639                           ;functions.c: 116: DelayDs(10);
  3640  030C  300A               	movlw	10
  3641  030D  00A0               	movwf	DelayDs@cnt
  3642  030E  3000               	movlw	0
  3643  030F  00A1               	movwf	DelayDs@cnt+1
  3644  0310  160A  118A  25DB  120A  118A  	fcall	_DelayDs
  3645                           
  3646                           ;functions.c: 117: RB1 = 1;
  3647  0315  1283               	bcf	3,5	;RP0=0, select bank0
  3648  0316  1303               	bcf	3,6	;RP1=0, select bank0
  3649  0317  1486               	bsf	6,1	;volatile
  3650                           
  3651                           ;functions.c: 118: DelayDs(5);
  3652  0318  3005               	movlw	5
  3653  0319  00A0               	movwf	DelayDs@cnt
  3654  031A  3000               	movlw	0
  3655  031B  00A1               	movwf	DelayDs@cnt+1
  3656  031C  160A  118A  25DB   	fcall	_DelayDs
  3657                           
  3658                           ;functions.c: 124: }
  3659                           
  3660                           ;functions.c: 122: break;
  3661                           
  3662                           ;functions.c: 121: default:
  3663                           
  3664                           ;functions.c: 119: break;
  3665  031F  0008               	return
  3666  0320                     l2814:	
  3667  0320  1283               	bcf	3,5	;RP0=0, select bank0
  3668  0321  1303               	bcf	3,6	;RP1=0, select bank0
  3669  0322  0850               	movf	ReceivedPacketHandler@Data,w
  3670  0323  3E02               	addlw	2
  3671  0324  0084               	movwf	4
  3672  0325  1383               	bcf	3,7	;select IRP bank0
  3673  0326  0800               	movf	0,w
  3674                           
  3675                           ; Switch size 1, requested type "space"
  3676                           ; Number of cases is 3, Range of values is 1 to 3
  3677                           ; switch strategies available:
  3678                           ; Name         Instructions Cycles
  3679                           ; simple_byte           10     6 (average)
  3680                           ; direct_byte           20    11 (fixed)
  3681                           ; jumptable            263     9 (fixed)
  3682                           ;	Chosen strategy is simple_byte
  3683  0327  3A01               	xorlw	1	; case 1
  3684  0328  1903               	skipnz
  3685  0329  2AE1               	goto	l306
  3686  032A  3A03               	xorlw	3	; case 2
  3687  032B  1903               	skipnz
  3688  032C  2AF6               	goto	l308
  3689  032D  3A01               	xorlw	1	; case 3
  3690  032E  1903               	skipnz
  3691  032F  2B0B               	goto	l309
  3692  0330  2CAF               	goto	l302
  3693                           
  3694                           ;functions.c: 125: break;
  3695  0331  0008               	return
  3696  0332                     l2816:	
  3697                           ;functions.c: 126: case 2:
  3698                           
  3699                           
  3700                           ;functions.c: 127: if(Data[2] == 1 && OperationMode() == 6)
  3701  0332  0850               	movf	ReceivedPacketHandler@Data,w
  3702  0333  3E02               	addlw	2
  3703  0334  0084               	movwf	4
  3704  0335  0300               	decf	0,w
  3705  0336  1D03               	btfss	3,2
  3706  0337  2B5D               	goto	l2828
  3707  0338  160A  118A  24B6  120A  118A  	fcall	_OperationMode
  3708  033D  3A06               	xorlw	6
  3709  033E  1D03               	skipz
  3710  033F  2B5D               	goto	l2828
  3711                           
  3712                           ;functions.c: 128: {
  3713                           ;functions.c: 129: intBlinkCycle = 1;
  3714  0340  3001               	movlw	1
  3715  0341  1283               	bcf	3,5	;RP0=0, select bank0
  3716  0342  1303               	bcf	3,6	;RP1=0, select bank0
  3717  0343  00DF               	movwf	_intBlinkCycle
  3718  0344  3000               	movlw	0
  3719  0345  00E0               	movwf	_intBlinkCycle+1
  3720                           
  3721                           ;functions.c: 130: intBlinkCounter = 0;
  3722  0346  01FC               	clrf	_intBlinkCounter
  3723  0347  01FD               	clrf	_intBlinkCounter+1
  3724                           
  3725                           ;functions.c: 131: DelayDs(100);
  3726  0348  3064               	movlw	100
  3727  0349  00A0               	movwf	DelayDs@cnt
  3728  034A  3000               	movlw	0
  3729  034B  00A1               	movwf	DelayDs@cnt+1
  3730  034C  160A  118A  25DB  120A  118A  	fcall	_DelayDs
  3731                           
  3732                           ;functions.c: 132: TransmittPacket(2, 10);
  3733  0351  300A               	movlw	10
  3734  0352  1283               	bcf	3,5	;RP0=0, select bank0
  3735  0353  1303               	bcf	3,6	;RP1=0, select bank0
  3736  0354  00CF               	movwf	??_ReceivedPacketHandler
  3737  0355  084F               	movf	??_ReceivedPacketHandler,w
  3738  0356  00B5               	movwf	TransmittPacket@value
  3739  0357  3002               	movlw	2
  3740  0358  120A  158A  23A1  120A  118A  	fcall	_TransmittPacket
  3741  035D                     l2828:	
  3742                           
  3743                           ;functions.c: 133: }
  3744                           ;functions.c: 134: if(Data[2] == 2 && OperationMode() == 7)
  3745  035D  1283               	bcf	3,5	;RP0=0, select bank0
  3746  035E  1303               	bcf	3,6	;RP1=0, select bank0
  3747  035F  0850               	movf	ReceivedPacketHandler@Data,w
  3748  0360  3E02               	addlw	2
  3749  0361  0084               	movwf	4
  3750  0362  3002               	movlw	2
  3751  0363  1383               	bcf	3,7	;select IRP bank0
  3752  0364  0600               	xorwf	0,w
  3753  0365  1D03               	btfss	3,2
  3754  0366  2B8C               	goto	l2840
  3755  0367  160A  118A  24B6  120A  118A  	fcall	_OperationMode
  3756  036C  3A07               	xorlw	7
  3757  036D  1D03               	skipz
  3758  036E  2B8C               	goto	l2840
  3759                           
  3760                           ;functions.c: 135: {
  3761                           ;functions.c: 136: intBlinkCycle = 1;
  3762  036F  3001               	movlw	1
  3763  0370  1283               	bcf	3,5	;RP0=0, select bank0
  3764  0371  1303               	bcf	3,6	;RP1=0, select bank0
  3765  0372  00DF               	movwf	_intBlinkCycle
  3766  0373  3000               	movlw	0
  3767  0374  00E0               	movwf	_intBlinkCycle+1
  3768                           
  3769                           ;functions.c: 137: intBlinkCounter = 0;
  3770  0375  01FC               	clrf	_intBlinkCounter
  3771  0376  01FD               	clrf	_intBlinkCounter+1
  3772                           
  3773                           ;functions.c: 138: DelayDs(100);
  3774  0377  3064               	movlw	100
  3775  0378  00A0               	movwf	DelayDs@cnt
  3776  0379  3000               	movlw	0
  3777  037A  00A1               	movwf	DelayDs@cnt+1
  3778  037B  160A  118A  25DB  120A  118A  	fcall	_DelayDs
  3779                           
  3780                           ;functions.c: 139: TransmittPacket(2, 10);
  3781  0380  300A               	movlw	10
  3782  0381  1283               	bcf	3,5	;RP0=0, select bank0
  3783  0382  1303               	bcf	3,6	;RP1=0, select bank0
  3784  0383  00CF               	movwf	??_ReceivedPacketHandler
  3785  0384  084F               	movf	??_ReceivedPacketHandler,w
  3786  0385  00B5               	movwf	TransmittPacket@value
  3787  0386  3002               	movlw	2
  3788  0387  120A  158A  23A1  120A  118A  	fcall	_TransmittPacket
  3789  038C                     l2840:	
  3790                           
  3791                           ;functions.c: 140: }
  3792                           ;functions.c: 141: if(Data[2] == 10 && (OperationMode() == 4 || OperationMode() == 5))
  3793  038C  1283               	bcf	3,5	;RP0=0, select bank0
  3794  038D  1303               	bcf	3,6	;RP1=0, select bank0
  3795  038E  0850               	movf	ReceivedPacketHandler@Data,w
  3796  038F  3E02               	addlw	2
  3797  0390  0084               	movwf	4
  3798  0391  300A               	movlw	10
  3799  0392  1383               	bcf	3,7	;select IRP bank0
  3800  0393  0600               	xorwf	0,w
  3801  0394  1D03               	btfss	3,2
  3802  0395  0008               	return
  3803  0396  160A  118A  24B6  120A  118A  	fcall	_OperationMode
  3804  039B  3A04               	xorlw	4
  3805  039C  1903               	skipnz
  3806  039D  2BA6               	goto	l2846
  3807  039E  160A  118A  24B6  120A  118A  	fcall	_OperationMode
  3808  03A3  3A05               	xorlw	5
  3809  03A4  1D03               	skipz
  3810  03A5  0008               	return
  3811  03A6                     l2846:	
  3812                           
  3813                           ;functions.c: 142: {
  3814                           ;functions.c: 143: intBlinkCycle = 1;
  3815  03A6  3001               	movlw	1
  3816  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  3817  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  3818  03A9  00DF               	movwf	_intBlinkCycle
  3819  03AA  3000               	movlw	0
  3820  03AB  00E0               	movwf	_intBlinkCycle+1
  3821                           
  3822                           ;functions.c: 144: intBlinkCounter = 0;
  3823  03AC  01FC               	clrf	_intBlinkCounter
  3824  03AD  01FD               	clrf	_intBlinkCounter+1
  3825                           
  3826                           ;functions.c: 145: DelayDs(100);
  3827  03AE  3064               	movlw	100
  3828  03AF  00A0               	movwf	DelayDs@cnt
  3829  03B0  3000               	movlw	0
  3830  03B1  00A1               	movwf	DelayDs@cnt+1
  3831  03B2  160A  118A  25DB   	fcall	_DelayDs
  3832                           
  3833                           ;functions.c: 147: }
  3834                           ;functions.c: 148: break;
  3835  03B5  0008               	return
  3836  03B6                     l2852:	
  3837                           ;functions.c: 150: case 3:
  3838                           
  3839                           
  3840                           ;functions.c: 151: if(Data[2] != 0)
  3841  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  3842  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  3843  03B8  0850               	movf	ReceivedPacketHandler@Data,w
  3844  03B9  3E02               	addlw	2
  3845  03BA  0084               	movwf	4
  3846  03BB  1383               	bcf	3,7	;select IRP bank0
  3847  03BC  0800               	movf	0,w
  3848  03BD  1D03               	btfss	3,2
  3849  03BE  0008               	return
  3850                           
  3851                           ;functions.c: 153: TransmittPacket(3, AnalogValue(0));
  3852                           
  3853                           ;functions.c: 152: break;
  3854  03BF  3000               	movlw	0
  3855  03C0  160A  118A  266D  120A  118A  	fcall	_AnalogValue
  3856  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  3857  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  3858  03C7  00CF               	movwf	??_ReceivedPacketHandler
  3859  03C8  084F               	movf	??_ReceivedPacketHandler,w
  3860  03C9  00B5               	movwf	TransmittPacket@value
  3861  03CA  3003               	movlw	3
  3862  03CB  120A  158A  23A1   	fcall	_TransmittPacket
  3863                           
  3864                           ;functions.c: 154: break;
  3865  03CE  0008               	return
  3866  03CF                     l2858:	
  3867                           ;functions.c: 156: case 4:
  3868                           
  3869                           
  3870                           ;functions.c: 157: if(Data[2] != 0)
  3871  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  3872  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  3873  03D1  0850               	movf	ReceivedPacketHandler@Data,w
  3874  03D2  3E02               	addlw	2
  3875  03D3  0084               	movwf	4
  3876  03D4  1383               	bcf	3,7	;select IRP bank0
  3877  03D5  0800               	movf	0,w
  3878  03D6  1D03               	btfss	3,2
  3879  03D7  0008               	return
  3880                           
  3881                           ;functions.c: 159: TransmittPacket(4, AnalogValue(3));
  3882                           
  3883                           ;functions.c: 158: break;
  3884  03D8  3003               	movlw	3
  3885  03D9  160A  118A  266D  120A  118A  	fcall	_AnalogValue
  3886  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  3887  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  3888  03E0  00CF               	movwf	??_ReceivedPacketHandler
  3889  03E1  084F               	movf	??_ReceivedPacketHandler,w
  3890  03E2  00B5               	movwf	TransmittPacket@value
  3891  03E3  3004               	movlw	4
  3892  03E4  120A  158A  23A1   	fcall	_TransmittPacket
  3893                           
  3894                           ;functions.c: 160: break;
  3895  03E7  0008               	return
  3896  03E8                     l2864:	
  3897                           ;functions.c: 162: case 5:
  3898                           
  3899                           
  3900                           ;functions.c: 163: if(Data[2] != 0)
  3901  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  3902  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  3903  03EA  0850               	movf	ReceivedPacketHandler@Data,w
  3904  03EB  3E02               	addlw	2
  3905  03EC  0084               	movwf	4
  3906  03ED  1383               	bcf	3,7	;select IRP bank0
  3907  03EE  0800               	movf	0,w
  3908  03EF  1903               	btfsc	3,2
  3909  03F0  2BFD               	goto	l2868
  3910                           
  3911                           ;functions.c: 164: {
  3912                           ;functions.c: 165: eeprom_write(0, Data[2]);
  3913  03F1  0850               	movf	ReceivedPacketHandler@Data,w
  3914  03F2  3E02               	addlw	2
  3915  03F3  0084               	movwf	4
  3916  03F4  0800               	movf	0,w
  3917  03F5  00CF               	movwf	??_ReceivedPacketHandler
  3918  03F6  084F               	movf	??_ReceivedPacketHandler,w
  3919  03F7  00A0               	movwf	eeprom_write@value
  3920  03F8  3000               	movlw	0
  3921  03F9  160A  118A  271C   	fcall	_eeprom_write
  3922                           
  3923                           ;functions.c: 166: break;
  3924  03FC  0008               	return
  3925  03FD                     l2868:	
  3926                           
  3927                           ;functions.c: 167: }
  3928                           ;functions.c: 168: TransmittPacket(5, eeprom_read(0));
  3929  03FD  3000               	movlw	0
  3930  03FE  160A  118A  25FE  120A  118A  	fcall	_eeprom_read
  3931  0403  1283               	bcf	3,5	;RP0=0, select bank0
  3932  0404  1303               	bcf	3,6	;RP1=0, select bank0
  3933  0405  00CF               	movwf	??_ReceivedPacketHandler
  3934  0406  084F               	movf	??_ReceivedPacketHandler,w
  3935  0407  00B5               	movwf	TransmittPacket@value
  3936  0408  3005               	movlw	5
  3937  0409  120A  158A  23A1   	fcall	_TransmittPacket
  3938                           
  3939                           ;functions.c: 169: break;
  3940  040C  0008               	return
  3941  040D                     l2870:	
  3942                           ;functions.c: 171: case 6:
  3943                           
  3944                           
  3945                           ;functions.c: 172: if(Data[2] == 0)
  3946  040D  1283               	bcf	3,5	;RP0=0, select bank0
  3947  040E  1303               	bcf	3,6	;RP1=0, select bank0
  3948  040F  0850               	movf	ReceivedPacketHandler@Data,w
  3949  0410  3E02               	addlw	2
  3950  0411  0084               	movwf	4
  3951  0412  1383               	bcf	3,7	;select IRP bank0
  3952  0413  0800               	movf	0,w
  3953  0414  1D03               	btfss	3,2
  3954  0415  2C28               	goto	l2878
  3955                           
  3956                           ;functions.c: 173: {
  3957                           ;functions.c: 174: if(bValueFromPot == TRUE)
  3958  0416  036F               	decf	_bValueFromPot,w
  3959  0417  1D03               	btfss	3,2
  3960  0418  2C20               	goto	l2876
  3961                           
  3962                           ;functions.c: 175: TransmittPacket(6, 1);
  3963  0419  01B5               	clrf	TransmittPacket@value
  3964  041A  0AB5               	incf	TransmittPacket@value,f
  3965  041B  3006               	movlw	6
  3966  041C  120A  158A  23A1   	fcall	_TransmittPacket
  3967  041F  0008               	return
  3968  0420                     l2876:	
  3969                           
  3970                           ;functions.c: 176: else
  3971                           ;functions.c: 177: TransmittPacket(6, 0);
  3972  0420  1283               	bcf	3,5	;RP0=0, select bank0
  3973  0421  1303               	bcf	3,6	;RP1=0, select bank0
  3974  0422  01B5               	clrf	TransmittPacket@value
  3975  0423  3006               	movlw	6
  3976  0424  120A  158A  23A1   	fcall	_TransmittPacket
  3977                           
  3978                           ;functions.c: 178: }
  3979  0427  0008               	return
  3980  0428                     l2878:	
  3981                           
  3982                           ;functions.c: 179: else if(Data[2] == 1)
  3983  0428  1283               	bcf	3,5	;RP0=0, select bank0
  3984  0429  1303               	bcf	3,6	;RP1=0, select bank0
  3985  042A  0850               	movf	ReceivedPacketHandler@Data,w
  3986  042B  3E02               	addlw	2
  3987  042C  0084               	movwf	4
  3988  042D  1383               	bcf	3,7	;select IRP bank0
  3989  042E  0300               	decf	0,w
  3990  042F  1D03               	btfss	3,2
  3991  0430  2C34               	goto	l2882
  3992                           
  3993                           ;functions.c: 180: bValueFromPot = TRUE;
  3994  0431  01EF               	clrf	_bValueFromPot
  3995  0432  0AEF               	incf	_bValueFromPot,f
  3996  0433  0008               	return
  3997  0434                     l2882:	
  3998                           
  3999                           ;functions.c: 181: else if(Data[2] == 0)
  4000  0434  0850               	movf	ReceivedPacketHandler@Data,w
  4001  0435  3E02               	addlw	2
  4002  0436  0084               	movwf	4
  4003  0437  0800               	movf	0,w
  4004  0438  1D03               	btfss	3,2
  4005  0439  0008               	return
  4006                           
  4007                           ;functions.c: 182: bValueFromPot = FALSE;
  4008  043A  01EF               	clrf	_bValueFromPot
  4009                           
  4010                           ;functions.c: 184: break;
  4011  043B  0008               	return
  4012  043C                     l2886:	
  4013                           ;functions.c: 186: case 7:
  4014                           
  4015                           
  4016                           ;functions.c: 187: if(Data[2] != 0)
  4017  043C  0850               	movf	ReceivedPacketHandler@Data,w
  4018  043D  3E02               	addlw	2
  4019  043E  0084               	movwf	4
  4020  043F  0800               	movf	0,w
  4021  0440  1D03               	btfss	3,2
  4022  0441  0008               	return
  4023                           
  4024                           ;functions.c: 189: DarknessCheck();
  4025                           
  4026                           ;functions.c: 188: break;
  4027  0442  160A  118A  2646  120A  118A  	fcall	_DarknessCheck
  4028                           
  4029                           ;functions.c: 190: if(bDark)
  4030  0447  1283               	bcf	3,5	;RP0=0, select bank0
  4031  0448  1303               	bcf	3,6	;RP1=0, select bank0
  4032  0449  086A               	movf	_bDark,w
  4033  044A  1903               	btfsc	3,2
  4034  044B  2C53               	goto	l2896
  4035                           
  4036                           ;functions.c: 191: TransmittPacket(7, 1);
  4037  044C  01B5               	clrf	TransmittPacket@value
  4038  044D  0AB5               	incf	TransmittPacket@value,f
  4039  044E  3007               	movlw	7
  4040  044F  120A  158A  23A1   	fcall	_TransmittPacket
  4041  0452  0008               	return
  4042  0453                     l2896:	
  4043                           
  4044                           ;functions.c: 192: else
  4045                           ;functions.c: 193: TransmittPacket(7, 2);
  4046  0453  3002               	movlw	2
  4047  0454  1283               	bcf	3,5	;RP0=0, select bank0
  4048  0455  1303               	bcf	3,6	;RP1=0, select bank0
  4049  0456  00CF               	movwf	??_ReceivedPacketHandler
  4050  0457  084F               	movf	??_ReceivedPacketHandler,w
  4051  0458  00B5               	movwf	TransmittPacket@value
  4052  0459  3007               	movlw	7
  4053  045A  120A  158A  23A1   	fcall	_TransmittPacket
  4054                           
  4055                           ;functions.c: 194: break;
  4056  045D  0008               	return
  4057  045E                     l2898:	
  4058                           ;functions.c: 196: case 9:
  4059                           
  4060                           
  4061                           ;functions.c: 197: write_ram_status(read_ram_status() & 0b11100011);
  4062  045E  160A  118A  253B  120A  118A  	fcall	_read_ram_status
  4063  0463  39E3               	andlw	227
  4064  0464  160A  118A  26F0  120A  118A  	fcall	_write_ram_status
  4065                           
  4066                           ;functions.c: 198: ResetMemoryAdress();
  4067  0469  160A  118A  2583  120A  118A  	fcall	_ResetMemoryAdress
  4068                           
  4069                           ;functions.c: 199: ram_bulk_erase();
  4070  046E  160A  118A  25B9  120A  118A  	fcall	_ram_bulk_erase
  4071                           
  4072                           ;functions.c: 200: TransmittPacket(9, 1);
  4073  0473  1283               	bcf	3,5	;RP0=0, select bank0
  4074  0474  1303               	bcf	3,6	;RP1=0, select bank0
  4075  0475  01B5               	clrf	TransmittPacket@value
  4076  0476  0AB5               	incf	TransmittPacket@value,f
  4077  0477  3009               	movlw	9
  4078  0478  120A  158A  23A1   	fcall	_TransmittPacket
  4079                           
  4080                           ;functions.c: 201: break;
  4081  047B  0008               	return
  4082  047C                     l2902:	
  4083                           ;functions.c: 203: case 8:
  4084                           
  4085                           
  4086                           ;functions.c: 204: if(!bSaveDataToFlash)
  4087  047C  1283               	bcf	3,5	;RP0=0, select bank0
  4088  047D  1303               	bcf	3,6	;RP1=0, select bank0
  4089  047E  086B               	movf	_bSaveDataToFlash,w
  4090  047F  1D03               	btfss	3,2
  4091  0480  2C85               	goto	l2906
  4092                           
  4093                           ;functions.c: 205: SendMemoryData();
  4094  0481  120A  118A  24B0   	fcall	_SendMemoryData
  4095  0484  0008               	return
  4096  0485                     l2906:	
  4097                           
  4098                           ;functions.c: 206: else
  4099                           ;functions.c: 207: TransmittPacket(8, 0);
  4100  0485  1283               	bcf	3,5	;RP0=0, select bank0
  4101  0486  1303               	bcf	3,6	;RP1=0, select bank0
  4102  0487  01B5               	clrf	TransmittPacket@value
  4103  0488  3008               	movlw	8
  4104  0489  120A  158A  23A1   	fcall	_TransmittPacket
  4105                           
  4106                           ;functions.c: 212: }
  4107                           
  4108                           ;functions.c: 211: break;
  4109                           
  4110                           ;functions.c: 210: default:
  4111                           
  4112                           ;functions.c: 208: break;
  4113  048C  0008               	return
  4114  048D                     l2910:	
  4115  048D  1283               	bcf	3,5	;RP0=0, select bank0
  4116  048E  1303               	bcf	3,6	;RP1=0, select bank0
  4117  048F  0A50               	incf	ReceivedPacketHandler@Data,w
  4118  0490  0084               	movwf	4
  4119  0491  1383               	bcf	3,7	;select IRP bank0
  4120  0492  0800               	movf	0,w
  4121                           
  4122                           ; Switch size 1, requested type "space"
  4123                           ; Number of cases is 9, Range of values is 1 to 9
  4124                           ; switch strategies available:
  4125                           ; Name         Instructions Cycles
  4126                           ; simple_byte           28    15 (average)
  4127                           ; direct_byte           38    11 (fixed)
  4128                           ; jumptable            263     9 (fixed)
  4129                           ;	Chosen strategy is simple_byte
  4130  0493  3A01               	xorlw	1	; case 1
  4131  0494  1903               	skipnz
  4132  0495  2B20               	goto	l2814
  4133  0496  3A03               	xorlw	3	; case 2
  4134  0497  1903               	skipnz
  4135  0498  2B32               	goto	l2816
  4136  0499  3A01               	xorlw	1	; case 3
  4137  049A  1903               	skipnz
  4138  049B  2BB6               	goto	l2852
  4139  049C  3A07               	xorlw	7	; case 4
  4140  049D  1903               	skipnz
  4141  049E  2BCF               	goto	l2858
  4142  049F  3A01               	xorlw	1	; case 5
  4143  04A0  1903               	skipnz
  4144  04A1  2BE8               	goto	l2864
  4145  04A2  3A03               	xorlw	3	; case 6
  4146  04A3  1903               	skipnz
  4147  04A4  2C0D               	goto	l2870
  4148  04A5  3A01               	xorlw	1	; case 7
  4149  04A6  1903               	skipnz
  4150  04A7  2C3C               	goto	l2886
  4151  04A8  3A0F               	xorlw	15	; case 8
  4152  04A9  1903               	skipnz
  4153  04AA  2C7C               	goto	l2902
  4154  04AB  3A01               	xorlw	1	; case 9
  4155  04AC  1903               	skipnz
  4156  04AD  2C5E               	goto	l2898
  4157  04AE  2CAF               	goto	l302
  4158  04AF                     l302:	
  4159  04AF  0008               	return
  4160  04B0                     __end_of_ReceivedPacketHandler:	
  4161                           
  4162                           	psect	text9
  4163  16F0                     __ptext9:	
  4164 ;; *************** function _write_ram_status *****************
  4165 ;; Defined at:
  4166 ;;		line 169 in file "m25p16.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;  status          1    wreg     unsigned char 
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;  status          1    5[BANK0 ] unsigned char 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  1    wreg      void 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0, pclath, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4180 ;;      Params:         0       0       0       0       0
  4181 ;;      Locals:         0       1       0       0       0
  4182 ;;      Temps:          0       0       0       0       0
  4183 ;;      Totals:         0       1       0       0       0
  4184 ;;Total ram usage:        1 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    5
  4187 ;; This function calls:
  4188 ;;		_WriteSPI
  4189 ;;		_read_ram_status
  4190 ;; This function is called by:
  4191 ;;		_ReceivedPacketHandler
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function _write_ram_status
  4197  16F0                     _write_ram_status:	
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _write_ram_status: [wreg+status,2+status,0+pclath+cstack]
  4201                           ;write_ram_status@status stored from wreg
  4202  16F0  1283               	bcf	3,5	;RP0=0, select bank0
  4203  16F1  1303               	bcf	3,6	;RP1=0, select bank0
  4204  16F2  00A5               	movwf	write_ram_status@status
  4205                           
  4206                           ;m25p16.c: 172: RD3 = 0;
  4207  16F3  1188               	bcf	8,3	;volatile
  4208                           
  4209                           ;m25p16.c: 173: WriteSPI(0x06);
  4210  16F4  3006               	movlw	6
  4211  16F5  160A  118A  24D8  160A  118A  	fcall	_WriteSPI
  4212                           
  4213                           ;m25p16.c: 174: RD3 = 1;
  4214  16FA  1283               	bcf	3,5	;RP0=0, select bank0
  4215  16FB  1303               	bcf	3,6	;RP1=0, select bank0
  4216  16FC  1588               	bsf	8,3	;volatile
  4217                           
  4218                           ;m25p16.c: 175: _delay((unsigned long)((2)*(4000000/4000000.0)));
  4219  16FD  2EFE               	nop2	;2 cycle nop
  4220                           
  4221                           ;m25p16.c: 176: RD3 = 0;
  4222  16FE  1283               	bcf	3,5	;RP0=0, select bank0
  4223  16FF  1303               	bcf	3,6	;RP1=0, select bank0
  4224  1700  1188               	bcf	8,3	;volatile
  4225                           
  4226                           ;m25p16.c: 177: WriteSPI(0x01);
  4227  1701  3001               	movlw	1
  4228  1702  160A  118A  24D8  160A  118A  	fcall	_WriteSPI
  4229                           
  4230                           ;m25p16.c: 178: WriteSPI(status);
  4231  1707  1283               	bcf	3,5	;RP0=0, select bank0
  4232  1708  1303               	bcf	3,6	;RP1=0, select bank0
  4233  1709  0825               	movf	write_ram_status@status,w
  4234  170A  160A  118A  24D8  160A  118A  	fcall	_WriteSPI
  4235                           
  4236                           ;m25p16.c: 179: RD3 = 1;
  4237  170F  1283               	bcf	3,5	;RP0=0, select bank0
  4238  1710  1303               	bcf	3,6	;RP1=0, select bank0
  4239  1711  1588               	bsf	8,3	;volatile
  4240                           
  4241                           ;m25p16.c: 180: _delay((unsigned long)((2)*(4000000/4000000.0)));
  4242  1712  2F13               	nop2	;2 cycle nop
  4243  1713                     l2696:	
  4244                           ;m25p16.c: 181: while (read_ram_status() & 0x01);
  4245                           
  4246  1713  160A  118A  253B  160A  118A  	fcall	_read_ram_status
  4247  1718  3901               	andlw	1
  4248  1719  1903               	btfsc	3,2
  4249  171A  0008               	return
  4250  171B  2F13               	goto	l2696
  4251  171C                     __end_of_write_ram_status:	
  4252                           
  4253                           	psect	text10
  4254  085B                     __ptext10:	
  4255 ;; *************** function _strstr *****************
  4256 ;; Defined at:
  4257 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strstr.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  s1              1    wreg     PTR const unsigned char 
  4260 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4261 ;;  s2              1   14[BANK0 ] PTR const unsigned char 
  4262 ;;		 -> STR_2(8), STR_1(8), 
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;  s1              1   18[BANK0 ] PTR const unsigned char 
  4265 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      PTR unsigned char 
  4268 ;; Registers used:
  4269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4275 ;;      Params:         0       1       0       0       0
  4276 ;;      Locals:         0       1       0       0       0
  4277 ;;      Temps:          0       3       0       0       0
  4278 ;;      Totals:         0       5       0       0       0
  4279 ;;Total ram usage:        5 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    3
  4282 ;; This function calls:
  4283 ;;		_strchr
  4284 ;;		_strlen
  4285 ;;		_strncmp
  4286 ;; This function is called by:
  4287 ;;		_ReceivedPacketHandler
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           
  4292                           ;psect for function _strstr
  4293  085B                     _strstr:	
  4294                           
  4295                           ;incstack = 0
  4296                           ; Regs used in _strstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4297                           ;strstr@s1 stored from wreg
  4298  085B  1283               	bcf	3,5	;RP0=0, select bank0
  4299  085C  1303               	bcf	3,6	;RP1=0, select bank0
  4300  085D  00B2               	movwf	strstr@s1
  4301  085E  2896               	goto	l2664
  4302  085F                     l2656:	
  4303  085F  082E               	movf	strstr@s2,w
  4304  0860  00AF               	movwf	??_strstr
  4305  0861  082F               	movf	??_strstr,w
  4306  0862  00A8               	movwf	strncmp@s2
  4307  0863  082E               	movf	strstr@s2,w
  4308  0864  160A  118A  26C4  120A  158A  	fcall	_strlen
  4309  0869  1283               	bcf	3,5	;RP0=0, select bank0
  4310  086A  1303               	bcf	3,6	;RP1=0, select bank0
  4311  086B  0821               	movf	?_strlen+1,w
  4312  086C  00AA               	movwf	strncmp@len+1
  4313  086D  0820               	movf	?_strlen,w
  4314  086E  00A9               	movwf	strncmp@len
  4315  086F  0832               	movf	strstr@s1,w
  4316  0870  120A  158A  2017  120A  158A  	fcall	_strncmp
  4317  0875  1283               	bcf	3,5	;RP0=0, select bank0
  4318  0876  1303               	bcf	3,6	;RP1=0, select bank0
  4319  0877  0828               	movf	?_strncmp,w
  4320  0878  0429               	iorwf	?_strncmp+1,w
  4321  0879  1D03               	btfss	3,2
  4322  087A  287D               	goto	l2662
  4323  087B  0832               	movf	strstr@s1,w
  4324  087C  0008               	return
  4325  087D                     l2662:	
  4326  087D  082E               	movf	strstr@s2,w
  4327  087E  0084               	movwf	4
  4328  087F  160A  118A  2000  120A  158A  	fcall	stringdir
  4329  0884  00AF               	movwf	??_strstr
  4330  0885  01B0               	clrf	??_strstr+1
  4331  0886  082F               	movf	??_strstr,w
  4332  0887  00A0               	movwf	strchr@chr
  4333  0888  0830               	movf	??_strstr+1,w
  4334  0889  00A1               	movwf	strchr@chr+1
  4335  088A  0832               	movf	strstr@s1,w
  4336  088B  3E01               	addlw	1
  4337  088C  120A  158A  2002  120A  158A  	fcall	_strchr
  4338  0891  1283               	bcf	3,5	;RP0=0, select bank0
  4339  0892  1303               	bcf	3,6	;RP1=0, select bank0
  4340  0893  00B1               	movwf	??_strstr+2
  4341  0894  0831               	movf	??_strstr+2,w
  4342  0895  00B2               	movwf	strstr@s1
  4343  0896                     l2664:	
  4344  0896  0832               	movf	strstr@s1,w
  4345  0897  1903               	btfsc	3,2
  4346  0898  289F               	goto	l2668
  4347  0899  0832               	movf	strstr@s1,w
  4348  089A  0084               	movwf	4
  4349  089B  1383               	bcf	3,7	;select IRP bank0
  4350  089C  0800               	movf	0,w
  4351  089D  1D03               	btfss	3,2
  4352  089E  285F               	goto	l2656
  4353  089F                     l2668:	
  4354  089F  3000               	movlw	0
  4355  08A0  0008               	return
  4356  08A1                     __end_of_strstr:	
  4357                           
  4358                           	psect	text11
  4359  0817                     __ptext11:	
  4360 ;; *************** function _strncmp *****************
  4361 ;; Defined at:
  4362 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncmp.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;  s1              1    wreg     PTR const unsigned char 
  4365 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4366 ;;  s2              1    8[BANK0 ] PTR const unsigned char 
  4367 ;;		 -> STR_2(8), STR_1(8), 
  4368 ;;  len             2    9[BANK0 ] unsigned int 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  4371 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  2    8[BANK0 ] int 
  4374 ;; Registers used:
  4375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4381 ;;      Params:         0       3       0       0       0
  4382 ;;      Locals:         0       1       0       0       0
  4383 ;;      Temps:          0       2       0       0       0
  4384 ;;      Totals:         0       6       0       0       0
  4385 ;;Total ram usage:        6 bytes
  4386 ;; Hardware stack levels used:    1
  4387 ;; Hardware stack levels required when called:    2
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_strstr
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           
  4396                           ;psect for function _strncmp
  4397  0817                     _strncmp:	
  4398                           
  4399                           ;incstack = 0
  4400                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
  4401                           ;strncmp@s1 stored from wreg
  4402  0817  1283               	bcf	3,5	;RP0=0, select bank0
  4403  0818  1303               	bcf	3,6	;RP1=0, select bank0
  4404  0819  00AD               	movwf	strncmp@s1
  4405  081A                     l1176:	
  4406  081A  3001               	movlw	1
  4407  081B  02A9               	subwf	strncmp@len,f
  4408  081C  3000               	movlw	0
  4409  081D  1C03               	skipc
  4410  081E  03AA               	decf	strncmp@len+1,f
  4411  081F  02AA               	subwf	strncmp@len+1,f
  4412  0820  0A29               	incf	strncmp@len,w
  4413  0821  1903               	btfsc	3,2
  4414  0822  0A2A               	incf	strncmp@len+1,w
  4415  0823  1903               	btfsc	3,2
  4416  0824  2858               	goto	l2632
  4417  0825  082D               	movf	strncmp@s1,w
  4418  0826  0084               	movwf	4
  4419  0827  1383               	bcf	3,7	;select IRP bank0
  4420  0828  0800               	movf	0,w
  4421  0829  1903               	btfsc	3,2
  4422  082A  2839               	goto	l2626
  4423  082B  0828               	movf	strncmp@s2,w
  4424  082C  0084               	movwf	4
  4425  082D  160A  118A  2000  120A  158A  	fcall	stringdir
  4426  0832  00AB               	movwf	??_strncmp
  4427  0833  082D               	movf	strncmp@s1,w
  4428  0834  0084               	movwf	4
  4429  0835  0800               	movf	0,w
  4430  0836  062B               	xorwf	??_strncmp,w
  4431  0837  1903               	skipnz
  4432  0838  284F               	goto	l2630
  4433  0839                     l2626:	
  4434  0839  0828               	movf	strncmp@s2,w
  4435  083A  0084               	movwf	4
  4436  083B  160A  118A  2000   	fcall	stringdir
  4437  083E  00AB               	movwf	??_strncmp
  4438  083F  01AC               	clrf	??_strncmp+1
  4439  0840  09AB               	comf	??_strncmp,f
  4440  0841  09AC               	comf	??_strncmp+1,f
  4441  0842  0AAB               	incf	??_strncmp,f
  4442  0843  1903               	skipnz
  4443  0844  0AAC               	incf	??_strncmp+1,f
  4444  0845  082D               	movf	strncmp@s1,w
  4445  0846  0084               	movwf	4
  4446  0847  0800               	movf	0,w
  4447  0848  072B               	addwf	??_strncmp,w
  4448  0849  00A8               	movwf	?_strncmp
  4449  084A  082C               	movf	??_strncmp+1,w
  4450  084B  1803               	skipnc
  4451  084C  0A2C               	incf	??_strncmp+1,w
  4452  084D  00A9               	movwf	?_strncmp+1
  4453  084E  0008               	return
  4454  084F                     l2630:	
  4455  084F  3001               	movlw	1
  4456  0850  00AB               	movwf	??_strncmp
  4457  0851  082B               	movf	??_strncmp,w
  4458  0852  07AD               	addwf	strncmp@s1,f
  4459  0853  3001               	movlw	1
  4460  0854  00AB               	movwf	??_strncmp
  4461  0855  082B               	movf	??_strncmp,w
  4462  0856  07A8               	addwf	strncmp@s2,f
  4463  0857  281A               	goto	l1176
  4464  0858                     l2632:	
  4465  0858  01A8               	clrf	?_strncmp
  4466  0859  01A9               	clrf	?_strncmp+1
  4467  085A  0008               	return
  4468  085B                     __end_of_strncmp:	
  4469                           
  4470                           	psect	text12
  4471  16C4                     __ptext12:	
  4472 ;; *************** function _strlen *****************
  4473 ;; Defined at:
  4474 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strlen.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  s               1    wreg     PTR const unsigned char 
  4477 ;;		 -> STR_2(8), STR_1(8), 
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  s               1    6[BANK0 ] PTR const unsigned char 
  4480 ;;		 -> STR_2(8), STR_1(8), 
  4481 ;;  cp              1    7[BANK0 ] PTR const unsigned char 
  4482 ;;		 -> STR_2(8), STR_1(8), 
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  2    0[BANK0 ] unsigned int 
  4485 ;; Registers used:
  4486 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4492 ;;      Params:         0       2       0       0       0
  4493 ;;      Locals:         0       2       0       0       0
  4494 ;;      Temps:          0       4       0       0       0
  4495 ;;      Totals:         0       8       0       0       0
  4496 ;;Total ram usage:        8 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    2
  4499 ;; This function calls:
  4500 ;;		Nothing
  4501 ;; This function is called by:
  4502 ;;		_strstr
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           
  4507                           ;psect for function _strlen
  4508  16C4                     _strlen:	
  4509                           
  4510                           ;incstack = 0
  4511                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
  4512                           ;strlen@s stored from wreg
  4513  16C4  1283               	bcf	3,5	;RP0=0, select bank0
  4514  16C5  1303               	bcf	3,6	;RP1=0, select bank0
  4515  16C6  00A6               	movwf	strlen@s
  4516  16C7  0826               	movf	strlen@s,w
  4517  16C8  00A2               	movwf	??_strlen
  4518  16C9  0822               	movf	??_strlen,w
  4519  16CA  00A7               	movwf	strlen@cp
  4520  16CB                     l2614:	
  4521  16CB  0827               	movf	strlen@cp,w
  4522  16CC  0084               	movwf	4
  4523  16CD  160A  118A  2000  160A  118A  	fcall	stringdir
  4524  16D2  3A00               	xorlw	0
  4525  16D3  1903               	btfsc	3,2
  4526  16D4  2EDA               	goto	l2616
  4527  16D5  3001               	movlw	1
  4528  16D6  00A2               	movwf	??_strlen
  4529  16D7  0822               	movf	??_strlen,w
  4530  16D8  07A7               	addwf	strlen@cp,f
  4531  16D9  2ECB               	goto	l2614
  4532  16DA                     l2616:	
  4533  16DA  0826               	movf	strlen@s,w
  4534  16DB  00A2               	movwf	??_strlen
  4535  16DC  3080               	movlw	128
  4536  16DD  00A3               	movwf	??_strlen+1
  4537  16DE  09A2               	comf	??_strlen,f
  4538  16DF  09A3               	comf	??_strlen+1,f
  4539  16E0  0AA2               	incf	??_strlen,f
  4540  16E1  1903               	skipnz
  4541  16E2  0AA3               	incf	??_strlen+1,f
  4542  16E3  0827               	movf	strlen@cp,w
  4543  16E4  00A4               	movwf	??_strlen+2
  4544  16E5  3080               	movlw	128
  4545  16E6  00A5               	movwf	??_strlen+3
  4546  16E7  0822               	movf	??_strlen,w
  4547  16E8  0724               	addwf	??_strlen+2,w
  4548  16E9  00A0               	movwf	?_strlen
  4549  16EA  0823               	movf	??_strlen+1,w
  4550  16EB  1803               	skipnc
  4551  16EC  0A23               	incf	??_strlen+1,w
  4552  16ED  0725               	addwf	??_strlen+3,w
  4553  16EE  00A1               	movwf	?_strlen+1
  4554  16EF  0008               	return
  4555  16F0                     __end_of_strlen:	
  4556                           
  4557                           	psect	text13
  4558  0802                     __ptext13:	
  4559 ;; *************** function _strchr *****************
  4560 ;; Defined at:
  4561 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strchr.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;  ptr             1    wreg     PTR const unsigned char 
  4564 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4565 ;;  chr             2    0[BANK0 ] int 
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;  ptr             1    2[BANK0 ] PTR const unsigned char 
  4568 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      PTR unsigned char 
  4571 ;; Registers used:
  4572 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4578 ;;      Params:         0       2       0       0       0
  4579 ;;      Locals:         0       1       0       0       0
  4580 ;;      Temps:          0       0       0       0       0
  4581 ;;      Totals:         0       3       0       0       0
  4582 ;;Total ram usage:        3 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    2
  4585 ;; This function calls:
  4586 ;;		Nothing
  4587 ;; This function is called by:
  4588 ;;		_strstr
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           
  4593                           ;psect for function _strchr
  4594  0802                     _strchr:	
  4595                           
  4596                           ;incstack = 0
  4597                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0]
  4598                           ;strchr@ptr stored from wreg
  4599  0802  1283               	bcf	3,5	;RP0=0, select bank0
  4600  0803  1303               	bcf	3,6	;RP1=0, select bank0
  4601  0804  00A2               	movwf	strchr@ptr
  4602  0805                     l1164:	
  4603  0805  0822               	movf	strchr@ptr,w
  4604  0806  0084               	movwf	4
  4605  0807  1383               	bcf	3,7	;select IRP bank0
  4606  0808  0800               	movf	0,w
  4607  0809  0620               	xorwf	strchr@chr,w
  4608  080A  1D03               	skipz
  4609  080B  280E               	goto	l2642
  4610  080C  0822               	movf	strchr@ptr,w
  4611  080D  0008               	return
  4612  080E                     l2642:	
  4613  080E  0822               	movf	strchr@ptr,w
  4614  080F  0084               	movwf	4
  4615  0810  3001               	movlw	1
  4616  0811  07A2               	addwf	strchr@ptr,f
  4617  0812  0800               	movf	0,w
  4618  0813  1D03               	btfss	3,2
  4619  0814  2805               	goto	l1164
  4620  0815  3000               	movlw	0
  4621  0816  0008               	return
  4622  0817                     __end_of_strchr:	
  4623                           
  4624                           	psect	text14
  4625  15B9                     __ptext14:	
  4626 ;; *************** function _ram_bulk_erase *****************
  4627 ;; Defined at:
  4628 ;;		line 69 in file "m25p16.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0, pclath, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4642 ;;      Params:         0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0
  4644 ;;      Temps:          0       0       0       0       0
  4645 ;;      Totals:         0       0       0       0       0
  4646 ;;Total ram usage:        0 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    5
  4649 ;; This function calls:
  4650 ;;		_WriteSPI
  4651 ;;		_read_ram_status
  4652 ;; This function is called by:
  4653 ;;		_ReceivedPacketHandler
  4654 ;; This function uses a non-reentrant model
  4655 ;;
  4656                           
  4657                           
  4658                           ;psect for function _ram_bulk_erase
  4659  15B9                     _ram_bulk_erase:	
  4660                           
  4661                           ;m25p16.c: 71: RD3 = 0;
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in _ram_bulk_erase: [wreg+status,2+status,0+pclath+cstack]
  4665  15B9  1283               	bcf	3,5	;RP0=0, select bank0
  4666  15BA  1303               	bcf	3,6	;RP1=0, select bank0
  4667  15BB  1188               	bcf	8,3	;volatile
  4668                           
  4669                           ;m25p16.c: 72: WriteSPI(0x06);
  4670  15BC  3006               	movlw	6
  4671  15BD  160A  118A  24D8  160A  118A  	fcall	_WriteSPI
  4672                           
  4673                           ;m25p16.c: 73: RD3 = 1;
  4674  15C2  1283               	bcf	3,5	;RP0=0, select bank0
  4675  15C3  1303               	bcf	3,6	;RP1=0, select bank0
  4676  15C4  1588               	bsf	8,3	;volatile
  4677                           
  4678                           ;m25p16.c: 74: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4679  15C5  0000               	nop
  4680                           
  4681                           ;m25p16.c: 75: RD3 = 0;
  4682  15C6  1283               	bcf	3,5	;RP0=0, select bank0
  4683  15C7  1303               	bcf	3,6	;RP1=0, select bank0
  4684  15C8  1188               	bcf	8,3	;volatile
  4685                           
  4686                           ;m25p16.c: 76: WriteSPI(0xC7);
  4687  15C9  30C7               	movlw	199
  4688  15CA  160A  118A  24D8  160A  118A  	fcall	_WriteSPI
  4689                           
  4690                           ;m25p16.c: 77: RD3 = 1;
  4691  15CF  1283               	bcf	3,5	;RP0=0, select bank0
  4692  15D0  1303               	bcf	3,6	;RP1=0, select bank0
  4693  15D1  1588               	bsf	8,3	;volatile
  4694  15D2                     l2712:	
  4695                           ;m25p16.c: 78: while(read_ram_status());
  4696                           
  4697  15D2  160A  118A  253B  160A  118A  	fcall	_read_ram_status
  4698  15D7  3A00               	xorlw	0
  4699  15D8  1903               	btfsc	3,2
  4700  15D9  0008               	return
  4701  15DA  2DD2               	goto	l2712
  4702  15DB                     __end_of_ram_bulk_erase:	
  4703                           
  4704                           	psect	text15
  4705  04B0                     __ptext15:	
  4706 ;; *************** function _SendMemoryData *****************
  4707 ;; Defined at:
  4708 ;;		line 1246 in file "functions.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  address         4   43[BANK0 ] unsigned long 
  4713 ;;  finalAddress    4   36[BANK0 ] unsigned long 
  4714 ;;  addr1           1   42[BANK0 ] unsigned char 
  4715 ;;  addr2           1   41[BANK0 ] unsigned char 
  4716 ;;  addr3           1   40[BANK0 ] unsigned char 
  4717 ;;  value           1   35[BANK0 ] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1    wreg      void 
  4720 ;; Registers used:
  4721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4727 ;;      Params:         0       0       0       0       0
  4728 ;;      Locals:         0      12       0       0       0
  4729 ;;      Temps:          0       8       0       0       0
  4730 ;;      Totals:         0      20       0       0       0
  4731 ;;Total ram usage:       20 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    8
  4734 ;; This function calls:
  4735 ;;		_ReadMemoryAdress
  4736 ;;		_TransmittPacket
  4737 ;;		___llmod
  4738 ;;		_read_write_flash_ram
  4739 ;; This function is called by:
  4740 ;;		_ReceivedPacketHandler
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           
  4745                           ;psect for function _SendMemoryData
  4746  04B0                     _SendMemoryData:	
  4747                           
  4748                           ;functions.c: 1248: unsigned long address, finalAddress = 0;
  4749                           
  4750                           ;incstack = 0
  4751 ;; hardware stack exceeded
  4752                           ; Regs used in _SendMemoryData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4753  04B0  3000               	movlw	0
  4754  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  4755  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  4756  04B3  00C7               	movwf	SendMemoryData@finalAddress+3
  4757  04B4  3000               	movlw	0
  4758  04B5  00C6               	movwf	SendMemoryData@finalAddress+2
  4759  04B6  3000               	movlw	0
  4760  04B7  00C5               	movwf	SendMemoryData@finalAddress+1
  4761  04B8  3000               	movlw	0
  4762  04B9  00C4               	movwf	SendMemoryData@finalAddress
  4763                           
  4764                           ;functions.c: 1249: unsigned char addr3, addr2, addr1, value;
  4765                           ;functions.c: 1251: ReadMemoryAdress(&addr3, &addr2, &addr1);
  4766  04BA  3049               	movlw	(low (SendMemoryData@addr2| 0))& (0+255)
  4767  04BB  00BB               	movwf	??_SendMemoryData
  4768  04BC  083B               	movf	??_SendMemoryData,w
  4769  04BD  00A2               	movwf	ReadMemoryAdress@var2
  4770  04BE  304A               	movlw	(low (SendMemoryData@addr1| 0))& (0+255)
  4771  04BF  00BC               	movwf	??_SendMemoryData+1
  4772  04C0  083C               	movf	??_SendMemoryData+1,w
  4773  04C1  00A3               	movwf	ReadMemoryAdress@var1
  4774  04C2  3048               	movlw	(low (SendMemoryData@addr3| 0))& (0+255)
  4775  04C3  160A  118A  2698  120A  118A  	fcall	_ReadMemoryAdress
  4776                           
  4777                           ;functions.c: 1255: finalAddress = addr3;
  4778  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  4779  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  4780  04CA  0848               	movf	SendMemoryData@addr3,w
  4781  04CB  00BB               	movwf	??_SendMemoryData
  4782  04CC  01BC               	clrf	??_SendMemoryData+1
  4783  04CD  01BD               	clrf	??_SendMemoryData+2
  4784  04CE  01BE               	clrf	??_SendMemoryData+3
  4785  04CF  083E               	movf	??_SendMemoryData+3,w
  4786  04D0  00C7               	movwf	SendMemoryData@finalAddress+3
  4787  04D1  083D               	movf	??_SendMemoryData+2,w
  4788  04D2  00C6               	movwf	SendMemoryData@finalAddress+2
  4789  04D3  083C               	movf	??_SendMemoryData+1,w
  4790  04D4  00C5               	movwf	SendMemoryData@finalAddress+1
  4791  04D5  083B               	movf	??_SendMemoryData,w
  4792  04D6  00C4               	movwf	SendMemoryData@finalAddress
  4793                           
  4794                           ;functions.c: 1256: finalAddress = (finalAddress << 8) + addr2;
  4795  04D7  0849               	movf	SendMemoryData@addr2,w
  4796  04D8  00BB               	movwf	??_SendMemoryData
  4797  04D9  01BC               	clrf	??_SendMemoryData+1
  4798  04DA  01BD               	clrf	??_SendMemoryData+2
  4799  04DB  01BE               	clrf	??_SendMemoryData+3
  4800  04DC  0844               	movf	SendMemoryData@finalAddress,w
  4801  04DD  00BF               	movwf	??_SendMemoryData+4
  4802  04DE  0845               	movf	SendMemoryData@finalAddress+1,w
  4803  04DF  00C0               	movwf	??_SendMemoryData+5
  4804  04E0  0846               	movf	SendMemoryData@finalAddress+2,w
  4805  04E1  00C1               	movwf	??_SendMemoryData+6
  4806  04E2  0847               	movf	SendMemoryData@finalAddress+3,w
  4807  04E3  00C2               	movwf	??_SendMemoryData+7
  4808  04E4  3008               	movlw	8
  4809  04E5                     u1795:	
  4810  04E5  1003               	clrc
  4811  04E6  0DBF               	rlf	??_SendMemoryData+4,f
  4812  04E7  0DC0               	rlf	??_SendMemoryData+5,f
  4813  04E8  0DC1               	rlf	??_SendMemoryData+6,f
  4814  04E9  0DC2               	rlf	??_SendMemoryData+7,f
  4815  04EA  3EFF               	addlw	-1
  4816  04EB  1D03               	skipz
  4817  04EC  2CE5               	goto	u1795
  4818  04ED  083F               	movf	??_SendMemoryData+4,w
  4819  04EE  07BB               	addwf	??_SendMemoryData,f
  4820  04EF  0840               	movf	??_SendMemoryData+5,w
  4821  04F0  1803               	skipnc
  4822  04F1  0F40               	incfsz	??_SendMemoryData+5,w
  4823  04F2  2CF4               	goto	u1800
  4824  04F3  2CF5               	goto	u1801
  4825  04F4                     u1800:	
  4826  04F4  07BC               	addwf	??_SendMemoryData+1,f
  4827  04F5                     u1801:	
  4828  04F5  0841               	movf	??_SendMemoryData+6,w
  4829  04F6  1803               	skipnc
  4830  04F7  0F41               	incfsz	??_SendMemoryData+6,w
  4831  04F8  2CFA               	goto	u1802
  4832  04F9  2CFB               	goto	u1803
  4833  04FA                     u1802:	
  4834  04FA  07BD               	addwf	??_SendMemoryData+2,f
  4835  04FB                     u1803:	
  4836  04FB  0842               	movf	??_SendMemoryData+7,w
  4837  04FC  1803               	skipnc
  4838  04FD  0A42               	incf	??_SendMemoryData+7,w
  4839  04FE  07BE               	addwf	??_SendMemoryData+3,f
  4840  04FF  083E               	movf	??_SendMemoryData+3,w
  4841  0500  00C7               	movwf	SendMemoryData@finalAddress+3
  4842  0501  083D               	movf	??_SendMemoryData+2,w
  4843  0502  00C6               	movwf	SendMemoryData@finalAddress+2
  4844  0503  083C               	movf	??_SendMemoryData+1,w
  4845  0504  00C5               	movwf	SendMemoryData@finalAddress+1
  4846  0505  083B               	movf	??_SendMemoryData,w
  4847  0506  00C4               	movwf	SendMemoryData@finalAddress
  4848                           
  4849                           ;functions.c: 1257: finalAddress = (finalAddress << 8) + addr1;
  4850  0507  084A               	movf	SendMemoryData@addr1,w
  4851  0508  00BB               	movwf	??_SendMemoryData
  4852  0509  01BC               	clrf	??_SendMemoryData+1
  4853  050A  01BD               	clrf	??_SendMemoryData+2
  4854  050B  01BE               	clrf	??_SendMemoryData+3
  4855  050C  0844               	movf	SendMemoryData@finalAddress,w
  4856  050D  00BF               	movwf	??_SendMemoryData+4
  4857  050E  0845               	movf	SendMemoryData@finalAddress+1,w
  4858  050F  00C0               	movwf	??_SendMemoryData+5
  4859  0510  0846               	movf	SendMemoryData@finalAddress+2,w
  4860  0511  00C1               	movwf	??_SendMemoryData+6
  4861  0512  0847               	movf	SendMemoryData@finalAddress+3,w
  4862  0513  00C2               	movwf	??_SendMemoryData+7
  4863  0514  3008               	movlw	8
  4864  0515                     u1815:	
  4865  0515  1003               	clrc
  4866  0516  0DBF               	rlf	??_SendMemoryData+4,f
  4867  0517  0DC0               	rlf	??_SendMemoryData+5,f
  4868  0518  0DC1               	rlf	??_SendMemoryData+6,f
  4869  0519  0DC2               	rlf	??_SendMemoryData+7,f
  4870  051A  3EFF               	addlw	-1
  4871  051B  1D03               	skipz
  4872  051C  2D15               	goto	u1815
  4873  051D  083F               	movf	??_SendMemoryData+4,w
  4874  051E  07BB               	addwf	??_SendMemoryData,f
  4875  051F  0840               	movf	??_SendMemoryData+5,w
  4876  0520  1803               	skipnc
  4877  0521  0F40               	incfsz	??_SendMemoryData+5,w
  4878  0522  2D24               	goto	u1820
  4879  0523  2D25               	goto	u1821
  4880  0524                     u1820:	
  4881  0524  07BC               	addwf	??_SendMemoryData+1,f
  4882  0525                     u1821:	
  4883  0525  0841               	movf	??_SendMemoryData+6,w
  4884  0526  1803               	skipnc
  4885  0527  0F41               	incfsz	??_SendMemoryData+6,w
  4886  0528  2D2A               	goto	u1822
  4887  0529  2D2B               	goto	u1823
  4888  052A                     u1822:	
  4889  052A  07BD               	addwf	??_SendMemoryData+2,f
  4890  052B                     u1823:	
  4891  052B  0842               	movf	??_SendMemoryData+7,w
  4892  052C  1803               	skipnc
  4893  052D  0A42               	incf	??_SendMemoryData+7,w
  4894  052E  07BE               	addwf	??_SendMemoryData+3,f
  4895  052F  083E               	movf	??_SendMemoryData+3,w
  4896  0530  00C7               	movwf	SendMemoryData@finalAddress+3
  4897  0531  083D               	movf	??_SendMemoryData+2,w
  4898  0532  00C6               	movwf	SendMemoryData@finalAddress+2
  4899  0533  083C               	movf	??_SendMemoryData+1,w
  4900  0534  00C5               	movwf	SendMemoryData@finalAddress+1
  4901  0535  083B               	movf	??_SendMemoryData,w
  4902  0536  00C4               	movwf	SendMemoryData@finalAddress
  4903                           
  4904                           ;functions.c: 1259: TransmittPacket(8,3);
  4905  0537  3003               	movlw	3
  4906  0538  00BB               	movwf	??_SendMemoryData
  4907  0539  083B               	movf	??_SendMemoryData,w
  4908  053A  00B5               	movwf	TransmittPacket@value
  4909  053B  3008               	movlw	8
  4910  053C  120A  158A  23A1  120A  118A  	fcall	_TransmittPacket
  4911                           
  4912                           ;functions.c: 1261: for(address = 0; address < finalAddress; address++)
  4913  0541  3000               	movlw	0
  4914  0542  1283               	bcf	3,5	;RP0=0, select bank0
  4915  0543  1303               	bcf	3,6	;RP1=0, select bank0
  4916  0544  00CE               	movwf	SendMemoryData@address+3
  4917  0545  3000               	movlw	0
  4918  0546  00CD               	movwf	SendMemoryData@address+2
  4919  0547  3000               	movlw	0
  4920  0548  00CC               	movwf	SendMemoryData@address+1
  4921  0549  3000               	movlw	0
  4922  054A  00CB               	movwf	SendMemoryData@address
  4923  054B                     l2746:	
  4924  054B  0847               	movf	SendMemoryData@finalAddress+3,w
  4925  054C  024E               	subwf	SendMemoryData@address+3,w
  4926  054D  1D03               	skipz
  4927  054E  2D59               	goto	u1875
  4928  054F  0846               	movf	SendMemoryData@finalAddress+2,w
  4929  0550  024D               	subwf	SendMemoryData@address+2,w
  4930  0551  1D03               	skipz
  4931  0552  2D59               	goto	u1875
  4932  0553  0845               	movf	SendMemoryData@finalAddress+1,w
  4933  0554  024C               	subwf	SendMemoryData@address+1,w
  4934  0555  1D03               	skipz
  4935  0556  2D59               	goto	u1875
  4936  0557  0844               	movf	SendMemoryData@finalAddress,w
  4937  0558  024B               	subwf	SendMemoryData@address,w
  4938  0559                     u1875:	
  4939  0559  1803               	btfsc	3,0
  4940  055A  2DF9               	goto	l2748
  4941                           
  4942                           ;functions.c: 1262: {
  4943                           ;functions.c: 1265: addr1 = address & 0xFF;
  4944  055B  084B               	movf	SendMemoryData@address,w
  4945  055C  00BB               	movwf	??_SendMemoryData
  4946  055D  083B               	movf	??_SendMemoryData,w
  4947  055E  00CA               	movwf	SendMemoryData@addr1
  4948                           
  4949                           ;functions.c: 1266: addr2 = (address >> 8) & 0xFF;
  4950  055F  084B               	movf	SendMemoryData@address,w
  4951  0560  00BB               	movwf	??_SendMemoryData
  4952  0561  084C               	movf	SendMemoryData@address+1,w
  4953  0562  00BC               	movwf	??_SendMemoryData+1
  4954  0563  084D               	movf	SendMemoryData@address+2,w
  4955  0564  00BD               	movwf	??_SendMemoryData+2
  4956  0565  084E               	movf	SendMemoryData@address+3,w
  4957  0566  00BE               	movwf	??_SendMemoryData+3
  4958  0567  3008               	movlw	8
  4959  0568                     u1835:	
  4960  0568  1003               	clrc
  4961  0569  0CBE               	rrf	??_SendMemoryData+3,f
  4962  056A  0CBD               	rrf	??_SendMemoryData+2,f
  4963  056B  0CBC               	rrf	??_SendMemoryData+1,f
  4964  056C  0CBB               	rrf	??_SendMemoryData,f
  4965  056D  3EFF               	addlw	-1
  4966  056E  1D03               	skipz
  4967  056F  2D68               	goto	u1835
  4968  0570  083B               	movf	??_SendMemoryData,w
  4969  0571  00BF               	movwf	??_SendMemoryData+4
  4970  0572  083F               	movf	??_SendMemoryData+4,w
  4971  0573  00C9               	movwf	SendMemoryData@addr2
  4972                           
  4973                           ;functions.c: 1267: addr3 = (address >> 16) & 0xFF;
  4974  0574  084B               	movf	SendMemoryData@address,w
  4975  0575  00BB               	movwf	??_SendMemoryData
  4976  0576  084C               	movf	SendMemoryData@address+1,w
  4977  0577  00BC               	movwf	??_SendMemoryData+1
  4978  0578  084D               	movf	SendMemoryData@address+2,w
  4979  0579  00BD               	movwf	??_SendMemoryData+2
  4980  057A  084E               	movf	SendMemoryData@address+3,w
  4981  057B  00BE               	movwf	??_SendMemoryData+3
  4982  057C  3010               	movlw	16
  4983  057D                     u1845:	
  4984  057D  1003               	clrc
  4985  057E  0CBE               	rrf	??_SendMemoryData+3,f
  4986  057F  0CBD               	rrf	??_SendMemoryData+2,f
  4987  0580  0CBC               	rrf	??_SendMemoryData+1,f
  4988  0581  0CBB               	rrf	??_SendMemoryData,f
  4989  0582  3EFF               	addlw	-1
  4990  0583  1D03               	skipz
  4991  0584  2D7D               	goto	u1845
  4992  0585  083B               	movf	??_SendMemoryData,w
  4993  0586  00BF               	movwf	??_SendMemoryData+4
  4994  0587  083F               	movf	??_SendMemoryData+4,w
  4995  0588  00C8               	movwf	SendMemoryData@addr3
  4996                           
  4997                           ;functions.c: 1269: if(address ==0)
  4998  0589  084E               	movf	SendMemoryData@address+3,w
  4999  058A  044D               	iorwf	SendMemoryData@address+2,w
  5000  058B  044C               	iorwf	SendMemoryData@address+1,w
  5001  058C  044B               	iorwf	SendMemoryData@address,w
  5002  058D  1903               	btfsc	3,2
  5003  058E  2DB8               	goto	L2
  5004                           
  5005                           ;functions.c: 1271: else if((address % 10) ==0)
  5006                           
  5007                           ;functions.c: 1270: TransmittPacket(11, 1);
  5008  058F  3000               	movlw	0
  5009  0590  1283               	bcf	3,5	;RP0=0, select bank0
  5010  0591  1303               	bcf	3,6	;RP1=0, select bank0
  5011  0592  00A3               	movwf	___llmod@divisor+3
  5012  0593  3000               	movlw	0
  5013  0594  00A2               	movwf	___llmod@divisor+2
  5014  0595  3000               	movlw	0
  5015  0596  00A1               	movwf	___llmod@divisor+1
  5016  0597  300A               	movlw	10
  5017  0598  00A0               	movwf	___llmod@divisor
  5018  0599  084E               	movf	SendMemoryData@address+3,w
  5019  059A  00A7               	movwf	___llmod@dividend+3
  5020  059B  084D               	movf	SendMemoryData@address+2,w
  5021  059C  00A6               	movwf	___llmod@dividend+2
  5022  059D  084C               	movf	SendMemoryData@address+1,w
  5023  059E  00A5               	movwf	___llmod@dividend+1
  5024  059F  084B               	movf	SendMemoryData@address,w
  5025  05A0  00A4               	movwf	___llmod@dividend
  5026  05A1  120A  158A  20A1  120A  118A  	fcall	___llmod
  5027  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  5028  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  5029  05A8  0823               	movf	?___llmod+3,w
  5030  05A9  0422               	iorwf	?___llmod+2,w
  5031  05AA  0421               	iorwf	?___llmod+1,w
  5032  05AB  0420               	iorwf	?___llmod,w
  5033  05AC  1D03               	skipz
  5034  05AD  2DC0               	goto	l2740
  5035                           
  5036                           ;functions.c: 1272: {
  5037                           ;functions.c: 1273: TransmittPacket(12, 1);
  5038  05AE  01B5               	clrf	TransmittPacket@value
  5039  05AF  0AB5               	incf	TransmittPacket@value,f
  5040  05B0  300C               	movlw	12
  5041  05B1  120A  158A  23A1  120A  118A  	fcall	_TransmittPacket
  5042                           
  5043                           ;functions.c: 1274: TransmittPacket(11,1);
  5044  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  5045  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  5046  05B8                     L2:	
  5047  05B8  01B5               	clrf	TransmittPacket@value
  5048  05B9  0AB5               	incf	TransmittPacket@value,f
  5049  05BA  300B               	movlw	11
  5050  05BB  120A  158A  23A1  120A  118A  	fcall	_TransmittPacket
  5051  05C0                     l2740:	
  5052                           
  5053                           ;functions.c: 1275: }
  5054                           ;functions.c: 1278: read_write_flash_ram(
  5055                           ;functions.c: 1279: 1,
  5056                           ;functions.c: 1280: 1,
  5057                           ;functions.c: 1281: addr3,
  5058                           ;functions.c: 1282: addr2,
  5059                           ;functions.c: 1283: addr1,
  5060                           ;functions.c: 1284: &value);
  5061  05C0  3001               	movlw	1
  5062  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  5063  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  5064  05C3  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  5065  05C4  3000               	movlw	0
  5066  05C5  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  5067  05C6  0848               	movf	SendMemoryData@addr3,w
  5068  05C7  00BB               	movwf	??_SendMemoryData
  5069  05C8  083B               	movf	??_SendMemoryData,w
  5070  05C9  00A7               	movwf	read_write_flash_ram@flash_sector
  5071  05CA  0849               	movf	SendMemoryData@addr2,w
  5072  05CB  00BC               	movwf	??_SendMemoryData+1
  5073  05CC  083C               	movf	??_SendMemoryData+1,w
  5074  05CD  00A8               	movwf	read_write_flash_ram@flash_page
  5075  05CE  084A               	movf	SendMemoryData@addr1,w
  5076  05CF  00BD               	movwf	??_SendMemoryData+2
  5077  05D0  083D               	movf	??_SendMemoryData+2,w
  5078  05D1  00A9               	movwf	read_write_flash_ram@offset
  5079  05D2  3043               	movlw	(low (SendMemoryData@value| 0))& (0+255)
  5080  05D3  00BE               	movwf	??_SendMemoryData+3
  5081  05D4  083E               	movf	??_SendMemoryData+3,w
  5082  05D5  00AA               	movwf	read_write_flash_ram@mem_ptr
  5083  05D6  3001               	movlw	1
  5084  05D7  120A  158A  228B  120A  118A  	fcall	_read_write_flash_ram
  5085                           
  5086                           ;functions.c: 1286: TransmittPacket(10, value);
  5087  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  5088  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  5089  05DE  0843               	movf	SendMemoryData@value,w
  5090  05DF  00BB               	movwf	??_SendMemoryData
  5091  05E0  083B               	movf	??_SendMemoryData,w
  5092  05E1  00B5               	movwf	TransmittPacket@value
  5093  05E2  300A               	movlw	10
  5094  05E3  120A  158A  23A1  120A  118A  	fcall	_TransmittPacket
  5095  05E8  3001               	movlw	1
  5096  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  5097  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  5098  05EB  07CB               	addwf	SendMemoryData@address,f
  5099  05EC  3000               	movlw	0
  5100  05ED  1803               	skipnc
  5101  05EE  3001               	movlw	1
  5102  05EF  07CC               	addwf	SendMemoryData@address+1,f
  5103  05F0  3000               	movlw	0
  5104  05F1  1803               	skipnc
  5105  05F2  3001               	movlw	1
  5106  05F3  07CD               	addwf	SendMemoryData@address+2,f
  5107  05F4  3000               	movlw	0
  5108  05F5  1803               	skipnc
  5109  05F6  3001               	movlw	1
  5110  05F7  07CE               	addwf	SendMemoryData@address+3,f
  5111  05F8  2D4B               	goto	l2746
  5112  05F9                     l2748:	
  5113                           
  5114                           ;functions.c: 1289: }
  5115                           ;functions.c: 1290: TransmittPacket(8, 1);
  5116  05F9  01B5               	clrf	TransmittPacket@value
  5117  05FA  0AB5               	incf	TransmittPacket@value,f
  5118  05FB  3008               	movlw	8
  5119  05FC  120A  158A  23A1   	fcall	_TransmittPacket
  5120  05FF  0008               	return
  5121  0600                     __end_of_SendMemoryData:	
  5122                           
  5123                           	psect	text16
  5124  0A8B                     __ptext16:	
  5125 ;; *************** function _read_write_flash_ram *****************
  5126 ;; Defined at:
  5127 ;;		line 107 in file "m25p16.c"
  5128 ;; Parameters:    Size  Location     Type
  5129 ;;  one_read_zer    1    wreg     unsigned char 
  5130 ;;  bytes_to_rea    2    5[BANK0 ] unsigned short 
  5131 ;;  flash_sector    1    7[BANK0 ] unsigned char 
  5132 ;;  flash_page      1    8[BANK0 ] unsigned char 
  5133 ;;  offset          1    9[BANK0 ] unsigned char 
  5134 ;;  mem_ptr         1   10[BANK0 ] PTR unsigned char 
  5135 ;;		 -> SendMemoryData@value(1), saveDataToFlash@value(1), 
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;  one_read_zer    1   13[BANK0 ] unsigned char 
  5138 ;;  i               2   14[BANK0 ] unsigned short 
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  1    wreg      void 
  5141 ;; Registers used:
  5142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5148 ;;      Params:         0       6       0       0       0
  5149 ;;      Locals:         0       3       0       0       0
  5150 ;;      Temps:          0       2       0       0       0
  5151 ;;      Totals:         0      11       0       0       0
  5152 ;;Total ram usage:       11 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    5
  5155 ;; This function calls:
  5156 ;;		_ReadSPI
  5157 ;;		_WriteSPI
  5158 ;;		_read_ram_status
  5159 ;; This function is called by:
  5160 ;;		_saveDataToFlash
  5161 ;;		_SendMemoryData
  5162 ;;		_write_flash_page
  5163 ;;		_read_flash_page
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           
  5168                           ;psect for function _read_write_flash_ram
  5169  0A8B                     _read_write_flash_ram:	
  5170                           
  5171                           ;incstack = 0
  5172                           ; Regs used in _read_write_flash_ram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5173                           ;read_write_flash_ram@one_read_zero_write stored from wreg
  5174  0A8B  1283               	bcf	3,5	;RP0=0, select bank0
  5175  0A8C  1303               	bcf	3,6	;RP1=0, select bank0
  5176  0A8D  00AD               	movwf	read_write_flash_ram@one_read_zero_write
  5177                           
  5178                           ;m25p16.c: 122: unsigned short int i;
  5179                           ;m25p16.c: 126: RD3 = 0;
  5180  0A8E  1188               	bcf	8,3	;volatile
  5181                           
  5182                           ;m25p16.c: 127: if(one_read_zero_write)
  5183  0A8F  082D               	movf	read_write_flash_ram@one_read_zero_write,w
  5184  0A90  1903               	btfsc	3,2
  5185  0A91  2A94               	goto	l2566
  5186                           
  5187                           ;m25p16.c: 128: {
  5188                           ;m25p16.c: 129: WriteSPI(0x03);
  5189  0A92  3003               	movlw	3
  5190  0A93  2AA2               	goto	L3
  5191  0A94                     l2566:	
  5192                           ;m25p16.c: 130: }
  5193                           
  5194                           
  5195                           ;m25p16.c: 131: else
  5196                           ;m25p16.c: 132: {
  5197                           ;m25p16.c: 133: WriteSPI(0x06);
  5198  0A94  3006               	movlw	6
  5199  0A95  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  5200                           
  5201                           ;m25p16.c: 134: RD3 = 1;
  5202  0A9A  1283               	bcf	3,5	;RP0=0, select bank0
  5203  0A9B  1303               	bcf	3,6	;RP1=0, select bank0
  5204  0A9C  1588               	bsf	8,3	;volatile
  5205                           
  5206                           ;m25p16.c: 135: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5207  0A9D  0000               	nop
  5208                           
  5209                           ;m25p16.c: 136: RD3 = 0;
  5210  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  5211  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  5212  0AA0  1188               	bcf	8,3	;volatile
  5213                           
  5214                           ;m25p16.c: 137: WriteSPI(0x02);
  5215  0AA1  3002               	movlw	2
  5216  0AA2                     L3:	
  5217  0AA2  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  5218                           
  5219                           ;m25p16.c: 139: }
  5220                           ;m25p16.c: 141: WriteSPI(flash_sector);
  5221  0AA7  1283               	bcf	3,5	;RP0=0, select bank0
  5222  0AA8  1303               	bcf	3,6	;RP1=0, select bank0
  5223  0AA9  0827               	movf	read_write_flash_ram@flash_sector,w
  5224  0AAA  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  5225                           
  5226                           ;m25p16.c: 142: WriteSPI(flash_page);
  5227  0AAF  1283               	bcf	3,5	;RP0=0, select bank0
  5228  0AB0  1303               	bcf	3,6	;RP1=0, select bank0
  5229  0AB1  0828               	movf	read_write_flash_ram@flash_page,w
  5230  0AB2  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  5231                           
  5232                           ;m25p16.c: 143: WriteSPI(offset);
  5233  0AB7  1283               	bcf	3,5	;RP0=0, select bank0
  5234  0AB8  1303               	bcf	3,6	;RP1=0, select bank0
  5235  0AB9  0829               	movf	read_write_flash_ram@offset,w
  5236  0ABA  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  5237                           
  5238                           ;m25p16.c: 145: for (i=0;i<bytes_to_readwrite;i++)
  5239  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
  5240  0AC0  1303               	bcf	3,6	;RP1=0, select bank0
  5241  0AC1  01AE               	clrf	read_write_flash_ram@i
  5242  0AC2  01AF               	clrf	read_write_flash_ram@i+1
  5243  0AC3                     l2584:	
  5244  0AC3  0826               	movf	read_write_flash_ram@bytes_to_readwrite+1,w
  5245  0AC4  022F               	subwf	read_write_flash_ram@i+1,w
  5246  0AC5  1D03               	skipz
  5247  0AC6  2AC9               	goto	u1585
  5248  0AC7  0825               	movf	read_write_flash_ram@bytes_to_readwrite,w
  5249  0AC8  022E               	subwf	read_write_flash_ram@i,w
  5250  0AC9                     u1585:	
  5251  0AC9  1803               	btfsc	3,0
  5252  0ACA  2AF4               	goto	l595
  5253                           
  5254                           ;m25p16.c: 146: {
  5255                           ;m25p16.c: 147: if (one_read_zero_write)
  5256  0ACB  082D               	movf	read_write_flash_ram@one_read_zero_write,w
  5257  0ACC  1903               	btfsc	3,2
  5258  0ACD  2ADF               	goto	l2580
  5259                           
  5260                           ;m25p16.c: 148: {
  5261                           ;m25p16.c: 149: mem_ptr[i] = ReadSPI();
  5262  0ACE  160A  118A  249D  120A  158A  	fcall	_ReadSPI
  5263  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  5264  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  5265  0AD5  00AB               	movwf	??_read_write_flash_ram
  5266  0AD6  082E               	movf	read_write_flash_ram@i,w
  5267  0AD7  072A               	addwf	read_write_flash_ram@mem_ptr,w
  5268  0AD8  00AC               	movwf	??_read_write_flash_ram+1
  5269  0AD9  082C               	movf	??_read_write_flash_ram+1,w
  5270  0ADA  0084               	movwf	4
  5271  0ADB  082B               	movf	??_read_write_flash_ram,w
  5272  0ADC  1383               	bcf	3,7	;select IRP bank0
  5273  0ADD  0080               	movwf	0
  5274                           
  5275                           ;m25p16.c: 150: }
  5276  0ADE  2AEB               	goto	l2582
  5277  0ADF                     l2580:	
  5278                           
  5279                           ;m25p16.c: 151: else
  5280                           ;m25p16.c: 152: {
  5281                           ;m25p16.c: 153: WriteSPI(mem_ptr[i]);
  5282  0ADF  082E               	movf	read_write_flash_ram@i,w
  5283  0AE0  072A               	addwf	read_write_flash_ram@mem_ptr,w
  5284  0AE1  00AB               	movwf	??_read_write_flash_ram
  5285  0AE2  082B               	movf	??_read_write_flash_ram,w
  5286  0AE3  0084               	movwf	4
  5287  0AE4  1383               	bcf	3,7	;select IRP bank0
  5288  0AE5  0800               	movf	0,w
  5289  0AE6  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  5290  0AEB                     l2582:	
  5291  0AEB  3001               	movlw	1
  5292  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  5293  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  5294  0AEE  07AE               	addwf	read_write_flash_ram@i,f
  5295  0AEF  1803               	skipnc
  5296  0AF0  0AAF               	incf	read_write_flash_ram@i+1,f
  5297  0AF1  3000               	movlw	0
  5298  0AF2  07AF               	addwf	read_write_flash_ram@i+1,f
  5299  0AF3  2AC3               	goto	l2584
  5300  0AF4                     l595:	
  5301                           
  5302                           ;m25p16.c: 154: }
  5303                           ;m25p16.c: 155: }
  5304                           ;m25p16.c: 157: RD3 = 1;
  5305  0AF4  1588               	bsf	8,3	;volatile
  5306                           
  5307                           ;m25p16.c: 159: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5308  0AF5  0000               	nop
  5309  0AF6                     l2588:	
  5310                           ;m25p16.c: 160: while (read_ram_status() & 0b00000011) {
  5311                           
  5312  0AF6  160A  118A  253B  120A  158A  	fcall	_read_ram_status
  5313  0AFB  3903               	andlw	3
  5314  0AFC  1903               	btfsc	3,2
  5315  0AFD  0008               	return
  5316                           
  5317                           ;m25p16.c: 161: _delay((unsigned long)((1)*(4000000/4000.0)));
  5318  0AFE  30C7               	movlw	199
  5319  0AFF  1283               	bcf	3,5	;RP0=0, select bank0
  5320  0B00  1303               	bcf	3,6	;RP1=0, select bank0
  5321  0B01  00AB               	movwf	??_read_write_flash_ram
  5322  0B02                     u2887:	
  5323  0B02  2B03               	nop2
  5324  0B03  0BAB               	decfsz	??_read_write_flash_ram,f
  5325  0B04  2B02               	goto	u2887
  5326  0B05  2B06               	nop2
  5327  0B06  2AF6               	goto	l2588
  5328  0B07                     __end_of_read_write_flash_ram:	
  5329                           
  5330                           	psect	text17
  5331  153B                     __ptext17:	
  5332 ;; *************** function _read_ram_status *****************
  5333 ;; Defined at:
  5334 ;;		line 57 in file "m25p16.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;		None
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  status          1    4[BANK0 ] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      unsigned char 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0, pclath, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5348 ;;      Params:         0       0       0       0       0
  5349 ;;      Locals:         0       1       0       0       0
  5350 ;;      Temps:          0       1       0       0       0
  5351 ;;      Totals:         0       2       0       0       0
  5352 ;;Total ram usage:        2 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    4
  5355 ;; This function calls:
  5356 ;;		_ReadSPI
  5357 ;;		_WriteSPI
  5358 ;; This function is called by:
  5359 ;;		_ReceivedPacketHandler
  5360 ;;		_ram_bulk_erase
  5361 ;;		_read_write_flash_ram
  5362 ;;		_write_ram_status
  5363 ;;		_ram_sector_erase
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           
  5368                           ;psect for function _read_ram_status
  5369  153B                     _read_ram_status:	
  5370                           
  5371                           ;m25p16.c: 59: unsigned char status;
  5372                           ;m25p16.c: 60: RD3 = 0;
  5373                           
  5374                           ;incstack = 0
  5375                           ; Regs used in _read_ram_status: [wreg+status,2+status,0+pclath+cstack]
  5376  153B  1283               	bcf	3,5	;RP0=0, select bank0
  5377  153C  1303               	bcf	3,6	;RP1=0, select bank0
  5378  153D  1188               	bcf	8,3	;volatile
  5379                           
  5380                           ;m25p16.c: 61: WriteSPI(0x05);
  5381  153E  3005               	movlw	5
  5382  153F  160A  118A  24D8  160A  118A  	fcall	_WriteSPI
  5383                           
  5384                           ;m25p16.c: 62: status = ReadSPI();
  5385  1544  160A  118A  249D   	fcall	_ReadSPI
  5386  1547  1283               	bcf	3,5	;RP0=0, select bank0
  5387  1548  1303               	bcf	3,6	;RP1=0, select bank0
  5388  1549  00A3               	movwf	??_read_ram_status
  5389  154A  0823               	movf	??_read_ram_status,w
  5390  154B  00A4               	movwf	read_ram_status@status
  5391                           
  5392                           ;m25p16.c: 63: RD3 = 1;
  5393  154C  1588               	bsf	8,3	;volatile
  5394                           
  5395                           ;m25p16.c: 64: return status;
  5396  154D  0824               	movf	read_ram_status@status,w
  5397  154E  0008               	return
  5398  154F                     __end_of_read_ram_status:	
  5399                           
  5400                           	psect	text18
  5401  08A1                     __ptext18:	
  5402 ;; *************** function ___llmod *****************
  5403 ;; Defined at:
  5404 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  divisor         4    0[BANK0 ] unsigned long 
  5407 ;;  dividend        4    4[BANK0 ] unsigned long 
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;  counter         1    9[BANK0 ] unsigned char 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  4    0[BANK0 ] unsigned long 
  5412 ;; Registers used:
  5413 ;;		wreg, status,2, status,0
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5419 ;;      Params:         0       8       0       0       0
  5420 ;;      Locals:         0       1       0       0       0
  5421 ;;      Temps:          0       1       0       0       0
  5422 ;;      Totals:         0      10       0       0       0
  5423 ;;Total ram usage:       10 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    2
  5426 ;; This function calls:
  5427 ;;		Nothing
  5428 ;; This function is called by:
  5429 ;;		_SendMemoryData
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           
  5434                           ;psect for function ___llmod
  5435  08A1                     ___llmod:	
  5436                           
  5437                           ;incstack = 0
  5438                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5439  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  5440  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  5441  08A3  0823               	movf	___llmod@divisor+3,w
  5442  08A4  0422               	iorwf	___llmod@divisor+2,w
  5443  08A5  0421               	iorwf	___llmod@divisor+1,w
  5444  08A6  0420               	iorwf	___llmod@divisor,w
  5445  08A7  1903               	skipnz
  5446  08A8  28E6               	goto	l2606
  5447  08A9  01A9               	clrf	___llmod@counter
  5448  08AA  0AA9               	incf	___llmod@counter,f
  5449  08AB                     l2596:	
  5450  08AB  1BA3               	btfsc	___llmod@divisor+3,7
  5451  08AC  28BB               	goto	l2598
  5452  08AD  3001               	movlw	1
  5453  08AE  00A8               	movwf	??___llmod
  5454  08AF                     u1615:	
  5455  08AF  1003               	clrc
  5456  08B0  0DA0               	rlf	___llmod@divisor,f
  5457  08B1  0DA1               	rlf	___llmod@divisor+1,f
  5458  08B2  0DA2               	rlf	___llmod@divisor+2,f
  5459  08B3  0DA3               	rlf	___llmod@divisor+3,f
  5460  08B4  0BA8               	decfsz	??___llmod,f
  5461  08B5  28AF               	goto	u1615
  5462  08B6  3001               	movlw	1
  5463  08B7  00A8               	movwf	??___llmod
  5464  08B8  0828               	movf	??___llmod,w
  5465  08B9  07A9               	addwf	___llmod@counter,f
  5466  08BA  28AB               	goto	l2596
  5467  08BB                     l2598:	
  5468  08BB  0823               	movf	___llmod@divisor+3,w
  5469  08BC  0227               	subwf	___llmod@dividend+3,w
  5470  08BD  1D03               	skipz
  5471  08BE  28C9               	goto	u1635
  5472  08BF  0822               	movf	___llmod@divisor+2,w
  5473  08C0  0226               	subwf	___llmod@dividend+2,w
  5474  08C1  1D03               	skipz
  5475  08C2  28C9               	goto	u1635
  5476  08C3  0821               	movf	___llmod@divisor+1,w
  5477  08C4  0225               	subwf	___llmod@dividend+1,w
  5478  08C5  1D03               	skipz
  5479  08C6  28C9               	goto	u1635
  5480  08C7  0820               	movf	___llmod@divisor,w
  5481  08C8  0224               	subwf	___llmod@dividend,w
  5482  08C9                     u1635:	
  5483  08C9  1C03               	skipc
  5484  08CA  28D9               	goto	l2602
  5485  08CB  0820               	movf	___llmod@divisor,w
  5486  08CC  02A4               	subwf	___llmod@dividend,f
  5487  08CD  0821               	movf	___llmod@divisor+1,w
  5488  08CE  1C03               	skipc
  5489  08CF  0F21               	incfsz	___llmod@divisor+1,w
  5490  08D0  02A5               	subwf	___llmod@dividend+1,f
  5491  08D1  0822               	movf	___llmod@divisor+2,w
  5492  08D2  1C03               	skipc
  5493  08D3  0F22               	incfsz	___llmod@divisor+2,w
  5494  08D4  02A6               	subwf	___llmod@dividend+2,f
  5495  08D5  0823               	movf	___llmod@divisor+3,w
  5496  08D6  1C03               	skipc
  5497  08D7  0F23               	incfsz	___llmod@divisor+3,w
  5498  08D8  02A7               	subwf	___llmod@dividend+3,f
  5499  08D9                     l2602:	
  5500  08D9  3001               	movlw	1
  5501  08DA                     u1645:	
  5502  08DA  1003               	clrc
  5503  08DB  0CA3               	rrf	___llmod@divisor+3,f
  5504  08DC  0CA2               	rrf	___llmod@divisor+2,f
  5505  08DD  0CA1               	rrf	___llmod@divisor+1,f
  5506  08DE  0CA0               	rrf	___llmod@divisor,f
  5507  08DF  3EFF               	addlw	-1
  5508  08E0  1D03               	skipz
  5509  08E1  28DA               	goto	u1645
  5510  08E2  3001               	movlw	1
  5511  08E3  02A9               	subwf	___llmod@counter,f
  5512  08E4  1D03               	btfss	3,2
  5513  08E5  28BB               	goto	l2598
  5514  08E6                     l2606:	
  5515  08E6  0827               	movf	___llmod@dividend+3,w
  5516  08E7  00A3               	movwf	?___llmod+3
  5517  08E8  0826               	movf	___llmod@dividend+2,w
  5518  08E9  00A2               	movwf	?___llmod+2
  5519  08EA  0825               	movf	___llmod@dividend+1,w
  5520  08EB  00A1               	movwf	?___llmod+1
  5521  08EC  0824               	movf	___llmod@dividend,w
  5522  08ED  00A0               	movwf	?___llmod
  5523  08EE  0008               	return
  5524  08EF                     __end_of___llmod:	
  5525                           
  5526                           	psect	text19
  5527  1698                     __ptext19:	
  5528 ;; *************** function _ReadMemoryAdress *****************
  5529 ;; Defined at:
  5530 ;;		line 998 in file "functions.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;  var3            1    wreg     PTR unsigned char 
  5533 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), IncreaseMemoryAdress@addr3(1), 
  5534 ;;  var2            1    2[BANK0 ] PTR unsigned char 
  5535 ;;		 -> SendMemoryData@addr2(1), saveDataToFlash@addr2(1), IncreaseMemoryAdress@addr2(1), 
  5536 ;;  var1            1    3[BANK0 ] PTR unsigned char 
  5537 ;;		 -> SendMemoryData@addr1(1), saveDataToFlash@addr1(1), IncreaseMemoryAdress@addr1(1), 
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;  var3            1    5[BANK0 ] PTR unsigned char 
  5540 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), IncreaseMemoryAdress@addr3(1), 
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5550 ;;      Params:         0       2       0       0       0
  5551 ;;      Locals:         0       1       0       0       0
  5552 ;;      Temps:          0       1       0       0       0
  5553 ;;      Totals:         0       4       0       0       0
  5554 ;;Total ram usage:        4 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    3
  5557 ;; This function calls:
  5558 ;;		_eeprom_read
  5559 ;; This function is called by:
  5560 ;;		_IncreaseMemoryAdress
  5561 ;;		_saveDataToFlash
  5562 ;;		_SendMemoryData
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           
  5567                           ;psect for function _ReadMemoryAdress
  5568  1698                     _ReadMemoryAdress:	
  5569                           
  5570                           ;incstack = 0
  5571                           ; Regs used in _ReadMemoryAdress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5572                           ;ReadMemoryAdress@var3 stored from wreg
  5573  1698  1283               	bcf	3,5	;RP0=0, select bank0
  5574  1699  1303               	bcf	3,6	;RP1=0, select bank0
  5575  169A  00A5               	movwf	ReadMemoryAdress@var3
  5576                           
  5577                           ;functions.c: 1000: *var3 = eeprom_read(1);
  5578  169B  3001               	movlw	1
  5579  169C  160A  118A  25FE  160A  118A  	fcall	_eeprom_read
  5580  16A1  1283               	bcf	3,5	;RP0=0, select bank0
  5581  16A2  1303               	bcf	3,6	;RP1=0, select bank0
  5582  16A3  00A4               	movwf	??_ReadMemoryAdress
  5583  16A4  0825               	movf	ReadMemoryAdress@var3,w
  5584  16A5  0084               	movwf	4
  5585  16A6  0824               	movf	??_ReadMemoryAdress,w
  5586  16A7  1383               	bcf	3,7	;select IRP bank0
  5587  16A8  0080               	movwf	0
  5588                           
  5589                           ;functions.c: 1001: *var2 = eeprom_read(2);
  5590  16A9  3002               	movlw	2
  5591  16AA  160A  118A  25FE  160A  118A  	fcall	_eeprom_read
  5592  16AF  1283               	bcf	3,5	;RP0=0, select bank0
  5593  16B0  1303               	bcf	3,6	;RP1=0, select bank0
  5594  16B1  00A4               	movwf	??_ReadMemoryAdress
  5595  16B2  0822               	movf	ReadMemoryAdress@var2,w
  5596  16B3  0084               	movwf	4
  5597  16B4  0824               	movf	??_ReadMemoryAdress,w
  5598  16B5  1383               	bcf	3,7	;select IRP bank0
  5599  16B6  0080               	movwf	0
  5600                           
  5601                           ;functions.c: 1002: *var1 = eeprom_read(3);
  5602  16B7  3003               	movlw	3
  5603  16B8  160A  118A  25FE   	fcall	_eeprom_read
  5604  16BB  1283               	bcf	3,5	;RP0=0, select bank0
  5605  16BC  1303               	bcf	3,6	;RP1=0, select bank0
  5606  16BD  00A4               	movwf	??_ReadMemoryAdress
  5607  16BE  0823               	movf	ReadMemoryAdress@var1,w
  5608  16BF  0084               	movwf	4
  5609  16C0  0824               	movf	??_ReadMemoryAdress,w
  5610  16C1  1383               	bcf	3,7	;select IRP bank0
  5611  16C2  0080               	movwf	0
  5612  16C3  0008               	return
  5613  16C4                     __end_of_ReadMemoryAdress:	
  5614                           
  5615                           	psect	text20
  5616  1583                     __ptext20:	
  5617 ;; *************** function _ResetMemoryAdress *****************
  5618 ;; Defined at:
  5619 ;;		line 1086 in file "functions.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;		None
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0, pclath, cstack
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5633 ;;      Params:         0       0       0       0       0
  5634 ;;      Locals:         0       0       0       0       0
  5635 ;;      Temps:          0       0       0       0       0
  5636 ;;      Totals:         0       0       0       0       0
  5637 ;;Total ram usage:        0 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    3
  5640 ;; This function calls:
  5641 ;;		_eeprom_write
  5642 ;; This function is called by:
  5643 ;;		_ReceivedPacketHandler
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           
  5648                           ;psect for function _ResetMemoryAdress
  5649  1583                     _ResetMemoryAdress:	
  5650                           
  5651                           ;functions.c: 1088: eeprom_write(3,0);
  5652                           
  5653                           ;incstack = 0
  5654                           ; Regs used in _ResetMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  5655  1583  1283               	bcf	3,5	;RP0=0, select bank0
  5656  1584  1303               	bcf	3,6	;RP1=0, select bank0
  5657  1585  01A0               	clrf	eeprom_write@value
  5658  1586  3003               	movlw	3
  5659  1587  160A  118A  271C  160A  118A  	fcall	_eeprom_write
  5660                           
  5661                           ;functions.c: 1089: eeprom_write(2,0);
  5662  158C  1283               	bcf	3,5	;RP0=0, select bank0
  5663  158D  1303               	bcf	3,6	;RP1=0, select bank0
  5664  158E  01A0               	clrf	eeprom_write@value
  5665  158F  3002               	movlw	2
  5666  1590  160A  118A  271C  160A  118A  	fcall	_eeprom_write
  5667                           
  5668                           ;functions.c: 1090: eeprom_write(1,0);
  5669  1595  1283               	bcf	3,5	;RP0=0, select bank0
  5670  1596  1303               	bcf	3,6	;RP1=0, select bank0
  5671  1597  01A0               	clrf	eeprom_write@value
  5672  1598  3001               	movlw	1
  5673  1599  160A  118A  271C   	fcall	_eeprom_write
  5674  159C  0008               	return
  5675  159D                     __end_of_ResetMemoryAdress:	
  5676                           
  5677                           	psect	text21
  5678  171C                     __ptext21:	
  5679 ;; *************** function _eeprom_write *****************
  5680 ;; Defined at:
  5681 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eewrite.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  addr            1    wreg     unsigned char 
  5684 ;;  value           1    0[BANK0 ] unsigned char 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;  addr            1    2[BANK0 ] unsigned char 
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      void 
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5696 ;;      Params:         0       1       0       0       0
  5697 ;;      Locals:         0       1       0       0       0
  5698 ;;      Temps:          0       1       0       0       0
  5699 ;;      Totals:         0       3       0       0       0
  5700 ;;Total ram usage:        3 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    2
  5703 ;; This function calls:
  5704 ;;		Nothing
  5705 ;; This function is called by:
  5706 ;;		_ReceivedPacketHandler
  5707 ;;		_WriteMemoryAdress
  5708 ;;		_ResetMemoryAdress
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           
  5713                           ;psect for function _eeprom_write
  5714  171C                     _eeprom_write:	
  5715                           
  5716                           ;incstack = 0
  5717                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  5718                           ;eeprom_write@addr stored from wreg
  5719  171C  1283               	bcf	3,5	;RP0=0, select bank0
  5720  171D  1303               	bcf	3,6	;RP1=0, select bank0
  5721  171E  00A2               	movwf	eeprom_write@addr
  5722  171F                     l702:	
  5723  171F  1683               	bsf	3,5	;RP0=1, select bank3
  5724  1720  1703               	bsf	3,6	;RP1=1, select bank3
  5725  1721  188C               	btfsc	12,1	;volsfr
  5726  1722  2F1F               	goto	l702
  5727  1723  1283               	bcf	3,5	;RP0=0, select bank0
  5728  1724  1303               	bcf	3,6	;RP1=0, select bank0
  5729  1725  0822               	movf	eeprom_write@addr,w
  5730  1726  1283               	bcf	3,5	;RP0=0, select bank2
  5731  1727  1703               	bsf	3,6	;RP1=1, select bank2
  5732  1728  008D               	movwf	13	;volatile
  5733  1729  1283               	bcf	3,5	;RP0=0, select bank0
  5734  172A  1303               	bcf	3,6	;RP1=0, select bank0
  5735  172B  0820               	movf	eeprom_write@value,w
  5736  172C  1283               	bcf	3,5	;RP0=0, select bank2
  5737  172D  1703               	bsf	3,6	;RP1=1, select bank2
  5738  172E  008C               	movwf	12	;volatile
  5739  172F  303F               	movlw	63
  5740  1730  1283               	bcf	3,5	;RP0=0, select bank0
  5741  1731  1303               	bcf	3,6	;RP1=0, select bank0
  5742  1732  00A1               	movwf	??_eeprom_write
  5743  1733  0821               	movf	??_eeprom_write,w
  5744  1734  1683               	bsf	3,5	;RP0=1, select bank3
  5745  1735  1703               	bsf	3,6	;RP1=1, select bank3
  5746  1736  058C               	andwf	12,f	;volsfr
  5747  1737  1283               	bcf	3,5	;RP0=0, select bank0
  5748  1738  1303               	bcf	3,6	;RP1=0, select bank0
  5749  1739  1003               	bcf	3,0	;volatile
  5750  173A  1B8B               	btfsc	11,7	;volatile
  5751  173B  1403               	bsf	3,0	;volatile
  5752  173C  138B               	bcf	11,7	;volatile
  5753  173D  1683               	bsf	3,5	;RP0=1, select bank3
  5754  173E  1703               	bsf	3,6	;RP1=1, select bank3
  5755  173F  150C               	bsf	12,2	;volsfr
  5756  1740  3055               	movlw	85
  5757  1741  008D               	movwf	13	;volsfr
  5758  1742  30AA               	movlw	170
  5759  1743  008D               	movwf	13	;volsfr
  5760  1744  148C               	bsf	12,1	;volsfr
  5761  1745  110C               	bcf	12,2	;volsfr
  5762  1746  1283               	bcf	3,5	;RP0=0, select bank0
  5763  1747  1303               	bcf	3,6	;RP1=0, select bank0
  5764  1748  1C03               	btfss	3,0	;volatile
  5765  1749  0008               	return
  5766  174A  178B               	bsf	11,7	;volatile
  5767  174B  0008               	return
  5768  174C                     __end_of_eeprom_write:	
  5769                           
  5770                           	psect	text22
  5771  14B6                     __ptext22:	
  5772 ;; *************** function _OperationMode *****************
  5773 ;; Defined at:
  5774 ;;		line 974 in file "functions.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;		None
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  bracketStatu    1    1[BANK0 ] unsigned char 
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  1    wreg      unsigned char 
  5781 ;; Registers used:
  5782 ;;		wreg, status,2
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5788 ;;      Params:         0       0       0       0       0
  5789 ;;      Locals:         0       1       0       0       0
  5790 ;;      Temps:          0       1       0       0       0
  5791 ;;      Totals:         0       2       0       0       0
  5792 ;;Total ram usage:        2 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    2
  5795 ;; This function calls:
  5796 ;;		Nothing
  5797 ;; This function is called by:
  5798 ;;		_main
  5799 ;;		_ReceivedPacketHandler
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           
  5804                           ;psect for function _OperationMode
  5805  14B6                     _OperationMode:	
  5806                           
  5807                           ;functions.c: 976: unsigned char bracketStatus;
  5808                           ;functions.c: 977: bracketStatus = (PORTD & 0b00000111) ;
  5809                           
  5810                           ;incstack = 0
  5811                           ; Regs used in _OperationMode: [wreg+status,2]
  5812  14B6  1283               	bcf	3,5	;RP0=0, select bank0
  5813  14B7  1303               	bcf	3,6	;RP1=0, select bank0
  5814  14B8  0808               	movf	8,w	;volatile
  5815  14B9  3907               	andlw	7
  5816  14BA  00A0               	movwf	??_OperationMode
  5817  14BB  0820               	movf	??_OperationMode,w
  5818  14BC  00A1               	movwf	OperationMode@bracketStatus
  5819                           
  5820                           ;functions.c: 979: return bracketStatus;
  5821  14BD  0821               	movf	OperationMode@bracketStatus,w
  5822  14BE  0008               	return
  5823  14BF                     __end_of_OperationMode:	
  5824                           
  5825                           	psect	text23
  5826  14E6                     __ptext23:	
  5827 ;; *************** function _ReadFIFO *****************
  5828 ;; Defined at:
  5829 ;;		line 785 in file "functions.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;		None
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;  value           1    4[BANK0 ] unsigned char 
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      unsigned char 
  5836 ;; Registers used:
  5837 ;;		wreg, status,2, status,0, pclath, cstack
  5838 ;; Tracked objects:
  5839 ;;		On entry : 0/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5843 ;;      Params:         0       0       0       0       0
  5844 ;;      Locals:         0       1       0       0       0
  5845 ;;      Temps:          0       1       0       0       0
  5846 ;;      Totals:         0       2       0       0       0
  5847 ;;Total ram usage:        2 bytes
  5848 ;; Hardware stack levels used:    1
  5849 ;; Hardware stack levels required when called:    4
  5850 ;; This function calls:
  5851 ;;		_ReadSPI
  5852 ;; This function is called by:
  5853 ;;		_TransiverReadFIFO
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           
  5858                           ;psect for function _ReadFIFO
  5859  14E6                     _ReadFIFO:	
  5860                           
  5861                           ;functions.c: 787: BYTE value;
  5862                           ;functions.c: 788: RA5 = 0;
  5863                           
  5864                           ;incstack = 0
  5865                           ; Regs used in _ReadFIFO: [wreg+status,2+status,0+pclath+cstack]
  5866  14E6  1283               	bcf	3,5	;RP0=0, select bank0
  5867  14E7  1303               	bcf	3,6	;RP1=0, select bank0
  5868  14E8  1285               	bcf	5,5	;volatile
  5869                           
  5870                           ;functions.c: 789: value = ReadSPI();
  5871  14E9  160A  118A  249D   	fcall	_ReadSPI
  5872  14EC  1283               	bcf	3,5	;RP0=0, select bank0
  5873  14ED  1303               	bcf	3,6	;RP1=0, select bank0
  5874  14EE  00A3               	movwf	??_ReadFIFO
  5875  14EF  0823               	movf	??_ReadFIFO,w
  5876  14F0  00A4               	movwf	ReadFIFO@value
  5877                           
  5878                           ;functions.c: 790: RA5 = 1;
  5879  14F1  1685               	bsf	5,5	;volatile
  5880                           
  5881                           ;functions.c: 791: return value;
  5882  14F2  0824               	movf	ReadFIFO@value,w
  5883  14F3  0008               	return
  5884  14F4                     __end_of_ReadFIFO:	
  5885                           
  5886                           	psect	text24
  5887  0D31                     __ptext24:	
  5888 ;; *************** function _TransiverInit *****************
  5889 ;; Defined at:
  5890 ;;		line 550 in file "functions.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;		None
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5904 ;;      Params:         0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0
  5906 ;;      Temps:          0       1       0       0       0
  5907 ;;      Totals:         0       1       0       0       0
  5908 ;;Total ram usage:        1 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    7
  5911 ;; This function calls:
  5912 ;;		_Blink
  5913 ;;		_FindChannel
  5914 ;;		_RegisterRead
  5915 ;;		_RegisterSet
  5916 ;;		_SetRFMode
  5917 ;; This function is called by:
  5918 ;;		_main
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           
  5923                           ;psect for function _TransiverInit
  5924  0D31                     _TransiverInit:	
  5925                           
  5926                           ;functions.c: 553: RegisterSet(0x00, 0x30);
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in _TransiverInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5930  0D31  3030               	movlw	48
  5931  0D32  1283               	bcf	3,5	;RP0=0, select bank0
  5932  0D33  1303               	bcf	3,6	;RP1=0, select bank0
  5933  0D34  00B5               	movwf	??_TransiverInit
  5934  0D35  0835               	movf	??_TransiverInit,w
  5935  0D36  00A7               	movwf	RegisterSet@value
  5936  0D37  3000               	movlw	0
  5937  0D38  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  5938                           
  5939                           ;functions.c: 554: RegisterSet(0x01,(0xA8));
  5940  0D3D  30A8               	movlw	168
  5941  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  5942  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  5943  0D40  00B5               	movwf	??_TransiverInit
  5944  0D41  0835               	movf	??_TransiverInit,w
  5945  0D42  00A7               	movwf	RegisterSet@value
  5946  0D43  3001               	movlw	1
  5947  0D44  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  5948                           
  5949                           ;functions.c: 555: RegisterSet(0x02, 0x09);
  5950  0D49  3009               	movlw	9
  5951  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  5952  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  5953  0D4C  00B5               	movwf	??_TransiverInit
  5954  0D4D  0835               	movf	??_TransiverInit,w
  5955  0D4E  00A7               	movwf	RegisterSet@value
  5956  0D4F  3002               	movlw	2
  5957  0D50  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  5958                           
  5959                           ;functions.c: 556: RegisterSet(0x03, 0x07);
  5960  0D55  3007               	movlw	7
  5961  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  5962  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  5963  0D58  00B5               	movwf	??_TransiverInit
  5964  0D59  0835               	movf	??_TransiverInit,w
  5965  0D5A  00A7               	movwf	RegisterSet@value
  5966  0D5B  3003               	movlw	3
  5967  0D5C  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  5968                           
  5969                           ;functions.c: 557: RegisterSet(0x05,(0x0A));
  5970  0D61  300A               	movlw	10
  5971  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  5972  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  5973  0D64  00B5               	movwf	??_TransiverInit
  5974  0D65  0835               	movf	??_TransiverInit,w
  5975  0D66  00A7               	movwf	RegisterSet@value
  5976  0D67  3005               	movlw	5
  5977  0D68  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  5978                           
  5979                           ;functions.c: 558: RegisterSet(0x0D,(0x00|0xB0|0x09));
  5980  0D6D  30B9               	movlw	185
  5981  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
  5982  0D6F  1303               	bcf	3,6	;RP1=0, select bank0
  5983  0D70  00B5               	movwf	??_TransiverInit
  5984  0D71  0835               	movf	??_TransiverInit,w
  5985  0D72  00A7               	movwf	RegisterSet@value
  5986  0D73  300D               	movlw	13
  5987  0D74  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  5988                           
  5989                           ;functions.c: 559: RegisterSet(0x0E,(0x01|0x10|0x01));
  5990  0D79  3011               	movlw	17
  5991  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  5992  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  5993  0D7C  00B5               	movwf	??_TransiverInit
  5994  0D7D  0835               	movf	??_TransiverInit,w
  5995  0D7E  00A7               	movwf	RegisterSet@value
  5996  0D7F  300E               	movlw	14
  5997  0D80  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  5998                           
  5999                           ;functions.c: 560: RegisterSet(0x10, 0xA3);
  6000  0D85  30A3               	movlw	163
  6001  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  6002  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  6003  0D88  00B5               	movwf	??_TransiverInit
  6004  0D89  0835               	movf	??_TransiverInit,w
  6005  0D8A  00A7               	movwf	RegisterSet@value
  6006  0D8B  3010               	movlw	16
  6007  0D8C  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6008                           
  6009                           ;functions.c: 561: RegisterSet(0x12,(0x18|0x20|0x06));
  6010  0D91  303E               	movlw	62
  6011  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  6012  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  6013  0D94  00B5               	movwf	??_TransiverInit
  6014  0D95  0835               	movf	??_TransiverInit,w
  6015  0D96  00A7               	movwf	RegisterSet@value
  6016  0D97  3012               	movlw	18
  6017  0D98  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6018                           
  6019                           ;functions.c: 562: RegisterSet(0x16,('S'));
  6020  0D9D  3053               	movlw	83
  6021  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  6022  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  6023  0DA0  00B5               	movwf	??_TransiverInit
  6024  0DA1  0835               	movf	??_TransiverInit,w
  6025  0DA2  00A7               	movwf	RegisterSet@value
  6026  0DA3  3016               	movlw	22
  6027  0DA4  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6028                           
  6029                           ;functions.c: 563: RegisterSet(0x17,('Y'));
  6030  0DA9  3059               	movlw	89
  6031  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
  6032  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
  6033  0DAC  00B5               	movwf	??_TransiverInit
  6034  0DAD  0835               	movf	??_TransiverInit,w
  6035  0DAE  00A7               	movwf	RegisterSet@value
  6036  0DAF  3017               	movlw	23
  6037  0DB0  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6038                           
  6039                           ;functions.c: 564: RegisterSet(0x18,('N'));
  6040  0DB5  304E               	movlw	78
  6041  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  6042  0DB7  1303               	bcf	3,6	;RP1=0, select bank0
  6043  0DB8  00B5               	movwf	??_TransiverInit
  6044  0DB9  0835               	movf	??_TransiverInit,w
  6045  0DBA  00A7               	movwf	RegisterSet@value
  6046  0DBB  3018               	movlw	24
  6047  0DBC  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6048                           
  6049                           ;functions.c: 565: RegisterSet(0x19,('C'));
  6050  0DC1  3043               	movlw	67
  6051  0DC2  1283               	bcf	3,5	;RP0=0, select bank0
  6052  0DC3  1303               	bcf	3,6	;RP1=0, select bank0
  6053  0DC4  00B5               	movwf	??_TransiverInit
  6054  0DC5  0835               	movf	??_TransiverInit,w
  6055  0DC6  00A7               	movwf	RegisterSet@value
  6056  0DC7  3019               	movlw	25
  6057  0DC8  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6058                           
  6059                           ;functions.c: 566: RegisterSet(0x1A, 0x72);
  6060  0DCD  3072               	movlw	114
  6061  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  6062  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  6063  0DD0  00B5               	movwf	??_TransiverInit
  6064  0DD1  0835               	movf	??_TransiverInit,w
  6065  0DD2  00A7               	movwf	RegisterSet@value
  6066  0DD3  301A               	movlw	26
  6067  0DD4  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6068                           
  6069                           ;functions.c: 567: RegisterSet(0x1B, 0x3C);
  6070  0DD9  303C               	movlw	60
  6071  0DDA  1283               	bcf	3,5	;RP0=0, select bank0
  6072  0DDB  1303               	bcf	3,6	;RP1=0, select bank0
  6073  0DDC  00B5               	movwf	??_TransiverInit
  6074  0DDD  0835               	movf	??_TransiverInit,w
  6075  0DDE  00A7               	movwf	RegisterSet@value
  6076  0DDF  301B               	movlw	27
  6077  0DE0  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6078                           
  6079                           ;functions.c: 568: RegisterSet(0x1F, 0x80);
  6080  0DE5  3080               	movlw	128
  6081  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  6082  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  6083  0DE8  00B5               	movwf	??_TransiverInit
  6084  0DE9  0835               	movf	??_TransiverInit,w
  6085  0DEA  00A7               	movwf	RegisterSet@value
  6086  0DEB  301F               	movlw	31
  6087  0DEC  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6088                           
  6089                           ;functions.c: 569: RegisterSet(0x00, (RegisterRead(0x00)|0x01));
  6090  0DF1  3000               	movlw	0
  6091  0DF2  160A  118A  259D  120A  158A  	fcall	_RegisterRead
  6092  0DF7  3801               	iorlw	1
  6093  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  6094  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  6095  0DFA  00B5               	movwf	??_TransiverInit
  6096  0DFB  0835               	movf	??_TransiverInit,w
  6097  0DFC  00A7               	movwf	RegisterSet@value
  6098  0DFD  3000               	movlw	0
  6099  0DFE  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6100                           
  6101                           ;functions.c: 571: if(FindChannel() == 1)
  6102  0E03  120A  158A  2708  120A  158A  	fcall	_FindChannel
  6103  0E08  3A01               	xorlw	1
  6104  0E09  1D03               	skipz
  6105  0E0A  2E16               	goto	l3106
  6106                           
  6107                           ;functions.c: 572: Blink(1);
  6108  0E0B  3001               	movlw	1
  6109  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  6110  0E0D  1303               	bcf	3,6	;RP1=0, select bank0
  6111  0E0E  00A6               	movwf	Blink@n
  6112  0E0F  3000               	movlw	0
  6113  0E10  00A7               	movwf	Blink@n+1
  6114  0E11  160A  118A  274C  120A  158A  	fcall	_Blink
  6115  0E16                     l3106:	
  6116                           
  6117                           ;functions.c: 573: SetRFMode(0x00);
  6118  0E16  3000               	movlw	0
  6119  0E17  120A  158A  221C   	fcall	_SetRFMode
  6120  0E1A  0008               	return
  6121  0E1B                     __end_of_TransiverInit:	
  6122                           
  6123                           	psect	text25
  6124  174C                     __ptext25:	
  6125 ;; *************** function _Blink *****************
  6126 ;; Defined at:
  6127 ;;		line 698 in file "functions.c"
  6128 ;; Parameters:    Size  Location     Type
  6129 ;;  n               2    6[BANK0 ] int 
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;  i               2    9[BANK0 ] int 
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  1    wreg      void 
  6134 ;; Registers used:
  6135 ;;		wreg, status,2, status,0, pclath, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6141 ;;      Params:         0       2       0       0       0
  6142 ;;      Locals:         0       2       0       0       0
  6143 ;;      Temps:          0       1       0       0       0
  6144 ;;      Totals:         0       5       0       0       0
  6145 ;;Total ram usage:        5 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    3
  6148 ;; This function calls:
  6149 ;;		_DelayDs
  6150 ;; This function is called by:
  6151 ;;		_TransiverInit
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           
  6156                           ;psect for function _Blink
  6157  174C                     _Blink:	
  6158                           
  6159                           ;functions.c: 700: for(int i = 1;i<=n;i++)
  6160                           
  6161                           ;incstack = 0
  6162                           ; Regs used in _Blink: [wreg+status,2+status,0+pclath+cstack]
  6163  174C  3001               	movlw	1
  6164  174D  1283               	bcf	3,5	;RP0=0, select bank0
  6165  174E  1303               	bcf	3,6	;RP1=0, select bank0
  6166  174F  00A9               	movwf	Blink@i
  6167  1750  3000               	movlw	0
  6168  1751  00AA               	movwf	Blink@i+1
  6169  1752                     l2946:	
  6170  1752  0827               	movf	Blink@n+1,w
  6171  1753  3A80               	xorlw	128
  6172  1754  00A8               	movwf	??_Blink
  6173  1755  082A               	movf	Blink@i+1,w
  6174  1756  3A80               	xorlw	128
  6175  1757  0228               	subwf	??_Blink,w
  6176  1758  1D03               	skipz
  6177  1759  2F5C               	goto	u2215
  6178  175A  0829               	movf	Blink@i,w
  6179  175B  0226               	subwf	Blink@n,w
  6180  175C                     u2215:	
  6181  175C  1C03               	btfss	3,0
  6182  175D  0008               	return
  6183                           
  6184                           ;functions.c: 701: {
  6185                           ;functions.c: 702: RC1 = 1;
  6186  175E  1283               	bcf	3,5	;RP0=0, select bank0
  6187  175F  1303               	bcf	3,6	;RP1=0, select bank0
  6188  1760  1487               	bsf	7,1	;volatile
  6189                           
  6190                           ;functions.c: 703: DelayDs(2);
  6191  1761  3002               	movlw	2
  6192  1762  00A0               	movwf	DelayDs@cnt
  6193  1763  3000               	movlw	0
  6194  1764  00A1               	movwf	DelayDs@cnt+1
  6195  1765  160A  118A  25DB  160A  118A  	fcall	_DelayDs
  6196                           
  6197                           ;functions.c: 704: RC1 = 0;
  6198  176A  1283               	bcf	3,5	;RP0=0, select bank0
  6199  176B  1303               	bcf	3,6	;RP1=0, select bank0
  6200  176C  1087               	bcf	7,1	;volatile
  6201                           
  6202                           ;functions.c: 705: DelayDs(6);
  6203  176D  3006               	movlw	6
  6204  176E  00A0               	movwf	DelayDs@cnt
  6205  176F  3000               	movlw	0
  6206  1770  00A1               	movwf	DelayDs@cnt+1
  6207  1771  160A  118A  25DB  160A  118A  	fcall	_DelayDs
  6208  1776  3001               	movlw	1
  6209  1777  1283               	bcf	3,5	;RP0=0, select bank0
  6210  1778  1303               	bcf	3,6	;RP1=0, select bank0
  6211  1779  07A9               	addwf	Blink@i,f
  6212  177A  1803               	skipnc
  6213  177B  0AAA               	incf	Blink@i+1,f
  6214  177C  3000               	movlw	0
  6215  177D  07AA               	addwf	Blink@i+1,f
  6216  177E  2F52               	goto	l2946
  6217  177F                     __end_of_Blink:	
  6218                           
  6219                           	psect	text26
  6220  094B                     __ptext26:	
  6221 ;; *************** function _PICInit *****************
  6222 ;; Defined at:
  6223 ;;		line 438 in file "functions.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;		None
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;		None
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  1    wreg      void 
  6230 ;; Registers used:
  6231 ;;		wreg, status,2, status,0
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6237 ;;      Params:         0       0       0       0       0
  6238 ;;      Locals:         0       0       0       0       0
  6239 ;;      Temps:          0       0       0       0       0
  6240 ;;      Totals:         0       0       0       0       0
  6241 ;;Total ram usage:        0 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    2
  6244 ;; This function calls:
  6245 ;;		Nothing
  6246 ;; This function is called by:
  6247 ;;		_main
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           
  6252                           ;psect for function _PICInit
  6253  094B                     _PICInit:	
  6254                           
  6255                           ;functions.c: 442: OSCCONbits.IRCF2 = 1;
  6256                           
  6257                           ;incstack = 0
  6258                           ; Regs used in _PICInit: [wreg+status,2+status,0]
  6259  094B  1683               	bsf	3,5	;RP0=1, select bank1
  6260  094C  1303               	bcf	3,6	;RP1=0, select bank1
  6261  094D  170F               	bsf	15,6	;volatile
  6262                           
  6263                           ;functions.c: 443: OSCCONbits.IRCF1 = 1;
  6264  094E  168F               	bsf	15,5	;volatile
  6265                           
  6266                           ;functions.c: 444: OSCCONbits.IRCF0 = 0;
  6267  094F  120F               	bcf	15,4	;volatile
  6268                           
  6269                           ;functions.c: 445: OSCCONbits.SCS = 1;
  6270  0950  140F               	bsf	15,0	;volatile
  6271                           
  6272                           ;functions.c: 448: PORTA = 0x00;
  6273  0951  1283               	bcf	3,5	;RP0=0, select bank0
  6274  0952  1303               	bcf	3,6	;RP1=0, select bank0
  6275  0953  0185               	clrf	5	;volatile
  6276                           
  6277                           ;functions.c: 449: PORTB = 0x00;
  6278  0954  0186               	clrf	6	;volatile
  6279                           
  6280                           ;functions.c: 450: PORTC = 0x00;
  6281  0955  0187               	clrf	7	;volatile
  6282                           
  6283                           ;functions.c: 451: PORTD = 0x00;
  6284  0956  0188               	clrf	8	;volatile
  6285                           
  6286                           ;functions.c: 452: PORTE = 0x00;
  6287  0957  0189               	clrf	9	;volatile
  6288                           
  6289                           ;functions.c: 454: TRISA = 0b00001011;
  6290  0958  300B               	movlw	11
  6291  0959  1683               	bsf	3,5	;RP0=1, select bank1
  6292  095A  1303               	bcf	3,6	;RP1=0, select bank1
  6293  095B  0085               	movwf	5	;volatile
  6294                           
  6295                           ;functions.c: 455: TRISB = 0b00111101;
  6296  095C  303D               	movlw	61
  6297  095D  0086               	movwf	6	;volatile
  6298                           
  6299                           ;functions.c: 456: TRISC = 0b00010000;
  6300  095E  3010               	movlw	16
  6301  095F  0087               	movwf	7	;volatile
  6302                           
  6303                           ;functions.c: 457: TRISD = 0b00000111;
  6304  0960  3007               	movlw	7
  6305  0961  0088               	movwf	8	;volatile
  6306                           
  6307                           ;functions.c: 458: TRISE = 0b00000111;
  6308  0962  3007               	movlw	7
  6309  0963  0089               	movwf	9	;volatile
  6310                           
  6311                           ;functions.c: 460: ANSEL = 0b00000000;
  6312  0964  1683               	bsf	3,5	;RP0=1, select bank3
  6313  0965  1703               	bsf	3,6	;RP1=1, select bank3
  6314  0966  0188               	clrf	8	;volatile
  6315                           
  6316                           ;functions.c: 461: ANSELH = 0b00000000;
  6317  0967  0189               	clrf	9	;volatile
  6318                           
  6319                           ;functions.c: 462: ANSELbits.ANS0 = 1;
  6320  0968  1408               	bsf	8,0	;volatile
  6321                           
  6322                           ;functions.c: 463: ANSELbits.ANS3 = 1;
  6323  0969  1588               	bsf	8,3	;volatile
  6324                           
  6325                           ;functions.c: 464: ANSELbits.ANS5 = 1;
  6326  096A  1688               	bsf	8,5	;volatile
  6327                           
  6328                           ;functions.c: 465: ANSELbits.ANS6 = 1;
  6329  096B  1708               	bsf	8,6	;volatile
  6330                           
  6331                           ;functions.c: 466: ANSELbits.ANS7 = 1;
  6332  096C  1788               	bsf	8,7	;volatile
  6333                           
  6334                           ;functions.c: 467: ANSELHbits.ANS8 = 1;
  6335  096D  1409               	bsf	9,0	;volatile
  6336                           
  6337                           ;functions.c: 469: OPTION_REGbits.nRBPU = 0;
  6338  096E  1683               	bsf	3,5	;RP0=1, select bank1
  6339  096F  1303               	bcf	3,6	;RP1=0, select bank1
  6340  0970  1381               	bcf	1,7	;volatile
  6341                           
  6342                           ;functions.c: 470: WPUBbits.WPUB0 = 1;
  6343  0971  1415               	bsf	21,0	;volatile
  6344  0972                     l397:	
  6345                           ;functions.c: 471: while(!RB0);
  6346                           
  6347  0972  1283               	bcf	3,5	;RP0=0, select bank0
  6348  0973  1C06               	btfss	6,0	;volatile
  6349  0974  2972               	goto	l397
  6350                           
  6351                           ;functions.c: 472: WPUBbits.WPUB5 = 1;
  6352  0975  1683               	bsf	3,5	;RP0=1, select bank1
  6353  0976  1303               	bcf	3,6	;RP1=0, select bank1
  6354  0977  1695               	bsf	21,5	;volatile
  6355  0978                     l400:	
  6356                           ;functions.c: 473: while(!RB5);
  6357                           
  6358  0978  1283               	bcf	3,5	;RP0=0, select bank0
  6359  0979  1E86               	btfss	6,5	;volatile
  6360  097A  2978               	goto	l400
  6361                           
  6362                           ;functions.c: 476: SSPCONbits.SSPM=0x00;
  6363  097B  30F0               	movlw	-16
  6364  097C  0594               	andwf	20,f	;volatile
  6365                           
  6366                           ;functions.c: 477: SSPCONbits.CKP=0;
  6367  097D  1214               	bcf	20,4	;volatile
  6368                           
  6369                           ;functions.c: 478: SSPSTATbits.CKE=1;
  6370  097E  1683               	bsf	3,5	;RP0=1, select bank1
  6371  097F  1303               	bcf	3,6	;RP1=0, select bank1
  6372  0980  1714               	bsf	20,6	;volatile
  6373                           
  6374                           ;functions.c: 479: SSPSTATbits.SMP=0;
  6375  0981  1394               	bcf	20,7	;volatile
  6376                           
  6377                           ;functions.c: 480: SSPCONbits.SSPEN=0x01;
  6378  0982  1283               	bcf	3,5	;RP0=0, select bank0
  6379  0983  1303               	bcf	3,6	;RP1=0, select bank0
  6380  0984  1694               	bsf	20,5	;volatile
  6381                           
  6382                           ;functions.c: 481: SSPIE = 0;
  6383  0985  1683               	bsf	3,5	;RP0=1, select bank1
  6384  0986  1303               	bcf	3,6	;RP1=0, select bank1
  6385  0987  118C               	bcf	12,3	;volatile
  6386                           
  6387                           ;functions.c: 484: RA5 = 1;
  6388  0988  1283               	bcf	3,5	;RP0=0, select bank0
  6389  0989  1303               	bcf	3,6	;RP1=0, select bank0
  6390  098A  1685               	bsf	5,5	;volatile
  6391                           
  6392                           ;functions.c: 485: RA4 = 1;
  6393  098B  1605               	bsf	5,4	;volatile
  6394                           
  6395                           ;functions.c: 486: RD4 = 1;
  6396  098C  1608               	bsf	8,4	;volatile
  6397                           
  6398                           ;functions.c: 487: RD3 = 1;
  6399  098D  1588               	bsf	8,3	;volatile
  6400                           
  6401                           ;functions.c: 489: RB1 = 1;
  6402  098E  1486               	bsf	6,1	;volatile
  6403                           
  6404                           ;functions.c: 494: INTCONbits.RBIE = 1;
  6405  098F  158B               	bsf	11,3	;volatile
  6406                           
  6407                           ;functions.c: 495: INTCONbits.PEIE = 1;
  6408  0990  170B               	bsf	11,6	;volatile
  6409                           
  6410                           ;functions.c: 496: PIE1bits.TMR1IE = 1;
  6411  0991  1683               	bsf	3,5	;RP0=1, select bank1
  6412  0992  1303               	bcf	3,6	;RP1=0, select bank1
  6413  0993  140C               	bsf	12,0	;volatile
  6414                           
  6415                           ;functions.c: 497: INTCONbits.GIE = 1;
  6416  0994  178B               	bsf	11,7	;volatile
  6417                           
  6418                           ;functions.c: 498: IOCBbits.IOCB5 = 1;
  6419  0995  1696               	bsf	22,5	;volatile
  6420                           
  6421                           ;functions.c: 501: T1CON = 0b00110000;
  6422  0996  3030               	movlw	48
  6423  0997  1283               	bcf	3,5	;RP0=0, select bank0
  6424  0998  1303               	bcf	3,6	;RP1=0, select bank0
  6425  0999  0090               	movwf	16	;volatile
  6426                           
  6427                           ;functions.c: 502: TMR1H = 0x0B;
  6428  099A  300B               	movlw	11
  6429  099B  008F               	movwf	15	;volatile
  6430                           
  6431                           ;functions.c: 503: TMR1L = 0xDB;
  6432  099C  30DB               	movlw	219
  6433  099D  008E               	movwf	14	;volatile
  6434                           
  6435                           ;functions.c: 504: T1CONbits.TMR1ON = 1;
  6436  099E  1410               	bsf	16,0	;volatile
  6437                           
  6438                           ;functions.c: 507: ADCON0bits.ADCS0 = 0;
  6439  099F  131F               	bcf	31,6	;volatile
  6440                           
  6441                           ;functions.c: 508: ADCON0bits.ADCS1 = 0;
  6442  09A0  139F               	bcf	31,7	;volatile
  6443                           
  6444                           ;functions.c: 509: ADCON1bits.ADFM = 0;
  6445  09A1  1683               	bsf	3,5	;RP0=1, select bank1
  6446  09A2  1303               	bcf	3,6	;RP1=0, select bank1
  6447  09A3  139F               	bcf	31,7	;volatile
  6448                           
  6449                           ;functions.c: 510: ADCON1bits.VCFG1 = 0;
  6450  09A4  129F               	bcf	31,5	;volatile
  6451                           
  6452                           ;functions.c: 511: ADCON1bits.VCFG0 = 0;
  6453  09A5  121F               	bcf	31,4	;volatile
  6454                           
  6455                           ;functions.c: 514: intSecondCounter = 0;
  6456  09A6  1283               	bcf	3,5	;RP0=0, select bank0
  6457  09A7  1303               	bcf	3,6	;RP1=0, select bank0
  6458  09A8  01E7               	clrf	_intSecondCounter
  6459  09A9  01E8               	clrf	_intSecondCounter+1
  6460                           
  6461                           ;functions.c: 515: intHalfSecondCounter = 0;
  6462  09AA  01E3               	clrf	_intHalfSecondCounter
  6463  09AB  01E4               	clrf	_intHalfSecondCounter+1
  6464                           
  6465                           ;functions.c: 516: intMinuteCounter = 0;
  6466  09AC  01E5               	clrf	_intMinuteCounter
  6467  09AD  01E6               	clrf	_intMinuteCounter+1
  6468  09AE  0008               	return
  6469  09AF                     __end_of_PICInit:	
  6470                           
  6471                           	psect	text27
  6472  1516                     __ptext27:	
  6473 ;; *************** function _Mode_5 *****************
  6474 ;; Defined at:
  6475 ;;		line 339 in file "functions.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;		None
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;		None
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  1    wreg      void 
  6482 ;; Registers used:
  6483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6489 ;;      Params:         0       0       0       0       0
  6490 ;;      Locals:         0       0       0       0       0
  6491 ;;      Temps:          0       1       0       0       0
  6492 ;;      Totals:         0       1       0       0       0
  6493 ;;Total ram usage:        1 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    8
  6496 ;; This function calls:
  6497 ;;		_LightWithSensController
  6498 ;;		_TransmittPacket
  6499 ;; This function is called by:
  6500 ;;		_main
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           
  6505                           ;psect for function _Mode_5
  6506  1516                     _Mode_5:	
  6507                           
  6508                           ;functions.c: 341: if(!RB5)
  6509                           
  6510                           ;incstack = 0
  6511 ;; hardware stack exceeded
  6512                           ; Regs used in _Mode_5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6513  1516  1283               	bcf	3,5	;RP0=0, select bank0
  6514  1517  1303               	bcf	3,6	;RP1=0, select bank0
  6515  1518  1A86               	btfsc	6,5	;volatile
  6516  1519  2D24               	goto	l3182
  6517                           
  6518                           ;functions.c: 342: {
  6519                           ;functions.c: 343: TransmittPacket(2, 2);
  6520  151A  3002               	movlw	2
  6521  151B  00BB               	movwf	??_Mode_5
  6522  151C  083B               	movf	??_Mode_5,w
  6523  151D  00B5               	movwf	TransmittPacket@value
  6524  151E  3002               	movlw	2
  6525  151F  120A  158A  23A1  160A  118A  	fcall	_TransmittPacket
  6526  1524                     l3182:	
  6527                           
  6528                           ;functions.c: 344: }
  6529                           ;functions.c: 345: LightWithSensController();
  6530  1524  160A  118A  277F   	fcall	_LightWithSensController
  6531  1527  0008               	return
  6532  1528                     __end_of_Mode_5:	
  6533                           
  6534                           	psect	text28
  6535  14F4                     __ptext28:	
  6536 ;; *************** function _Mode_4 *****************
  6537 ;; Defined at:
  6538 ;;		line 327 in file "functions.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;		None
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;		None
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6552 ;;      Params:         0       0       0       0       0
  6553 ;;      Locals:         0       0       0       0       0
  6554 ;;      Temps:          0       0       0       0       0
  6555 ;;      Totals:         0       0       0       0       0
  6556 ;;Total ram usage:        0 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    8
  6559 ;; This function calls:
  6560 ;;		_LightWithSensController
  6561 ;;		_TransmittPacket
  6562 ;; This function is called by:
  6563 ;;		_main
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           
  6568                           ;psect for function _Mode_4
  6569  14F4                     _Mode_4:	
  6570                           
  6571                           ;functions.c: 329: if(!RB5)
  6572                           
  6573                           ;incstack = 0
  6574 ;; hardware stack exceeded
  6575                           ; Regs used in _Mode_4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6576  14F4  1283               	bcf	3,5	;RP0=0, select bank0
  6577  14F5  1303               	bcf	3,6	;RP1=0, select bank0
  6578  14F6  1A86               	btfsc	6,5	;volatile
  6579  14F7  2D00               	goto	l3176
  6580                           
  6581                           ;functions.c: 330: {
  6582                           ;functions.c: 331: TransmittPacket(2, 1);
  6583  14F8  01B5               	clrf	TransmittPacket@value
  6584  14F9  0AB5               	incf	TransmittPacket@value,f
  6585  14FA  3002               	movlw	2
  6586  14FB  120A  158A  23A1  160A  118A  	fcall	_TransmittPacket
  6587  1500                     l3176:	
  6588                           
  6589                           ;functions.c: 332: }
  6590                           ;functions.c: 333: LightWithSensController();
  6591  1500  160A  118A  277F   	fcall	_LightWithSensController
  6592  1503  0008               	return
  6593  1504                     __end_of_Mode_4:	
  6594                           
  6595                           	psect	text29
  6596  0BA1                     __ptext29:	
  6597 ;; *************** function _TransmittPacket *****************
  6598 ;; Defined at:
  6599 ;;		line 233 in file "functions.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;  topic           1    wreg     unsigned char 
  6602 ;;  value           1   21[BANK0 ] unsigned char 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  topic           1   26[BANK0 ] unsigned char 
  6605 ;;  i               2   24[BANK0 ] int 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  1    wreg      void 
  6608 ;; Registers used:
  6609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6615 ;;      Params:         0       1       0       0       0
  6616 ;;      Locals:         0       3       0       0       0
  6617 ;;      Temps:          0       2       0       0       0
  6618 ;;      Totals:         0       6       0       0       0
  6619 ;;Total ram usage:        6 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    7
  6622 ;; This function calls:
  6623 ;;		_FindChannel
  6624 ;;		_RegisterRead
  6625 ;;		_RegisterSet
  6626 ;;		_SetRFMode
  6627 ;;		_WriteFIFO
  6628 ;;		_timerFunction
  6629 ;; This function is called by:
  6630 ;;		_ReceivedPacketHandler
  6631 ;;		_Mode_4
  6632 ;;		_Mode_5
  6633 ;;		_SendMemoryData
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           
  6638                           ;psect for function _TransmittPacket
  6639  0BA1                     _TransmittPacket:	
  6640                           
  6641                           ;incstack = 0
  6642 ;; hardware stack exceeded
  6643                           ; Regs used in _TransmittPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6644                           ;TransmittPacket@topic stored from wreg
  6645  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  6646  0BA2  1303               	bcf	3,6	;RP1=0, select bank0
  6647  0BA3  00BA               	movwf	TransmittPacket@topic
  6648                           
  6649                           ;functions.c: 235: timerFunction(4, 5);
  6650  0BA4  3004               	movlw	4
  6651  0BA5  00A0               	movwf	timerFunction@intTimerNumber
  6652  0BA6  3000               	movlw	0
  6653  0BA7  00A1               	movwf	timerFunction@intTimerNumber+1
  6654  0BA8  3005               	movlw	5
  6655  0BA9  00A2               	movwf	timerFunction@intSetSeconds
  6656  0BAA  3000               	movlw	0
  6657  0BAB  00A3               	movwf	timerFunction@intSetSeconds+1
  6658  0BAC  160A  118A  2504  120A  158A  	fcall	_timerFunction
  6659                           
  6660                           ;functions.c: 237: int i = 0;
  6661  0BB1  1283               	bcf	3,5	;RP0=0, select bank0
  6662  0BB2  1303               	bcf	3,6	;RP1=0, select bank0
  6663  0BB3  01B8               	clrf	TransmittPacket@i
  6664  0BB4  01B9               	clrf	TransmittPacket@i+1
  6665                           
  6666                           ;functions.c: 240: SetRFMode(0x20);
  6667  0BB5  3020               	movlw	32
  6668  0BB6  120A  158A  221C  120A  158A  	fcall	_SetRFMode
  6669                           
  6670                           ;functions.c: 241: _delay((unsigned long)((10)*(4000000/4000.0)));
  6671  0BBB  300D               	movlw	13
  6672  0BBC  1283               	bcf	3,5	;RP0=0, select bank0
  6673  0BBD  1303               	bcf	3,6	;RP1=0, select bank0
  6674  0BBE  00B7               	movwf	??_TransmittPacket+1
  6675  0BBF  30FB               	movlw	251
  6676  0BC0  00B6               	movwf	??_TransmittPacket
  6677  0BC1                     u2897:	
  6678  0BC1  0BB6               	decfsz	??_TransmittPacket,f
  6679  0BC2  2BC1               	goto	u2897
  6680  0BC3  0BB7               	decfsz	??_TransmittPacket+1,f
  6681  0BC4  2BC1               	goto	u2897
  6682                           
  6683                           ;functions.c: 242: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  6684  0BC5  300E               	movlw	14
  6685  0BC6  160A  118A  259D  120A  158A  	fcall	_RegisterRead
  6686  0BCB  3802               	iorlw	2
  6687  0BCC  1283               	bcf	3,5	;RP0=0, select bank0
  6688  0BCD  1303               	bcf	3,6	;RP1=0, select bank0
  6689  0BCE  00B6               	movwf	??_TransmittPacket
  6690  0BCF  0836               	movf	??_TransmittPacket,w
  6691  0BD0  00A7               	movwf	RegisterSet@value
  6692  0BD1  300E               	movlw	14
  6693  0BD2  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6694                           
  6695                           ;functions.c: 243: SetRFMode(0x40);
  6696  0BD7  3040               	movlw	64
  6697  0BD8  120A  158A  221C  120A  158A  	fcall	_SetRFMode
  6698  0BDD                     l2490:	
  6699                           ;functions.c: 244: while((RegisterRead(0x0E) & 0b00000010) == 0)
  6700                           
  6701  0BDD  300E               	movlw	14
  6702  0BDE  160A  118A  259D  120A  158A  	fcall	_RegisterRead
  6703  0BE3  3902               	andlw	2
  6704  0BE4  1D03               	btfss	3,2
  6705  0BE5  2BF0               	goto	l2492
  6706                           
  6707                           ;functions.c: 245: {
  6708                           ;functions.c: 246: if(bTimerComplete[4])
  6709  0BE6  1283               	bcf	3,5	;RP0=0, select bank0
  6710  0BE7  1303               	bcf	3,6	;RP1=0, select bank0
  6711  0BE8  085C               	movf	_bTimerComplete+4,w
  6712  0BE9  1903               	btfsc	3,2
  6713  0BEA  2BDD               	goto	l2490
  6714                           
  6715                           ;functions.c: 247: {
  6716                           ;functions.c: 248: FindChannel();
  6717  0BEB  120A  158A  2708  120A  158A  	fcall	_FindChannel
  6718  0BF0                     l2492:	
  6719                           ;functions.c: 249: break;
  6720                           
  6721                           
  6722                           ;functions.c: 250: }
  6723                           ;functions.c: 252: }
  6724                           ;functions.c: 253: SetRFMode(0x80);
  6725  0BF0  3080               	movlw	128
  6726  0BF1  120A  158A  221C  120A  158A  	fcall	_SetRFMode
  6727                           
  6728                           ;functions.c: 254: _delay((unsigned long)((500)*(4000000/4000000.0)));
  6729  0BF6  30A5               	movlw	165
  6730  0BF7  1283               	bcf	3,5	;RP0=0, select bank0
  6731  0BF8  1303               	bcf	3,6	;RP1=0, select bank0
  6732  0BF9  00B6               	movwf	??_TransmittPacket
  6733  0BFA                     u2907:	
  6734  0BFA  0BB6               	decfsz	??_TransmittPacket,f
  6735  0BFB  2BFA               	goto	u2907
  6736  0BFC  2BFD               	nop2
  6737                           
  6738                           ;functions.c: 257: WriteFIFO('S');
  6739  0BFD  3053               	movlw	83
  6740  0BFE  160A  118A  24BF  120A  158A  	fcall	_WriteFIFO
  6741                           
  6742                           ;functions.c: 258: WriteFIFO('Y');
  6743  0C03  3059               	movlw	89
  6744  0C04  160A  118A  24BF  120A  158A  	fcall	_WriteFIFO
  6745                           
  6746                           ;functions.c: 259: WriteFIFO('N');
  6747  0C09  304E               	movlw	78
  6748  0C0A  160A  118A  24BF  120A  158A  	fcall	_WriteFIFO
  6749                           
  6750                           ;functions.c: 260: WriteFIFO('C');
  6751  0C0F  3043               	movlw	67
  6752  0C10  160A  118A  24BF  120A  158A  	fcall	_WriteFIFO
  6753                           
  6754                           ;functions.c: 263: WriteFIFO(44);
  6755  0C15  302C               	movlw	44
  6756  0C16  160A  118A  24BF  120A  158A  	fcall	_WriteFIFO
  6757                           
  6758                           ;functions.c: 264: WriteFIFO(topic);
  6759  0C1B  1283               	bcf	3,5	;RP0=0, select bank0
  6760  0C1C  1303               	bcf	3,6	;RP1=0, select bank0
  6761  0C1D  083A               	movf	TransmittPacket@topic,w
  6762  0C1E  160A  118A  24BF  120A  158A  	fcall	_WriteFIFO
  6763                           
  6764                           ;functions.c: 265: WriteFIFO(value);
  6765  0C23  1283               	bcf	3,5	;RP0=0, select bank0
  6766  0C24  1303               	bcf	3,6	;RP1=0, select bank0
  6767  0C25  0835               	movf	TransmittPacket@value,w
  6768  0C26  160A  118A  24BF  120A  158A  	fcall	_WriteFIFO
  6769                           
  6770                           ;functions.c: 266: WriteFIFO(55);
  6771  0C2B  3037               	movlw	55
  6772  0C2C  160A  118A  24BF  120A  158A  	fcall	_WriteFIFO
  6773  0C31                     l347:	
  6774                           ;functions.c: 269: while(!RB4)
  6775                           
  6776  0C31  1283               	bcf	3,5	;RP0=0, select bank0
  6777  0C32  1303               	bcf	3,6	;RP1=0, select bank0
  6778  0C33  1A06               	btfsc	6,4	;volatile
  6779  0C34  2C3A               	goto	l2516
  6780                           
  6781                           ;functions.c: 270: {
  6782                           ;functions.c: 271: if(bTimerComplete[4])
  6783  0C35  1283               	bcf	3,5	;RP0=0, select bank0
  6784  0C36  1303               	bcf	3,6	;RP1=0, select bank0
  6785  0C37  085C               	movf	_bTimerComplete+4,w
  6786  0C38  1903               	btfsc	3,2
  6787  0C39  2C31               	goto	l347
  6788  0C3A                     l2516:	
  6789                           ;functions.c: 272: break;
  6790                           
  6791                           
  6792                           ;functions.c: 273: }
  6793                           ;functions.c: 274: _delay((unsigned long)((10)*(4000000/4000000.0)));
  6794  0C3A  3002               	movlw	2
  6795  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  6796  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  6797  0C3D  00B6               	movwf	??_TransmittPacket
  6798  0C3E                     u2917:	
  6799  0C3E  0BB6               	decfsz	??_TransmittPacket,f
  6800  0C3F  2C3E               	goto	u2917
  6801  0C40  0000               	nop
  6802                           
  6803                           ;functions.c: 275: SetRFMode(0x00);
  6804  0C41  3000               	movlw	0
  6805  0C42  120A  158A  221C  120A  158A  	fcall	_SetRFMode
  6806                           
  6807                           ;functions.c: 276: _delay((unsigned long)((50)*(4000000/4000.0)));
  6808  0C47  3041               	movlw	65
  6809  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  6810  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  6811  0C4A  00B7               	movwf	??_TransmittPacket+1
  6812  0C4B  30ED               	movlw	237
  6813  0C4C  00B6               	movwf	??_TransmittPacket
  6814  0C4D                     u2927:	
  6815  0C4D  0BB6               	decfsz	??_TransmittPacket,f
  6816  0C4E  2C4D               	goto	u2927
  6817  0C4F  0BB7               	decfsz	??_TransmittPacket+1,f
  6818  0C50  2C4D               	goto	u2927
  6819  0C51  2C52               	nop2
  6820  0C52  0008               	return
  6821  0C53                     __end_of_TransmittPacket:	
  6822                           
  6823                           	psect	text30
  6824  14BF                     __ptext30:	
  6825 ;; *************** function _WriteFIFO *****************
  6826 ;; Defined at:
  6827 ;;		line 812 in file "functions.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;  Data            1    wreg     unsigned char 
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  Data            1    3[BANK0 ] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  1    wreg      void 
  6834 ;; Registers used:
  6835 ;;		wreg, status,2, status,0, pclath, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6841 ;;      Params:         0       0       0       0       0
  6842 ;;      Locals:         0       1       0       0       0
  6843 ;;      Temps:          0       0       0       0       0
  6844 ;;      Totals:         0       1       0       0       0
  6845 ;;Total ram usage:        1 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    3
  6848 ;; This function calls:
  6849 ;;		_WriteSPI
  6850 ;; This function is called by:
  6851 ;;		_TransmittPacket
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           
  6856                           ;psect for function _WriteFIFO
  6857  14BF                     _WriteFIFO:	
  6858                           
  6859                           ;incstack = 0
  6860                           ; Regs used in _WriteFIFO: [wreg+status,2+status,0+pclath+cstack]
  6861                           ;WriteFIFO@Data stored from wreg
  6862  14BF  1283               	bcf	3,5	;RP0=0, select bank0
  6863  14C0  1303               	bcf	3,6	;RP1=0, select bank0
  6864  14C1  00A3               	movwf	WriteFIFO@Data
  6865                           
  6866                           ;functions.c: 814: RA5 = 0;
  6867  14C2  1285               	bcf	5,5	;volatile
  6868                           
  6869                           ;functions.c: 815: WriteSPI(Data);
  6870  14C3  0823               	movf	WriteFIFO@Data,w
  6871  14C4  160A  118A  24D8   	fcall	_WriteSPI
  6872                           
  6873                           ;functions.c: 816: RA5 = 1;
  6874  14C7  1283               	bcf	3,5	;RP0=0, select bank0
  6875  14C8  1303               	bcf	3,6	;RP1=0, select bank0
  6876  14C9  1685               	bsf	5,5	;volatile
  6877  14CA  0008               	return
  6878  14CB                     __end_of_WriteFIFO:	
  6879                           
  6880                           	psect	text31
  6881  0F08                     __ptext31:	
  6882 ;; *************** function _FindChannel *****************
  6883 ;; Defined at:
  6884 ;;		line 595 in file "functions.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;		None
  6887 ;; Auto vars:     Size  Location     Type
  6888 ;;  i               2   19[BANK0 ] int 
  6889 ;;  cnt             2   17[BANK0 ] int 
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  1    wreg      unsigned char 
  6892 ;; Registers used:
  6893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6899 ;;      Params:         0       0       0       0       0
  6900 ;;      Locals:         0       4       0       0       0
  6901 ;;      Temps:          0       3       0       0       0
  6902 ;;      Totals:         0       7       0       0       0
  6903 ;;Total ram usage:        7 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; Hardware stack levels required when called:    6
  6906 ;; This function calls:
  6907 ;;		_RegisterRead
  6908 ;;		_RegisterSet
  6909 ;;		_SetRFMode
  6910 ;; This function is called by:
  6911 ;;		_TransiverToReceive
  6912 ;;		_TransmittPacket
  6913 ;;		_TransiverInit
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           
  6918                           ;psect for function _FindChannel
  6919  0F08                     _FindChannel:	
  6920                           
  6921                           ;functions.c: 597: int cnt = 0;
  6922                           
  6923                           ;incstack = 0
  6924 ;; using string table level
  6925                           ; Regs used in _FindChannel: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6926  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  6927  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  6928  0F0A  01B1               	clrf	FindChannel@cnt
  6929  0F0B  01B2               	clrf	FindChannel@cnt+1
  6930                           
  6931                           ;functions.c: 598: bChannelFound = 0;
  6932  0F0C  01E9               	clrf	_bChannelFound
  6933                           
  6934                           ;functions.c: 599: channelFound = 0;
  6935  0F0D  01DD               	clrf	_channelFound
  6936  0F0E  01DE               	clrf	_channelFound+1
  6937                           
  6938                           ;functions.c: 601: _delay((unsigned long)((1000)*(4000000/4000.0)));
  6939  0F0F  3006               	movlw	6
  6940  0F10  1283               	bcf	3,5	;RP0=0, select bank0
  6941  0F11  1303               	bcf	3,6	;RP1=0, select bank0
  6942  0F12  00B0               	movwf	??_FindChannel+2
  6943  0F13  3013               	movlw	19
  6944  0F14  00AF               	movwf	??_FindChannel+1
  6945  0F15  30AD               	movlw	173
  6946  0F16  00AE               	movwf	??_FindChannel
  6947  0F17                     u2937:	
  6948  0F17  0BAE               	decfsz	??_FindChannel,f
  6949  0F18  2F17               	goto	u2937
  6950  0F19  0BAF               	decfsz	??_FindChannel+1,f
  6951  0F1A  2F17               	goto	u2937
  6952  0F1B  0BB0               	decfsz	??_FindChannel+2,f
  6953  0F1C  2F17               	goto	u2937
  6954                           
  6955                           ;functions.c: 602: for (int i = 0; i < 13; i++)
  6956  0F1D  1283               	bcf	3,5	;RP0=0, select bank0
  6957  0F1E  1303               	bcf	3,6	;RP1=0, select bank0
  6958  0F1F  01B3               	clrf	FindChannel@i
  6959  0F20  01B4               	clrf	FindChannel@i+1
  6960  0F21  0834               	movf	FindChannel@i+1,w
  6961  0F22  3A80               	xorlw	128
  6962  0F23  00FF               	movwf	127
  6963  0F24  3080               	movlw	128
  6964  0F25  027F               	subwf	127,w
  6965  0F26  1D03               	skipz
  6966  0F27  2F2A               	goto	u1425
  6967  0F28  300D               	movlw	13
  6968  0F29  0233               	subwf	FindChannel@i,w
  6969  0F2A                     u1425:	
  6970  0F2A  1803               	btfsc	3,0
  6971  0F2B  2FFE               	goto	l2446
  6972  0F2C                     l2422:	
  6973                           
  6974                           ;functions.c: 603: {
  6975                           ;functions.c: 604: RegisterSet(0x06,ChannelR[i]);
  6976  0F2C  1283               	bcf	3,5	;RP0=0, select bank0
  6977  0F2D  1303               	bcf	3,6	;RP1=0, select bank0
  6978  0F2E  0833               	movf	FindChannel@i,w
  6979  0F2F  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  6980  0F30  0084               	movwf	4
  6981  0F31  160A  118A  2000  120A  158A  	fcall	stringdir
  6982  0F36  00AE               	movwf	??_FindChannel
  6983  0F37  082E               	movf	??_FindChannel,w
  6984  0F38  00A7               	movwf	RegisterSet@value
  6985  0F39  3006               	movlw	6
  6986  0F3A  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  6987                           
  6988                           ;functions.c: 605: RegisterSet(0x07,ChannelP[i]);
  6989  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  6990  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  6991  0F41  0833               	movf	FindChannel@i,w
  6992  0F42  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  6993  0F43  0084               	movwf	4
  6994  0F44  160A  118A  2000  120A  158A  	fcall	stringdir
  6995  0F49  00AE               	movwf	??_FindChannel
  6996  0F4A  082E               	movf	??_FindChannel,w
  6997  0F4B  00A7               	movwf	RegisterSet@value
  6998  0F4C  3007               	movlw	7
  6999  0F4D  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7000                           
  7001                           ;functions.c: 606: RegisterSet(0x08,ChannelS[i]);
  7002  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  7003  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  7004  0F54  0833               	movf	FindChannel@i,w
  7005  0F55  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  7006  0F56  0084               	movwf	4
  7007  0F57  160A  118A  2000  120A  158A  	fcall	stringdir
  7008  0F5C  00AE               	movwf	??_FindChannel
  7009  0F5D  082E               	movf	??_FindChannel,w
  7010  0F5E  00A7               	movwf	RegisterSet@value
  7011  0F5F  3008               	movlw	8
  7012  0F60  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7013                           
  7014                           ;functions.c: 607: RegisterSet(0x09,ChannelR[i]);
  7015  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  7016  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  7017  0F67  0833               	movf	FindChannel@i,w
  7018  0F68  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  7019  0F69  0084               	movwf	4
  7020  0F6A  160A  118A  2000  120A  158A  	fcall	stringdir
  7021  0F6F  00AE               	movwf	??_FindChannel
  7022  0F70  082E               	movf	??_FindChannel,w
  7023  0F71  00A7               	movwf	RegisterSet@value
  7024  0F72  3009               	movlw	9
  7025  0F73  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7026                           
  7027                           ;functions.c: 608: RegisterSet(0x0A,ChannelP[i]);
  7028  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  7029  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  7030  0F7A  0833               	movf	FindChannel@i,w
  7031  0F7B  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  7032  0F7C  0084               	movwf	4
  7033  0F7D  160A  118A  2000  120A  158A  	fcall	stringdir
  7034  0F82  00AE               	movwf	??_FindChannel
  7035  0F83  082E               	movf	??_FindChannel,w
  7036  0F84  00A7               	movwf	RegisterSet@value
  7037  0F85  300A               	movlw	10
  7038  0F86  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7039                           
  7040                           ;functions.c: 609: RegisterSet(0x0B,ChannelS[i]);
  7041  0F8B  1283               	bcf	3,5	;RP0=0, select bank0
  7042  0F8C  1303               	bcf	3,6	;RP1=0, select bank0
  7043  0F8D  0833               	movf	FindChannel@i,w
  7044  0F8E  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  7045  0F8F  0084               	movwf	4
  7046  0F90  160A  118A  2000  120A  158A  	fcall	stringdir
  7047  0F95  00AE               	movwf	??_FindChannel
  7048  0F96  082E               	movf	??_FindChannel,w
  7049  0F97  00A7               	movwf	RegisterSet@value
  7050  0F98  300B               	movlw	11
  7051  0F99  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7052                           
  7053                           ;functions.c: 610: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  7054  0F9E  300E               	movlw	14
  7055  0F9F  160A  118A  259D  120A  158A  	fcall	_RegisterRead
  7056  0FA4  3802               	iorlw	2
  7057  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  7058  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  7059  0FA7  00AE               	movwf	??_FindChannel
  7060  0FA8  082E               	movf	??_FindChannel,w
  7061  0FA9  00A7               	movwf	RegisterSet@value
  7062  0FAA  300E               	movlw	14
  7063  0FAB  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7064                           
  7065                           ;functions.c: 611: SetRFMode(0x40);
  7066  0FB0  3040               	movlw	64
  7067  0FB1  120A  158A  221C  120A  158A  	fcall	_SetRFMode
  7068                           
  7069                           ;functions.c: 612: cnt = 0;
  7070  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  7071  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  7072  0FB8  01B1               	clrf	FindChannel@cnt
  7073  0FB9  01B2               	clrf	FindChannel@cnt+1
  7074  0FBA                     l2440:	
  7075                           ;functions.c: 613: while(cnt < 5)
  7076                           
  7077  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  7078  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  7079  0FBC  0832               	movf	FindChannel@cnt+1,w
  7080  0FBD  3A80               	xorlw	128
  7081  0FBE  00FF               	movwf	127
  7082  0FBF  3080               	movlw	128
  7083  0FC0  027F               	subwf	127,w
  7084  0FC1  1D03               	skipz
  7085  0FC2  2FC5               	goto	u1445
  7086  0FC3  3005               	movlw	5
  7087  0FC4  0231               	subwf	FindChannel@cnt,w
  7088  0FC5                     u1445:	
  7089  0FC5  1803               	btfsc	3,0
  7090  0FC6  2FEB               	goto	l2442
  7091                           
  7092                           ;functions.c: 614: {
  7093                           ;functions.c: 616: if((RegisterRead(0x0E) & 0b00000010) != 0)
  7094  0FC7  300E               	movlw	14
  7095  0FC8  160A  118A  259D  120A  158A  	fcall	_RegisterRead
  7096  0FCD  3902               	andlw	2
  7097  0FCE  1903               	btfsc	3,2
  7098  0FCF  2FDA               	goto	l2438
  7099                           
  7100                           ;functions.c: 617: {
  7101                           ;functions.c: 618: bChannelFound = 1;
  7102  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  7103  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  7104  0FD2  01E9               	clrf	_bChannelFound
  7105  0FD3  0AE9               	incf	_bChannelFound,f
  7106                           
  7107                           ;functions.c: 619: channelFound = i;
  7108  0FD4  0834               	movf	FindChannel@i+1,w
  7109  0FD5  00DE               	movwf	_channelFound+1
  7110  0FD6  0833               	movf	FindChannel@i,w
  7111  0FD7  00DD               	movwf	_channelFound
  7112                           
  7113                           ;functions.c: 620: return 1;
  7114  0FD8  3001               	movlw	1
  7115  0FD9  0008               	return
  7116  0FDA                     l2438:	
  7117                           
  7118                           ;functions.c: 621: }
  7119                           ;functions.c: 622: cnt++;
  7120  0FDA  3001               	movlw	1
  7121  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  7122  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  7123  0FDD  07B1               	addwf	FindChannel@cnt,f
  7124  0FDE  1803               	skipnc
  7125  0FDF  0AB2               	incf	FindChannel@cnt+1,f
  7126  0FE0  3000               	movlw	0
  7127  0FE1  07B2               	addwf	FindChannel@cnt+1,f
  7128                           
  7129                           ;functions.c: 623: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  7130  0FE2  30C7               	movlw	199
  7131  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  7132  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  7133  0FE5  00AE               	movwf	??_FindChannel
  7134  0FE6                     u2947:	
  7135  0FE6  2FE7               	nop2
  7136  0FE7  0BAE               	decfsz	??_FindChannel,f
  7137  0FE8  2FE6               	goto	u2947
  7138  0FE9  2FEA               	nop2
  7139  0FEA  2FBA               	goto	l2440
  7140  0FEB                     l2442:	
  7141  0FEB  3001               	movlw	1
  7142  0FEC  1283               	bcf	3,5	;RP0=0, select bank0
  7143  0FED  1303               	bcf	3,6	;RP1=0, select bank0
  7144  0FEE  07B3               	addwf	FindChannel@i,f
  7145  0FEF  1803               	skipnc
  7146  0FF0  0AB4               	incf	FindChannel@i+1,f
  7147  0FF1  3000               	movlw	0
  7148  0FF2  07B4               	addwf	FindChannel@i+1,f
  7149  0FF3  0834               	movf	FindChannel@i+1,w
  7150  0FF4  3A80               	xorlw	128
  7151  0FF5  00FF               	movwf	127
  7152  0FF6  3080               	movlw	128
  7153  0FF7  027F               	subwf	127,w
  7154  0FF8  1D03               	skipz
  7155  0FF9  2FFC               	goto	u1455
  7156  0FFA  300D               	movlw	13
  7157  0FFB  0233               	subwf	FindChannel@i,w
  7158  0FFC                     u1455:	
  7159  0FFC  1C03               	skipc
  7160  0FFD  2F2C               	goto	l2422
  7161  0FFE                     l2446:	
  7162                           
  7163                           ;functions.c: 624: }
  7164                           ;functions.c: 627: }
  7165                           ;functions.c: 628: return 0;
  7166  0FFE  3000               	movlw	0
  7167  0FFF  0008               	return
  7168  1000                     __end_of_FindChannel:	
  7169                           
  7170                           	psect	text32
  7171  0A1C                     __ptext32:	
  7172 ;; *************** function _SetRFMode *****************
  7173 ;; Defined at:
  7174 ;;		line 650 in file "functions.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;  mode            1    wreg     unsigned char 
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;  mode            1   12[BANK0 ] unsigned char 
  7179 ;;  mcparam0_rea    1   13[BANK0 ] unsigned char 
  7180 ;; Return value:  Size  Location     Type
  7181 ;;                  1    wreg      void 
  7182 ;; Registers used:
  7183 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7189 ;;      Params:         0       0       0       0       0
  7190 ;;      Locals:         0       2       0       0       0
  7191 ;;      Temps:          0       1       0       0       0
  7192 ;;      Totals:         0       3       0       0       0
  7193 ;;Total ram usage:        3 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; Hardware stack levels required when called:    5
  7196 ;; This function calls:
  7197 ;;		_RegisterRead
  7198 ;;		_RegisterSet
  7199 ;; This function is called by:
  7200 ;;		_TransiverToReceive
  7201 ;;		_TransiverReadFIFO
  7202 ;;		_TransmittPacket
  7203 ;;		_TransiverInit
  7204 ;;		_FindChannel
  7205 ;; This function uses a non-reentrant model
  7206 ;;
  7207                           
  7208                           
  7209                           ;psect for function _SetRFMode
  7210  0A1C                     _SetRFMode:	
  7211                           
  7212                           ;incstack = 0
  7213                           ; Regs used in _SetRFMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7214                           ;SetRFMode@mode stored from wreg
  7215  0A1C  1283               	bcf	3,5	;RP0=0, select bank0
  7216  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  7217  0A1E  00AC               	movwf	SetRFMode@mode
  7218                           
  7219                           ;functions.c: 652: RA4 = 0;
  7220  0A1F  1205               	bcf	5,4	;volatile
  7221                           
  7222                           ;functions.c: 653: BYTE mcparam0_read;
  7223                           ;functions.c: 654: mcparam0_read = RegisterRead(0);
  7224  0A20  3000               	movlw	0
  7225  0A21  160A  118A  259D  120A  158A  	fcall	_RegisterRead
  7226  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  7227  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  7228  0A28  00AB               	movwf	??_SetRFMode
  7229  0A29  082B               	movf	??_SetRFMode,w
  7230  0A2A  00AD               	movwf	SetRFMode@mcparam0_read
  7231                           
  7232                           ;functions.c: 655: switch (mode) {
  7233  0A2B  2A74               	goto	l2406
  7234  0A2C                     l2394:	
  7235                           ;functions.c: 656: case 0x80:
  7236                           
  7237                           
  7238                           ;functions.c: 657: RegisterSet(0, (mcparam0_read & 0x1F) | 0x80);
  7239  0A2C  082D               	movf	SetRFMode@mcparam0_read,w
  7240  0A2D  391F               	andlw	31
  7241  0A2E  3880               	iorlw	128
  7242  0A2F  00AB               	movwf	??_SetRFMode
  7243  0A30  082B               	movf	??_SetRFMode,w
  7244  0A31  00A7               	movwf	RegisterSet@value
  7245  0A32  3000               	movlw	0
  7246  0A33  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7247                           
  7248                           ;functions.c: 659: break;
  7249  0A38  2A87               	goto	l436
  7250  0A39                     l2396:	
  7251                           ;functions.c: 660: case 0x60:
  7252                           
  7253                           
  7254                           ;functions.c: 661: RegisterSet(0, (mcparam0_read & 0x1F) | 0x60);
  7255  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  7256  0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  7257  0A3B  082D               	movf	SetRFMode@mcparam0_read,w
  7258  0A3C  391F               	andlw	31
  7259  0A3D  3860               	iorlw	96
  7260  0A3E  00AB               	movwf	??_SetRFMode
  7261  0A3F  082B               	movf	??_SetRFMode,w
  7262  0A40  00A7               	movwf	RegisterSet@value
  7263  0A41  3000               	movlw	0
  7264  0A42  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7265                           
  7266                           ;functions.c: 663: break;
  7267  0A47  2A87               	goto	l436
  7268  0A48                     l2398:	
  7269                           ;functions.c: 664: case 0x40:
  7270                           
  7271                           
  7272                           ;functions.c: 665: RegisterSet(0, (mcparam0_read & 0x1F) | 0x40);
  7273  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  7274  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  7275  0A4A  082D               	movf	SetRFMode@mcparam0_read,w
  7276  0A4B  391F               	andlw	31
  7277  0A4C  3840               	iorlw	64
  7278  0A4D  00AB               	movwf	??_SetRFMode
  7279  0A4E  082B               	movf	??_SetRFMode,w
  7280  0A4F  00A7               	movwf	RegisterSet@value
  7281  0A50  3000               	movlw	0
  7282  0A51  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7283                           
  7284                           ;functions.c: 667: break;
  7285  0A56  2A87               	goto	l436
  7286  0A57                     l2400:	
  7287                           ;functions.c: 668: case 0x20:
  7288                           
  7289                           
  7290                           ;functions.c: 669: RegisterSet(0, (mcparam0_read & 0x1F) | 0x20);
  7291  0A57  1283               	bcf	3,5	;RP0=0, select bank0
  7292  0A58  1303               	bcf	3,6	;RP1=0, select bank0
  7293  0A59  082D               	movf	SetRFMode@mcparam0_read,w
  7294  0A5A  391F               	andlw	31
  7295  0A5B  3820               	iorlw	32
  7296  0A5C  00AB               	movwf	??_SetRFMode
  7297  0A5D  082B               	movf	??_SetRFMode,w
  7298  0A5E  00A7               	movwf	RegisterSet@value
  7299  0A5F  3000               	movlw	0
  7300  0A60  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7301                           
  7302                           ;functions.c: 671: break;
  7303  0A65  2A87               	goto	l436
  7304  0A66                     l2402:	
  7305                           ;functions.c: 672: case 0x00:
  7306                           
  7307                           
  7308                           ;functions.c: 673: RegisterSet(0, (mcparam0_read & 0x1F) | 0x00);
  7309  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  7310  0A67  1303               	bcf	3,6	;RP1=0, select bank0
  7311  0A68  082D               	movf	SetRFMode@mcparam0_read,w
  7312  0A69  391F               	andlw	31
  7313  0A6A  00AB               	movwf	??_SetRFMode
  7314  0A6B  082B               	movf	??_SetRFMode,w
  7315  0A6C  00A7               	movwf	RegisterSet@value
  7316  0A6D  3000               	movlw	0
  7317  0A6E  160A  118A  2569  120A  158A  	fcall	_RegisterSet
  7318                           
  7319                           ;functions.c: 676: }
  7320                           
  7321                           ;functions.c: 675: break;
  7322  0A73  2A87               	goto	l436
  7323  0A74                     l2406:	
  7324  0A74  1283               	bcf	3,5	;RP0=0, select bank0
  7325  0A75  1303               	bcf	3,6	;RP1=0, select bank0
  7326  0A76  082C               	movf	SetRFMode@mode,w
  7327                           
  7328                           ; Switch size 1, requested type "space"
  7329                           ; Number of cases is 5, Range of values is 0 to 128
  7330                           ; switch strategies available:
  7331                           ; Name         Instructions Cycles
  7332                           ; simple_byte           16     9 (average)
  7333                           ; jumptable            260     6 (fixed)
  7334                           ;	Chosen strategy is simple_byte
  7335  0A77  3A00               	xorlw	0	; case 0
  7336  0A78  1903               	skipnz
  7337  0A79  2A66               	goto	l2402
  7338  0A7A  3A20               	xorlw	32	; case 32
  7339  0A7B  1903               	skipnz
  7340  0A7C  2A57               	goto	l2400
  7341  0A7D  3A60               	xorlw	96	; case 64
  7342  0A7E  1903               	skipnz
  7343  0A7F  2A48               	goto	l2398
  7344  0A80  3A20               	xorlw	32	; case 96
  7345  0A81  1903               	skipnz
  7346  0A82  2A39               	goto	l2396
  7347  0A83  3AE0               	xorlw	224	; case 128
  7348  0A84  1903               	skipnz
  7349  0A85  2A2C               	goto	l2394
  7350  0A86  2A87               	goto	l436
  7351  0A87                     l436:	
  7352                           
  7353                           ;functions.c: 677: RA4 = 1;
  7354  0A87  1283               	bcf	3,5	;RP0=0, select bank0
  7355  0A88  1303               	bcf	3,6	;RP1=0, select bank0
  7356  0A89  1605               	bsf	5,4	;volatile
  7357  0A8A  0008               	return
  7358  0A8B                     __end_of_SetRFMode:	
  7359                           
  7360                           	psect	text33
  7361  1569                     __ptext33:	
  7362 ;; *************** function _RegisterSet *****************
  7363 ;; Defined at:
  7364 ;;		line 759 in file "functions.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  adress          1    wreg     unsigned char 
  7367 ;;  value           1    7[BANK0 ] unsigned char 
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;  adress          1   10[BANK0 ] unsigned char 
  7370 ;; Return value:  Size  Location     Type
  7371 ;;                  1    wreg      void 
  7372 ;; Registers used:
  7373 ;;		wreg, status,2, status,0, pclath, cstack
  7374 ;; Tracked objects:
  7375 ;;		On entry : 0/0
  7376 ;;		On exit  : 0/0
  7377 ;;		Unchanged: 0/0
  7378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7379 ;;      Params:         0       1       0       0       0
  7380 ;;      Locals:         0       1       0       0       0
  7381 ;;      Temps:          0       2       0       0       0
  7382 ;;      Totals:         0       4       0       0       0
  7383 ;;Total ram usage:        4 bytes
  7384 ;; Hardware stack levels used:    1
  7385 ;; Hardware stack levels required when called:    3
  7386 ;; This function calls:
  7387 ;;		_WriteSPI
  7388 ;; This function is called by:
  7389 ;;		_TransiverToReceive
  7390 ;;		_TransmittPacket
  7391 ;;		_TransiverInit
  7392 ;;		_FindChannel
  7393 ;;		_SetRFMode
  7394 ;; This function uses a non-reentrant model
  7395 ;;
  7396                           
  7397                           
  7398                           ;psect for function _RegisterSet
  7399  1569                     _RegisterSet:	
  7400                           
  7401                           ;incstack = 0
  7402                           ; Regs used in _RegisterSet: [wreg+status,2+status,0+pclath+cstack]
  7403                           ;RegisterSet@adress stored from wreg
  7404  1569  1283               	bcf	3,5	;RP0=0, select bank0
  7405  156A  1303               	bcf	3,6	;RP1=0, select bank0
  7406  156B  00AA               	movwf	RegisterSet@adress
  7407                           
  7408                           ;functions.c: 761: RA4 = 0;
  7409  156C  1205               	bcf	5,4	;volatile
  7410                           
  7411                           ;functions.c: 762: adress = (adress<<1);
  7412  156D  082A               	movf	RegisterSet@adress,w
  7413  156E  00A8               	movwf	??_RegisterSet
  7414  156F  0728               	addwf	??_RegisterSet,w
  7415  1570  00A9               	movwf	??_RegisterSet+1
  7416  1571  0829               	movf	??_RegisterSet+1,w
  7417  1572  00AA               	movwf	RegisterSet@adress
  7418                           
  7419                           ;functions.c: 763: WriteSPI(adress);
  7420  1573  082A               	movf	RegisterSet@adress,w
  7421  1574  160A  118A  24D8  160A  118A  	fcall	_WriteSPI
  7422                           
  7423                           ;functions.c: 764: WriteSPI(value);
  7424  1579  1283               	bcf	3,5	;RP0=0, select bank0
  7425  157A  1303               	bcf	3,6	;RP1=0, select bank0
  7426  157B  0827               	movf	RegisterSet@value,w
  7427  157C  160A  118A  24D8   	fcall	_WriteSPI
  7428                           
  7429                           ;functions.c: 765: RA4 = 1;
  7430  157F  1283               	bcf	3,5	;RP0=0, select bank0
  7431  1580  1303               	bcf	3,6	;RP1=0, select bank0
  7432  1581  1605               	bsf	5,4	;volatile
  7433  1582  0008               	return
  7434  1583                     __end_of_RegisterSet:	
  7435                           
  7436                           	psect	text34
  7437  159D                     __ptext34:	
  7438 ;; *************** function _RegisterRead *****************
  7439 ;; Defined at:
  7440 ;;		line 729 in file "functions.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;  adress          1    wreg     unsigned char 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  adress          1    6[BANK0 ] unsigned char 
  7445 ;;  value           1    5[BANK0 ] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;                  1    wreg      unsigned char 
  7448 ;; Registers used:
  7449 ;;		wreg, status,2, status,0, pclath, cstack
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7455 ;;      Params:         0       0       0       0       0
  7456 ;;      Locals:         0       2       0       0       0
  7457 ;;      Temps:          0       2       0       0       0
  7458 ;;      Totals:         0       4       0       0       0
  7459 ;;Total ram usage:        4 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; Hardware stack levels required when called:    4
  7462 ;; This function calls:
  7463 ;;		_ReadSPI
  7464 ;;		_WriteSPI
  7465 ;; This function is called by:
  7466 ;;		_TransiverToReceive
  7467 ;;		_TransmittPacket
  7468 ;;		_TransiverInit
  7469 ;;		_FindChannel
  7470 ;;		_SetRFMode
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           
  7475                           ;psect for function _RegisterRead
  7476  159D                     _RegisterRead:	
  7477                           
  7478                           ;incstack = 0
  7479                           ; Regs used in _RegisterRead: [wreg+status,2+status,0+pclath+cstack]
  7480                           ;RegisterRead@adress stored from wreg
  7481  159D  1283               	bcf	3,5	;RP0=0, select bank0
  7482  159E  1303               	bcf	3,6	;RP1=0, select bank0
  7483  159F  00A6               	movwf	RegisterRead@adress
  7484                           
  7485                           ;functions.c: 731: BYTE value;
  7486                           ;functions.c: 732: RA4 = 0;
  7487  15A0  1205               	bcf	5,4	;volatile
  7488                           
  7489                           ;functions.c: 733: adress = ((adress<<1)|0x40);
  7490  15A1  0826               	movf	RegisterRead@adress,w
  7491  15A2  00A3               	movwf	??_RegisterRead
  7492  15A3  0723               	addwf	??_RegisterRead,w
  7493  15A4  3840               	iorlw	64
  7494  15A5  00A4               	movwf	??_RegisterRead+1
  7495  15A6  0824               	movf	??_RegisterRead+1,w
  7496  15A7  00A6               	movwf	RegisterRead@adress
  7497                           
  7498                           ;functions.c: 734: WriteSPI(adress);
  7499  15A8  0826               	movf	RegisterRead@adress,w
  7500  15A9  160A  118A  24D8  160A  118A  	fcall	_WriteSPI
  7501                           
  7502                           ;functions.c: 735: value = ReadSPI();
  7503  15AE  160A  118A  249D   	fcall	_ReadSPI
  7504  15B1  1283               	bcf	3,5	;RP0=0, select bank0
  7505  15B2  1303               	bcf	3,6	;RP1=0, select bank0
  7506  15B3  00A3               	movwf	??_RegisterRead
  7507  15B4  0823               	movf	??_RegisterRead,w
  7508  15B5  00A5               	movwf	RegisterRead@value
  7509                           
  7510                           ;functions.c: 736: RA4 = 1;
  7511  15B6  1605               	bsf	5,4	;volatile
  7512                           
  7513                           ;functions.c: 737: return value;
  7514  15B7  0825               	movf	RegisterRead@value,w
  7515  15B8  0008               	return
  7516  15B9                     __end_of_RegisterRead:	
  7517                           
  7518                           	psect	text35
  7519  14CB                     __ptext35:	
  7520 ;; *************** function _Mode_2 *****************
  7521 ;; Defined at:
  7522 ;;		line 307 in file "functions.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;		None
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;		None
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  1    wreg      void 
  7529 ;; Registers used:
  7530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7536 ;;      Params:         0       0       0       0       0
  7537 ;;      Locals:         0       0       0       0       0
  7538 ;;      Temps:          0       0       0       0       0
  7539 ;;      Totals:         0       0       0       0       0
  7540 ;;Total ram usage:        0 bytes
  7541 ;; Hardware stack levels used:    1
  7542 ;; Hardware stack levels required when called:    6
  7543 ;; This function calls:
  7544 ;;		_LightWithSensController
  7545 ;; This function is called by:
  7546 ;;		_main
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           
  7551                           ;psect for function _Mode_2
  7552  14CB                     _Mode_2:	
  7553                           
  7554                           ;functions.c: 309: LightWithSensController();
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in _Mode_2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7558  14CB  160A  118A  277F  160A  118A  	fcall	_LightWithSensController
  7559                           
  7560                           ;functions.c: 310: if(RC2)
  7561  14D0  1283               	bcf	3,5	;RP0=0, select bank0
  7562  14D1  1303               	bcf	3,6	;RP1=0, select bank0
  7563  14D2  1D07               	btfss	7,2	;volatile
  7564  14D3  2CD6               	goto	l363
  7565                           
  7566                           ;functions.c: 311: RC1 = 1;
  7567  14D4  1487               	bsf	7,1	;volatile
  7568  14D5  0008               	return
  7569  14D6                     l363:	
  7570                           
  7571                           ;functions.c: 312: else
  7572                           ;functions.c: 313: RC1 = 0;
  7573  14D6  1087               	bcf	7,1	;volatile
  7574  14D7  0008               	return
  7575  14D8                     __end_of_Mode_2:	
  7576                           
  7577                           	psect	text36
  7578  154F                     __ptext36:	
  7579 ;; *************** function _Mode_1 *****************
  7580 ;; Defined at:
  7581 ;;		line 293 in file "functions.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;		None
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;		None
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      void 
  7588 ;; Registers used:
  7589 ;;		wreg, status,2, status,0, pclath, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7595 ;;      Params:         0       0       0       0       0
  7596 ;;      Locals:         0       0       0       0       0
  7597 ;;      Temps:          0       0       0       0       0
  7598 ;;      Totals:         0       0       0       0       0
  7599 ;;Total ram usage:        0 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    5
  7602 ;; This function calls:
  7603 ;;		_DarknessCheck
  7604 ;; This function is called by:
  7605 ;;		_main
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _Mode_1
  7611  154F                     _Mode_1:	
  7612                           
  7613                           ;functions.c: 296: if((intSecondCounter == 30)&&(!RC2))
  7614                           
  7615                           ;incstack = 0
  7616                           ; Regs used in _Mode_1: [wreg+status,2+status,0+pclath+cstack]
  7617  154F  301E               	movlw	30
  7618  1550  1283               	bcf	3,5	;RP0=0, select bank0
  7619  1551  1303               	bcf	3,6	;RP1=0, select bank0
  7620  1552  0667               	xorwf	_intSecondCounter,w
  7621  1553  0468               	iorwf	_intSecondCounter+1,w
  7622  1554  1903               	btfsc	3,2
  7623  1555  1907               	btfsc	7,2	;volatile
  7624  1556  2D5C               	goto	l3160
  7625                           
  7626                           ;functions.c: 297: DarknessCheck();
  7627  1557  160A  118A  2646  160A  118A  	fcall	_DarknessCheck
  7628  155C                     l3160:	
  7629                           
  7630                           ;functions.c: 298: if((intBlinkCycle == 1)&&(bDark == 1))
  7631  155C  1283               	bcf	3,5	;RP0=0, select bank0
  7632  155D  1303               	bcf	3,6	;RP1=0, select bank0
  7633  155E  035F               	decf	_intBlinkCycle,w
  7634  155F  0460               	iorwf	_intBlinkCycle+1,w
  7635  1560  1D03               	btfss	3,2
  7636  1561  2D67               	goto	l358
  7637  1562  036A               	decf	_bDark,w
  7638  1563  1D03               	btfss	3,2
  7639  1564  2D67               	goto	l358
  7640                           
  7641                           ;functions.c: 299: RC2 = 1;
  7642  1565  1507               	bsf	7,2	;volatile
  7643  1566  0008               	return
  7644  1567                     l358:	
  7645                           
  7646                           ;functions.c: 300: else
  7647                           ;functions.c: 301: RC2 = 0;
  7648  1567  1107               	bcf	7,2	;volatile
  7649  1568  0008               	return
  7650  1569                     __end_of_Mode_1:	
  7651                           
  7652                           	psect	text37
  7653  07FB                     __ptext37:	
  7654 ;; *************** function _Mode_0 *****************
  7655 ;; Defined at:
  7656 ;;		line 285 in file "functions.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;		None
  7659 ;; Auto vars:     Size  Location     Type
  7660 ;;		None
  7661 ;; Return value:  Size  Location     Type
  7662 ;;                  1    wreg      void 
  7663 ;; Registers used:
  7664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7670 ;;      Params:         0       0       0       0       0
  7671 ;;      Locals:         0       0       0       0       0
  7672 ;;      Temps:          0       0       0       0       0
  7673 ;;      Totals:         0       0       0       0       0
  7674 ;;Total ram usage:        0 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    6
  7677 ;; This function calls:
  7678 ;;		_LightWithSensController
  7679 ;; This function is called by:
  7680 ;;		_main
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           
  7685                           ;psect for function _Mode_0
  7686  07FB                     _Mode_0:	
  7687                           
  7688                           ;functions.c: 287: LightWithSensController();
  7689                           
  7690                           ;incstack = 0
  7691                           ; Regs used in _Mode_0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7692  07FB  160A  118A  277F   	fcall	_LightWithSensController
  7693  07FE  0008               	return
  7694  07FF                     __end_of_Mode_0:	
  7695                           
  7696                           	psect	text38
  7697  177F                     __ptext38:	
  7698 ;; *************** function _LightWithSensController *****************
  7699 ;; Defined at:
  7700 ;;		line 352 in file "functions.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;		None
  7703 ;; Auto vars:     Size  Location     Type
  7704 ;;		None
  7705 ;; Return value:  Size  Location     Type
  7706 ;;                  1    wreg      void 
  7707 ;; Registers used:
  7708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7709 ;; Tracked objects:
  7710 ;;		On entry : 0/0
  7711 ;;		On exit  : 0/0
  7712 ;;		Unchanged: 0/0
  7713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7714 ;;      Params:         0       0       0       0       0
  7715 ;;      Locals:         0       0       0       0       0
  7716 ;;      Temps:          0       0       0       0       0
  7717 ;;      Totals:         0       0       0       0       0
  7718 ;;Total ram usage:        0 bytes
  7719 ;; Hardware stack levels used:    1
  7720 ;; Hardware stack levels required when called:    5
  7721 ;; This function calls:
  7722 ;;		_DarknessCheck
  7723 ;;		_timerFunction
  7724 ;; This function is called by:
  7725 ;;		_Mode_0
  7726 ;;		_Mode_2
  7727 ;;		_Mode_4
  7728 ;;		_Mode_5
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           
  7733                           ;psect for function _LightWithSensController
  7734  177F                     _LightWithSensController:	
  7735                           
  7736                           ;functions.c: 356: if((intSecondCounter == 30)&&(!RC2))
  7737                           
  7738                           ;incstack = 0
  7739                           ; Regs used in _LightWithSensController: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7740  177F  301E               	movlw	30
  7741  1780  1283               	bcf	3,5	;RP0=0, select bank0
  7742  1781  1303               	bcf	3,6	;RP1=0, select bank0
  7743  1782  0667               	xorwf	_intSecondCounter,w
  7744  1783  0468               	iorwf	_intSecondCounter+1,w
  7745  1784  1903               	btfsc	3,2
  7746  1785  1907               	btfsc	7,2	;volatile
  7747  1786  2F8C               	goto	l2918
  7748                           
  7749                           ;functions.c: 357: DarknessCheck();
  7750  1787  160A  118A  2646  160A  118A  	fcall	_DarknessCheck
  7751  178C                     l2918:	
  7752                           
  7753                           ;functions.c: 361: if((bDark == 1)&&(RA1)&&(!RC2))
  7754  178C  1283               	bcf	3,5	;RP0=0, select bank0
  7755  178D  1303               	bcf	3,6	;RP1=0, select bank0
  7756  178E  036A               	decf	_bDark,w
  7757  178F  1903               	btfsc	3,2
  7758  1790  1C85               	btfss	5,1	;volatile
  7759  1791  2FA1               	goto	l2928
  7760  1792  1907               	btfsc	7,2	;volatile
  7761  1793  2FA1               	goto	l2928
  7762                           
  7763                           ;functions.c: 362: {
  7764                           ;functions.c: 364: RC2 = 1;
  7765  1794  1507               	bsf	7,2	;volatile
  7766                           
  7767                           ;functions.c: 366: timerFunction(0,120);
  7768  1795  3000               	movlw	0
  7769  1796  00A0               	movwf	timerFunction@intTimerNumber
  7770  1797  00A1               	movwf	timerFunction@intTimerNumber+1
  7771  1798  3078               	movlw	120
  7772  1799  00A2               	movwf	timerFunction@intSetSeconds
  7773  179A  3000               	movlw	0
  7774  179B  00A3               	movwf	timerFunction@intSetSeconds+1
  7775  179C  160A  118A  2504  160A  118A  	fcall	_timerFunction
  7776  17A1                     l2928:	
  7777                           
  7778                           ;functions.c: 367: }
  7779                           ;functions.c: 370: if(bTimerComplete[0])
  7780  17A1  1283               	bcf	3,5	;RP0=0, select bank0
  7781  17A2  1303               	bcf	3,6	;RP1=0, select bank0
  7782  17A3  0858               	movf	_bTimerComplete,w
  7783  17A4  1903               	btfsc	3,2
  7784  17A5  0008               	return
  7785                           
  7786                           ;functions.c: 371: {
  7787                           ;functions.c: 372: DarknessCheck();
  7788  17A6  160A  118A  2646  160A  118A  	fcall	_DarknessCheck
  7789                           
  7790                           ;functions.c: 373: if((bDark)&&(RA1))
  7791  17AB  1283               	bcf	3,5	;RP0=0, select bank0
  7792  17AC  1303               	bcf	3,6	;RP1=0, select bank0
  7793  17AD  086A               	movf	_bDark,w
  7794  17AE  1D03               	btfss	3,2
  7795  17AF  1C85               	btfss	5,1	;volatile
  7796  17B0  2FBC               	goto	l382
  7797                           
  7798                           ;functions.c: 374: {
  7799                           ;functions.c: 375: timerFunction(0,120);
  7800  17B1  3000               	movlw	0
  7801  17B2  00A0               	movwf	timerFunction@intTimerNumber
  7802  17B3  00A1               	movwf	timerFunction@intTimerNumber+1
  7803  17B4  3078               	movlw	120
  7804  17B5  00A2               	movwf	timerFunction@intSetSeconds
  7805  17B6  3000               	movlw	0
  7806  17B7  00A3               	movwf	timerFunction@intSetSeconds+1
  7807  17B8  160A  118A  2504   	fcall	_timerFunction
  7808                           
  7809                           ;functions.c: 376: }
  7810  17BB  0008               	return
  7811  17BC                     l382:	
  7812                           
  7813                           ;functions.c: 377: else
  7814                           ;functions.c: 378: RC2 = 0;
  7815  17BC  1107               	bcf	7,2	;volatile
  7816  17BD  0008               	return
  7817  17BE                     __end_of_LightWithSensController:	
  7818                           
  7819                           	psect	text39
  7820  1504                     __ptext39:	
  7821 ;; *************** function _timerFunction *****************
  7822 ;; Defined at:
  7823 ;;		line 403 in file "functions.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  intTimerNumb    2    0[BANK0 ] int 
  7826 ;;  intSetSecond    2    2[BANK0 ] int 
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;		None
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  1    wreg      unsigned char 
  7831 ;; Registers used:
  7832 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7838 ;;      Params:         0       4       0       0       0
  7839 ;;      Locals:         0       0       0       0       0
  7840 ;;      Temps:          0       1       0       0       0
  7841 ;;      Totals:         0       5       0       0       0
  7842 ;;Total ram usage:        5 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    2
  7845 ;; This function calls:
  7846 ;;		Nothing
  7847 ;; This function is called by:
  7848 ;;		_TransiverToReceive
  7849 ;;		_TransiverReadFIFO
  7850 ;;		_TransmittPacket
  7851 ;;		_LightWithSensController
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           
  7856                           ;psect for function _timerFunction
  7857  1504                     _timerFunction:	
  7858                           
  7859                           ;functions.c: 405: intClockTimer[intTimerNumber] = intSetSeconds;
  7860                           
  7861                           ;incstack = 0
  7862                           ; Regs used in _timerFunction: [wreg-fsr0h+status,2+status,0]
  7863  1504  1283               	bcf	3,5	;RP0=0, select bank0
  7864  1505  1303               	bcf	3,6	;RP1=0, select bank0
  7865  1506  0820               	movf	timerFunction@intTimerNumber,w
  7866  1507  00A4               	movwf	??_timerFunction
  7867  1508  0724               	addwf	??_timerFunction,w
  7868  1509  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  7869  150A  0084               	movwf	4
  7870  150B  0822               	movf	timerFunction@intSetSeconds,w
  7871  150C  1383               	bcf	3,7	;select IRP bank1
  7872  150D  0080               	movwf	0
  7873  150E  0A84               	incf	4,f
  7874  150F  0823               	movf	timerFunction@intSetSeconds+1,w
  7875  1510  0080               	movwf	0
  7876                           
  7877                           ;functions.c: 406: bTimerComplete[intTimerNumber] = 0;
  7878  1511  0820               	movf	timerFunction@intTimerNumber,w
  7879  1512  3E58               	addlw	(low (_bTimerComplete| 0))& (0+255)
  7880  1513  0084               	movwf	4
  7881  1514  0180               	clrf	0
  7882  1515  0008               	return
  7883  1516                     __end_of_timerFunction:	
  7884                           ;functions.c: 407: return 1;
  7885                           ;	Return value of _timerFunction is never used
  7886                           
  7887                           
  7888                           	psect	text40
  7889  1646                     __ptext40:	
  7890 ;; *************** function _DarknessCheck *****************
  7891 ;; Defined at:
  7892 ;;		line 941 in file "functions.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;		None
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;  darknessValu    1    9[BANK0 ] unsigned char 
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, status,2, status,0, pclath, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7906 ;;      Params:         0       0       0       0       0
  7907 ;;      Locals:         0       1       0       0       0
  7908 ;;      Temps:          0       1       0       0       0
  7909 ;;      Totals:         0       2       0       0       0
  7910 ;;Total ram usage:        2 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    4
  7913 ;; This function calls:
  7914 ;;		_AnalogValue
  7915 ;;		_eeprom_read
  7916 ;; This function is called by:
  7917 ;;		_ReceivedPacketHandler
  7918 ;;		_Mode_1
  7919 ;;		_LightWithSensController
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           
  7924                           ;psect for function _DarknessCheck
  7925  1646                     _DarknessCheck:	
  7926                           
  7927                           ;functions.c: 943: unsigned char darknessValue;
  7928                           ;functions.c: 946: if(bValueFromPot == TRUE)
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in _DarknessCheck: [wreg+status,2+status,0+pclath+cstack]
  7932  1646  1283               	bcf	3,5	;RP0=0, select bank0
  7933  1647  1303               	bcf	3,6	;RP1=0, select bank0
  7934  1648  036F               	decf	_bValueFromPot,w
  7935  1649  1D03               	btfss	3,2
  7936  164A  2E52               	goto	l2676
  7937                           
  7938                           ;functions.c: 947: darknessValue= AnalogValue(3);
  7939  164B  3003               	movlw	3
  7940  164C  160A  118A  266D  160A  118A  	fcall	_AnalogValue
  7941  1651  2E58               	goto	L4
  7942  1652                     l2676:	
  7943                           
  7944                           ;functions.c: 948: else
  7945                           ;functions.c: 949: darknessValue=eeprom_read(0);
  7946  1652  3000               	movlw	0
  7947  1653  160A  118A  25FE  160A  118A  	fcall	_eeprom_read
  7948  1658                     L4:	
  7949  1658  1283               	bcf	3,5	;RP0=0, select bank0
  7950  1659  1303               	bcf	3,6	;RP1=0, select bank0
  7951  165A  00A8               	movwf	??_DarknessCheck
  7952  165B  0828               	movf	??_DarknessCheck,w
  7953  165C  00A9               	movwf	DarknessCheck@darknessValue
  7954                           
  7955                           ;functions.c: 951: if(AnalogValue(0)>darknessValue)
  7956  165D  3000               	movlw	0
  7957  165E  160A  118A  266D  160A  118A  	fcall	_AnalogValue
  7958  1663  1283               	bcf	3,5	;RP0=0, select bank0
  7959  1664  1303               	bcf	3,6	;RP1=0, select bank0
  7960  1665  0229               	subwf	DarknessCheck@darknessValue,w
  7961  1666  1803               	skipnc
  7962  1667  2E6B               	goto	l2680
  7963                           
  7964                           ;functions.c: 952: bDark = 1;
  7965  1668  01EA               	clrf	_bDark
  7966  1669  0AEA               	incf	_bDark,f
  7967  166A  0008               	return
  7968  166B                     l2680:	
  7969                           
  7970                           ;functions.c: 953: else
  7971                           ;functions.c: 954: bDark = 0;
  7972  166B  01EA               	clrf	_bDark
  7973  166C  0008               	return
  7974  166D                     __end_of_DarknessCheck:	
  7975                           
  7976                           	psect	text41
  7977  15FE                     __ptext41:	
  7978 ;; *************** function _eeprom_read *****************
  7979 ;; Defined at:
  7980 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eeread.c"
  7981 ;; Parameters:    Size  Location     Type
  7982 ;;  addr            1    wreg     unsigned char 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  addr            1    1[BANK0 ] unsigned char 
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  1    wreg      unsigned char 
  7987 ;; Registers used:
  7988 ;;		wreg, status,2, status,0
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7994 ;;      Params:         0       0       0       0       0
  7995 ;;      Locals:         0       1       0       0       0
  7996 ;;      Temps:          0       1       0       0       0
  7997 ;;      Totals:         0       2       0       0       0
  7998 ;;Total ram usage:        2 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    2
  8001 ;; This function calls:
  8002 ;;		Nothing
  8003 ;; This function is called by:
  8004 ;;		_ReceivedPacketHandler
  8005 ;;		_DarknessCheck
  8006 ;;		_ReadMemoryAdress
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           
  8011                           ;psect for function _eeprom_read
  8012  15FE                     _eeprom_read:	
  8013                           
  8014                           ;incstack = 0
  8015                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  8016                           ;eeprom_read@addr stored from wreg
  8017  15FE  1283               	bcf	3,5	;RP0=0, select bank0
  8018  15FF  1303               	bcf	3,6	;RP1=0, select bank0
  8019  1600  00A1               	movwf	eeprom_read@addr
  8020  1601  2E04               	goto	l680
  8021  1602                     u1471:	
  8022  1602  1283               	bcf	3,5	;RP0=0, select bank0
  8023  1603  1303               	bcf	3,6	;RP1=0, select bank0
  8024  1604                     l680:	
  8025  1604  0064               	clrwdt	;# 
  8026  1605  1683               	bsf	3,5	;RP0=1, select bank3
  8027  1606  1703               	bsf	3,6	;RP1=1, select bank3
  8028  1607  188C               	btfsc	12,1	;volsfr
  8029  1608  2E02               	goto	u1471
  8030  1609  1283               	bcf	3,5	;RP0=0, select bank0
  8031  160A  1303               	bcf	3,6	;RP1=0, select bank0
  8032  160B  0821               	movf	eeprom_read@addr,w
  8033  160C  1283               	bcf	3,5	;RP0=0, select bank2
  8034  160D  1703               	bsf	3,6	;RP1=1, select bank2
  8035  160E  008D               	movwf	13	;volatile
  8036  160F  303F               	movlw	63
  8037  1610  1283               	bcf	3,5	;RP0=0, select bank0
  8038  1611  1303               	bcf	3,6	;RP1=0, select bank0
  8039  1612  00A0               	movwf	??_eeprom_read
  8040  1613  0820               	movf	??_eeprom_read,w
  8041  1614  1683               	bsf	3,5	;RP0=1, select bank3
  8042  1615  1703               	bsf	3,6	;RP1=1, select bank3
  8043  1616  058C               	andwf	12,f	;volsfr
  8044  1617  140C               	bsf	12,0	;volsfr
  8045  1618  1003               	clrc
  8046  1619  180C               	btfsc	12,0	;volsfr
  8047  161A  1403               	setc
  8048  161B  3000               	movlw	0
  8049  161C  1803               	skipnc
  8050  161D  3001               	movlw	1
  8051  161E  1283               	bcf	3,5	;RP0=0, select bank2
  8052  161F  1703               	bsf	3,6	;RP1=1, select bank2
  8053  1620  080C               	movf	12,w	;volatile
  8054  1621  0008               	return
  8055  1622                     __end_of_eeprom_read:	
  8056                           
  8057                           	psect	text42
  8058  166D                     __ptext42:	
  8059 ;; *************** function _AnalogValue *****************
  8060 ;; Defined at:
  8061 ;;		line 911 in file "functions.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;  channel         1    wreg     unsigned char 
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;  channel         1    7[BANK0 ] unsigned char 
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  1    wreg      unsigned char 
  8068 ;; Registers used:
  8069 ;;		wreg, status,2, status,0, pclath, cstack
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8075 ;;      Params:         0       0       0       0       0
  8076 ;;      Locals:         0       1       0       0       0
  8077 ;;      Temps:          0       1       0       0       0
  8078 ;;      Totals:         0       2       0       0       0
  8079 ;;Total ram usage:        2 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    3
  8082 ;; This function calls:
  8083 ;;		_DelayDs
  8084 ;; This function is called by:
  8085 ;;		_ReceivedPacketHandler
  8086 ;;		_DarknessCheck
  8087 ;;		_saveDataToFlash
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           
  8092                           ;psect for function _AnalogValue
  8093  166D                     _AnalogValue:	
  8094                           
  8095                           ;incstack = 0
  8096                           ; Regs used in _AnalogValue: [wreg+status,2+status,0+pclath+cstack]
  8097                           ;AnalogValue@channel stored from wreg
  8098  166D  1283               	bcf	3,5	;RP0=0, select bank0
  8099  166E  1303               	bcf	3,6	;RP1=0, select bank0
  8100  166F  00A7               	movwf	AnalogValue@channel
  8101                           
  8102                           ;functions.c: 913: RC0 = 0;
  8103  1670  1007               	bcf	7,0	;volatile
  8104                           
  8105                           ;functions.c: 914: ADCON0bits.CHS = channel;
  8106  1671  0827               	movf	AnalogValue@channel,w
  8107  1672  00A6               	movwf	??_AnalogValue
  8108  1673  0DA6               	rlf	??_AnalogValue,f
  8109  1674  0DA6               	rlf	??_AnalogValue,f
  8110  1675  081F               	movf	31,w	;volatile
  8111  1676  0626               	xorwf	??_AnalogValue,w
  8112  1677  39C3               	andlw	-61
  8113  1678  0626               	xorwf	??_AnalogValue,w
  8114  1679  009F               	movwf	31	;volatile
  8115                           
  8116                           ;functions.c: 915: ADCON0bits.ADON = 1;
  8117  167A  141F               	bsf	31,0	;volatile
  8118                           
  8119                           ;functions.c: 916: DelayDs(1);
  8120  167B  3001               	movlw	1
  8121  167C  00A0               	movwf	DelayDs@cnt
  8122  167D  3000               	movlw	0
  8123  167E  00A1               	movwf	DelayDs@cnt+1
  8124  167F  160A  118A  25DB  160A  118A  	fcall	_DelayDs
  8125                           
  8126                           ;functions.c: 917: ADCON0bits.GO = 1;
  8127  1684  1283               	bcf	3,5	;RP0=0, select bank0
  8128  1685  1303               	bcf	3,6	;RP1=0, select bank0
  8129  1686  149F               	bsf	31,1	;volatile
  8130                           
  8131                           ;functions.c: 918: DelayDs(1);
  8132  1687  3001               	movlw	1
  8133  1688  00A0               	movwf	DelayDs@cnt
  8134  1689  3000               	movlw	0
  8135  168A  00A1               	movwf	DelayDs@cnt+1
  8136  168B  160A  118A  25DB  160A  118A  	fcall	_DelayDs
  8137  1690                     l476:	
  8138                           ;functions.c: 919: while(ADCON0bits.GO);
  8139                           
  8140  1690  1283               	bcf	3,5	;RP0=0, select bank0
  8141  1691  1303               	bcf	3,6	;RP1=0, select bank0
  8142  1692  189F               	btfsc	31,1	;volatile
  8143  1693  2E90               	goto	l476
  8144                           
  8145                           ;functions.c: 920: ADCON0bits.ADON = 0;
  8146  1694  101F               	bcf	31,0	;volatile
  8147                           
  8148                           ;functions.c: 921: RC0 = 1;
  8149  1695  1407               	bsf	7,0	;volatile
  8150                           
  8151                           ;functions.c: 923: return ADRESH;
  8152  1696  081E               	movf	30,w	;volatile
  8153  1697  0008               	return
  8154  1698                     __end_of_AnalogValue:	
  8155                           
  8156                           	psect	text43
  8157  15DB                     __ptext43:	
  8158 ;; *************** function _DelayDs *****************
  8159 ;; Defined at:
  8160 ;;		line 521 in file "functions.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;  cnt             2    0[BANK0 ] int 
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;  i               2    4[BANK0 ] int 
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  1    wreg      void 
  8167 ;; Registers used:
  8168 ;;		wreg, status,2
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8174 ;;      Params:         0       2       0       0       0
  8175 ;;      Locals:         0       2       0       0       0
  8176 ;;      Temps:          0       2       0       0       0
  8177 ;;      Totals:         0       6       0       0       0
  8178 ;;Total ram usage:        6 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    2
  8181 ;; This function calls:
  8182 ;;		Nothing
  8183 ;; This function is called by:
  8184 ;;		_ReceivedPacketHandler
  8185 ;;		_Blink
  8186 ;;		_AnalogValue
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           
  8191                           ;psect for function _DelayDs
  8192  15DB                     _DelayDs:	
  8193                           
  8194                           ;functions.c: 522: int i;
  8195                           ;functions.c: 523: for(i=0;i<cnt;i++){
  8196                           
  8197                           ;incstack = 0
  8198                           ; Regs used in _DelayDs: [wreg+status,2]
  8199  15DB  1283               	bcf	3,5	;RP0=0, select bank0
  8200  15DC  1303               	bcf	3,6	;RP1=0, select bank0
  8201  15DD  01A4               	clrf	DelayDs@i
  8202  15DE  01A5               	clrf	DelayDs@i+1
  8203  15DF                     l406:	
  8204  15DF  0825               	movf	DelayDs@i+1,w
  8205  15E0  3A80               	xorlw	128
  8206  15E1  00A2               	movwf	??_DelayDs
  8207  15E2  0821               	movf	DelayDs@cnt+1,w
  8208  15E3  3A80               	xorlw	128
  8209  15E4  0222               	subwf	??_DelayDs,w
  8210  15E5  1D03               	skipz
  8211  15E6  2DE9               	goto	u1465
  8212  15E7  0820               	movf	DelayDs@cnt,w
  8213  15E8  0224               	subwf	DelayDs@i,w
  8214  15E9                     u1465:	
  8215  15E9  1803               	btfsc	3,0
  8216  15EA  0008               	return
  8217                           
  8218                           ;functions.c: 524: _delay((unsigned long)((100)*(4000000/4000.0)));
  8219  15EB  3082               	movlw	130
  8220  15EC  1283               	bcf	3,5	;RP0=0, select bank0
  8221  15ED  1303               	bcf	3,6	;RP1=0, select bank0
  8222  15EE  00A3               	movwf	??_DelayDs+1
  8223  15EF  30DD               	movlw	221
  8224  15F0  00A2               	movwf	??_DelayDs
  8225  15F1                     u2957:	
  8226  15F1  0BA2               	decfsz	??_DelayDs,f
  8227  15F2  2DF1               	goto	u2957
  8228  15F3  0BA3               	decfsz	??_DelayDs+1,f
  8229  15F4  2DF1               	goto	u2957
  8230  15F5  3001               	movlw	1
  8231  15F6  1283               	bcf	3,5	;RP0=0, select bank0
  8232  15F7  1303               	bcf	3,6	;RP1=0, select bank0
  8233  15F8  07A4               	addwf	DelayDs@i,f
  8234  15F9  1803               	skipnc
  8235  15FA  0AA5               	incf	DelayDs@i+1,f
  8236  15FB  3000               	movlw	0
  8237  15FC  07A5               	addwf	DelayDs@i+1,f
  8238  15FD  2DDF               	goto	l406
  8239  15FE                     __end_of_DelayDs:	
  8240                           
  8241                           	psect	text44
  8242  0B07                     __ptext44:	
  8243 ;; *************** function _ClockInit *****************
  8244 ;; Defined at:
  8245 ;;		line 6 in file "MCP79510.c"
  8246 ;; Parameters:    Size  Location     Type
  8247 ;;		None
  8248 ;; Auto vars:     Size  Location     Type
  8249 ;;  cnt             1    4[BANK0 ] unsigned char 
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  1    wreg      void 
  8252 ;; Registers used:
  8253 ;;		wreg, status,2, status,0, pclath, cstack
  8254 ;; Tracked objects:
  8255 ;;		On entry : 0/0
  8256 ;;		On exit  : 0/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8259 ;;      Params:         0       0       0       0       0
  8260 ;;      Locals:         0       1       0       0       0
  8261 ;;      Temps:          0       1       0       0       0
  8262 ;;      Totals:         0       2       0       0       0
  8263 ;;Total ram usage:        2 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    4
  8266 ;; This function calls:
  8267 ;;		_ReadSPI
  8268 ;;		_WriteSPI
  8269 ;; This function is called by:
  8270 ;;		_main
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           
  8275                           ;psect for function _ClockInit
  8276  0B07                     _ClockInit:	
  8277                           
  8278                           ;MCP79510.c: 8: RD4 = 0;
  8279                           
  8280                           ;incstack = 0
  8281                           ; Regs used in _ClockInit: [wreg+status,2+status,0+pclath+cstack]
  8282  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  8283  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  8284  0B09  1208               	bcf	8,4	;volatile
  8285                           
  8286                           ;MCP79510.c: 9: WriteSPI(0x12);
  8287  0B0A  3012               	movlw	18
  8288  0B0B  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8289                           
  8290                           ;MCP79510.c: 10: WriteSPI(0x01);
  8291  0B10  3001               	movlw	1
  8292  0B11  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8293                           
  8294                           ;MCP79510.c: 11: WriteSPI(0x00);
  8295  0B16  3000               	movlw	0
  8296  0B17  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8297                           
  8298                           ;MCP79510.c: 12: RD4 = 1;
  8299  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
  8300  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
  8301  0B1E  1608               	bsf	8,4	;volatile
  8302                           
  8303                           ;MCP79510.c: 13: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8304  0B1F  300C               	movlw	12
  8305  0B20  1283               	bcf	3,5	;RP0=0, select bank0
  8306  0B21  1303               	bcf	3,6	;RP1=0, select bank0
  8307  0B22  00A3               	movwf	??_ClockInit
  8308  0B23                     u2967:	
  8309  0B23  0BA3               	decfsz	??_ClockInit,f
  8310  0B24  2B23               	goto	u2967
  8311  0B25  0000               	nop
  8312                           
  8313                           ;MCP79510.c: 14: RD4 = 0;
  8314  0B26  1283               	bcf	3,5	;RP0=0, select bank0
  8315  0B27  1303               	bcf	3,6	;RP1=0, select bank0
  8316  0B28  1208               	bcf	8,4	;volatile
  8317                           
  8318                           ;MCP79510.c: 15: WriteSPI(0x12);
  8319  0B29  3012               	movlw	18
  8320  0B2A  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8321                           
  8322                           ;MCP79510.c: 16: WriteSPI(0x02);
  8323  0B2F  3002               	movlw	2
  8324  0B30  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8325                           
  8326                           ;MCP79510.c: 17: WriteSPI(0x00);
  8327  0B35  3000               	movlw	0
  8328  0B36  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8329                           
  8330                           ;MCP79510.c: 18: RD4 = 1;
  8331  0B3B  1283               	bcf	3,5	;RP0=0, select bank0
  8332  0B3C  1303               	bcf	3,6	;RP1=0, select bank0
  8333  0B3D  1608               	bsf	8,4	;volatile
  8334                           
  8335                           ;MCP79510.c: 19: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8336  0B3E  300C               	movlw	12
  8337  0B3F  1283               	bcf	3,5	;RP0=0, select bank0
  8338  0B40  1303               	bcf	3,6	;RP1=0, select bank0
  8339  0B41  00A3               	movwf	??_ClockInit
  8340  0B42                     u2977:	
  8341  0B42  0BA3               	decfsz	??_ClockInit,f
  8342  0B43  2B42               	goto	u2977
  8343  0B44  0000               	nop
  8344                           
  8345                           ;MCP79510.c: 20: RD4 = 0;
  8346  0B45  1283               	bcf	3,5	;RP0=0, select bank0
  8347  0B46  1303               	bcf	3,6	;RP1=0, select bank0
  8348  0B47  1208               	bcf	8,4	;volatile
  8349                           
  8350                           ;MCP79510.c: 21: WriteSPI(0x12);
  8351  0B48  3012               	movlw	18
  8352  0B49  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8353                           
  8354                           ;MCP79510.c: 22: WriteSPI(0x08);
  8355  0B4E  3008               	movlw	8
  8356  0B4F  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8357                           
  8358                           ;MCP79510.c: 23: WriteSPI(0x00);
  8359  0B54  3000               	movlw	0
  8360  0B55  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8361                           
  8362                           ;MCP79510.c: 24: RD4 = 1;
  8363  0B5A  1283               	bcf	3,5	;RP0=0, select bank0
  8364  0B5B  1303               	bcf	3,6	;RP1=0, select bank0
  8365  0B5C  1608               	bsf	8,4	;volatile
  8366                           
  8367                           ;MCP79510.c: 25: _delay((unsigned long)((40)*(4000000/4000000.0)));
  8368  0B5D  300C               	movlw	12
  8369  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
  8370  0B5F  1303               	bcf	3,6	;RP1=0, select bank0
  8371  0B60  00A3               	movwf	??_ClockInit
  8372  0B61                     u2987:	
  8373  0B61  0BA3               	decfsz	??_ClockInit,f
  8374  0B62  2B61               	goto	u2987
  8375  0B63  0000               	nop
  8376                           
  8377                           ;MCP79510.c: 26: RD4 = 0;
  8378  0B64  1283               	bcf	3,5	;RP0=0, select bank0
  8379  0B65  1303               	bcf	3,6	;RP1=0, select bank0
  8380  0B66  1208               	bcf	8,4	;volatile
  8381                           
  8382                           ;MCP79510.c: 27: WriteSPI(0x12);
  8383  0B67  3012               	movlw	18
  8384  0B68  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8385                           
  8386                           ;MCP79510.c: 28: WriteSPI(0x01);
  8387  0B6D  3001               	movlw	1
  8388  0B6E  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8389                           
  8390                           ;MCP79510.c: 29: WriteSPI(0x80);
  8391  0B73  3080               	movlw	128
  8392  0B74  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8393                           
  8394                           ;MCP79510.c: 30: RD4 = 1;
  8395  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  8396  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  8397  0B7B  1608               	bsf	8,4	;volatile
  8398                           
  8399                           ;MCP79510.c: 32: char cnt = 0;
  8400  0B7C  01A4               	clrf	ClockInit@cnt
  8401  0B7D                     l3150:	
  8402                           ;MCP79510.c: 33: while(cnt < 100)
  8403                           
  8404  0B7D  3064               	movlw	100
  8405  0B7E  0224               	subwf	ClockInit@cnt,w
  8406  0B7F  1803               	btfsc	3,0
  8407  0B80  2B9D               	goto	l663
  8408                           
  8409                           ;MCP79510.c: 34: {
  8410                           ;MCP79510.c: 35: RD4 = 0;
  8411  0B81  1208               	bcf	8,4	;volatile
  8412                           
  8413                           ;MCP79510.c: 36: WriteSPI(0x13);
  8414  0B82  3013               	movlw	19
  8415  0B83  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8416                           
  8417                           ;MCP79510.c: 37: WriteSPI(0x04);
  8418  0B88  3004               	movlw	4
  8419  0B89  160A  118A  24D8  120A  158A  	fcall	_WriteSPI
  8420                           
  8421                           ;MCP79510.c: 38: if((ReadSPI() & 0b00100000) != 0)
  8422  0B8E  160A  118A  249D  120A  158A  	fcall	_ReadSPI
  8423  0B93  3920               	andlw	32
  8424  0B94  1D03               	btfss	3,2
  8425  0B95  2B9D               	goto	l663
  8426                           
  8427                           ;MCP79510.c: 42: }
  8428                           ;MCP79510.c: 43: cnt++;
  8429                           
  8430                           ;MCP79510.c: 39: {
  8431                           ;MCP79510.c: 40: break;
  8432  0B96  3001               	movlw	1
  8433  0B97  1283               	bcf	3,5	;RP0=0, select bank0
  8434  0B98  1303               	bcf	3,6	;RP1=0, select bank0
  8435  0B99  00A3               	movwf	??_ClockInit
  8436  0B9A  0823               	movf	??_ClockInit,w
  8437  0B9B  07A4               	addwf	ClockInit@cnt,f
  8438  0B9C  2B7D               	goto	l3150
  8439  0B9D                     l663:	
  8440                           
  8441                           ;MCP79510.c: 46: }
  8442                           ;MCP79510.c: 47: RD4 = 1;
  8443  0B9D  1283               	bcf	3,5	;RP0=0, select bank0
  8444  0B9E  1303               	bcf	3,6	;RP1=0, select bank0
  8445  0B9F  1608               	bsf	8,4	;volatile
  8446  0BA0  0008               	return
  8447  0BA1                     __end_of_ClockInit:	
  8448                           
  8449                           	psect	text45
  8450  149D                     __ptext45:	
  8451 ;; *************** function _ReadSPI *****************
  8452 ;; Defined at:
  8453 ;;		line 542 in file "functions.c"
  8454 ;; Parameters:    Size  Location     Type
  8455 ;;		None
  8456 ;; Auto vars:     Size  Location     Type
  8457 ;;		None
  8458 ;; Return value:  Size  Location     Type
  8459 ;;                  1    wreg      unsigned char 
  8460 ;; Registers used:
  8461 ;;		wreg, status,2, status,0, pclath, cstack
  8462 ;; Tracked objects:
  8463 ;;		On entry : 0/0
  8464 ;;		On exit  : 0/0
  8465 ;;		Unchanged: 0/0
  8466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8467 ;;      Params:         0       0       0       0       0
  8468 ;;      Locals:         0       0       0       0       0
  8469 ;;      Temps:          0       0       0       0       0
  8470 ;;      Totals:         0       0       0       0       0
  8471 ;;Total ram usage:        0 bytes
  8472 ;; Hardware stack levels used:    1
  8473 ;; Hardware stack levels required when called:    3
  8474 ;; This function calls:
  8475 ;;		_WriteSPI
  8476 ;; This function is called by:
  8477 ;;		_RegisterRead
  8478 ;;		_ReadFIFO
  8479 ;;		_read_ram_status
  8480 ;;		_read_write_flash_ram
  8481 ;;		_ClockInit
  8482 ;;		_ReadClock
  8483 ;;		_read_ram_id
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           
  8488                           ;psect for function _ReadSPI
  8489  149D                     _ReadSPI:	
  8490                           
  8491                           ;functions.c: 544: WriteSPI(0x00);
  8492                           
  8493                           ;incstack = 0
  8494                           ; Regs used in _ReadSPI: [wreg+status,2+status,0+pclath+cstack]
  8495  149D  3000               	movlw	0
  8496  149E  160A  118A  24D8   	fcall	_WriteSPI
  8497                           
  8498                           ;functions.c: 545: return SSPBUF;
  8499  14A1  1283               	bcf	3,5	;RP0=0, select bank0
  8500  14A2  1303               	bcf	3,6	;RP1=0, select bank0
  8501  14A3  0813               	movf	19,w	;volatile
  8502  14A4  0008               	return
  8503  14A5                     __end_of_ReadSPI:	
  8504                           
  8505                           	psect	text46
  8506  14D8                     __ptext46:	
  8507 ;; *************** function _WriteSPI *****************
  8508 ;; Defined at:
  8509 ;;		line 530 in file "functions.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  databyte        1    wreg     unsigned char 
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;  databyte        1    2[BANK0 ] unsigned char 
  8514 ;;  buffer          1    1[BANK0 ] unsigned char 
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  1    wreg      void 
  8517 ;; Registers used:
  8518 ;;		wreg
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8524 ;;      Params:         0       0       0       0       0
  8525 ;;      Locals:         0       2       0       0       0
  8526 ;;      Temps:          0       1       0       0       0
  8527 ;;      Totals:         0       3       0       0       0
  8528 ;;Total ram usage:        3 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:    2
  8531 ;; This function calls:
  8532 ;;		Nothing
  8533 ;; This function is called by:
  8534 ;;		_ReadSPI
  8535 ;;		_RegisterRead
  8536 ;;		_RegisterSet
  8537 ;;		_WriteFIFO
  8538 ;;		_read_ram_status
  8539 ;;		_ram_bulk_erase
  8540 ;;		_read_write_flash_ram
  8541 ;;		_write_ram_status
  8542 ;;		_ClockInit
  8543 ;;		_ReadClock
  8544 ;;		_read_ram_id
  8545 ;;		_ram_sector_erase
  8546 ;;		_power_up_flash_ram
  8547 ;;		_power_down_flash_ram
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           
  8552                           ;psect for function _WriteSPI
  8553  14D8                     _WriteSPI:	
  8554                           
  8555                           ;incstack = 0
  8556                           ; Regs used in _WriteSPI: [wreg]
  8557                           ;WriteSPI@databyte stored from wreg
  8558  14D8  1283               	bcf	3,5	;RP0=0, select bank0
  8559  14D9  1303               	bcf	3,6	;RP1=0, select bank0
  8560  14DA  00A2               	movwf	WriteSPI@databyte
  8561                           
  8562                           ;functions.c: 532: unsigned char buffer;
  8563                           ;functions.c: 533: buffer = SSPBUF;
  8564  14DB  0813               	movf	19,w	;volatile
  8565  14DC  00A0               	movwf	??_WriteSPI
  8566  14DD  0820               	movf	??_WriteSPI,w
  8567  14DE  00A1               	movwf	WriteSPI@buffer
  8568                           
  8569                           ;functions.c: 534: PIR1bits.SSPIF=0;
  8570  14DF  118C               	bcf	12,3	;volatile
  8571                           
  8572                           ;functions.c: 535: SSPBUF = databyte;
  8573  14E0  0822               	movf	WriteSPI@databyte,w
  8574  14E1  0093               	movwf	19	;volatile
  8575  14E2                     l412:	
  8576                           ;functions.c: 536: while(PIR1bits.SSPIF == 0);
  8577                           
  8578  14E2  1D8C               	btfss	12,3	;volatile
  8579  14E3  2CE2               	goto	l412
  8580                           
  8581                           ;functions.c: 537: PIR1bits.SSPIF = 0;
  8582  14E4  118C               	bcf	12,3	;volatile
  8583  14E5  0008               	return
  8584  14E6                     __end_of_WriteSPI:	
  8585                           
  8586                           	psect	text47
  8587  0739                     __ptext47:	
  8588 ;; *************** function _tc_int *****************
  8589 ;; Defined at:
  8590 ;;		line 836 in file "functions.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;		None
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;		None
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  1    wreg      void 
  8597 ;; Registers used:
  8598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8604 ;;      Params:         0       0       0       0       0
  8605 ;;      Locals:         0       0       0       0       0
  8606 ;;      Temps:          7       0       0       0       0
  8607 ;;      Totals:         7       0       0       0       0
  8608 ;;Total ram usage:        7 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    1
  8611 ;; This function calls:
  8612 ;;		_TimerCounter
  8613 ;;		i1_OperationMode
  8614 ;; This function is called by:
  8615 ;;		Interrupt level 1
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           
  8620                           ;psect for function _tc_int
  8621  0739                     _tc_int:	
  8622                           
  8623                           ;functions.c: 839: if((RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2)){
  8624  0739  1A86               	btfsc	6,5	;volatile
  8625  073A  2F51               	goto	i1l3402
  8626  073B  085F               	movf	_intBlinkCycle,w
  8627  073C  0460               	iorwf	_intBlinkCycle+1,w
  8628  073D  1D03               	btfss	3,2
  8629  073E  2F51               	goto	i1l3402
  8630  073F  160A  118A  24AD  120A  118A  	fcall	i1_OperationMode
  8631  0744  00F5               	movwf	??_tc_int
  8632  0745  3002               	movlw	2
  8633  0746  0275               	subwf	??_tc_int,w
  8634  0747  1803               	skipnc
  8635  0748  2F51               	goto	i1l3402
  8636                           
  8637                           ;functions.c: 840: intBlinkCycle = 1;
  8638  0749  3001               	movlw	1
  8639  074A  1283               	bcf	3,5	;RP0=0, select bank0
  8640  074B  1303               	bcf	3,6	;RP1=0, select bank0
  8641  074C  00DF               	movwf	_intBlinkCycle
  8642  074D  3000               	movlw	0
  8643  074E  00E0               	movwf	_intBlinkCycle+1
  8644                           
  8645                           ;functions.c: 841: intBlinkCounter = 0;
  8646  074F  01FC               	clrf	_intBlinkCounter
  8647  0750  01FD               	clrf	_intBlinkCounter+1
  8648  0751                     i1l3402:	
  8649                           
  8650                           ;functions.c: 843: }
  8651                           ;functions.c: 846: if(TMR1IF ==1){
  8652  0751  1283               	bcf	3,5	;RP0=0, select bank0
  8653  0752  1303               	bcf	3,6	;RP1=0, select bank0
  8654  0753  1C0C               	btfss	12,0	;volatile
  8655  0754  2FEE               	goto	L5
  8656                           
  8657                           ;functions.c: 847: TMR1ON = 0;
  8658  0755  1010               	bcf	16,0	;volatile
  8659                           
  8660                           ;functions.c: 848: TMR1H = 0x0B;
  8661  0756  300B               	movlw	11
  8662  0757  008F               	movwf	15	;volatile
  8663                           
  8664                           ;functions.c: 849: TMR1L = 0xDB;
  8665  0758  30DB               	movlw	219
  8666  0759  008E               	movwf	14	;volatile
  8667                           
  8668                           ;functions.c: 851: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
  8669  075A  035F               	decf	_intBlinkCycle,w
  8670  075B  0460               	iorwf	_intBlinkCycle+1,w
  8671  075C  1D03               	btfss	3,2
  8672  075D  2F80               	goto	i1l3420
  8673  075E  086E               	movf	_intNumberOfBlinks+1,w
  8674  075F  00F6               	movwf	??_tc_int+1
  8675  0760  086D               	movf	_intNumberOfBlinks,w
  8676  0761  00F5               	movwf	??_tc_int
  8677  0762  1003               	clrc
  8678  0763  0DF5               	rlf	??_tc_int,f
  8679  0764  0DF6               	rlf	??_tc_int+1,f
  8680  0765  087D               	movf	_intBlinkCounter+1,w
  8681  0766  3A80               	xorlw	128
  8682  0767  00F7               	movwf	??_tc_int+2
  8683  0768  0876               	movf	??_tc_int+1,w
  8684  0769  3A80               	xorlw	128
  8685  076A  0277               	subwf	??_tc_int+2,w
  8686  076B  1D03               	skipz
  8687  076C  2F6F               	goto	u272_25
  8688  076D  0875               	movf	??_tc_int,w
  8689  076E  027C               	subwf	_intBlinkCounter,w
  8690  076F                     u272_25:	
  8691  076F  1803               	skipnc
  8692  0770  2F80               	goto	i1l3420
  8693                           
  8694                           ;functions.c: 852: intBlinkCounter++;
  8695  0771  3001               	movlw	1
  8696  0772  07FC               	addwf	_intBlinkCounter,f
  8697  0773  1803               	skipnc
  8698  0774  0AFD               	incf	_intBlinkCounter+1,f
  8699  0775  3000               	movlw	0
  8700  0776  07FD               	addwf	_intBlinkCounter+1,f
  8701                           
  8702                           ;functions.c: 854: if(RC1 == 0)
  8703  0777  1283               	bcf	3,5	;RP0=0, select bank0
  8704  0778  1303               	bcf	3,6	;RP1=0, select bank0
  8705  0779  1887               	btfsc	7,1	;volatile
  8706  077A  2F7D               	goto	i1l465
  8707                           
  8708                           ;functions.c: 855: RC1 = 1;
  8709  077B  1487               	bsf	7,1	;volatile
  8710  077C  2F9E               	goto	i1l3428
  8711  077D                     i1l465:	
  8712                           
  8713                           ;functions.c: 856: else if(RC1 == 1)
  8714  077D  1C87               	btfss	7,1	;volatile
  8715  077E  2F9E               	goto	i1l3428
  8716  077F  2F9D               	goto	i1l3426
  8717  0780                     i1l3420:	
  8718                           ;functions.c: 858: }
  8719                           
  8720                           ;functions.c: 857: RC1 = 0;
  8721                           
  8722                           
  8723                           ;functions.c: 860: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
  8724  0780  1283               	bcf	3,5	;RP0=0, select bank0
  8725  0781  1303               	bcf	3,6	;RP1=0, select bank0
  8726  0782  035F               	decf	_intBlinkCycle,w
  8727  0783  0460               	iorwf	_intBlinkCycle+1,w
  8728  0784  1D03               	btfss	3,2
  8729  0785  2F9E               	goto	i1l3428
  8730  0786  086E               	movf	_intNumberOfBlinks+1,w
  8731  0787  00F6               	movwf	??_tc_int+1
  8732  0788  086D               	movf	_intNumberOfBlinks,w
  8733  0789  00F5               	movwf	??_tc_int
  8734  078A  1003               	clrc
  8735  078B  0DF5               	rlf	??_tc_int,f
  8736  078C  0DF6               	rlf	??_tc_int+1,f
  8737  078D  087D               	movf	_intBlinkCounter+1,w
  8738  078E  3A80               	xorlw	128
  8739  078F  00F7               	movwf	??_tc_int+2
  8740  0790  0876               	movf	??_tc_int+1,w
  8741  0791  3A80               	xorlw	128
  8742  0792  0277               	subwf	??_tc_int+2,w
  8743  0793  1D03               	skipz
  8744  0794  2F97               	goto	u276_25
  8745  0795  0875               	movf	??_tc_int,w
  8746  0796  027C               	subwf	_intBlinkCounter,w
  8747  0797                     u276_25:	
  8748  0797  1C03               	skipc
  8749  0798  2F9E               	goto	i1l3428
  8750                           
  8751                           ;functions.c: 861: intBlinkCycle = 0;
  8752  0799  1283               	bcf	3,5	;RP0=0, select bank0
  8753  079A  1303               	bcf	3,6	;RP1=0, select bank0
  8754  079B  01DF               	clrf	_intBlinkCycle
  8755  079C  01E0               	clrf	_intBlinkCycle+1
  8756  079D                     i1l3426:	
  8757                           
  8758                           ;functions.c: 862: RC1 = 0;
  8759  079D  1087               	bcf	7,1	;volatile
  8760  079E                     i1l3428:	
  8761                           
  8762                           ;functions.c: 863: }
  8763                           ;functions.c: 866: intHalfSecondCounter++;
  8764  079E  3001               	movlw	1
  8765  079F  1283               	bcf	3,5	;RP0=0, select bank0
  8766  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  8767  07A1  07E3               	addwf	_intHalfSecondCounter,f
  8768  07A2  1803               	skipnc
  8769  07A3  0AE4               	incf	_intHalfSecondCounter+1,f
  8770  07A4  3000               	movlw	0
  8771  07A5  07E4               	addwf	_intHalfSecondCounter+1,f
  8772                           
  8773                           ;functions.c: 867: if(intHalfSecondCounter>=2)
  8774  07A6  0864               	movf	_intHalfSecondCounter+1,w
  8775  07A7  3A80               	xorlw	128
  8776  07A8  00FF               	movwf	127
  8777  07A9  3080               	movlw	128
  8778  07AA  027F               	subwf	127,w
  8779  07AB  1D03               	skipz
  8780  07AC  2FAF               	goto	u277_25
  8781  07AD  3002               	movlw	2
  8782  07AE  0263               	subwf	_intHalfSecondCounter,w
  8783  07AF                     u277_25:	
  8784  07AF  1C03               	skipc
  8785  07B0  2FC0               	goto	i1l3438
  8786                           
  8787                           ;functions.c: 868: {
  8788                           ;functions.c: 869: intHalfSecondCounter = 0;
  8789  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  8790  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  8791  07B3  01E3               	clrf	_intHalfSecondCounter
  8792  07B4  01E4               	clrf	_intHalfSecondCounter+1
  8793                           
  8794                           ;functions.c: 870: intSecondCounter++;
  8795  07B5  3001               	movlw	1
  8796  07B6  07E7               	addwf	_intSecondCounter,f
  8797  07B7  1803               	skipnc
  8798  07B8  0AE8               	incf	_intSecondCounter+1,f
  8799  07B9  3000               	movlw	0
  8800  07BA  07E8               	addwf	_intSecondCounter+1,f
  8801                           
  8802                           ;functions.c: 871: TimerCounter();
  8803  07BB  160A  118A  27BE  120A  118A  	fcall	_TimerCounter
  8804  07C0                     i1l3438:	
  8805                           
  8806                           ;functions.c: 873: }
  8807                           ;functions.c: 874: if(intSecondCounter >=60)
  8808  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  8809  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  8810  07C2  0868               	movf	_intSecondCounter+1,w
  8811  07C3  3A80               	xorlw	128
  8812  07C4  00FF               	movwf	127
  8813  07C5  3080               	movlw	128
  8814  07C6  027F               	subwf	127,w
  8815  07C7  1D03               	skipz
  8816  07C8  2FCB               	goto	u278_25
  8817  07C9  303C               	movlw	60
  8818  07CA  0267               	subwf	_intSecondCounter,w
  8819  07CB                     u278_25:	
  8820  07CB  1C03               	skipc
  8821  07CC  2FD9               	goto	i1l3446
  8822                           
  8823                           ;functions.c: 875: {
  8824                           ;functions.c: 876: intSecondCounter = 0;
  8825  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  8826  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  8827  07CF  01E7               	clrf	_intSecondCounter
  8828  07D0  01E8               	clrf	_intSecondCounter+1
  8829                           
  8830                           ;functions.c: 877: intMinuteCounter++;
  8831  07D1  3001               	movlw	1
  8832  07D2  07E5               	addwf	_intMinuteCounter,f
  8833  07D3  1803               	skipnc
  8834  07D4  0AE6               	incf	_intMinuteCounter+1,f
  8835  07D5  3000               	movlw	0
  8836  07D6  07E6               	addwf	_intMinuteCounter+1,f
  8837                           
  8838                           ;functions.c: 878: bSaveDataToFlash = TRUE;
  8839  07D7  01EB               	clrf	_bSaveDataToFlash
  8840  07D8  0AEB               	incf	_bSaveDataToFlash,f
  8841  07D9                     i1l3446:	
  8842                           
  8843                           ;functions.c: 880: }
  8844                           ;functions.c: 881: if(intMinuteCounter >= 60)
  8845  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  8846  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  8847  07DB  0866               	movf	_intMinuteCounter+1,w
  8848  07DC  3A80               	xorlw	128
  8849  07DD  00FF               	movwf	127
  8850  07DE  3080               	movlw	128
  8851  07DF  027F               	subwf	127,w
  8852  07E0  1D03               	skipz
  8853  07E1  2FE4               	goto	u279_25
  8854  07E2  303C               	movlw	60
  8855  07E3  0265               	subwf	_intMinuteCounter,w
  8856  07E4                     u279_25:	
  8857  07E4  1C03               	skipc
  8858  07E5  2FEA               	goto	i1l3450
  8859                           
  8860                           ;functions.c: 882: {
  8861                           ;functions.c: 883: intMinuteCounter = 0;
  8862  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  8863  07E7  1303               	bcf	3,6	;RP1=0, select bank0
  8864  07E8  01E5               	clrf	_intMinuteCounter
  8865  07E9  01E6               	clrf	_intMinuteCounter+1
  8866  07EA                     i1l3450:	
  8867                           
  8868                           ;functions.c: 884: }
  8869                           ;functions.c: 887: TMR1ON = 1;
  8870  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  8871  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  8872  07EC  1410               	bsf	16,0	;volatile
  8873                           
  8874                           ;functions.c: 888: }
  8875                           ;functions.c: 889: TMR1IF = 0;
  8876  07ED  100C               	bcf	12,0	;volatile
  8877  07EE                     L5:	
  8878                           
  8879                           ;functions.c: 890: RBIF = 0;
  8880  07EE  100B               	bcf	11,0	;volatile
  8881                           
  8882                           ;functions.c: 891: GIE = 1;
  8883  07EF  178B               	bsf	11,7	;volatile
  8884                           
  8885                           ;functions.c: 892: return;
  8886  07F0  087B               	movf	??_tc_int+6,w
  8887  07F1  00FF               	movwf	127
  8888  07F2  087A               	movf	??_tc_int+5,w
  8889  07F3  008A               	movwf	10
  8890  07F4  0879               	movf	??_tc_int+4,w
  8891  07F5  0084               	movwf	4
  8892  07F6  0E78               	swapf	(??_tc_int+3)^(0+-128),w
  8893  07F7  0083               	movwf	3
  8894  07F8  0EFE               	swapf	126,f
  8895  07F9  0E7E               	swapf	126,w
  8896  07FA  0009               	retfie
  8897  07FB                     __end_of_tc_int:	
  8898                           
  8899                           	psect	intentry
  8900  0004                     __pintentry:	
  8901                           ;incstack = 0
  8902 ;; hardware stack exceeded
  8903                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8904                           
  8905  0004                     interrupt_function:	
  8906  007E                     saved_w	set	btemp
  8907  0004  00FE               	movwf	btemp
  8908  0005  0E03               	swapf	3,w
  8909  0006  00F8               	movwf	??_tc_int+3
  8910  0007  0804               	movf	4,w
  8911  0008  00F9               	movwf	??_tc_int+4
  8912  0009  080A               	movf	10,w
  8913  000A  00FA               	movwf	??_tc_int+5
  8914  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8915  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8916  000D  087F               	movf	btemp+1,w
  8917  000E  00FB               	movwf	??_tc_int+6
  8918  000F  120A  118A  2F39   	ljmp	_tc_int
  8919                           
  8920                           	psect	text48
  8921  14AD                     __ptext48:	
  8922 ;; *************** function i1_OperationMode *****************
  8923 ;; Defined at:
  8924 ;;		line 974 in file "functions.c"
  8925 ;; Parameters:    Size  Location     Type
  8926 ;;		None
  8927 ;; Auto vars:     Size  Location     Type
  8928 ;;  OperationMod    1    1[COMMON] unsigned char 
  8929 ;; Return value:  Size  Location     Type
  8930 ;;                  1    wreg      unsigned char 
  8931 ;; Registers used:
  8932 ;;		wreg, status,2
  8933 ;; Tracked objects:
  8934 ;;		On entry : 0/0
  8935 ;;		On exit  : 0/0
  8936 ;;		Unchanged: 0/0
  8937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8938 ;;      Params:         0       0       0       0       0
  8939 ;;      Locals:         1       0       0       0       0
  8940 ;;      Temps:          1       0       0       0       0
  8941 ;;      Totals:         2       0       0       0       0
  8942 ;;Total ram usage:        2 bytes
  8943 ;; Hardware stack levels used:    1
  8944 ;; This function calls:
  8945 ;;		Nothing
  8946 ;; This function is called by:
  8947 ;;		_tc_int
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           
  8952                           ;psect for function i1_OperationMode
  8953  14AD                     i1_OperationMode:	
  8954                           
  8955                           ;functions.c: 976: unsigned char bracketStatus;
  8956                           ;functions.c: 977: bracketStatus = (PORTD & 0b00000111) ;
  8957                           
  8958                           ;incstack = 0
  8959 ;; hardware stack exceeded
  8960                           ; Regs used in i1_OperationMode: [wreg+status,2]
  8961  14AD  1283               	bcf	3,5	;RP0=0, select bank0
  8962  14AE  1303               	bcf	3,6	;RP1=0, select bank0
  8963  14AF  0808               	movf	8,w	;volatile
  8964  14B0  3907               	andlw	7
  8965  14B1  00F0               	movwf	??i1_OperationMode
  8966  14B2  0870               	movf	??i1_OperationMode,w
  8967  14B3  00F1               	movwf	i1OperationMode@bracketStatus
  8968                           
  8969                           ;functions.c: 979: return bracketStatus;
  8970  14B4  0871               	movf	i1OperationMode@bracketStatus,w
  8971  14B5  0008               	return
  8972  14B6                     __end_ofi1_OperationMode:	
  8973                           
  8974                           	psect	text49
  8975  17BE                     __ptext49:	
  8976 ;; *************** function _TimerCounter *****************
  8977 ;; Defined at:
  8978 ;;		line 425 in file "functions.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;		None
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;  i               2    3[COMMON] int 
  8983 ;; Return value:  Size  Location     Type
  8984 ;;                  1    wreg      void 
  8985 ;; Registers used:
  8986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  8987 ;; Tracked objects:
  8988 ;;		On entry : 0/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8992 ;;      Params:         0       0       0       0       0
  8993 ;;      Locals:         2       0       0       0       0
  8994 ;;      Temps:          3       0       0       0       0
  8995 ;;      Totals:         5       0       0       0       0
  8996 ;;Total ram usage:        5 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; This function calls:
  8999 ;;		Nothing
  9000 ;; This function is called by:
  9001 ;;		_tc_int
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           
  9006                           ;psect for function _TimerCounter
  9007  17BE                     _TimerCounter:	
  9008                           
  9009                           ;functions.c: 427: for (int i = 0; i < 5; i++)
  9010                           
  9011                           ;incstack = 0
  9012 ;; hardware stack exceeded
  9013                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  9014  17BE  01F3               	clrf	TimerCounter@i
  9015  17BF  01F4               	clrf	TimerCounter@i+1
  9016  17C0                     L6:	
  9017  17C0  0874               	movf	TimerCounter@i+1,w
  9018  17C1  3A80               	xorlw	128
  9019  17C2  00FF               	movwf	127
  9020  17C3  3080               	movlw	128
  9021  17C4  027F               	subwf	127,w
  9022  17C5  1D03               	skipz
  9023  17C6  2FC9               	goto	u253_25
  9024  17C7  3005               	movlw	5
  9025  17C8  0273               	subwf	TimerCounter@i,w
  9026  17C9                     u253_25:	
  9027  17C9  1803               	btfsc	3,0
  9028  17CA  0008               	return
  9029                           
  9030                           ;functions.c: 428: {
  9031                           ;functions.c: 429: if(intClockTimer[i]>0)
  9032  17CB  0873               	movf	TimerCounter@i,w
  9033  17CC  00F0               	movwf	??_TimerCounter
  9034  17CD  0770               	addwf	??_TimerCounter,w
  9035  17CE  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  9036  17CF  0084               	movwf	4
  9037  17D0  1383               	bcf	3,7	;select IRP bank1
  9038  17D1  0800               	movf	0,w
  9039  17D2  00F1               	movwf	??_TimerCounter+1
  9040  17D3  0A84               	incf	4,f
  9041  17D4  0800               	movf	0,w
  9042  17D5  00F2               	movwf	??_TimerCounter+2
  9043  17D6  0872               	movf	??_TimerCounter+2,w
  9044  17D7  3A80               	xorlw	128
  9045  17D8  00FF               	movwf	127
  9046  17D9  3080               	movlw	128
  9047  17DA  027F               	subwf	127,w
  9048  17DB  1D03               	skipz
  9049  17DC  2FDF               	goto	u254_25
  9050  17DD  3001               	movlw	1
  9051  17DE  0271               	subwf	??_TimerCounter+1,w
  9052  17DF                     u254_25:	
  9053  17DF  1C03               	skipc
  9054  17E0  2FF3               	goto	i1l3320
  9055                           
  9056                           ;functions.c: 430: intClockTimer[i]--;
  9057  17E1  0873               	movf	TimerCounter@i,w
  9058  17E2  00F0               	movwf	??_TimerCounter
  9059  17E3  0770               	addwf	??_TimerCounter,w
  9060  17E4  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  9061  17E5  0084               	movwf	4
  9062  17E6  30FF               	movlw	255
  9063  17E7  1383               	bcf	3,7	;select IRP bank1
  9064  17E8  0780               	addwf	0,f
  9065  17E9  0F84               	incfsz	4,f
  9066  17EA  0800               	movf	0,w
  9067  17EB  1803               	skipnc
  9068  17EC  0A00               	incf	0,w
  9069  17ED  00FF               	movwf	127
  9070  17EE  30FF               	movlw	255
  9071  17EF  077F               	addwf	127,w
  9072  17F0  0080               	movwf	0
  9073  17F1  0384               	decf	4,f
  9074  17F2  2FF9               	goto	i1l3322
  9075  17F3                     i1l3320:	
  9076                           
  9077                           ;functions.c: 431: else
  9078                           ;functions.c: 432: bTimerComplete[i] = 1;
  9079  17F3  0873               	movf	TimerCounter@i,w
  9080  17F4  3E58               	addlw	(low (_bTimerComplete| 0))& (0+255)
  9081  17F5  0084               	movwf	4
  9082  17F6  1383               	bcf	3,7	;select IRP bank0
  9083  17F7  0180               	clrf	0
  9084  17F8  0A80               	incf	0,f
  9085  17F9                     i1l3322:	
  9086  17F9  3001               	movlw	1
  9087  17FA  07F3               	addwf	TimerCounter@i,f
  9088  17FB  1803               	skipnc
  9089  17FC  0AF4               	incf	TimerCounter@i+1,f
  9090  17FD  3000               	movlw	0
  9091  17FE  07F4               	addwf	TimerCounter@i+1,f
  9092  17FF  2FC0               	goto	L6
  9093  1800                     __end_of_TimerCounter:	
  9094  007E                     btemp	set	126	;btemp
  9095  007E                     wtemp0	set	126


Data Sizes:
    Strings     16
    Constant    39
    Data        3
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     56      80
    BANK1            80     34      44
    BANK3            96      0      40
    BANK2            96      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strchr@ptr	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    strstr@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strstr@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    ReadClock@year	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@year(BANK0[1]), 

    ReadClock@month	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@month(BANK0[1]), 

    ReadClock@date	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@date(BANK0[1]), 

    ReadClock@hour	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@hours(BANK0[1]), 

    ReadClock@minutes	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@minutes(BANK0[1]), 

    ReadClock@seconds	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@seconds(BANK0[1]), 

    read_write_flash_ram@mem_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@value(BANK0[1]), saveDataToFlash@value(BANK0[1]), 

    ReadMemoryAdress@var1	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr1(BANK0[1]), saveDataToFlash@addr1(BANK0[1]), IncreaseMemoryAdress@addr1(BANK0[1]), 

    ReadMemoryAdress@var2	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr2(BANK0[1]), saveDataToFlash@addr2(BANK0[1]), IncreaseMemoryAdress@addr2(BANK0[1]), 

    ReadMemoryAdress@var3	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr3(BANK0[1]), saveDataToFlash@addr3(BANK0[1]), IncreaseMemoryAdress@addr3(BANK0[1]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    ReceivedPacketHandler@Data	PTR unsigned char  size(1) Largest target is 30
		 -> TransiverReadFIFO@ReceivedString(BANK1[30]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_TimerCounter

Critical Paths under _main in BANK0

    _main->_TransiverReadFIFO
    _saveDataToFlash->_ReadClock
    _ReadClock->___bmul
    _IncreaseMemoryAdress->_WriteMemoryAdress
    _WriteMemoryAdress->_eeprom_write
    _TransiverToReceive->_FindChannel
    _TransiverReadFIFO->_ReceivedPacketHandler
    _ReceivedPacketHandler->_SendMemoryData
    _write_ram_status->_read_ram_status
    _strstr->_strncmp
    _strncmp->_strlen
    _ram_bulk_erase->_read_ram_status
    _SendMemoryData->_TransmittPacket
    _read_write_flash_ram->_read_ram_status
    _read_ram_status->_WriteSPI
    _ReadMemoryAdress->_eeprom_read
    _ResetMemoryAdress->_eeprom_write
    _TransiverInit->_FindChannel
    _Blink->_DelayDs
    _Mode_5->_TransmittPacket
    _Mode_4->_TransmittPacket
    _TransmittPacket->_FindChannel
    _WriteFIFO->_WriteSPI
    _FindChannel->_SetRFMode
    _SetRFMode->_RegisterSet
    _RegisterSet->_RegisterRead
    _RegisterRead->_WriteSPI
    _Mode_1->_DarknessCheck
    _LightWithSensController->_DarknessCheck
    _DarknessCheck->_AnalogValue
    _AnalogValue->_DelayDs
    _ClockInit->_WriteSPI
    _ReadSPI->_WriteSPI

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_TransiverReadFIFO

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  103807
                                             51 BANK0      5     5      0
                          _ClockInit
                             _Mode_0
                             _Mode_1
                             _Mode_2
                             _Mode_4
                             _Mode_5
                      _OperationMode
                            _PICInit
                      _TransiverInit
                  _TransiverReadFIFO
                 _TransiverToReceive
                    _saveDataToFlash
 ---------------------------------------------------------------------------------
 (1) _saveDataToFlash                                     15    15      0   13887
                                             24 BANK0     15    15      0
                        _AnalogValue
               _IncreaseMemoryAdress
                          _ReadClock
                   _ReadMemoryAdress
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (2) _ReadClock                                           20    15      5    1551
                                              4 BANK0     20    15      5
                            _ReadSPI
                           _WriteSPI
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     476
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _IncreaseMemoryAdress                                15    15      0    3014
                                              7 BANK0     15    15      0
                   _ReadMemoryAdress
                  _WriteMemoryAdress
 ---------------------------------------------------------------------------------
 (3) _WriteMemoryAdress                                    4     2      2     686
                                              3 BANK0      4     2      2
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (1) _TransiverToReceive                                   2     2      0    9949
                                             21 BANK0      2     2      0
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (1) _TransiverReadFIFO                                   36    36      0   38791
                                             49 BANK0      2     2      0
                                              0 BANK1     34    34      0
                           _ReadFIFO
              _ReceivedPacketHandler
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _ReceivedPacketHandler                                2     2      0   35533
                                             47 BANK0      2     2      0
                        _AnalogValue
                      _DarknessCheck
                            _DelayDs
                      _OperationMode
                  _ResetMemoryAdress
                     _SendMemoryData
                    _TransmittPacket
                        _eeprom_read
                       _eeprom_write
                     _ram_bulk_erase
                    _read_ram_status
                             _strstr
                   _write_ram_status
 ---------------------------------------------------------------------------------
 (3) _write_ram_status                                     1     1      0     114
                                              5 BANK0      1     1      0
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _strstr                                               5     4      1     959
                                             14 BANK0      5     4      1
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              6     3      3     292
                                              8 BANK0      6     3      3
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               8     6      2     120
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               3     1      2     182
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ram_bulk_erase                                       0     0      0      92
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _SendMemoryData                                      20    20      0   18503
                                             27 BANK0     20    20      0
                   _ReadMemoryAdress
                    _TransmittPacket
                            ___llmod
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (2) _read_write_flash_ram                                11     5      6    4519
                                              5 BANK0     11     5      6
                            _ReadSPI
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _read_ram_status                                      2     2      0      69
                                              3 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     287
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) _ReadMemoryAdress                                     4     2      2    1984
                                              2 BANK0      4     2      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _ResetMemoryAdress                                    0     0      0     492
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (4) _eeprom_write                                         3     2      1     492
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadFIFO                                             2     2      0      46
                                              3 BANK0      2     2      0
                            _ReadSPI
 ---------------------------------------------------------------------------------
 (1) _TransiverInit                                        1     1      0   10359
                                             21 BANK0      1     1      0
                              _Blink
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _Blink                                                5     3      2    1116
                                              6 BANK0      5     3      2
                            _DelayDs
 ---------------------------------------------------------------------------------
 (1) _PICInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mode_5                                               1     1      0   13035
                                             27 BANK0      1     1      0
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (1) _Mode_4                                               0     0      0   13035
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (3) _TransmittPacket                                      6     5      1   11255
                                             21 BANK0      6     5      1
                        _AnalogValue (ARG)
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                          _WriteFIFO
                        _eeprom_read (ARG)
                      _timerFunction
 ---------------------------------------------------------------------------------
 (4) _WriteFIFO                                            1     1      0      45
                                              3 BANK0      1     1      0
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _FindChannel                                          7     7      0    4734
                                             14 BANK0      7     7      0
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _SetRFMode                                            3     3      0    2321
                                             11 BANK0      3     3      0
                       _RegisterRead
                        _RegisterSet
 ---------------------------------------------------------------------------------
 (3) _RegisterSet                                          4     3      1    2074
                                              7 BANK0      4     3      1
                       _RegisterRead (ARG)
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _RegisterRead                                         4     4      0     114
                                              3 BANK0      4     4      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (1) _Mode_2                                               0     0      0    1780
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (1) _Mode_1                                               0     0      0    1074
                      _DarknessCheck
 ---------------------------------------------------------------------------------
 (1) _Mode_0                                               0     0      0    1780
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (2) _LightWithSensController                              0     0      0    1780
                      _DarknessCheck
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _timerFunction                                        5     1      4     706
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _DarknessCheck                                        2     2      0    1074
                                              8 BANK0      2     2      0
                        _AnalogValue
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _AnalogValue                                          2     2      0    1028
                                              6 BANK0      2     2      0
                            _DelayDs
 ---------------------------------------------------------------------------------
 (3) _DelayDs                                              6     4      2    1006
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            2     2      0      70
                                              3 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _ReadSPI                                              0     0      0      23
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _WriteSPI                                             3     3      0      23
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _tc_int                                              7     7      0     135
                                              5 COMMON     7     7      0
                       _TimerCounter
                    i1_OperationMode
 ---------------------------------------------------------------------------------
 (11) i1_OperationMode                                     2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _TimerCounter                                        5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClockInit
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _Mode_0
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_1
     _DarknessCheck
       _AnalogValue
         _DelayDs
       _eeprom_read
   _Mode_2
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_4
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _Mode_5
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _OperationMode
   _PICInit
   _TransiverInit
     _Blink
       _DelayDs
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
   _TransiverReadFIFO
     _ReadFIFO
       _ReadSPI
         _WriteSPI
     _ReceivedPacketHandler
       _AnalogValue
         _DelayDs
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _DelayDs
       _OperationMode
       _ResetMemoryAdress
         _eeprom_write
       _SendMemoryData
         _ReadMemoryAdress
           _eeprom_read
         _TransmittPacket
           _AnalogValue (ARG)
             _DelayDs
           _FindChannel (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
             _SetRFMode
               _RegisterRead
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _RegisterSet
                 _RegisterRead (ARG)
                   _ReadSPI
                     _WriteSPI
                   _WriteSPI
                 _WriteSPI (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet (ARG)
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
           _WriteFIFO (ARG)
             _WriteSPI
           _eeprom_read (ARG)
           _timerFunction (ARG)
         ___llmod
         _read_write_flash_ram
           _ReadSPI
             _WriteSPI
           _WriteSPI
           _read_ram_status
             _ReadSPI
               _WriteSPI
             _WriteSPI
       _TransmittPacket
         _AnalogValue (ARG)
           _DelayDs
         _FindChannel (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
         _WriteFIFO (ARG)
           _WriteSPI
         _eeprom_read (ARG)
         _timerFunction (ARG)
       _eeprom_read
       _eeprom_write
       _ram_bulk_erase
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
       _write_ram_status
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _TransiverToReceive
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _saveDataToFlash
     _AnalogValue
       _DelayDs
     _IncreaseMemoryAdress
       _ReadMemoryAdress
         _eeprom_read
       _WriteMemoryAdress
         _eeprom_write
     _ReadClock
       _ReadSPI
         _WriteSPI
       _WriteSPI
       ___bmul
     _ReadMemoryAdress
       _eeprom_read
     _read_write_flash_ram
       _ReadSPI
         _WriteSPI
       _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI

 _tc_int (ROOT)
   _TimerCounter
   i1_OperationMode

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      28       9       41.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      2C       7       55.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     38      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B2      12        0.0%
ABS                  0      0      B2       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Mar 23 21:39:44 2017

                             __CFG_CP$ON 0000                       ?_WriteMemoryAdress 0023  
               __size_of_read_ram_status 0014                                        pc 0002  
             __size_of_TransiverReadFIFO 006D                    _bTransiverModeReceive 006C  
                         ___bmul@product 0022                              _SSPSTATbits 0094  
                                     _RD 0C60                              __CFG_CPD$ON 0000  
                                     _WR 0C61                          _saveDataToFlash 0045  
                                     fsr 0004                                      l302 04AF  
                    ??_WriteMemoryAdress 0025                                      l400 0978  
                                    l306 02E1                                      l412 14E2  
                                    l308 02F6            __size_of_read_write_flash_ram 007C  
                                    l309 030B                                      l406 15DF  
                                    l363 14D6                                      l347 0C31  
                                    l436 0A87                                      l382 17BC  
                                    l358 1567                                      l702 171F  
                                    l476 1690                                      l397 0972  
                                    l663 0B9D                                      l680 1604  
                                    l498 0ECD                                      l595 0AF4  
                                    _GIE 005F                                      _RA1 0029  
                                    _RB0 0030                                      _RB1 0031  
                                    _RC0 0038                                      _RA4 002C  
                                    _RC1 0039                                      _RB3 0033  
                                    _RA5 002D                                      _RC2 003A  
                                    _RB4 0034                                      _RB5 0035  
                                    _RD3 0043                                      _RD4 0044  
                  __end_of_DarknessCheck 166D                                      fsr0 0004  
                                    indf 0000                         TransmittPacket@i 0038  
                    __end_of_FindChannel 1000                          ??_timerFunction 0024  
                           __CFG_LVP$OFF 0000                                     l1164 0805  
                                   l2400 0A57                                     l1176 081A  
                                   l2402 0A66                                     l3106 0E16  
                                   l3150 0B7D                                     l2406 0A74  
                                   l2422 0F2C                                     l3230 0A07  
                                   l3222 09E6                                     l3160 155C  
                                   l2440 0FBA                                     l2442 0FEB  
                                   l2602 08D9                                     l3226 0A00  
                                   l2516 0C3A                                     l2438 0FDA  
                                   l2446 0FFE                                     l3182 1524  
                                   l2606 08E6                                     l2614 16CB  
                                   l2630 084F                                     l3176 1500  
                                   l2712 15D2                                     l2616 16DA  
                                   l2632 0858                                     l3360 0CD9  
                                   l2394 0A2C                                     l2490 0BDD  
                                   l2642 080E                                     l2626 0839  
                                   l3354 0C8C                                     l3346 0C86  
                                   l2396 0A39                                     l2492 0BF0  
                                   l2580 0ADF                                     l2740 05C0  
                                   l3196 0926                                     l3380 0D17  
                                   l3372 0D00                                     l3364 0CE6  
                                   l3356 0CCC                                     l2398 0A48  
                                   l2582 0AEB                                     l2566 0A94  
                                   l2662 087D                                     l2902 047C  
                                   l2814 0320                                     l2910 048D  
                                   l3198 0939                                     l2680 166B  
                                   l2584 0AC3                                     l2656 085F  
                                   l2664 0896                                     l2840 038C  
                                   l2816 0332                                     l3376 0D0D  
                                   l3368 0CF3                                     l2746 054B  
                                   l2906 0485                                     l2754 152C  
                                   l3386 0D23                                     l2676 1652  
                                   l2596 08AB                                     l2588 0AF6  
                                   l2748 05F9                                     l2668 089F  
                                   l2852 03B6                                     l2828 035D  
                                   l2918 178C                                     l2598 08BB  
                                   l2870 040D                                     l2846 03A6  
                                   l2790 02BF                                     l2758 1532  
                                   l2928 17A1                                     l2696 1713  
                                   l2864 03E8                                     l2960 0EC5  
                                   l2946 1752                                     l2882 0434  
                                   l2858 03CF                                     l2786 02A8  
                                   l2876 0420                                     l2868 03FD  
                                   l2796 02D0                                     l2886 043C  
                                   l2878 0428              __size_of_TransiverToReceive 005C  
                                   l2896 0453                                     l2898 045E  
                                   STR_1 102D                                     STR_2 1035  
                                   u2230 0E5F                                     u2215 175C  
                                   u2231 0E60                                     u2232 0E65  
                                   u1425 0F2A                                     u2233 0E66  
                                   u2225 0E50                                     u2305 0684  
                                   u2250 0E8F                                     u2251 0E90  
                                   u2315 06A9                                     u2252 0E95  
                                   u1445 0FC5                                     u2253 0E96  
                                   u2245 0E80                                     u2325 06CE  
                                   u1471 1602                                     u1455 0FFC  
                                   u1615 08AF                                     u2263 0EC3  
                                   u2335 06F3                                     u1800 04F4  
                                   u1465 15E9                                     u1801 04F5  
                                   u2345 0718                                     u1802 04FA  
                                   u1635 08C9                                     u1803 04FB  
                                   u2275 0EDA                                     u1820 0524  
                                   u1645 08DA                                     u1821 0525  
                                   u2285 0EEF                                     u1822 052A  
                                   u1823 052B                                     u1815 0515  
                                   u2295 065F                                     u1585 0AC9  
                                   u1835 0568                                     u1845 057D  
                                   u2495 09D6                                     u2575 0C9D  
                                   u2817 0C6D                                     u2907 0BFA  
                                   u1875 0559                                     u1795 04E5  
                                   u2827 0C7F                                     u2917 0C3E  
                                   u2837 0CAA                                     u2927 0C4D  
                                   u2847 0CBC                                     _RBIF 0058  
                                   u2937 0F17                                     u2857 090A  
                                   u2947 0FE6                                     u2867 0943  
                                   u2957 15F1                                     u2877 0A0D  
                                   u2967 0B23                                     u2887 0B02  
                                   u2977 0B42                                     u2897 0BC1  
                                   u2987 0B61                          __end_of_PICInit 09AF  
                                   _WREN 0C62                           ??_eeprom_write 0021  
                                   _main 0C53                                     btemp 007E  
              __end_of_WriteMemoryAdress 1646                                     start 0012  
                          __CFG_IESO$OFF 0000                          __end_of_DelayDs 15FE  
                  WriteMemoryAdress@var1 0024                    WriteMemoryAdress@var2 0023  
                  WriteMemoryAdress@var3 0026         __size_of_LightWithSensController 003F  
                      ___bmul@multiplier 0023                          __end_of_ReadSPI 14A5  
             SendMemoryData@finalAddress 0044                                    ?_main 0070  
                       ReadClock@month10 002F                                    _EEADR 010D  
                          __CFG_WDTE$OFF 0000                         ReadClock@minutes 0024  
                       ReadClock@seconds 0031                                    _CARRY 0018  
                                  _ANSEL 0188                    __end_of_OperationMode 14BF  
                                  _T1CON 0010                          __end_of___llmod 08EF  
                         __CFG_DEBUG$OFF 0000                                    i1l465 077D  
                                  _TMR1H 000F                                    _TMR1L 000E  
                                  _PORTA 0005                                    _PORTB 0006  
                                  _PORTC 0007                                    _PORTD 0008  
                                  _PORTE 0009                                    _TRISA 0085  
                                  _TRISB 0086                                    _TRISC 0087  
                                  _TRISD 0088                                    _SSPIE 0463  
                                  _TRISE 0089                    read_write_flash_ram@i 002E  
                                  _Blink 174C                                    _bDark 006A  
                         __CFG_FCMEN$OFF 0000                  ??_ReceivedPacketHandler 004F  
                            _AnalogValue 166D                                    main@i 0056  
                         __CFG_BOREN$OFF 0000                                    pclath 000A  
                        ??_TransiverInit 0035                                    status 0003  
                          _intBlinkCycle 005F                                    wtemp0 007E  
                         WriteSPI@buffer 0021                     ReadMemoryAdress@var1 0023  
                   ReadMemoryAdress@var2 0022                     ReadMemoryAdress@var3 0025  
                       __end_of_ChannelP 1013                         __end_of_ChannelR 1020  
                       __end_of_ChannelS 102D                          __end_of_strncmp 085B  
                __end_of_saveDataToFlash 0290                           __CFG_MCLRE$OFF 0000  
                          _intClockTimer 00C2                        _intNumberOfBlinks 006D  
                        __initialization 0015                             __end_of_main 0D31  
                       __end_of_ReadFIFO 14F4                            ReadFIFO@value 0024  
                       ??_SendMemoryData 003B                              _FindChannel 0F08  
                          ??_RegisterSet 0028                                   ??_main 0053  
                      ??_read_ram_status 0023                       __size_of_ClockInit 009A  
                                 ?_Blink 0026                                ??_PICInit 0020  
                       ___llmod@dividend 0024                                   _ADRESH 001E  
                                 _EEDATA 010C                                   _EECON1 018C  
                                 _EECON2 018D                                   _ANSELH 0189  
                       __end_of_WriteSPI 14E6                                   i1l3320 17F3  
                                 i1l3322 17F9                                   i1l3402 0751  
                                 i1l3420 0780                                   i1l3450 07EA  
                                 i1l3426 079D                                   i1l3428 079E  
                                 i1l3446 07D9                                   i1l3438 07C0  
                              ??_DelayDs 0022                                   u253_25 17C9  
                                 u254_25 17DF                                   u272_25 076F  
                                 Blink@i 0029                                   Blink@n 0026  
                                 u276_25 0797                                   u277_25 07AF  
                                 u278_25 07CB                                   u279_25 07E4  
                       _write_ram_status 16F0                         ??_ram_bulk_erase 0025  
                                 _TMR1IF 0060                                   _TMR1ON 0080  
           i1OperationMode@bracketStatus 0071            __size_of_IncreaseMemoryAdress 00ED  
                     __size_of_ReadClock 0139                                   _SSPBUF 0013  
             __size_of_WriteMemoryAdress 0024                                ??_ReadSPI 0023  
                         __CFG_PWRTE$OFF 0000                                   _Mode_0 07FB  
                                 _Mode_1 154F                                   _Mode_2 14CB  
                                 _Mode_4 14F4                                   _Mode_5 1516  
                     __size_of_SetRFMode 006F                     __size_of_eeprom_read 0024  
        TransiverReadFIFO@ReceivedString 00A0                                   ___bmul 1528  
                              ??___llmod 0028                                   _tc_int 0739  
                   __end_of_eeprom_write 174C                                   _strchr 0802  
                                 _strlen 16C4                                   _strstr 085B  
                                 saved_w 007E                        _ResetMemoryAdress 1583  
                    __end_of_RegisterSet 1583                            ?_RegisterRead 0070  
                     ?_ResetMemoryAdress 0070                       RegisterRead@adress 0026  
                              ??_strncmp 002B                       __size_of_WriteFIFO 000C  
                __end_of__initialization 0041                          eeprom_read@addr 0021  
                    ??_ResetMemoryAdress 0023                        __end_of_ClockInit 0BA1  
                _LightWithSensController 177F                            _bChannelFound 0069  
                    ___bmul@multiplicand 0020                         ?_saveDataToFlash 0070  
                          __end_of_Blink 177F                           __pcstackCOMMON 0070  
                      ?_ReadMemoryAdress 0022                             __pidataBANK0 149A  
                           _channelFound 005D                       ??_ReadMemoryAdress 0024  
                      __end_of_ReadClock 0739                __end_of_ResetMemoryAdress 159D  
                         _OPTION_REGbits 0081                                  ??_Blink 0028  
                      __end_of_SetRFMode 0A8B                        eeprom_write@value 0020  
                         ??_RegisterRead 0023                               __pbssBANK0 0058  
                             __pbssBANK1 00C2                               __pbssBANK3 0190  
               __size_ofi1_OperationMode 0009                                ?_ReadFIFO 0070  
             timerFunction@intSetSeconds 0022                       AnalogValue@channel 0027  
           __end_of_read_write_flash_ram 0B07                 __size_of_TransmittPacket 00B2  
                                ?_Mode_0 0070                                  ?_Mode_1 0070  
                                ?_Mode_2 0070                                  ?_Mode_4 0070  
                                ?_Mode_5 0070                               __pmaintext 0C53  
                                ?___bmul 0020                               __pintentry 0004  
                                ?_tc_int 0070                                ?_WriteSPI 0070  
                      __end_of_WriteFIFO 14CB                                  ?_strchr 0020  
                                ?_strlen 0020                              _RegisterSet 1569  
                                ?_strstr 002E                                  _PICInit 094B  
                          ?_TimerCounter 0070               __end_of_TransiverToReceive 094B  
                  __end_of_timerFunction 1516                             ?_AnalogValue 0070  
                             __stringtab 1000                               ??_ReadFIFO 0023  
                    SendMemoryData@addr1 004A                      SendMemoryData@addr2 0049  
                    SendMemoryData@addr3 0048           __size_of_ReceivedPacketHandler 0220  
          __end_of_ReceivedPacketHandler 04B0                                  _DelayDs 15DB  
              ??_LightWithSensController 002A                            ReadClock@date 0026  
                          ReadClock@min1 0033                            ReadClock@sec1 0032  
                          ReadClock@hour 0025                      SendMemoryData@value 0043  
                          ReadClock@year 0028                                  _ReadSPI 149D  
                 __size_of_DarknessCheck 0027                          __size_of_Mode_0 0004  
                        __size_of_Mode_1 001A                          __size_of_Mode_2 000D  
                        __size_of_Mode_4 0010                          __size_of_Mode_5 0012  
             OperationMode@bracketStatus 0021                          _read_ram_status 153B  
                  __size_of_eeprom_write 0030                          __size_of___bmul 0013  
                  read_ram_status@status 0024                                  ___llmod 08A1  
                           ?_FindChannel 0070                                _ANSELbits 0188  
               __end_of_write_ram_status 171C                               ??_WriteSPI 0020  
                        __size_of_tc_int 00C2                                  __ptext1 0045  
                                __ptext2 0600                                  __ptext3 1528  
                                __ptext4 0E1B                                  __ptext5 1622  
                                __ptext6 08EF                                  __ptext7 09AF  
                                __ptext8 0290                                  __ptext9 16F0  
                        __size_of_strchr 0015                          __size_of_strlen 002C  
             __size_of_ResetMemoryAdress 001A                                _T1CONbits 0010  
                        __size_of_strstr 0046                           ??_TimerCounter 0070  
                   saveDataToFlash@addr1 0044                     saveDataToFlash@addr2 0045  
                   saveDataToFlash@addr3 0046  read_write_flash_ram@one_read_zero_write 002D  
                   saveDataToFlash@hours 003F                     saveDataToFlash@month 0041  
                   saveDataToFlash@value 0043                                  clrloop0 14A6  
                                _strncmp 0817                     end_of_initialization 0041  
                           _eeprom_write 171C                    __end_of_TransiverInit 0E1B  
                   TransmittPacket@value 0035                     TransmittPacket@topic 003A  
                 __size_of_OperationMode 0009                        ??i1_OperationMode 0070  
                       WriteSPI@databyte 0022                     __end_of_RegisterRead 15B9  
                      ??_TransmittPacket 0036                            WriteFIFO@Data 0023  
           __end_of_IncreaseMemoryAdress 0F08                                  strlen@s 0026  
                        _intBlinkCounter 007C                     _read_write_flash_ram 0A8B  
                          _DarknessCheck 1646                  __end_of_read_ram_status 154F  
                  SendMemoryData@address 004B                            ??_eeprom_read 0020  
                        ReadClock@date10 002E                           __end_of_Mode_0 07FF  
                         __end_of_Mode_1 1569                           __end_of_Mode_2 14D8  
                         __end_of_Mode_4 1504                           __end_of_Mode_5 1528  
                              _ClockInit 0B07                          ReadClock@hour10 002D  
                         __end_of___bmul 153B                          ReadClock@month1 0035  
                        ReadClock@year10 0030                    ?_read_write_flash_ram 0025  
                         __end_of_tc_int 07FB                           ?_DarknessCheck 0070  
              IncreaseMemoryAdress@addr1 002F                IncreaseMemoryAdress@addr2 0030  
              IncreaseMemoryAdress@addr3 0031                            _OperationMode 14B6  
                         __end_of_strchr 0817                           __end_of_strlen 16F0  
                         __end_of_strstr 08A1                      start_initialization 0015  
                              _ReadClock 0600                __size_of_ReadMemoryAdress 002C  
                __size_of_SendMemoryData 0150                    _intDarkCheckIntervall 0061  
             DarknessCheck@darknessValue 0029                                _SetRFMode 0A1C  
                   __size_of_AnalogValue 002B                          ___llmod@divisor 0020  
                      __size_of_ReadFIFO 000E                          ___llmod@counter 0029  
               __CFG_FOSC$INTRC_NOCLKOUT 0000                                 ??_Mode_0 002A  
                               ??_Mode_1 002A                                 ??_Mode_2 002A  
                               ??_Mode_4 003B                                 ??_Mode_5 003B  
                   __end_of_TimerCounter 1800                                 ??___bmul 0021  
                             ?_ClockInit 0070                      __end_of_eeprom_read 1622  
                          TimerCounter@i 0073                  __size_of_ram_bulk_erase 0022  
                            __pdataBANK0 006D                                 ??_tc_int 0075  
               __size_of_saveDataToFlash 024B                             ?_RegisterSet 0027  
                               ??_strchr 0022                                 ??_strlen 0022  
                               ??_strstr 002F                           ?_OperationMode 0070  
                   __size_of_FindChannel 00F8              read_write_flash_ram@mem_ptr 002A  
                      RegisterRead@value 0025                        __size_of_WriteSPI 000E  
                            __pbssCOMMON 007C                                ___latbits 0002  
                              _WriteFIFO 14BF                            __pcstackBANK0 0020  
                          __pcstackBANK1 00A0                                 ?_PICInit 0070  
                             ?_ReadClock 0024                             _ReceivedData 0190  
                 SetRFMode@mcparam0_read 002D                               ?_SetRFMode 0070  
                       eeprom_write@addr 0022                                 ?_DelayDs 0020  
                      RegisterSet@adress 002A                     _IncreaseMemoryAdress 0E1B  
                       ?_read_ram_status 0070                   write_ram_status@status 0025  
                               ?_ReadSPI 0070                    __size_of_RegisterRead 001C  
                     _TransiverToReceive 08EF                                 ?___llmod 0020  
                    ?_TransiverToReceive 0070                   ??_read_write_flash_ram 002B  
                        ??_DarknessCheck 0028                                __pstrings 1000  
                      ?_write_ram_status 0070              timerFunction@intTimerNumber 0020  
                     ??_write_ram_status 0025                           __size_of_Blink 0033  
                             ?_WriteFIFO 0070                          i1_OperationMode 14AD  
                   ??_TransiverToReceive 0035                             _RegisterRead 159D  
                               ?_strncmp 0028                    ?_IncreaseMemoryAdress 0070  
                    saveDataToFlash@date 0040                          _TransmittPacket 0BA1  
                      interrupt_function 0004                      saveDataToFlash@year 0042  
                               _IOCBbits 0096                                 DelayDs@i 0024  
                           FindChannel@i 0033                    _ReceivedPacketHandler 0290  
                              clear_ram0 14A5                              _eeprom_read 15FE  
                               _PIE1bits 008C                                 _PIR1bits 000C  
                            ??_ClockInit 0023                             ClockInit@cnt 0024  
                 __size_of_timerFunction 0012                   saveDataToFlash@minutes 003E  
                 saveDataToFlash@seconds 003D                          ??_OperationMode 0020  
                          SetRFMode@mode 002C                               _ADCON0bits 001F  
                            __stringbase 1005                               _ADCON1bits 009F  
                               _WPUBbits 0095                                 _ChannelP 1006  
                               _ChannelR 1013                                 _ChannelS 1020  
                            ??_ReadClock 0029                           ReadClock@date1 0037  
                         _SendMemoryData 04B0                         _ReadMemoryAdress 1698  
                         ReadClock@min10 002C                           ReadClock@sec10 002B  
                      ??_saveDataToFlash 0038                           ReadClock@hour1 0034  
                       __size_of_PICInit 0064                 ?_LightWithSensController 0070  
                         ReadClock@month 0027                           ReadClock@year1 0036  
                            ??_SetRFMode 002B                                 _ReadFIFO 14E6  
                  __size_of_TimerCounter 0042                         __size_of_DelayDs 0023  
       read_write_flash_ram@flash_sector 0027                         __size_of_ReadSPI 0008  
                         _bTimerComplete 0058                           _ram_bulk_erase 15B9  
                       _intMinuteCounter 0065               read_write_flash_ram@offset 0029  
                       __size_of___llmod 004E                        _TransiverReadFIFO 09AF  
                               _WriteSPI 14D8                       __end_of__stringtab 1006  
                       _intSecondCounter 0067                       ?_TransiverReadFIFO 0070  
                             _ANSELHbits 0189                  __end_ofi1_OperationMode 14B6  
                 __end_of_SendMemoryData 0600              IncreaseMemoryAdress@address 0032  
                 __size_of_TransiverInit 00EA                     __size_of_RegisterSet 001A  
                       RegisterSet@value 0027                              ??_WriteFIFO 0023  
                __end_of_TransmittPacket 0C53                             _TimerCounter 17BE  
                               __ptext10 085B                                 __ptext11 0817  
                               __ptext20 1583                                 __ptext12 16C4  
                               __ptext21 171C                                 __ptext13 0802  
                               __ptext30 14BF                                 __ptext22 14B6  
                               __ptext14 15B9                                 __ptext31 0F08  
                               __ptext23 14E6                                 __ptext15 04B0  
                               __ptext40 1646                                 __ptext32 0A1C  
                               __ptext24 0D31                                 __ptext16 0A8B  
                               __ptext41 15FE                                 __ptext33 1569  
                               __ptext25 174C                                 __ptext17 153B  
                               __ptext42 166D                                 __ptext34 159D  
                               __ptext26 094B                                 __ptext18 08A1  
                               __ptext43 15DB                                 __ptext35 14CB  
                               __ptext27 1516                                 __ptext19 1698  
                               __ptext44 0B07                                 __ptext36 154F  
                               __ptext28 14F4                                 __ptext45 149D  
                               __ptext37 07FB                                 __ptext29 0BA1  
                               __ptext46 14D8                                 __ptext38 177F  
                               __ptext47 0739                                 __ptext39 1504  
                               __ptext48 14AD                                 __ptext49 17BE  
                    ??_TransiverReadFIFO 0051                            _timerFunction 1504  
                 ??_IncreaseMemoryAdress 0027                         __size_of_strncmp 0044  
                 ?_ReceivedPacketHandler 0070                            __size_of_main 00DE  
                             strncmp@len 0029                   __end_of_ram_bulk_erase 15DB  
                          _bValueFromPot 006F                __end_of_TransiverReadFIFO 0A1C  
                             DelayDs@cnt 0020                           FindChannel@cnt 0031  
        __end_of_LightWithSensController 17BE                         _bSaveDataToFlash 006B  
                   _intHalfSecondCounter 0063                          ?_SendMemoryData 0070  
                             _INTCONbits 000B           read_write_flash_ram@flash_page 0028  
                     TransiverReadFIFO@i 00BE                       TransiverReadFIFO@j 00C0  
                         ?_timerFunction 0020                            ??_AnalogValue 0026  
                               intlevel1 0000                                strchr@chr 0020  
                              strchr@ptr 0022                            _TransiverInit 0D31  
 read_write_flash_ram@bytes_to_readwrite 0025                                strncmp@s1 002D  
                              strncmp@s2 0028                                stringcode 1000  
                             _OSCCONbits 008F                          ?_ram_bulk_erase 0070  
                          ??_FindChannel 002E                         ?i1_OperationMode 0070  
                               strlen@cp 0027                                 stringdir 1000  
                               stringtab 1000                         ?_TransmittPacket 0035  
                               strstr@s1 0032                                 strstr@s2 002E  
              ReceivedPacketHandler@Data 0050                __size_of_write_ram_status 002C  
                          ?_eeprom_write 0020                           ?_TransiverInit 0070  
                           ?_eeprom_read 0070                      __end_of_AnalogValue 1698  
                             _SSPCONbits 0014                        _WriteMemoryAdress 1622  
               __end_of_ReadMemoryAdress 16C4  
