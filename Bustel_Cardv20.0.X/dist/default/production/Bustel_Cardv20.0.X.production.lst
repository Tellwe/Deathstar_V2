

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Mar 16 18:43:30 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0088                     	;# 
   184  0089                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008F                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  009F                     	;# 
   207  0105                     	;# 
   208  0107                     	;# 
   209  0108                     	;# 
   210  0109                     	;# 
   211  010C                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0187                     	;# 
   218  0188                     	;# 
   219  0189                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  0007                     	;# 
   230  0008                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0088                     	;# 
   262  0089                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  008F                     	;# 
   267  0090                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0093                     	;# 
   273  0094                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009C                     	;# 
   282  009D                     	;# 
   283  009E                     	;# 
   284  009F                     	;# 
   285  0105                     	;# 
   286  0107                     	;# 
   287  0108                     	;# 
   288  0109                     	;# 
   289  010C                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  010F                     	;# 
   294  0185                     	;# 
   295  0187                     	;# 
   296  0188                     	;# 
   297  0189                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  0000                     	;# 
   301  0001                     	;# 
   302  0002                     	;# 
   303  0003                     	;# 
   304  0004                     	;# 
   305  0005                     	;# 
   306  0006                     	;# 
   307  0007                     	;# 
   308  0008                     	;# 
   309  0009                     	;# 
   310  000A                     	;# 
   311  000B                     	;# 
   312  000C                     	;# 
   313  000D                     	;# 
   314  000E                     	;# 
   315  000E                     	;# 
   316  000F                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0013                     	;# 
   321  0014                     	;# 
   322  0015                     	;# 
   323  0015                     	;# 
   324  0016                     	;# 
   325  0017                     	;# 
   326  0018                     	;# 
   327  0019                     	;# 
   328  001A                     	;# 
   329  001B                     	;# 
   330  001B                     	;# 
   331  001C                     	;# 
   332  001D                     	;# 
   333  001E                     	;# 
   334  001F                     	;# 
   335  0081                     	;# 
   336  0085                     	;# 
   337  0086                     	;# 
   338  0087                     	;# 
   339  0088                     	;# 
   340  0089                     	;# 
   341  008C                     	;# 
   342  008D                     	;# 
   343  008E                     	;# 
   344  008F                     	;# 
   345  0090                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0093                     	;# 
   351  0094                     	;# 
   352  0095                     	;# 
   353  0096                     	;# 
   354  0097                     	;# 
   355  0098                     	;# 
   356  0099                     	;# 
   357  009A                     	;# 
   358  009B                     	;# 
   359  009C                     	;# 
   360  009D                     	;# 
   361  009E                     	;# 
   362  009F                     	;# 
   363  0105                     	;# 
   364  0107                     	;# 
   365  0108                     	;# 
   366  0109                     	;# 
   367  010C                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  010F                     	;# 
   372  0185                     	;# 
   373  0187                     	;# 
   374  0188                     	;# 
   375  0189                     	;# 
   376  018C                     	;# 
   377  018D                     	;# 
   378                           
   379                           	psect	idataBANK0
   380  15E6                     __pidataBANK0:	
   381                           
   382                           ;initializer for _intNumberOfBlinks
   383  15E6  3458               	retlw	88
   384  15E7  3402               	retlw	2
   385                           
   386                           ;initializer for _bValueFromPot
   387  15E8  3401               	retlw	1
   388                           
   389                           	psect	strings
   390  0800                     __pstrings:	
   391  0800                     stringtab:	
   392  0800                     __stringtab:	
   393  0800                     stringcode:	
   394                           ;	String table - string pointers are 1 byte each
   395                           
   396  0800                     stringdir:	
   397  0800  3008               	movlw	high stringdir
   398  0801  008A               	movwf	10
   399  0802  0804               	movf	4,w
   400  0803  0A84               	incf	4,f
   401  0804  0782               	addwf	2,f
   402  0805                     __stringbase:	
   403  0805  3400               	retlw	0
   404  0806                     __end_of__stringtab:	
   405  0806                     _ChannelP:	
   406  0806  343F               	retlw	63
   407  0807  3447               	retlw	71
   408  0808  344F               	retlw	79
   409  0809  3457               	retlw	87
   410  080A  345F               	retlw	95
   411  080B  3477               	retlw	119
   412  080C  347E               	retlw	126
   413  080D  347F               	retlw	127
   414  080E  3486               	retlw	134
   415  080F  3487               	retlw	135
   416  0810  3437               	retlw	55
   417  0811  3467               	retlw	103
   418  0812  346F               	retlw	111
   419  0813                     __end_of_ChannelP:	
   420  0813                     _ChannelR:	
   421  0813  344F               	retlw	79
   422  0814  3459               	retlw	89
   423  0815  3463               	retlw	99
   424  0816  346D               	retlw	109
   425  0817  3477               	retlw	119
   426  0818  3495               	retlw	149
   427  0819  349F               	retlw	159
   428  081A  349F               	retlw	159
   429  081B  34A9               	retlw	169
   430  081C  34A9               	retlw	169
   431  081D  3445               	retlw	69
   432  081E  3481               	retlw	129
   433  081F  348B               	retlw	139
   434  0820                     __end_of_ChannelR:	
   435  0820                     _ChannelS:	
   436  0820  3418               	retlw	24
   437  0821  341B               	retlw	27
   438  0822  341E               	retlw	30
   439  0823  3421               	retlw	33
   440  0824  3424               	retlw	36
   441  0825  342D               	retlw	45
   442  0826  347B               	retlw	123
   443  0827  3430               	retlw	48
   444  0828  347E               	retlw	126
   445  0829  3433               	retlw	51
   446  082A  3415               	retlw	21
   447  082B  3427               	retlw	39
   448  082C  342A               	retlw	42
   449  082D                     __end_of_ChannelS:	
   450  001F                     _ADCON0bits	set	31
   451  001E                     _ADRESH	set	30
   452  000B                     _INTCONbits	set	11
   453  000C                     _PIR1bits	set	12
   454  0005                     _PORTA	set	5
   455  0006                     _PORTB	set	6
   456  0007                     _PORTC	set	7
   457  0008                     _PORTD	set	8
   458  0009                     _PORTE	set	9
   459  0013                     _SSPBUF	set	19
   460  0014                     _SSPCONbits	set	20
   461  0010                     _T1CON	set	16
   462  0010                     _T1CONbits	set	16
   463  000F                     _TMR1H	set	15
   464  000E                     _TMR1L	set	14
   465  0018                     _CARRY	set	24
   466  005F                     _GIE	set	95
   467  0029                     _RA1	set	41
   468  002C                     _RA4	set	44
   469  002D                     _RA5	set	45
   470  0030                     _RB0	set	48
   471  0031                     _RB1	set	49
   472  0033                     _RB3	set	51
   473  0034                     _RB4	set	52
   474  0035                     _RB5	set	53
   475  0058                     _RBIF	set	88
   476  0038                     _RC0	set	56
   477  0039                     _RC1	set	57
   478  003A                     _RC2	set	58
   479  0043                     _RD3	set	67
   480  0044                     _RD4	set	68
   481  0060                     _TMR1IF	set	96
   482  0080                     _TMR1ON	set	128
   483  009F                     _ADCON1bits	set	159
   484  0096                     _IOCBbits	set	150
   485  0081                     _OPTION_REGbits	set	129
   486  008F                     _OSCCONbits	set	143
   487  008C                     _PIE1bits	set	140
   488  0094                     _SSPSTATbits	set	148
   489  0085                     _TRISA	set	133
   490  0086                     _TRISB	set	134
   491  0087                     _TRISC	set	135
   492  0088                     _TRISD	set	136
   493  0089                     _TRISE	set	137
   494  0095                     _WPUBbits	set	149
   495  0463                     _SSPIE	set	1123
   496  010D                     _EEADR	set	269
   497  010C                     _EEDATA	set	268
   498  0188                     _ANSEL	set	392
   499  0189                     _ANSELH	set	393
   500  0189                     _ANSELHbits	set	393
   501  0188                     _ANSELbits	set	392
   502  018C                     _EECON1	set	396
   503  018D                     _EECON2	set	397
   504  0C60                     _RD	set	3168
   505  0C61                     _WR	set	3169
   506  0C62                     _WREN	set	3170
   507  082D                     STR_1:	
   508  082D  344E               	retlw	78	;'N'
   509  082E  3431               	retlw	49	;'1'
   510  082F  3442               	retlw	66	;'B'
   511  0830  344C               	retlw	76	;'L'
   512  0831  3449               	retlw	73	;'I'
   513  0832  344E               	retlw	78	;'N'
   514  0833  344B               	retlw	75	;'K'
   515  0834  3400               	retlw	0
   516  0835                     STR_2:	
   517  0835  344E               	retlw	78	;'N'
   518  0836  3432               	retlw	50	;'2'
   519  0837  3442               	retlw	66	;'B'
   520  0838  344C               	retlw	76	;'L'
   521  0839  3449               	retlw	73	;'I'
   522  083A  344E               	retlw	78	;'N'
   523  083B  344B               	retlw	75	;'K'
   524  083C  3400               	retlw	0
   525                           
   526                           ; #config settings
   527  0000                     
   528                           	psect	cinit
   529  0015                     start_initialization:	
   530  0015                     __initialization:	
   531                           
   532                           ; Initialize objects allocated to BANK0
   533  0015  160A  118A  25E6  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   534  001A  00EB               	movwf	__pdataBANK0& (0+127)
   535  001B  160A  118A  25E7  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   536  0020  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   537  0021  160A  118A  25E8  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   538  0026  00ED               	movwf	(__pdataBANK0+2)& (0+127)
   539                           
   540                           ; Clear objects allocated to BANK3
   541  0027  1783               	bsf	3,7	;select IRP bank2
   542  0028  3090               	movlw	low __pbssBANK3
   543  0029  0084               	movwf	4
   544  002A  30B8               	movlw	low (__pbssBANK3+40)
   545  002B  160A  118A  25F5  120A  118A  	fcall	clear_ram0
   546                           
   547                           ; Clear objects allocated to BANK1
   548  0030  1383               	bcf	3,7	;select IRP bank0
   549  0031  30C2               	movlw	low __pbssBANK1
   550  0032  0084               	movwf	4
   551  0033  30CC               	movlw	low (__pbssBANK1+10)
   552  0034  160A  118A  25F5  120A  118A  	fcall	clear_ram0
   553                           
   554                           ; Clear objects allocated to BANK0
   555  0039  3056               	movlw	low __pbssBANK0
   556  003A  0084               	movwf	4
   557  003B  306B               	movlw	low (__pbssBANK0+21)
   558  003C  160A  118A  25F5   	fcall	clear_ram0
   559                           
   560                           ; Clear objects allocated to COMMON
   561  003F  01FC               	clrf	__pbssCOMMON& (0+127)
   562  0040  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   563  0041                     end_of_initialization:	
   564                           ;End of C runtime variable initialization code
   565                           
   566  0041                     __end_of__initialization:	
   567  0041  0183               	clrf	3
   568  0042  120A  158A  2E2D   	ljmp	_main	;jump to C main() function
   569                           
   570                           	psect	bssCOMMON
   571  007C                     __pbssCOMMON:	
   572  007C                     _intBlinkCounter:	
   573  007C                     	ds	2
   574                           
   575                           	psect	bssBANK0
   576  0056                     __pbssBANK0:	
   577  0056                     _bTimerComplete:	
   578  0056                     	ds	5
   579  005B                     _channelFound:	
   580  005B                     	ds	2
   581  005D                     _intBlinkCycle:	
   582  005D                     	ds	2
   583  005F                     _intDarkCheckIntervall:	
   584  005F                     	ds	2
   585  0061                     _intHalfSecondCounter:	
   586  0061                     	ds	2
   587  0063                     _intMinuteCounter:	
   588  0063                     	ds	2
   589  0065                     _intSecondCounter:	
   590  0065                     	ds	2
   591  0067                     _bChannelFound:	
   592  0067                     	ds	1
   593  0068                     _bDark:	
   594  0068                     	ds	1
   595  0069                     _bSaveDataToFlash:	
   596  0069                     	ds	1
   597  006A                     _bTransiverModeReceive:	
   598  006A                     	ds	1
   599                           
   600                           	psect	dataBANK0
   601  006B                     __pdataBANK0:	
   602  006B                     _intNumberOfBlinks:	
   603  006B                     	ds	2
   604  006D                     _bValueFromPot:	
   605  006D                     	ds	1
   606                           
   607                           	psect	bssBANK1
   608  00C2                     __pbssBANK1:	
   609  00C2                     _intClockTimer:	
   610  00C2                     	ds	10
   611                           
   612                           	psect	bssBANK3
   613  0190                     __pbssBANK3:	
   614  0190                     _ReceivedData:	
   615  0190                     	ds	40
   616                           
   617                           	psect	clrtext
   618  15F5                     clear_ram0:	
   619                           ;	Called with FSR containing the base address, and
   620                           ;	W with the last address+1
   621                           
   622  15F5  0064               	clrwdt	;clear the watchdog before getting into this loop
   623  15F6                     clrloop0:	
   624  15F6  0180               	clrf	0	;clear RAM location pointed to by FSR
   625  15F7  0A84               	incf	4,f	;increment pointer
   626  15F8  0604               	xorwf	4,w	;XOR with final address
   627  15F9  1903               	btfsc	3,2	;have we reached the end yet?
   628  15FA  3400               	retlw	0	;all done for this memory range, return
   629  15FB  0604               	xorwf	4,w	;XOR again to restore value
   630  15FC  2DF6               	goto	clrloop0	;do the next byte
   631                           
   632                           	psect	cstackBANK1
   633  00A0                     __pcstackBANK1:	
   634  00A0                     TransiverReadFIFO@ReceivedString:	
   635                           
   636                           ; 30 bytes @ 0x0
   637  00A0                     	ds	30
   638  00BE                     TransiverReadFIFO@i:	
   639                           
   640                           ; 2 bytes @ 0x1E
   641  00BE                     	ds	2
   642  00C0                     TransiverReadFIFO@j:	
   643                           
   644                           ; 2 bytes @ 0x20
   645  00C0                     	ds	2
   646                           
   647                           	psect	cstackCOMMON
   648  0070                     __pcstackCOMMON:	
   649  0070                     ?_PICInit:	
   650  0070                     ?_TransiverInit:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_ClockInit:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_write_ram_status:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_read_ram_status:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_ram_bulk_erase:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_ResetMemoryAdress:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_OperationMode:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_Mode_0:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_Mode_1:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_Mode_2:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_Mode_4:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ?_Mode_5:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_TransiverToReceive:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ?_TransiverReadFIFO:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ?_saveDataToFlash:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ?_SetRFMode:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ?_RegisterRead:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ?_FindChannel:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_ReadFIFO:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     ?_ReceivedPacketHandler:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     ?_AnalogValue:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0070                     ?_eeprom_read:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     ?_DarknessCheck:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     ?_SendMemoryData:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     ?_WriteFIFO:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0070                     ?_LightWithSensController:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0070                     ?_TimerCounter:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0070                     ??_TimerCounter:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0070                     ?_WriteSPI:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0070                     ?_ReadSPI:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0070                     ?_tc_int:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0070                     ?_IncreaseMemoryAdress:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  0070                     ?i1_OperationMode:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0070                     ??i1_OperationMode:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0070                     ?_main:	
   753                           ; 1 bytes @ 0x0
   754                           
   755                           
   756                           ; 2 bytes @ 0x0
   757  0070                     	ds	1
   758  0071                     i1OperationMode@bracketStatus:	
   759                           
   760                           ; 1 bytes @ 0x1
   761  0071                     	ds	2
   762  0073                     TimerCounter@i:	
   763                           
   764                           ; 2 bytes @ 0x3
   765  0073                     	ds	2
   766  0075                     ??_tc_int:	
   767                           
   768                           ; 1 bytes @ 0x5
   769  0075                     	ds	7
   770                           
   771                           	psect	cstackBANK0
   772  0020                     __pcstackBANK0:	
   773  0020                     ??_PICInit:	
   774  0020                     ??_OperationMode:	
   775                           ; 1 bytes @ 0x0
   776                           
   777  0020                     ?_timerFunction:	
   778                           ; 1 bytes @ 0x0
   779                           
   780  0020                     ?_DelayDs:	
   781                           ; 1 bytes @ 0x0
   782                           
   783  0020                     ?_eeprom_write:	
   784                           ; 1 bytes @ 0x0
   785                           
   786  0020                     ??_eeprom_read:	
   787                           ; 1 bytes @ 0x0
   788                           
   789  0020                     ?_strchr:	
   790                           ; 1 bytes @ 0x0
   791                           
   792  0020                     ??_WriteSPI:	
   793                           ; 1 bytes @ 0x0
   794                           
   795  0020                     ?___bmul:	
   796                           ; 1 bytes @ 0x0
   797                           
   798  0020                     ?_strlen:	
   799                           ; 1 bytes @ 0x0
   800                           
   801  0020                     eeprom_write@value:	
   802                           ; 2 bytes @ 0x0
   803                           
   804  0020                     ___bmul@multiplicand:	
   805                           ; 1 bytes @ 0x0
   806                           
   807  0020                     timerFunction@intTimerNumber:	
   808                           ; 1 bytes @ 0x0
   809                           
   810  0020                     DelayDs@cnt:	
   811                           ; 2 bytes @ 0x0
   812                           
   813  0020                     strchr@chr:	
   814                           ; 2 bytes @ 0x0
   815                           
   816                           
   817                           ; 2 bytes @ 0x0
   818  0020                     	ds	1
   819  0021                     ??_eeprom_write:	
   820  0021                     ??___bmul:	
   821                           ; 1 bytes @ 0x1
   822                           
   823  0021                     WriteSPI@buffer:	
   824                           ; 1 bytes @ 0x1
   825                           
   826  0021                     OperationMode@bracketStatus:	
   827                           ; 1 bytes @ 0x1
   828                           
   829  0021                     eeprom_read@addr:	
   830                           ; 1 bytes @ 0x1
   831                           
   832                           
   833                           ; 1 bytes @ 0x1
   834  0021                     	ds	1
   835  0022                     ??_DelayDs:	
   836  0022                     ??_strlen:	
   837                           ; 1 bytes @ 0x2
   838                           
   839  0022                     ??_strchr:	
   840                           ; 1 bytes @ 0x2
   841                           
   842  0022                     ?_ReadMemoryAdress:	
   843                           ; 1 bytes @ 0x2
   844                           
   845  0022                     WriteSPI@databyte:	
   846                           ; 1 bytes @ 0x2
   847                           
   848  0022                     ReadMemoryAdress@var2:	
   849                           ; 1 bytes @ 0x2
   850                           
   851  0022                     eeprom_write@addr:	
   852                           ; 1 bytes @ 0x2
   853                           
   854  0022                     ___bmul@product:	
   855                           ; 1 bytes @ 0x2
   856                           
   857  0022                     strchr@ptr:	
   858                           ; 1 bytes @ 0x2
   859                           
   860  0022                     timerFunction@intSetSeconds:	
   861                           ; 1 bytes @ 0x2
   862                           
   863                           
   864                           ; 2 bytes @ 0x2
   865  0022                     	ds	1
   866  0023                     ??_ClockInit:	
   867  0023                     ??_read_ram_status:	
   868                           ; 1 bytes @ 0x3
   869                           
   870  0023                     ??_ResetMemoryAdress:	
   871                           ; 1 bytes @ 0x3
   872                           
   873  0023                     ??_RegisterRead:	
   874                           ; 1 bytes @ 0x3
   875                           
   876  0023                     ??_ReadFIFO:	
   877                           ; 1 bytes @ 0x3
   878                           
   879  0023                     ??_WriteFIFO:	
   880                           ; 1 bytes @ 0x3
   881                           
   882  0023                     ??_ReadSPI:	
   883                           ; 1 bytes @ 0x3
   884                           
   885  0023                     ??_IncreaseMemoryAdress:	
   886                           ; 1 bytes @ 0x3
   887                           
   888  0023                     WriteFIFO@Data:	
   889                           ; 1 bytes @ 0x3
   890                           
   891  0023                     ReadMemoryAdress@var1:	
   892                           ; 1 bytes @ 0x3
   893                           
   894  0023                     ___bmul@multiplier:	
   895                           ; 1 bytes @ 0x3
   896                           
   897                           
   898                           ; 1 bytes @ 0x3
   899  0023                     	ds	1
   900  0024                     ??_timerFunction:	
   901  0024                     ?_ReadClock:	
   902                           ; 1 bytes @ 0x4
   903                           
   904  0024                     ??_ReadMemoryAdress:	
   905                           ; 1 bytes @ 0x4
   906                           
   907  0024                     ReadFIFO@value:	
   908                           ; 1 bytes @ 0x4
   909                           
   910  0024                     IncreaseMemoryAdress@var1:	
   911                           ; 1 bytes @ 0x4
   912                           
   913  0024                     read_ram_status@status:	
   914                           ; 1 bytes @ 0x4
   915                           
   916  0024                     ClockInit@cnt:	
   917                           ; 1 bytes @ 0x4
   918                           
   919  0024                     ReadClock@minutes:	
   920                           ; 1 bytes @ 0x4
   921                           
   922  0024                     DelayDs@i:	
   923                           ; 1 bytes @ 0x4
   924                           
   925                           
   926                           ; 2 bytes @ 0x4
   927  0024                     	ds	1
   928  0025                     ??_write_ram_status:	
   929  0025                     ??_ram_bulk_erase:	
   930                           ; 1 bytes @ 0x5
   931                           
   932  0025                     ?_read_write_flash_ram:	
   933                           ; 1 bytes @ 0x5
   934                           
   935  0025                     RegisterRead@value:	
   936                           ; 1 bytes @ 0x5
   937                           
   938  0025                     ReadMemoryAdress@var3:	
   939                           ; 1 bytes @ 0x5
   940                           
   941  0025                     IncreaseMemoryAdress@var2:	
   942                           ; 1 bytes @ 0x5
   943                           
   944  0025                     write_ram_status@status:	
   945                           ; 1 bytes @ 0x5
   946                           
   947  0025                     ReadClock@hour:	
   948                           ; 1 bytes @ 0x5
   949                           
   950  0025                     read_write_flash_ram@bytes_to_readwrite:	
   951                           ; 1 bytes @ 0x5
   952                           
   953                           
   954                           ; 2 bytes @ 0x5
   955  0025                     	ds	1
   956  0026                     ??_AnalogValue:	
   957  0026                     ?_Blink:	
   958                           ; 1 bytes @ 0x6
   959                           
   960  0026                     RegisterRead@adress:	
   961                           ; 1 bytes @ 0x6
   962                           
   963  0026                     IncreaseMemoryAdress@var3:	
   964                           ; 1 bytes @ 0x6
   965                           
   966  0026                     ReadClock@date:	
   967                           ; 1 bytes @ 0x6
   968                           
   969  0026                     strlen@s:	
   970                           ; 1 bytes @ 0x6
   971                           
   972  0026                     Blink@n:	
   973                           ; 1 bytes @ 0x6
   974                           
   975                           
   976                           ; 2 bytes @ 0x6
   977  0026                     	ds	1
   978  0027                     ?_RegisterSet:	
   979  0027                     RegisterSet@value:	
   980                           ; 1 bytes @ 0x7
   981                           
   982  0027                     AnalogValue@channel:	
   983                           ; 1 bytes @ 0x7
   984                           
   985  0027                     read_write_flash_ram@flash_sector:	
   986                           ; 1 bytes @ 0x7
   987                           
   988  0027                     ReadClock@month:	
   989                           ; 1 bytes @ 0x7
   990                           
   991  0027                     strlen@cp:	
   992                           ; 1 bytes @ 0x7
   993                           
   994                           
   995                           ; 1 bytes @ 0x7
   996  0027                     	ds	1
   997  0028                     ??_RegisterSet:	
   998  0028                     ??_DarknessCheck:	
   999                           ; 1 bytes @ 0x8
  1000                           
  1001  0028                     ??_Blink:	
  1002                           ; 1 bytes @ 0x8
  1003                           
  1004  0028                     ?_strncmp:	
  1005                           ; 1 bytes @ 0x8
  1006                           
  1007  0028                     read_write_flash_ram@flash_page:	
  1008                           ; 2 bytes @ 0x8
  1009                           
  1010  0028                     ReadClock@year:	
  1011                           ; 1 bytes @ 0x8
  1012                           
  1013  0028                     strncmp@s2:	
  1014                           ; 1 bytes @ 0x8
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0x8
  1018  0028                     	ds	1
  1019  0029                     ??_ReadClock:	
  1020  0029                     DarknessCheck@darknessValue:	
  1021                           ; 1 bytes @ 0x9
  1022                           
  1023  0029                     read_write_flash_ram@offset:	
  1024                           ; 1 bytes @ 0x9
  1025                           
  1026  0029                     Blink@i:	
  1027                           ; 1 bytes @ 0x9
  1028                           
  1029  0029                     strncmp@len:	
  1030                           ; 2 bytes @ 0x9
  1031                           
  1032                           
  1033                           ; 2 bytes @ 0x9
  1034  0029                     	ds	1
  1035  002A                     ??_Mode_0:	
  1036  002A                     ??_Mode_1:	
  1037                           ; 1 bytes @ 0xA
  1038                           
  1039  002A                     ??_Mode_2:	
  1040                           ; 1 bytes @ 0xA
  1041                           
  1042  002A                     ??_LightWithSensController:	
  1043                           ; 1 bytes @ 0xA
  1044                           
  1045  002A                     RegisterSet@adress:	
  1046                           ; 1 bytes @ 0xA
  1047                           
  1048  002A                     read_write_flash_ram@mem_ptr:	
  1049                           ; 1 bytes @ 0xA
  1050                           
  1051                           
  1052                           ; 1 bytes @ 0xA
  1053  002A                     	ds	1
  1054  002B                     ??_SetRFMode:	
  1055  002B                     ??_read_write_flash_ram:	
  1056                           ; 1 bytes @ 0xB
  1057                           
  1058  002B                     ??_strncmp:	
  1059                           ; 1 bytes @ 0xB
  1060                           
  1061  002B                     ReadClock@sec10:	
  1062                           ; 1 bytes @ 0xB
  1063                           
  1064                           
  1065                           ; 1 bytes @ 0xB
  1066  002B                     	ds	1
  1067  002C                     SetRFMode@mode:	
  1068  002C                     ReadClock@min10:	
  1069                           ; 1 bytes @ 0xC
  1070                           
  1071                           
  1072                           ; 1 bytes @ 0xC
  1073  002C                     	ds	1
  1074  002D                     SetRFMode@mcparam0_read:	
  1075  002D                     read_write_flash_ram@one_read_zero_write:	
  1076                           ; 1 bytes @ 0xD
  1077                           
  1078  002D                     ReadClock@hour10:	
  1079                           ; 1 bytes @ 0xD
  1080                           
  1081  002D                     strncmp@s1:	
  1082                           ; 1 bytes @ 0xD
  1083                           
  1084                           
  1085                           ; 1 bytes @ 0xD
  1086  002D                     	ds	1
  1087  002E                     ??_FindChannel:	
  1088  002E                     ?_strstr:	
  1089                           ; 1 bytes @ 0xE
  1090                           
  1091  002E                     ReadClock@date10:	
  1092                           ; 1 bytes @ 0xE
  1093                           
  1094  002E                     strstr@s2:	
  1095                           ; 1 bytes @ 0xE
  1096                           
  1097  002E                     read_write_flash_ram@i:	
  1098                           ; 1 bytes @ 0xE
  1099                           
  1100                           
  1101                           ; 2 bytes @ 0xE
  1102  002E                     	ds	1
  1103  002F                     ??_strstr:	
  1104  002F                     ReadClock@month10:	
  1105                           ; 1 bytes @ 0xF
  1106                           
  1107                           
  1108                           ; 1 bytes @ 0xF
  1109  002F                     	ds	1
  1110  0030                     ReadClock@year10:	
  1111                           
  1112                           ; 1 bytes @ 0x10
  1113  0030                     	ds	1
  1114  0031                     ReadClock@seconds:	
  1115  0031                     FindChannel@cnt:	
  1116                           ; 1 bytes @ 0x11
  1117                           
  1118                           
  1119                           ; 2 bytes @ 0x11
  1120  0031                     	ds	1
  1121  0032                     ReadClock@sec1:	
  1122  0032                     strstr@s1:	
  1123                           ; 1 bytes @ 0x12
  1124                           
  1125                           
  1126                           ; 1 bytes @ 0x12
  1127  0032                     	ds	1
  1128  0033                     ReadClock@min1:	
  1129  0033                     FindChannel@i:	
  1130                           ; 1 bytes @ 0x13
  1131                           
  1132                           
  1133                           ; 2 bytes @ 0x13
  1134  0033                     	ds	1
  1135  0034                     ReadClock@hour1:	
  1136                           
  1137                           ; 1 bytes @ 0x14
  1138  0034                     	ds	1
  1139  0035                     ??_TransiverInit:	
  1140  0035                     ??_TransiverToReceive:	
  1141                           ; 1 bytes @ 0x15
  1142                           
  1143  0035                     ?_TransmittPacket:	
  1144                           ; 1 bytes @ 0x15
  1145                           
  1146  0035                     TransmittPacket@value:	
  1147                           ; 1 bytes @ 0x15
  1148                           
  1149  0035                     ReadClock@month1:	
  1150                           ; 1 bytes @ 0x15
  1151                           
  1152                           
  1153                           ; 1 bytes @ 0x15
  1154  0035                     	ds	1
  1155  0036                     ??_TransmittPacket:	
  1156  0036                     ReadClock@year1:	
  1157                           ; 1 bytes @ 0x16
  1158                           
  1159                           
  1160                           ; 1 bytes @ 0x16
  1161  0036                     	ds	1
  1162  0037                     ReadClock@date1:	
  1163                           
  1164                           ; 1 bytes @ 0x17
  1165  0037                     	ds	1
  1166  0038                     ??_saveDataToFlash:	
  1167  0038                     TransmittPacket@i:	
  1168                           ; 1 bytes @ 0x18
  1169                           
  1170                           
  1171                           ; 2 bytes @ 0x18
  1172  0038                     	ds	2
  1173  003A                     TransmittPacket@topic:	
  1174                           
  1175                           ; 1 bytes @ 0x1A
  1176  003A                     	ds	1
  1177  003B                     ??_Mode_4:	
  1178  003B                     ??_Mode_5:	
  1179                           ; 1 bytes @ 0x1B
  1180                           
  1181  003B                     ??_SendMemoryData:	
  1182                           ; 1 bytes @ 0x1B
  1183                           
  1184                           
  1185                           ; 1 bytes @ 0x1B
  1186  003B                     	ds	2
  1187  003D                     saveDataToFlash@seconds:	
  1188                           
  1189                           ; 1 bytes @ 0x1D
  1190  003D                     	ds	1
  1191  003E                     saveDataToFlash@minutes:	
  1192                           
  1193                           ; 1 bytes @ 0x1E
  1194  003E                     	ds	1
  1195  003F                     saveDataToFlash@hours:	
  1196                           
  1197                           ; 1 bytes @ 0x1F
  1198  003F                     	ds	1
  1199  0040                     saveDataToFlash@date:	
  1200                           
  1201                           ; 1 bytes @ 0x20
  1202  0040                     	ds	1
  1203  0041                     saveDataToFlash@month:	
  1204                           
  1205                           ; 1 bytes @ 0x21
  1206  0041                     	ds	1
  1207  0042                     saveDataToFlash@year:	
  1208                           
  1209                           ; 1 bytes @ 0x22
  1210  0042                     	ds	1
  1211  0043                     saveDataToFlash@value:	
  1212  0043                     SendMemoryData@value:	
  1213                           ; 1 bytes @ 0x23
  1214                           
  1215                           
  1216                           ; 1 bytes @ 0x23
  1217  0043                     	ds	1
  1218  0044                     saveDataToFlash@addr1:	
  1219  0044                     SendMemoryData@addr3:	
  1220                           ; 1 bytes @ 0x24
  1221                           
  1222                           
  1223                           ; 1 bytes @ 0x24
  1224  0044                     	ds	1
  1225  0045                     saveDataToFlash@addr2:	
  1226  0045                     SendMemoryData@addr2:	
  1227                           ; 1 bytes @ 0x25
  1228                           
  1229                           
  1230                           ; 1 bytes @ 0x25
  1231  0045                     	ds	1
  1232  0046                     saveDataToFlash@addr3:	
  1233  0046                     SendMemoryData@addr1:	
  1234                           ; 1 bytes @ 0x26
  1235                           
  1236                           
  1237                           ; 1 bytes @ 0x26
  1238  0046                     	ds	1
  1239  0047                     SendMemoryData@address:	
  1240                           
  1241                           ; 4 bytes @ 0x27
  1242  0047                     	ds	4
  1243  004B                     SendMemoryData@finalAddress:	
  1244                           
  1245                           ; 4 bytes @ 0x2B
  1246  004B                     	ds	4
  1247  004F                     ??_ReceivedPacketHandler:	
  1248                           
  1249                           ; 1 bytes @ 0x2F
  1250  004F                     	ds	1
  1251  0050                     ReceivedPacketHandler@Data:	
  1252                           
  1253                           ; 1 bytes @ 0x30
  1254  0050                     	ds	1
  1255  0051                     ??_TransiverReadFIFO:	
  1256                           
  1257                           ; 1 bytes @ 0x31
  1258  0051                     	ds	2
  1259  0053                     ??_main:	
  1260                           
  1261                           ; 1 bytes @ 0x33
  1262  0053                     	ds	3
  1263                           
  1264                           	psect	maintext
  1265  0E2D                     __pmaintext:	
  1266 ;;
  1267 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1268 ;;
  1269 ;; *************** function _main *****************
  1270 ;; Defined at:
  1271 ;;		line 21 in file "main.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;		None
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  2   80[None  ] int 
  1278 ;; Registers used:
  1279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : B00/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1285 ;;      Params:         0       0       0       0       0
  1286 ;;      Locals:         0       0       0       0       0
  1287 ;;      Temps:          0       3       0       0       0
  1288 ;;      Totals:         0       3       0       0       0
  1289 ;;Total ram usage:        3 bytes
  1290 ;; Hardware stack levels required when called:   11
  1291 ;; This function calls:
  1292 ;;		_ClockInit
  1293 ;;		_Mode_0
  1294 ;;		_Mode_1
  1295 ;;		_Mode_2
  1296 ;;		_Mode_4
  1297 ;;		_Mode_5
  1298 ;;		_OperationMode
  1299 ;;		_PICInit
  1300 ;;		_ResetMemoryAdress
  1301 ;;		_TransiverInit
  1302 ;;		_TransiverReadFIFO
  1303 ;;		_TransiverToReceive
  1304 ;;		_ram_bulk_erase
  1305 ;;		_read_ram_status
  1306 ;;		_saveDataToFlash
  1307 ;;		_write_ram_status
  1308 ;; This function is called by:
  1309 ;;		Startup code after reset
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           
  1314                           ;psect for function _main
  1315  0E2D                     _main:	
  1316                           
  1317                           ;main.c: 24: PICInit();
  1318                           
  1319                           ;incstack = 0
  1320 ;; hardware stack exceeded
  1321                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1322  0E2D  120A  158A  226E  120A  158A  	fcall	_PICInit
  1323                           
  1324                           ;main.c: 25: TransiverInit();
  1325  0E32  120A  158A  2716  120A  158A  	fcall	_TransiverInit
  1326                           
  1327                           ;main.c: 26: ClockInit();
  1328  0E37  120A  158A  242A  120A  158A  	fcall	_ClockInit
  1329                           
  1330                           ;main.c: 30: RB1 = 0;
  1331  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
  1332  0E3D  1303               	bcf	3,6	;RP1=0, select bank0
  1333  0E3E  1086               	bcf	6,1	;volatile
  1334                           
  1335                           ;main.c: 31: _delay((unsigned long)((300)*(4000000/4000.0)));
  1336  0E3F  3002               	movlw	2
  1337  0E40  00D5               	movwf	??_main+2
  1338  0E41  3086               	movlw	134
  1339  0E42  00D4               	movwf	??_main+1
  1340  0E43  3099               	movlw	153
  1341  0E44  00D3               	movwf	??_main
  1342  0E45                     u2497:	
  1343  0E45  0BD3               	decfsz	??_main,f
  1344  0E46  2E45               	goto	u2497
  1345  0E47  0BD4               	decfsz	??_main+1,f
  1346  0E48  2E45               	goto	u2497
  1347  0E49  0BD5               	decfsz	??_main+2,f
  1348  0E4A  2E45               	goto	u2497
  1349                           
  1350                           ;main.c: 32: RB1 = 1;
  1351  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  1352  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  1353  0E4D  1486               	bsf	6,1	;volatile
  1354                           
  1355                           ;main.c: 33: _delay((unsigned long)((300)*(4000000/4000.0)));
  1356  0E4E  3002               	movlw	2
  1357  0E4F  00D5               	movwf	??_main+2
  1358  0E50  3086               	movlw	134
  1359  0E51  00D4               	movwf	??_main+1
  1360  0E52  3099               	movlw	153
  1361  0E53  00D3               	movwf	??_main
  1362  0E54                     u2507:	
  1363  0E54  0BD3               	decfsz	??_main,f
  1364  0E55  2E54               	goto	u2507
  1365  0E56  0BD4               	decfsz	??_main+1,f
  1366  0E57  2E54               	goto	u2507
  1367  0E58  0BD5               	decfsz	??_main+2,f
  1368  0E59  2E54               	goto	u2507
  1369  0E5A                     l3287:	
  1370                           ;main.c: 35: while(1)
  1371                           
  1372                           
  1373                           ;main.c: 36: {
  1374                           ;main.c: 37: if(!RB0)
  1375  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  1376  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  1377  0E5C  1806               	btfsc	6,0	;volatile
  1378  0E5D  2EB1               	goto	l3309
  1379                           
  1380                           ;main.c: 38: {
  1381                           ;main.c: 39: RB1 = 0;
  1382  0E5E  1086               	bcf	6,1	;volatile
  1383                           
  1384                           ;main.c: 40: _delay((unsigned long)((300)*(4000000/4000.0)));
  1385  0E5F  3002               	movlw	2
  1386  0E60  00D5               	movwf	??_main+2
  1387  0E61  3086               	movlw	134
  1388  0E62  00D4               	movwf	??_main+1
  1389  0E63  3099               	movlw	153
  1390  0E64  00D3               	movwf	??_main
  1391  0E65                     u2517:	
  1392  0E65  0BD3               	decfsz	??_main,f
  1393  0E66  2E65               	goto	u2517
  1394  0E67  0BD4               	decfsz	??_main+1,f
  1395  0E68  2E65               	goto	u2517
  1396  0E69  0BD5               	decfsz	??_main+2,f
  1397  0E6A  2E65               	goto	u2517
  1398                           
  1399                           ;main.c: 41: RB1 = 1;
  1400  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  1401  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  1402  0E6D  1486               	bsf	6,1	;volatile
  1403                           
  1404                           ;main.c: 42: _delay((unsigned long)((300)*(4000000/4000.0)));
  1405  0E6E  3002               	movlw	2
  1406  0E6F  00D5               	movwf	??_main+2
  1407  0E70  3086               	movlw	134
  1408  0E71  00D4               	movwf	??_main+1
  1409  0E72  3099               	movlw	153
  1410  0E73  00D3               	movwf	??_main
  1411  0E74                     u2527:	
  1412  0E74  0BD3               	decfsz	??_main,f
  1413  0E75  2E74               	goto	u2527
  1414  0E76  0BD4               	decfsz	??_main+1,f
  1415  0E77  2E74               	goto	u2527
  1416  0E78  0BD5               	decfsz	??_main+2,f
  1417  0E79  2E74               	goto	u2527
  1418                           
  1419                           ;main.c: 43: write_ram_status(read_ram_status() & 0b11100011);
  1420  0E7A  160A  118A  267D  120A  158A  	fcall	_read_ram_status
  1421  0E7F  39E3               	andlw	227
  1422  0E80  120A  158A  2061  120A  158A  	fcall	_write_ram_status
  1423                           
  1424                           ;main.c: 44: ram_bulk_erase();
  1425  0E85  160A  118A  2710  120A  158A  	fcall	_ram_bulk_erase
  1426                           
  1427                           ;main.c: 45: ResetMemoryAdress();
  1428  0E8A  160A  118A  26DA  120A  158A  	fcall	_ResetMemoryAdress
  1429                           
  1430                           ;main.c: 46: RB1 = 0;
  1431  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  1432  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  1433  0E91  1086               	bcf	6,1	;volatile
  1434                           
  1435                           ;main.c: 47: _delay((unsigned long)((300)*(4000000/4000.0)));
  1436  0E92  3002               	movlw	2
  1437  0E93  00D5               	movwf	??_main+2
  1438  0E94  3086               	movlw	134
  1439  0E95  00D4               	movwf	??_main+1
  1440  0E96  3099               	movlw	153
  1441  0E97  00D3               	movwf	??_main
  1442  0E98                     u2537:	
  1443  0E98  0BD3               	decfsz	??_main,f
  1444  0E99  2E98               	goto	u2537
  1445  0E9A  0BD4               	decfsz	??_main+1,f
  1446  0E9B  2E98               	goto	u2537
  1447  0E9C  0BD5               	decfsz	??_main+2,f
  1448  0E9D  2E98               	goto	u2537
  1449                           
  1450                           ;main.c: 48: RB1 = 1;
  1451  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  1452  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  1453  0EA0  1486               	bsf	6,1	;volatile
  1454                           
  1455                           ;main.c: 49: _delay((unsigned long)((300)*(4000000/4000.0)));
  1456  0EA1  3002               	movlw	2
  1457  0EA2  00D5               	movwf	??_main+2
  1458  0EA3  3086               	movlw	134
  1459  0EA4  00D4               	movwf	??_main+1
  1460  0EA5  3099               	movlw	153
  1461  0EA6  00D3               	movwf	??_main
  1462  0EA7                     u2547:	
  1463  0EA7  0BD3               	decfsz	??_main,f
  1464  0EA8  2EA7               	goto	u2547
  1465  0EA9  0BD4               	decfsz	??_main+1,f
  1466  0EAA  2EA7               	goto	u2547
  1467  0EAB  0BD5               	decfsz	??_main+2,f
  1468  0EAC  2EA7               	goto	u2547
  1469  0EAD                     l83:	
  1470                           ;main.c: 50: while(!RB0);
  1471                           
  1472  0EAD  1283               	bcf	3,5	;RP0=0, select bank0
  1473  0EAE  1303               	bcf	3,6	;RP1=0, select bank0
  1474  0EAF  1C06               	btfss	6,0	;volatile
  1475  0EB0  2EAD               	goto	l83
  1476  0EB1                     l3309:	
  1477                           
  1478                           ;main.c: 53: }
  1479                           ;main.c: 55: if(OperationMode() == 0)
  1480  0EB1  160A  118A  2606  120A  158A  	fcall	_OperationMode
  1481  0EB6  3A00               	xorlw	0
  1482  0EB7  1D03               	skipz
  1483  0EB8  2EBE               	goto	l3313
  1484                           
  1485                           ;main.c: 56: {
  1486                           ;main.c: 57: Mode_0();
  1487  0EB9  160A  118A  25E9  120A  158A  	fcall	_Mode_0
  1488  0EBE                     l3313:	
  1489                           
  1490                           ;main.c: 58: }
  1491                           ;main.c: 59: if(OperationMode() == 1)
  1492  0EBE  160A  118A  2606  120A  158A  	fcall	_OperationMode
  1493  0EC3  3A01               	xorlw	1
  1494  0EC4  1D03               	skipz
  1495  0EC5  2ECB               	goto	l3317
  1496                           
  1497                           ;main.c: 60: {
  1498                           ;main.c: 61: Mode_1();
  1499  0EC6  160A  118A  26A6  120A  158A  	fcall	_Mode_1
  1500  0ECB                     l3317:	
  1501                           
  1502                           ;main.c: 62: }
  1503                           ;main.c: 65: if(OperationMode() == 2)
  1504  0ECB  160A  118A  2606  120A  158A  	fcall	_OperationMode
  1505  0ED0  3A02               	xorlw	2
  1506  0ED1  1D03               	skipz
  1507  0ED2  2ED8               	goto	l3321
  1508                           
  1509                           ;main.c: 66: {
  1510                           ;main.c: 67: Mode_2();
  1511  0ED3  160A  118A  261B  120A  158A  	fcall	_Mode_2
  1512  0ED8                     l3321:	
  1513                           
  1514                           ;main.c: 68: }
  1515                           ;main.c: 70: if(OperationMode() == 4)
  1516  0ED8  160A  118A  2606  120A  158A  	fcall	_OperationMode
  1517  0EDD  3A04               	xorlw	4
  1518  0EDE  1D03               	skipz
  1519  0EDF  2EE5               	goto	l3325
  1520                           
  1521                           ;main.c: 71: {
  1522                           ;main.c: 72: Mode_4();
  1523  0EE0  160A  118A  2636  120A  158A  	fcall	_Mode_4
  1524  0EE5                     l3325:	
  1525                           
  1526                           ;main.c: 73: }
  1527                           ;main.c: 75: if(OperationMode() == 5)
  1528  0EE5  160A  118A  2606  120A  158A  	fcall	_OperationMode
  1529  0EEA  3A05               	xorlw	5
  1530  0EEB  1D03               	skipz
  1531  0EEC  2EF2               	goto	l3329
  1532                           
  1533                           ;main.c: 76: {
  1534                           ;main.c: 77: Mode_5();
  1535  0EED  160A  118A  2658  120A  158A  	fcall	_Mode_5
  1536  0EF2                     l3329:	
  1537                           
  1538                           ;main.c: 78: }
  1539                           ;main.c: 82: if(!bTransiverModeReceive)
  1540  0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  1541  0EF3  1303               	bcf	3,6	;RP1=0, select bank0
  1542  0EF4  086A               	movf	_bTransiverModeReceive,w
  1543  0EF5  1D03               	btfss	3,2
  1544  0EF6  2EFC               	goto	l3333
  1545                           
  1546                           ;main.c: 83: TransiverToReceive();
  1547  0EF7  120A  158A  2211  120A  158A  	fcall	_TransiverToReceive
  1548  0EFC                     l3333:	
  1549                           
  1550                           ;main.c: 84: if(RB4 && bTransiverModeReceive)
  1551  0EFC  1283               	bcf	3,5	;RP0=0, select bank0
  1552  0EFD  1303               	bcf	3,6	;RP1=0, select bank0
  1553  0EFE  1E06               	btfss	6,4	;volatile
  1554  0EFF  2F08               	goto	l3339
  1555  0F00  086A               	movf	_bTransiverModeReceive,w
  1556  0F01  1903               	btfsc	3,2
  1557  0F02  2F08               	goto	l3339
  1558                           
  1559                           ;main.c: 85: TransiverReadFIFO();
  1560  0F03  120A  158A  22D2  120A  158A  	fcall	_TransiverReadFIFO
  1561  0F08                     l3339:	
  1562                           
  1563                           ;main.c: 87: if(bSaveDataToFlash)
  1564  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  1565  0F09  1303               	bcf	3,6	;RP1=0, select bank0
  1566  0F0A  0869               	movf	_bSaveDataToFlash,w
  1567  0F0B  1903               	btfsc	3,2
  1568  0F0C  2E5A               	goto	l3287
  1569                           
  1570                           ;main.c: 88: {
  1571                           ;main.c: 89: saveDataToFlash();
  1572  0F0D  120A  118A  2045  120A  158A  	fcall	_saveDataToFlash
  1573                           
  1574                           ;main.c: 90: bSaveDataToFlash = FALSE;
  1575  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  1576  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  1577  0F14  01E9               	clrf	_bSaveDataToFlash
  1578  0F15  2E5A               	goto	l3287
  1579  0F16                     __end_of_main:	
  1580                           
  1581                           	psect	text1
  1582  0045                     __ptext1:	
  1583 ;; *************** function _saveDataToFlash *****************
  1584 ;; Defined at:
  1585 ;;		line 1075 in file "functions.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;  addr3           1   38[BANK0 ] unsigned char 
  1590 ;;  addr2           1   37[BANK0 ] unsigned char 
  1591 ;;  addr1           1   36[BANK0 ] unsigned char 
  1592 ;;  value           1   35[BANK0 ] unsigned char 
  1593 ;;  year            1   34[BANK0 ] unsigned char 
  1594 ;;  month           1   33[BANK0 ] unsigned char 
  1595 ;;  date            1   32[BANK0 ] unsigned char 
  1596 ;;  hours           1   31[BANK0 ] unsigned char 
  1597 ;;  minutes         1   30[BANK0 ] unsigned char 
  1598 ;;  seconds         1   29[BANK0 ] unsigned char 
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      void 
  1601 ;; Registers used:
  1602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1608 ;;      Params:         0       0       0       0       0
  1609 ;;      Locals:         0      10       0       0       0
  1610 ;;      Temps:          0       5       0       0       0
  1611 ;;      Totals:         0      15       0       0       0
  1612 ;;Total ram usage:       15 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    6
  1615 ;; This function calls:
  1616 ;;		_AnalogValue
  1617 ;;		_IncreaseMemoryAdress
  1618 ;;		_ReadClock
  1619 ;;		_ReadMemoryAdress
  1620 ;;		_read_write_flash_ram
  1621 ;; This function is called by:
  1622 ;;		_main
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           
  1627                           ;psect for function _saveDataToFlash
  1628  0045                     _saveDataToFlash:	
  1629                           
  1630                           ;functions.c: 1077: unsigned char value, addr1, addr2, addr3, seconds, minutes, hours, d
      +                          ate, month, year;
  1631                           ;functions.c: 1079: ReadClock(&seconds, &minutes, &hours, &date, &month, &year);
  1632                           
  1633                           ;incstack = 0
  1634                           ; Regs used in _saveDataToFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1635  0045  303E               	movlw	(low (saveDataToFlash@minutes| 0))& (0+255)
  1636  0046  1283               	bcf	3,5	;RP0=0, select bank0
  1637  0047  1303               	bcf	3,6	;RP1=0, select bank0
  1638  0048  00B8               	movwf	??_saveDataToFlash
  1639  0049  0838               	movf	??_saveDataToFlash,w
  1640  004A  00A4               	movwf	ReadClock@minutes
  1641  004B  303F               	movlw	(low (saveDataToFlash@hours| 0))& (0+255)
  1642  004C  00B9               	movwf	??_saveDataToFlash+1
  1643  004D  0839               	movf	??_saveDataToFlash+1,w
  1644  004E  00A5               	movwf	ReadClock@hour
  1645  004F  3040               	movlw	(low (saveDataToFlash@date| 0))& (0+255)
  1646  0050  00BA               	movwf	??_saveDataToFlash+2
  1647  0051  083A               	movf	??_saveDataToFlash+2,w
  1648  0052  00A6               	movwf	ReadClock@date
  1649  0053  3041               	movlw	(low (saveDataToFlash@month| 0))& (0+255)
  1650  0054  00BB               	movwf	??_saveDataToFlash+3
  1651  0055  083B               	movf	??_saveDataToFlash+3,w
  1652  0056  00A7               	movwf	ReadClock@month
  1653  0057  3042               	movlw	(low (saveDataToFlash@year| 0))& (0+255)
  1654  0058  00BC               	movwf	??_saveDataToFlash+4
  1655  0059  083C               	movf	??_saveDataToFlash+4,w
  1656  005A  00A8               	movwf	ReadClock@year
  1657  005B  303D               	movlw	(low (saveDataToFlash@seconds| 0))& (0+255)
  1658  005C  120A  118A  246D  120A  118A  	fcall	_ReadClock
  1659                           
  1660                           ;functions.c: 1081: value = year;
  1661  0061  1283               	bcf	3,5	;RP0=0, select bank0
  1662  0062  1303               	bcf	3,6	;RP1=0, select bank0
  1663  0063  0842               	movf	saveDataToFlash@year,w
  1664  0064  00B8               	movwf	??_saveDataToFlash
  1665  0065  0838               	movf	??_saveDataToFlash,w
  1666  0066  00C3               	movwf	saveDataToFlash@value
  1667                           
  1668                           ;functions.c: 1082: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1669  0067  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1670  0068  00B8               	movwf	??_saveDataToFlash
  1671  0069  0838               	movf	??_saveDataToFlash,w
  1672  006A  00A2               	movwf	ReadMemoryAdress@var2
  1673  006B  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1674  006C  00B9               	movwf	??_saveDataToFlash+1
  1675  006D  0839               	movf	??_saveDataToFlash+1,w
  1676  006E  00A3               	movwf	ReadMemoryAdress@var1
  1677  006F  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1678  0070  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  1679                           
  1680                           ;functions.c: 1083: read_write_flash_ram(
  1681                           ;functions.c: 1084: 0,
  1682                           ;functions.c: 1085: 1,
  1683                           ;functions.c: 1086: addr3,
  1684                           ;functions.c: 1087: addr2,
  1685                           ;functions.c: 1088: addr1,
  1686                           ;functions.c: 1089: &value);
  1687  0075  3001               	movlw	1
  1688  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1690  0078  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1691  0079  3000               	movlw	0
  1692  007A  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1693  007B  0846               	movf	saveDataToFlash@addr3,w
  1694  007C  00B8               	movwf	??_saveDataToFlash
  1695  007D  0838               	movf	??_saveDataToFlash,w
  1696  007E  00A7               	movwf	read_write_flash_ram@flash_sector
  1697  007F  0845               	movf	saveDataToFlash@addr2,w
  1698  0080  00B9               	movwf	??_saveDataToFlash+1
  1699  0081  0839               	movf	??_saveDataToFlash+1,w
  1700  0082  00A8               	movwf	read_write_flash_ram@flash_page
  1701  0083  0844               	movf	saveDataToFlash@addr1,w
  1702  0084  00BA               	movwf	??_saveDataToFlash+2
  1703  0085  083A               	movf	??_saveDataToFlash+2,w
  1704  0086  00A9               	movwf	read_write_flash_ram@offset
  1705  0087  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1706  0088  00BB               	movwf	??_saveDataToFlash+3
  1707  0089  083B               	movf	??_saveDataToFlash+3,w
  1708  008A  00AA               	movwf	read_write_flash_ram@mem_ptr
  1709  008B  3000               	movlw	0
  1710  008C  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1711                           
  1712                           ;functions.c: 1090: IncreaseMemoryAdress();
  1713  0091  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1714                           
  1715                           ;functions.c: 1092: value = month;
  1716  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1718  0098  0841               	movf	saveDataToFlash@month,w
  1719  0099  00B8               	movwf	??_saveDataToFlash
  1720  009A  0838               	movf	??_saveDataToFlash,w
  1721  009B  00C3               	movwf	saveDataToFlash@value
  1722                           
  1723                           ;functions.c: 1093: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1724  009C  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1725  009D  00B8               	movwf	??_saveDataToFlash
  1726  009E  0838               	movf	??_saveDataToFlash,w
  1727  009F  00A2               	movwf	ReadMemoryAdress@var2
  1728  00A0  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1729  00A1  00B9               	movwf	??_saveDataToFlash+1
  1730  00A2  0839               	movf	??_saveDataToFlash+1,w
  1731  00A3  00A3               	movwf	ReadMemoryAdress@var1
  1732  00A4  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1733  00A5  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  1734                           
  1735                           ;functions.c: 1094: read_write_flash_ram(
  1736                           ;functions.c: 1095: 0,
  1737                           ;functions.c: 1096: 1,
  1738                           ;functions.c: 1097: addr3,
  1739                           ;functions.c: 1098: addr2,
  1740                           ;functions.c: 1099: addr1,
  1741                           ;functions.c: 1100: &value);
  1742  00AA  3001               	movlw	1
  1743  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  1744  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  1745  00AD  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1746  00AE  3000               	movlw	0
  1747  00AF  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1748  00B0  0846               	movf	saveDataToFlash@addr3,w
  1749  00B1  00B8               	movwf	??_saveDataToFlash
  1750  00B2  0838               	movf	??_saveDataToFlash,w
  1751  00B3  00A7               	movwf	read_write_flash_ram@flash_sector
  1752  00B4  0845               	movf	saveDataToFlash@addr2,w
  1753  00B5  00B9               	movwf	??_saveDataToFlash+1
  1754  00B6  0839               	movf	??_saveDataToFlash+1,w
  1755  00B7  00A8               	movwf	read_write_flash_ram@flash_page
  1756  00B8  0844               	movf	saveDataToFlash@addr1,w
  1757  00B9  00BA               	movwf	??_saveDataToFlash+2
  1758  00BA  083A               	movf	??_saveDataToFlash+2,w
  1759  00BB  00A9               	movwf	read_write_flash_ram@offset
  1760  00BC  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1761  00BD  00BB               	movwf	??_saveDataToFlash+3
  1762  00BE  083B               	movf	??_saveDataToFlash+3,w
  1763  00BF  00AA               	movwf	read_write_flash_ram@mem_ptr
  1764  00C0  3000               	movlw	0
  1765  00C1  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1766                           
  1767                           ;functions.c: 1101: IncreaseMemoryAdress();
  1768  00C6  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1769                           
  1770                           ;functions.c: 1103: value = date;
  1771  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1772  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1773  00CD  0840               	movf	saveDataToFlash@date,w
  1774  00CE  00B8               	movwf	??_saveDataToFlash
  1775  00CF  0838               	movf	??_saveDataToFlash,w
  1776  00D0  00C3               	movwf	saveDataToFlash@value
  1777                           
  1778                           ;functions.c: 1104: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1779  00D1  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1780  00D2  00B8               	movwf	??_saveDataToFlash
  1781  00D3  0838               	movf	??_saveDataToFlash,w
  1782  00D4  00A2               	movwf	ReadMemoryAdress@var2
  1783  00D5  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1784  00D6  00B9               	movwf	??_saveDataToFlash+1
  1785  00D7  0839               	movf	??_saveDataToFlash+1,w
  1786  00D8  00A3               	movwf	ReadMemoryAdress@var1
  1787  00D9  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1788  00DA  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  1789                           
  1790                           ;functions.c: 1105: read_write_flash_ram(
  1791                           ;functions.c: 1106: 0,
  1792                           ;functions.c: 1107: 1,
  1793                           ;functions.c: 1108: addr3,
  1794                           ;functions.c: 1109: addr2,
  1795                           ;functions.c: 1110: addr1,
  1796                           ;functions.c: 1111: &value);
  1797  00DF  3001               	movlw	1
  1798  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1799  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1800  00E2  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1801  00E3  3000               	movlw	0
  1802  00E4  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1803  00E5  0846               	movf	saveDataToFlash@addr3,w
  1804  00E6  00B8               	movwf	??_saveDataToFlash
  1805  00E7  0838               	movf	??_saveDataToFlash,w
  1806  00E8  00A7               	movwf	read_write_flash_ram@flash_sector
  1807  00E9  0845               	movf	saveDataToFlash@addr2,w
  1808  00EA  00B9               	movwf	??_saveDataToFlash+1
  1809  00EB  0839               	movf	??_saveDataToFlash+1,w
  1810  00EC  00A8               	movwf	read_write_flash_ram@flash_page
  1811  00ED  0844               	movf	saveDataToFlash@addr1,w
  1812  00EE  00BA               	movwf	??_saveDataToFlash+2
  1813  00EF  083A               	movf	??_saveDataToFlash+2,w
  1814  00F0  00A9               	movwf	read_write_flash_ram@offset
  1815  00F1  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1816  00F2  00BB               	movwf	??_saveDataToFlash+3
  1817  00F3  083B               	movf	??_saveDataToFlash+3,w
  1818  00F4  00AA               	movwf	read_write_flash_ram@mem_ptr
  1819  00F5  3000               	movlw	0
  1820  00F6  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1821                           
  1822                           ;functions.c: 1112: IncreaseMemoryAdress();
  1823  00FB  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1824                           
  1825                           ;functions.c: 1114: value = hours;
  1826  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1827  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1828  0102  083F               	movf	saveDataToFlash@hours,w
  1829  0103  00B8               	movwf	??_saveDataToFlash
  1830  0104  0838               	movf	??_saveDataToFlash,w
  1831  0105  00C3               	movwf	saveDataToFlash@value
  1832                           
  1833                           ;functions.c: 1115: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1834  0106  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1835  0107  00B8               	movwf	??_saveDataToFlash
  1836  0108  0838               	movf	??_saveDataToFlash,w
  1837  0109  00A2               	movwf	ReadMemoryAdress@var2
  1838  010A  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1839  010B  00B9               	movwf	??_saveDataToFlash+1
  1840  010C  0839               	movf	??_saveDataToFlash+1,w
  1841  010D  00A3               	movwf	ReadMemoryAdress@var1
  1842  010E  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1843  010F  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  1844                           
  1845                           ;functions.c: 1116: read_write_flash_ram(
  1846                           ;functions.c: 1117: 0,
  1847                           ;functions.c: 1118: 1,
  1848                           ;functions.c: 1119: addr3,
  1849                           ;functions.c: 1120: addr2,
  1850                           ;functions.c: 1121: addr1,
  1851                           ;functions.c: 1122: &value);
  1852  0114  3001               	movlw	1
  1853  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1854  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1855  0117  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1856  0118  3000               	movlw	0
  1857  0119  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1858  011A  0846               	movf	saveDataToFlash@addr3,w
  1859  011B  00B8               	movwf	??_saveDataToFlash
  1860  011C  0838               	movf	??_saveDataToFlash,w
  1861  011D  00A7               	movwf	read_write_flash_ram@flash_sector
  1862  011E  0845               	movf	saveDataToFlash@addr2,w
  1863  011F  00B9               	movwf	??_saveDataToFlash+1
  1864  0120  0839               	movf	??_saveDataToFlash+1,w
  1865  0121  00A8               	movwf	read_write_flash_ram@flash_page
  1866  0122  0844               	movf	saveDataToFlash@addr1,w
  1867  0123  00BA               	movwf	??_saveDataToFlash+2
  1868  0124  083A               	movf	??_saveDataToFlash+2,w
  1869  0125  00A9               	movwf	read_write_flash_ram@offset
  1870  0126  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1871  0127  00BB               	movwf	??_saveDataToFlash+3
  1872  0128  083B               	movf	??_saveDataToFlash+3,w
  1873  0129  00AA               	movwf	read_write_flash_ram@mem_ptr
  1874  012A  3000               	movlw	0
  1875  012B  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1876                           
  1877                           ;functions.c: 1123: IncreaseMemoryAdress();
  1878  0130  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1879                           
  1880                           ;functions.c: 1126: value = AnalogValue(0);
  1881  0135  3000               	movlw	0
  1882  0136  160A  118A  277D  120A  118A  	fcall	_AnalogValue
  1883  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1884  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1885  013D  00B8               	movwf	??_saveDataToFlash
  1886  013E  0838               	movf	??_saveDataToFlash,w
  1887  013F  00C3               	movwf	saveDataToFlash@value
  1888                           
  1889                           ;functions.c: 1127: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1890  0140  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1891  0141  00B8               	movwf	??_saveDataToFlash
  1892  0142  0838               	movf	??_saveDataToFlash,w
  1893  0143  00A2               	movwf	ReadMemoryAdress@var2
  1894  0144  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1895  0145  00B9               	movwf	??_saveDataToFlash+1
  1896  0146  0839               	movf	??_saveDataToFlash+1,w
  1897  0147  00A3               	movwf	ReadMemoryAdress@var1
  1898  0148  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1899  0149  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  1900                           
  1901                           ;functions.c: 1128: read_write_flash_ram(
  1902                           ;functions.c: 1129: 0,
  1903                           ;functions.c: 1130: 1,
  1904                           ;functions.c: 1131: addr3,
  1905                           ;functions.c: 1132: addr2,
  1906                           ;functions.c: 1133: addr1,
  1907                           ;functions.c: 1134: &value);
  1908  014E  3001               	movlw	1
  1909  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1910  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1911  0151  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1912  0152  3000               	movlw	0
  1913  0153  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1914  0154  0846               	movf	saveDataToFlash@addr3,w
  1915  0155  00B8               	movwf	??_saveDataToFlash
  1916  0156  0838               	movf	??_saveDataToFlash,w
  1917  0157  00A7               	movwf	read_write_flash_ram@flash_sector
  1918  0158  0845               	movf	saveDataToFlash@addr2,w
  1919  0159  00B9               	movwf	??_saveDataToFlash+1
  1920  015A  0839               	movf	??_saveDataToFlash+1,w
  1921  015B  00A8               	movwf	read_write_flash_ram@flash_page
  1922  015C  0844               	movf	saveDataToFlash@addr1,w
  1923  015D  00BA               	movwf	??_saveDataToFlash+2
  1924  015E  083A               	movf	??_saveDataToFlash+2,w
  1925  015F  00A9               	movwf	read_write_flash_ram@offset
  1926  0160  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1927  0161  00BB               	movwf	??_saveDataToFlash+3
  1928  0162  083B               	movf	??_saveDataToFlash+3,w
  1929  0163  00AA               	movwf	read_write_flash_ram@mem_ptr
  1930  0164  3000               	movlw	0
  1931  0165  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1932                           
  1933                           ;functions.c: 1135: IncreaseMemoryAdress();
  1934  016A  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1935                           
  1936                           ;functions.c: 1137: value = AnalogValue(3);
  1937  016F  3003               	movlw	3
  1938  0170  160A  118A  277D  120A  118A  	fcall	_AnalogValue
  1939  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1940  0176  1303               	bcf	3,6	;RP1=0, select bank0
  1941  0177  00B8               	movwf	??_saveDataToFlash
  1942  0178  0838               	movf	??_saveDataToFlash,w
  1943  0179  00C3               	movwf	saveDataToFlash@value
  1944                           
  1945                           ;functions.c: 1138: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1946  017A  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1947  017B  00B8               	movwf	??_saveDataToFlash
  1948  017C  0838               	movf	??_saveDataToFlash,w
  1949  017D  00A2               	movwf	ReadMemoryAdress@var2
  1950  017E  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1951  017F  00B9               	movwf	??_saveDataToFlash+1
  1952  0180  0839               	movf	??_saveDataToFlash+1,w
  1953  0181  00A3               	movwf	ReadMemoryAdress@var1
  1954  0182  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1955  0183  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  1956                           
  1957                           ;functions.c: 1139: read_write_flash_ram(
  1958                           ;functions.c: 1140: 0,
  1959                           ;functions.c: 1141: 1,
  1960                           ;functions.c: 1142: addr3,
  1961                           ;functions.c: 1143: addr2,
  1962                           ;functions.c: 1144: addr1,
  1963                           ;functions.c: 1145: &value);
  1964  0188  3001               	movlw	1
  1965  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1966  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1967  018B  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1968  018C  3000               	movlw	0
  1969  018D  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1970  018E  0846               	movf	saveDataToFlash@addr3,w
  1971  018F  00B8               	movwf	??_saveDataToFlash
  1972  0190  0838               	movf	??_saveDataToFlash,w
  1973  0191  00A7               	movwf	read_write_flash_ram@flash_sector
  1974  0192  0845               	movf	saveDataToFlash@addr2,w
  1975  0193  00B9               	movwf	??_saveDataToFlash+1
  1976  0194  0839               	movf	??_saveDataToFlash+1,w
  1977  0195  00A8               	movwf	read_write_flash_ram@flash_page
  1978  0196  0844               	movf	saveDataToFlash@addr1,w
  1979  0197  00BA               	movwf	??_saveDataToFlash+2
  1980  0198  083A               	movf	??_saveDataToFlash+2,w
  1981  0199  00A9               	movwf	read_write_flash_ram@offset
  1982  019A  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1983  019B  00BB               	movwf	??_saveDataToFlash+3
  1984  019C  083B               	movf	??_saveDataToFlash+3,w
  1985  019D  00AA               	movwf	read_write_flash_ram@mem_ptr
  1986  019E  3000               	movlw	0
  1987  019F  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  1988                           
  1989                           ;functions.c: 1146: IncreaseMemoryAdress();
  1990  01A4  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  1991                           
  1992                           ;functions.c: 1148: value = AnalogValue(5);
  1993  01A9  3005               	movlw	5
  1994  01AA  160A  118A  277D  120A  118A  	fcall	_AnalogValue
  1995  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1996  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1997  01B1  00B8               	movwf	??_saveDataToFlash
  1998  01B2  0838               	movf	??_saveDataToFlash,w
  1999  01B3  00C3               	movwf	saveDataToFlash@value
  2000                           
  2001                           ;functions.c: 1149: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2002  01B4  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2003  01B5  00B8               	movwf	??_saveDataToFlash
  2004  01B6  0838               	movf	??_saveDataToFlash,w
  2005  01B7  00A2               	movwf	ReadMemoryAdress@var2
  2006  01B8  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2007  01B9  00B9               	movwf	??_saveDataToFlash+1
  2008  01BA  0839               	movf	??_saveDataToFlash+1,w
  2009  01BB  00A3               	movwf	ReadMemoryAdress@var1
  2010  01BC  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2011  01BD  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  2012                           
  2013                           ;functions.c: 1150: read_write_flash_ram(
  2014                           ;functions.c: 1151: 0,
  2015                           ;functions.c: 1152: 1,
  2016                           ;functions.c: 1153: addr3,
  2017                           ;functions.c: 1154: addr2,
  2018                           ;functions.c: 1155: addr1,
  2019                           ;functions.c: 1156: &value);
  2020  01C2  3001               	movlw	1
  2021  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  2022  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  2023  01C5  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2024  01C6  3000               	movlw	0
  2025  01C7  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2026  01C8  0846               	movf	saveDataToFlash@addr3,w
  2027  01C9  00B8               	movwf	??_saveDataToFlash
  2028  01CA  0838               	movf	??_saveDataToFlash,w
  2029  01CB  00A7               	movwf	read_write_flash_ram@flash_sector
  2030  01CC  0845               	movf	saveDataToFlash@addr2,w
  2031  01CD  00B9               	movwf	??_saveDataToFlash+1
  2032  01CE  0839               	movf	??_saveDataToFlash+1,w
  2033  01CF  00A8               	movwf	read_write_flash_ram@flash_page
  2034  01D0  0844               	movf	saveDataToFlash@addr1,w
  2035  01D1  00BA               	movwf	??_saveDataToFlash+2
  2036  01D2  083A               	movf	??_saveDataToFlash+2,w
  2037  01D3  00A9               	movwf	read_write_flash_ram@offset
  2038  01D4  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2039  01D5  00BB               	movwf	??_saveDataToFlash+3
  2040  01D6  083B               	movf	??_saveDataToFlash+3,w
  2041  01D7  00AA               	movwf	read_write_flash_ram@mem_ptr
  2042  01D8  3000               	movlw	0
  2043  01D9  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  2044                           
  2045                           ;functions.c: 1157: IncreaseMemoryAdress();
  2046  01DE  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  2047                           
  2048                           ;functions.c: 1159: value = AnalogValue(7);
  2049  01E3  3007               	movlw	7
  2050  01E4  160A  118A  277D  120A  118A  	fcall	_AnalogValue
  2051  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  2052  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  2053  01EB  00B8               	movwf	??_saveDataToFlash
  2054  01EC  0838               	movf	??_saveDataToFlash,w
  2055  01ED  00C3               	movwf	saveDataToFlash@value
  2056                           
  2057                           ;functions.c: 1160: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2058  01EE  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2059  01EF  00B8               	movwf	??_saveDataToFlash
  2060  01F0  0838               	movf	??_saveDataToFlash,w
  2061  01F1  00A2               	movwf	ReadMemoryAdress@var2
  2062  01F2  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2063  01F3  00B9               	movwf	??_saveDataToFlash+1
  2064  01F4  0839               	movf	??_saveDataToFlash+1,w
  2065  01F5  00A3               	movwf	ReadMemoryAdress@var1
  2066  01F6  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2067  01F7  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  2068                           
  2069                           ;functions.c: 1161: read_write_flash_ram(
  2070                           ;functions.c: 1162: 0,
  2071                           ;functions.c: 1163: 1,
  2072                           ;functions.c: 1164: addr3,
  2073                           ;functions.c: 1165: addr2,
  2074                           ;functions.c: 1166: addr1,
  2075                           ;functions.c: 1167: &value);
  2076  01FC  3001               	movlw	1
  2077  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2078  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2079  01FF  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2080  0200  3000               	movlw	0
  2081  0201  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2082  0202  0846               	movf	saveDataToFlash@addr3,w
  2083  0203  00B8               	movwf	??_saveDataToFlash
  2084  0204  0838               	movf	??_saveDataToFlash,w
  2085  0205  00A7               	movwf	read_write_flash_ram@flash_sector
  2086  0206  0845               	movf	saveDataToFlash@addr2,w
  2087  0207  00B9               	movwf	??_saveDataToFlash+1
  2088  0208  0839               	movf	??_saveDataToFlash+1,w
  2089  0209  00A8               	movwf	read_write_flash_ram@flash_page
  2090  020A  0844               	movf	saveDataToFlash@addr1,w
  2091  020B  00BA               	movwf	??_saveDataToFlash+2
  2092  020C  083A               	movf	??_saveDataToFlash+2,w
  2093  020D  00A9               	movwf	read_write_flash_ram@offset
  2094  020E  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2095  020F  00BB               	movwf	??_saveDataToFlash+3
  2096  0210  083B               	movf	??_saveDataToFlash+3,w
  2097  0211  00AA               	movwf	read_write_flash_ram@mem_ptr
  2098  0212  3000               	movlw	0
  2099  0213  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  2100                           
  2101                           ;functions.c: 1168: IncreaseMemoryAdress();
  2102  0218  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  2103                           
  2104                           ;functions.c: 1171: value = AnalogValue(6);
  2105  021D  3006               	movlw	6
  2106  021E  160A  118A  277D  120A  118A  	fcall	_AnalogValue
  2107  0223  1283               	bcf	3,5	;RP0=0, select bank0
  2108  0224  1303               	bcf	3,6	;RP1=0, select bank0
  2109  0225  00B8               	movwf	??_saveDataToFlash
  2110  0226  0838               	movf	??_saveDataToFlash,w
  2111  0227  00C3               	movwf	saveDataToFlash@value
  2112                           
  2113                           ;functions.c: 1172: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2114  0228  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2115  0229  00B8               	movwf	??_saveDataToFlash
  2116  022A  0838               	movf	??_saveDataToFlash,w
  2117  022B  00A2               	movwf	ReadMemoryAdress@var2
  2118  022C  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2119  022D  00B9               	movwf	??_saveDataToFlash+1
  2120  022E  0839               	movf	??_saveDataToFlash+1,w
  2121  022F  00A3               	movwf	ReadMemoryAdress@var1
  2122  0230  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2123  0231  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  2124                           
  2125                           ;functions.c: 1173: read_write_flash_ram(
  2126                           ;functions.c: 1174: 0,
  2127                           ;functions.c: 1175: 1,
  2128                           ;functions.c: 1176: addr3,
  2129                           ;functions.c: 1177: addr2,
  2130                           ;functions.c: 1178: addr1,
  2131                           ;functions.c: 1179: &value);
  2132  0236  3001               	movlw	1
  2133  0237  1283               	bcf	3,5	;RP0=0, select bank0
  2134  0238  1303               	bcf	3,6	;RP1=0, select bank0
  2135  0239  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2136  023A  3000               	movlw	0
  2137  023B  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2138  023C  0846               	movf	saveDataToFlash@addr3,w
  2139  023D  00B8               	movwf	??_saveDataToFlash
  2140  023E  0838               	movf	??_saveDataToFlash,w
  2141  023F  00A7               	movwf	read_write_flash_ram@flash_sector
  2142  0240  0845               	movf	saveDataToFlash@addr2,w
  2143  0241  00B9               	movwf	??_saveDataToFlash+1
  2144  0242  0839               	movf	??_saveDataToFlash+1,w
  2145  0243  00A8               	movwf	read_write_flash_ram@flash_page
  2146  0244  0844               	movf	saveDataToFlash@addr1,w
  2147  0245  00BA               	movwf	??_saveDataToFlash+2
  2148  0246  083A               	movf	??_saveDataToFlash+2,w
  2149  0247  00A9               	movwf	read_write_flash_ram@offset
  2150  0248  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2151  0249  00BB               	movwf	??_saveDataToFlash+3
  2152  024A  083B               	movf	??_saveDataToFlash+3,w
  2153  024B  00AA               	movwf	read_write_flash_ram@mem_ptr
  2154  024C  3000               	movlw	0
  2155  024D  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  2156                           
  2157                           ;functions.c: 1180: IncreaseMemoryAdress();
  2158  0252  120A  158A  21B5  120A  118A  	fcall	_IncreaseMemoryAdress
  2159                           
  2160                           ;functions.c: 1183: value = AnalogValue(8);
  2161  0257  3008               	movlw	8
  2162  0258  160A  118A  277D  120A  118A  	fcall	_AnalogValue
  2163  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2164  025E  1303               	bcf	3,6	;RP1=0, select bank0
  2165  025F  00B8               	movwf	??_saveDataToFlash
  2166  0260  0838               	movf	??_saveDataToFlash,w
  2167  0261  00C3               	movwf	saveDataToFlash@value
  2168                           
  2169                           ;functions.c: 1184: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2170  0262  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2171  0263  00B8               	movwf	??_saveDataToFlash
  2172  0264  0838               	movf	??_saveDataToFlash,w
  2173  0265  00A2               	movwf	ReadMemoryAdress@var2
  2174  0266  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2175  0267  00B9               	movwf	??_saveDataToFlash+1
  2176  0268  0839               	movf	??_saveDataToFlash+1,w
  2177  0269  00A3               	movwf	ReadMemoryAdress@var1
  2178  026A  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2179  026B  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  2180                           
  2181                           ;functions.c: 1185: read_write_flash_ram(
  2182                           ;functions.c: 1186: 0,
  2183                           ;functions.c: 1187: 1,
  2184                           ;functions.c: 1188: addr3,
  2185                           ;functions.c: 1189: addr2,
  2186                           ;functions.c: 1190: addr1,
  2187                           ;functions.c: 1191: &value);
  2188  0270  3001               	movlw	1
  2189  0271  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0272  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0273  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2192  0274  3000               	movlw	0
  2193  0275  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2194  0276  0846               	movf	saveDataToFlash@addr3,w
  2195  0277  00B8               	movwf	??_saveDataToFlash
  2196  0278  0838               	movf	??_saveDataToFlash,w
  2197  0279  00A7               	movwf	read_write_flash_ram@flash_sector
  2198  027A  0845               	movf	saveDataToFlash@addr2,w
  2199  027B  00B9               	movwf	??_saveDataToFlash+1
  2200  027C  0839               	movf	??_saveDataToFlash+1,w
  2201  027D  00A8               	movwf	read_write_flash_ram@flash_page
  2202  027E  0844               	movf	saveDataToFlash@addr1,w
  2203  027F  00BA               	movwf	??_saveDataToFlash+2
  2204  0280  083A               	movf	??_saveDataToFlash+2,w
  2205  0281  00A9               	movwf	read_write_flash_ram@offset
  2206  0282  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2207  0283  00BB               	movwf	??_saveDataToFlash+3
  2208  0284  083B               	movf	??_saveDataToFlash+3,w
  2209  0285  00AA               	movwf	read_write_flash_ram@mem_ptr
  2210  0286  3000               	movlw	0
  2211  0287  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  2212                           
  2213                           ;functions.c: 1192: IncreaseMemoryAdress();
  2214  028C  120A  158A  21B5   	fcall	_IncreaseMemoryAdress
  2215  028F  0008               	return
  2216  0290                     __end_of_saveDataToFlash:	
  2217                           
  2218                           	psect	text2
  2219  046D                     __ptext2:	
  2220 ;; *************** function _ReadClock *****************
  2221 ;; Defined at:
  2222 ;;		line 49 in file "MCP79510.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;  seconds         1    wreg     PTR unsigned char 
  2225 ;;		 -> saveDataToFlash@seconds(1), 
  2226 ;;  minutes         1    4[BANK0 ] PTR unsigned char 
  2227 ;;		 -> saveDataToFlash@minutes(1), 
  2228 ;;  hour            1    5[BANK0 ] PTR unsigned char 
  2229 ;;		 -> saveDataToFlash@hours(1), 
  2230 ;;  date            1    6[BANK0 ] PTR unsigned char 
  2231 ;;		 -> saveDataToFlash@date(1), 
  2232 ;;  month           1    7[BANK0 ] PTR unsigned char 
  2233 ;;		 -> saveDataToFlash@month(1), 
  2234 ;;  year            1    8[BANK0 ] PTR unsigned char 
  2235 ;;		 -> saveDataToFlash@year(1), 
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;  seconds         1   17[BANK0 ] PTR unsigned char 
  2238 ;;		 -> saveDataToFlash@seconds(1), 
  2239 ;;  date1           1   23[BANK0 ] unsigned char 
  2240 ;;  year1           1   22[BANK0 ] unsigned char 
  2241 ;;  month1          1   21[BANK0 ] unsigned char 
  2242 ;;  hour1           1   20[BANK0 ] unsigned char 
  2243 ;;  min1            1   19[BANK0 ] unsigned char 
  2244 ;;  sec1            1   18[BANK0 ] unsigned char 
  2245 ;;  year10          1   16[BANK0 ] unsigned char 
  2246 ;;  month10         1   15[BANK0 ] unsigned char 
  2247 ;;  date10          1   14[BANK0 ] unsigned char 
  2248 ;;  hour10          1   13[BANK0 ] unsigned char 
  2249 ;;  min10           1   12[BANK0 ] unsigned char 
  2250 ;;  sec10           1   11[BANK0 ] unsigned char 
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      void 
  2253 ;; Registers used:
  2254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2260 ;;      Params:         0       5       0       0       0
  2261 ;;      Locals:         0      13       0       0       0
  2262 ;;      Temps:          0       2       0       0       0
  2263 ;;      Totals:         0      20       0       0       0
  2264 ;;Total ram usage:       20 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    4
  2267 ;; This function calls:
  2268 ;;		_ReadSPI
  2269 ;;		_WriteSPI
  2270 ;;		___bmul
  2271 ;; This function is called by:
  2272 ;;		_saveDataToFlash
  2273 ;; This function uses a non-reentrant model
  2274 ;;
  2275                           
  2276                           
  2277                           ;psect for function _ReadClock
  2278  046D                     _ReadClock:	
  2279                           
  2280                           ;incstack = 0
  2281                           ; Regs used in _ReadClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2282                           ;ReadClock@seconds stored from wreg
  2283  046D  1283               	bcf	3,5	;RP0=0, select bank0
  2284  046E  1303               	bcf	3,6	;RP1=0, select bank0
  2285  046F  00B1               	movwf	ReadClock@seconds
  2286                           
  2287                           ;MCP79510.c: 51: unsigned char sec10, min10, hour10, date10, month10, year10, sec1, min1
      +                          , hour1, date1, month1, year1;
  2288                           ;MCP79510.c: 53: RD4 = 0;
  2289  0470  1208               	bcf	8,4	;volatile
  2290                           
  2291                           ;MCP79510.c: 55: WriteSPI(0x13);
  2292  0471  3013               	movlw	19
  2293  0472  160A  118A  2628  120A  118A  	fcall	_WriteSPI
  2294                           
  2295                           ;MCP79510.c: 56: WriteSPI(0x01);
  2296  0477  3001               	movlw	1
  2297  0478  160A  118A  2628  120A  118A  	fcall	_WriteSPI
  2298                           
  2299                           ;MCP79510.c: 58: sec1 = ReadSPI() & 0x7F;
  2300  047D  160A  118A  25ED  120A  118A  	fcall	_ReadSPI
  2301  0482  397F               	andlw	127
  2302  0483  1283               	bcf	3,5	;RP0=0, select bank0
  2303  0484  1303               	bcf	3,6	;RP1=0, select bank0
  2304  0485  00A9               	movwf	??_ReadClock
  2305  0486  0829               	movf	??_ReadClock,w
  2306  0487  00B2               	movwf	ReadClock@sec1
  2307                           
  2308                           ;MCP79510.c: 59: min1 = ReadSPI() & 0x7F;
  2309  0488  160A  118A  25ED  120A  118A  	fcall	_ReadSPI
  2310  048D  397F               	andlw	127
  2311  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2312  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2313  0490  00A9               	movwf	??_ReadClock
  2314  0491  0829               	movf	??_ReadClock,w
  2315  0492  00B3               	movwf	ReadClock@min1
  2316                           
  2317                           ;MCP79510.c: 60: hour1 = ReadSPI() & 0x3F;
  2318  0493  160A  118A  25ED  120A  118A  	fcall	_ReadSPI
  2319  0498  393F               	andlw	63
  2320  0499  1283               	bcf	3,5	;RP0=0, select bank0
  2321  049A  1303               	bcf	3,6	;RP1=0, select bank0
  2322  049B  00A9               	movwf	??_ReadClock
  2323  049C  0829               	movf	??_ReadClock,w
  2324  049D  00B4               	movwf	ReadClock@hour1
  2325                           
  2326                           ;MCP79510.c: 61: date1 = ReadSPI();
  2327  049E  160A  118A  25ED  120A  118A  	fcall	_ReadSPI
  2328  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  2329  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  2330  04A5  00A9               	movwf	??_ReadClock
  2331  04A6  0829               	movf	??_ReadClock,w
  2332  04A7  00B7               	movwf	ReadClock@date1
  2333                           
  2334                           ;MCP79510.c: 62: date1 = ReadSPI() & 0x3F;
  2335  04A8  160A  118A  25ED  120A  118A  	fcall	_ReadSPI
  2336  04AD  393F               	andlw	63
  2337  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  2338  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  2339  04B0  00A9               	movwf	??_ReadClock
  2340  04B1  0829               	movf	??_ReadClock,w
  2341  04B2  00B7               	movwf	ReadClock@date1
  2342                           
  2343                           ;MCP79510.c: 63: month1 = ReadSPI() & 0x1F;
  2344  04B3  160A  118A  25ED  120A  118A  	fcall	_ReadSPI
  2345  04B8  391F               	andlw	31
  2346  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2347  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2348  04BB  00A9               	movwf	??_ReadClock
  2349  04BC  0829               	movf	??_ReadClock,w
  2350  04BD  00B5               	movwf	ReadClock@month1
  2351                           
  2352                           ;MCP79510.c: 64: year1 = ReadSPI();
  2353  04BE  160A  118A  25ED  120A  118A  	fcall	_ReadSPI
  2354  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  2355  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  2356  04C5  00A9               	movwf	??_ReadClock
  2357  04C6  0829               	movf	??_ReadClock,w
  2358  04C7  00B6               	movwf	ReadClock@year1
  2359                           
  2360                           ;MCP79510.c: 66: RD4 = 1;
  2361  04C8  1608               	bsf	8,4	;volatile
  2362                           
  2363                           ;MCP79510.c: 69: sec10 = (sec1 & 0x70) >> 4;
  2364  04C9  0832               	movf	ReadClock@sec1,w
  2365  04CA  00A9               	movwf	??_ReadClock
  2366  04CB  3004               	movlw	4
  2367  04CC                     u1975:	
  2368  04CC  1003               	clrc
  2369  04CD  0CA9               	rrf	??_ReadClock,f
  2370  04CE  3EFF               	addlw	-1
  2371  04CF  1D03               	skipz
  2372  04D0  2CCC               	goto	u1975
  2373  04D1  0829               	movf	??_ReadClock,w
  2374  04D2  3907               	andlw	7
  2375  04D3  00AA               	movwf	??_ReadClock+1
  2376  04D4  082A               	movf	??_ReadClock+1,w
  2377  04D5  00AB               	movwf	ReadClock@sec10
  2378                           
  2379                           ;MCP79510.c: 70: sec1 = sec1 & 0x0F;
  2380  04D6  0832               	movf	ReadClock@sec1,w
  2381  04D7  390F               	andlw	15
  2382  04D8  00A9               	movwf	??_ReadClock
  2383  04D9  0829               	movf	??_ReadClock,w
  2384  04DA  00B2               	movwf	ReadClock@sec1
  2385                           
  2386                           ;MCP79510.c: 71: *seconds = sec1 + sec10 * 10;
  2387  04DB  300A               	movlw	10
  2388  04DC  00A9               	movwf	??_ReadClock
  2389  04DD  0829               	movf	??_ReadClock,w
  2390  04DE  00A0               	movwf	___bmul@multiplicand
  2391  04DF  082B               	movf	ReadClock@sec10,w
  2392  04E0  160A  118A  266A  120A  118A  	fcall	___bmul
  2393  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  2394  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  2395  04E7  0732               	addwf	ReadClock@sec1,w
  2396  04E8  00AA               	movwf	??_ReadClock+1
  2397  04E9  0831               	movf	ReadClock@seconds,w
  2398  04EA  0084               	movwf	4
  2399  04EB  082A               	movf	??_ReadClock+1,w
  2400  04EC  1383               	bcf	3,7	;select IRP bank0
  2401  04ED  0080               	movwf	0
  2402                           
  2403                           ;MCP79510.c: 73: min10 = (min1 & 0x70) >> 4;
  2404  04EE  0833               	movf	ReadClock@min1,w
  2405  04EF  00A9               	movwf	??_ReadClock
  2406  04F0  3004               	movlw	4
  2407  04F1                     u1985:	
  2408  04F1  1003               	clrc
  2409  04F2  0CA9               	rrf	??_ReadClock,f
  2410  04F3  3EFF               	addlw	-1
  2411  04F4  1D03               	skipz
  2412  04F5  2CF1               	goto	u1985
  2413  04F6  0829               	movf	??_ReadClock,w
  2414  04F7  3907               	andlw	7
  2415  04F8  00AA               	movwf	??_ReadClock+1
  2416  04F9  082A               	movf	??_ReadClock+1,w
  2417  04FA  00AC               	movwf	ReadClock@min10
  2418                           
  2419                           ;MCP79510.c: 74: min1 = min1 & 0x0F;
  2420  04FB  0833               	movf	ReadClock@min1,w
  2421  04FC  390F               	andlw	15
  2422  04FD  00A9               	movwf	??_ReadClock
  2423  04FE  0829               	movf	??_ReadClock,w
  2424  04FF  00B3               	movwf	ReadClock@min1
  2425                           
  2426                           ;MCP79510.c: 75: *minutes = min1 + min10 * 10;
  2427  0500  300A               	movlw	10
  2428  0501  00A9               	movwf	??_ReadClock
  2429  0502  0829               	movf	??_ReadClock,w
  2430  0503  00A0               	movwf	___bmul@multiplicand
  2431  0504  082C               	movf	ReadClock@min10,w
  2432  0505  160A  118A  266A  120A  118A  	fcall	___bmul
  2433  050A  1283               	bcf	3,5	;RP0=0, select bank0
  2434  050B  1303               	bcf	3,6	;RP1=0, select bank0
  2435  050C  0733               	addwf	ReadClock@min1,w
  2436  050D  00AA               	movwf	??_ReadClock+1
  2437  050E  0824               	movf	ReadClock@minutes,w
  2438  050F  0084               	movwf	4
  2439  0510  082A               	movf	??_ReadClock+1,w
  2440  0511  1383               	bcf	3,7	;select IRP bank0
  2441  0512  0080               	movwf	0
  2442                           
  2443                           ;MCP79510.c: 77: hour10 = (hour1 & 0x30) >> 4;
  2444  0513  0834               	movf	ReadClock@hour1,w
  2445  0514  00A9               	movwf	??_ReadClock
  2446  0515  3004               	movlw	4
  2447  0516                     u1995:	
  2448  0516  1003               	clrc
  2449  0517  0CA9               	rrf	??_ReadClock,f
  2450  0518  3EFF               	addlw	-1
  2451  0519  1D03               	skipz
  2452  051A  2D16               	goto	u1995
  2453  051B  0829               	movf	??_ReadClock,w
  2454  051C  3903               	andlw	3
  2455  051D  00AA               	movwf	??_ReadClock+1
  2456  051E  082A               	movf	??_ReadClock+1,w
  2457  051F  00AD               	movwf	ReadClock@hour10
  2458                           
  2459                           ;MCP79510.c: 78: hour1 = hour1 & 0x0F;
  2460  0520  0834               	movf	ReadClock@hour1,w
  2461  0521  390F               	andlw	15
  2462  0522  00A9               	movwf	??_ReadClock
  2463  0523  0829               	movf	??_ReadClock,w
  2464  0524  00B4               	movwf	ReadClock@hour1
  2465                           
  2466                           ;MCP79510.c: 79: *hour = hour1 + hour10 * 10;
  2467  0525  300A               	movlw	10
  2468  0526  00A9               	movwf	??_ReadClock
  2469  0527  0829               	movf	??_ReadClock,w
  2470  0528  00A0               	movwf	___bmul@multiplicand
  2471  0529  082D               	movf	ReadClock@hour10,w
  2472  052A  160A  118A  266A  120A  118A  	fcall	___bmul
  2473  052F  1283               	bcf	3,5	;RP0=0, select bank0
  2474  0530  1303               	bcf	3,6	;RP1=0, select bank0
  2475  0531  0734               	addwf	ReadClock@hour1,w
  2476  0532  00AA               	movwf	??_ReadClock+1
  2477  0533  0825               	movf	ReadClock@hour,w
  2478  0534  0084               	movwf	4
  2479  0535  082A               	movf	??_ReadClock+1,w
  2480  0536  1383               	bcf	3,7	;select IRP bank0
  2481  0537  0080               	movwf	0
  2482                           
  2483                           ;MCP79510.c: 81: date10 = (date1 & 0x30) >> 4;
  2484  0538  0837               	movf	ReadClock@date1,w
  2485  0539  00A9               	movwf	??_ReadClock
  2486  053A  3004               	movlw	4
  2487  053B                     u2005:	
  2488  053B  1003               	clrc
  2489  053C  0CA9               	rrf	??_ReadClock,f
  2490  053D  3EFF               	addlw	-1
  2491  053E  1D03               	skipz
  2492  053F  2D3B               	goto	u2005
  2493  0540  0829               	movf	??_ReadClock,w
  2494  0541  3903               	andlw	3
  2495  0542  00AA               	movwf	??_ReadClock+1
  2496  0543  082A               	movf	??_ReadClock+1,w
  2497  0544  00AE               	movwf	ReadClock@date10
  2498                           
  2499                           ;MCP79510.c: 82: date1 = date1 & 0x0F;
  2500  0545  0837               	movf	ReadClock@date1,w
  2501  0546  390F               	andlw	15
  2502  0547  00A9               	movwf	??_ReadClock
  2503  0548  0829               	movf	??_ReadClock,w
  2504  0549  00B7               	movwf	ReadClock@date1
  2505                           
  2506                           ;MCP79510.c: 83: *date = date1 + date10 * 10;
  2507  054A  300A               	movlw	10
  2508  054B  00A9               	movwf	??_ReadClock
  2509  054C  0829               	movf	??_ReadClock,w
  2510  054D  00A0               	movwf	___bmul@multiplicand
  2511  054E  082E               	movf	ReadClock@date10,w
  2512  054F  160A  118A  266A  120A  118A  	fcall	___bmul
  2513  0554  1283               	bcf	3,5	;RP0=0, select bank0
  2514  0555  1303               	bcf	3,6	;RP1=0, select bank0
  2515  0556  0737               	addwf	ReadClock@date1,w
  2516  0557  00AA               	movwf	??_ReadClock+1
  2517  0558  0826               	movf	ReadClock@date,w
  2518  0559  0084               	movwf	4
  2519  055A  082A               	movf	??_ReadClock+1,w
  2520  055B  1383               	bcf	3,7	;select IRP bank0
  2521  055C  0080               	movwf	0
  2522                           
  2523                           ;MCP79510.c: 85: month10 = (month1 & 0x10) >> 4;
  2524  055D  0835               	movf	ReadClock@month1,w
  2525  055E  00A9               	movwf	??_ReadClock
  2526  055F  3004               	movlw	4
  2527  0560                     u2015:	
  2528  0560  1003               	clrc
  2529  0561  0CA9               	rrf	??_ReadClock,f
  2530  0562  3EFF               	addlw	-1
  2531  0563  1D03               	skipz
  2532  0564  2D60               	goto	u2015
  2533  0565  0829               	movf	??_ReadClock,w
  2534  0566  3901               	andlw	1
  2535  0567  00AA               	movwf	??_ReadClock+1
  2536  0568  082A               	movf	??_ReadClock+1,w
  2537  0569  00AF               	movwf	ReadClock@month10
  2538                           
  2539                           ;MCP79510.c: 86: month1 = month1 & 0x0F;
  2540  056A  0835               	movf	ReadClock@month1,w
  2541  056B  390F               	andlw	15
  2542  056C  00A9               	movwf	??_ReadClock
  2543  056D  0829               	movf	??_ReadClock,w
  2544  056E  00B5               	movwf	ReadClock@month1
  2545                           
  2546                           ;MCP79510.c: 87: *month = month1 + month10 * 10;
  2547  056F  300A               	movlw	10
  2548  0570  00A9               	movwf	??_ReadClock
  2549  0571  0829               	movf	??_ReadClock,w
  2550  0572  00A0               	movwf	___bmul@multiplicand
  2551  0573  082F               	movf	ReadClock@month10,w
  2552  0574  160A  118A  266A  120A  118A  	fcall	___bmul
  2553  0579  1283               	bcf	3,5	;RP0=0, select bank0
  2554  057A  1303               	bcf	3,6	;RP1=0, select bank0
  2555  057B  0735               	addwf	ReadClock@month1,w
  2556  057C  00AA               	movwf	??_ReadClock+1
  2557  057D  0827               	movf	ReadClock@month,w
  2558  057E  0084               	movwf	4
  2559  057F  082A               	movf	??_ReadClock+1,w
  2560  0580  1383               	bcf	3,7	;select IRP bank0
  2561  0581  0080               	movwf	0
  2562                           
  2563                           ;MCP79510.c: 89: year10 = (year1 & 0xF0) >> 4;
  2564  0582  0836               	movf	ReadClock@year1,w
  2565  0583  00A9               	movwf	??_ReadClock
  2566  0584  3004               	movlw	4
  2567  0585                     u2025:	
  2568  0585  1003               	clrc
  2569  0586  0CA9               	rrf	??_ReadClock,f
  2570  0587  3EFF               	addlw	-1
  2571  0588  1D03               	skipz
  2572  0589  2D85               	goto	u2025
  2573  058A  0829               	movf	??_ReadClock,w
  2574  058B  390F               	andlw	15
  2575  058C  00AA               	movwf	??_ReadClock+1
  2576  058D  082A               	movf	??_ReadClock+1,w
  2577  058E  00B0               	movwf	ReadClock@year10
  2578                           
  2579                           ;MCP79510.c: 90: year1 = year1 & 0x0F;
  2580  058F  0836               	movf	ReadClock@year1,w
  2581  0590  390F               	andlw	15
  2582  0591  00A9               	movwf	??_ReadClock
  2583  0592  0829               	movf	??_ReadClock,w
  2584  0593  00B6               	movwf	ReadClock@year1
  2585                           
  2586                           ;MCP79510.c: 91: *year = year1 + year10 * 10;
  2587  0594  300A               	movlw	10
  2588  0595  00A9               	movwf	??_ReadClock
  2589  0596  0829               	movf	??_ReadClock,w
  2590  0597  00A0               	movwf	___bmul@multiplicand
  2591  0598  0830               	movf	ReadClock@year10,w
  2592  0599  160A  118A  266A   	fcall	___bmul
  2593  059C  1283               	bcf	3,5	;RP0=0, select bank0
  2594  059D  1303               	bcf	3,6	;RP1=0, select bank0
  2595  059E  0736               	addwf	ReadClock@year1,w
  2596  059F  00AA               	movwf	??_ReadClock+1
  2597  05A0  0828               	movf	ReadClock@year,w
  2598  05A1  0084               	movwf	4
  2599  05A2  082A               	movf	??_ReadClock+1,w
  2600  05A3  1383               	bcf	3,7	;select IRP bank0
  2601  05A4  0080               	movwf	0
  2602  05A5  0008               	return
  2603  05A6                     __end_of_ReadClock:	
  2604                           
  2605                           	psect	text3
  2606  166A                     __ptext3:	
  2607 ;; *************** function ___bmul *****************
  2608 ;; Defined at:
  2609 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  multiplier      1    wreg     unsigned char 
  2612 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2615 ;;  product         1    2[BANK0 ] unsigned char 
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      unsigned char 
  2618 ;; Registers used:
  2619 ;;		wreg, status,2, status,0
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2625 ;;      Params:         0       1       0       0       0
  2626 ;;      Locals:         0       2       0       0       0
  2627 ;;      Temps:          0       1       0       0       0
  2628 ;;      Totals:         0       4       0       0       0
  2629 ;;Total ram usage:        4 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    2
  2632 ;; This function calls:
  2633 ;;		Nothing
  2634 ;; This function is called by:
  2635 ;;		_ReadClock
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           
  2640                           ;psect for function ___bmul
  2641  166A                     ___bmul:	
  2642                           
  2643                           ;incstack = 0
  2644                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2645                           ;___bmul@multiplier stored from wreg
  2646  166A  1283               	bcf	3,5	;RP0=0, select bank0
  2647  166B  1303               	bcf	3,6	;RP1=0, select bank0
  2648  166C  00A3               	movwf	___bmul@multiplier
  2649  166D  01A2               	clrf	___bmul@product
  2650  166E                     l2701:	
  2651  166E  1C23               	btfss	___bmul@multiplier,0
  2652  166F  2E74               	goto	l2705
  2653  1670  0820               	movf	___bmul@multiplicand,w
  2654  1671  00A1               	movwf	??___bmul
  2655  1672  0821               	movf	??___bmul,w
  2656  1673  07A2               	addwf	___bmul@product,f
  2657  1674                     l2705:	
  2658  1674  1003               	clrc
  2659  1675  0DA0               	rlf	___bmul@multiplicand,f
  2660  1676  1003               	clrc
  2661  1677  0CA3               	rrf	___bmul@multiplier,f
  2662  1678  0823               	movf	___bmul@multiplier,w
  2663  1679  1D03               	btfss	3,2
  2664  167A  2E6E               	goto	l2701
  2665  167B  0822               	movf	___bmul@product,w
  2666  167C  0008               	return
  2667  167D                     __end_of___bmul:	
  2668                           
  2669                           	psect	text4
  2670  09B5                     __ptext4:	
  2671 ;; *************** function _IncreaseMemoryAdress *****************
  2672 ;; Defined at:
  2673 ;;		line 1013 in file "functions.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  var3            1    6[BANK0 ] unsigned char 
  2678 ;;  var2            1    5[BANK0 ] unsigned char 
  2679 ;;  var1            1    4[BANK0 ] unsigned char 
  2680 ;; Return value:  Size  Location     Type
  2681 ;;                  1    wreg      void 
  2682 ;; Registers used:
  2683 ;;		wreg, status,2, status,0, pclath, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2689 ;;      Params:         0       0       0       0       0
  2690 ;;      Locals:         0       3       0       0       0
  2691 ;;      Temps:          0       1       0       0       0
  2692 ;;      Totals:         0       4       0       0       0
  2693 ;;Total ram usage:        4 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    3
  2696 ;; This function calls:
  2697 ;;		_eeprom_read
  2698 ;;		_eeprom_write
  2699 ;; This function is called by:
  2700 ;;		_saveDataToFlash
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           
  2705                           ;psect for function _IncreaseMemoryAdress
  2706  09B5                     _IncreaseMemoryAdress:	
  2707                           
  2708                           ;functions.c: 1015: unsigned char var1, var2, var3;
  2709                           ;functions.c: 1016: var1 = eeprom_read(3);
  2710                           
  2711                           ;incstack = 0
  2712                           ; Regs used in _IncreaseMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  2713  09B5  3003               	movlw	3
  2714  09B6  120A  158A  203D  120A  158A  	fcall	_eeprom_read
  2715  09BB  1283               	bcf	3,5	;RP0=0, select bank0
  2716  09BC  1303               	bcf	3,6	;RP1=0, select bank0
  2717  09BD  00A3               	movwf	??_IncreaseMemoryAdress
  2718  09BE  0823               	movf	??_IncreaseMemoryAdress,w
  2719  09BF  00A4               	movwf	IncreaseMemoryAdress@var1
  2720                           
  2721                           ;functions.c: 1017: var1++;
  2722  09C0  3001               	movlw	1
  2723  09C1  00A3               	movwf	??_IncreaseMemoryAdress
  2724  09C2  0823               	movf	??_IncreaseMemoryAdress,w
  2725  09C3  07A4               	addwf	IncreaseMemoryAdress@var1,f
  2726                           
  2727                           ;functions.c: 1018: eeprom_write(3,var1);
  2728  09C4  0824               	movf	IncreaseMemoryAdress@var1,w
  2729  09C5  00A3               	movwf	??_IncreaseMemoryAdress
  2730  09C6  0823               	movf	??_IncreaseMemoryAdress,w
  2731  09C7  00A0               	movwf	eeprom_write@value
  2732  09C8  3003               	movlw	3
  2733  09C9  120A  158A  208D  120A  158A  	fcall	_eeprom_write
  2734                           
  2735                           ;functions.c: 1019: if(var1 == 0)
  2736  09CE  1283               	bcf	3,5	;RP0=0, select bank0
  2737  09CF  1303               	bcf	3,6	;RP1=0, select bank0
  2738  09D0  0824               	movf	IncreaseMemoryAdress@var1,w
  2739  09D1  1D03               	btfss	3,2
  2740  09D2  0008               	return
  2741                           
  2742                           ;functions.c: 1020: {
  2743                           ;functions.c: 1021: var2 = eeprom_read(2);
  2744  09D3  3002               	movlw	2
  2745  09D4  120A  158A  203D  120A  158A  	fcall	_eeprom_read
  2746  09D9  1283               	bcf	3,5	;RP0=0, select bank0
  2747  09DA  1303               	bcf	3,6	;RP1=0, select bank0
  2748  09DB  00A3               	movwf	??_IncreaseMemoryAdress
  2749  09DC  0823               	movf	??_IncreaseMemoryAdress,w
  2750  09DD  00A5               	movwf	IncreaseMemoryAdress@var2
  2751                           
  2752                           ;functions.c: 1022: var2++;
  2753  09DE  3001               	movlw	1
  2754  09DF  00A3               	movwf	??_IncreaseMemoryAdress
  2755  09E0  0823               	movf	??_IncreaseMemoryAdress,w
  2756  09E1  07A5               	addwf	IncreaseMemoryAdress@var2,f
  2757                           
  2758                           ;functions.c: 1023: eeprom_write(2,var2);
  2759  09E2  0825               	movf	IncreaseMemoryAdress@var2,w
  2760  09E3  00A3               	movwf	??_IncreaseMemoryAdress
  2761  09E4  0823               	movf	??_IncreaseMemoryAdress,w
  2762  09E5  00A0               	movwf	eeprom_write@value
  2763  09E6  3002               	movlw	2
  2764  09E7  120A  158A  208D  120A  158A  	fcall	_eeprom_write
  2765                           
  2766                           ;functions.c: 1024: if(var2 == 0)
  2767  09EC  1283               	bcf	3,5	;RP0=0, select bank0
  2768  09ED  1303               	bcf	3,6	;RP1=0, select bank0
  2769  09EE  0825               	movf	IncreaseMemoryAdress@var2,w
  2770  09EF  1D03               	btfss	3,2
  2771  09F0  0008               	return
  2772                           
  2773                           ;functions.c: 1025: {
  2774                           ;functions.c: 1026: var3 = eeprom_read(1);
  2775  09F1  3001               	movlw	1
  2776  09F2  120A  158A  203D  120A  158A  	fcall	_eeprom_read
  2777  09F7  1283               	bcf	3,5	;RP0=0, select bank0
  2778  09F8  1303               	bcf	3,6	;RP1=0, select bank0
  2779  09F9  00A3               	movwf	??_IncreaseMemoryAdress
  2780  09FA  0823               	movf	??_IncreaseMemoryAdress,w
  2781  09FB  00A6               	movwf	IncreaseMemoryAdress@var3
  2782                           
  2783                           ;functions.c: 1027: var3++;
  2784  09FC  3001               	movlw	1
  2785  09FD  00A3               	movwf	??_IncreaseMemoryAdress
  2786  09FE  0823               	movf	??_IncreaseMemoryAdress,w
  2787  09FF  07A6               	addwf	IncreaseMemoryAdress@var3,f
  2788                           
  2789                           ;functions.c: 1028: if(var3 > 0x1F)
  2790  0A00  3020               	movlw	32
  2791  0A01  0226               	subwf	IncreaseMemoryAdress@var3,w
  2792  0A02  1C03               	skipc
  2793  0A03  2A08               	goto	l2899
  2794                           
  2795                           ;functions.c: 1029: var3 = 0x1F;
  2796  0A04  301F               	movlw	31
  2797  0A05  00A3               	movwf	??_IncreaseMemoryAdress
  2798  0A06  0823               	movf	??_IncreaseMemoryAdress,w
  2799  0A07  00A6               	movwf	IncreaseMemoryAdress@var3
  2800  0A08                     l2899:	
  2801                           
  2802                           ;functions.c: 1031: eeprom_write(1, var3);
  2803  0A08  0826               	movf	IncreaseMemoryAdress@var3,w
  2804  0A09  00A3               	movwf	??_IncreaseMemoryAdress
  2805  0A0A  0823               	movf	??_IncreaseMemoryAdress,w
  2806  0A0B  00A0               	movwf	eeprom_write@value
  2807  0A0C  3001               	movlw	1
  2808  0A0D  120A  158A  208D   	fcall	_eeprom_write
  2809  0A10  0008               	return
  2810  0A11                     __end_of_IncreaseMemoryAdress:	
  2811                           
  2812                           	psect	text5
  2813  0A11                     __ptext5:	
  2814 ;; *************** function _TransiverToReceive *****************
  2815 ;; Defined at:
  2816 ;;		line 16 in file "functions.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;		None
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;		None
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2830 ;;      Params:         0       0       0       0       0
  2831 ;;      Locals:         0       0       0       0       0
  2832 ;;      Temps:          0       2       0       0       0
  2833 ;;      Totals:         0       2       0       0       0
  2834 ;;Total ram usage:        2 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    7
  2837 ;; This function calls:
  2838 ;;		_FindChannel
  2839 ;;		_RegisterRead
  2840 ;;		_RegisterSet
  2841 ;;		_SetRFMode
  2842 ;;		_timerFunction
  2843 ;; This function is called by:
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _TransiverToReceive
  2850  0A11                     _TransiverToReceive:	
  2851                           
  2852                           ;functions.c: 18: timerFunction(2, 5);
  2853                           
  2854                           ;incstack = 0
  2855                           ; Regs used in _TransiverToReceive: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2856  0A11  3002               	movlw	2
  2857  0A12  1283               	bcf	3,5	;RP0=0, select bank0
  2858  0A13  1303               	bcf	3,6	;RP1=0, select bank0
  2859  0A14  00A0               	movwf	timerFunction@intTimerNumber
  2860  0A15  3000               	movlw	0
  2861  0A16  00A1               	movwf	timerFunction@intTimerNumber+1
  2862  0A17  3005               	movlw	5
  2863  0A18  00A2               	movwf	timerFunction@intSetSeconds
  2864  0A19  3000               	movlw	0
  2865  0A1A  00A3               	movwf	timerFunction@intSetSeconds+1
  2866  0A1B  160A  118A  2646  120A  158A  	fcall	_timerFunction
  2867                           
  2868                           ;functions.c: 22: SetRFMode(0x20);
  2869  0A20  3020               	movlw	32
  2870  0A21  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  2871                           
  2872                           ;functions.c: 23: _delay((unsigned long)((10)*(4000000/4000.0)));
  2873  0A26  300D               	movlw	13
  2874  0A27  1283               	bcf	3,5	;RP0=0, select bank0
  2875  0A28  1303               	bcf	3,6	;RP1=0, select bank0
  2876  0A29  00B6               	movwf	??_TransiverToReceive+1
  2877  0A2A  30FB               	movlw	251
  2878  0A2B  00B5               	movwf	??_TransiverToReceive
  2879  0A2C                     u2557:	
  2880  0A2C  0BB5               	decfsz	??_TransiverToReceive,f
  2881  0A2D  2A2C               	goto	u2557
  2882  0A2E  0BB6               	decfsz	??_TransiverToReceive+1,f
  2883  0A2F  2A2C               	goto	u2557
  2884  0A30  2A31               	nop2
  2885                           
  2886                           ;functions.c: 24: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  2887  0A31  300E               	movlw	14
  2888  0A32  160A  118A  26F4  120A  158A  	fcall	_RegisterRead
  2889  0A37  3802               	iorlw	2
  2890  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  2892  0A3A  00B5               	movwf	??_TransiverToReceive
  2893  0A3B  0835               	movf	??_TransiverToReceive,w
  2894  0A3C  00A7               	movwf	RegisterSet@value
  2895  0A3D  300E               	movlw	14
  2896  0A3E  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  2897                           
  2898                           ;functions.c: 25: SetRFMode(0x40);
  2899  0A43  3040               	movlw	64
  2900  0A44  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  2901  0A49                     l3129:	
  2902                           ;functions.c: 26: while((RegisterRead(0x0E) & 0b00000010) == 0)
  2903                           
  2904  0A49  300E               	movlw	14
  2905  0A4A  160A  118A  26F4  120A  158A  	fcall	_RegisterRead
  2906  0A4F  3902               	andlw	2
  2907  0A50  1D03               	btfss	3,2
  2908  0A51  2A5C               	goto	l3131
  2909                           
  2910                           ;functions.c: 27: {
  2911                           ;functions.c: 28: if(bTimerComplete[2])
  2912  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0A54  0858               	movf	_bTimerComplete+2,w
  2915  0A55  1903               	btfsc	3,2
  2916  0A56  2A49               	goto	l3129
  2917                           
  2918                           ;functions.c: 29: {
  2919                           ;functions.c: 30: FindChannel();
  2920  0A57  120A  118A  26B6  120A  158A  	fcall	_FindChannel
  2921  0A5C                     l3131:	
  2922                           ;functions.c: 31: break;
  2923                           
  2924                           
  2925                           ;functions.c: 32: }
  2926                           ;functions.c: 33: }
  2927                           ;functions.c: 35: SetRFMode(0x60);
  2928  0A5C  3060               	movlw	96
  2929  0A5D  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  2930                           
  2931                           ;functions.c: 36: _delay((unsigned long)((500)*(4000000/4000000.0)));
  2932  0A62  30A6               	movlw	166
  2933  0A63  1283               	bcf	3,5	;RP0=0, select bank0
  2934  0A64  1303               	bcf	3,6	;RP1=0, select bank0
  2935  0A65  00B5               	movwf	??_TransiverToReceive
  2936  0A66                     u2567:	
  2937  0A66  0BB5               	decfsz	??_TransiverToReceive,f
  2938  0A67  2A66               	goto	u2567
  2939  0A68  0000               	nop
  2940                           
  2941                           ;functions.c: 37: bTransiverModeReceive = 1;
  2942  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  2943  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  2944  0A6B  01EA               	clrf	_bTransiverModeReceive
  2945  0A6C  0AEA               	incf	_bTransiverModeReceive,f
  2946  0A6D  0008               	return
  2947  0A6E                     __end_of_TransiverToReceive:	
  2948                           
  2949                           	psect	text6
  2950  0AD2                     __ptext6:	
  2951 ;; *************** function _TransiverReadFIFO *****************
  2952 ;; Defined at:
  2953 ;;		line 42 in file "functions.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;		None
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  j               2   32[BANK1 ] int 
  2958 ;;  ReceivedStri   30    0[BANK1 ] unsigned char [30]
  2959 ;;  i               2   30[BANK1 ] int 
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  1    wreg      void 
  2962 ;; Registers used:
  2963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2969 ;;      Params:         0       0       0       0       0
  2970 ;;      Locals:         0       0      34       0       0
  2971 ;;      Temps:          0       2       0       0       0
  2972 ;;      Totals:         0       2      34       0       0
  2973 ;;Total ram usage:       36 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:   10
  2976 ;; This function calls:
  2977 ;;		_ReadFIFO
  2978 ;;		_ReceivedPacketHandler
  2979 ;;		_SetRFMode
  2980 ;;		_timerFunction
  2981 ;; This function is called by:
  2982 ;;		_main
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           
  2987                           ;psect for function _TransiverReadFIFO
  2988  0AD2                     _TransiverReadFIFO:	
  2989                           
  2990                           ;functions.c: 44: unsigned char ReceivedString[30];
  2991                           ;functions.c: 45: timerFunction(3, 5);
  2992                           
  2993                           ;incstack = 0
  2994 ;; hardware stack exceeded
  2995                           ; Regs used in _TransiverReadFIFO: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2996  0AD2  3003               	movlw	3
  2997  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  2998  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  2999  0AD5  00A0               	movwf	timerFunction@intTimerNumber
  3000  0AD6  3000               	movlw	0
  3001  0AD7  00A1               	movwf	timerFunction@intTimerNumber+1
  3002  0AD8  3005               	movlw	5
  3003  0AD9  00A2               	movwf	timerFunction@intSetSeconds
  3004  0ADA  3000               	movlw	0
  3005  0ADB  00A3               	movwf	timerFunction@intSetSeconds+1
  3006  0ADC  160A  118A  2646  120A  158A  	fcall	_timerFunction
  3007                           
  3008                           ;functions.c: 47: SetRFMode(0x20);
  3009  0AE1  3020               	movlw	32
  3010  0AE2  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  3011                           
  3012                           ;functions.c: 48: bTransiverModeReceive = 0;
  3013  0AE7  1283               	bcf	3,5	;RP0=0, select bank0
  3014  0AE8  1303               	bcf	3,6	;RP1=0, select bank0
  3015  0AE9  01EA               	clrf	_bTransiverModeReceive
  3016                           
  3017                           ;functions.c: 49: int i = 0;
  3018  0AEA  1683               	bsf	3,5	;RP0=1, select bank1
  3019  0AEB  1303               	bcf	3,6	;RP1=0, select bank1
  3020  0AEC  01BE               	clrf	TransiverReadFIFO@i^(0+128)
  3021  0AED  01BF               	clrf	(TransiverReadFIFO@i+1)^(0+128)
  3022                           
  3023                           ;functions.c: 50: for (int j = 0; j < 30; ++j)
  3024  0AEE  01C0               	clrf	TransiverReadFIFO@j^(0+128)
  3025  0AEF  01C1               	clrf	(TransiverReadFIFO@j+1)^(0+128)
  3026  0AF0                     L1:	
  3027  0AF0  0841               	movf	(TransiverReadFIFO@j+1)^(0+128),w
  3028  0AF1  3A80               	xorlw	128
  3029  0AF2  00FF               	movwf	127
  3030  0AF3  3080               	movlw	128
  3031  0AF4  027F               	subwf	127,w
  3032  0AF5  1D03               	skipz
  3033  0AF6  2AF9               	goto	u2175
  3034  0AF7  301E               	movlw	30
  3035  0AF8  0240               	subwf	TransiverReadFIFO@j^(0+128),w
  3036  0AF9                     u2175:	
  3037  0AF9  1803               	btfsc	3,0
  3038  0AFA  2B23               	goto	l3159
  3039                           
  3040                           ;functions.c: 51: {
  3041                           ;functions.c: 52: ReceivedString[j] = 0;
  3042  0AFB  1683               	bsf	3,5	;RP0=1, select bank1
  3043  0AFC  1303               	bcf	3,6	;RP1=0, select bank1
  3044  0AFD  0840               	movf	TransiverReadFIFO@j^(0+128),w
  3045  0AFE  3EA0               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3046  0AFF  0084               	movwf	4
  3047  0B00  1383               	bcf	3,7	;select IRP bank1
  3048  0B01  0180               	clrf	0
  3049  0B02  3001               	movlw	1
  3050  0B03  07C0               	addwf	TransiverReadFIFO@j^(0+128),f
  3051  0B04  1803               	skipnc
  3052  0B05  0AC1               	incf	(TransiverReadFIFO@j+1)^(0+128),f
  3053  0B06  3000               	movlw	0
  3054  0B07  07C1               	addwf	(TransiverReadFIFO@j+1)^(0+128),f
  3055  0B08  2AF0               	goto	L1
  3056  0B09                     l3155:	
  3057                           ;functions.c: 53: }
  3058                           ;functions.c: 54: while((RB3)&&(!bTimerComplete[3]))
  3059                           
  3060                           
  3061                           ;functions.c: 55: {
  3062                           ;functions.c: 56: ReceivedString[i] = ReadFIFO();
  3063  0B09  120A  118A  27F2  120A  158A  	fcall	_ReadFIFO
  3064  0B0E  1283               	bcf	3,5	;RP0=0, select bank0
  3065  0B0F  1303               	bcf	3,6	;RP1=0, select bank0
  3066  0B10  00D1               	movwf	??_TransiverReadFIFO
  3067  0B11  1683               	bsf	3,5	;RP0=1, select bank1
  3068  0B12  1303               	bcf	3,6	;RP1=0, select bank1
  3069  0B13  083E               	movf	TransiverReadFIFO@i^(0+128),w
  3070  0B14  3EA0               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3071  0B15  0084               	movwf	4
  3072  0B16  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0B17  1303               	bcf	3,6	;RP1=0, select bank0
  3074  0B18  0851               	movf	??_TransiverReadFIFO,w
  3075  0B19  1383               	bcf	3,7	;select IRP bank1
  3076  0B1A  0080               	movwf	0
  3077                           
  3078                           ;functions.c: 57: i++;
  3079  0B1B  3001               	movlw	1
  3080  0B1C  1683               	bsf	3,5	;RP0=1, select bank1
  3081  0B1D  1303               	bcf	3,6	;RP1=0, select bank1
  3082  0B1E  07BE               	addwf	TransiverReadFIFO@i^(0+128),f
  3083  0B1F  1803               	skipnc
  3084  0B20  0ABF               	incf	(TransiverReadFIFO@i+1)^(0+128),f
  3085  0B21  3000               	movlw	0
  3086  0B22  07BF               	addwf	(TransiverReadFIFO@i+1)^(0+128),f
  3087  0B23                     l3159:	
  3088  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0B25  1D86               	btfss	6,3	;volatile
  3091  0B26  2B2A               	goto	l3163
  3092  0B27  0859               	movf	_bTimerComplete+3,w
  3093  0B28  1903               	btfsc	3,2
  3094  0B29  2B09               	goto	l3155
  3095  0B2A                     l3163:	
  3096                           
  3097                           ;functions.c: 58: }
  3098                           ;functions.c: 60: _delay((unsigned long)((10)*(4000000/4000.0)));
  3099  0B2A  300D               	movlw	13
  3100  0B2B  00D2               	movwf	??_TransiverReadFIFO+1
  3101  0B2C  30FB               	movlw	251
  3102  0B2D  00D1               	movwf	??_TransiverReadFIFO
  3103  0B2E                     u2577:	
  3104  0B2E  0BD1               	decfsz	??_TransiverReadFIFO,f
  3105  0B2F  2B2E               	goto	u2577
  3106  0B30  0BD2               	decfsz	??_TransiverReadFIFO+1,f
  3107  0B31  2B2E               	goto	u2577
  3108  0B32  2B33               	nop2
  3109                           
  3110                           ;functions.c: 61: SetRFMode(0x00);
  3111  0B33  3000               	movlw	0
  3112  0B34  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  3113                           
  3114                           ;functions.c: 63: ReceivedPacketHandler(ReceivedString);
  3115  0B39  30A0               	movlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3116  0B3A  120A  118A  2290   	fcall	_ReceivedPacketHandler
  3117  0B3D  0008               	return
  3118  0B3E                     __end_of_TransiverReadFIFO:	
  3119                           
  3120                           	psect	text7
  3121  0290                     __ptext7:	
  3122 ;; *************** function _ReceivedPacketHandler *****************
  3123 ;; Defined at:
  3124 ;;		line 73 in file "functions.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  Data            1    wreg     PTR unsigned char 
  3127 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  Data            1   48[BANK0 ] PTR unsigned char 
  3130 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  1    wreg      void 
  3133 ;; Registers used:
  3134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3140 ;;      Params:         0       0       0       0       0
  3141 ;;      Locals:         0       1       0       0       0
  3142 ;;      Temps:          0       1       0       0       0
  3143 ;;      Totals:         0       2       0       0       0
  3144 ;;Total ram usage:        2 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    9
  3147 ;; This function calls:
  3148 ;;		_AnalogValue
  3149 ;;		_DarknessCheck
  3150 ;;		_DelayDs
  3151 ;;		_OperationMode
  3152 ;;		_ResetMemoryAdress
  3153 ;;		_SendMemoryData
  3154 ;;		_TransmittPacket
  3155 ;;		_eeprom_read
  3156 ;;		_eeprom_write
  3157 ;;		_ram_bulk_erase
  3158 ;;		_read_ram_status
  3159 ;;		_strstr
  3160 ;;		_write_ram_status
  3161 ;; This function is called by:
  3162 ;;		_TransiverReadFIFO
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _ReceivedPacketHandler
  3168  0290                     _ReceivedPacketHandler:	
  3169                           
  3170                           ;incstack = 0
  3171 ;; hardware stack exceeded
  3172                           ; Regs used in _ReceivedPacketHandler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  3173                           ;ReceivedPacketHandler@Data stored from wreg
  3174  0290  1283               	bcf	3,5	;RP0=0, select bank0
  3175  0291  1303               	bcf	3,6	;RP1=0, select bank0
  3176  0292  00D0               	movwf	ReceivedPacketHandler@Data
  3177                           
  3178                           ;functions.c: 77: if((strstr(Data, "N1BLINK")) && (OperationMode() == 6))
  3179  0293  3028               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3180  0294  00CF               	movwf	??_ReceivedPacketHandler
  3181  0295  084F               	movf	??_ReceivedPacketHandler,w
  3182  0296  00AE               	movwf	strstr@s2
  3183  0297  0850               	movf	ReceivedPacketHandler@Data,w
  3184  0298  120A  118A  27AC  120A  118A  	fcall	_strstr
  3185  029D  3A00               	xorlw	0
  3186  029E  1903               	skipnz
  3187  029F  2AA8               	goto	l2733
  3188  02A0  160A  118A  2606  120A  118A  	fcall	_OperationMode
  3189  02A5  3A06               	xorlw	6
  3190  02A6  1903               	btfsc	3,2
  3191  02A7  2ABF               	goto	l2737
  3192  02A8                     l2733:	
  3193                           ;functions.c: 82: }
  3194                           
  3195                           ;functions.c: 81: DelayDs(100);
  3196                           
  3197                           ;functions.c: 80: intBlinkCounter = 0;
  3198                           
  3199                           ;functions.c: 78: {
  3200                           ;functions.c: 79: intBlinkCycle = 1;
  3201                           
  3202                           
  3203                           ;functions.c: 83: else if((strstr(Data, "N2BLINK")) && (OperationMode() == 7))
  3204  02A8  3030               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3205  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  3206  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  3207  02AB  00CF               	movwf	??_ReceivedPacketHandler
  3208  02AC  084F               	movf	??_ReceivedPacketHandler,w
  3209  02AD  00AE               	movwf	strstr@s2
  3210  02AE  0850               	movf	ReceivedPacketHandler@Data,w
  3211  02AF  120A  118A  27AC  120A  118A  	fcall	_strstr
  3212  02B4  3A00               	xorlw	0
  3213  02B5  1903               	skipnz
  3214  02B6  2AD0               	goto	l2743
  3215  02B7  160A  118A  2606  120A  118A  	fcall	_OperationMode
  3216  02BC  3A07               	xorlw	7
  3217  02BD  1D03               	skipz
  3218  02BE  2AD0               	goto	l2743
  3219  02BF                     l2737:	
  3220                           
  3221                           ;functions.c: 84: {
  3222                           ;functions.c: 85: intBlinkCycle = 1;
  3223  02BF  3001               	movlw	1
  3224  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3225  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3226  02C2  00DD               	movwf	_intBlinkCycle
  3227  02C3  3000               	movlw	0
  3228  02C4  00DE               	movwf	_intBlinkCycle+1
  3229                           
  3230                           ;functions.c: 86: intBlinkCounter = 0;
  3231  02C5  01FC               	clrf	_intBlinkCounter
  3232  02C6  01FD               	clrf	_intBlinkCounter+1
  3233                           
  3234                           ;functions.c: 87: DelayDs(100);
  3235  02C7  3064               	movlw	100
  3236  02C8  00A0               	movwf	DelayDs@cnt
  3237  02C9  3000               	movlw	0
  3238  02CA  00A1               	movwf	DelayDs@cnt+1
  3239  02CB  160A  118A  2732  120A  118A  	fcall	_DelayDs
  3240  02D0                     l2743:	
  3241                           
  3242                           ;functions.c: 88: }
  3243                           ;functions.c: 92: if(Data[0] != 44 || Data[3] != 55)
  3244  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3245  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3246  02D2  0850               	movf	ReceivedPacketHandler@Data,w
  3247  02D3  0084               	movwf	4
  3248  02D4  302C               	movlw	44
  3249  02D5  1383               	bcf	3,7	;select IRP bank0
  3250  02D6  0600               	xorwf	0,w
  3251  02D7  1D03               	btfss	3,2
  3252  02D8  0008               	return
  3253  02D9  0850               	movf	ReceivedPacketHandler@Data,w
  3254  02DA  3E03               	addlw	3
  3255  02DB  0084               	movwf	4
  3256  02DC  3037               	movlw	55
  3257  02DD  0600               	xorwf	0,w
  3258  02DE  1D03               	btfss	3,2
  3259  02DF  0008               	return
  3260  02E0  2C4A               	goto	l2841
  3261  02E1                     l314:	
  3262                           ;functions.c: 99: {
  3263                           ;functions.c: 100: case 1:
  3264                           
  3265                           ;functions.c: 98: switch (Data[2])
  3266                           
  3267                           ;functions.c: 96: {
  3268                           ;functions.c: 97: case 1:
  3269                           
  3270                           ;functions.c: 95: switch (Data[1])
  3271                           
  3272                           ;functions.c: 93: return;
  3273                           
  3274                           
  3275                           ;functions.c: 101: RC2 = 1;
  3276  02E1  1507               	bsf	7,2	;volatile
  3277                           
  3278                           ;functions.c: 102: DelayDs(10);
  3279  02E2  300A               	movlw	10
  3280  02E3  00A0               	movwf	DelayDs@cnt
  3281  02E4  3000               	movlw	0
  3282  02E5  00A1               	movwf	DelayDs@cnt+1
  3283  02E6  160A  118A  2732  120A  118A  	fcall	_DelayDs
  3284                           
  3285                           ;functions.c: 103: RC2 = 0;
  3286  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  3287  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  3288  02ED  1107               	bcf	7,2	;volatile
  3289                           
  3290                           ;functions.c: 104: DelayDs(5);
  3291  02EE  3005               	movlw	5
  3292  02EF  00A0               	movwf	DelayDs@cnt
  3293  02F0  3000               	movlw	0
  3294  02F1  00A1               	movwf	DelayDs@cnt+1
  3295  02F2  160A  118A  2732   	fcall	_DelayDs
  3296                           
  3297                           ;functions.c: 105: break;
  3298  02F5  0008               	return
  3299  02F6                     l316:	
  3300                           ;functions.c: 107: case 2:
  3301                           
  3302                           
  3303                           ;functions.c: 108: RC1 = 1;
  3304  02F6  1487               	bsf	7,1	;volatile
  3305                           
  3306                           ;functions.c: 109: DelayDs(10);
  3307  02F7  300A               	movlw	10
  3308  02F8  00A0               	movwf	DelayDs@cnt
  3309  02F9  3000               	movlw	0
  3310  02FA  00A1               	movwf	DelayDs@cnt+1
  3311  02FB  160A  118A  2732  120A  118A  	fcall	_DelayDs
  3312                           
  3313                           ;functions.c: 110: RC1 = 0;
  3314  0300  1283               	bcf	3,5	;RP0=0, select bank0
  3315  0301  1303               	bcf	3,6	;RP1=0, select bank0
  3316  0302  1087               	bcf	7,1	;volatile
  3317                           
  3318                           ;functions.c: 111: DelayDs(5);
  3319  0303  3005               	movlw	5
  3320  0304  00A0               	movwf	DelayDs@cnt
  3321  0305  3000               	movlw	0
  3322  0306  00A1               	movwf	DelayDs@cnt+1
  3323  0307  160A  118A  2732   	fcall	_DelayDs
  3324                           
  3325                           ;functions.c: 112: break;
  3326  030A  0008               	return
  3327  030B                     l317:	
  3328                           ;functions.c: 114: case 3:
  3329                           
  3330                           
  3331                           ;functions.c: 115: RB1 = 0;
  3332  030B  1086               	bcf	6,1	;volatile
  3333                           
  3334                           ;functions.c: 116: DelayDs(10);
  3335  030C  300A               	movlw	10
  3336  030D  00A0               	movwf	DelayDs@cnt
  3337  030E  3000               	movlw	0
  3338  030F  00A1               	movwf	DelayDs@cnt+1
  3339  0310  160A  118A  2732  120A  118A  	fcall	_DelayDs
  3340                           
  3341                           ;functions.c: 117: RB1 = 1;
  3342  0315  1283               	bcf	3,5	;RP0=0, select bank0
  3343  0316  1303               	bcf	3,6	;RP1=0, select bank0
  3344  0317  1486               	bsf	6,1	;volatile
  3345                           
  3346                           ;functions.c: 118: DelayDs(5);
  3347  0318  3005               	movlw	5
  3348  0319  00A0               	movwf	DelayDs@cnt
  3349  031A  3000               	movlw	0
  3350  031B  00A1               	movwf	DelayDs@cnt+1
  3351  031C  160A  118A  2732   	fcall	_DelayDs
  3352                           
  3353                           ;functions.c: 124: }
  3354                           
  3355                           ;functions.c: 122: break;
  3356                           
  3357                           ;functions.c: 121: default:
  3358                           
  3359                           ;functions.c: 119: break;
  3360  031F  0008               	return
  3361  0320                     l2761:	
  3362  0320  1283               	bcf	3,5	;RP0=0, select bank0
  3363  0321  1303               	bcf	3,6	;RP1=0, select bank0
  3364  0322  0850               	movf	ReceivedPacketHandler@Data,w
  3365  0323  3E02               	addlw	2
  3366  0324  0084               	movwf	4
  3367  0325  1383               	bcf	3,7	;select IRP bank0
  3368  0326  0800               	movf	0,w
  3369                           
  3370                           ; Switch size 1, requested type "space"
  3371                           ; Number of cases is 3, Range of values is 1 to 3
  3372                           ; switch strategies available:
  3373                           ; Name         Instructions Cycles
  3374                           ; simple_byte           10     6 (average)
  3375                           ; direct_byte           20    11 (fixed)
  3376                           ; jumptable            263     9 (fixed)
  3377                           ;	Chosen strategy is simple_byte
  3378  0327  3A01               	xorlw	1	; case 1
  3379  0328  1903               	skipnz
  3380  0329  2AE1               	goto	l314
  3381  032A  3A03               	xorlw	3	; case 2
  3382  032B  1903               	skipnz
  3383  032C  2AF6               	goto	l316
  3384  032D  3A01               	xorlw	1	; case 3
  3385  032E  1903               	skipnz
  3386  032F  2B0B               	goto	l317
  3387  0330  2C6C               	goto	l310
  3388                           
  3389                           ;functions.c: 125: break;
  3390  0331  0008               	return
  3391  0332                     l2763:	
  3392                           ;functions.c: 126: case 2:
  3393                           
  3394                           
  3395                           ;functions.c: 127: if(Data[2] == 1 && OperationMode() == 6)
  3396  0332  0850               	movf	ReceivedPacketHandler@Data,w
  3397  0333  3E02               	addlw	2
  3398  0334  0084               	movwf	4
  3399  0335  0300               	decf	0,w
  3400  0336  1D03               	btfss	3,2
  3401  0337  2B51               	goto	l2773
  3402  0338  160A  118A  2606  120A  118A  	fcall	_OperationMode
  3403  033D  3A06               	xorlw	6
  3404  033E  1D03               	skipz
  3405  033F  2B51               	goto	l2773
  3406                           
  3407                           ;functions.c: 128: {
  3408                           ;functions.c: 129: intBlinkCycle = 1;
  3409  0340  3001               	movlw	1
  3410  0341  1283               	bcf	3,5	;RP0=0, select bank0
  3411  0342  1303               	bcf	3,6	;RP1=0, select bank0
  3412  0343  00DD               	movwf	_intBlinkCycle
  3413  0344  3000               	movlw	0
  3414  0345  00DE               	movwf	_intBlinkCycle+1
  3415                           
  3416                           ;functions.c: 130: intBlinkCounter = 0;
  3417  0346  01FC               	clrf	_intBlinkCounter
  3418  0347  01FD               	clrf	_intBlinkCounter+1
  3419                           
  3420                           ;functions.c: 131: DelayDs(100);
  3421  0348  3064               	movlw	100
  3422  0349  00A0               	movwf	DelayDs@cnt
  3423  034A  3000               	movlw	0
  3424  034B  00A1               	movwf	DelayDs@cnt+1
  3425  034C  160A  118A  2732  120A  118A  	fcall	_DelayDs
  3426  0351                     l2773:	
  3427                           
  3428                           ;functions.c: 132: }
  3429                           ;functions.c: 133: if(Data[2] == 2 && OperationMode() == 7)
  3430  0351  1283               	bcf	3,5	;RP0=0, select bank0
  3431  0352  1303               	bcf	3,6	;RP1=0, select bank0
  3432  0353  0850               	movf	ReceivedPacketHandler@Data,w
  3433  0354  3E02               	addlw	2
  3434  0355  0084               	movwf	4
  3435  0356  3002               	movlw	2
  3436  0357  1383               	bcf	3,7	;select IRP bank0
  3437  0358  0600               	xorwf	0,w
  3438  0359  1D03               	btfss	3,2
  3439  035A  0008               	return
  3440  035B  160A  118A  2606  120A  118A  	fcall	_OperationMode
  3441  0360  3A07               	xorlw	7
  3442  0361  1D03               	skipz
  3443  0362  0008               	return
  3444                           
  3445                           ;functions.c: 134: {
  3446                           ;functions.c: 135: intBlinkCycle = 1;
  3447  0363  3001               	movlw	1
  3448  0364  1283               	bcf	3,5	;RP0=0, select bank0
  3449  0365  1303               	bcf	3,6	;RP1=0, select bank0
  3450  0366  00DD               	movwf	_intBlinkCycle
  3451  0367  3000               	movlw	0
  3452  0368  00DE               	movwf	_intBlinkCycle+1
  3453                           
  3454                           ;functions.c: 136: intBlinkCounter = 0;
  3455  0369  01FC               	clrf	_intBlinkCounter
  3456  036A  01FD               	clrf	_intBlinkCounter+1
  3457                           
  3458                           ;functions.c: 137: DelayDs(100);
  3459  036B  3064               	movlw	100
  3460  036C  00A0               	movwf	DelayDs@cnt
  3461  036D  3000               	movlw	0
  3462  036E  00A1               	movwf	DelayDs@cnt+1
  3463  036F  160A  118A  2732   	fcall	_DelayDs
  3464                           
  3465                           ;functions.c: 138: }
  3466                           ;functions.c: 139: break;
  3467  0372  0008               	return
  3468  0373                     l2783:	
  3469                           ;functions.c: 141: case 3:
  3470                           
  3471                           
  3472                           ;functions.c: 142: if(Data[2] != 0)
  3473  0373  1283               	bcf	3,5	;RP0=0, select bank0
  3474  0374  1303               	bcf	3,6	;RP1=0, select bank0
  3475  0375  0850               	movf	ReceivedPacketHandler@Data,w
  3476  0376  3E02               	addlw	2
  3477  0377  0084               	movwf	4
  3478  0378  1383               	bcf	3,7	;select IRP bank0
  3479  0379  0800               	movf	0,w
  3480  037A  1D03               	btfss	3,2
  3481  037B  0008               	return
  3482                           
  3483                           ;functions.c: 144: TransmittPacket(3, AnalogValue(0));
  3484                           
  3485                           ;functions.c: 143: break;
  3486  037C  3000               	movlw	0
  3487  037D  160A  118A  277D  120A  118A  	fcall	_AnalogValue
  3488  0382  1283               	bcf	3,5	;RP0=0, select bank0
  3489  0383  1303               	bcf	3,6	;RP1=0, select bank0
  3490  0384  00CF               	movwf	??_ReceivedPacketHandler
  3491  0385  084F               	movf	??_ReceivedPacketHandler,w
  3492  0386  00B5               	movwf	TransmittPacket@value
  3493  0387  3003               	movlw	3
  3494  0388  120A  158A  24BB   	fcall	_TransmittPacket
  3495                           
  3496                           ;functions.c: 145: break;
  3497  038B  0008               	return
  3498  038C                     l2789:	
  3499                           ;functions.c: 147: case 4:
  3500                           
  3501                           
  3502                           ;functions.c: 148: if(Data[2] != 0)
  3503  038C  1283               	bcf	3,5	;RP0=0, select bank0
  3504  038D  1303               	bcf	3,6	;RP1=0, select bank0
  3505  038E  0850               	movf	ReceivedPacketHandler@Data,w
  3506  038F  3E02               	addlw	2
  3507  0390  0084               	movwf	4
  3508  0391  1383               	bcf	3,7	;select IRP bank0
  3509  0392  0800               	movf	0,w
  3510  0393  1D03               	btfss	3,2
  3511  0394  0008               	return
  3512                           
  3513                           ;functions.c: 150: TransmittPacket(4, AnalogValue(3));
  3514                           
  3515                           ;functions.c: 149: break;
  3516  0395  3003               	movlw	3
  3517  0396  160A  118A  277D  120A  118A  	fcall	_AnalogValue
  3518  039B  1283               	bcf	3,5	;RP0=0, select bank0
  3519  039C  1303               	bcf	3,6	;RP1=0, select bank0
  3520  039D  00CF               	movwf	??_ReceivedPacketHandler
  3521  039E  084F               	movf	??_ReceivedPacketHandler,w
  3522  039F  00B5               	movwf	TransmittPacket@value
  3523  03A0  3004               	movlw	4
  3524  03A1  120A  158A  24BB   	fcall	_TransmittPacket
  3525                           
  3526                           ;functions.c: 151: break;
  3527  03A4  0008               	return
  3528  03A5                     l2795:	
  3529                           ;functions.c: 153: case 5:
  3530                           
  3531                           
  3532                           ;functions.c: 154: if(Data[2] != 0)
  3533  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  3534  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  3535  03A7  0850               	movf	ReceivedPacketHandler@Data,w
  3536  03A8  3E02               	addlw	2
  3537  03A9  0084               	movwf	4
  3538  03AA  1383               	bcf	3,7	;select IRP bank0
  3539  03AB  0800               	movf	0,w
  3540  03AC  1903               	btfsc	3,2
  3541  03AD  2BBA               	goto	l2799
  3542                           
  3543                           ;functions.c: 155: {
  3544                           ;functions.c: 156: eeprom_write(0, Data[2]);
  3545  03AE  0850               	movf	ReceivedPacketHandler@Data,w
  3546  03AF  3E02               	addlw	2
  3547  03B0  0084               	movwf	4
  3548  03B1  0800               	movf	0,w
  3549  03B2  00CF               	movwf	??_ReceivedPacketHandler
  3550  03B3  084F               	movf	??_ReceivedPacketHandler,w
  3551  03B4  00A0               	movwf	eeprom_write@value
  3552  03B5  3000               	movlw	0
  3553  03B6  120A  158A  208D   	fcall	_eeprom_write
  3554                           
  3555                           ;functions.c: 157: break;
  3556  03B9  0008               	return
  3557  03BA                     l2799:	
  3558                           
  3559                           ;functions.c: 158: }
  3560                           ;functions.c: 159: TransmittPacket(5, eeprom_read(0));
  3561  03BA  3000               	movlw	0
  3562  03BB  120A  158A  203D  120A  118A  	fcall	_eeprom_read
  3563  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  3564  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  3565  03C2  00CF               	movwf	??_ReceivedPacketHandler
  3566  03C3  084F               	movf	??_ReceivedPacketHandler,w
  3567  03C4  00B5               	movwf	TransmittPacket@value
  3568  03C5  3005               	movlw	5
  3569  03C6  120A  158A  24BB   	fcall	_TransmittPacket
  3570                           
  3571                           ;functions.c: 160: break;
  3572  03C9  0008               	return
  3573  03CA                     l2801:	
  3574                           ;functions.c: 162: case 6:
  3575                           
  3576                           
  3577                           ;functions.c: 163: if(Data[2] == 0)
  3578  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  3579  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  3580  03CC  0850               	movf	ReceivedPacketHandler@Data,w
  3581  03CD  3E02               	addlw	2
  3582  03CE  0084               	movwf	4
  3583  03CF  1383               	bcf	3,7	;select IRP bank0
  3584  03D0  0800               	movf	0,w
  3585  03D1  1D03               	btfss	3,2
  3586  03D2  2BE5               	goto	l2809
  3587                           
  3588                           ;functions.c: 164: {
  3589                           ;functions.c: 165: if(bValueFromPot == TRUE)
  3590  03D3  036D               	decf	_bValueFromPot,w
  3591  03D4  1D03               	btfss	3,2
  3592  03D5  2BDD               	goto	l2807
  3593                           
  3594                           ;functions.c: 166: TransmittPacket(6, 1);
  3595  03D6  01B5               	clrf	TransmittPacket@value
  3596  03D7  0AB5               	incf	TransmittPacket@value,f
  3597  03D8  3006               	movlw	6
  3598  03D9  120A  158A  24BB   	fcall	_TransmittPacket
  3599  03DC  0008               	return
  3600  03DD                     l2807:	
  3601                           
  3602                           ;functions.c: 167: else
  3603                           ;functions.c: 168: TransmittPacket(6, 0);
  3604  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  3605  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  3606  03DF  01B5               	clrf	TransmittPacket@value
  3607  03E0  3006               	movlw	6
  3608  03E1  120A  158A  24BB   	fcall	_TransmittPacket
  3609                           
  3610                           ;functions.c: 169: }
  3611  03E4  0008               	return
  3612  03E5                     l2809:	
  3613                           
  3614                           ;functions.c: 170: else if(Data[2] == 1)
  3615  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  3616  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  3617  03E7  0850               	movf	ReceivedPacketHandler@Data,w
  3618  03E8  3E02               	addlw	2
  3619  03E9  0084               	movwf	4
  3620  03EA  1383               	bcf	3,7	;select IRP bank0
  3621  03EB  0300               	decf	0,w
  3622  03EC  1D03               	btfss	3,2
  3623  03ED  2BF1               	goto	l2813
  3624                           
  3625                           ;functions.c: 171: bValueFromPot = TRUE;
  3626  03EE  01ED               	clrf	_bValueFromPot
  3627  03EF  0AED               	incf	_bValueFromPot,f
  3628  03F0  0008               	return
  3629  03F1                     l2813:	
  3630                           
  3631                           ;functions.c: 172: else if(Data[2] == 0)
  3632  03F1  0850               	movf	ReceivedPacketHandler@Data,w
  3633  03F2  3E02               	addlw	2
  3634  03F3  0084               	movwf	4
  3635  03F4  0800               	movf	0,w
  3636  03F5  1D03               	btfss	3,2
  3637  03F6  0008               	return
  3638                           
  3639                           ;functions.c: 173: bValueFromPot = FALSE;
  3640  03F7  01ED               	clrf	_bValueFromPot
  3641                           
  3642                           ;functions.c: 175: break;
  3643  03F8  0008               	return
  3644  03F9                     l2817:	
  3645                           ;functions.c: 177: case 7:
  3646                           
  3647                           
  3648                           ;functions.c: 178: if(Data[2] != 0)
  3649  03F9  0850               	movf	ReceivedPacketHandler@Data,w
  3650  03FA  3E02               	addlw	2
  3651  03FB  0084               	movwf	4
  3652  03FC  0800               	movf	0,w
  3653  03FD  1D03               	btfss	3,2
  3654  03FE  0008               	return
  3655                           
  3656                           ;functions.c: 180: DarknessCheck();
  3657                           
  3658                           ;functions.c: 179: break;
  3659  03FF  160A  118A  2756  120A  118A  	fcall	_DarknessCheck
  3660                           
  3661                           ;functions.c: 181: if(bDark)
  3662  0404  1283               	bcf	3,5	;RP0=0, select bank0
  3663  0405  1303               	bcf	3,6	;RP1=0, select bank0
  3664  0406  0868               	movf	_bDark,w
  3665  0407  1903               	btfsc	3,2
  3666  0408  2C10               	goto	l2827
  3667                           
  3668                           ;functions.c: 182: TransmittPacket(7, 1);
  3669  0409  01B5               	clrf	TransmittPacket@value
  3670  040A  0AB5               	incf	TransmittPacket@value,f
  3671  040B  3007               	movlw	7
  3672  040C  120A  158A  24BB   	fcall	_TransmittPacket
  3673  040F  0008               	return
  3674  0410                     l2827:	
  3675                           
  3676                           ;functions.c: 183: else
  3677                           ;functions.c: 184: TransmittPacket(7, 2);
  3678  0410  3002               	movlw	2
  3679  0411  1283               	bcf	3,5	;RP0=0, select bank0
  3680  0412  1303               	bcf	3,6	;RP1=0, select bank0
  3681  0413  00CF               	movwf	??_ReceivedPacketHandler
  3682  0414  084F               	movf	??_ReceivedPacketHandler,w
  3683  0415  00B5               	movwf	TransmittPacket@value
  3684  0416  3007               	movlw	7
  3685  0417  120A  158A  24BB   	fcall	_TransmittPacket
  3686                           
  3687                           ;functions.c: 185: break;
  3688  041A  0008               	return
  3689  041B                     l2829:	
  3690                           ;functions.c: 187: case 9:
  3691                           
  3692                           
  3693                           ;functions.c: 188: write_ram_status(read_ram_status() & 0b11100011);
  3694  041B  160A  118A  267D  120A  118A  	fcall	_read_ram_status
  3695  0420  39E3               	andlw	227
  3696  0421  120A  158A  2061  120A  118A  	fcall	_write_ram_status
  3697                           
  3698                           ;functions.c: 189: ram_bulk_erase();
  3699  0426  160A  118A  2710  120A  118A  	fcall	_ram_bulk_erase
  3700                           
  3701                           ;functions.c: 190: ResetMemoryAdress();
  3702  042B  160A  118A  26DA  120A  118A  	fcall	_ResetMemoryAdress
  3703                           
  3704                           ;functions.c: 191: TransmittPacket(9, 1);
  3705  0430  1283               	bcf	3,5	;RP0=0, select bank0
  3706  0431  1303               	bcf	3,6	;RP1=0, select bank0
  3707  0432  01B5               	clrf	TransmittPacket@value
  3708  0433  0AB5               	incf	TransmittPacket@value,f
  3709  0434  3009               	movlw	9
  3710  0435  120A  158A  24BB   	fcall	_TransmittPacket
  3711                           
  3712                           ;functions.c: 192: break;
  3713  0438  0008               	return
  3714  0439                     l2833:	
  3715                           ;functions.c: 194: case 8:
  3716                           
  3717                           
  3718                           ;functions.c: 195: if(!bSaveDataToFlash)
  3719  0439  1283               	bcf	3,5	;RP0=0, select bank0
  3720  043A  1303               	bcf	3,6	;RP1=0, select bank0
  3721  043B  0869               	movf	_bSaveDataToFlash,w
  3722  043C  1D03               	btfss	3,2
  3723  043D  2C42               	goto	l2837
  3724                           
  3725                           ;functions.c: 196: SendMemoryData();
  3726  043E  120A  118A  25A6   	fcall	_SendMemoryData
  3727  0441  0008               	return
  3728  0442                     l2837:	
  3729                           
  3730                           ;functions.c: 197: else
  3731                           ;functions.c: 198: TransmittPacket(8, 0);
  3732  0442  1283               	bcf	3,5	;RP0=0, select bank0
  3733  0443  1303               	bcf	3,6	;RP1=0, select bank0
  3734  0444  01B5               	clrf	TransmittPacket@value
  3735  0445  3008               	movlw	8
  3736  0446  120A  158A  24BB   	fcall	_TransmittPacket
  3737                           
  3738                           ;functions.c: 203: }
  3739                           
  3740                           ;functions.c: 202: break;
  3741                           
  3742                           ;functions.c: 201: default:
  3743                           
  3744                           ;functions.c: 199: break;
  3745  0449  0008               	return
  3746  044A                     l2841:	
  3747  044A  1283               	bcf	3,5	;RP0=0, select bank0
  3748  044B  1303               	bcf	3,6	;RP1=0, select bank0
  3749  044C  0A50               	incf	ReceivedPacketHandler@Data,w
  3750  044D  0084               	movwf	4
  3751  044E  1383               	bcf	3,7	;select IRP bank0
  3752  044F  0800               	movf	0,w
  3753                           
  3754                           ; Switch size 1, requested type "space"
  3755                           ; Number of cases is 9, Range of values is 1 to 9
  3756                           ; switch strategies available:
  3757                           ; Name         Instructions Cycles
  3758                           ; simple_byte           28    15 (average)
  3759                           ; direct_byte           38    11 (fixed)
  3760                           ; jumptable            263     9 (fixed)
  3761                           ;	Chosen strategy is simple_byte
  3762  0450  3A01               	xorlw	1	; case 1
  3763  0451  1903               	skipnz
  3764  0452  2B20               	goto	l2761
  3765  0453  3A03               	xorlw	3	; case 2
  3766  0454  1903               	skipnz
  3767  0455  2B32               	goto	l2763
  3768  0456  3A01               	xorlw	1	; case 3
  3769  0457  1903               	skipnz
  3770  0458  2B73               	goto	l2783
  3771  0459  3A07               	xorlw	7	; case 4
  3772  045A  1903               	skipnz
  3773  045B  2B8C               	goto	l2789
  3774  045C  3A01               	xorlw	1	; case 5
  3775  045D  1903               	skipnz
  3776  045E  2BA5               	goto	l2795
  3777  045F  3A03               	xorlw	3	; case 6
  3778  0460  1903               	skipnz
  3779  0461  2BCA               	goto	l2801
  3780  0462  3A01               	xorlw	1	; case 7
  3781  0463  1903               	skipnz
  3782  0464  2BF9               	goto	l2817
  3783  0465  3A0F               	xorlw	15	; case 8
  3784  0466  1903               	skipnz
  3785  0467  2C39               	goto	l2833
  3786  0468  3A01               	xorlw	1	; case 9
  3787  0469  1903               	skipnz
  3788  046A  2C1B               	goto	l2829
  3789  046B  2C6C               	goto	l310
  3790  046C                     l310:	
  3791  046C  0008               	return
  3792  046D                     __end_of_ReceivedPacketHandler:	
  3793                           
  3794                           	psect	text8
  3795  0861                     __ptext8:	
  3796 ;; *************** function _write_ram_status *****************
  3797 ;; Defined at:
  3798 ;;		line 169 in file "m25p16.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;  status          1    wreg     unsigned char 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  status          1    5[BANK0 ] unsigned char 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      void 
  3805 ;; Registers used:
  3806 ;;		wreg, status,2, status,0, pclath, cstack
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3812 ;;      Params:         0       0       0       0       0
  3813 ;;      Locals:         0       1       0       0       0
  3814 ;;      Temps:          0       0       0       0       0
  3815 ;;      Totals:         0       1       0       0       0
  3816 ;;Total ram usage:        1 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; Hardware stack levels required when called:    5
  3819 ;; This function calls:
  3820 ;;		_WriteSPI
  3821 ;;		_read_ram_status
  3822 ;; This function is called by:
  3823 ;;		_main
  3824 ;;		_ReceivedPacketHandler
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           
  3829                           ;psect for function _write_ram_status
  3830  0861                     _write_ram_status:	
  3831                           
  3832                           ;incstack = 0
  3833                           ; Regs used in _write_ram_status: [wreg+status,2+status,0+pclath+cstack]
  3834                           ;write_ram_status@status stored from wreg
  3835  0861  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0862  1303               	bcf	3,6	;RP1=0, select bank0
  3837  0863  00A5               	movwf	write_ram_status@status
  3838                           
  3839                           ;m25p16.c: 172: RD3 = 0;
  3840  0864  1188               	bcf	8,3	;volatile
  3841                           
  3842                           ;m25p16.c: 173: WriteSPI(0x06);
  3843  0865  3006               	movlw	6
  3844  0866  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  3845                           
  3846                           ;m25p16.c: 174: RD3 = 1;
  3847  086B  1283               	bcf	3,5	;RP0=0, select bank0
  3848  086C  1303               	bcf	3,6	;RP1=0, select bank0
  3849  086D  1588               	bsf	8,3	;volatile
  3850                           
  3851                           ;m25p16.c: 175: _delay((unsigned long)((2)*(4000000/4000000.0)));
  3852  086E  286F               	nop2	;2 cycle nop
  3853                           
  3854                           ;m25p16.c: 176: RD3 = 0;
  3855  086F  1283               	bcf	3,5	;RP0=0, select bank0
  3856  0870  1303               	bcf	3,6	;RP1=0, select bank0
  3857  0871  1188               	bcf	8,3	;volatile
  3858                           
  3859                           ;m25p16.c: 177: WriteSPI(0x01);
  3860  0872  3001               	movlw	1
  3861  0873  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  3862                           
  3863                           ;m25p16.c: 178: WriteSPI(status);
  3864  0878  1283               	bcf	3,5	;RP0=0, select bank0
  3865  0879  1303               	bcf	3,6	;RP1=0, select bank0
  3866  087A  0825               	movf	write_ram_status@status,w
  3867  087B  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  3868                           
  3869                           ;m25p16.c: 179: RD3 = 1;
  3870  0880  1283               	bcf	3,5	;RP0=0, select bank0
  3871  0881  1303               	bcf	3,6	;RP1=0, select bank0
  3872  0882  1588               	bsf	8,3	;volatile
  3873                           
  3874                           ;m25p16.c: 180: _delay((unsigned long)((2)*(4000000/4000000.0)));
  3875  0883  2884               	nop2	;2 cycle nop
  3876  0884                     l2619:	
  3877                           ;m25p16.c: 181: while (read_ram_status() & 0x01);
  3878                           
  3879  0884  160A  118A  267D  120A  158A  	fcall	_read_ram_status
  3880  0889  3901               	andlw	1
  3881  088A  1903               	btfsc	3,2
  3882  088B  0008               	return
  3883  088C  2884               	goto	l2619
  3884  088D                     __end_of_write_ram_status:	
  3885                           
  3886                           	psect	text9
  3887  07AC                     __ptext9:	
  3888 ;; *************** function _strstr *****************
  3889 ;; Defined at:
  3890 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strstr.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;  s1              1    wreg     PTR const unsigned char 
  3893 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  3894 ;;  s2              1   14[BANK0 ] PTR const unsigned char 
  3895 ;;		 -> STR_2(8), STR_1(8), 
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;  s1              1   18[BANK0 ] PTR const unsigned char 
  3898 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  1    wreg      PTR unsigned char 
  3901 ;; Registers used:
  3902 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3908 ;;      Params:         0       1       0       0       0
  3909 ;;      Locals:         0       1       0       0       0
  3910 ;;      Temps:          0       3       0       0       0
  3911 ;;      Totals:         0       5       0       0       0
  3912 ;;Total ram usage:        5 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    3
  3915 ;; This function calls:
  3916 ;;		_strchr
  3917 ;;		_strlen
  3918 ;;		_strncmp
  3919 ;; This function is called by:
  3920 ;;		_ReceivedPacketHandler
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           
  3925                           ;psect for function _strstr
  3926  07AC                     _strstr:	
  3927                           
  3928                           ;incstack = 0
  3929                           ; Regs used in _strstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3930                           ;strstr@s1 stored from wreg
  3931  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  3932  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  3933  07AE  00B2               	movwf	strstr@s1
  3934  07AF  2FE7               	goto	l2653
  3935  07B0                     l2645:	
  3936  07B0  082E               	movf	strstr@s2,w
  3937  07B1  00AF               	movwf	??_strstr
  3938  07B2  082F               	movf	??_strstr,w
  3939  07B3  00A8               	movwf	strncmp@s2
  3940  07B4  082E               	movf	strstr@s2,w
  3941  07B5  160A  118A  27D4  120A  118A  	fcall	_strlen
  3942  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  3943  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  3944  07BC  0821               	movf	?_strlen+1,w
  3945  07BD  00AA               	movwf	strncmp@len+1
  3946  07BE  0820               	movf	?_strlen,w
  3947  07BF  00A9               	movwf	strncmp@len
  3948  07C0  0832               	movf	strstr@s1,w
  3949  07C1  120A  158A  2171  120A  118A  	fcall	_strncmp
  3950  07C6  1283               	bcf	3,5	;RP0=0, select bank0
  3951  07C7  1303               	bcf	3,6	;RP1=0, select bank0
  3952  07C8  0828               	movf	?_strncmp,w
  3953  07C9  0429               	iorwf	?_strncmp+1,w
  3954  07CA  1D03               	btfss	3,2
  3955  07CB  2FCE               	goto	l2651
  3956  07CC  0832               	movf	strstr@s1,w
  3957  07CD  0008               	return
  3958  07CE                     l2651:	
  3959  07CE  082E               	movf	strstr@s2,w
  3960  07CF  0084               	movwf	4
  3961  07D0  120A  158A  2000  120A  118A  	fcall	stringdir
  3962  07D5  00AF               	movwf	??_strstr
  3963  07D6  01B0               	clrf	??_strstr+1
  3964  07D7  082F               	movf	??_strstr,w
  3965  07D8  00A0               	movwf	strchr@chr
  3966  07D9  0830               	movf	??_strstr+1,w
  3967  07DA  00A1               	movwf	strchr@chr+1
  3968  07DB  0832               	movf	strstr@s1,w
  3969  07DC  3E01               	addlw	1
  3970  07DD  160A  118A  2691  120A  118A  	fcall	_strchr
  3971  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  3972  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  3973  07E4  00B1               	movwf	??_strstr+2
  3974  07E5  0831               	movf	??_strstr+2,w
  3975  07E6  00B2               	movwf	strstr@s1
  3976  07E7                     l2653:	
  3977  07E7  0832               	movf	strstr@s1,w
  3978  07E8  1903               	btfsc	3,2
  3979  07E9  2FF0               	goto	l2657
  3980  07EA  0832               	movf	strstr@s1,w
  3981  07EB  0084               	movwf	4
  3982  07EC  1383               	bcf	3,7	;select IRP bank0
  3983  07ED  0800               	movf	0,w
  3984  07EE  1D03               	btfss	3,2
  3985  07EF  2FB0               	goto	l2645
  3986  07F0                     l2657:	
  3987  07F0  3000               	movlw	0
  3988  07F1  0008               	return
  3989  07F2                     __end_of_strstr:	
  3990                           
  3991                           	psect	text10
  3992  0971                     __ptext10:	
  3993 ;; *************** function _strncmp *****************
  3994 ;; Defined at:
  3995 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strncmp.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  s1              1    wreg     PTR const unsigned char 
  3998 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  3999 ;;  s2              1    8[BANK0 ] PTR const unsigned char 
  4000 ;;		 -> STR_2(8), STR_1(8), 
  4001 ;;  len             2    9[BANK0 ] unsigned int 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  4004 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  2    8[BANK0 ] int 
  4007 ;; Registers used:
  4008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4014 ;;      Params:         0       3       0       0       0
  4015 ;;      Locals:         0       1       0       0       0
  4016 ;;      Temps:          0       2       0       0       0
  4017 ;;      Totals:         0       6       0       0       0
  4018 ;;Total ram usage:        6 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    2
  4021 ;; This function calls:
  4022 ;;		Nothing
  4023 ;; This function is called by:
  4024 ;;		_strstr
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _strncmp
  4030  0971                     _strncmp:	
  4031                           
  4032                           ;incstack = 0
  4033                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
  4034                           ;strncmp@s1 stored from wreg
  4035  0971  1283               	bcf	3,5	;RP0=0, select bank0
  4036  0972  1303               	bcf	3,6	;RP1=0, select bank0
  4037  0973  00AD               	movwf	strncmp@s1
  4038  0974                     l1177:	
  4039  0974  3001               	movlw	1
  4040  0975  02A9               	subwf	strncmp@len,f
  4041  0976  3000               	movlw	0
  4042  0977  1C03               	skipc
  4043  0978  03AA               	decf	strncmp@len+1,f
  4044  0979  02AA               	subwf	strncmp@len+1,f
  4045  097A  0A29               	incf	strncmp@len,w
  4046  097B  1903               	btfsc	3,2
  4047  097C  0A2A               	incf	strncmp@len+1,w
  4048  097D  1903               	btfsc	3,2
  4049  097E  29B2               	goto	l2589
  4050  097F  082D               	movf	strncmp@s1,w
  4051  0980  0084               	movwf	4
  4052  0981  1383               	bcf	3,7	;select IRP bank0
  4053  0982  0800               	movf	0,w
  4054  0983  1903               	btfsc	3,2
  4055  0984  2993               	goto	l2583
  4056  0985  0828               	movf	strncmp@s2,w
  4057  0986  0084               	movwf	4
  4058  0987  120A  158A  2000  120A  158A  	fcall	stringdir
  4059  098C  00AB               	movwf	??_strncmp
  4060  098D  082D               	movf	strncmp@s1,w
  4061  098E  0084               	movwf	4
  4062  098F  0800               	movf	0,w
  4063  0990  062B               	xorwf	??_strncmp,w
  4064  0991  1903               	skipnz
  4065  0992  29A9               	goto	l2587
  4066  0993                     l2583:	
  4067  0993  0828               	movf	strncmp@s2,w
  4068  0994  0084               	movwf	4
  4069  0995  120A  158A  2000   	fcall	stringdir
  4070  0998  00AB               	movwf	??_strncmp
  4071  0999  01AC               	clrf	??_strncmp+1
  4072  099A  09AB               	comf	??_strncmp,f
  4073  099B  09AC               	comf	??_strncmp+1,f
  4074  099C  0AAB               	incf	??_strncmp,f
  4075  099D  1903               	skipnz
  4076  099E  0AAC               	incf	??_strncmp+1,f
  4077  099F  082D               	movf	strncmp@s1,w
  4078  09A0  0084               	movwf	4
  4079  09A1  0800               	movf	0,w
  4080  09A2  072B               	addwf	??_strncmp,w
  4081  09A3  00A8               	movwf	?_strncmp
  4082  09A4  082C               	movf	??_strncmp+1,w
  4083  09A5  1803               	skipnc
  4084  09A6  0A2C               	incf	??_strncmp+1,w
  4085  09A7  00A9               	movwf	?_strncmp+1
  4086  09A8  0008               	return
  4087  09A9                     l2587:	
  4088  09A9  3001               	movlw	1
  4089  09AA  00AB               	movwf	??_strncmp
  4090  09AB  082B               	movf	??_strncmp,w
  4091  09AC  07AD               	addwf	strncmp@s1,f
  4092  09AD  3001               	movlw	1
  4093  09AE  00AB               	movwf	??_strncmp
  4094  09AF  082B               	movf	??_strncmp,w
  4095  09B0  07A8               	addwf	strncmp@s2,f
  4096  09B1  2974               	goto	l1177
  4097  09B2                     l2589:	
  4098  09B2  01A8               	clrf	?_strncmp
  4099  09B3  01A9               	clrf	?_strncmp+1
  4100  09B4  0008               	return
  4101  09B5                     __end_of_strncmp:	
  4102                           
  4103                           	psect	text11
  4104  17D4                     __ptext11:	
  4105 ;; *************** function _strlen *****************
  4106 ;; Defined at:
  4107 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strlen.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  s               1    wreg     PTR const unsigned char 
  4110 ;;		 -> STR_2(8), STR_1(8), 
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;  s               1    6[BANK0 ] PTR const unsigned char 
  4113 ;;		 -> STR_2(8), STR_1(8), 
  4114 ;;  cp              1    7[BANK0 ] PTR const unsigned char 
  4115 ;;		 -> STR_2(8), STR_1(8), 
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  2    0[BANK0 ] unsigned int 
  4118 ;; Registers used:
  4119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4125 ;;      Params:         0       2       0       0       0
  4126 ;;      Locals:         0       2       0       0       0
  4127 ;;      Temps:          0       4       0       0       0
  4128 ;;      Totals:         0       8       0       0       0
  4129 ;;Total ram usage:        8 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    2
  4132 ;; This function calls:
  4133 ;;		Nothing
  4134 ;; This function is called by:
  4135 ;;		_strstr
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           
  4140                           ;psect for function _strlen
  4141  17D4                     _strlen:	
  4142                           
  4143                           ;incstack = 0
  4144                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
  4145                           ;strlen@s stored from wreg
  4146  17D4  1283               	bcf	3,5	;RP0=0, select bank0
  4147  17D5  1303               	bcf	3,6	;RP1=0, select bank0
  4148  17D6  00A6               	movwf	strlen@s
  4149  17D7  0826               	movf	strlen@s,w
  4150  17D8  00A2               	movwf	??_strlen
  4151  17D9  0822               	movf	??_strlen,w
  4152  17DA  00A7               	movwf	strlen@cp
  4153  17DB                     l2571:	
  4154  17DB  0827               	movf	strlen@cp,w
  4155  17DC  0084               	movwf	4
  4156  17DD  120A  158A  2000  160A  118A  	fcall	stringdir
  4157  17E2  3A00               	xorlw	0
  4158  17E3  1903               	btfsc	3,2
  4159  17E4  2FEA               	goto	l2573
  4160  17E5  3001               	movlw	1
  4161  17E6  00A2               	movwf	??_strlen
  4162  17E7  0822               	movf	??_strlen,w
  4163  17E8  07A7               	addwf	strlen@cp,f
  4164  17E9  2FDB               	goto	l2571
  4165  17EA                     l2573:	
  4166  17EA  0826               	movf	strlen@s,w
  4167  17EB  00A2               	movwf	??_strlen
  4168  17EC  3080               	movlw	128
  4169  17ED  00A3               	movwf	??_strlen+1
  4170  17EE  09A2               	comf	??_strlen,f
  4171  17EF  09A3               	comf	??_strlen+1,f
  4172  17F0  0AA2               	incf	??_strlen,f
  4173  17F1  1903               	skipnz
  4174  17F2  0AA3               	incf	??_strlen+1,f
  4175  17F3  0827               	movf	strlen@cp,w
  4176  17F4  00A4               	movwf	??_strlen+2
  4177  17F5  3080               	movlw	128
  4178  17F6  00A5               	movwf	??_strlen+3
  4179  17F7  0822               	movf	??_strlen,w
  4180  17F8  0724               	addwf	??_strlen+2,w
  4181  17F9  00A0               	movwf	?_strlen
  4182  17FA  0823               	movf	??_strlen+1,w
  4183  17FB  1803               	skipnc
  4184  17FC  0A23               	incf	??_strlen+1,w
  4185  17FD  0725               	addwf	??_strlen+3,w
  4186  17FE  00A1               	movwf	?_strlen+1
  4187  17FF  0008               	return
  4188  1800                     __end_of_strlen:	
  4189                           
  4190                           	psect	text12
  4191  1691                     __ptext12:	
  4192 ;; *************** function _strchr *****************
  4193 ;; Defined at:
  4194 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strchr.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;  ptr             1    wreg     PTR const unsigned char 
  4197 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4198 ;;  chr             2    0[BANK0 ] int 
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  ptr             1    2[BANK0 ] PTR const unsigned char 
  4201 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      PTR unsigned char 
  4204 ;; Registers used:
  4205 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4211 ;;      Params:         0       2       0       0       0
  4212 ;;      Locals:         0       1       0       0       0
  4213 ;;      Temps:          0       0       0       0       0
  4214 ;;      Totals:         0       3       0       0       0
  4215 ;;Total ram usage:        3 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    2
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_strstr
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           
  4226                           ;psect for function _strchr
  4227  1691                     _strchr:	
  4228                           
  4229                           ;incstack = 0
  4230                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0]
  4231                           ;strchr@ptr stored from wreg
  4232  1691  1283               	bcf	3,5	;RP0=0, select bank0
  4233  1692  1303               	bcf	3,6	;RP1=0, select bank0
  4234  1693  00A2               	movwf	strchr@ptr
  4235  1694                     l1165:	
  4236  1694  0822               	movf	strchr@ptr,w
  4237  1695  0084               	movwf	4
  4238  1696  1383               	bcf	3,7	;select IRP bank0
  4239  1697  0800               	movf	0,w
  4240  1698  0620               	xorwf	strchr@chr,w
  4241  1699  1D03               	skipz
  4242  169A  2E9D               	goto	l2599
  4243  169B  0822               	movf	strchr@ptr,w
  4244  169C  0008               	return
  4245  169D                     l2599:	
  4246  169D  0822               	movf	strchr@ptr,w
  4247  169E  0084               	movwf	4
  4248  169F  3001               	movlw	1
  4249  16A0  07A2               	addwf	strchr@ptr,f
  4250  16A1  0800               	movf	0,w
  4251  16A2  1D03               	btfss	3,2
  4252  16A3  2E94               	goto	l1165
  4253  16A4  3000               	movlw	0
  4254  16A5  0008               	return
  4255  16A6                     __end_of_strchr:	
  4256                           
  4257                           	psect	text13
  4258  1710                     __ptext13:	
  4259 ;; *************** function _ram_bulk_erase *****************
  4260 ;; Defined at:
  4261 ;;		line 69 in file "m25p16.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;		None
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;		None
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      void 
  4268 ;; Registers used:
  4269 ;;		wreg, status,2, status,0, pclath, cstack
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4275 ;;      Params:         0       0       0       0       0
  4276 ;;      Locals:         0       0       0       0       0
  4277 ;;      Temps:          0       0       0       0       0
  4278 ;;      Totals:         0       0       0       0       0
  4279 ;;Total ram usage:        0 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    5
  4282 ;; This function calls:
  4283 ;;		_WriteSPI
  4284 ;;		_read_ram_status
  4285 ;; This function is called by:
  4286 ;;		_main
  4287 ;;		_ReceivedPacketHandler
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           
  4292                           ;psect for function _ram_bulk_erase
  4293  1710                     _ram_bulk_erase:	
  4294                           
  4295                           ;m25p16.c: 71: RD3 = 0;
  4296                           
  4297                           ;incstack = 0
  4298                           ; Regs used in _ram_bulk_erase: [wreg+status,2+status,0+pclath+cstack]
  4299  1710  1283               	bcf	3,5	;RP0=0, select bank0
  4300  1711  1303               	bcf	3,6	;RP1=0, select bank0
  4301  1712  1188               	bcf	8,3	;volatile
  4302                           
  4303                           ;m25p16.c: 72: WriteSPI(0x06);
  4304  1713  3006               	movlw	6
  4305  1714  160A  118A  2628  160A  118A  	fcall	_WriteSPI
  4306                           
  4307                           ;m25p16.c: 73: RD3 = 1;
  4308  1719  1283               	bcf	3,5	;RP0=0, select bank0
  4309  171A  1303               	bcf	3,6	;RP1=0, select bank0
  4310  171B  1588               	bsf	8,3	;volatile
  4311                           
  4312                           ;m25p16.c: 74: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4313  171C  0000               	nop
  4314                           
  4315                           ;m25p16.c: 75: RD3 = 0;
  4316  171D  1283               	bcf	3,5	;RP0=0, select bank0
  4317  171E  1303               	bcf	3,6	;RP1=0, select bank0
  4318  171F  1188               	bcf	8,3	;volatile
  4319                           
  4320                           ;m25p16.c: 76: WriteSPI(0xC7);
  4321  1720  30C7               	movlw	199
  4322  1721  160A  118A  2628  160A  118A  	fcall	_WriteSPI
  4323                           
  4324                           ;m25p16.c: 77: RD3 = 1;
  4325  1726  1283               	bcf	3,5	;RP0=0, select bank0
  4326  1727  1303               	bcf	3,6	;RP1=0, select bank0
  4327  1728  1588               	bsf	8,3	;volatile
  4328  1729                     l2633:	
  4329                           ;m25p16.c: 78: while(read_ram_status());
  4330                           
  4331  1729  160A  118A  267D  160A  118A  	fcall	_read_ram_status
  4332  172E  3A00               	xorlw	0
  4333  172F  1903               	btfsc	3,2
  4334  1730  0008               	return
  4335  1731  2F29               	goto	l2633
  4336  1732                     __end_of_ram_bulk_erase:	
  4337                           
  4338                           	psect	text14
  4339  05A6                     __ptext14:	
  4340 ;; *************** function _SendMemoryData *****************
  4341 ;; Defined at:
  4342 ;;		line 1212 in file "functions.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;		None
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  finalAddress    4   43[BANK0 ] unsigned long 
  4347 ;;  address         4   39[BANK0 ] unsigned long 
  4348 ;;  addr1           1   38[BANK0 ] unsigned char 
  4349 ;;  addr2           1   37[BANK0 ] unsigned char 
  4350 ;;  addr3           1   36[BANK0 ] unsigned char 
  4351 ;;  value           1   35[BANK0 ] unsigned char 
  4352 ;; Return value:  Size  Location     Type
  4353 ;;                  1    wreg      void 
  4354 ;; Registers used:
  4355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4361 ;;      Params:         0       0       0       0       0
  4362 ;;      Locals:         0      12       0       0       0
  4363 ;;      Temps:          0       8       0       0       0
  4364 ;;      Totals:         0      20       0       0       0
  4365 ;;Total ram usage:       20 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    8
  4368 ;; This function calls:
  4369 ;;		_ReadMemoryAdress
  4370 ;;		_TransmittPacket
  4371 ;;		_read_write_flash_ram
  4372 ;; This function is called by:
  4373 ;;		_ReceivedPacketHandler
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           
  4378                           ;psect for function _SendMemoryData
  4379  05A6                     _SendMemoryData:	
  4380                           
  4381                           ;functions.c: 1214: unsigned long address, finalAddress = 0;
  4382                           
  4383                           ;incstack = 0
  4384 ;; hardware stack exceeded
  4385                           ; Regs used in _SendMemoryData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4386  05A6  3000               	movlw	0
  4387  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  4388  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  4389  05A9  00CE               	movwf	SendMemoryData@finalAddress+3
  4390  05AA  3000               	movlw	0
  4391  05AB  00CD               	movwf	SendMemoryData@finalAddress+2
  4392  05AC  3000               	movlw	0
  4393  05AD  00CC               	movwf	SendMemoryData@finalAddress+1
  4394  05AE  3000               	movlw	0
  4395  05AF  00CB               	movwf	SendMemoryData@finalAddress
  4396                           
  4397                           ;functions.c: 1215: unsigned char addr3, addr2, addr1, value;
  4398                           ;functions.c: 1217: ReadMemoryAdress(&addr3, &addr2, &addr1);
  4399  05B0  3045               	movlw	(low (SendMemoryData@addr2| 0))& (0+255)
  4400  05B1  00BB               	movwf	??_SendMemoryData
  4401  05B2  083B               	movf	??_SendMemoryData,w
  4402  05B3  00A2               	movwf	ReadMemoryAdress@var2
  4403  05B4  3046               	movlw	(low (SendMemoryData@addr1| 0))& (0+255)
  4404  05B5  00BC               	movwf	??_SendMemoryData+1
  4405  05B6  083C               	movf	??_SendMemoryData+1,w
  4406  05B7  00A3               	movwf	ReadMemoryAdress@var1
  4407  05B8  3044               	movlw	(low (SendMemoryData@addr3| 0))& (0+255)
  4408  05B9  160A  118A  27A8  120A  118A  	fcall	_ReadMemoryAdress
  4409                           
  4410                           ;functions.c: 1219: finalAddress = (finalAddress << 8) | addr3;
  4411  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  4412  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  4413  05C0  0844               	movf	SendMemoryData@addr3,w
  4414  05C1  00BB               	movwf	??_SendMemoryData
  4415  05C2  01BC               	clrf	??_SendMemoryData+1
  4416  05C3  01BD               	clrf	??_SendMemoryData+2
  4417  05C4  01BE               	clrf	??_SendMemoryData+3
  4418  05C5  084B               	movf	SendMemoryData@finalAddress,w
  4419  05C6  00BF               	movwf	??_SendMemoryData+4
  4420  05C7  084C               	movf	SendMemoryData@finalAddress+1,w
  4421  05C8  00C0               	movwf	??_SendMemoryData+5
  4422  05C9  084D               	movf	SendMemoryData@finalAddress+2,w
  4423  05CA  00C1               	movwf	??_SendMemoryData+6
  4424  05CB  084E               	movf	SendMemoryData@finalAddress+3,w
  4425  05CC  00C2               	movwf	??_SendMemoryData+7
  4426  05CD  3008               	movlw	8
  4427  05CE                     u1575:	
  4428  05CE  1003               	clrc
  4429  05CF  0DBF               	rlf	??_SendMemoryData+4,f
  4430  05D0  0DC0               	rlf	??_SendMemoryData+5,f
  4431  05D1  0DC1               	rlf	??_SendMemoryData+6,f
  4432  05D2  0DC2               	rlf	??_SendMemoryData+7,f
  4433  05D3  3EFF               	addlw	-1
  4434  05D4  1D03               	skipz
  4435  05D5  2DCE               	goto	u1575
  4436  05D6  083F               	movf	??_SendMemoryData+4,w
  4437  05D7  04BB               	iorwf	??_SendMemoryData,f
  4438  05D8  0840               	movf	??_SendMemoryData+5,w
  4439  05D9  04BC               	iorwf	??_SendMemoryData+1,f
  4440  05DA  0841               	movf	??_SendMemoryData+6,w
  4441  05DB  04BD               	iorwf	??_SendMemoryData+2,f
  4442  05DC  0842               	movf	??_SendMemoryData+7,w
  4443  05DD  04BE               	iorwf	??_SendMemoryData+3,f
  4444  05DE  083E               	movf	??_SendMemoryData+3,w
  4445  05DF  00CE               	movwf	SendMemoryData@finalAddress+3
  4446  05E0  083D               	movf	??_SendMemoryData+2,w
  4447  05E1  00CD               	movwf	SendMemoryData@finalAddress+2
  4448  05E2  083C               	movf	??_SendMemoryData+1,w
  4449  05E3  00CC               	movwf	SendMemoryData@finalAddress+1
  4450  05E4  083B               	movf	??_SendMemoryData,w
  4451  05E5  00CB               	movwf	SendMemoryData@finalAddress
  4452                           
  4453                           ;functions.c: 1220: finalAddress = (finalAddress << 8) | addr2;
  4454  05E6  0845               	movf	SendMemoryData@addr2,w
  4455  05E7  00BB               	movwf	??_SendMemoryData
  4456  05E8  01BC               	clrf	??_SendMemoryData+1
  4457  05E9  01BD               	clrf	??_SendMemoryData+2
  4458  05EA  01BE               	clrf	??_SendMemoryData+3
  4459  05EB  084B               	movf	SendMemoryData@finalAddress,w
  4460  05EC  00BF               	movwf	??_SendMemoryData+4
  4461  05ED  084C               	movf	SendMemoryData@finalAddress+1,w
  4462  05EE  00C0               	movwf	??_SendMemoryData+5
  4463  05EF  084D               	movf	SendMemoryData@finalAddress+2,w
  4464  05F0  00C1               	movwf	??_SendMemoryData+6
  4465  05F1  084E               	movf	SendMemoryData@finalAddress+3,w
  4466  05F2  00C2               	movwf	??_SendMemoryData+7
  4467  05F3  3008               	movlw	8
  4468  05F4                     u1585:	
  4469  05F4  1003               	clrc
  4470  05F5  0DBF               	rlf	??_SendMemoryData+4,f
  4471  05F6  0DC0               	rlf	??_SendMemoryData+5,f
  4472  05F7  0DC1               	rlf	??_SendMemoryData+6,f
  4473  05F8  0DC2               	rlf	??_SendMemoryData+7,f
  4474  05F9  3EFF               	addlw	-1
  4475  05FA  1D03               	skipz
  4476  05FB  2DF4               	goto	u1585
  4477  05FC  083F               	movf	??_SendMemoryData+4,w
  4478  05FD  04BB               	iorwf	??_SendMemoryData,f
  4479  05FE  0840               	movf	??_SendMemoryData+5,w
  4480  05FF  04BC               	iorwf	??_SendMemoryData+1,f
  4481  0600  0841               	movf	??_SendMemoryData+6,w
  4482  0601  04BD               	iorwf	??_SendMemoryData+2,f
  4483  0602  0842               	movf	??_SendMemoryData+7,w
  4484  0603  04BE               	iorwf	??_SendMemoryData+3,f
  4485  0604  083E               	movf	??_SendMemoryData+3,w
  4486  0605  00CE               	movwf	SendMemoryData@finalAddress+3
  4487  0606  083D               	movf	??_SendMemoryData+2,w
  4488  0607  00CD               	movwf	SendMemoryData@finalAddress+2
  4489  0608  083C               	movf	??_SendMemoryData+1,w
  4490  0609  00CC               	movwf	SendMemoryData@finalAddress+1
  4491  060A  083B               	movf	??_SendMemoryData,w
  4492  060B  00CB               	movwf	SendMemoryData@finalAddress
  4493                           
  4494                           ;functions.c: 1221: finalAddress = (finalAddress << 8) | addr1;
  4495  060C  0846               	movf	SendMemoryData@addr1,w
  4496  060D  00BB               	movwf	??_SendMemoryData
  4497  060E  01BC               	clrf	??_SendMemoryData+1
  4498  060F  01BD               	clrf	??_SendMemoryData+2
  4499  0610  01BE               	clrf	??_SendMemoryData+3
  4500  0611  084B               	movf	SendMemoryData@finalAddress,w
  4501  0612  00BF               	movwf	??_SendMemoryData+4
  4502  0613  084C               	movf	SendMemoryData@finalAddress+1,w
  4503  0614  00C0               	movwf	??_SendMemoryData+5
  4504  0615  084D               	movf	SendMemoryData@finalAddress+2,w
  4505  0616  00C1               	movwf	??_SendMemoryData+6
  4506  0617  084E               	movf	SendMemoryData@finalAddress+3,w
  4507  0618  00C2               	movwf	??_SendMemoryData+7
  4508  0619  3008               	movlw	8
  4509  061A                     u1595:	
  4510  061A  1003               	clrc
  4511  061B  0DBF               	rlf	??_SendMemoryData+4,f
  4512  061C  0DC0               	rlf	??_SendMemoryData+5,f
  4513  061D  0DC1               	rlf	??_SendMemoryData+6,f
  4514  061E  0DC2               	rlf	??_SendMemoryData+7,f
  4515  061F  3EFF               	addlw	-1
  4516  0620  1D03               	skipz
  4517  0621  2E1A               	goto	u1595
  4518  0622  083F               	movf	??_SendMemoryData+4,w
  4519  0623  04BB               	iorwf	??_SendMemoryData,f
  4520  0624  0840               	movf	??_SendMemoryData+5,w
  4521  0625  04BC               	iorwf	??_SendMemoryData+1,f
  4522  0626  0841               	movf	??_SendMemoryData+6,w
  4523  0627  04BD               	iorwf	??_SendMemoryData+2,f
  4524  0628  0842               	movf	??_SendMemoryData+7,w
  4525  0629  04BE               	iorwf	??_SendMemoryData+3,f
  4526  062A  083E               	movf	??_SendMemoryData+3,w
  4527  062B  00CE               	movwf	SendMemoryData@finalAddress+3
  4528  062C  083D               	movf	??_SendMemoryData+2,w
  4529  062D  00CD               	movwf	SendMemoryData@finalAddress+2
  4530  062E  083C               	movf	??_SendMemoryData+1,w
  4531  062F  00CC               	movwf	SendMemoryData@finalAddress+1
  4532  0630  083B               	movf	??_SendMemoryData,w
  4533  0631  00CB               	movwf	SendMemoryData@finalAddress
  4534                           
  4535                           ;functions.c: 1223: for(address = 0; address < finalAddress; address++)
  4536  0632  3000               	movlw	0
  4537  0633  00CA               	movwf	SendMemoryData@address+3
  4538  0634  3000               	movlw	0
  4539  0635  00C9               	movwf	SendMemoryData@address+2
  4540  0636  3000               	movlw	0
  4541  0637  00C8               	movwf	SendMemoryData@address+1
  4542  0638  3000               	movlw	0
  4543  0639  00C7               	movwf	SendMemoryData@address
  4544  063A                     l2695:	
  4545  063A  084E               	movf	SendMemoryData@finalAddress+3,w
  4546  063B  024A               	subwf	SendMemoryData@address+3,w
  4547  063C  1D03               	skipz
  4548  063D  2E48               	goto	u1625
  4549  063E  084D               	movf	SendMemoryData@finalAddress+2,w
  4550  063F  0249               	subwf	SendMemoryData@address+2,w
  4551  0640  1D03               	skipz
  4552  0641  2E48               	goto	u1625
  4553  0642  084C               	movf	SendMemoryData@finalAddress+1,w
  4554  0643  0248               	subwf	SendMemoryData@address+1,w
  4555  0644  1D03               	skipz
  4556  0645  2E48               	goto	u1625
  4557  0646  084B               	movf	SendMemoryData@finalAddress,w
  4558  0647  0247               	subwf	SendMemoryData@address,w
  4559  0648                     u1625:	
  4560  0648  1803               	btfsc	3,0
  4561  0649  2EAF               	goto	l2697
  4562                           
  4563                           ;functions.c: 1224: {
  4564                           ;functions.c: 1226: addr1 = address & 0x00FF;
  4565  064A  0847               	movf	SendMemoryData@address,w
  4566  064B  00BB               	movwf	??_SendMemoryData
  4567  064C  083B               	movf	??_SendMemoryData,w
  4568  064D  00C6               	movwf	SendMemoryData@addr1
  4569                           
  4570                           ;functions.c: 1227: addr2 = address >> 8 & 0x00FF;
  4571  064E  0847               	movf	SendMemoryData@address,w
  4572  064F  00BB               	movwf	??_SendMemoryData
  4573  0650  0848               	movf	SendMemoryData@address+1,w
  4574  0651  00BC               	movwf	??_SendMemoryData+1
  4575  0652  0849               	movf	SendMemoryData@address+2,w
  4576  0653  00BD               	movwf	??_SendMemoryData+2
  4577  0654  084A               	movf	SendMemoryData@address+3,w
  4578  0655  00BE               	movwf	??_SendMemoryData+3
  4579  0656  3008               	movlw	8
  4580  0657                     u1605:	
  4581  0657  1003               	clrc
  4582  0658  0CBE               	rrf	??_SendMemoryData+3,f
  4583  0659  0CBD               	rrf	??_SendMemoryData+2,f
  4584  065A  0CBC               	rrf	??_SendMemoryData+1,f
  4585  065B  0CBB               	rrf	??_SendMemoryData,f
  4586  065C  3EFF               	addlw	-1
  4587  065D  1D03               	skipz
  4588  065E  2E57               	goto	u1605
  4589  065F  083B               	movf	??_SendMemoryData,w
  4590  0660  00BF               	movwf	??_SendMemoryData+4
  4591  0661  083F               	movf	??_SendMemoryData+4,w
  4592  0662  00C5               	movwf	SendMemoryData@addr2
  4593                           
  4594                           ;functions.c: 1228: addr3 = address >> 16 & 0x00FF;
  4595  0663  0847               	movf	SendMemoryData@address,w
  4596  0664  00BB               	movwf	??_SendMemoryData
  4597  0665  0848               	movf	SendMemoryData@address+1,w
  4598  0666  00BC               	movwf	??_SendMemoryData+1
  4599  0667  0849               	movf	SendMemoryData@address+2,w
  4600  0668  00BD               	movwf	??_SendMemoryData+2
  4601  0669  084A               	movf	SendMemoryData@address+3,w
  4602  066A  00BE               	movwf	??_SendMemoryData+3
  4603  066B  3010               	movlw	16
  4604  066C                     u1615:	
  4605  066C  1003               	clrc
  4606  066D  0CBE               	rrf	??_SendMemoryData+3,f
  4607  066E  0CBD               	rrf	??_SendMemoryData+2,f
  4608  066F  0CBC               	rrf	??_SendMemoryData+1,f
  4609  0670  0CBB               	rrf	??_SendMemoryData,f
  4610  0671  3EFF               	addlw	-1
  4611  0672  1D03               	skipz
  4612  0673  2E6C               	goto	u1615
  4613  0674  083B               	movf	??_SendMemoryData,w
  4614  0675  00BF               	movwf	??_SendMemoryData+4
  4615  0676  083F               	movf	??_SendMemoryData+4,w
  4616  0677  00C4               	movwf	SendMemoryData@addr3
  4617                           
  4618                           ;functions.c: 1231: read_write_flash_ram(
  4619                           ;functions.c: 1232: 1,
  4620                           ;functions.c: 1233: 1,
  4621                           ;functions.c: 1234: addr3,
  4622                           ;functions.c: 1235: addr2,
  4623                           ;functions.c: 1236: addr1,
  4624                           ;functions.c: 1237: &value);
  4625  0678  3001               	movlw	1
  4626  0679  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  4627  067A  3000               	movlw	0
  4628  067B  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  4629  067C  0844               	movf	SendMemoryData@addr3,w
  4630  067D  00BB               	movwf	??_SendMemoryData
  4631  067E  083B               	movf	??_SendMemoryData,w
  4632  067F  00A7               	movwf	read_write_flash_ram@flash_sector
  4633  0680  0845               	movf	SendMemoryData@addr2,w
  4634  0681  00BC               	movwf	??_SendMemoryData+1
  4635  0682  083C               	movf	??_SendMemoryData+1,w
  4636  0683  00A8               	movwf	read_write_flash_ram@flash_page
  4637  0684  0846               	movf	SendMemoryData@addr1,w
  4638  0685  00BD               	movwf	??_SendMemoryData+2
  4639  0686  083D               	movf	??_SendMemoryData+2,w
  4640  0687  00A9               	movwf	read_write_flash_ram@offset
  4641  0688  3043               	movlw	(low (SendMemoryData@value| 0))& (0+255)
  4642  0689  00BE               	movwf	??_SendMemoryData+3
  4643  068A  083E               	movf	??_SendMemoryData+3,w
  4644  068B  00AA               	movwf	read_write_flash_ram@mem_ptr
  4645  068C  3001               	movlw	1
  4646  068D  120A  158A  23AD  120A  118A  	fcall	_read_write_flash_ram
  4647                           
  4648                           ;functions.c: 1239: TransmittPacket(10, value);
  4649  0692  1283               	bcf	3,5	;RP0=0, select bank0
  4650  0693  1303               	bcf	3,6	;RP1=0, select bank0
  4651  0694  0843               	movf	SendMemoryData@value,w
  4652  0695  00BB               	movwf	??_SendMemoryData
  4653  0696  083B               	movf	??_SendMemoryData,w
  4654  0697  00B5               	movwf	TransmittPacket@value
  4655  0698  300A               	movlw	10
  4656  0699  120A  158A  24BB  120A  118A  	fcall	_TransmittPacket
  4657  069E  3001               	movlw	1
  4658  069F  1283               	bcf	3,5	;RP0=0, select bank0
  4659  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  4660  06A1  07C7               	addwf	SendMemoryData@address,f
  4661  06A2  3000               	movlw	0
  4662  06A3  1803               	skipnc
  4663  06A4  3001               	movlw	1
  4664  06A5  07C8               	addwf	SendMemoryData@address+1,f
  4665  06A6  3000               	movlw	0
  4666  06A7  1803               	skipnc
  4667  06A8  3001               	movlw	1
  4668  06A9  07C9               	addwf	SendMemoryData@address+2,f
  4669  06AA  3000               	movlw	0
  4670  06AB  1803               	skipnc
  4671  06AC  3001               	movlw	1
  4672  06AD  07CA               	addwf	SendMemoryData@address+3,f
  4673  06AE  2E3A               	goto	l2695
  4674  06AF                     l2697:	
  4675                           
  4676                           ;functions.c: 1240: }
  4677                           ;functions.c: 1241: TransmittPacket(8, 1);
  4678  06AF  01B5               	clrf	TransmittPacket@value
  4679  06B0  0AB5               	incf	TransmittPacket@value,f
  4680  06B1  3008               	movlw	8
  4681  06B2  120A  158A  24BB   	fcall	_TransmittPacket
  4682  06B5  0008               	return
  4683  06B6                     __end_of_SendMemoryData:	
  4684                           
  4685                           	psect	text15
  4686  0BAD                     __ptext15:	
  4687 ;; *************** function _read_write_flash_ram *****************
  4688 ;; Defined at:
  4689 ;;		line 107 in file "m25p16.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  one_read_zer    1    wreg     unsigned char 
  4692 ;;  bytes_to_rea    2    5[BANK0 ] unsigned short 
  4693 ;;  flash_sector    1    7[BANK0 ] unsigned char 
  4694 ;;  flash_page      1    8[BANK0 ] unsigned char 
  4695 ;;  offset          1    9[BANK0 ] unsigned char 
  4696 ;;  mem_ptr         1   10[BANK0 ] PTR unsigned char 
  4697 ;;		 -> SendMemoryData@value(1), saveDataToFlash@value(1), 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  one_read_zer    1   13[BANK0 ] unsigned char 
  4700 ;;  i               2   14[BANK0 ] unsigned short 
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  1    wreg      void 
  4703 ;; Registers used:
  4704 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4710 ;;      Params:         0       6       0       0       0
  4711 ;;      Locals:         0       3       0       0       0
  4712 ;;      Temps:          0       2       0       0       0
  4713 ;;      Totals:         0      11       0       0       0
  4714 ;;Total ram usage:       11 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    5
  4717 ;; This function calls:
  4718 ;;		_ReadSPI
  4719 ;;		_WriteSPI
  4720 ;;		_read_ram_status
  4721 ;; This function is called by:
  4722 ;;		_saveDataToFlash
  4723 ;;		_SendMemoryData
  4724 ;;		_write_flash_page
  4725 ;;		_read_flash_page
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           
  4730                           ;psect for function _read_write_flash_ram
  4731  0BAD                     _read_write_flash_ram:	
  4732                           
  4733                           ;incstack = 0
  4734                           ; Regs used in _read_write_flash_ram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4735                           ;read_write_flash_ram@one_read_zero_write stored from wreg
  4736  0BAD  1283               	bcf	3,5	;RP0=0, select bank0
  4737  0BAE  1303               	bcf	3,6	;RP1=0, select bank0
  4738  0BAF  00AD               	movwf	read_write_flash_ram@one_read_zero_write
  4739                           
  4740                           ;m25p16.c: 122: unsigned short int i;
  4741                           ;m25p16.c: 126: RD3 = 0;
  4742  0BB0  1188               	bcf	8,3	;volatile
  4743                           
  4744                           ;m25p16.c: 127: if(one_read_zero_write)
  4745  0BB1  082D               	movf	read_write_flash_ram@one_read_zero_write,w
  4746  0BB2  1903               	btfsc	3,2
  4747  0BB3  2BB6               	goto	l2543
  4748                           
  4749                           ;m25p16.c: 128: {
  4750                           ;m25p16.c: 129: WriteSPI(0x03);
  4751  0BB4  3003               	movlw	3
  4752  0BB5  2BC4               	goto	L2
  4753  0BB6                     l2543:	
  4754                           ;m25p16.c: 130: }
  4755                           
  4756                           
  4757                           ;m25p16.c: 131: else
  4758                           ;m25p16.c: 132: {
  4759                           ;m25p16.c: 133: WriteSPI(0x06);
  4760  0BB6  3006               	movlw	6
  4761  0BB7  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  4762                           
  4763                           ;m25p16.c: 134: RD3 = 1;
  4764  0BBC  1283               	bcf	3,5	;RP0=0, select bank0
  4765  0BBD  1303               	bcf	3,6	;RP1=0, select bank0
  4766  0BBE  1588               	bsf	8,3	;volatile
  4767                           
  4768                           ;m25p16.c: 135: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4769  0BBF  0000               	nop
  4770                           
  4771                           ;m25p16.c: 136: RD3 = 0;
  4772  0BC0  1283               	bcf	3,5	;RP0=0, select bank0
  4773  0BC1  1303               	bcf	3,6	;RP1=0, select bank0
  4774  0BC2  1188               	bcf	8,3	;volatile
  4775                           
  4776                           ;m25p16.c: 137: WriteSPI(0x02);
  4777  0BC3  3002               	movlw	2
  4778  0BC4                     L2:	
  4779  0BC4  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  4780                           
  4781                           ;m25p16.c: 139: }
  4782                           ;m25p16.c: 141: WriteSPI(flash_sector);
  4783  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  4784  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  4785  0BCB  0827               	movf	read_write_flash_ram@flash_sector,w
  4786  0BCC  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  4787                           
  4788                           ;m25p16.c: 142: WriteSPI(flash_page);
  4789  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  4790  0BD2  1303               	bcf	3,6	;RP1=0, select bank0
  4791  0BD3  0828               	movf	read_write_flash_ram@flash_page,w
  4792  0BD4  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  4793                           
  4794                           ;m25p16.c: 143: WriteSPI(offset);
  4795  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  4796  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  4797  0BDB  0829               	movf	read_write_flash_ram@offset,w
  4798  0BDC  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  4799                           
  4800                           ;m25p16.c: 145: for (i=0;i<bytes_to_readwrite;i++)
  4801  0BE1  1283               	bcf	3,5	;RP0=0, select bank0
  4802  0BE2  1303               	bcf	3,6	;RP1=0, select bank0
  4803  0BE3  01AE               	clrf	read_write_flash_ram@i
  4804  0BE4  01AF               	clrf	read_write_flash_ram@i+1
  4805  0BE5                     l2561:	
  4806  0BE5  0826               	movf	read_write_flash_ram@bytes_to_readwrite+1,w
  4807  0BE6  022F               	subwf	read_write_flash_ram@i+1,w
  4808  0BE7  1D03               	skipz
  4809  0BE8  2BEB               	goto	u1425
  4810  0BE9  0825               	movf	read_write_flash_ram@bytes_to_readwrite,w
  4811  0BEA  022E               	subwf	read_write_flash_ram@i,w
  4812  0BEB                     u1425:	
  4813  0BEB  1803               	btfsc	3,0
  4814  0BEC  2C16               	goto	l596
  4815                           
  4816                           ;m25p16.c: 146: {
  4817                           ;m25p16.c: 147: if (one_read_zero_write)
  4818  0BED  082D               	movf	read_write_flash_ram@one_read_zero_write,w
  4819  0BEE  1903               	btfsc	3,2
  4820  0BEF  2C01               	goto	l2557
  4821                           
  4822                           ;m25p16.c: 148: {
  4823                           ;m25p16.c: 149: mem_ptr[i] = ReadSPI();
  4824  0BF0  160A  118A  25ED  120A  158A  	fcall	_ReadSPI
  4825  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  4826  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  4827  0BF7  00AB               	movwf	??_read_write_flash_ram
  4828  0BF8  082E               	movf	read_write_flash_ram@i,w
  4829  0BF9  072A               	addwf	read_write_flash_ram@mem_ptr,w
  4830  0BFA  00AC               	movwf	??_read_write_flash_ram+1
  4831  0BFB  082C               	movf	??_read_write_flash_ram+1,w
  4832  0BFC  0084               	movwf	4
  4833  0BFD  082B               	movf	??_read_write_flash_ram,w
  4834  0BFE  1383               	bcf	3,7	;select IRP bank0
  4835  0BFF  0080               	movwf	0
  4836                           
  4837                           ;m25p16.c: 150: }
  4838  0C00  2C0D               	goto	l2559
  4839  0C01                     l2557:	
  4840                           
  4841                           ;m25p16.c: 151: else
  4842                           ;m25p16.c: 152: {
  4843                           ;m25p16.c: 153: WriteSPI(mem_ptr[i]);
  4844  0C01  082E               	movf	read_write_flash_ram@i,w
  4845  0C02  072A               	addwf	read_write_flash_ram@mem_ptr,w
  4846  0C03  00AB               	movwf	??_read_write_flash_ram
  4847  0C04  082B               	movf	??_read_write_flash_ram,w
  4848  0C05  0084               	movwf	4
  4849  0C06  1383               	bcf	3,7	;select IRP bank0
  4850  0C07  0800               	movf	0,w
  4851  0C08  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  4852  0C0D                     l2559:	
  4853  0C0D  3001               	movlw	1
  4854  0C0E  1283               	bcf	3,5	;RP0=0, select bank0
  4855  0C0F  1303               	bcf	3,6	;RP1=0, select bank0
  4856  0C10  07AE               	addwf	read_write_flash_ram@i,f
  4857  0C11  1803               	skipnc
  4858  0C12  0AAF               	incf	read_write_flash_ram@i+1,f
  4859  0C13  3000               	movlw	0
  4860  0C14  07AF               	addwf	read_write_flash_ram@i+1,f
  4861  0C15  2BE5               	goto	l2561
  4862  0C16                     l596:	
  4863                           
  4864                           ;m25p16.c: 154: }
  4865                           ;m25p16.c: 155: }
  4866                           ;m25p16.c: 157: RD3 = 1;
  4867  0C16  1588               	bsf	8,3	;volatile
  4868                           
  4869                           ;m25p16.c: 159: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4870  0C17  0000               	nop
  4871  0C18                     l2565:	
  4872                           ;m25p16.c: 160: while (read_ram_status() & 0b00000011) {
  4873                           
  4874  0C18  160A  118A  267D  120A  158A  	fcall	_read_ram_status
  4875  0C1D  3903               	andlw	3
  4876  0C1E  1903               	btfsc	3,2
  4877  0C1F  0008               	return
  4878                           
  4879                           ;m25p16.c: 161: _delay((unsigned long)((1)*(4000000/4000.0)));
  4880  0C20  30F9               	movlw	249
  4881  0C21  1283               	bcf	3,5	;RP0=0, select bank0
  4882  0C22  1303               	bcf	3,6	;RP1=0, select bank0
  4883  0C23  00AB               	movwf	??_read_write_flash_ram
  4884  0C24                     u2587:	
  4885  0C24  0000               	nop
  4886  0C25  0BAB               	decfsz	??_read_write_flash_ram,f
  4887  0C26  2C24               	goto	u2587
  4888  0C27  2C28               	nop2	;nop
  4889  0C28  0000               	nop
  4890  0C29  2C18               	goto	l2565
  4891  0C2A                     __end_of_read_write_flash_ram:	
  4892                           
  4893                           	psect	text16
  4894  167D                     __ptext16:	
  4895 ;; *************** function _read_ram_status *****************
  4896 ;; Defined at:
  4897 ;;		line 57 in file "m25p16.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;  status          1    4[BANK0 ] unsigned char 
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  1    wreg      unsigned char 
  4904 ;; Registers used:
  4905 ;;		wreg, status,2, status,0, pclath, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4911 ;;      Params:         0       0       0       0       0
  4912 ;;      Locals:         0       1       0       0       0
  4913 ;;      Temps:          0       1       0       0       0
  4914 ;;      Totals:         0       2       0       0       0
  4915 ;;Total ram usage:        2 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    4
  4918 ;; This function calls:
  4919 ;;		_ReadSPI
  4920 ;;		_WriteSPI
  4921 ;; This function is called by:
  4922 ;;		_main
  4923 ;;		_ReceivedPacketHandler
  4924 ;;		_ram_bulk_erase
  4925 ;;		_read_write_flash_ram
  4926 ;;		_write_ram_status
  4927 ;;		_ram_sector_erase
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           
  4932                           ;psect for function _read_ram_status
  4933  167D                     _read_ram_status:	
  4934                           
  4935                           ;m25p16.c: 59: unsigned char status;
  4936                           ;m25p16.c: 60: RD3 = 0;
  4937                           
  4938                           ;incstack = 0
  4939                           ; Regs used in _read_ram_status: [wreg+status,2+status,0+pclath+cstack]
  4940  167D  1283               	bcf	3,5	;RP0=0, select bank0
  4941  167E  1303               	bcf	3,6	;RP1=0, select bank0
  4942  167F  1188               	bcf	8,3	;volatile
  4943                           
  4944                           ;m25p16.c: 61: WriteSPI(0x05);
  4945  1680  3005               	movlw	5
  4946  1681  160A  118A  2628  160A  118A  	fcall	_WriteSPI
  4947                           
  4948                           ;m25p16.c: 62: status = ReadSPI();
  4949  1686  160A  118A  25ED   	fcall	_ReadSPI
  4950  1689  1283               	bcf	3,5	;RP0=0, select bank0
  4951  168A  1303               	bcf	3,6	;RP1=0, select bank0
  4952  168B  00A3               	movwf	??_read_ram_status
  4953  168C  0823               	movf	??_read_ram_status,w
  4954  168D  00A4               	movwf	read_ram_status@status
  4955                           
  4956                           ;m25p16.c: 63: RD3 = 1;
  4957  168E  1588               	bsf	8,3	;volatile
  4958                           
  4959                           ;m25p16.c: 64: return status;
  4960  168F  0824               	movf	read_ram_status@status,w
  4961  1690  0008               	return
  4962  1691                     __end_of_read_ram_status:	
  4963                           
  4964                           	psect	text17
  4965  17A8                     __ptext17:	
  4966 ;; *************** function _ReadMemoryAdress *****************
  4967 ;; Defined at:
  4968 ;;		line 988 in file "functions.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  var3            1    wreg     PTR unsigned char 
  4971 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), 
  4972 ;;  var2            1    2[BANK0 ] PTR unsigned char 
  4973 ;;		 -> SendMemoryData@addr2(1), saveDataToFlash@addr2(1), 
  4974 ;;  var1            1    3[BANK0 ] PTR unsigned char 
  4975 ;;		 -> SendMemoryData@addr1(1), saveDataToFlash@addr1(1), 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  var3            1    5[BANK0 ] PTR unsigned char 
  4978 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4988 ;;      Params:         0       2       0       0       0
  4989 ;;      Locals:         0       1       0       0       0
  4990 ;;      Temps:          0       1       0       0       0
  4991 ;;      Totals:         0       4       0       0       0
  4992 ;;Total ram usage:        4 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    3
  4995 ;; This function calls:
  4996 ;;		_eeprom_read
  4997 ;; This function is called by:
  4998 ;;		_saveDataToFlash
  4999 ;;		_SendMemoryData
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function _ReadMemoryAdress
  5005  17A8                     _ReadMemoryAdress:	
  5006                           
  5007                           ;incstack = 0
  5008                           ; Regs used in _ReadMemoryAdress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5009                           ;ReadMemoryAdress@var3 stored from wreg
  5010  17A8  1283               	bcf	3,5	;RP0=0, select bank0
  5011  17A9  1303               	bcf	3,6	;RP1=0, select bank0
  5012  17AA  00A5               	movwf	ReadMemoryAdress@var3
  5013                           
  5014                           ;functions.c: 990: *var3 = eeprom_read(1);
  5015  17AB  3001               	movlw	1
  5016  17AC  120A  158A  203D  160A  118A  	fcall	_eeprom_read
  5017  17B1  1283               	bcf	3,5	;RP0=0, select bank0
  5018  17B2  1303               	bcf	3,6	;RP1=0, select bank0
  5019  17B3  00A4               	movwf	??_ReadMemoryAdress
  5020  17B4  0825               	movf	ReadMemoryAdress@var3,w
  5021  17B5  0084               	movwf	4
  5022  17B6  0824               	movf	??_ReadMemoryAdress,w
  5023  17B7  1383               	bcf	3,7	;select IRP bank0
  5024  17B8  0080               	movwf	0
  5025                           
  5026                           ;functions.c: 991: *var2 = eeprom_read(2);
  5027  17B9  3002               	movlw	2
  5028  17BA  120A  158A  203D  160A  118A  	fcall	_eeprom_read
  5029  17BF  1283               	bcf	3,5	;RP0=0, select bank0
  5030  17C0  1303               	bcf	3,6	;RP1=0, select bank0
  5031  17C1  00A4               	movwf	??_ReadMemoryAdress
  5032  17C2  0822               	movf	ReadMemoryAdress@var2,w
  5033  17C3  0084               	movwf	4
  5034  17C4  0824               	movf	??_ReadMemoryAdress,w
  5035  17C5  1383               	bcf	3,7	;select IRP bank0
  5036  17C6  0080               	movwf	0
  5037                           
  5038                           ;functions.c: 992: *var1 = eeprom_read(3);
  5039  17C7  3003               	movlw	3
  5040  17C8  120A  158A  203D   	fcall	_eeprom_read
  5041  17CB  1283               	bcf	3,5	;RP0=0, select bank0
  5042  17CC  1303               	bcf	3,6	;RP1=0, select bank0
  5043  17CD  00A4               	movwf	??_ReadMemoryAdress
  5044  17CE  0823               	movf	ReadMemoryAdress@var1,w
  5045  17CF  0084               	movwf	4
  5046  17D0  0824               	movf	??_ReadMemoryAdress,w
  5047  17D1  1383               	bcf	3,7	;select IRP bank0
  5048  17D2  0080               	movwf	0
  5049  17D3  0008               	return
  5050  17D4                     __end_of_ReadMemoryAdress:	
  5051                           
  5052                           	psect	text18
  5053  16DA                     __ptext18:	
  5054 ;; *************** function _ResetMemoryAdress *****************
  5055 ;; Defined at:
  5056 ;;		line 1052 in file "functions.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;		None
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;		None
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0, pclath, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5070 ;;      Params:         0       0       0       0       0
  5071 ;;      Locals:         0       0       0       0       0
  5072 ;;      Temps:          0       0       0       0       0
  5073 ;;      Totals:         0       0       0       0       0
  5074 ;;Total ram usage:        0 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    3
  5077 ;; This function calls:
  5078 ;;		_eeprom_write
  5079 ;; This function is called by:
  5080 ;;		_main
  5081 ;;		_ReceivedPacketHandler
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           
  5086                           ;psect for function _ResetMemoryAdress
  5087  16DA                     _ResetMemoryAdress:	
  5088                           
  5089                           ;functions.c: 1054: eeprom_write(3,0);
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in _ResetMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  5093  16DA  1283               	bcf	3,5	;RP0=0, select bank0
  5094  16DB  1303               	bcf	3,6	;RP1=0, select bank0
  5095  16DC  01A0               	clrf	eeprom_write@value
  5096  16DD  3003               	movlw	3
  5097  16DE  120A  158A  208D  160A  118A  	fcall	_eeprom_write
  5098                           
  5099                           ;functions.c: 1055: eeprom_write(2,0);
  5100  16E3  1283               	bcf	3,5	;RP0=0, select bank0
  5101  16E4  1303               	bcf	3,6	;RP1=0, select bank0
  5102  16E5  01A0               	clrf	eeprom_write@value
  5103  16E6  3002               	movlw	2
  5104  16E7  120A  158A  208D  160A  118A  	fcall	_eeprom_write
  5105                           
  5106                           ;functions.c: 1056: eeprom_write(1,0);
  5107  16EC  1283               	bcf	3,5	;RP0=0, select bank0
  5108  16ED  1303               	bcf	3,6	;RP1=0, select bank0
  5109  16EE  01A0               	clrf	eeprom_write@value
  5110  16EF  3001               	movlw	1
  5111  16F0  120A  158A  208D   	fcall	_eeprom_write
  5112  16F3  0008               	return
  5113  16F4                     __end_of_ResetMemoryAdress:	
  5114                           
  5115                           	psect	text19
  5116  088D                     __ptext19:	
  5117 ;; *************** function _eeprom_write *****************
  5118 ;; Defined at:
  5119 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eewrite.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;  addr            1    wreg     unsigned char 
  5122 ;;  value           1    0[BANK0 ] unsigned char 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  addr            1    2[BANK0 ] unsigned char 
  5125 ;; Return value:  Size  Location     Type
  5126 ;;                  1    wreg      void 
  5127 ;; Registers used:
  5128 ;;		wreg, status,2, status,0
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5134 ;;      Params:         0       1       0       0       0
  5135 ;;      Locals:         0       1       0       0       0
  5136 ;;      Temps:          0       1       0       0       0
  5137 ;;      Totals:         0       3       0       0       0
  5138 ;;Total ram usage:        3 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:    2
  5141 ;; This function calls:
  5142 ;;		Nothing
  5143 ;; This function is called by:
  5144 ;;		_ReceivedPacketHandler
  5145 ;;		_IncreaseMemoryAdress
  5146 ;;		_ResetMemoryAdress
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           
  5151                           ;psect for function _eeprom_write
  5152  088D                     _eeprom_write:	
  5153                           
  5154                           ;incstack = 0
  5155                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  5156                           ;eeprom_write@addr stored from wreg
  5157  088D  1283               	bcf	3,5	;RP0=0, select bank0
  5158  088E  1303               	bcf	3,6	;RP1=0, select bank0
  5159  088F  00A2               	movwf	eeprom_write@addr
  5160  0890                     l703:	
  5161  0890  1683               	bsf	3,5	;RP0=1, select bank3
  5162  0891  1703               	bsf	3,6	;RP1=1, select bank3
  5163  0892  188C               	btfsc	12,1	;volsfr
  5164  0893  2890               	goto	l703
  5165  0894  1283               	bcf	3,5	;RP0=0, select bank0
  5166  0895  1303               	bcf	3,6	;RP1=0, select bank0
  5167  0896  0822               	movf	eeprom_write@addr,w
  5168  0897  1283               	bcf	3,5	;RP0=0, select bank2
  5169  0898  1703               	bsf	3,6	;RP1=1, select bank2
  5170  0899  008D               	movwf	13	;volatile
  5171  089A  1283               	bcf	3,5	;RP0=0, select bank0
  5172  089B  1303               	bcf	3,6	;RP1=0, select bank0
  5173  089C  0820               	movf	eeprom_write@value,w
  5174  089D  1283               	bcf	3,5	;RP0=0, select bank2
  5175  089E  1703               	bsf	3,6	;RP1=1, select bank2
  5176  089F  008C               	movwf	12	;volatile
  5177  08A0  303F               	movlw	63
  5178  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  5179  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  5180  08A3  00A1               	movwf	??_eeprom_write
  5181  08A4  0821               	movf	??_eeprom_write,w
  5182  08A5  1683               	bsf	3,5	;RP0=1, select bank3
  5183  08A6  1703               	bsf	3,6	;RP1=1, select bank3
  5184  08A7  058C               	andwf	12,f	;volsfr
  5185  08A8  1283               	bcf	3,5	;RP0=0, select bank0
  5186  08A9  1303               	bcf	3,6	;RP1=0, select bank0
  5187  08AA  1003               	bcf	3,0	;volatile
  5188  08AB  1B8B               	btfsc	11,7	;volatile
  5189  08AC  1403               	bsf	3,0	;volatile
  5190  08AD  138B               	bcf	11,7	;volatile
  5191  08AE  1683               	bsf	3,5	;RP0=1, select bank3
  5192  08AF  1703               	bsf	3,6	;RP1=1, select bank3
  5193  08B0  150C               	bsf	12,2	;volsfr
  5194  08B1  3055               	movlw	85
  5195  08B2  008D               	movwf	13	;volsfr
  5196  08B3  30AA               	movlw	170
  5197  08B4  008D               	movwf	13	;volsfr
  5198  08B5  148C               	bsf	12,1	;volsfr
  5199  08B6  110C               	bcf	12,2	;volsfr
  5200  08B7  1283               	bcf	3,5	;RP0=0, select bank0
  5201  08B8  1303               	bcf	3,6	;RP1=0, select bank0
  5202  08B9  1C03               	btfss	3,0	;volatile
  5203  08BA  0008               	return
  5204  08BB  178B               	bsf	11,7	;volatile
  5205  08BC  0008               	return
  5206  08BD                     __end_of_eeprom_write:	
  5207                           
  5208                           	psect	text20
  5209  1606                     __ptext20:	
  5210 ;; *************** function _OperationMode *****************
  5211 ;; Defined at:
  5212 ;;		line 964 in file "functions.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  bracketStatu    1    1[BANK0 ] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      unsigned char 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5226 ;;      Params:         0       0       0       0       0
  5227 ;;      Locals:         0       1       0       0       0
  5228 ;;      Temps:          0       1       0       0       0
  5229 ;;      Totals:         0       2       0       0       0
  5230 ;;Total ram usage:        2 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    2
  5233 ;; This function calls:
  5234 ;;		Nothing
  5235 ;; This function is called by:
  5236 ;;		_main
  5237 ;;		_ReceivedPacketHandler
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           
  5242                           ;psect for function _OperationMode
  5243  1606                     _OperationMode:	
  5244                           
  5245                           ;functions.c: 966: unsigned char bracketStatus;
  5246                           ;functions.c: 967: bracketStatus = ((~PORTB) & 0b00000111) ;
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _OperationMode: [wreg+status,2]
  5250  1606  1283               	bcf	3,5	;RP0=0, select bank0
  5251  1607  1303               	bcf	3,6	;RP1=0, select bank0
  5252  1608  0906               	comf	6,w	;volatile
  5253  1609  3907               	andlw	7
  5254  160A  00A0               	movwf	??_OperationMode
  5255  160B  0820               	movf	??_OperationMode,w
  5256  160C  00A1               	movwf	OperationMode@bracketStatus
  5257                           
  5258                           ;functions.c: 969: return bracketStatus;
  5259  160D  0821               	movf	OperationMode@bracketStatus,w
  5260  160E  0008               	return
  5261  160F                     __end_of_OperationMode:	
  5262                           
  5263                           	psect	text21
  5264  07F2                     __ptext21:	
  5265 ;; *************** function _ReadFIFO *****************
  5266 ;; Defined at:
  5267 ;;		line 775 in file "functions.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;		None
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;  value           1    4[BANK0 ] unsigned char 
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  1    wreg      unsigned char 
  5274 ;; Registers used:
  5275 ;;		wreg, status,2, status,0, pclath, cstack
  5276 ;; Tracked objects:
  5277 ;;		On entry : 0/0
  5278 ;;		On exit  : 0/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5281 ;;      Params:         0       0       0       0       0
  5282 ;;      Locals:         0       1       0       0       0
  5283 ;;      Temps:          0       1       0       0       0
  5284 ;;      Totals:         0       2       0       0       0
  5285 ;;Total ram usage:        2 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:    4
  5288 ;; This function calls:
  5289 ;;		_ReadSPI
  5290 ;; This function is called by:
  5291 ;;		_TransiverReadFIFO
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           
  5296                           ;psect for function _ReadFIFO
  5297  07F2                     _ReadFIFO:	
  5298                           
  5299                           ;functions.c: 777: BYTE value;
  5300                           ;functions.c: 778: RA5 = 0;
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _ReadFIFO: [wreg+status,2+status,0+pclath+cstack]
  5304  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  5305  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  5306  07F4  1285               	bcf	5,5	;volatile
  5307                           
  5308                           ;functions.c: 779: value = ReadSPI();
  5309  07F5  160A  118A  25ED   	fcall	_ReadSPI
  5310  07F8  1283               	bcf	3,5	;RP0=0, select bank0
  5311  07F9  1303               	bcf	3,6	;RP1=0, select bank0
  5312  07FA  00A3               	movwf	??_ReadFIFO
  5313  07FB  0823               	movf	??_ReadFIFO,w
  5314  07FC  00A4               	movwf	ReadFIFO@value
  5315                           
  5316                           ;functions.c: 780: RA5 = 1;
  5317  07FD  1685               	bsf	5,5	;volatile
  5318                           
  5319                           ;functions.c: 781: return value;
  5320  07FE  0824               	movf	ReadFIFO@value,w
  5321  07FF  0008               	return
  5322  0800                     __end_of_ReadFIFO:	
  5323                           
  5324                           	psect	text22
  5325  0F16                     __ptext22:	
  5326 ;; *************** function _TransiverInit *****************
  5327 ;; Defined at:
  5328 ;;		line 540 in file "functions.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;		None
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;		None
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  1    wreg      void 
  5335 ;; Registers used:
  5336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5342 ;;      Params:         0       0       0       0       0
  5343 ;;      Locals:         0       0       0       0       0
  5344 ;;      Temps:          0       1       0       0       0
  5345 ;;      Totals:         0       1       0       0       0
  5346 ;;Total ram usage:        1 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    7
  5349 ;; This function calls:
  5350 ;;		_Blink
  5351 ;;		_FindChannel
  5352 ;;		_RegisterRead
  5353 ;;		_RegisterSet
  5354 ;;		_SetRFMode
  5355 ;; This function is called by:
  5356 ;;		_main
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           
  5361                           ;psect for function _TransiverInit
  5362  0F16                     _TransiverInit:	
  5363                           
  5364                           ;functions.c: 543: RegisterSet(0x00, 0x30);
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _TransiverInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5368  0F16  3030               	movlw	48
  5369  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  5370  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  5371  0F19  00B5               	movwf	??_TransiverInit
  5372  0F1A  0835               	movf	??_TransiverInit,w
  5373  0F1B  00A7               	movwf	RegisterSet@value
  5374  0F1C  3000               	movlw	0
  5375  0F1D  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5376                           
  5377                           ;functions.c: 544: RegisterSet(0x01,(0xA8));
  5378  0F22  30A8               	movlw	168
  5379  0F23  1283               	bcf	3,5	;RP0=0, select bank0
  5380  0F24  1303               	bcf	3,6	;RP1=0, select bank0
  5381  0F25  00B5               	movwf	??_TransiverInit
  5382  0F26  0835               	movf	??_TransiverInit,w
  5383  0F27  00A7               	movwf	RegisterSet@value
  5384  0F28  3001               	movlw	1
  5385  0F29  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5386                           
  5387                           ;functions.c: 545: RegisterSet(0x02, 0x09);
  5388  0F2E  3009               	movlw	9
  5389  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  5390  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  5391  0F31  00B5               	movwf	??_TransiverInit
  5392  0F32  0835               	movf	??_TransiverInit,w
  5393  0F33  00A7               	movwf	RegisterSet@value
  5394  0F34  3002               	movlw	2
  5395  0F35  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5396                           
  5397                           ;functions.c: 546: RegisterSet(0x03, 0x07);
  5398  0F3A  3007               	movlw	7
  5399  0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  5400  0F3C  1303               	bcf	3,6	;RP1=0, select bank0
  5401  0F3D  00B5               	movwf	??_TransiverInit
  5402  0F3E  0835               	movf	??_TransiverInit,w
  5403  0F3F  00A7               	movwf	RegisterSet@value
  5404  0F40  3003               	movlw	3
  5405  0F41  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5406                           
  5407                           ;functions.c: 547: RegisterSet(0x05,(0x0A));
  5408  0F46  300A               	movlw	10
  5409  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  5410  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  5411  0F49  00B5               	movwf	??_TransiverInit
  5412  0F4A  0835               	movf	??_TransiverInit,w
  5413  0F4B  00A7               	movwf	RegisterSet@value
  5414  0F4C  3005               	movlw	5
  5415  0F4D  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5416                           
  5417                           ;functions.c: 548: RegisterSet(0x0D,(0x00|0xB0|0x09));
  5418  0F52  30B9               	movlw	185
  5419  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  5420  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  5421  0F55  00B5               	movwf	??_TransiverInit
  5422  0F56  0835               	movf	??_TransiverInit,w
  5423  0F57  00A7               	movwf	RegisterSet@value
  5424  0F58  300D               	movlw	13
  5425  0F59  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5426                           
  5427                           ;functions.c: 549: RegisterSet(0x0E,(0x01|0x10|0x01));
  5428  0F5E  3011               	movlw	17
  5429  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  5430  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  5431  0F61  00B5               	movwf	??_TransiverInit
  5432  0F62  0835               	movf	??_TransiverInit,w
  5433  0F63  00A7               	movwf	RegisterSet@value
  5434  0F64  300E               	movlw	14
  5435  0F65  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5436                           
  5437                           ;functions.c: 550: RegisterSet(0x10, 0xA3);
  5438  0F6A  30A3               	movlw	163
  5439  0F6B  1283               	bcf	3,5	;RP0=0, select bank0
  5440  0F6C  1303               	bcf	3,6	;RP1=0, select bank0
  5441  0F6D  00B5               	movwf	??_TransiverInit
  5442  0F6E  0835               	movf	??_TransiverInit,w
  5443  0F6F  00A7               	movwf	RegisterSet@value
  5444  0F70  3010               	movlw	16
  5445  0F71  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5446                           
  5447                           ;functions.c: 551: RegisterSet(0x12,(0x18|0x20|0x06));
  5448  0F76  303E               	movlw	62
  5449  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  5450  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  5451  0F79  00B5               	movwf	??_TransiverInit
  5452  0F7A  0835               	movf	??_TransiverInit,w
  5453  0F7B  00A7               	movwf	RegisterSet@value
  5454  0F7C  3012               	movlw	18
  5455  0F7D  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5456                           
  5457                           ;functions.c: 552: RegisterSet(0x16,('S'));
  5458  0F82  3053               	movlw	83
  5459  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  5460  0F84  1303               	bcf	3,6	;RP1=0, select bank0
  5461  0F85  00B5               	movwf	??_TransiverInit
  5462  0F86  0835               	movf	??_TransiverInit,w
  5463  0F87  00A7               	movwf	RegisterSet@value
  5464  0F88  3016               	movlw	22
  5465  0F89  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5466                           
  5467                           ;functions.c: 553: RegisterSet(0x17,('Y'));
  5468  0F8E  3059               	movlw	89
  5469  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  5470  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  5471  0F91  00B5               	movwf	??_TransiverInit
  5472  0F92  0835               	movf	??_TransiverInit,w
  5473  0F93  00A7               	movwf	RegisterSet@value
  5474  0F94  3017               	movlw	23
  5475  0F95  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5476                           
  5477                           ;functions.c: 554: RegisterSet(0x18,('N'));
  5478  0F9A  304E               	movlw	78
  5479  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  5480  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  5481  0F9D  00B5               	movwf	??_TransiverInit
  5482  0F9E  0835               	movf	??_TransiverInit,w
  5483  0F9F  00A7               	movwf	RegisterSet@value
  5484  0FA0  3018               	movlw	24
  5485  0FA1  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5486                           
  5487                           ;functions.c: 555: RegisterSet(0x19,('C'));
  5488  0FA6  3043               	movlw	67
  5489  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  5490  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  5491  0FA9  00B5               	movwf	??_TransiverInit
  5492  0FAA  0835               	movf	??_TransiverInit,w
  5493  0FAB  00A7               	movwf	RegisterSet@value
  5494  0FAC  3019               	movlw	25
  5495  0FAD  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5496                           
  5497                           ;functions.c: 556: RegisterSet(0x1A, 0x72);
  5498  0FB2  3072               	movlw	114
  5499  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  5500  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  5501  0FB5  00B5               	movwf	??_TransiverInit
  5502  0FB6  0835               	movf	??_TransiverInit,w
  5503  0FB7  00A7               	movwf	RegisterSet@value
  5504  0FB8  301A               	movlw	26
  5505  0FB9  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5506                           
  5507                           ;functions.c: 557: RegisterSet(0x1B, 0x3C);
  5508  0FBE  303C               	movlw	60
  5509  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  5510  0FC0  1303               	bcf	3,6	;RP1=0, select bank0
  5511  0FC1  00B5               	movwf	??_TransiverInit
  5512  0FC2  0835               	movf	??_TransiverInit,w
  5513  0FC3  00A7               	movwf	RegisterSet@value
  5514  0FC4  301B               	movlw	27
  5515  0FC5  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5516                           
  5517                           ;functions.c: 558: RegisterSet(0x1F, 0x80);
  5518  0FCA  3080               	movlw	128
  5519  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  5520  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  5521  0FCD  00B5               	movwf	??_TransiverInit
  5522  0FCE  0835               	movf	??_TransiverInit,w
  5523  0FCF  00A7               	movwf	RegisterSet@value
  5524  0FD0  301F               	movlw	31
  5525  0FD1  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5526                           
  5527                           ;functions.c: 559: RegisterSet(0x00, (RegisterRead(0x00)|0x01));
  5528  0FD6  3000               	movlw	0
  5529  0FD7  160A  118A  26F4  120A  158A  	fcall	_RegisterRead
  5530  0FDC  3801               	iorlw	1
  5531  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  5532  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  5533  0FDF  00B5               	movwf	??_TransiverInit
  5534  0FE0  0835               	movf	??_TransiverInit,w
  5535  0FE1  00A7               	movwf	RegisterSet@value
  5536  0FE2  3000               	movlw	0
  5537  0FE3  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  5538                           
  5539                           ;functions.c: 561: if(FindChannel() == 1)
  5540  0FE8  120A  118A  26B6  120A  158A  	fcall	_FindChannel
  5541  0FED  3A01               	xorlw	1
  5542  0FEE  1D03               	skipz
  5543  0FEF  2FFB               	goto	l3039
  5544                           
  5545                           ;functions.c: 562: Blink(1);
  5546  0FF0  3001               	movlw	1
  5547  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  5548  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  5549  0FF3  00A6               	movwf	Blink@n
  5550  0FF4  3000               	movlw	0
  5551  0FF5  00A7               	movwf	Blink@n+1
  5552  0FF6  120A  158A  20BD  120A  158A  	fcall	_Blink
  5553  0FFB                     l3039:	
  5554                           
  5555                           ;functions.c: 563: SetRFMode(0x00);
  5556  0FFB  3000               	movlw	0
  5557  0FFC  120A  158A  233E   	fcall	_SetRFMode
  5558  0FFF  0008               	return
  5559  1000                     __end_of_TransiverInit:	
  5560                           
  5561                           	psect	text23
  5562  08BD                     __ptext23:	
  5563 ;; *************** function _Blink *****************
  5564 ;; Defined at:
  5565 ;;		line 688 in file "functions.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  n               2    6[BANK0 ] int 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  i               2    9[BANK0 ] int 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0, pclath, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5579 ;;      Params:         0       2       0       0       0
  5580 ;;      Locals:         0       2       0       0       0
  5581 ;;      Temps:          0       1       0       0       0
  5582 ;;      Totals:         0       5       0       0       0
  5583 ;;Total ram usage:        5 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    3
  5586 ;; This function calls:
  5587 ;;		_DelayDs
  5588 ;; This function is called by:
  5589 ;;		_TransiverInit
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           
  5594                           ;psect for function _Blink
  5595  08BD                     _Blink:	
  5596                           
  5597                           ;functions.c: 690: for(int i = 1;i<=n;i++)
  5598                           
  5599                           ;incstack = 0
  5600                           ; Regs used in _Blink: [wreg+status,2+status,0+pclath+cstack]
  5601  08BD  3001               	movlw	1
  5602  08BE  1283               	bcf	3,5	;RP0=0, select bank0
  5603  08BF  1303               	bcf	3,6	;RP1=0, select bank0
  5604  08C0  00A9               	movwf	Blink@i
  5605  08C1  3000               	movlw	0
  5606  08C2  00AA               	movwf	Blink@i+1
  5607  08C3                     l2877:	
  5608  08C3  0827               	movf	Blink@n+1,w
  5609  08C4  3A80               	xorlw	128
  5610  08C5  00A8               	movwf	??_Blink
  5611  08C6  082A               	movf	Blink@i+1,w
  5612  08C7  3A80               	xorlw	128
  5613  08C8  0228               	subwf	??_Blink,w
  5614  08C9  1D03               	skipz
  5615  08CA  28CD               	goto	u1935
  5616  08CB  0829               	movf	Blink@i,w
  5617  08CC  0226               	subwf	Blink@n,w
  5618  08CD                     u1935:	
  5619  08CD  1C03               	btfss	3,0
  5620  08CE  0008               	return
  5621                           
  5622                           ;functions.c: 691: {
  5623                           ;functions.c: 692: RC1 = 1;
  5624  08CF  1283               	bcf	3,5	;RP0=0, select bank0
  5625  08D0  1303               	bcf	3,6	;RP1=0, select bank0
  5626  08D1  1487               	bsf	7,1	;volatile
  5627                           
  5628                           ;functions.c: 693: DelayDs(2);
  5629  08D2  3002               	movlw	2
  5630  08D3  00A0               	movwf	DelayDs@cnt
  5631  08D4  3000               	movlw	0
  5632  08D5  00A1               	movwf	DelayDs@cnt+1
  5633  08D6  160A  118A  2732  120A  158A  	fcall	_DelayDs
  5634                           
  5635                           ;functions.c: 694: RC1 = 0;
  5636  08DB  1283               	bcf	3,5	;RP0=0, select bank0
  5637  08DC  1303               	bcf	3,6	;RP1=0, select bank0
  5638  08DD  1087               	bcf	7,1	;volatile
  5639                           
  5640                           ;functions.c: 695: DelayDs(6);
  5641  08DE  3006               	movlw	6
  5642  08DF  00A0               	movwf	DelayDs@cnt
  5643  08E0  3000               	movlw	0
  5644  08E1  00A1               	movwf	DelayDs@cnt+1
  5645  08E2  160A  118A  2732  120A  158A  	fcall	_DelayDs
  5646  08E7  3001               	movlw	1
  5647  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  5648  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  5649  08EA  07A9               	addwf	Blink@i,f
  5650  08EB  1803               	skipnc
  5651  08EC  0AAA               	incf	Blink@i+1,f
  5652  08ED  3000               	movlw	0
  5653  08EE  07AA               	addwf	Blink@i+1,f
  5654  08EF  28C3               	goto	l2877
  5655  08F0                     __end_of_Blink:	
  5656                           
  5657                           	psect	text24
  5658  0A6E                     __ptext24:	
  5659 ;; *************** function _PICInit *****************
  5660 ;; Defined at:
  5661 ;;		line 428 in file "functions.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;		None
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;		None
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      void 
  5668 ;; Registers used:
  5669 ;;		wreg, status,2, status,0
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5675 ;;      Params:         0       0       0       0       0
  5676 ;;      Locals:         0       0       0       0       0
  5677 ;;      Temps:          0       0       0       0       0
  5678 ;;      Totals:         0       0       0       0       0
  5679 ;;Total ram usage:        0 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    2
  5682 ;; This function calls:
  5683 ;;		Nothing
  5684 ;; This function is called by:
  5685 ;;		_main
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _PICInit
  5691  0A6E                     _PICInit:	
  5692                           
  5693                           ;functions.c: 432: OSCCONbits.IRCF2 = 1;
  5694                           
  5695                           ;incstack = 0
  5696                           ; Regs used in _PICInit: [wreg+status,2+status,0]
  5697  0A6E  1683               	bsf	3,5	;RP0=1, select bank1
  5698  0A6F  1303               	bcf	3,6	;RP1=0, select bank1
  5699  0A70  170F               	bsf	15,6	;volatile
  5700                           
  5701                           ;functions.c: 433: OSCCONbits.IRCF1 = 1;
  5702  0A71  168F               	bsf	15,5	;volatile
  5703                           
  5704                           ;functions.c: 434: OSCCONbits.IRCF0 = 0;
  5705  0A72  120F               	bcf	15,4	;volatile
  5706                           
  5707                           ;functions.c: 435: OSCCONbits.SCS = 1;
  5708  0A73  140F               	bsf	15,0	;volatile
  5709                           
  5710                           ;functions.c: 438: PORTA = 0x00;
  5711  0A74  1283               	bcf	3,5	;RP0=0, select bank0
  5712  0A75  1303               	bcf	3,6	;RP1=0, select bank0
  5713  0A76  0185               	clrf	5	;volatile
  5714                           
  5715                           ;functions.c: 439: PORTB = 0x00;
  5716  0A77  0186               	clrf	6	;volatile
  5717                           
  5718                           ;functions.c: 440: PORTC = 0x00;
  5719  0A78  0187               	clrf	7	;volatile
  5720                           
  5721                           ;functions.c: 441: PORTD = 0x00;
  5722  0A79  0188               	clrf	8	;volatile
  5723                           
  5724                           ;functions.c: 442: PORTE = 0x00;
  5725  0A7A  0189               	clrf	9	;volatile
  5726                           
  5727                           ;functions.c: 444: TRISA = 0b00001011;
  5728  0A7B  300B               	movlw	11
  5729  0A7C  1683               	bsf	3,5	;RP0=1, select bank1
  5730  0A7D  1303               	bcf	3,6	;RP1=0, select bank1
  5731  0A7E  0085               	movwf	5	;volatile
  5732                           
  5733                           ;functions.c: 445: TRISB = 0b00111101;
  5734  0A7F  303D               	movlw	61
  5735  0A80  0086               	movwf	6	;volatile
  5736                           
  5737                           ;functions.c: 446: TRISC = 0b00010000;
  5738  0A81  3010               	movlw	16
  5739  0A82  0087               	movwf	7	;volatile
  5740                           
  5741                           ;functions.c: 447: TRISD = 0b00000111;
  5742  0A83  3007               	movlw	7
  5743  0A84  0088               	movwf	8	;volatile
  5744                           
  5745                           ;functions.c: 448: TRISE = 0b00000111;
  5746  0A85  3007               	movlw	7
  5747  0A86  0089               	movwf	9	;volatile
  5748                           
  5749                           ;functions.c: 450: ANSEL = 0b00000000;
  5750  0A87  1683               	bsf	3,5	;RP0=1, select bank3
  5751  0A88  1703               	bsf	3,6	;RP1=1, select bank3
  5752  0A89  0188               	clrf	8	;volatile
  5753                           
  5754                           ;functions.c: 451: ANSELH = 0b00000000;
  5755  0A8A  0189               	clrf	9	;volatile
  5756                           
  5757                           ;functions.c: 452: ANSELbits.ANS0 = 1;
  5758  0A8B  1408               	bsf	8,0	;volatile
  5759                           
  5760                           ;functions.c: 453: ANSELbits.ANS3 = 1;
  5761  0A8C  1588               	bsf	8,3	;volatile
  5762                           
  5763                           ;functions.c: 454: ANSELbits.ANS5 = 1;
  5764  0A8D  1688               	bsf	8,5	;volatile
  5765                           
  5766                           ;functions.c: 455: ANSELbits.ANS6 = 1;
  5767  0A8E  1708               	bsf	8,6	;volatile
  5768                           
  5769                           ;functions.c: 456: ANSELbits.ANS7 = 1;
  5770  0A8F  1788               	bsf	8,7	;volatile
  5771                           
  5772                           ;functions.c: 457: ANSELHbits.ANS8 = 1;
  5773  0A90  1409               	bsf	9,0	;volatile
  5774                           
  5775                           ;functions.c: 459: OPTION_REGbits.nRBPU = 0;
  5776  0A91  1683               	bsf	3,5	;RP0=1, select bank1
  5777  0A92  1303               	bcf	3,6	;RP1=0, select bank1
  5778  0A93  1381               	bcf	1,7	;volatile
  5779                           
  5780                           ;functions.c: 460: WPUBbits.WPUB0 = 1;
  5781  0A94  1415               	bsf	21,0	;volatile
  5782  0A95                     l402:	
  5783                           ;functions.c: 461: while(!RB0);
  5784                           
  5785  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  5786  0A96  1C06               	btfss	6,0	;volatile
  5787  0A97  2A95               	goto	l402
  5788                           
  5789                           ;functions.c: 462: WPUBbits.WPUB5 = 1;
  5790  0A98  1683               	bsf	3,5	;RP0=1, select bank1
  5791  0A99  1303               	bcf	3,6	;RP1=0, select bank1
  5792  0A9A  1695               	bsf	21,5	;volatile
  5793  0A9B                     l405:	
  5794                           ;functions.c: 463: while(!RB5);
  5795                           
  5796  0A9B  1283               	bcf	3,5	;RP0=0, select bank0
  5797  0A9C  1E86               	btfss	6,5	;volatile
  5798  0A9D  2A9B               	goto	l405
  5799                           
  5800                           ;functions.c: 466: SSPCONbits.SSPM=0x00;
  5801  0A9E  30F0               	movlw	-16
  5802  0A9F  0594               	andwf	20,f	;volatile
  5803                           
  5804                           ;functions.c: 467: SSPCONbits.CKP=0;
  5805  0AA0  1214               	bcf	20,4	;volatile
  5806                           
  5807                           ;functions.c: 468: SSPSTATbits.CKE=1;
  5808  0AA1  1683               	bsf	3,5	;RP0=1, select bank1
  5809  0AA2  1303               	bcf	3,6	;RP1=0, select bank1
  5810  0AA3  1714               	bsf	20,6	;volatile
  5811                           
  5812                           ;functions.c: 469: SSPSTATbits.SMP=0;
  5813  0AA4  1394               	bcf	20,7	;volatile
  5814                           
  5815                           ;functions.c: 470: SSPCONbits.SSPEN=0x01;
  5816  0AA5  1283               	bcf	3,5	;RP0=0, select bank0
  5817  0AA6  1303               	bcf	3,6	;RP1=0, select bank0
  5818  0AA7  1694               	bsf	20,5	;volatile
  5819                           
  5820                           ;functions.c: 471: SSPIE = 0;
  5821  0AA8  1683               	bsf	3,5	;RP0=1, select bank1
  5822  0AA9  1303               	bcf	3,6	;RP1=0, select bank1
  5823  0AAA  118C               	bcf	12,3	;volatile
  5824                           
  5825                           ;functions.c: 474: RA5 = 1;
  5826  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  5827  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  5828  0AAD  1685               	bsf	5,5	;volatile
  5829                           
  5830                           ;functions.c: 475: RA4 = 1;
  5831  0AAE  1605               	bsf	5,4	;volatile
  5832                           
  5833                           ;functions.c: 476: RD4 = 1;
  5834  0AAF  1608               	bsf	8,4	;volatile
  5835                           
  5836                           ;functions.c: 477: RD3 = 1;
  5837  0AB0  1588               	bsf	8,3	;volatile
  5838                           
  5839                           ;functions.c: 479: RB1 = 1;
  5840  0AB1  1486               	bsf	6,1	;volatile
  5841                           
  5842                           ;functions.c: 484: INTCONbits.RBIE = 1;
  5843  0AB2  158B               	bsf	11,3	;volatile
  5844                           
  5845                           ;functions.c: 485: INTCONbits.PEIE = 1;
  5846  0AB3  170B               	bsf	11,6	;volatile
  5847                           
  5848                           ;functions.c: 486: PIE1bits.TMR1IE = 1;
  5849  0AB4  1683               	bsf	3,5	;RP0=1, select bank1
  5850  0AB5  1303               	bcf	3,6	;RP1=0, select bank1
  5851  0AB6  140C               	bsf	12,0	;volatile
  5852                           
  5853                           ;functions.c: 487: INTCONbits.GIE = 1;
  5854  0AB7  178B               	bsf	11,7	;volatile
  5855                           
  5856                           ;functions.c: 488: IOCBbits.IOCB5 = 1;
  5857  0AB8  1696               	bsf	22,5	;volatile
  5858                           
  5859                           ;functions.c: 491: T1CON = 0b00110000;
  5860  0AB9  3030               	movlw	48
  5861  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  5862  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  5863  0ABC  0090               	movwf	16	;volatile
  5864                           
  5865                           ;functions.c: 492: TMR1H = 0x0B;
  5866  0ABD  300B               	movlw	11
  5867  0ABE  008F               	movwf	15	;volatile
  5868                           
  5869                           ;functions.c: 493: TMR1L = 0xDB;
  5870  0ABF  30DB               	movlw	219
  5871  0AC0  008E               	movwf	14	;volatile
  5872                           
  5873                           ;functions.c: 494: T1CONbits.TMR1ON = 1;
  5874  0AC1  1410               	bsf	16,0	;volatile
  5875                           
  5876                           ;functions.c: 497: ADCON0bits.ADCS0 = 0;
  5877  0AC2  131F               	bcf	31,6	;volatile
  5878                           
  5879                           ;functions.c: 498: ADCON0bits.ADCS1 = 0;
  5880  0AC3  139F               	bcf	31,7	;volatile
  5881                           
  5882                           ;functions.c: 499: ADCON1bits.ADFM = 0;
  5883  0AC4  1683               	bsf	3,5	;RP0=1, select bank1
  5884  0AC5  1303               	bcf	3,6	;RP1=0, select bank1
  5885  0AC6  139F               	bcf	31,7	;volatile
  5886                           
  5887                           ;functions.c: 500: ADCON1bits.VCFG1 = 0;
  5888  0AC7  129F               	bcf	31,5	;volatile
  5889                           
  5890                           ;functions.c: 501: ADCON1bits.VCFG0 = 0;
  5891  0AC8  121F               	bcf	31,4	;volatile
  5892                           
  5893                           ;functions.c: 504: intSecondCounter = 0;
  5894  0AC9  1283               	bcf	3,5	;RP0=0, select bank0
  5895  0ACA  1303               	bcf	3,6	;RP1=0, select bank0
  5896  0ACB  01E5               	clrf	_intSecondCounter
  5897  0ACC  01E6               	clrf	_intSecondCounter+1
  5898                           
  5899                           ;functions.c: 505: intHalfSecondCounter = 0;
  5900  0ACD  01E1               	clrf	_intHalfSecondCounter
  5901  0ACE  01E2               	clrf	_intHalfSecondCounter+1
  5902                           
  5903                           ;functions.c: 506: intMinuteCounter = 0;
  5904  0ACF  01E3               	clrf	_intMinuteCounter
  5905  0AD0  01E4               	clrf	_intMinuteCounter+1
  5906  0AD1  0008               	return
  5907  0AD2                     __end_of_PICInit:	
  5908                           
  5909                           	psect	text25
  5910  1658                     __ptext25:	
  5911 ;; *************** function _Mode_5 *****************
  5912 ;; Defined at:
  5913 ;;		line 329 in file "functions.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;		None
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;		None
  5918 ;; Return value:  Size  Location     Type
  5919 ;;                  1    wreg      void 
  5920 ;; Registers used:
  5921 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5922 ;; Tracked objects:
  5923 ;;		On entry : 0/0
  5924 ;;		On exit  : 0/0
  5925 ;;		Unchanged: 0/0
  5926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5927 ;;      Params:         0       0       0       0       0
  5928 ;;      Locals:         0       0       0       0       0
  5929 ;;      Temps:          0       1       0       0       0
  5930 ;;      Totals:         0       1       0       0       0
  5931 ;;Total ram usage:        1 bytes
  5932 ;; Hardware stack levels used:    1
  5933 ;; Hardware stack levels required when called:    8
  5934 ;; This function calls:
  5935 ;;		_LightWithSensController
  5936 ;;		_TransmittPacket
  5937 ;; This function is called by:
  5938 ;;		_main
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           
  5943                           ;psect for function _Mode_5
  5944  1658                     _Mode_5:	
  5945                           
  5946                           ;functions.c: 331: if(!RB5)
  5947                           
  5948                           ;incstack = 0
  5949 ;; hardware stack exceeded
  5950                           ; Regs used in _Mode_5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5951  1658  1283               	bcf	3,5	;RP0=0, select bank0
  5952  1659  1303               	bcf	3,6	;RP1=0, select bank0
  5953  165A  1A86               	btfsc	6,5	;volatile
  5954  165B  2E66               	goto	l3115
  5955                           
  5956                           ;functions.c: 332: {
  5957                           ;functions.c: 333: TransmittPacket(2, 2);
  5958  165C  3002               	movlw	2
  5959  165D  00BB               	movwf	??_Mode_5
  5960  165E  083B               	movf	??_Mode_5,w
  5961  165F  00B5               	movwf	TransmittPacket@value
  5962  1660  3002               	movlw	2
  5963  1661  120A  158A  24BB  160A  118A  	fcall	_TransmittPacket
  5964  1666                     l3115:	
  5965                           
  5966                           ;functions.c: 334: }
  5967                           ;functions.c: 335: LightWithSensController();
  5968  1666  120A  158A  20F0   	fcall	_LightWithSensController
  5969  1669  0008               	return
  5970  166A                     __end_of_Mode_5:	
  5971                           
  5972                           	psect	text26
  5973  1636                     __ptext26:	
  5974 ;; *************** function _Mode_4 *****************
  5975 ;; Defined at:
  5976 ;;		line 317 in file "functions.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;		None
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;		None
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  1    wreg      void 
  5983 ;; Registers used:
  5984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5990 ;;      Params:         0       0       0       0       0
  5991 ;;      Locals:         0       0       0       0       0
  5992 ;;      Temps:          0       0       0       0       0
  5993 ;;      Totals:         0       0       0       0       0
  5994 ;;Total ram usage:        0 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    8
  5997 ;; This function calls:
  5998 ;;		_LightWithSensController
  5999 ;;		_TransmittPacket
  6000 ;; This function is called by:
  6001 ;;		_main
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005                           
  6006                           ;psect for function _Mode_4
  6007  1636                     _Mode_4:	
  6008                           
  6009                           ;functions.c: 319: if(!RB5)
  6010                           
  6011                           ;incstack = 0
  6012 ;; hardware stack exceeded
  6013                           ; Regs used in _Mode_4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6014  1636  1283               	bcf	3,5	;RP0=0, select bank0
  6015  1637  1303               	bcf	3,6	;RP1=0, select bank0
  6016  1638  1A86               	btfsc	6,5	;volatile
  6017  1639  2E42               	goto	l3109
  6018                           
  6019                           ;functions.c: 320: {
  6020                           ;functions.c: 321: TransmittPacket(2, 1);
  6021  163A  01B5               	clrf	TransmittPacket@value
  6022  163B  0AB5               	incf	TransmittPacket@value,f
  6023  163C  3002               	movlw	2
  6024  163D  120A  158A  24BB  160A  118A  	fcall	_TransmittPacket
  6025  1642                     l3109:	
  6026                           
  6027                           ;functions.c: 322: }
  6028                           ;functions.c: 323: LightWithSensController();
  6029  1642  120A  158A  20F0   	fcall	_LightWithSensController
  6030  1645  0008               	return
  6031  1646                     __end_of_Mode_4:	
  6032                           
  6033                           	psect	text27
  6034  0CBB                     __ptext27:	
  6035 ;; *************** function _TransmittPacket *****************
  6036 ;; Defined at:
  6037 ;;		line 224 in file "functions.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  topic           1    wreg     unsigned char 
  6040 ;;  value           1   21[BANK0 ] unsigned char 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;  topic           1   26[BANK0 ] unsigned char 
  6043 ;;  i               2   24[BANK0 ] int 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      void 
  6046 ;; Registers used:
  6047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6053 ;;      Params:         0       1       0       0       0
  6054 ;;      Locals:         0       3       0       0       0
  6055 ;;      Temps:          0       2       0       0       0
  6056 ;;      Totals:         0       6       0       0       0
  6057 ;;Total ram usage:        6 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    7
  6060 ;; This function calls:
  6061 ;;		_FindChannel
  6062 ;;		_RegisterRead
  6063 ;;		_RegisterSet
  6064 ;;		_SetRFMode
  6065 ;;		_WriteFIFO
  6066 ;;		_timerFunction
  6067 ;; This function is called by:
  6068 ;;		_ReceivedPacketHandler
  6069 ;;		_Mode_4
  6070 ;;		_Mode_5
  6071 ;;		_SendMemoryData
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           
  6076                           ;psect for function _TransmittPacket
  6077  0CBB                     _TransmittPacket:	
  6078                           
  6079                           ;incstack = 0
  6080 ;; hardware stack exceeded
  6081                           ; Regs used in _TransmittPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6082                           ;TransmittPacket@topic stored from wreg
  6083  0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  6084  0CBC  1303               	bcf	3,6	;RP1=0, select bank0
  6085  0CBD  00BA               	movwf	TransmittPacket@topic
  6086                           
  6087                           ;functions.c: 226: timerFunction(4, 5);
  6088  0CBE  3004               	movlw	4
  6089  0CBF  00A0               	movwf	timerFunction@intTimerNumber
  6090  0CC0  3000               	movlw	0
  6091  0CC1  00A1               	movwf	timerFunction@intTimerNumber+1
  6092  0CC2  3005               	movlw	5
  6093  0CC3  00A2               	movwf	timerFunction@intSetSeconds
  6094  0CC4  3000               	movlw	0
  6095  0CC5  00A3               	movwf	timerFunction@intSetSeconds+1
  6096  0CC6  160A  118A  2646  120A  158A  	fcall	_timerFunction
  6097                           
  6098                           ;functions.c: 228: int i = 0;
  6099  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  6100  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  6101  0CCD  01B8               	clrf	TransmittPacket@i
  6102  0CCE  01B9               	clrf	TransmittPacket@i+1
  6103                           
  6104                           ;functions.c: 231: SetRFMode(0x20);
  6105  0CCF  3020               	movlw	32
  6106  0CD0  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  6107                           
  6108                           ;functions.c: 232: _delay((unsigned long)((10)*(4000000/4000.0)));
  6109  0CD5  300D               	movlw	13
  6110  0CD6  1283               	bcf	3,5	;RP0=0, select bank0
  6111  0CD7  1303               	bcf	3,6	;RP1=0, select bank0
  6112  0CD8  00B7               	movwf	??_TransmittPacket+1
  6113  0CD9  30FB               	movlw	251
  6114  0CDA  00B6               	movwf	??_TransmittPacket
  6115  0CDB                     u2597:	
  6116  0CDB  0BB6               	decfsz	??_TransmittPacket,f
  6117  0CDC  2CDB               	goto	u2597
  6118  0CDD  0BB7               	decfsz	??_TransmittPacket+1,f
  6119  0CDE  2CDB               	goto	u2597
  6120  0CDF  2CE0               	nop2
  6121                           
  6122                           ;functions.c: 233: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  6123  0CE0  300E               	movlw	14
  6124  0CE1  160A  118A  26F4  120A  158A  	fcall	_RegisterRead
  6125  0CE6  3802               	iorlw	2
  6126  0CE7  1283               	bcf	3,5	;RP0=0, select bank0
  6127  0CE8  1303               	bcf	3,6	;RP1=0, select bank0
  6128  0CE9  00B6               	movwf	??_TransmittPacket
  6129  0CEA  0836               	movf	??_TransmittPacket,w
  6130  0CEB  00A7               	movwf	RegisterSet@value
  6131  0CEC  300E               	movlw	14
  6132  0CED  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  6133                           
  6134                           ;functions.c: 234: SetRFMode(0x40);
  6135  0CF2  3040               	movlw	64
  6136  0CF3  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  6137  0CF8                     l2483:	
  6138                           ;functions.c: 235: while((RegisterRead(0x0E) & 0b00000010) == 0)
  6139                           
  6140  0CF8  300E               	movlw	14
  6141  0CF9  160A  118A  26F4  120A  158A  	fcall	_RegisterRead
  6142  0CFE  3902               	andlw	2
  6143  0CFF  1D03               	btfss	3,2
  6144  0D00  2D0B               	goto	l2485
  6145                           
  6146                           ;functions.c: 236: {
  6147                           ;functions.c: 237: if(bTimerComplete[4])
  6148  0D01  1283               	bcf	3,5	;RP0=0, select bank0
  6149  0D02  1303               	bcf	3,6	;RP1=0, select bank0
  6150  0D03  085A               	movf	_bTimerComplete+4,w
  6151  0D04  1903               	btfsc	3,2
  6152  0D05  2CF8               	goto	l2483
  6153                           
  6154                           ;functions.c: 238: {
  6155                           ;functions.c: 239: FindChannel();
  6156  0D06  120A  118A  26B6  120A  158A  	fcall	_FindChannel
  6157  0D0B                     l2485:	
  6158                           ;functions.c: 240: break;
  6159                           
  6160                           
  6161                           ;functions.c: 241: }
  6162                           ;functions.c: 243: }
  6163                           ;functions.c: 244: SetRFMode(0x80);
  6164  0D0B  3080               	movlw	128
  6165  0D0C  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  6166                           
  6167                           ;functions.c: 245: _delay((unsigned long)((500)*(4000000/4000000.0)));
  6168  0D11  30A6               	movlw	166
  6169  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  6170  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  6171  0D14  00B6               	movwf	??_TransmittPacket
  6172  0D15                     u2607:	
  6173  0D15  0BB6               	decfsz	??_TransmittPacket,f
  6174  0D16  2D15               	goto	u2607
  6175  0D17  0000               	nop
  6176                           
  6177                           ;functions.c: 248: WriteFIFO('S');
  6178  0D18  3053               	movlw	83
  6179  0D19  160A  118A  260F  120A  158A  	fcall	_WriteFIFO
  6180                           
  6181                           ;functions.c: 249: WriteFIFO('Y');
  6182  0D1E  3059               	movlw	89
  6183  0D1F  160A  118A  260F  120A  158A  	fcall	_WriteFIFO
  6184                           
  6185                           ;functions.c: 250: WriteFIFO('N');
  6186  0D24  304E               	movlw	78
  6187  0D25  160A  118A  260F  120A  158A  	fcall	_WriteFIFO
  6188                           
  6189                           ;functions.c: 251: WriteFIFO('C');
  6190  0D2A  3043               	movlw	67
  6191  0D2B  160A  118A  260F  120A  158A  	fcall	_WriteFIFO
  6192                           
  6193                           ;functions.c: 254: WriteFIFO(44);
  6194  0D30  302C               	movlw	44
  6195  0D31  160A  118A  260F  120A  158A  	fcall	_WriteFIFO
  6196                           
  6197                           ;functions.c: 255: WriteFIFO(topic);
  6198  0D36  1283               	bcf	3,5	;RP0=0, select bank0
  6199  0D37  1303               	bcf	3,6	;RP1=0, select bank0
  6200  0D38  083A               	movf	TransmittPacket@topic,w
  6201  0D39  160A  118A  260F  120A  158A  	fcall	_WriteFIFO
  6202                           
  6203                           ;functions.c: 256: WriteFIFO(value);
  6204  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  6205  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  6206  0D40  0835               	movf	TransmittPacket@value,w
  6207  0D41  160A  118A  260F  120A  158A  	fcall	_WriteFIFO
  6208                           
  6209                           ;functions.c: 257: WriteFIFO(55);
  6210  0D46  3037               	movlw	55
  6211  0D47  160A  118A  260F  120A  158A  	fcall	_WriteFIFO
  6212  0D4C                     l352:	
  6213                           ;functions.c: 260: while(!RB4)
  6214                           
  6215  0D4C  1283               	bcf	3,5	;RP0=0, select bank0
  6216  0D4D  1303               	bcf	3,6	;RP1=0, select bank0
  6217  0D4E  1A06               	btfsc	6,4	;volatile
  6218  0D4F  2D55               	goto	l2509
  6219                           
  6220                           ;functions.c: 261: {
  6221                           ;functions.c: 262: if(bTimerComplete[4])
  6222  0D50  1283               	bcf	3,5	;RP0=0, select bank0
  6223  0D51  1303               	bcf	3,6	;RP1=0, select bank0
  6224  0D52  085A               	movf	_bTimerComplete+4,w
  6225  0D53  1903               	btfsc	3,2
  6226  0D54  2D4C               	goto	l352
  6227  0D55                     l2509:	
  6228                           ;functions.c: 263: break;
  6229                           
  6230                           
  6231                           ;functions.c: 264: }
  6232                           ;functions.c: 265: _delay((unsigned long)((10)*(4000000/4000000.0)));
  6233  0D55  3003               	movlw	3
  6234  0D56  00B6               	movwf	??_TransmittPacket
  6235  0D57                     u2617:	
  6236  0D57  0BB6               	decfsz	??_TransmittPacket,f
  6237  0D58  2D57               	goto	u2617
  6238                           
  6239                           ;functions.c: 266: SetRFMode(0x00);
  6240  0D59  3000               	movlw	0
  6241  0D5A  120A  158A  233E  120A  158A  	fcall	_SetRFMode
  6242                           
  6243                           ;functions.c: 267: _delay((unsigned long)((50)*(4000000/4000.0)));
  6244  0D5F  3041               	movlw	65
  6245  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  6246  0D61  1303               	bcf	3,6	;RP1=0, select bank0
  6247  0D62  00B7               	movwf	??_TransmittPacket+1
  6248  0D63  30EE               	movlw	238
  6249  0D64  00B6               	movwf	??_TransmittPacket
  6250  0D65                     u2627:	
  6251  0D65  0BB6               	decfsz	??_TransmittPacket,f
  6252  0D66  2D65               	goto	u2627
  6253  0D67  0BB7               	decfsz	??_TransmittPacket+1,f
  6254  0D68  2D65               	goto	u2627
  6255  0D69  0000               	nop
  6256  0D6A  0008               	return
  6257  0D6B                     __end_of_TransmittPacket:	
  6258                           
  6259                           	psect	text28
  6260  160F                     __ptext28:	
  6261 ;; *************** function _WriteFIFO *****************
  6262 ;; Defined at:
  6263 ;;		line 802 in file "functions.c"
  6264 ;; Parameters:    Size  Location     Type
  6265 ;;  Data            1    wreg     unsigned char 
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;  Data            1    3[BANK0 ] unsigned char 
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  1    wreg      void 
  6270 ;; Registers used:
  6271 ;;		wreg, status,2, status,0, pclath, cstack
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6277 ;;      Params:         0       0       0       0       0
  6278 ;;      Locals:         0       1       0       0       0
  6279 ;;      Temps:          0       0       0       0       0
  6280 ;;      Totals:         0       1       0       0       0
  6281 ;;Total ram usage:        1 bytes
  6282 ;; Hardware stack levels used:    1
  6283 ;; Hardware stack levels required when called:    3
  6284 ;; This function calls:
  6285 ;;		_WriteSPI
  6286 ;; This function is called by:
  6287 ;;		_TransmittPacket
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           
  6292                           ;psect for function _WriteFIFO
  6293  160F                     _WriteFIFO:	
  6294                           
  6295                           ;incstack = 0
  6296                           ; Regs used in _WriteFIFO: [wreg+status,2+status,0+pclath+cstack]
  6297                           ;WriteFIFO@Data stored from wreg
  6298  160F  1283               	bcf	3,5	;RP0=0, select bank0
  6299  1610  1303               	bcf	3,6	;RP1=0, select bank0
  6300  1611  00A3               	movwf	WriteFIFO@Data
  6301                           
  6302                           ;functions.c: 804: RA5 = 0;
  6303  1612  1285               	bcf	5,5	;volatile
  6304                           
  6305                           ;functions.c: 805: WriteSPI(Data);
  6306  1613  0823               	movf	WriteFIFO@Data,w
  6307  1614  160A  118A  2628   	fcall	_WriteSPI
  6308                           
  6309                           ;functions.c: 806: RA5 = 1;
  6310  1617  1283               	bcf	3,5	;RP0=0, select bank0
  6311  1618  1303               	bcf	3,6	;RP1=0, select bank0
  6312  1619  1685               	bsf	5,5	;volatile
  6313  161A  0008               	return
  6314  161B                     __end_of_WriteFIFO:	
  6315                           
  6316                           	psect	text29
  6317  06B6                     __ptext29:	
  6318 ;; *************** function _FindChannel *****************
  6319 ;; Defined at:
  6320 ;;		line 585 in file "functions.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;		None
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  i               2   19[BANK0 ] int 
  6325 ;;  cnt             2   17[BANK0 ] int 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      unsigned char 
  6328 ;; Registers used:
  6329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6335 ;;      Params:         0       0       0       0       0
  6336 ;;      Locals:         0       4       0       0       0
  6337 ;;      Temps:          0       3       0       0       0
  6338 ;;      Totals:         0       7       0       0       0
  6339 ;;Total ram usage:        7 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    6
  6342 ;; This function calls:
  6343 ;;		_RegisterRead
  6344 ;;		_RegisterSet
  6345 ;;		_SetRFMode
  6346 ;; This function is called by:
  6347 ;;		_TransiverToReceive
  6348 ;;		_TransmittPacket
  6349 ;;		_TransiverInit
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           
  6354                           ;psect for function _FindChannel
  6355  06B6                     _FindChannel:	
  6356                           
  6357                           ;functions.c: 587: int cnt = 0;
  6358                           
  6359                           ;incstack = 0
  6360 ;; using string table level
  6361                           ; Regs used in _FindChannel: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6362  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  6363  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  6364  06B8  01B1               	clrf	FindChannel@cnt
  6365  06B9  01B2               	clrf	FindChannel@cnt+1
  6366                           
  6367                           ;functions.c: 588: bChannelFound = 0;
  6368  06BA  01E7               	clrf	_bChannelFound
  6369                           
  6370                           ;functions.c: 589: channelFound = 0;
  6371  06BB  01DB               	clrf	_channelFound
  6372  06BC  01DC               	clrf	_channelFound+1
  6373                           
  6374                           ;functions.c: 591: _delay((unsigned long)((1000)*(4000000/4000.0)));
  6375  06BD  3006               	movlw	6
  6376  06BE  00B0               	movwf	??_FindChannel+2
  6377  06BF  3013               	movlw	19
  6378  06C0  00AF               	movwf	??_FindChannel+1
  6379  06C1  30B1               	movlw	177
  6380  06C2  00AE               	movwf	??_FindChannel
  6381  06C3                     u2637:	
  6382  06C3  0BAE               	decfsz	??_FindChannel,f
  6383  06C4  2EC3               	goto	u2637
  6384  06C5  0BAF               	decfsz	??_FindChannel+1,f
  6385  06C6  2EC3               	goto	u2637
  6386  06C7  0BB0               	decfsz	??_FindChannel+2,f
  6387  06C8  2EC3               	goto	u2637
  6388  06C9  2ECA               	nop2
  6389                           
  6390                           ;functions.c: 592: for (int i = 0; i < 13; i++)
  6391  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  6392  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  6393  06CC  01B3               	clrf	FindChannel@i
  6394  06CD  01B4               	clrf	FindChannel@i+1
  6395  06CE  0834               	movf	FindChannel@i+1,w
  6396  06CF  3A80               	xorlw	128
  6397  06D0  00FF               	movwf	127
  6398  06D1  3080               	movlw	128
  6399  06D2  027F               	subwf	127,w
  6400  06D3  1D03               	skipz
  6401  06D4  2ED7               	goto	u1265
  6402  06D5  300D               	movlw	13
  6403  06D6  0233               	subwf	FindChannel@i,w
  6404  06D7                     u1265:	
  6405  06D7  1803               	btfsc	3,0
  6406  06D8  2FAA               	goto	l2433
  6407  06D9                     l2409:	
  6408                           
  6409                           ;functions.c: 593: {
  6410                           ;functions.c: 594: RegisterSet(0x06,ChannelR[i]);
  6411  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  6412  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  6413  06DB  0833               	movf	FindChannel@i,w
  6414  06DC  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  6415  06DD  0084               	movwf	4
  6416  06DE  120A  158A  2000  120A  118A  	fcall	stringdir
  6417  06E3  00AE               	movwf	??_FindChannel
  6418  06E4  082E               	movf	??_FindChannel,w
  6419  06E5  00A7               	movwf	RegisterSet@value
  6420  06E6  3006               	movlw	6
  6421  06E7  160A  118A  26C0  120A  118A  	fcall	_RegisterSet
  6422                           
  6423                           ;functions.c: 595: RegisterSet(0x07,ChannelP[i]);
  6424  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  6425  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  6426  06EE  0833               	movf	FindChannel@i,w
  6427  06EF  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  6428  06F0  0084               	movwf	4
  6429  06F1  120A  158A  2000  120A  118A  	fcall	stringdir
  6430  06F6  00AE               	movwf	??_FindChannel
  6431  06F7  082E               	movf	??_FindChannel,w
  6432  06F8  00A7               	movwf	RegisterSet@value
  6433  06F9  3007               	movlw	7
  6434  06FA  160A  118A  26C0  120A  118A  	fcall	_RegisterSet
  6435                           
  6436                           ;functions.c: 596: RegisterSet(0x08,ChannelS[i]);
  6437  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  6438  0700  1303               	bcf	3,6	;RP1=0, select bank0
  6439  0701  0833               	movf	FindChannel@i,w
  6440  0702  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  6441  0703  0084               	movwf	4
  6442  0704  120A  158A  2000  120A  118A  	fcall	stringdir
  6443  0709  00AE               	movwf	??_FindChannel
  6444  070A  082E               	movf	??_FindChannel,w
  6445  070B  00A7               	movwf	RegisterSet@value
  6446  070C  3008               	movlw	8
  6447  070D  160A  118A  26C0  120A  118A  	fcall	_RegisterSet
  6448                           
  6449                           ;functions.c: 597: RegisterSet(0x09,ChannelR[i]);
  6450  0712  1283               	bcf	3,5	;RP0=0, select bank0
  6451  0713  1303               	bcf	3,6	;RP1=0, select bank0
  6452  0714  0833               	movf	FindChannel@i,w
  6453  0715  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  6454  0716  0084               	movwf	4
  6455  0717  120A  158A  2000  120A  118A  	fcall	stringdir
  6456  071C  00AE               	movwf	??_FindChannel
  6457  071D  082E               	movf	??_FindChannel,w
  6458  071E  00A7               	movwf	RegisterSet@value
  6459  071F  3009               	movlw	9
  6460  0720  160A  118A  26C0  120A  118A  	fcall	_RegisterSet
  6461                           
  6462                           ;functions.c: 598: RegisterSet(0x0A,ChannelP[i]);
  6463  0725  1283               	bcf	3,5	;RP0=0, select bank0
  6464  0726  1303               	bcf	3,6	;RP1=0, select bank0
  6465  0727  0833               	movf	FindChannel@i,w
  6466  0728  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  6467  0729  0084               	movwf	4
  6468  072A  120A  158A  2000  120A  118A  	fcall	stringdir
  6469  072F  00AE               	movwf	??_FindChannel
  6470  0730  082E               	movf	??_FindChannel,w
  6471  0731  00A7               	movwf	RegisterSet@value
  6472  0732  300A               	movlw	10
  6473  0733  160A  118A  26C0  120A  118A  	fcall	_RegisterSet
  6474                           
  6475                           ;functions.c: 599: RegisterSet(0x0B,ChannelS[i]);
  6476  0738  1283               	bcf	3,5	;RP0=0, select bank0
  6477  0739  1303               	bcf	3,6	;RP1=0, select bank0
  6478  073A  0833               	movf	FindChannel@i,w
  6479  073B  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  6480  073C  0084               	movwf	4
  6481  073D  120A  158A  2000  120A  118A  	fcall	stringdir
  6482  0742  00AE               	movwf	??_FindChannel
  6483  0743  082E               	movf	??_FindChannel,w
  6484  0744  00A7               	movwf	RegisterSet@value
  6485  0745  300B               	movlw	11
  6486  0746  160A  118A  26C0  120A  118A  	fcall	_RegisterSet
  6487                           
  6488                           ;functions.c: 600: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  6489  074B  300E               	movlw	14
  6490  074C  160A  118A  26F4  120A  118A  	fcall	_RegisterRead
  6491  0751  3802               	iorlw	2
  6492  0752  1283               	bcf	3,5	;RP0=0, select bank0
  6493  0753  1303               	bcf	3,6	;RP1=0, select bank0
  6494  0754  00AE               	movwf	??_FindChannel
  6495  0755  082E               	movf	??_FindChannel,w
  6496  0756  00A7               	movwf	RegisterSet@value
  6497  0757  300E               	movlw	14
  6498  0758  160A  118A  26C0  120A  118A  	fcall	_RegisterSet
  6499                           
  6500                           ;functions.c: 601: SetRFMode(0x40);
  6501  075D  3040               	movlw	64
  6502  075E  120A  158A  233E  120A  118A  	fcall	_SetRFMode
  6503                           
  6504                           ;functions.c: 602: cnt = 0;
  6505  0763  1283               	bcf	3,5	;RP0=0, select bank0
  6506  0764  1303               	bcf	3,6	;RP1=0, select bank0
  6507  0765  01B1               	clrf	FindChannel@cnt
  6508  0766  01B2               	clrf	FindChannel@cnt+1
  6509  0767                     l2427:	
  6510                           ;functions.c: 603: while(cnt < 5)
  6511                           
  6512  0767  1283               	bcf	3,5	;RP0=0, select bank0
  6513  0768  1303               	bcf	3,6	;RP1=0, select bank0
  6514  0769  0832               	movf	FindChannel@cnt+1,w
  6515  076A  3A80               	xorlw	128
  6516  076B  00FF               	movwf	127
  6517  076C  3080               	movlw	128
  6518  076D  027F               	subwf	127,w
  6519  076E  1D03               	skipz
  6520  076F  2F72               	goto	u1285
  6521  0770  3005               	movlw	5
  6522  0771  0231               	subwf	FindChannel@cnt,w
  6523  0772                     u1285:	
  6524  0772  1803               	btfsc	3,0
  6525  0773  2F97               	goto	l2429
  6526                           
  6527                           ;functions.c: 604: {
  6528                           ;functions.c: 606: if((RegisterRead(0x0E) & 0b00000010) != 0)
  6529  0774  300E               	movlw	14
  6530  0775  160A  118A  26F4  120A  118A  	fcall	_RegisterRead
  6531  077A  3902               	andlw	2
  6532  077B  1903               	btfsc	3,2
  6533  077C  2F87               	goto	l2425
  6534                           
  6535                           ;functions.c: 607: {
  6536                           ;functions.c: 608: bChannelFound = 1;
  6537  077D  1283               	bcf	3,5	;RP0=0, select bank0
  6538  077E  1303               	bcf	3,6	;RP1=0, select bank0
  6539  077F  01E7               	clrf	_bChannelFound
  6540  0780  0AE7               	incf	_bChannelFound,f
  6541                           
  6542                           ;functions.c: 609: channelFound = i;
  6543  0781  0834               	movf	FindChannel@i+1,w
  6544  0782  00DC               	movwf	_channelFound+1
  6545  0783  0833               	movf	FindChannel@i,w
  6546  0784  00DB               	movwf	_channelFound
  6547                           
  6548                           ;functions.c: 610: return 1;
  6549  0785  3001               	movlw	1
  6550  0786  0008               	return
  6551  0787                     l2425:	
  6552                           
  6553                           ;functions.c: 611: }
  6554                           ;functions.c: 612: cnt++;
  6555  0787  3001               	movlw	1
  6556  0788  1283               	bcf	3,5	;RP0=0, select bank0
  6557  0789  1303               	bcf	3,6	;RP1=0, select bank0
  6558  078A  07B1               	addwf	FindChannel@cnt,f
  6559  078B  1803               	skipnc
  6560  078C  0AB2               	incf	FindChannel@cnt+1,f
  6561  078D  3000               	movlw	0
  6562  078E  07B2               	addwf	FindChannel@cnt+1,f
  6563                           
  6564                           ;functions.c: 613: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  6565  078F  30F9               	movlw	249
  6566  0790  00AE               	movwf	??_FindChannel
  6567  0791                     u2647:	
  6568  0791  0000               	nop
  6569  0792  0BAE               	decfsz	??_FindChannel,f
  6570  0793  2F91               	goto	u2647
  6571  0794  2F95               	nop2	;nop
  6572  0795  0000               	nop
  6573  0796  2F67               	goto	l2427
  6574  0797                     l2429:	
  6575  0797  3001               	movlw	1
  6576  0798  1283               	bcf	3,5	;RP0=0, select bank0
  6577  0799  1303               	bcf	3,6	;RP1=0, select bank0
  6578  079A  07B3               	addwf	FindChannel@i,f
  6579  079B  1803               	skipnc
  6580  079C  0AB4               	incf	FindChannel@i+1,f
  6581  079D  3000               	movlw	0
  6582  079E  07B4               	addwf	FindChannel@i+1,f
  6583  079F  0834               	movf	FindChannel@i+1,w
  6584  07A0  3A80               	xorlw	128
  6585  07A1  00FF               	movwf	127
  6586  07A2  3080               	movlw	128
  6587  07A3  027F               	subwf	127,w
  6588  07A4  1D03               	skipz
  6589  07A5  2FA8               	goto	u1295
  6590  07A6  300D               	movlw	13
  6591  07A7  0233               	subwf	FindChannel@i,w
  6592  07A8                     u1295:	
  6593  07A8  1C03               	skipc
  6594  07A9  2ED9               	goto	l2409
  6595  07AA                     l2433:	
  6596                           
  6597                           ;functions.c: 614: }
  6598                           ;functions.c: 617: }
  6599                           ;functions.c: 618: return 0;
  6600  07AA  3000               	movlw	0
  6601  07AB  0008               	return
  6602  07AC                     __end_of_FindChannel:	
  6603                           
  6604                           	psect	text30
  6605  0B3E                     __ptext30:	
  6606 ;; *************** function _SetRFMode *****************
  6607 ;; Defined at:
  6608 ;;		line 640 in file "functions.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  mode            1    wreg     unsigned char 
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;  mode            1   12[BANK0 ] unsigned char 
  6613 ;;  mcparam0_rea    1   13[BANK0 ] unsigned char 
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  1    wreg      void 
  6616 ;; Registers used:
  6617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6623 ;;      Params:         0       0       0       0       0
  6624 ;;      Locals:         0       2       0       0       0
  6625 ;;      Temps:          0       1       0       0       0
  6626 ;;      Totals:         0       3       0       0       0
  6627 ;;Total ram usage:        3 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    5
  6630 ;; This function calls:
  6631 ;;		_RegisterRead
  6632 ;;		_RegisterSet
  6633 ;; This function is called by:
  6634 ;;		_TransiverToReceive
  6635 ;;		_TransiverReadFIFO
  6636 ;;		_TransmittPacket
  6637 ;;		_TransiverInit
  6638 ;;		_FindChannel
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           
  6643                           ;psect for function _SetRFMode
  6644  0B3E                     _SetRFMode:	
  6645                           
  6646                           ;incstack = 0
  6647                           ; Regs used in _SetRFMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6648                           ;SetRFMode@mode stored from wreg
  6649  0B3E  1283               	bcf	3,5	;RP0=0, select bank0
  6650  0B3F  1303               	bcf	3,6	;RP1=0, select bank0
  6651  0B40  00AC               	movwf	SetRFMode@mode
  6652                           
  6653                           ;functions.c: 642: RA4 = 0;
  6654  0B41  1205               	bcf	5,4	;volatile
  6655                           
  6656                           ;functions.c: 643: BYTE mcparam0_read;
  6657                           ;functions.c: 644: mcparam0_read = RegisterRead(0);
  6658  0B42  3000               	movlw	0
  6659  0B43  160A  118A  26F4  120A  158A  	fcall	_RegisterRead
  6660  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  6661  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  6662  0B4A  00AB               	movwf	??_SetRFMode
  6663  0B4B  082B               	movf	??_SetRFMode,w
  6664  0B4C  00AD               	movwf	SetRFMode@mcparam0_read
  6665                           
  6666                           ;functions.c: 645: switch (mode) {
  6667  0B4D  2B96               	goto	l2383
  6668  0B4E                     l2371:	
  6669                           ;functions.c: 646: case 0x80:
  6670                           
  6671                           
  6672                           ;functions.c: 647: RegisterSet(0, (mcparam0_read & 0x1F) | 0x80);
  6673  0B4E  082D               	movf	SetRFMode@mcparam0_read,w
  6674  0B4F  391F               	andlw	31
  6675  0B50  3880               	iorlw	128
  6676  0B51  00AB               	movwf	??_SetRFMode
  6677  0B52  082B               	movf	??_SetRFMode,w
  6678  0B53  00A7               	movwf	RegisterSet@value
  6679  0B54  3000               	movlw	0
  6680  0B55  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  6681                           
  6682                           ;functions.c: 649: break;
  6683  0B5A  2BA9               	goto	l441
  6684  0B5B                     l2373:	
  6685                           ;functions.c: 650: case 0x60:
  6686                           
  6687                           
  6688                           ;functions.c: 651: RegisterSet(0, (mcparam0_read & 0x1F) | 0x60);
  6689  0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  6690  0B5C  1303               	bcf	3,6	;RP1=0, select bank0
  6691  0B5D  082D               	movf	SetRFMode@mcparam0_read,w
  6692  0B5E  391F               	andlw	31
  6693  0B5F  3860               	iorlw	96
  6694  0B60  00AB               	movwf	??_SetRFMode
  6695  0B61  082B               	movf	??_SetRFMode,w
  6696  0B62  00A7               	movwf	RegisterSet@value
  6697  0B63  3000               	movlw	0
  6698  0B64  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  6699                           
  6700                           ;functions.c: 653: break;
  6701  0B69  2BA9               	goto	l441
  6702  0B6A                     l2375:	
  6703                           ;functions.c: 654: case 0x40:
  6704                           
  6705                           
  6706                           ;functions.c: 655: RegisterSet(0, (mcparam0_read & 0x1F) | 0x40);
  6707  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  6708  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  6709  0B6C  082D               	movf	SetRFMode@mcparam0_read,w
  6710  0B6D  391F               	andlw	31
  6711  0B6E  3840               	iorlw	64
  6712  0B6F  00AB               	movwf	??_SetRFMode
  6713  0B70  082B               	movf	??_SetRFMode,w
  6714  0B71  00A7               	movwf	RegisterSet@value
  6715  0B72  3000               	movlw	0
  6716  0B73  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  6717                           
  6718                           ;functions.c: 657: break;
  6719  0B78  2BA9               	goto	l441
  6720  0B79                     l2377:	
  6721                           ;functions.c: 658: case 0x20:
  6722                           
  6723                           
  6724                           ;functions.c: 659: RegisterSet(0, (mcparam0_read & 0x1F) | 0x20);
  6725  0B79  1283               	bcf	3,5	;RP0=0, select bank0
  6726  0B7A  1303               	bcf	3,6	;RP1=0, select bank0
  6727  0B7B  082D               	movf	SetRFMode@mcparam0_read,w
  6728  0B7C  391F               	andlw	31
  6729  0B7D  3820               	iorlw	32
  6730  0B7E  00AB               	movwf	??_SetRFMode
  6731  0B7F  082B               	movf	??_SetRFMode,w
  6732  0B80  00A7               	movwf	RegisterSet@value
  6733  0B81  3000               	movlw	0
  6734  0B82  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  6735                           
  6736                           ;functions.c: 661: break;
  6737  0B87  2BA9               	goto	l441
  6738  0B88                     l2379:	
  6739                           ;functions.c: 662: case 0x00:
  6740                           
  6741                           
  6742                           ;functions.c: 663: RegisterSet(0, (mcparam0_read & 0x1F) | 0x00);
  6743  0B88  1283               	bcf	3,5	;RP0=0, select bank0
  6744  0B89  1303               	bcf	3,6	;RP1=0, select bank0
  6745  0B8A  082D               	movf	SetRFMode@mcparam0_read,w
  6746  0B8B  391F               	andlw	31
  6747  0B8C  00AB               	movwf	??_SetRFMode
  6748  0B8D  082B               	movf	??_SetRFMode,w
  6749  0B8E  00A7               	movwf	RegisterSet@value
  6750  0B8F  3000               	movlw	0
  6751  0B90  160A  118A  26C0  120A  158A  	fcall	_RegisterSet
  6752                           
  6753                           ;functions.c: 666: }
  6754                           
  6755                           ;functions.c: 665: break;
  6756  0B95  2BA9               	goto	l441
  6757  0B96                     l2383:	
  6758  0B96  1283               	bcf	3,5	;RP0=0, select bank0
  6759  0B97  1303               	bcf	3,6	;RP1=0, select bank0
  6760  0B98  082C               	movf	SetRFMode@mode,w
  6761                           
  6762                           ; Switch size 1, requested type "space"
  6763                           ; Number of cases is 5, Range of values is 0 to 128
  6764                           ; switch strategies available:
  6765                           ; Name         Instructions Cycles
  6766                           ; simple_byte           16     9 (average)
  6767                           ; jumptable            260     6 (fixed)
  6768                           ;	Chosen strategy is simple_byte
  6769  0B99  3A00               	xorlw	0	; case 0
  6770  0B9A  1903               	skipnz
  6771  0B9B  2B88               	goto	l2379
  6772  0B9C  3A20               	xorlw	32	; case 32
  6773  0B9D  1903               	skipnz
  6774  0B9E  2B79               	goto	l2377
  6775  0B9F  3A60               	xorlw	96	; case 64
  6776  0BA0  1903               	skipnz
  6777  0BA1  2B6A               	goto	l2375
  6778  0BA2  3A20               	xorlw	32	; case 96
  6779  0BA3  1903               	skipnz
  6780  0BA4  2B5B               	goto	l2373
  6781  0BA5  3AE0               	xorlw	224	; case 128
  6782  0BA6  1903               	skipnz
  6783  0BA7  2B4E               	goto	l2371
  6784  0BA8  2BA9               	goto	l441
  6785  0BA9                     l441:	
  6786                           
  6787                           ;functions.c: 667: RA4 = 1;
  6788  0BA9  1283               	bcf	3,5	;RP0=0, select bank0
  6789  0BAA  1303               	bcf	3,6	;RP1=0, select bank0
  6790  0BAB  1605               	bsf	5,4	;volatile
  6791  0BAC  0008               	return
  6792  0BAD                     __end_of_SetRFMode:	
  6793                           
  6794                           	psect	text31
  6795  16C0                     __ptext31:	
  6796 ;; *************** function _RegisterSet *****************
  6797 ;; Defined at:
  6798 ;;		line 749 in file "functions.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;  adress          1    wreg     unsigned char 
  6801 ;;  value           1    7[BANK0 ] unsigned char 
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  adress          1   10[BANK0 ] unsigned char 
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2, status,0, pclath, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6813 ;;      Params:         0       1       0       0       0
  6814 ;;      Locals:         0       1       0       0       0
  6815 ;;      Temps:          0       2       0       0       0
  6816 ;;      Totals:         0       4       0       0       0
  6817 ;;Total ram usage:        4 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    3
  6820 ;; This function calls:
  6821 ;;		_WriteSPI
  6822 ;; This function is called by:
  6823 ;;		_TransiverToReceive
  6824 ;;		_TransmittPacket
  6825 ;;		_TransiverInit
  6826 ;;		_FindChannel
  6827 ;;		_SetRFMode
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           
  6832                           ;psect for function _RegisterSet
  6833  16C0                     _RegisterSet:	
  6834                           
  6835                           ;incstack = 0
  6836                           ; Regs used in _RegisterSet: [wreg+status,2+status,0+pclath+cstack]
  6837                           ;RegisterSet@adress stored from wreg
  6838  16C0  1283               	bcf	3,5	;RP0=0, select bank0
  6839  16C1  1303               	bcf	3,6	;RP1=0, select bank0
  6840  16C2  00AA               	movwf	RegisterSet@adress
  6841                           
  6842                           ;functions.c: 751: RA4 = 0;
  6843  16C3  1205               	bcf	5,4	;volatile
  6844                           
  6845                           ;functions.c: 752: adress = (adress<<1);
  6846  16C4  082A               	movf	RegisterSet@adress,w
  6847  16C5  00A8               	movwf	??_RegisterSet
  6848  16C6  0728               	addwf	??_RegisterSet,w
  6849  16C7  00A9               	movwf	??_RegisterSet+1
  6850  16C8  0829               	movf	??_RegisterSet+1,w
  6851  16C9  00AA               	movwf	RegisterSet@adress
  6852                           
  6853                           ;functions.c: 753: WriteSPI(adress);
  6854  16CA  082A               	movf	RegisterSet@adress,w
  6855  16CB  160A  118A  2628  160A  118A  	fcall	_WriteSPI
  6856                           
  6857                           ;functions.c: 754: WriteSPI(value);
  6858  16D0  1283               	bcf	3,5	;RP0=0, select bank0
  6859  16D1  1303               	bcf	3,6	;RP1=0, select bank0
  6860  16D2  0827               	movf	RegisterSet@value,w
  6861  16D3  160A  118A  2628   	fcall	_WriteSPI
  6862                           
  6863                           ;functions.c: 755: RA4 = 1;
  6864  16D6  1283               	bcf	3,5	;RP0=0, select bank0
  6865  16D7  1303               	bcf	3,6	;RP1=0, select bank0
  6866  16D8  1605               	bsf	5,4	;volatile
  6867  16D9  0008               	return
  6868  16DA                     __end_of_RegisterSet:	
  6869                           
  6870                           	psect	text32
  6871  16F4                     __ptext32:	
  6872 ;; *************** function _RegisterRead *****************
  6873 ;; Defined at:
  6874 ;;		line 719 in file "functions.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;  adress          1    wreg     unsigned char 
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;  adress          1    6[BANK0 ] unsigned char 
  6879 ;;  value           1    5[BANK0 ] unsigned char 
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  1    wreg      unsigned char 
  6882 ;; Registers used:
  6883 ;;		wreg, status,2, status,0, pclath, cstack
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6889 ;;      Params:         0       0       0       0       0
  6890 ;;      Locals:         0       2       0       0       0
  6891 ;;      Temps:          0       2       0       0       0
  6892 ;;      Totals:         0       4       0       0       0
  6893 ;;Total ram usage:        4 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:    4
  6896 ;; This function calls:
  6897 ;;		_ReadSPI
  6898 ;;		_WriteSPI
  6899 ;; This function is called by:
  6900 ;;		_TransiverToReceive
  6901 ;;		_TransmittPacket
  6902 ;;		_TransiverInit
  6903 ;;		_FindChannel
  6904 ;;		_SetRFMode
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           
  6909                           ;psect for function _RegisterRead
  6910  16F4                     _RegisterRead:	
  6911                           
  6912                           ;incstack = 0
  6913                           ; Regs used in _RegisterRead: [wreg+status,2+status,0+pclath+cstack]
  6914                           ;RegisterRead@adress stored from wreg
  6915  16F4  1283               	bcf	3,5	;RP0=0, select bank0
  6916  16F5  1303               	bcf	3,6	;RP1=0, select bank0
  6917  16F6  00A6               	movwf	RegisterRead@adress
  6918                           
  6919                           ;functions.c: 721: BYTE value;
  6920                           ;functions.c: 722: RA4 = 0;
  6921  16F7  1205               	bcf	5,4	;volatile
  6922                           
  6923                           ;functions.c: 723: adress = ((adress<<1)|0x40);
  6924  16F8  0826               	movf	RegisterRead@adress,w
  6925  16F9  00A3               	movwf	??_RegisterRead
  6926  16FA  0723               	addwf	??_RegisterRead,w
  6927  16FB  3840               	iorlw	64
  6928  16FC  00A4               	movwf	??_RegisterRead+1
  6929  16FD  0824               	movf	??_RegisterRead+1,w
  6930  16FE  00A6               	movwf	RegisterRead@adress
  6931                           
  6932                           ;functions.c: 724: WriteSPI(adress);
  6933  16FF  0826               	movf	RegisterRead@adress,w
  6934  1700  160A  118A  2628  160A  118A  	fcall	_WriteSPI
  6935                           
  6936                           ;functions.c: 725: value = ReadSPI();
  6937  1705  160A  118A  25ED   	fcall	_ReadSPI
  6938  1708  1283               	bcf	3,5	;RP0=0, select bank0
  6939  1709  1303               	bcf	3,6	;RP1=0, select bank0
  6940  170A  00A3               	movwf	??_RegisterRead
  6941  170B  0823               	movf	??_RegisterRead,w
  6942  170C  00A5               	movwf	RegisterRead@value
  6943                           
  6944                           ;functions.c: 726: RA4 = 1;
  6945  170D  1605               	bsf	5,4	;volatile
  6946                           
  6947                           ;functions.c: 727: return value;
  6948  170E  0825               	movf	RegisterRead@value,w
  6949  170F  0008               	return
  6950  1710                     __end_of_RegisterRead:	
  6951                           
  6952                           	psect	text33
  6953  161B                     __ptext33:	
  6954 ;; *************** function _Mode_2 *****************
  6955 ;; Defined at:
  6956 ;;		line 298 in file "functions.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  1    wreg      void 
  6963 ;; Registers used:
  6964 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6970 ;;      Params:         0       0       0       0       0
  6971 ;;      Locals:         0       0       0       0       0
  6972 ;;      Temps:          0       0       0       0       0
  6973 ;;      Totals:         0       0       0       0       0
  6974 ;;Total ram usage:        0 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    6
  6977 ;; This function calls:
  6978 ;;		_LightWithSensController
  6979 ;; This function is called by:
  6980 ;;		_main
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           
  6985                           ;psect for function _Mode_2
  6986  161B                     _Mode_2:	
  6987                           
  6988                           ;functions.c: 300: LightWithSensController();
  6989                           
  6990                           ;incstack = 0
  6991                           ; Regs used in _Mode_2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6992  161B  120A  158A  20F0  160A  118A  	fcall	_LightWithSensController
  6993                           
  6994                           ;functions.c: 301: if(RC2)
  6995  1620  1283               	bcf	3,5	;RP0=0, select bank0
  6996  1621  1303               	bcf	3,6	;RP1=0, select bank0
  6997  1622  1D07               	btfss	7,2	;volatile
  6998  1623  2E26               	goto	l368
  6999                           
  7000                           ;functions.c: 302: RC1 = 1;
  7001  1624  1487               	bsf	7,1	;volatile
  7002  1625  0008               	return
  7003  1626                     l368:	
  7004                           
  7005                           ;functions.c: 303: else
  7006                           ;functions.c: 304: RC1 = 0;
  7007  1626  1087               	bcf	7,1	;volatile
  7008  1627  0008               	return
  7009  1628                     __end_of_Mode_2:	
  7010                           
  7011                           	psect	text34
  7012  16A6                     __ptext34:	
  7013 ;; *************** function _Mode_1 *****************
  7014 ;; Defined at:
  7015 ;;		line 284 in file "functions.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;		None
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;		None
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      void 
  7022 ;; Registers used:
  7023 ;;		wreg, status,2, status,0, pclath, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7029 ;;      Params:         0       0       0       0       0
  7030 ;;      Locals:         0       0       0       0       0
  7031 ;;      Temps:          0       0       0       0       0
  7032 ;;      Totals:         0       0       0       0       0
  7033 ;;Total ram usage:        0 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    5
  7036 ;; This function calls:
  7037 ;;		_DarknessCheck
  7038 ;; This function is called by:
  7039 ;;		_main
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           
  7044                           ;psect for function _Mode_1
  7045  16A6                     _Mode_1:	
  7046                           
  7047                           ;functions.c: 287: if((intSecondCounter == 30)&&(!RC2))
  7048                           
  7049                           ;incstack = 0
  7050                           ; Regs used in _Mode_1: [wreg+status,2+status,0+pclath+cstack]
  7051  16A6  301E               	movlw	30
  7052  16A7  1283               	bcf	3,5	;RP0=0, select bank0
  7053  16A8  1303               	bcf	3,6	;RP1=0, select bank0
  7054  16A9  0665               	xorwf	_intSecondCounter,w
  7055  16AA  0466               	iorwf	_intSecondCounter+1,w
  7056  16AB  1903               	btfsc	3,2
  7057  16AC  1907               	btfsc	7,2	;volatile
  7058  16AD  2EB3               	goto	l3093
  7059                           
  7060                           ;functions.c: 288: DarknessCheck();
  7061  16AE  160A  118A  2756  160A  118A  	fcall	_DarknessCheck
  7062  16B3                     l3093:	
  7063                           
  7064                           ;functions.c: 289: if((intBlinkCycle == 1)&&(bDark == 1))
  7065  16B3  1283               	bcf	3,5	;RP0=0, select bank0
  7066  16B4  1303               	bcf	3,6	;RP1=0, select bank0
  7067  16B5  035D               	decf	_intBlinkCycle,w
  7068  16B6  045E               	iorwf	_intBlinkCycle+1,w
  7069  16B7  1D03               	btfss	3,2
  7070  16B8  2EBE               	goto	l363
  7071  16B9  0368               	decf	_bDark,w
  7072  16BA  1D03               	btfss	3,2
  7073  16BB  2EBE               	goto	l363
  7074                           
  7075                           ;functions.c: 290: RC2 = 1;
  7076  16BC  1507               	bsf	7,2	;volatile
  7077  16BD  0008               	return
  7078  16BE                     l363:	
  7079                           
  7080                           ;functions.c: 291: else
  7081                           ;functions.c: 292: RC2 = 0;
  7082  16BE  1107               	bcf	7,2	;volatile
  7083  16BF  0008               	return
  7084  16C0                     __end_of_Mode_1:	
  7085                           
  7086                           	psect	text35
  7087  15E9                     __ptext35:	
  7088 ;; *************** function _Mode_0 *****************
  7089 ;; Defined at:
  7090 ;;		line 276 in file "functions.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;		None
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;		None
  7095 ;; Return value:  Size  Location     Type
  7096 ;;                  1    wreg      void 
  7097 ;; Registers used:
  7098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7099 ;; Tracked objects:
  7100 ;;		On entry : 0/0
  7101 ;;		On exit  : 0/0
  7102 ;;		Unchanged: 0/0
  7103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7104 ;;      Params:         0       0       0       0       0
  7105 ;;      Locals:         0       0       0       0       0
  7106 ;;      Temps:          0       0       0       0       0
  7107 ;;      Totals:         0       0       0       0       0
  7108 ;;Total ram usage:        0 bytes
  7109 ;; Hardware stack levels used:    1
  7110 ;; Hardware stack levels required when called:    6
  7111 ;; This function calls:
  7112 ;;		_LightWithSensController
  7113 ;; This function is called by:
  7114 ;;		_main
  7115 ;; This function uses a non-reentrant model
  7116 ;;
  7117                           
  7118                           
  7119                           ;psect for function _Mode_0
  7120  15E9                     _Mode_0:	
  7121                           
  7122                           ;functions.c: 278: LightWithSensController();
  7123                           
  7124                           ;incstack = 0
  7125                           ; Regs used in _Mode_0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7126  15E9  120A  158A  20F0   	fcall	_LightWithSensController
  7127  15EC  0008               	return
  7128  15ED                     __end_of_Mode_0:	
  7129                           
  7130                           	psect	text36
  7131  08F0                     __ptext36:	
  7132 ;; *************** function _LightWithSensController *****************
  7133 ;; Defined at:
  7134 ;;		line 342 in file "functions.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;		None
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;		None
  7139 ;; Return value:  Size  Location     Type
  7140 ;;                  1    wreg      void 
  7141 ;; Registers used:
  7142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7143 ;; Tracked objects:
  7144 ;;		On entry : 0/0
  7145 ;;		On exit  : 0/0
  7146 ;;		Unchanged: 0/0
  7147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7148 ;;      Params:         0       0       0       0       0
  7149 ;;      Locals:         0       0       0       0       0
  7150 ;;      Temps:          0       0       0       0       0
  7151 ;;      Totals:         0       0       0       0       0
  7152 ;;Total ram usage:        0 bytes
  7153 ;; Hardware stack levels used:    1
  7154 ;; Hardware stack levels required when called:    5
  7155 ;; This function calls:
  7156 ;;		_DarknessCheck
  7157 ;;		_timerFunction
  7158 ;; This function is called by:
  7159 ;;		_Mode_0
  7160 ;;		_Mode_2
  7161 ;;		_Mode_4
  7162 ;;		_Mode_5
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           
  7167                           ;psect for function _LightWithSensController
  7168  08F0                     _LightWithSensController:	
  7169                           
  7170                           ;functions.c: 346: if((intSecondCounter == 30)&&(!RC2))
  7171                           
  7172                           ;incstack = 0
  7173                           ; Regs used in _LightWithSensController: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7174  08F0  301E               	movlw	30
  7175  08F1  1283               	bcf	3,5	;RP0=0, select bank0
  7176  08F2  1303               	bcf	3,6	;RP1=0, select bank0
  7177  08F3  0665               	xorwf	_intSecondCounter,w
  7178  08F4  0466               	iorwf	_intSecondCounter+1,w
  7179  08F5  1903               	btfsc	3,2
  7180  08F6  1907               	btfsc	7,2	;volatile
  7181  08F7  28FD               	goto	l2849
  7182                           
  7183                           ;functions.c: 347: DarknessCheck();
  7184  08F8  160A  118A  2756  120A  158A  	fcall	_DarknessCheck
  7185  08FD                     l2849:	
  7186                           
  7187                           ;functions.c: 351: if((bDark == 1)&&(RA1)&&(!RC2))
  7188  08FD  1283               	bcf	3,5	;RP0=0, select bank0
  7189  08FE  1303               	bcf	3,6	;RP1=0, select bank0
  7190  08FF  0368               	decf	_bDark,w
  7191  0900  1903               	btfsc	3,2
  7192  0901  1C85               	btfss	5,1	;volatile
  7193  0902  2912               	goto	l2859
  7194  0903  1907               	btfsc	7,2	;volatile
  7195  0904  2912               	goto	l2859
  7196                           
  7197                           ;functions.c: 352: {
  7198                           ;functions.c: 354: RC2 = 1;
  7199  0905  1507               	bsf	7,2	;volatile
  7200                           
  7201                           ;functions.c: 356: timerFunction(0,120);
  7202  0906  3000               	movlw	0
  7203  0907  00A0               	movwf	timerFunction@intTimerNumber
  7204  0908  00A1               	movwf	timerFunction@intTimerNumber+1
  7205  0909  3078               	movlw	120
  7206  090A  00A2               	movwf	timerFunction@intSetSeconds
  7207  090B  3000               	movlw	0
  7208  090C  00A3               	movwf	timerFunction@intSetSeconds+1
  7209  090D  160A  118A  2646  120A  158A  	fcall	_timerFunction
  7210  0912                     l2859:	
  7211                           
  7212                           ;functions.c: 357: }
  7213                           ;functions.c: 360: if(bTimerComplete[0])
  7214  0912  1283               	bcf	3,5	;RP0=0, select bank0
  7215  0913  1303               	bcf	3,6	;RP1=0, select bank0
  7216  0914  0856               	movf	_bTimerComplete,w
  7217  0915  1903               	btfsc	3,2
  7218  0916  0008               	return
  7219                           
  7220                           ;functions.c: 361: {
  7221                           ;functions.c: 362: DarknessCheck();
  7222  0917  160A  118A  2756  120A  158A  	fcall	_DarknessCheck
  7223                           
  7224                           ;functions.c: 363: if((bDark)&&(RA1))
  7225  091C  1283               	bcf	3,5	;RP0=0, select bank0
  7226  091D  1303               	bcf	3,6	;RP1=0, select bank0
  7227  091E  0868               	movf	_bDark,w
  7228  091F  1D03               	btfss	3,2
  7229  0920  1C85               	btfss	5,1	;volatile
  7230  0921  292D               	goto	l387
  7231                           
  7232                           ;functions.c: 364: {
  7233                           ;functions.c: 365: timerFunction(0,120);
  7234  0922  3000               	movlw	0
  7235  0923  00A0               	movwf	timerFunction@intTimerNumber
  7236  0924  00A1               	movwf	timerFunction@intTimerNumber+1
  7237  0925  3078               	movlw	120
  7238  0926  00A2               	movwf	timerFunction@intSetSeconds
  7239  0927  3000               	movlw	0
  7240  0928  00A3               	movwf	timerFunction@intSetSeconds+1
  7241  0929  160A  118A  2646   	fcall	_timerFunction
  7242                           
  7243                           ;functions.c: 366: }
  7244  092C  0008               	return
  7245  092D                     l387:	
  7246                           
  7247                           ;functions.c: 367: else
  7248                           ;functions.c: 368: RC2 = 0;
  7249  092D  1107               	bcf	7,2	;volatile
  7250  092E  0008               	return
  7251  092F                     __end_of_LightWithSensController:	
  7252                           
  7253                           	psect	text37
  7254  1646                     __ptext37:	
  7255 ;; *************** function _timerFunction *****************
  7256 ;; Defined at:
  7257 ;;		line 393 in file "functions.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;  intTimerNumb    2    0[BANK0 ] int 
  7260 ;;  intSetSecond    2    2[BANK0 ] int 
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;		None
  7263 ;; Return value:  Size  Location     Type
  7264 ;;                  1    wreg      unsigned char 
  7265 ;; Registers used:
  7266 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7272 ;;      Params:         0       4       0       0       0
  7273 ;;      Locals:         0       0       0       0       0
  7274 ;;      Temps:          0       1       0       0       0
  7275 ;;      Totals:         0       5       0       0       0
  7276 ;;Total ram usage:        5 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    2
  7279 ;; This function calls:
  7280 ;;		Nothing
  7281 ;; This function is called by:
  7282 ;;		_TransiverToReceive
  7283 ;;		_TransiverReadFIFO
  7284 ;;		_TransmittPacket
  7285 ;;		_LightWithSensController
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288                           
  7289                           
  7290                           ;psect for function _timerFunction
  7291  1646                     _timerFunction:	
  7292                           
  7293                           ;functions.c: 395: intClockTimer[intTimerNumber] = intSetSeconds;
  7294                           
  7295                           ;incstack = 0
  7296                           ; Regs used in _timerFunction: [wreg-fsr0h+status,2+status,0]
  7297  1646  1283               	bcf	3,5	;RP0=0, select bank0
  7298  1647  1303               	bcf	3,6	;RP1=0, select bank0
  7299  1648  0820               	movf	timerFunction@intTimerNumber,w
  7300  1649  00A4               	movwf	??_timerFunction
  7301  164A  0724               	addwf	??_timerFunction,w
  7302  164B  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  7303  164C  0084               	movwf	4
  7304  164D  0822               	movf	timerFunction@intSetSeconds,w
  7305  164E  1383               	bcf	3,7	;select IRP bank1
  7306  164F  0080               	movwf	0
  7307  1650  0A84               	incf	4,f
  7308  1651  0823               	movf	timerFunction@intSetSeconds+1,w
  7309  1652  0080               	movwf	0
  7310                           
  7311                           ;functions.c: 396: bTimerComplete[intTimerNumber] = 0;
  7312  1653  0820               	movf	timerFunction@intTimerNumber,w
  7313  1654  3E56               	addlw	(low (_bTimerComplete| 0))& (0+255)
  7314  1655  0084               	movwf	4
  7315  1656  0180               	clrf	0
  7316  1657  0008               	return
  7317  1658                     __end_of_timerFunction:	
  7318                           ;functions.c: 397: return 1;
  7319                           ;	Return value of _timerFunction is never used
  7320                           
  7321                           
  7322                           	psect	text38
  7323  1756                     __ptext38:	
  7324 ;; *************** function _DarknessCheck *****************
  7325 ;; Defined at:
  7326 ;;		line 931 in file "functions.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;		None
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;  darknessValu    1    9[BANK0 ] unsigned char 
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  1    wreg      void 
  7333 ;; Registers used:
  7334 ;;		wreg, status,2, status,0, pclath, cstack
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7340 ;;      Params:         0       0       0       0       0
  7341 ;;      Locals:         0       1       0       0       0
  7342 ;;      Temps:          0       1       0       0       0
  7343 ;;      Totals:         0       2       0       0       0
  7344 ;;Total ram usage:        2 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    4
  7347 ;; This function calls:
  7348 ;;		_AnalogValue
  7349 ;;		_eeprom_read
  7350 ;; This function is called by:
  7351 ;;		_ReceivedPacketHandler
  7352 ;;		_Mode_1
  7353 ;;		_LightWithSensController
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           
  7358                           ;psect for function _DarknessCheck
  7359  1756                     _DarknessCheck:	
  7360                           
  7361                           ;functions.c: 933: unsigned char darknessValue;
  7362                           ;functions.c: 936: if(bValueFromPot == TRUE)
  7363                           
  7364                           ;incstack = 0
  7365                           ; Regs used in _DarknessCheck: [wreg+status,2+status,0+pclath+cstack]
  7366  1756  1283               	bcf	3,5	;RP0=0, select bank0
  7367  1757  1303               	bcf	3,6	;RP1=0, select bank0
  7368  1758  036D               	decf	_bValueFromPot,w
  7369  1759  1D03               	btfss	3,2
  7370  175A  2F62               	goto	l2665
  7371                           
  7372                           ;functions.c: 937: darknessValue= AnalogValue(3);
  7373  175B  3003               	movlw	3
  7374  175C  160A  118A  277D  160A  118A  	fcall	_AnalogValue
  7375  1761  2F68               	goto	L3
  7376  1762                     l2665:	
  7377                           
  7378                           ;functions.c: 938: else
  7379                           ;functions.c: 939: darknessValue=eeprom_read(0);
  7380  1762  3000               	movlw	0
  7381  1763  120A  158A  203D  160A  118A  	fcall	_eeprom_read
  7382  1768                     L3:	
  7383  1768  1283               	bcf	3,5	;RP0=0, select bank0
  7384  1769  1303               	bcf	3,6	;RP1=0, select bank0
  7385  176A  00A8               	movwf	??_DarknessCheck
  7386  176B  0828               	movf	??_DarknessCheck,w
  7387  176C  00A9               	movwf	DarknessCheck@darknessValue
  7388                           
  7389                           ;functions.c: 941: if(AnalogValue(0)>darknessValue)
  7390  176D  3000               	movlw	0
  7391  176E  160A  118A  277D  160A  118A  	fcall	_AnalogValue
  7392  1773  1283               	bcf	3,5	;RP0=0, select bank0
  7393  1774  1303               	bcf	3,6	;RP1=0, select bank0
  7394  1775  0229               	subwf	DarknessCheck@darknessValue,w
  7395  1776  1803               	skipnc
  7396  1777  2F7B               	goto	l2669
  7397                           
  7398                           ;functions.c: 942: bDark = 1;
  7399  1778  01E8               	clrf	_bDark
  7400  1779  0AE8               	incf	_bDark,f
  7401  177A  0008               	return
  7402  177B                     l2669:	
  7403                           
  7404                           ;functions.c: 943: else
  7405                           ;functions.c: 944: bDark = 0;
  7406  177B  01E8               	clrf	_bDark
  7407  177C  0008               	return
  7408  177D                     __end_of_DarknessCheck:	
  7409                           
  7410                           	psect	text39
  7411  083D                     __ptext39:	
  7412 ;; *************** function _eeprom_read *****************
  7413 ;; Defined at:
  7414 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eeread.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  addr            1    wreg     unsigned char 
  7417 ;; Auto vars:     Size  Location     Type
  7418 ;;  addr            1    1[BANK0 ] unsigned char 
  7419 ;; Return value:  Size  Location     Type
  7420 ;;                  1    wreg      unsigned char 
  7421 ;; Registers used:
  7422 ;;		wreg, status,2, status,0
  7423 ;; Tracked objects:
  7424 ;;		On entry : 0/0
  7425 ;;		On exit  : 0/0
  7426 ;;		Unchanged: 0/0
  7427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7428 ;;      Params:         0       0       0       0       0
  7429 ;;      Locals:         0       1       0       0       0
  7430 ;;      Temps:          0       1       0       0       0
  7431 ;;      Totals:         0       2       0       0       0
  7432 ;;Total ram usage:        2 bytes
  7433 ;; Hardware stack levels used:    1
  7434 ;; Hardware stack levels required when called:    2
  7435 ;; This function calls:
  7436 ;;		Nothing
  7437 ;; This function is called by:
  7438 ;;		_ReceivedPacketHandler
  7439 ;;		_DarknessCheck
  7440 ;;		_ReadMemoryAdress
  7441 ;;		_IncreaseMemoryAdress
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           
  7446                           ;psect for function _eeprom_read
  7447  083D                     _eeprom_read:	
  7448                           
  7449                           ;incstack = 0
  7450                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  7451                           ;eeprom_read@addr stored from wreg
  7452  083D  1283               	bcf	3,5	;RP0=0, select bank0
  7453  083E  1303               	bcf	3,6	;RP1=0, select bank0
  7454  083F  00A1               	movwf	eeprom_read@addr
  7455  0840  2843               	goto	l681
  7456  0841                     u1311:	
  7457  0841  1283               	bcf	3,5	;RP0=0, select bank0
  7458  0842  1303               	bcf	3,6	;RP1=0, select bank0
  7459  0843                     l681:	
  7460  0843  0064               	clrwdt	;# 
  7461  0844  1683               	bsf	3,5	;RP0=1, select bank3
  7462  0845  1703               	bsf	3,6	;RP1=1, select bank3
  7463  0846  188C               	btfsc	12,1	;volsfr
  7464  0847  2841               	goto	u1311
  7465  0848  1283               	bcf	3,5	;RP0=0, select bank0
  7466  0849  1303               	bcf	3,6	;RP1=0, select bank0
  7467  084A  0821               	movf	eeprom_read@addr,w
  7468  084B  1283               	bcf	3,5	;RP0=0, select bank2
  7469  084C  1703               	bsf	3,6	;RP1=1, select bank2
  7470  084D  008D               	movwf	13	;volatile
  7471  084E  303F               	movlw	63
  7472  084F  1283               	bcf	3,5	;RP0=0, select bank0
  7473  0850  1303               	bcf	3,6	;RP1=0, select bank0
  7474  0851  00A0               	movwf	??_eeprom_read
  7475  0852  0820               	movf	??_eeprom_read,w
  7476  0853  1683               	bsf	3,5	;RP0=1, select bank3
  7477  0854  1703               	bsf	3,6	;RP1=1, select bank3
  7478  0855  058C               	andwf	12,f	;volsfr
  7479  0856  140C               	bsf	12,0	;volsfr
  7480  0857  1003               	clrc
  7481  0858  180C               	btfsc	12,0	;volsfr
  7482  0859  1403               	setc
  7483  085A  3000               	movlw	0
  7484  085B  1803               	skipnc
  7485  085C  3001               	movlw	1
  7486  085D  1283               	bcf	3,5	;RP0=0, select bank2
  7487  085E  1703               	bsf	3,6	;RP1=1, select bank2
  7488  085F  080C               	movf	12,w	;volatile
  7489  0860  0008               	return
  7490  0861                     __end_of_eeprom_read:	
  7491                           
  7492                           	psect	text40
  7493  177D                     __ptext40:	
  7494 ;; *************** function _AnalogValue *****************
  7495 ;; Defined at:
  7496 ;;		line 901 in file "functions.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;  channel         1    wreg     unsigned char 
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;  channel         1    7[BANK0 ] unsigned char 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  1    wreg      unsigned char 
  7503 ;; Registers used:
  7504 ;;		wreg, status,2, status,0, pclath, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7510 ;;      Params:         0       0       0       0       0
  7511 ;;      Locals:         0       1       0       0       0
  7512 ;;      Temps:          0       1       0       0       0
  7513 ;;      Totals:         0       2       0       0       0
  7514 ;;Total ram usage:        2 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    3
  7517 ;; This function calls:
  7518 ;;		_DelayDs
  7519 ;; This function is called by:
  7520 ;;		_ReceivedPacketHandler
  7521 ;;		_DarknessCheck
  7522 ;;		_saveDataToFlash
  7523 ;; This function uses a non-reentrant model
  7524 ;;
  7525                           
  7526                           
  7527                           ;psect for function _AnalogValue
  7528  177D                     _AnalogValue:	
  7529                           
  7530                           ;incstack = 0
  7531                           ; Regs used in _AnalogValue: [wreg+status,2+status,0+pclath+cstack]
  7532                           ;AnalogValue@channel stored from wreg
  7533  177D  1283               	bcf	3,5	;RP0=0, select bank0
  7534  177E  1303               	bcf	3,6	;RP1=0, select bank0
  7535  177F  00A7               	movwf	AnalogValue@channel
  7536                           
  7537                           ;functions.c: 903: RC0 = 0;
  7538  1780  1007               	bcf	7,0	;volatile
  7539                           
  7540                           ;functions.c: 904: ADCON0bits.CHS = channel;
  7541  1781  0827               	movf	AnalogValue@channel,w
  7542  1782  00A6               	movwf	??_AnalogValue
  7543  1783  0DA6               	rlf	??_AnalogValue,f
  7544  1784  0DA6               	rlf	??_AnalogValue,f
  7545  1785  081F               	movf	31,w	;volatile
  7546  1786  0626               	xorwf	??_AnalogValue,w
  7547  1787  39C3               	andlw	-61
  7548  1788  0626               	xorwf	??_AnalogValue,w
  7549  1789  009F               	movwf	31	;volatile
  7550                           
  7551                           ;functions.c: 905: ADCON0bits.ADON = 1;
  7552  178A  141F               	bsf	31,0	;volatile
  7553                           
  7554                           ;functions.c: 906: DelayDs(1);
  7555  178B  3001               	movlw	1
  7556  178C  00A0               	movwf	DelayDs@cnt
  7557  178D  3000               	movlw	0
  7558  178E  00A1               	movwf	DelayDs@cnt+1
  7559  178F  160A  118A  2732  160A  118A  	fcall	_DelayDs
  7560                           
  7561                           ;functions.c: 907: ADCON0bits.GO = 1;
  7562  1794  1283               	bcf	3,5	;RP0=0, select bank0
  7563  1795  1303               	bcf	3,6	;RP1=0, select bank0
  7564  1796  149F               	bsf	31,1	;volatile
  7565                           
  7566                           ;functions.c: 908: DelayDs(1);
  7567  1797  3001               	movlw	1
  7568  1798  00A0               	movwf	DelayDs@cnt
  7569  1799  3000               	movlw	0
  7570  179A  00A1               	movwf	DelayDs@cnt+1
  7571  179B  160A  118A  2732  160A  118A  	fcall	_DelayDs
  7572  17A0                     l481:	
  7573                           ;functions.c: 909: while(ADCON0bits.GO);
  7574                           
  7575  17A0  1283               	bcf	3,5	;RP0=0, select bank0
  7576  17A1  1303               	bcf	3,6	;RP1=0, select bank0
  7577  17A2  189F               	btfsc	31,1	;volatile
  7578  17A3  2FA0               	goto	l481
  7579                           
  7580                           ;functions.c: 910: ADCON0bits.ADON = 0;
  7581  17A4  101F               	bcf	31,0	;volatile
  7582                           
  7583                           ;functions.c: 911: RC0 = 1;
  7584  17A5  1407               	bsf	7,0	;volatile
  7585                           
  7586                           ;functions.c: 913: return ADRESH;
  7587  17A6  081E               	movf	30,w	;volatile
  7588  17A7  0008               	return
  7589  17A8                     __end_of_AnalogValue:	
  7590                           
  7591                           	psect	text41
  7592  1732                     __ptext41:	
  7593 ;; *************** function _DelayDs *****************
  7594 ;; Defined at:
  7595 ;;		line 511 in file "functions.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  cnt             2    0[BANK0 ] int 
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;  i               2    4[BANK0 ] int 
  7600 ;; Return value:  Size  Location     Type
  7601 ;;                  1    wreg      void 
  7602 ;; Registers used:
  7603 ;;		wreg, status,2
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7609 ;;      Params:         0       2       0       0       0
  7610 ;;      Locals:         0       2       0       0       0
  7611 ;;      Temps:          0       2       0       0       0
  7612 ;;      Totals:         0       6       0       0       0
  7613 ;;Total ram usage:        6 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; Hardware stack levels required when called:    2
  7616 ;; This function calls:
  7617 ;;		Nothing
  7618 ;; This function is called by:
  7619 ;;		_ReceivedPacketHandler
  7620 ;;		_Blink
  7621 ;;		_AnalogValue
  7622 ;; This function uses a non-reentrant model
  7623 ;;
  7624                           
  7625                           
  7626                           ;psect for function _DelayDs
  7627  1732                     _DelayDs:	
  7628                           
  7629                           ;functions.c: 512: int i;
  7630                           ;functions.c: 513: for(i=0;i<cnt;i++){
  7631                           
  7632                           ;incstack = 0
  7633                           ; Regs used in _DelayDs: [wreg+status,2]
  7634  1732  1283               	bcf	3,5	;RP0=0, select bank0
  7635  1733  1303               	bcf	3,6	;RP1=0, select bank0
  7636  1734  01A4               	clrf	DelayDs@i
  7637  1735  01A5               	clrf	DelayDs@i+1
  7638  1736                     l411:	
  7639  1736  0825               	movf	DelayDs@i+1,w
  7640  1737  3A80               	xorlw	128
  7641  1738  00A2               	movwf	??_DelayDs
  7642  1739  0821               	movf	DelayDs@cnt+1,w
  7643  173A  3A80               	xorlw	128
  7644  173B  0222               	subwf	??_DelayDs,w
  7645  173C  1D03               	skipz
  7646  173D  2F40               	goto	u1305
  7647  173E  0820               	movf	DelayDs@cnt,w
  7648  173F  0224               	subwf	DelayDs@i,w
  7649  1740                     u1305:	
  7650  1740  1803               	btfsc	3,0
  7651  1741  0008               	return
  7652                           
  7653                           ;functions.c: 514: _delay((unsigned long)((100)*(4000000/4000.0)));
  7654  1742  3082               	movlw	130
  7655  1743  1283               	bcf	3,5	;RP0=0, select bank0
  7656  1744  1303               	bcf	3,6	;RP1=0, select bank0
  7657  1745  00A3               	movwf	??_DelayDs+1
  7658  1746  30DD               	movlw	221
  7659  1747  00A2               	movwf	??_DelayDs
  7660  1748                     u2657:	
  7661  1748  0BA2               	decfsz	??_DelayDs,f
  7662  1749  2F48               	goto	u2657
  7663  174A  0BA3               	decfsz	??_DelayDs+1,f
  7664  174B  2F48               	goto	u2657
  7665  174C  2F4D               	nop2
  7666  174D  3001               	movlw	1
  7667  174E  1283               	bcf	3,5	;RP0=0, select bank0
  7668  174F  1303               	bcf	3,6	;RP1=0, select bank0
  7669  1750  07A4               	addwf	DelayDs@i,f
  7670  1751  1803               	skipnc
  7671  1752  0AA5               	incf	DelayDs@i+1,f
  7672  1753  3000               	movlw	0
  7673  1754  07A5               	addwf	DelayDs@i+1,f
  7674  1755  2F36               	goto	l411
  7675  1756                     __end_of_DelayDs:	
  7676                           
  7677                           	psect	text42
  7678  0C2A                     __ptext42:	
  7679 ;; *************** function _ClockInit *****************
  7680 ;; Defined at:
  7681 ;;		line 6 in file "MCP79510.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;		None
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  cnt             1    4[BANK0 ] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg, status,2, status,0, pclath, cstack
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7695 ;;      Params:         0       0       0       0       0
  7696 ;;      Locals:         0       1       0       0       0
  7697 ;;      Temps:          0       1       0       0       0
  7698 ;;      Totals:         0       2       0       0       0
  7699 ;;Total ram usage:        2 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    4
  7702 ;; This function calls:
  7703 ;;		_ReadSPI
  7704 ;;		_WriteSPI
  7705 ;; This function is called by:
  7706 ;;		_main
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           
  7711                           ;psect for function _ClockInit
  7712  0C2A                     _ClockInit:	
  7713                           
  7714                           ;MCP79510.c: 8: RD4 = 0;
  7715                           
  7716                           ;incstack = 0
  7717                           ; Regs used in _ClockInit: [wreg+status,2+status,0+pclath+cstack]
  7718  0C2A  1283               	bcf	3,5	;RP0=0, select bank0
  7719  0C2B  1303               	bcf	3,6	;RP1=0, select bank0
  7720  0C2C  1208               	bcf	8,4	;volatile
  7721                           
  7722                           ;MCP79510.c: 9: WriteSPI(0x12);
  7723  0C2D  3012               	movlw	18
  7724  0C2E  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7725                           
  7726                           ;MCP79510.c: 10: WriteSPI(0x01);
  7727  0C33  3001               	movlw	1
  7728  0C34  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7729                           
  7730                           ;MCP79510.c: 11: WriteSPI(0x00);
  7731  0C39  3000               	movlw	0
  7732  0C3A  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7733                           
  7734                           ;MCP79510.c: 12: RD4 = 1;
  7735  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  7736  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  7737  0C41  1608               	bsf	8,4	;volatile
  7738                           
  7739                           ;MCP79510.c: 13: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7740  0C42  300D               	movlw	13
  7741  0C43  00A3               	movwf	??_ClockInit
  7742  0C44                     u2667:	
  7743  0C44  0BA3               	decfsz	??_ClockInit,f
  7744  0C45  2C44               	goto	u2667
  7745                           
  7746                           ;MCP79510.c: 14: RD4 = 0;
  7747  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  7748  0C47  1303               	bcf	3,6	;RP1=0, select bank0
  7749  0C48  1208               	bcf	8,4	;volatile
  7750                           
  7751                           ;MCP79510.c: 15: WriteSPI(0x12);
  7752  0C49  3012               	movlw	18
  7753  0C4A  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7754                           
  7755                           ;MCP79510.c: 16: WriteSPI(0x02);
  7756  0C4F  3002               	movlw	2
  7757  0C50  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7758                           
  7759                           ;MCP79510.c: 17: WriteSPI(0x00);
  7760  0C55  3000               	movlw	0
  7761  0C56  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7762                           
  7763                           ;MCP79510.c: 18: RD4 = 1;
  7764  0C5B  1283               	bcf	3,5	;RP0=0, select bank0
  7765  0C5C  1303               	bcf	3,6	;RP1=0, select bank0
  7766  0C5D  1608               	bsf	8,4	;volatile
  7767                           
  7768                           ;MCP79510.c: 19: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7769  0C5E  300D               	movlw	13
  7770  0C5F  00A3               	movwf	??_ClockInit
  7771  0C60                     u2677:	
  7772  0C60  0BA3               	decfsz	??_ClockInit,f
  7773  0C61  2C60               	goto	u2677
  7774                           
  7775                           ;MCP79510.c: 20: RD4 = 0;
  7776  0C62  1283               	bcf	3,5	;RP0=0, select bank0
  7777  0C63  1303               	bcf	3,6	;RP1=0, select bank0
  7778  0C64  1208               	bcf	8,4	;volatile
  7779                           
  7780                           ;MCP79510.c: 21: WriteSPI(0x12);
  7781  0C65  3012               	movlw	18
  7782  0C66  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7783                           
  7784                           ;MCP79510.c: 22: WriteSPI(0x08);
  7785  0C6B  3008               	movlw	8
  7786  0C6C  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7787                           
  7788                           ;MCP79510.c: 23: WriteSPI(0x00);
  7789  0C71  3000               	movlw	0
  7790  0C72  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7791                           
  7792                           ;MCP79510.c: 24: RD4 = 1;
  7793  0C77  1283               	bcf	3,5	;RP0=0, select bank0
  7794  0C78  1303               	bcf	3,6	;RP1=0, select bank0
  7795  0C79  1608               	bsf	8,4	;volatile
  7796                           
  7797                           ;MCP79510.c: 25: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7798  0C7A  300D               	movlw	13
  7799  0C7B  00A3               	movwf	??_ClockInit
  7800  0C7C                     u2687:	
  7801  0C7C  0BA3               	decfsz	??_ClockInit,f
  7802  0C7D  2C7C               	goto	u2687
  7803                           
  7804                           ;MCP79510.c: 26: RD4 = 0;
  7805  0C7E  1283               	bcf	3,5	;RP0=0, select bank0
  7806  0C7F  1303               	bcf	3,6	;RP1=0, select bank0
  7807  0C80  1208               	bcf	8,4	;volatile
  7808                           
  7809                           ;MCP79510.c: 27: WriteSPI(0x12);
  7810  0C81  3012               	movlw	18
  7811  0C82  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7812                           
  7813                           ;MCP79510.c: 28: WriteSPI(0x01);
  7814  0C87  3001               	movlw	1
  7815  0C88  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7816                           
  7817                           ;MCP79510.c: 29: WriteSPI(0x80);
  7818  0C8D  3080               	movlw	128
  7819  0C8E  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7820                           
  7821                           ;MCP79510.c: 30: RD4 = 1;
  7822  0C93  1283               	bcf	3,5	;RP0=0, select bank0
  7823  0C94  1303               	bcf	3,6	;RP1=0, select bank0
  7824  0C95  1608               	bsf	8,4	;volatile
  7825                           
  7826                           ;MCP79510.c: 32: char cnt = 0;
  7827  0C96  01A4               	clrf	ClockInit@cnt
  7828  0C97                     l3083:	
  7829                           ;MCP79510.c: 33: while(cnt < 100)
  7830                           
  7831  0C97  3064               	movlw	100
  7832  0C98  0224               	subwf	ClockInit@cnt,w
  7833  0C99  1803               	btfsc	3,0
  7834  0C9A  2CB7               	goto	l664
  7835                           
  7836                           ;MCP79510.c: 34: {
  7837                           ;MCP79510.c: 35: RD4 = 0;
  7838  0C9B  1208               	bcf	8,4	;volatile
  7839                           
  7840                           ;MCP79510.c: 36: WriteSPI(0x13);
  7841  0C9C  3013               	movlw	19
  7842  0C9D  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7843                           
  7844                           ;MCP79510.c: 37: WriteSPI(0x04);
  7845  0CA2  3004               	movlw	4
  7846  0CA3  160A  118A  2628  120A  158A  	fcall	_WriteSPI
  7847                           
  7848                           ;MCP79510.c: 38: if((ReadSPI() & 0b00100000) != 0)
  7849  0CA8  160A  118A  25ED  120A  158A  	fcall	_ReadSPI
  7850  0CAD  3920               	andlw	32
  7851  0CAE  1D03               	btfss	3,2
  7852  0CAF  2CB7               	goto	l664
  7853                           
  7854                           ;MCP79510.c: 42: }
  7855                           ;MCP79510.c: 43: cnt++;
  7856                           
  7857                           ;MCP79510.c: 39: {
  7858                           ;MCP79510.c: 40: break;
  7859  0CB0  3001               	movlw	1
  7860  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  7861  0CB2  1303               	bcf	3,6	;RP1=0, select bank0
  7862  0CB3  00A3               	movwf	??_ClockInit
  7863  0CB4  0823               	movf	??_ClockInit,w
  7864  0CB5  07A4               	addwf	ClockInit@cnt,f
  7865  0CB6  2C97               	goto	l3083
  7866  0CB7                     l664:	
  7867                           
  7868                           ;MCP79510.c: 46: }
  7869                           ;MCP79510.c: 47: RD4 = 1;
  7870  0CB7  1283               	bcf	3,5	;RP0=0, select bank0
  7871  0CB8  1303               	bcf	3,6	;RP1=0, select bank0
  7872  0CB9  1608               	bsf	8,4	;volatile
  7873  0CBA  0008               	return
  7874  0CBB                     __end_of_ClockInit:	
  7875                           
  7876                           	psect	text43
  7877  15ED                     __ptext43:	
  7878 ;; *************** function _ReadSPI *****************
  7879 ;; Defined at:
  7880 ;;		line 532 in file "functions.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;		None
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;		None
  7885 ;; Return value:  Size  Location     Type
  7886 ;;                  1    wreg      unsigned char 
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0, pclath, cstack
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7894 ;;      Params:         0       0       0       0       0
  7895 ;;      Locals:         0       0       0       0       0
  7896 ;;      Temps:          0       0       0       0       0
  7897 ;;      Totals:         0       0       0       0       0
  7898 ;;Total ram usage:        0 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    3
  7901 ;; This function calls:
  7902 ;;		_WriteSPI
  7903 ;; This function is called by:
  7904 ;;		_RegisterRead
  7905 ;;		_ReadFIFO
  7906 ;;		_read_ram_status
  7907 ;;		_read_write_flash_ram
  7908 ;;		_ClockInit
  7909 ;;		_ReadClock
  7910 ;;		_read_ram_id
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           
  7915                           ;psect for function _ReadSPI
  7916  15ED                     _ReadSPI:	
  7917                           
  7918                           ;functions.c: 534: WriteSPI(0x00);
  7919                           
  7920                           ;incstack = 0
  7921                           ; Regs used in _ReadSPI: [wreg+status,2+status,0+pclath+cstack]
  7922  15ED  3000               	movlw	0
  7923  15EE  160A  118A  2628   	fcall	_WriteSPI
  7924                           
  7925                           ;functions.c: 535: return SSPBUF;
  7926  15F1  1283               	bcf	3,5	;RP0=0, select bank0
  7927  15F2  1303               	bcf	3,6	;RP1=0, select bank0
  7928  15F3  0813               	movf	19,w	;volatile
  7929  15F4  0008               	return
  7930  15F5                     __end_of_ReadSPI:	
  7931                           
  7932                           	psect	text44
  7933  1628                     __ptext44:	
  7934 ;; *************** function _WriteSPI *****************
  7935 ;; Defined at:
  7936 ;;		line 520 in file "functions.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;  databyte        1    wreg     unsigned char 
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  databyte        1    2[BANK0 ] unsigned char 
  7941 ;;  buffer          1    1[BANK0 ] unsigned char 
  7942 ;; Return value:  Size  Location     Type
  7943 ;;                  1    wreg      void 
  7944 ;; Registers used:
  7945 ;;		wreg
  7946 ;; Tracked objects:
  7947 ;;		On entry : 0/0
  7948 ;;		On exit  : 0/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7951 ;;      Params:         0       0       0       0       0
  7952 ;;      Locals:         0       2       0       0       0
  7953 ;;      Temps:          0       1       0       0       0
  7954 ;;      Totals:         0       3       0       0       0
  7955 ;;Total ram usage:        3 bytes
  7956 ;; Hardware stack levels used:    1
  7957 ;; Hardware stack levels required when called:    2
  7958 ;; This function calls:
  7959 ;;		Nothing
  7960 ;; This function is called by:
  7961 ;;		_ReadSPI
  7962 ;;		_RegisterRead
  7963 ;;		_RegisterSet
  7964 ;;		_WriteFIFO
  7965 ;;		_read_ram_status
  7966 ;;		_ram_bulk_erase
  7967 ;;		_read_write_flash_ram
  7968 ;;		_write_ram_status
  7969 ;;		_ClockInit
  7970 ;;		_ReadClock
  7971 ;;		_read_ram_id
  7972 ;;		_ram_sector_erase
  7973 ;;		_power_up_flash_ram
  7974 ;;		_power_down_flash_ram
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           
  7979                           ;psect for function _WriteSPI
  7980  1628                     _WriteSPI:	
  7981                           
  7982                           ;incstack = 0
  7983                           ; Regs used in _WriteSPI: [wreg]
  7984                           ;WriteSPI@databyte stored from wreg
  7985  1628  1283               	bcf	3,5	;RP0=0, select bank0
  7986  1629  1303               	bcf	3,6	;RP1=0, select bank0
  7987  162A  00A2               	movwf	WriteSPI@databyte
  7988                           
  7989                           ;functions.c: 522: unsigned char buffer;
  7990                           ;functions.c: 523: buffer = SSPBUF;
  7991  162B  0813               	movf	19,w	;volatile
  7992  162C  00A0               	movwf	??_WriteSPI
  7993  162D  0820               	movf	??_WriteSPI,w
  7994  162E  00A1               	movwf	WriteSPI@buffer
  7995                           
  7996                           ;functions.c: 524: PIR1bits.SSPIF=0;
  7997  162F  118C               	bcf	12,3	;volatile
  7998                           
  7999                           ;functions.c: 525: SSPBUF = databyte;
  8000  1630  0822               	movf	WriteSPI@databyte,w
  8001  1631  0093               	movwf	19	;volatile
  8002  1632                     l417:	
  8003                           ;functions.c: 526: while(PIR1bits.SSPIF == 0);
  8004                           
  8005  1632  1D8C               	btfss	12,3	;volatile
  8006  1633  2E32               	goto	l417
  8007                           
  8008                           ;functions.c: 527: PIR1bits.SSPIF = 0;
  8009  1634  118C               	bcf	12,3	;volatile
  8010  1635  0008               	return
  8011  1636                     __end_of_WriteSPI:	
  8012                           
  8013                           	psect	text45
  8014  0D6B                     __ptext45:	
  8015 ;; *************** function _tc_int *****************
  8016 ;; Defined at:
  8017 ;;		line 826 in file "functions.c"
  8018 ;; Parameters:    Size  Location     Type
  8019 ;;		None
  8020 ;; Auto vars:     Size  Location     Type
  8021 ;;		None
  8022 ;; Return value:  Size  Location     Type
  8023 ;;                  1    wreg      void 
  8024 ;; Registers used:
  8025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8026 ;; Tracked objects:
  8027 ;;		On entry : 0/0
  8028 ;;		On exit  : 0/0
  8029 ;;		Unchanged: 0/0
  8030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8031 ;;      Params:         0       0       0       0       0
  8032 ;;      Locals:         0       0       0       0       0
  8033 ;;      Temps:          7       0       0       0       0
  8034 ;;      Totals:         7       0       0       0       0
  8035 ;;Total ram usage:        7 bytes
  8036 ;; Hardware stack levels used:    1
  8037 ;; Hardware stack levels required when called:    1
  8038 ;; This function calls:
  8039 ;;		_TimerCounter
  8040 ;;		i1_OperationMode
  8041 ;; This function is called by:
  8042 ;;		Interrupt level 1
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           
  8047                           ;psect for function _tc_int
  8048  0D6B                     _tc_int:	
  8049                           
  8050                           ;functions.c: 829: if((RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2)){
  8051  0D6B  1A86               	btfsc	6,5	;volatile
  8052  0D6C  2D83               	goto	i1l3355
  8053  0D6D  085D               	movf	_intBlinkCycle,w
  8054  0D6E  045E               	iorwf	_intBlinkCycle+1,w
  8055  0D6F  1D03               	btfss	3,2
  8056  0D70  2D83               	goto	i1l3355
  8057  0D71  160A  118A  25FD  120A  158A  	fcall	i1_OperationMode
  8058  0D76  00F5               	movwf	??_tc_int
  8059  0D77  3002               	movlw	2
  8060  0D78  0275               	subwf	??_tc_int,w
  8061  0D79  1803               	skipnc
  8062  0D7A  2D83               	goto	i1l3355
  8063                           
  8064                           ;functions.c: 830: intBlinkCycle = 1;
  8065  0D7B  3001               	movlw	1
  8066  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  8067  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  8068  0D7E  00DD               	movwf	_intBlinkCycle
  8069  0D7F  3000               	movlw	0
  8070  0D80  00DE               	movwf	_intBlinkCycle+1
  8071                           
  8072                           ;functions.c: 831: intBlinkCounter = 0;
  8073  0D81  01FC               	clrf	_intBlinkCounter
  8074  0D82  01FD               	clrf	_intBlinkCounter+1
  8075  0D83                     i1l3355:	
  8076                           
  8077                           ;functions.c: 833: }
  8078                           ;functions.c: 836: if(TMR1IF ==1){
  8079  0D83  1283               	bcf	3,5	;RP0=0, select bank0
  8080  0D84  1303               	bcf	3,6	;RP1=0, select bank0
  8081  0D85  1C0C               	btfss	12,0	;volatile
  8082  0D86  2E20               	goto	L4
  8083                           
  8084                           ;functions.c: 837: TMR1ON = 0;
  8085  0D87  1010               	bcf	16,0	;volatile
  8086                           
  8087                           ;functions.c: 838: TMR1H = 0x0B;
  8088  0D88  300B               	movlw	11
  8089  0D89  008F               	movwf	15	;volatile
  8090                           
  8091                           ;functions.c: 839: TMR1L = 0xDB;
  8092  0D8A  30DB               	movlw	219
  8093  0D8B  008E               	movwf	14	;volatile
  8094                           
  8095                           ;functions.c: 841: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
  8096  0D8C  035D               	decf	_intBlinkCycle,w
  8097  0D8D  045E               	iorwf	_intBlinkCycle+1,w
  8098  0D8E  1D03               	btfss	3,2
  8099  0D8F  2DB2               	goto	i1l3373
  8100  0D90  086C               	movf	_intNumberOfBlinks+1,w
  8101  0D91  00F6               	movwf	??_tc_int+1
  8102  0D92  086B               	movf	_intNumberOfBlinks,w
  8103  0D93  00F5               	movwf	??_tc_int
  8104  0D94  1003               	clrc
  8105  0D95  0DF5               	rlf	??_tc_int,f
  8106  0D96  0DF6               	rlf	??_tc_int+1,f
  8107  0D97  087D               	movf	_intBlinkCounter+1,w
  8108  0D98  3A80               	xorlw	128
  8109  0D99  00F7               	movwf	??_tc_int+2
  8110  0D9A  0876               	movf	??_tc_int+1,w
  8111  0D9B  3A80               	xorlw	128
  8112  0D9C  0277               	subwf	??_tc_int+2,w
  8113  0D9D  1D03               	skipz
  8114  0D9E  2DA1               	goto	u240_25
  8115  0D9F  0875               	movf	??_tc_int,w
  8116  0DA0  027C               	subwf	_intBlinkCounter,w
  8117  0DA1                     u240_25:	
  8118  0DA1  1803               	skipnc
  8119  0DA2  2DB2               	goto	i1l3373
  8120                           
  8121                           ;functions.c: 842: intBlinkCounter++;
  8122  0DA3  3001               	movlw	1
  8123  0DA4  07FC               	addwf	_intBlinkCounter,f
  8124  0DA5  1803               	skipnc
  8125  0DA6  0AFD               	incf	_intBlinkCounter+1,f
  8126  0DA7  3000               	movlw	0
  8127  0DA8  07FD               	addwf	_intBlinkCounter+1,f
  8128                           
  8129                           ;functions.c: 844: if(RC1 == 0)
  8130  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  8131  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  8132  0DAB  1887               	btfsc	7,1	;volatile
  8133  0DAC  2DAF               	goto	i1l470
  8134                           
  8135                           ;functions.c: 845: RC1 = 1;
  8136  0DAD  1487               	bsf	7,1	;volatile
  8137  0DAE  2DD0               	goto	i1l3381
  8138  0DAF                     i1l470:	
  8139                           
  8140                           ;functions.c: 846: else if(RC1 == 1)
  8141  0DAF  1C87               	btfss	7,1	;volatile
  8142  0DB0  2DD0               	goto	i1l3381
  8143  0DB1  2DCF               	goto	i1l3379
  8144  0DB2                     i1l3373:	
  8145                           ;functions.c: 848: }
  8146                           
  8147                           ;functions.c: 847: RC1 = 0;
  8148                           
  8149                           
  8150                           ;functions.c: 850: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
  8151  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  8152  0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  8153  0DB4  035D               	decf	_intBlinkCycle,w
  8154  0DB5  045E               	iorwf	_intBlinkCycle+1,w
  8155  0DB6  1D03               	btfss	3,2
  8156  0DB7  2DD0               	goto	i1l3381
  8157  0DB8  086C               	movf	_intNumberOfBlinks+1,w
  8158  0DB9  00F6               	movwf	??_tc_int+1
  8159  0DBA  086B               	movf	_intNumberOfBlinks,w
  8160  0DBB  00F5               	movwf	??_tc_int
  8161  0DBC  1003               	clrc
  8162  0DBD  0DF5               	rlf	??_tc_int,f
  8163  0DBE  0DF6               	rlf	??_tc_int+1,f
  8164  0DBF  087D               	movf	_intBlinkCounter+1,w
  8165  0DC0  3A80               	xorlw	128
  8166  0DC1  00F7               	movwf	??_tc_int+2
  8167  0DC2  0876               	movf	??_tc_int+1,w
  8168  0DC3  3A80               	xorlw	128
  8169  0DC4  0277               	subwf	??_tc_int+2,w
  8170  0DC5  1D03               	skipz
  8171  0DC6  2DC9               	goto	u244_25
  8172  0DC7  0875               	movf	??_tc_int,w
  8173  0DC8  027C               	subwf	_intBlinkCounter,w
  8174  0DC9                     u244_25:	
  8175  0DC9  1C03               	skipc
  8176  0DCA  2DD0               	goto	i1l3381
  8177                           
  8178                           ;functions.c: 851: intBlinkCycle = 0;
  8179  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  8180  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  8181  0DCD  01DD               	clrf	_intBlinkCycle
  8182  0DCE  01DE               	clrf	_intBlinkCycle+1
  8183  0DCF                     i1l3379:	
  8184                           
  8185                           ;functions.c: 852: RC1 = 0;
  8186  0DCF  1087               	bcf	7,1	;volatile
  8187  0DD0                     i1l3381:	
  8188                           
  8189                           ;functions.c: 853: }
  8190                           ;functions.c: 856: intHalfSecondCounter++;
  8191  0DD0  3001               	movlw	1
  8192  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  8193  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  8194  0DD3  07E1               	addwf	_intHalfSecondCounter,f
  8195  0DD4  1803               	skipnc
  8196  0DD5  0AE2               	incf	_intHalfSecondCounter+1,f
  8197  0DD6  3000               	movlw	0
  8198  0DD7  07E2               	addwf	_intHalfSecondCounter+1,f
  8199                           
  8200                           ;functions.c: 857: if(intHalfSecondCounter>=2)
  8201  0DD8  0862               	movf	_intHalfSecondCounter+1,w
  8202  0DD9  3A80               	xorlw	128
  8203  0DDA  00FF               	movwf	127
  8204  0DDB  3080               	movlw	128
  8205  0DDC  027F               	subwf	127,w
  8206  0DDD  1D03               	skipz
  8207  0DDE  2DE1               	goto	u245_25
  8208  0DDF  3002               	movlw	2
  8209  0DE0  0261               	subwf	_intHalfSecondCounter,w
  8210  0DE1                     u245_25:	
  8211  0DE1  1C03               	skipc
  8212  0DE2  2DF2               	goto	i1l3391
  8213                           
  8214                           ;functions.c: 858: {
  8215                           ;functions.c: 859: intHalfSecondCounter = 0;
  8216  0DE3  1283               	bcf	3,5	;RP0=0, select bank0
  8217  0DE4  1303               	bcf	3,6	;RP1=0, select bank0
  8218  0DE5  01E1               	clrf	_intHalfSecondCounter
  8219  0DE6  01E2               	clrf	_intHalfSecondCounter+1
  8220                           
  8221                           ;functions.c: 860: intSecondCounter++;
  8222  0DE7  3001               	movlw	1
  8223  0DE8  07E5               	addwf	_intSecondCounter,f
  8224  0DE9  1803               	skipnc
  8225  0DEA  0AE6               	incf	_intSecondCounter+1,f
  8226  0DEB  3000               	movlw	0
  8227  0DEC  07E6               	addwf	_intSecondCounter+1,f
  8228                           
  8229                           ;functions.c: 861: TimerCounter();
  8230  0DED  120A  158A  212F  120A  158A  	fcall	_TimerCounter
  8231  0DF2                     i1l3391:	
  8232                           
  8233                           ;functions.c: 863: }
  8234                           ;functions.c: 864: if(intSecondCounter >=60)
  8235  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  8236  0DF3  1303               	bcf	3,6	;RP1=0, select bank0
  8237  0DF4  0866               	movf	_intSecondCounter+1,w
  8238  0DF5  3A80               	xorlw	128
  8239  0DF6  00FF               	movwf	127
  8240  0DF7  3080               	movlw	128
  8241  0DF8  027F               	subwf	127,w
  8242  0DF9  1D03               	skipz
  8243  0DFA  2DFD               	goto	u246_25
  8244  0DFB  303C               	movlw	60
  8245  0DFC  0265               	subwf	_intSecondCounter,w
  8246  0DFD                     u246_25:	
  8247  0DFD  1C03               	skipc
  8248  0DFE  2E0B               	goto	i1l3399
  8249                           
  8250                           ;functions.c: 865: {
  8251                           ;functions.c: 866: intSecondCounter = 0;
  8252  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
  8253  0E00  1303               	bcf	3,6	;RP1=0, select bank0
  8254  0E01  01E5               	clrf	_intSecondCounter
  8255  0E02  01E6               	clrf	_intSecondCounter+1
  8256                           
  8257                           ;functions.c: 867: intMinuteCounter++;
  8258  0E03  3001               	movlw	1
  8259  0E04  07E3               	addwf	_intMinuteCounter,f
  8260  0E05  1803               	skipnc
  8261  0E06  0AE4               	incf	_intMinuteCounter+1,f
  8262  0E07  3000               	movlw	0
  8263  0E08  07E4               	addwf	_intMinuteCounter+1,f
  8264                           
  8265                           ;functions.c: 868: bSaveDataToFlash = TRUE;
  8266  0E09  01E9               	clrf	_bSaveDataToFlash
  8267  0E0A  0AE9               	incf	_bSaveDataToFlash,f
  8268  0E0B                     i1l3399:	
  8269                           
  8270                           ;functions.c: 870: }
  8271                           ;functions.c: 871: if(intMinuteCounter >= 60)
  8272  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  8273  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  8274  0E0D  0864               	movf	_intMinuteCounter+1,w
  8275  0E0E  3A80               	xorlw	128
  8276  0E0F  00FF               	movwf	127
  8277  0E10  3080               	movlw	128
  8278  0E11  027F               	subwf	127,w
  8279  0E12  1D03               	skipz
  8280  0E13  2E16               	goto	u247_25
  8281  0E14  303C               	movlw	60
  8282  0E15  0263               	subwf	_intMinuteCounter,w
  8283  0E16                     u247_25:	
  8284  0E16  1C03               	skipc
  8285  0E17  2E1C               	goto	i1l3403
  8286                           
  8287                           ;functions.c: 872: {
  8288                           ;functions.c: 873: intMinuteCounter = 0;
  8289  0E18  1283               	bcf	3,5	;RP0=0, select bank0
  8290  0E19  1303               	bcf	3,6	;RP1=0, select bank0
  8291  0E1A  01E3               	clrf	_intMinuteCounter
  8292  0E1B  01E4               	clrf	_intMinuteCounter+1
  8293  0E1C                     i1l3403:	
  8294                           
  8295                           ;functions.c: 874: }
  8296                           ;functions.c: 877: TMR1ON = 1;
  8297  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  8298  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  8299  0E1E  1410               	bsf	16,0	;volatile
  8300                           
  8301                           ;functions.c: 878: }
  8302                           ;functions.c: 879: TMR1IF = 0;
  8303  0E1F  100C               	bcf	12,0	;volatile
  8304  0E20                     L4:	
  8305                           
  8306                           ;functions.c: 880: RBIF = 0;
  8307  0E20  100B               	bcf	11,0	;volatile
  8308                           
  8309                           ;functions.c: 881: GIE = 1;
  8310  0E21  178B               	bsf	11,7	;volatile
  8311                           
  8312                           ;functions.c: 882: return;
  8313  0E22  087B               	movf	??_tc_int+6,w
  8314  0E23  00FF               	movwf	127
  8315  0E24  087A               	movf	??_tc_int+5,w
  8316  0E25  008A               	movwf	10
  8317  0E26  0879               	movf	??_tc_int+4,w
  8318  0E27  0084               	movwf	4
  8319  0E28  0E78               	swapf	(??_tc_int+3)^(0+-128),w
  8320  0E29  0083               	movwf	3
  8321  0E2A  0EFE               	swapf	126,f
  8322  0E2B  0E7E               	swapf	126,w
  8323  0E2C  0009               	retfie
  8324  0E2D                     __end_of_tc_int:	
  8325                           
  8326                           	psect	intentry
  8327  0004                     __pintentry:	
  8328                           ;incstack = 0
  8329 ;; hardware stack exceeded
  8330                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8331                           
  8332  0004                     interrupt_function:	
  8333  007E                     saved_w	set	btemp
  8334  0004  00FE               	movwf	btemp
  8335  0005  0E03               	swapf	3,w
  8336  0006  00F8               	movwf	??_tc_int+3
  8337  0007  0804               	movf	4,w
  8338  0008  00F9               	movwf	??_tc_int+4
  8339  0009  080A               	movf	10,w
  8340  000A  00FA               	movwf	??_tc_int+5
  8341  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8342  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8343  000D  087F               	movf	btemp+1,w
  8344  000E  00FB               	movwf	??_tc_int+6
  8345  000F  120A  158A  2D6B   	ljmp	_tc_int
  8346                           
  8347                           	psect	text46
  8348  15FD                     __ptext46:	
  8349 ;; *************** function i1_OperationMode *****************
  8350 ;; Defined at:
  8351 ;;		line 964 in file "functions.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;		None
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  OperationMod    1    1[COMMON] unsigned char 
  8356 ;; Return value:  Size  Location     Type
  8357 ;;                  1    wreg      unsigned char 
  8358 ;; Registers used:
  8359 ;;		wreg, status,2
  8360 ;; Tracked objects:
  8361 ;;		On entry : 0/0
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8365 ;;      Params:         0       0       0       0       0
  8366 ;;      Locals:         1       0       0       0       0
  8367 ;;      Temps:          1       0       0       0       0
  8368 ;;      Totals:         2       0       0       0       0
  8369 ;;Total ram usage:        2 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; This function calls:
  8372 ;;		Nothing
  8373 ;; This function is called by:
  8374 ;;		_tc_int
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           
  8379                           ;psect for function i1_OperationMode
  8380  15FD                     i1_OperationMode:	
  8381                           
  8382                           ;functions.c: 966: unsigned char bracketStatus;
  8383                           ;functions.c: 967: bracketStatus = ((~PORTB) & 0b00000111) ;
  8384                           
  8385                           ;incstack = 0
  8386 ;; hardware stack exceeded
  8387                           ; Regs used in i1_OperationMode: [wreg+status,2]
  8388  15FD  1283               	bcf	3,5	;RP0=0, select bank0
  8389  15FE  1303               	bcf	3,6	;RP1=0, select bank0
  8390  15FF  0906               	comf	6,w	;volatile
  8391  1600  3907               	andlw	7
  8392  1601  00F0               	movwf	??i1_OperationMode
  8393  1602  0870               	movf	??i1_OperationMode,w
  8394  1603  00F1               	movwf	i1OperationMode@bracketStatus
  8395                           
  8396                           ;functions.c: 969: return bracketStatus;
  8397  1604  0871               	movf	i1OperationMode@bracketStatus,w
  8398  1605  0008               	return
  8399  1606                     __end_ofi1_OperationMode:	
  8400                           
  8401                           	psect	text47
  8402  092F                     __ptext47:	
  8403 ;; *************** function _TimerCounter *****************
  8404 ;; Defined at:
  8405 ;;		line 415 in file "functions.c"
  8406 ;; Parameters:    Size  Location     Type
  8407 ;;		None
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;  i               2    3[COMMON] int 
  8410 ;; Return value:  Size  Location     Type
  8411 ;;                  1    wreg      void 
  8412 ;; Registers used:
  8413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  8414 ;; Tracked objects:
  8415 ;;		On entry : 0/0
  8416 ;;		On exit  : 0/0
  8417 ;;		Unchanged: 0/0
  8418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8419 ;;      Params:         0       0       0       0       0
  8420 ;;      Locals:         2       0       0       0       0
  8421 ;;      Temps:          3       0       0       0       0
  8422 ;;      Totals:         5       0       0       0       0
  8423 ;;Total ram usage:        5 bytes
  8424 ;; Hardware stack levels used:    1
  8425 ;; This function calls:
  8426 ;;		Nothing
  8427 ;; This function is called by:
  8428 ;;		_tc_int
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           
  8433                           ;psect for function _TimerCounter
  8434  092F                     _TimerCounter:	
  8435                           
  8436                           ;functions.c: 417: for (int i = 0; i < 5; i++)
  8437                           
  8438                           ;incstack = 0
  8439 ;; hardware stack exceeded
  8440                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  8441  092F  01F3               	clrf	TimerCounter@i
  8442  0930  01F4               	clrf	TimerCounter@i+1
  8443  0931                     L5:	
  8444  0931  0874               	movf	TimerCounter@i+1,w
  8445  0932  3A80               	xorlw	128
  8446  0933  00FF               	movwf	127
  8447  0934  3080               	movlw	128
  8448  0935  027F               	subwf	127,w
  8449  0936  1D03               	skipz
  8450  0937  293A               	goto	u221_25
  8451  0938  3005               	movlw	5
  8452  0939  0273               	subwf	TimerCounter@i,w
  8453  093A                     u221_25:	
  8454  093A  1803               	btfsc	3,0
  8455  093B  0008               	return
  8456                           
  8457                           ;functions.c: 418: {
  8458                           ;functions.c: 419: if(intClockTimer[i]>0)
  8459  093C  0873               	movf	TimerCounter@i,w
  8460  093D  00F0               	movwf	??_TimerCounter
  8461  093E  0770               	addwf	??_TimerCounter,w
  8462  093F  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  8463  0940  0084               	movwf	4
  8464  0941  1383               	bcf	3,7	;select IRP bank1
  8465  0942  0800               	movf	0,w
  8466  0943  00F1               	movwf	??_TimerCounter+1
  8467  0944  0A84               	incf	4,f
  8468  0945  0800               	movf	0,w
  8469  0946  00F2               	movwf	??_TimerCounter+2
  8470  0947  0872               	movf	??_TimerCounter+2,w
  8471  0948  3A80               	xorlw	128
  8472  0949  00FF               	movwf	127
  8473  094A  3080               	movlw	128
  8474  094B  027F               	subwf	127,w
  8475  094C  1D03               	skipz
  8476  094D  2950               	goto	u222_25
  8477  094E  3001               	movlw	1
  8478  094F  0271               	subwf	??_TimerCounter+1,w
  8479  0950                     u222_25:	
  8480  0950  1C03               	skipc
  8481  0951  2964               	goto	i1l3261
  8482                           
  8483                           ;functions.c: 420: intClockTimer[i]--;
  8484  0952  0873               	movf	TimerCounter@i,w
  8485  0953  00F0               	movwf	??_TimerCounter
  8486  0954  0770               	addwf	??_TimerCounter,w
  8487  0955  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  8488  0956  0084               	movwf	4
  8489  0957  30FF               	movlw	255
  8490  0958  1383               	bcf	3,7	;select IRP bank1
  8491  0959  0780               	addwf	0,f
  8492  095A  0F84               	incfsz	4,f
  8493  095B  0800               	movf	0,w
  8494  095C  1803               	skipnc
  8495  095D  0A00               	incf	0,w
  8496  095E  00FF               	movwf	127
  8497  095F  30FF               	movlw	255
  8498  0960  077F               	addwf	127,w
  8499  0961  0080               	movwf	0
  8500  0962  0384               	decf	4,f
  8501  0963  296A               	goto	i1l3263
  8502  0964                     i1l3261:	
  8503                           
  8504                           ;functions.c: 421: else
  8505                           ;functions.c: 422: bTimerComplete[i] = 1;
  8506  0964  0873               	movf	TimerCounter@i,w
  8507  0965  3E56               	addlw	(low (_bTimerComplete| 0))& (0+255)
  8508  0966  0084               	movwf	4
  8509  0967  1383               	bcf	3,7	;select IRP bank0
  8510  0968  0180               	clrf	0
  8511  0969  0A80               	incf	0,f
  8512  096A                     i1l3263:	
  8513  096A  3001               	movlw	1
  8514  096B  07F3               	addwf	TimerCounter@i,f
  8515  096C  1803               	skipnc
  8516  096D  0AF4               	incf	TimerCounter@i+1,f
  8517  096E  3000               	movlw	0
  8518  096F  07F4               	addwf	TimerCounter@i+1,f
  8519  0970  2931               	goto	L5
  8520  0971                     __end_of_TimerCounter:	
  8521  007E                     btemp	set	126	;btemp
  8522  007E                     wtemp	set	126
  8523  007E                     wtemp0	set	126
  8524  0080                     wtemp1	set	128
  8525  0082                     wtemp2	set	130
  8526  0084                     wtemp3	set	132
  8527  0086                     wtemp4	set	134
  8528  0088                     wtemp5	set	136
  8529  007F                     wtemp6	set	127
  8530  007E                     ttemp	set	126
  8531  007E                     ttemp0	set	126
  8532  0081                     ttemp1	set	129
  8533  0084                     ttemp2	set	132
  8534  0087                     ttemp3	set	135
  8535  007F                     ttemp4	set	127
  8536  007E                     ltemp	set	126
  8537  007E                     ltemp0	set	126
  8538  0082                     ltemp1	set	130
  8539  0086                     ltemp2	set	134
  8540  0080                     ltemp3	set	128


Data Sizes:
    Strings     16
    Constant    39
    Data        3
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     54      78
    BANK1            80     34      44
    BANK3            96      0      40
    BANK2            96      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strchr@ptr	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    strstr@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strstr@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    ReadClock@year	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@year(BANK0[1]), 

    ReadClock@month	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@month(BANK0[1]), 

    ReadClock@date	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@date(BANK0[1]), 

    ReadClock@hour	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@hours(BANK0[1]), 

    ReadClock@minutes	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@minutes(BANK0[1]), 

    ReadClock@seconds	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@seconds(BANK0[1]), 

    read_write_flash_ram@mem_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@value(BANK0[1]), saveDataToFlash@value(BANK0[1]), 

    ReadMemoryAdress@var1	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr1(BANK0[1]), saveDataToFlash@addr1(BANK0[1]), 

    ReadMemoryAdress@var2	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr2(BANK0[1]), saveDataToFlash@addr2(BANK0[1]), 

    ReadMemoryAdress@var3	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr3(BANK0[1]), saveDataToFlash@addr3(BANK0[1]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    ReceivedPacketHandler@Data	PTR unsigned char  size(1) Largest target is 30
		 -> TransiverReadFIFO@ReceivedString(BANK1[30]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_TimerCounter

Critical Paths under _main in BANK0

    _main->_TransiverReadFIFO
    _saveDataToFlash->_ReadClock
    _ReadClock->___bmul
    _IncreaseMemoryAdress->_eeprom_write
    _TransiverToReceive->_FindChannel
    _TransiverReadFIFO->_ReceivedPacketHandler
    _ReceivedPacketHandler->_SendMemoryData
    _write_ram_status->_read_ram_status
    _strstr->_strncmp
    _strncmp->_strlen
    _ram_bulk_erase->_read_ram_status
    _SendMemoryData->_TransmittPacket
    _read_write_flash_ram->_read_ram_status
    _read_ram_status->_WriteSPI
    _ReadMemoryAdress->_eeprom_read
    _ResetMemoryAdress->_eeprom_write
    _TransiverInit->_FindChannel
    _Blink->_DelayDs
    _Mode_5->_TransmittPacket
    _Mode_4->_TransmittPacket
    _TransmittPacket->_FindChannel
    _WriteFIFO->_WriteSPI
    _FindChannel->_SetRFMode
    _SetRFMode->_RegisterSet
    _RegisterSet->_RegisterRead
    _RegisterRead->_WriteSPI
    _Mode_1->_DarknessCheck
    _LightWithSensController->_DarknessCheck
    _DarknessCheck->_AnalogValue
    _AnalogValue->_DelayDs
    _ClockInit->_WriteSPI
    _ReadSPI->_WriteSPI

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_TransiverReadFIFO

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   99365
                                             51 BANK0      3     3      0
                          _ClockInit
                             _Mode_0
                             _Mode_1
                             _Mode_2
                             _Mode_4
                             _Mode_5
                      _OperationMode
                            _PICInit
                  _ResetMemoryAdress
                      _TransiverInit
                  _TransiverReadFIFO
                 _TransiverToReceive
                     _ram_bulk_erase
                    _read_ram_status
                    _saveDataToFlash
                   _write_ram_status
 ---------------------------------------------------------------------------------
 (1) _saveDataToFlash                                     15    15      0   11304
                                             24 BANK0     15    15      0
                        _AnalogValue
               _IncreaseMemoryAdress
                          _ReadClock
                   _ReadMemoryAdress
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (2) _ReadClock                                           20    15      5    1551
                                              4 BANK0     20    15      5
                            _ReadSPI
                           _WriteSPI
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     476
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _IncreaseMemoryAdress                                 4     4      0     653
                                              3 BANK0      4     4      0
                        _eeprom_read
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (1) _TransiverToReceive                                   2     2      0    9949
                                             21 BANK0      2     2      0
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (1) _TransiverReadFIFO                                   36    36      0   37341
                                             49 BANK0      2     2      0
                                              0 BANK1     34    34      0
                           _ReadFIFO
              _ReceivedPacketHandler
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _ReceivedPacketHandler                                2     2      0   34084
                                             47 BANK0      2     2      0
                        _AnalogValue
                      _DarknessCheck
                            _DelayDs
                      _OperationMode
                  _ResetMemoryAdress
                     _SendMemoryData
                    _TransmittPacket
                        _eeprom_read
                       _eeprom_write
                     _ram_bulk_erase
                    _read_ram_status
                             _strstr
                   _write_ram_status
 ---------------------------------------------------------------------------------
 (1) _write_ram_status                                     1     1      0     114
                                              5 BANK0      1     1      0
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _strstr                                               5     4      1     959
                                             14 BANK0      5     4      1
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              6     3      3     292
                                              8 BANK0      6     3      3
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               8     6      2     120
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               3     1      2     182
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ram_bulk_erase                                       0     0      0      92
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _SendMemoryData                                      20    20      0   17652
                                             27 BANK0     20    20      0
                   _ReadMemoryAdress
                    _TransmittPacket
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (2) _read_write_flash_ram                                11     5      6    4519
                                              5 BANK0     11     5      6
                            _ReadSPI
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (2) _read_ram_status                                      2     2      0      69
                                              3 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _ReadMemoryAdress                                     4     2      2    1826
                                              2 BANK0      4     2      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _ResetMemoryAdress                                    0     0      0     492
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     492
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadFIFO                                             2     2      0      46
                                              3 BANK0      2     2      0
                            _ReadSPI
 ---------------------------------------------------------------------------------
 (1) _TransiverInit                                        1     1      0   10295
                                             21 BANK0      1     1      0
                              _Blink
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _Blink                                                5     3      2    1052
                                              6 BANK0      5     3      2
                            _DelayDs
 ---------------------------------------------------------------------------------
 (1) _PICInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mode_5                                               1     1      0   12587
                                             27 BANK0      1     1      0
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (1) _Mode_4                                               0     0      0   12587
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (3) _TransmittPacket                                      6     5      1   10871
                                             21 BANK0      6     5      1
                        _AnalogValue (ARG)
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                          _WriteFIFO
                        _eeprom_read (ARG)
                      _timerFunction
 ---------------------------------------------------------------------------------
 (4) _WriteFIFO                                            1     1      0      45
                                              3 BANK0      1     1      0
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _FindChannel                                          7     7      0    4734
                                             14 BANK0      7     7      0
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _SetRFMode                                            3     3      0    2321
                                             11 BANK0      3     3      0
                       _RegisterRead
                        _RegisterSet
 ---------------------------------------------------------------------------------
 (3) _RegisterSet                                          4     3      1    2074
                                              7 BANK0      4     3      1
                       _RegisterRead (ARG)
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _RegisterRead                                         4     4      0     114
                                              3 BANK0      4     4      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (1) _Mode_2                                               0     0      0    1716
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (1) _Mode_1                                               0     0      0    1010
                      _DarknessCheck
 ---------------------------------------------------------------------------------
 (1) _Mode_0                                               0     0      0    1716
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (2) _LightWithSensController                              0     0      0    1716
                      _DarknessCheck
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _timerFunction                                        5     1      4     706
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _DarknessCheck                                        2     2      0    1010
                                              8 BANK0      2     2      0
                        _AnalogValue
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _AnalogValue                                          2     2      0     964
                                              6 BANK0      2     2      0
                            _DelayDs
 ---------------------------------------------------------------------------------
 (3) _DelayDs                                              6     4      2     942
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            2     2      0      70
                                              3 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _ReadSPI                                              0     0      0      23
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _WriteSPI                                             3     3      0      23
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _tc_int                                              7     7      0     135
                                              5 COMMON     7     7      0
                       _TimerCounter
                    i1_OperationMode
 ---------------------------------------------------------------------------------
 (11) i1_OperationMode                                     2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _TimerCounter                                        5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClockInit
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _Mode_0
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_1
     _DarknessCheck
       _AnalogValue
         _DelayDs
       _eeprom_read
   _Mode_2
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_4
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _Mode_5
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _OperationMode
   _PICInit
   _ResetMemoryAdress
     _eeprom_write
   _TransiverInit
     _Blink
       _DelayDs
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
   _TransiverReadFIFO
     _ReadFIFO
       _ReadSPI
         _WriteSPI
     _ReceivedPacketHandler
       _AnalogValue
         _DelayDs
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _DelayDs
       _OperationMode
       _ResetMemoryAdress
         _eeprom_write
       _SendMemoryData
         _ReadMemoryAdress
           _eeprom_read
         _TransmittPacket
           _AnalogValue (ARG)
             _DelayDs
           _FindChannel (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
             _SetRFMode
               _RegisterRead
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _RegisterSet
                 _RegisterRead (ARG)
                   _ReadSPI
                     _WriteSPI
                   _WriteSPI
                 _WriteSPI (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet (ARG)
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
           _WriteFIFO (ARG)
             _WriteSPI
           _eeprom_read (ARG)
           _timerFunction (ARG)
         _read_write_flash_ram
           _ReadSPI
             _WriteSPI
           _WriteSPI
           _read_ram_status
             _ReadSPI
               _WriteSPI
             _WriteSPI
       _TransmittPacket
         _AnalogValue (ARG)
           _DelayDs
         _FindChannel (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
         _WriteFIFO (ARG)
           _WriteSPI
         _eeprom_read (ARG)
         _timerFunction (ARG)
       _eeprom_read
       _eeprom_write
       _ram_bulk_erase
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
       _write_ram_status
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _TransiverToReceive
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _ram_bulk_erase
     _WriteSPI
     _read_ram_status
       _ReadSPI
         _WriteSPI
       _WriteSPI
   _read_ram_status
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _saveDataToFlash
     _AnalogValue
       _DelayDs
     _IncreaseMemoryAdress
       _eeprom_read
       _eeprom_write
     _ReadClock
       _ReadSPI
         _WriteSPI
       _WriteSPI
       ___bmul
     _ReadMemoryAdress
       _eeprom_read
     _read_write_flash_ram
       _ReadSPI
         _WriteSPI
       _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI
   _write_ram_status
     _WriteSPI
     _read_ram_status
       _ReadSPI
         _WriteSPI
       _WriteSPI

 _tc_int (ROOT)
   _TimerCounter
   i1_OperationMode

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      28       9       41.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      2C       7       55.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     36      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B0      12        0.0%
ABS                  0      0      B0       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Mar 16 18:43:30 2017

                             __CFG_CP$ON 0000                 __size_of_read_ram_status 0014  
                                      pc 0002               __size_of_TransiverReadFIFO 006C  
                  _bTransiverModeReceive 006A                           ___bmul@product 0022  
                            _SSPSTATbits 0094                                       l83 0EAD  
                                     _RD 0C60                              __CFG_CPD$ON 0000  
                                     _WR 0C61                          _saveDataToFlash 0045  
                                     fsr 0004                                      l310 046C  
                                    l402 0A95                                      l314 02E1  
                                    l411 1736                                      l316 02F6  
                                    l405 0A9B            __size_of_read_write_flash_ram 007D  
                                    l317 030B                                      l352 0D4C  
                                    l417 1632                                      l441 0BA9  
                                    l363 16BE                                      l703 0890  
                                    l368 1626                                      l481 17A0  
                                    l387 092D                                      l664 0CB7  
                                    l681 0843                                      l596 0C16  
                                    _GIE 005F                                      _RA1 0029  
                                    _RB0 0030                                      _RB1 0031  
                                    _RC0 0038                                      _RA4 002C  
                                    _RC1 0039                                      _RB3 0033  
                                    _RA5 002D                                      _RC2 003A  
                                    _RB4 0034                                      _RB5 0035  
                                    _RD3 0043                                      _RD4 0044  
                  __end_of_DarknessCheck 177D                                      fsr0 0004  
                                    indf 0000                         TransmittPacket@i 0038  
                    __end_of_FindChannel 07AC                          ??_timerFunction 0024  
                           __CFG_LVP$OFF 0000                                     l1165 1694  
                                   l1177 0974                                     l3115 1666  
                                   l3131 0A5C                                     l3109 1642  
                                   l3039 0FFB                                     l2425 0787  
                                   l2433 07AA                                     l2409 06D9  
                                   l3129 0A49                                     l3321 0ED8  
                                   l3313 0EBE                                     l3083 0C97  
                                   l2371 0B4E                                     l2427 0767  
                                   l3163 0B2A                                     l3155 0B09  
                                   l3093 16B3                                     l2373 0B5B  
                                   l2429 0797                                     l2509 0D55  
                                   l2701 166E                                     l3333 0EFC  
                                   l3325 0EE5                                     l3317 0ECB  
                                   l3309 0EB1                                     l2375 0B6A  
                                   l2383 0B96                                     l2543 0BB6  
                                   l3159 0B23                                     l2377 0B79  
                                   l2561 0BE5                                     l2633 1729  
                                   l2801 03CA                                     l2705 1674  
                                   l3329 0EF2                                     l2379 0B88  
                                   l2483 0CF8                                     l2571 17DB  
                                   l2651 07CE                                     l2619 0884  
                                   l3339 0F08                                     l2485 0D0B  
                                   l2565 0C18                                     l2557 0C01  
                                   l2573 17EA                                     l2645 07B0  
                                   l2653 07E7                                     l2813 03F1  
                                   l2733 02A8                                     l2559 0C0D  
                                   l2583 0993                                     l2807 03DD  
                                   l2743 02D0                                     l3287 0E5A  
                                   l2665 1762                                     l2657 07F0  
                                   l2833 0439                                     l2817 03F9  
                                   l2809 03E5                                     l2761 0320  
                                   l2841 044A                                     l2737 02BF  
                                   l2587 09A9                                     l2827 0410  
                                   l2763 0332                                     l2669 177B  
                                   l2589 09B2                                     l2837 0442  
                                   l2829 041B                                     l2773 0351  
                                   l2695 063A                                     l2599 169D  
                                   l2783 0373                                     l2849 08FD  
                                   l2697 06AF                                     l2859 0912  
                                   l2795 03A5                                     l2877 08C3  
                                   l2789 038C                                     l2799 03BA  
            __size_of_TransiverToReceive 005D                                     l2899 0A08  
                                   STR_1 082D                                     STR_2 0835  
                                   u2005 053B                                     u1311 0841  
                                   u2015 0560                                     u1305 1740  
                                   u2025 0585                                     u1265 06D7  
                                   u1425 0BEB                                     u1285 0772  
                                   u1605 0657                                     u1295 07A8  
                                   u1615 066C                                     u2175 0AF9  
                                   u1625 0648                                     u2507 0E54  
                                   u2517 0E65                                     u2607 0D15  
                                   u1575 05CE                                     u2527 0E74  
                                   u2617 0D57                                     u1585 05F4  
                                   u2537 0E98                                     u2627 0D65  
                                   u1595 061A                                     u2547 0EA7  
                                   u2637 06C3                                     u2557 0A2C  
                                   u2647 0791                                     u1935 08CD  
                                   u2567 0A66                                     u2657 1748  
                                   u2577 0B2E                                     u2497 0E45  
                                   u2667 0C44                                     u2587 0C24  
                                   u2677 0C60                                     u2597 0CDB  
                                   u2687 0C7C                                     u1975 04CC  
                                   _RBIF 0058                                     u1985 04F1  
                                   u1995 0516                          __end_of_PICInit 0AD2  
                                   _WREN 0C62                           ??_eeprom_write 0021  
                                   _main 0E2D                                     btemp 007E  
                                   ltemp 007E                                     start 0012  
                                   ttemp 007E                                     wtemp 007E  
                          __CFG_IESO$OFF 0000                          __end_of_DelayDs 1756  
       __size_of_LightWithSensController 003F                        ___bmul@multiplier 0023  
                        __end_of_ReadSPI 15F5               SendMemoryData@finalAddress 004B  
                                  ?_main 0070                         ReadClock@month10 002F  
                                  _EEADR 010D                            __CFG_WDTE$OFF 0000  
                       ReadClock@minutes 0024                         ReadClock@seconds 0031  
                                  _CARRY 0018                                    _ANSEL 0188  
                  __end_of_OperationMode 160F                                    _T1CON 0010  
                         __CFG_DEBUG$OFF 0000                                    i1l470 0DAF  
                                  _TMR1H 000F                                    _TMR1L 000E  
                                  _PORTA 0005                                    _PORTB 0006  
                                  _PORTC 0007                                    _PORTD 0008  
                                  _PORTE 0009                                    _TRISA 0085  
                                  _TRISB 0086                                    _TRISC 0087  
                                  _TRISD 0088                                    _SSPIE 0463  
                                  _TRISE 0089                    read_write_flash_ram@i 002E  
                                  _Blink 08BD                                    _bDark 0068  
                         __CFG_FCMEN$OFF 0000                  ??_ReceivedPacketHandler 004F  
                            _AnalogValue 177D                           __CFG_BOREN$OFF 0000  
                                  pclath 000A                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080                          ??_TransiverInit 0035  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                                    status 0003  
                          _intBlinkCycle 005D                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                         WriteSPI@buffer 0021                     ReadMemoryAdress@var1 0023  
                   ReadMemoryAdress@var2 0022                     ReadMemoryAdress@var3 0025  
                       __end_of_ChannelP 0813                         __end_of_ChannelR 0820  
                       __end_of_ChannelS 082D                          __end_of_strncmp 09B5  
                __end_of_saveDataToFlash 0290                           __CFG_MCLRE$OFF 0000  
                          _intClockTimer 00C2                        _intNumberOfBlinks 006B  
                        __initialization 0015                             __end_of_main 0F16  
                       __end_of_ReadFIFO 0800                            ReadFIFO@value 0024  
                       ??_SendMemoryData 003B                              _FindChannel 06B6  
                          ??_RegisterSet 0028                                   ??_main 0053  
                      ??_read_ram_status 0023                       __size_of_ClockInit 0091  
                                 ?_Blink 0026                                ??_PICInit 0020  
                                 _ADRESH 001E                                   _EEDATA 010C  
                                 _EECON1 018C                                   _EECON2 018D  
                                 _ANSELH 0189                         __end_of_WriteSPI 1636  
                                 i1l3403 0E1C                                   i1l3261 0964  
                                 i1l3263 096A                                   i1l3355 0D83  
                                 i1l3381 0DD0                                   i1l3373 0DB2  
                                 i1l3391 0DF2                                   i1l3379 0DCF  
                                 i1l3399 0E0B                                   u221_25 093A  
                                 u222_25 0950                                   u240_25 0DA1  
                                 u244_25 0DC9                                ??_DelayDs 0022  
                                 u245_25 0DE1                                   u246_25 0DFD  
                                 u247_25 0E16                                   Blink@i 0029  
                                 Blink@n 0026                         _write_ram_status 0861  
                       ??_ram_bulk_erase 0025                                   _TMR1IF 0060  
                                 _TMR1ON 0080             i1OperationMode@bracketStatus 0071  
          __size_of_IncreaseMemoryAdress 005C                       __size_of_ReadClock 0139  
                                 _SSPBUF 0013                                ??_ReadSPI 0023  
                         __CFG_PWRTE$OFF 0000                                   _Mode_0 15E9  
                                 _Mode_1 16A6                                   _Mode_2 161B  
                                 _Mode_4 1636                                   _Mode_5 1658  
                     __size_of_SetRFMode 006F                     __size_of_eeprom_read 0024  
        TransiverReadFIFO@ReceivedString 00A0                                   ___bmul 166A  
                                 _tc_int 0D6B                     __end_of_eeprom_write 08BD  
                                 _strchr 1691                                   _strlen 17D4  
                                 _strstr 07AC                                   saved_w 007E  
                      _ResetMemoryAdress 16DA                      __end_of_RegisterSet 16DA  
                          ?_RegisterRead 0070                       ?_ResetMemoryAdress 0070  
                     RegisterRead@adress 0026                                ??_strncmp 002B  
                     __size_of_WriteFIFO 000C                  __end_of__initialization 0041  
                        eeprom_read@addr 0021                      ??_ResetMemoryAdress 0023  
                      __end_of_ClockInit 0CBB                  _LightWithSensController 08F0  
                          _bChannelFound 0067                      ___bmul@multiplicand 0020  
                       ?_saveDataToFlash 0070                            __end_of_Blink 08F0  
                         __pcstackCOMMON 0070                        ?_ReadMemoryAdress 0022  
                           __pidataBANK0 15E6                             _channelFound 005B  
                     ??_ReadMemoryAdress 0024                        __end_of_ReadClock 05A6  
              __end_of_ResetMemoryAdress 16F4                           _OPTION_REGbits 0081  
                                ??_Blink 0028                        __end_of_SetRFMode 0BAD  
                      eeprom_write@value 0020                           ??_RegisterRead 0023  
                             __pbssBANK0 0056                               __pbssBANK1 00C2  
                             __pbssBANK3 0190                 __size_ofi1_OperationMode 0009  
                              ?_ReadFIFO 0070               timerFunction@intSetSeconds 0022  
                     AnalogValue@channel 0027             __end_of_read_write_flash_ram 0C2A  
               __size_of_TransmittPacket 00B0                                  ?_Mode_0 0070  
                                ?_Mode_1 0070                                  ?_Mode_2 0070  
                                ?_Mode_4 0070                                  ?_Mode_5 0070  
                             __pmaintext 0E2D                                  ?___bmul 0020  
                             __pintentry 0004                                  ?_tc_int 0070  
                              ?_WriteSPI 0070                        __end_of_WriteFIFO 161B  
                                ?_strchr 0020                                  ?_strlen 0020  
                            _RegisterSet 16C0                                  ?_strstr 002E  
                                _PICInit 0A6E                            ?_TimerCounter 0070  
             __end_of_TransiverToReceive 0A6E                    __end_of_timerFunction 1658  
                           ?_AnalogValue 0070                               __stringtab 0800  
                             ??_ReadFIFO 0023                      SendMemoryData@addr1 0046  
                    SendMemoryData@addr2 0045                      SendMemoryData@addr3 0044  
         __size_of_ReceivedPacketHandler 01DD            __end_of_ReceivedPacketHandler 046D  
                                _DelayDs 1732                ??_LightWithSensController 002A  
                          ReadClock@date 0026                            ReadClock@min1 0033  
                          ReadClock@sec1 0032                            ReadClock@hour 0025  
                    SendMemoryData@value 0043                            ReadClock@year 0028  
                                _ReadSPI 15ED                   __size_of_DarknessCheck 0027  
                        __size_of_Mode_0 0004                          __size_of_Mode_1 001A  
                        __size_of_Mode_2 000D                          __size_of_Mode_4 0010  
                        __size_of_Mode_5 0012               OperationMode@bracketStatus 0021  
                        _read_ram_status 167D                    __size_of_eeprom_write 0030  
                        __size_of___bmul 0013                    read_ram_status@status 0024  
                           ?_FindChannel 0070                                _ANSELbits 0188  
               __end_of_write_ram_status 088D                               ??_WriteSPI 0020  
                        __size_of_tc_int 00C2                                  __ptext1 0045  
                                __ptext2 046D                                  __ptext3 166A  
                                __ptext4 09B5                                  __ptext5 0A11  
                                __ptext6 0AD2                                  __ptext7 0290  
                                __ptext8 0861                                  __ptext9 07AC  
                        __size_of_strchr 0015                          __size_of_strlen 002C  
             __size_of_ResetMemoryAdress 001A                                _T1CONbits 0010  
                        __size_of_strstr 0046                           ??_TimerCounter 0070  
                   saveDataToFlash@addr1 0044                     saveDataToFlash@addr2 0045  
                   saveDataToFlash@addr3 0046  read_write_flash_ram@one_read_zero_write 002D  
                   saveDataToFlash@hours 003F                     saveDataToFlash@month 0041  
                   saveDataToFlash@value 0043                                  clrloop0 15F6  
                                _strncmp 0971                     end_of_initialization 0041  
                           _eeprom_write 088D                    __end_of_TransiverInit 1000  
                   TransmittPacket@value 0035                     TransmittPacket@topic 003A  
                 __size_of_OperationMode 0009                        ??i1_OperationMode 0070  
                       WriteSPI@databyte 0022                     __end_of_RegisterRead 1710  
                      ??_TransmittPacket 0036                            WriteFIFO@Data 0023  
           __end_of_IncreaseMemoryAdress 0A11                                  strlen@s 0026  
                        _intBlinkCounter 007C                     _read_write_flash_ram 0BAD  
                          _DarknessCheck 1756                  __end_of_read_ram_status 1691  
                  SendMemoryData@address 0047                            ??_eeprom_read 0020  
                        ReadClock@date10 002E                           __end_of_Mode_0 15ED  
                         __end_of_Mode_1 16C0                           __end_of_Mode_2 1628  
                         __end_of_Mode_4 1646                           __end_of_Mode_5 166A  
                              _ClockInit 0C2A                          ReadClock@hour10 002D  
                         __end_of___bmul 167D                          ReadClock@month1 0035  
                        ReadClock@year10 0030                    ?_read_write_flash_ram 0025  
                         __end_of_tc_int 0E2D                           ?_DarknessCheck 0070  
                          _OperationMode 1606                           __end_of_strchr 16A6  
                         __end_of_strlen 1800                           __end_of_strstr 07F2  
                    start_initialization 0015                                _ReadClock 046D  
              __size_of_ReadMemoryAdress 002C                  __size_of_SendMemoryData 0110  
                  _intDarkCheckIntervall 005F               DarknessCheck@darknessValue 0029  
                              _SetRFMode 0B3E                     __size_of_AnalogValue 002B  
                      __size_of_ReadFIFO 000E                 __CFG_FOSC$INTRC_NOCLKOUT 0000  
                               ??_Mode_0 002A                                 ??_Mode_1 002A  
                               ??_Mode_2 002A                                 ??_Mode_4 003B  
                               ??_Mode_5 003B                     __end_of_TimerCounter 0971  
                               ??___bmul 0021                               ?_ClockInit 0070  
                    __end_of_eeprom_read 0861                            TimerCounter@i 0073  
                __size_of_ram_bulk_erase 0022                              __pdataBANK0 006B  
                               ??_tc_int 0075                 __size_of_saveDataToFlash 024B  
                           ?_RegisterSet 0027                                 ??_strchr 0022  
                               ??_strlen 0022                                 ??_strstr 002F  
                         ?_OperationMode 0070                     __size_of_FindChannel 00F6  
            read_write_flash_ram@mem_ptr 002A                        RegisterRead@value 0025  
                      __size_of_WriteSPI 000E                              __pbssCOMMON 007C  
                              ___latbits 0002                                _WriteFIFO 160F  
                          __pcstackBANK0 0020                            __pcstackBANK1 00A0  
                               ?_PICInit 0070                               ?_ReadClock 0024  
                           _ReceivedData 0190                   SetRFMode@mcparam0_read 002D  
                             ?_SetRFMode 0070                         eeprom_write@addr 0022  
                               ?_DelayDs 0020                        RegisterSet@adress 002A  
                   _IncreaseMemoryAdress 09B5                         ?_read_ram_status 0070  
                 write_ram_status@status 0025                                 ?_ReadSPI 0070  
                  __size_of_RegisterRead 001C                       _TransiverToReceive 0A11  
                    ?_TransiverToReceive 0070                   ??_read_write_flash_ram 002B  
                        ??_DarknessCheck 0028                                __pstrings 0800  
                      ?_write_ram_status 0070              timerFunction@intTimerNumber 0020  
                     ??_write_ram_status 0025                           __size_of_Blink 0033  
                             ?_WriteFIFO 0070                          i1_OperationMode 15FD  
                   ??_TransiverToReceive 0035                             _RegisterRead 16F4  
                               ?_strncmp 0028                    ?_IncreaseMemoryAdress 0070  
                    saveDataToFlash@date 0040                          _TransmittPacket 0CBB  
                      interrupt_function 0004                      saveDataToFlash@year 0042  
                               _IOCBbits 0096                                 DelayDs@i 0024  
                           FindChannel@i 0033                    _ReceivedPacketHandler 0290  
                              clear_ram0 15F5                              _eeprom_read 083D  
                               _PIE1bits 008C                                 _PIR1bits 000C  
                            ??_ClockInit 0023                             ClockInit@cnt 0024  
                 __size_of_timerFunction 0012                   saveDataToFlash@minutes 003E  
                 saveDataToFlash@seconds 003D                          ??_OperationMode 0020  
                          SetRFMode@mode 002C                               _ADCON0bits 001F  
                            __stringbase 0805                               _ADCON1bits 009F  
                               _WPUBbits 0095                                 _ChannelP 0806  
                               _ChannelR 0813                                 _ChannelS 0820  
                            ??_ReadClock 0029                           ReadClock@date1 0037  
                         _SendMemoryData 05A6                         _ReadMemoryAdress 17A8  
                         ReadClock@min10 002C                           ReadClock@sec10 002B  
                      ??_saveDataToFlash 0038                           ReadClock@hour1 0034  
                       __size_of_PICInit 0064                 ?_LightWithSensController 0070  
                         ReadClock@month 0027                           ReadClock@year1 0036  
                            ??_SetRFMode 002B                                 _ReadFIFO 07F2  
                  __size_of_TimerCounter 0042                         __size_of_DelayDs 0024  
       read_write_flash_ram@flash_sector 0027                         __size_of_ReadSPI 0008  
                         _bTimerComplete 0056                           _ram_bulk_erase 1710  
                       _intMinuteCounter 0063               read_write_flash_ram@offset 0029  
                      _TransiverReadFIFO 0AD2                                 _WriteSPI 1628  
                     __end_of__stringtab 0806                         _intSecondCounter 0065  
                     ?_TransiverReadFIFO 0070                               _ANSELHbits 0189  
                __end_ofi1_OperationMode 1606                   __end_of_SendMemoryData 06B6  
                 __size_of_TransiverInit 00EA                     __size_of_RegisterSet 001A  
                       RegisterSet@value 0027                              ??_WriteFIFO 0023  
                __end_of_TransmittPacket 0D6B                             _TimerCounter 092F  
                               __ptext10 0971                                 __ptext11 17D4  
                               __ptext20 1606                                 __ptext12 1691  
                               __ptext21 07F2                                 __ptext13 1710  
                               __ptext30 0B3E                                 __ptext22 0F16  
                               __ptext14 05A6                                 __ptext31 16C0  
                               __ptext23 08BD                                 __ptext15 0BAD  
                               __ptext40 177D                                 __ptext32 16F4  
                               __ptext24 0A6E                                 __ptext16 167D  
                               __ptext41 1732                                 __ptext33 161B  
                               __ptext25 1658                                 __ptext17 17A8  
                               __ptext42 0C2A                                 __ptext34 16A6  
                               __ptext26 1636                                 __ptext18 16DA  
                               __ptext43 15ED                                 __ptext35 15E9  
                               __ptext27 0CBB                                 __ptext19 088D  
                               __ptext44 1628                                 __ptext36 08F0  
                               __ptext28 160F                                 __ptext45 0D6B  
                               __ptext37 1646                                 __ptext29 06B6  
                               __ptext46 15FD                                 __ptext38 1756  
                               __ptext47 092F                                 __ptext39 083D  
                    ??_TransiverReadFIFO 0051                            _timerFunction 1646  
                 ??_IncreaseMemoryAdress 0023                         __size_of_strncmp 0044  
                 ?_ReceivedPacketHandler 0070                            __size_of_main 00E9  
                             strncmp@len 0029                   __end_of_ram_bulk_erase 1732  
                          _bValueFromPot 006D                __end_of_TransiverReadFIFO 0B3E  
                             DelayDs@cnt 0020                           FindChannel@cnt 0031  
        __end_of_LightWithSensController 092F                         _bSaveDataToFlash 0069  
                   _intHalfSecondCounter 0061                          ?_SendMemoryData 0070  
                             _INTCONbits 000B           read_write_flash_ram@flash_page 0028  
                     TransiverReadFIFO@i 00BE                       TransiverReadFIFO@j 00C0  
                         ?_timerFunction 0020                            ??_AnalogValue 0026  
                               intlevel1 0000                                strchr@chr 0020  
                              strchr@ptr 0022                            _TransiverInit 0F16  
 read_write_flash_ram@bytes_to_readwrite 0025                                strncmp@s1 002D  
                              strncmp@s2 0028                                stringcode 0800  
                             _OSCCONbits 008F                          ?_ram_bulk_erase 0070  
                          ??_FindChannel 002E                         ?i1_OperationMode 0070  
                               strlen@cp 0027                                 stringdir 0800  
                               stringtab 0800                         ?_TransmittPacket 0035  
                               strstr@s1 0032                                 strstr@s2 002E  
              ReceivedPacketHandler@Data 0050                __size_of_write_ram_status 002C  
                          ?_eeprom_write 0020                 IncreaseMemoryAdress@var1 0024  
               IncreaseMemoryAdress@var2 0025                 IncreaseMemoryAdress@var3 0026  
                         ?_TransiverInit 0070                             ?_eeprom_read 0070  
                    __end_of_AnalogValue 17A8                               _SSPCONbits 0014  
               __end_of_ReadMemoryAdress 17D4  
