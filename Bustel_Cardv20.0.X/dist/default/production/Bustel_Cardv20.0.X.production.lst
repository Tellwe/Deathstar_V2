

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Feb 06 22:18:21 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	dabs	1,0x7E,2
    55  0000                     
    56                           ; Version 1.40
    57                           ; Generated 01/12/2016 GMT
    58                           ; 
    59                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC16F887 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     	;# 
    91  0001                     	;# 
    92  0002                     	;# 
    93  0003                     	;# 
    94  0004                     	;# 
    95  0005                     	;# 
    96  0006                     	;# 
    97  0007                     	;# 
    98  0008                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0088                     	;# 
   130  0089                     	;# 
   131  008C                     	;# 
   132  008D                     	;# 
   133  008E                     	;# 
   134  008F                     	;# 
   135  0090                     	;# 
   136  0091                     	;# 
   137  0092                     	;# 
   138  0093                     	;# 
   139  0093                     	;# 
   140  0093                     	;# 
   141  0094                     	;# 
   142  0095                     	;# 
   143  0096                     	;# 
   144  0097                     	;# 
   145  0098                     	;# 
   146  0099                     	;# 
   147  009A                     	;# 
   148  009B                     	;# 
   149  009C                     	;# 
   150  009D                     	;# 
   151  009E                     	;# 
   152  009F                     	;# 
   153  0105                     	;# 
   154  0107                     	;# 
   155  0108                     	;# 
   156  0109                     	;# 
   157  010C                     	;# 
   158  010C                     	;# 
   159  010D                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  0185                     	;# 
   163  0187                     	;# 
   164  0188                     	;# 
   165  0189                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  000E                     	;# 
   184  000F                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0013                     	;# 
   189  0014                     	;# 
   190  0015                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  001D                     	;# 
   201  001E                     	;# 
   202  001F                     	;# 
   203  0081                     	;# 
   204  0085                     	;# 
   205  0086                     	;# 
   206  0087                     	;# 
   207  0088                     	;# 
   208  0089                     	;# 
   209  008C                     	;# 
   210  008D                     	;# 
   211  008E                     	;# 
   212  008F                     	;# 
   213  0090                     	;# 
   214  0091                     	;# 
   215  0092                     	;# 
   216  0093                     	;# 
   217  0093                     	;# 
   218  0093                     	;# 
   219  0094                     	;# 
   220  0095                     	;# 
   221  0096                     	;# 
   222  0097                     	;# 
   223  0098                     	;# 
   224  0099                     	;# 
   225  009A                     	;# 
   226  009B                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  0105                     	;# 
   232  0107                     	;# 
   233  0108                     	;# 
   234  0109                     	;# 
   235  010C                     	;# 
   236  010C                     	;# 
   237  010D                     	;# 
   238  010E                     	;# 
   239  010F                     	;# 
   240  0185                     	;# 
   241  0187                     	;# 
   242  0188                     	;# 
   243  0189                     	;# 
   244  018C                     	;# 
   245  018D                     	;# 
   246  0000                     	;# 
   247  0001                     	;# 
   248  0002                     	;# 
   249  0003                     	;# 
   250  0004                     	;# 
   251  0005                     	;# 
   252  0006                     	;# 
   253  0007                     	;# 
   254  0008                     	;# 
   255  0009                     	;# 
   256  000A                     	;# 
   257  000B                     	;# 
   258  000C                     	;# 
   259  000D                     	;# 
   260  000E                     	;# 
   261  000E                     	;# 
   262  000F                     	;# 
   263  0010                     	;# 
   264  0011                     	;# 
   265  0012                     	;# 
   266  0013                     	;# 
   267  0014                     	;# 
   268  0015                     	;# 
   269  0015                     	;# 
   270  0016                     	;# 
   271  0017                     	;# 
   272  0018                     	;# 
   273  0019                     	;# 
   274  001A                     	;# 
   275  001B                     	;# 
   276  001B                     	;# 
   277  001C                     	;# 
   278  001D                     	;# 
   279  001E                     	;# 
   280  001F                     	;# 
   281  0081                     	;# 
   282  0085                     	;# 
   283  0086                     	;# 
   284  0087                     	;# 
   285  0088                     	;# 
   286  0089                     	;# 
   287  008C                     	;# 
   288  008D                     	;# 
   289  008E                     	;# 
   290  008F                     	;# 
   291  0090                     	;# 
   292  0091                     	;# 
   293  0092                     	;# 
   294  0093                     	;# 
   295  0093                     	;# 
   296  0093                     	;# 
   297  0094                     	;# 
   298  0095                     	;# 
   299  0096                     	;# 
   300  0097                     	;# 
   301  0098                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  009F                     	;# 
   309  0105                     	;# 
   310  0107                     	;# 
   311  0108                     	;# 
   312  0109                     	;# 
   313  010C                     	;# 
   314  010C                     	;# 
   315  010D                     	;# 
   316  010E                     	;# 
   317  010F                     	;# 
   318  0185                     	;# 
   319  0187                     	;# 
   320  0188                     	;# 
   321  0189                     	;# 
   322  018C                     	;# 
   323  018D                     	;# 
   324  0000                     	;# 
   325  0001                     	;# 
   326  0002                     	;# 
   327  0003                     	;# 
   328  0004                     	;# 
   329  0005                     	;# 
   330  0006                     	;# 
   331  0007                     	;# 
   332  0008                     	;# 
   333  0009                     	;# 
   334  000A                     	;# 
   335  000B                     	;# 
   336  000C                     	;# 
   337  000D                     	;# 
   338  000E                     	;# 
   339  000E                     	;# 
   340  000F                     	;# 
   341  0010                     	;# 
   342  0011                     	;# 
   343  0012                     	;# 
   344  0013                     	;# 
   345  0014                     	;# 
   346  0015                     	;# 
   347  0015                     	;# 
   348  0016                     	;# 
   349  0017                     	;# 
   350  0018                     	;# 
   351  0019                     	;# 
   352  001A                     	;# 
   353  001B                     	;# 
   354  001B                     	;# 
   355  001C                     	;# 
   356  001D                     	;# 
   357  001E                     	;# 
   358  001F                     	;# 
   359  0081                     	;# 
   360  0085                     	;# 
   361  0086                     	;# 
   362  0087                     	;# 
   363  0088                     	;# 
   364  0089                     	;# 
   365  008C                     	;# 
   366  008D                     	;# 
   367  008E                     	;# 
   368  008F                     	;# 
   369  0090                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0093                     	;# 
   374  0093                     	;# 
   375  0094                     	;# 
   376  0095                     	;# 
   377  0096                     	;# 
   378  0097                     	;# 
   379  0098                     	;# 
   380  0099                     	;# 
   381  009A                     	;# 
   382  009B                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  009F                     	;# 
   387  0105                     	;# 
   388  0107                     	;# 
   389  0108                     	;# 
   390  0109                     	;# 
   391  010C                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  010F                     	;# 
   396  0185                     	;# 
   397  0187                     	;# 
   398  0188                     	;# 
   399  0189                     	;# 
   400  018C                     	;# 
   401  018D                     	;# 
   402                           
   403                           	psect	idataBANK0
   404  0003                     __pidataBANK0:	
   405                           
   406                           ;initializer for _bValueFromPot
   407  0003  3401               	retlw	1
   408                           
   409                           	psect	idataBANK1
   410  0BBC                     __pidataBANK1:	
   411                           
   412                           ;initializer for _intNumberOfBlinks
   413  0BBC  3458               	retlw	88
   414  0BBD  3402               	retlw	2
   415                           
   416                           	psect	strings
   417  0800                     __pstrings:	
   418  0800                     stringtab:	
   419  0800                     __stringtab:	
   420  0800                     stringcode:	
   421                           ;	String table - string pointers are 1 byte each
   422                           
   423  0800                     stringdir:	
   424  0800  3008               	movlw	high stringdir
   425  0801  008A               	movwf	10
   426  0802  0804               	movf	4,w
   427  0803  0A84               	incf	4,f
   428  0804  0782               	addwf	2,f
   429  0805                     __stringbase:	
   430  0805  3400               	retlw	0
   431  0806                     __end_of__stringtab:	
   432  0806                     _ChannelP:	
   433  0806  343F               	retlw	63
   434  0807  3447               	retlw	71
   435  0808  344F               	retlw	79
   436  0809  3457               	retlw	87
   437  080A  345F               	retlw	95
   438  080B  3477               	retlw	119
   439  080C  347E               	retlw	126
   440  080D  347F               	retlw	127
   441  080E  3486               	retlw	134
   442  080F  3487               	retlw	135
   443  0810  3437               	retlw	55
   444  0811  3467               	retlw	103
   445  0812  346F               	retlw	111
   446  0813                     __end_of_ChannelP:	
   447  0813                     _ChannelR:	
   448  0813  344F               	retlw	79
   449  0814  3459               	retlw	89
   450  0815  3463               	retlw	99
   451  0816  346D               	retlw	109
   452  0817  3477               	retlw	119
   453  0818  3495               	retlw	149
   454  0819  349F               	retlw	159
   455  081A  349F               	retlw	159
   456  081B  34A9               	retlw	169
   457  081C  34A9               	retlw	169
   458  081D  3445               	retlw	69
   459  081E  3481               	retlw	129
   460  081F  348B               	retlw	139
   461  0820                     __end_of_ChannelR:	
   462  0820                     _ChannelS:	
   463  0820  3418               	retlw	24
   464  0821  341B               	retlw	27
   465  0822  341E               	retlw	30
   466  0823  3421               	retlw	33
   467  0824  3424               	retlw	36
   468  0825  342D               	retlw	45
   469  0826  347B               	retlw	123
   470  0827  3430               	retlw	48
   471  0828  347E               	retlw	126
   472  0829  3433               	retlw	51
   473  082A  3415               	retlw	21
   474  082B  3427               	retlw	39
   475  082C  342A               	retlw	42
   476  082D                     __end_of_ChannelS:	
   477  001F                     _ADCON0bits	set	31
   478  001E                     _ADRESH	set	30
   479  000B                     _INTCONbits	set	11
   480  000C                     _PIR1bits	set	12
   481  0005                     _PORTA	set	5
   482  0006                     _PORTB	set	6
   483  0007                     _PORTC	set	7
   484  0008                     _PORTD	set	8
   485  0009                     _PORTE	set	9
   486  0013                     _SSPBUF	set	19
   487  0014                     _SSPCONbits	set	20
   488  0010                     _T1CON	set	16
   489  0010                     _T1CONbits	set	16
   490  000F                     _TMR1H	set	15
   491  000E                     _TMR1L	set	14
   492  0018                     _CARRY	set	24
   493  005F                     _GIE	set	95
   494  0029                     _RA1	set	41
   495  002C                     _RA4	set	44
   496  002D                     _RA5	set	45
   497  0030                     _RB0	set	48
   498  0031                     _RB1	set	49
   499  0033                     _RB3	set	51
   500  0034                     _RB4	set	52
   501  0035                     _RB5	set	53
   502  0058                     _RBIF	set	88
   503  0038                     _RC0	set	56
   504  0039                     _RC1	set	57
   505  003A                     _RC2	set	58
   506  0043                     _RD3	set	67
   507  0044                     _RD4	set	68
   508  0060                     _TMR1IF	set	96
   509  0080                     _TMR1ON	set	128
   510  009F                     _ADCON1bits	set	159
   511  0096                     _IOCBbits	set	150
   512  0081                     _OPTION_REGbits	set	129
   513  008F                     _OSCCONbits	set	143
   514  008C                     _PIE1bits	set	140
   515  0094                     _SSPSTATbits	set	148
   516  0085                     _TRISA	set	133
   517  0086                     _TRISB	set	134
   518  0087                     _TRISC	set	135
   519  0088                     _TRISD	set	136
   520  0089                     _TRISE	set	137
   521  0095                     _WPUBbits	set	149
   522  0463                     _SSPIE	set	1123
   523  010D                     _EEADR	set	269
   524  010C                     _EEDATA	set	268
   525  0188                     _ANSEL	set	392
   526  0189                     _ANSELH	set	393
   527  0189                     _ANSELHbits	set	393
   528  0188                     _ANSELbits	set	392
   529  018C                     _EECON1	set	396
   530  018D                     _EECON2	set	397
   531  0C60                     _RD	set	3168
   532  0C61                     _WR	set	3169
   533  0C62                     _WREN	set	3170
   534                           
   535                           ; #config settings
   536  0000                     
   537                           	psect	cinit
   538  0015                     start_initialization:	
   539  0015                     __initialization:	
   540                           
   541                           ; Initialize objects allocated to BANK1
   542  0015  1683               	bsf	3,5	;RP0=1, select bank1
   543  0016  1303               	bcf	3,6	;RP1=0, select bank1
   544  0017  120A  158A  23BC  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   545  001C  00E3               	movwf	__pdataBANK1& (0+127)
   546  001D  120A  158A  23BD  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   547  0022  00E4               	movwf	(__pdataBANK1+1)& (0+127)
   548                           
   549                           ; Initialize objects allocated to BANK0
   550  0023  1283               	bcf	3,5	;RP0=0, select bank0
   551  0024  1303               	bcf	3,6	;RP1=0, select bank0
   552  0025  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   553  002A  00EF               	movwf	__pdataBANK0& (0+127)
   554                           
   555                           ; Clear objects allocated to BANK3
   556  002B  1783               	bsf	3,7	;select IRP bank2
   557  002C  3090               	movlw	low __pbssBANK3
   558  002D  0084               	movwf	4
   559  002E  30EF               	movlw	low (__pbssBANK3+95)
   560  002F  120A  158A  23C6  120A  118A  	fcall	clear_ram0
   561                           
   562                           ; Clear objects allocated to BANK2
   563  0034  3010               	movlw	low __pbssBANK2
   564  0035  0084               	movwf	4
   565  0036  306F               	movlw	low (__pbssBANK2+95)
   566  0037  120A  158A  23C6  120A  118A  	fcall	clear_ram0
   567                           
   568                           ; Clear objects allocated to BANK1
   569  003C  1383               	bcf	3,7	;select IRP bank0
   570  003D  30A0               	movlw	low __pbssBANK1
   571  003E  0084               	movwf	4
   572  003F  30E3               	movlw	low (__pbssBANK1+67)
   573  0040  120A  158A  23C6   	fcall	clear_ram0
   574                           
   575                           ; Clear objects allocated to BANK0
   576  0043  01EC               	clrf	__pbssBANK0& (0+127)
   577  0044  01ED               	clrf	(__pbssBANK0+1)& (0+127)
   578  0045  01EE               	clrf	(__pbssBANK0+2)& (0+127)
   579                           
   580                           ; Clear objects allocated to COMMON
   581  0046  01FC               	clrf	__pbssCOMMON& (0+127)
   582  0047  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   583  0048                     end_of_initialization:	
   584                           ;End of C runtime variable initialization code
   585                           
   586  0048                     __end_of__initialization:	
   587  0048  0183               	clrf	3
   588  0049  120A  118A  284C   	ljmp	_main	;jump to C main() function
   589                           
   590                           	psect	bssCOMMON
   591  007C                     __pbssCOMMON:	
   592  007C                     _intBlinkCycle:	
   593  007C                     	ds	2
   594                           
   595                           	psect	bssBANK0
   596  006C                     __pbssBANK0:	
   597  006C                     _bChannelFound:	
   598  006C                     	ds	1
   599  006D                     _bDark:	
   600  006D                     	ds	1
   601  006E                     _bTransiverModeReceive:	
   602  006E                     	ds	1
   603                           
   604                           	psect	dataBANK0
   605  006F                     __pdataBANK0:	
   606  006F                     _bValueFromPot:	
   607  006F                     	ds	1
   608                           
   609                           	psect	bssBANK1
   610  00A0                     __pbssBANK1:	
   611  00A0                     _ReceivedData:	
   612  00A0                     	ds	40
   613  00C8                     _intClockTimer:	
   614  00C8                     	ds	10
   615  00D2                     _bTimerComplete:	
   616  00D2                     	ds	5
   617  00D7                     _channelFound:	
   618  00D7                     	ds	2
   619  00D9                     _intBlinkCounter:	
   620  00D9                     	ds	2
   621  00DB                     _intDarkCheckIntervall:	
   622  00DB                     	ds	2
   623  00DD                     _intHalfSecondCounter:	
   624  00DD                     	ds	2
   625  00DF                     _intMinuteCounter:	
   626  00DF                     	ds	2
   627  00E1                     _intSecondCounter:	
   628  00E1                     	ds	2
   629                           
   630                           	psect	dataBANK1
   631  00E3                     __pdataBANK1:	
   632  00E3                     _intNumberOfBlinks:	
   633  00E3                     	ds	2
   634                           
   635                           	psect	bssBANK3
   636  0190                     __pbssBANK3:	
   637  0190                     _var1:	
   638  0190                     	ds	95
   639                           
   640                           	psect	bssBANK2
   641  0110                     __pbssBANK2:	
   642  0110                     _var2:	
   643  0110                     	ds	95
   644                           
   645                           	psect	clrtext
   646  0BC6                     clear_ram0:	
   647                           ;	Called with FSR containing the base address, and
   648                           ;	W with the last address+1
   649                           
   650  0BC6  0064               	clrwdt	;clear the watchdog before getting into this loop
   651  0BC7                     clrloop0:	
   652  0BC7  0180               	clrf	0	;clear RAM location pointed to by FSR
   653  0BC8  0A84               	incf	4,f	;increment pointer
   654  0BC9  0604               	xorwf	4,w	;XOR with final address
   655  0BCA  1903               	btfsc	3,2	;have we reached the end yet?
   656  0BCB  3400               	retlw	0	;all done for this memory range, return
   657  0BCC  0604               	xorwf	4,w	;XOR again to restore value
   658  0BCD  2BC7               	goto	clrloop0	;do the next byte
   659                           
   660                           	psect	cstackCOMMON
   661  0070                     __pcstackCOMMON:	
   662  0070                     ?_PICInit:	
   663  0070                     ?_TransiverInit:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0070                     ?_ClockInit:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ?_OperationMode:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ?_Mode_0:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     ?_Mode_1:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ?_Mode_2:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ?_Mode_4:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0070                     ?_Mode_5:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0070                     ?_TransiverToReceive:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     ?_TransiverReadFIFO:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     ?_SetRFMode:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     ?_RegisterRead:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     ?_FindChannel:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0070                     ?_ReadFIFO:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0070                     ?_ReceivedPacketHandler:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0070                     ?_AnalogValue:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0070                     ?_eeprom_read:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0070                     ?_DarknessCheck:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0070                     ?_WriteFIFO:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0070                     ?_LightWithSensController:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0070                     ?_TimerCounter:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ??_TimerCounter:	
   727                           ; 1 bytes @ 0x0
   728                           
   729  0070                     ?_WriteSPI:	
   730                           ; 1 bytes @ 0x0
   731                           
   732  0070                     ?_ReadSPI:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0070                     ?_tc_int:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0070                     ?i1_OperationMode:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0070                     ??i1_OperationMode:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0070                     ?_main:	
   745                           ; 1 bytes @ 0x0
   746                           
   747                           
   748                           ; 2 bytes @ 0x0
   749  0070                     	ds	1
   750  0071                     i1OperationMode@bracketStatus:	
   751                           
   752                           ; 1 bytes @ 0x1
   753  0071                     	ds	2
   754  0073                     TimerCounter@i:	
   755                           
   756                           ; 2 bytes @ 0x3
   757  0073                     	ds	2
   758  0075                     ??_tc_int:	
   759                           
   760                           ; 1 bytes @ 0x5
   761  0075                     	ds	7
   762                           
   763                           	psect	cstackBANK0
   764  0020                     __pcstackBANK0:	
   765  0020                     ??_PICInit:	
   766  0020                     ?_eeprom_write:	
   767                           ; 1 bytes @ 0x0
   768                           
   769  0020                     ??_OperationMode:	
   770                           ; 1 bytes @ 0x0
   771                           
   772  0020                     ?_timerFunction:	
   773                           ; 1 bytes @ 0x0
   774                           
   775  0020                     ?_DelayDs:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0020                     ??_eeprom_read:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0020                     ??_WriteSPI:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0020                     ?___bmul:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0020                     eeprom_write@value:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0020                     ___bmul@multiplicand:	
   791                           ; 1 bytes @ 0x0
   792                           
   793  0020                     timerFunction@intTimerNumber:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0020                     DelayDs@cnt:	
   797                           ; 2 bytes @ 0x0
   798                           
   799                           
   800                           ; 2 bytes @ 0x0
   801  0020                     	ds	1
   802  0021                     ??_eeprom_write:	
   803  0021                     ??___bmul:	
   804                           ; 1 bytes @ 0x1
   805                           
   806  0021                     WriteSPI@buffer:	
   807                           ; 1 bytes @ 0x1
   808                           
   809  0021                     OperationMode@bracketStatus:	
   810                           ; 1 bytes @ 0x1
   811                           
   812  0021                     eeprom_read@addr:	
   813                           ; 1 bytes @ 0x1
   814                           
   815                           
   816                           ; 1 bytes @ 0x1
   817  0021                     	ds	1
   818  0022                     ??_DelayDs:	
   819  0022                     WriteSPI@databyte:	
   820                           ; 1 bytes @ 0x2
   821                           
   822  0022                     eeprom_write@addr:	
   823                           ; 1 bytes @ 0x2
   824                           
   825  0022                     ___bmul@product:	
   826                           ; 1 bytes @ 0x2
   827                           
   828  0022                     timerFunction@intSetSeconds:	
   829                           ; 1 bytes @ 0x2
   830                           
   831                           
   832                           ; 2 bytes @ 0x2
   833  0022                     	ds	1
   834  0023                     ??_ClockInit:	
   835  0023                     ??_RegisterRead:	
   836                           ; 1 bytes @ 0x3
   837                           
   838  0023                     ??_ReadFIFO:	
   839                           ; 1 bytes @ 0x3
   840                           
   841  0023                     ??_WriteFIFO:	
   842                           ; 1 bytes @ 0x3
   843                           
   844  0023                     ??_ReadSPI:	
   845                           ; 1 bytes @ 0x3
   846                           
   847  0023                     WriteFIFO@Data:	
   848                           ; 1 bytes @ 0x3
   849                           
   850  0023                     ___bmul@multiplier:	
   851                           ; 1 bytes @ 0x3
   852                           
   853                           
   854                           ; 1 bytes @ 0x3
   855  0023                     	ds	1
   856  0024                     ?_ReadClock:	
   857  0024                     ??_timerFunction:	
   858                           ; 1 bytes @ 0x4
   859                           
   860  0024                     ReadFIFO@value:	
   861                           ; 1 bytes @ 0x4
   862                           
   863  0024                     ReadClock@minutes:	
   864                           ; 1 bytes @ 0x4
   865                           
   866  0024                     DelayDs@i:	
   867                           ; 1 bytes @ 0x4
   868                           
   869                           
   870                           ; 2 bytes @ 0x4
   871  0024                     	ds	1
   872  0025                     RegisterRead@value:	
   873  0025                     ReadClock@hour:	
   874                           ; 1 bytes @ 0x5
   875                           
   876                           
   877                           ; 1 bytes @ 0x5
   878  0025                     	ds	1
   879  0026                     ??_AnalogValue:	
   880  0026                     ?_Blink:	
   881                           ; 1 bytes @ 0x6
   882                           
   883  0026                     RegisterRead@adress:	
   884                           ; 1 bytes @ 0x6
   885                           
   886  0026                     ReadClock@date:	
   887                           ; 1 bytes @ 0x6
   888                           
   889  0026                     Blink@n:	
   890                           ; 1 bytes @ 0x6
   891                           
   892                           
   893                           ; 2 bytes @ 0x6
   894  0026                     	ds	1
   895  0027                     ?_RegisterSet:	
   896  0027                     RegisterSet@value:	
   897                           ; 1 bytes @ 0x7
   898                           
   899  0027                     AnalogValue@channel:	
   900                           ; 1 bytes @ 0x7
   901                           
   902  0027                     ReadClock@month:	
   903                           ; 1 bytes @ 0x7
   904                           
   905                           
   906                           ; 1 bytes @ 0x7
   907  0027                     	ds	1
   908  0028                     ??_RegisterSet:	
   909  0028                     ??_DarknessCheck:	
   910                           ; 1 bytes @ 0x8
   911                           
   912  0028                     ??_Blink:	
   913                           ; 1 bytes @ 0x8
   914                           
   915  0028                     ReadClock@year:	
   916                           ; 1 bytes @ 0x8
   917                           
   918                           
   919                           ; 1 bytes @ 0x8
   920  0028                     	ds	1
   921  0029                     ??_ReadClock:	
   922  0029                     DarknessCheck@darknessValue:	
   923                           ; 1 bytes @ 0x9
   924                           
   925  0029                     Blink@i:	
   926                           ; 1 bytes @ 0x9
   927                           
   928                           
   929                           ; 2 bytes @ 0x9
   930  0029                     	ds	1
   931  002A                     ??_Mode_0:	
   932  002A                     ??_Mode_1:	
   933                           ; 1 bytes @ 0xA
   934                           
   935  002A                     ??_Mode_2:	
   936                           ; 1 bytes @ 0xA
   937                           
   938  002A                     ??_LightWithSensController:	
   939                           ; 1 bytes @ 0xA
   940                           
   941  002A                     RegisterSet@adress:	
   942                           ; 1 bytes @ 0xA
   943                           
   944                           
   945                           ; 1 bytes @ 0xA
   946  002A                     	ds	1
   947  002B                     ??_SetRFMode:	
   948  002B                     ReadClock@sec10:	
   949                           ; 1 bytes @ 0xB
   950                           
   951                           
   952                           ; 1 bytes @ 0xB
   953  002B                     	ds	1
   954  002C                     SetRFMode@mode:	
   955  002C                     ReadClock@min10:	
   956                           ; 1 bytes @ 0xC
   957                           
   958                           
   959                           ; 1 bytes @ 0xC
   960  002C                     	ds	1
   961  002D                     SetRFMode@mcparam0_read:	
   962  002D                     ReadClock@hour10:	
   963                           ; 1 bytes @ 0xD
   964                           
   965                           
   966                           ; 1 bytes @ 0xD
   967  002D                     	ds	1
   968  002E                     ??_FindChannel:	
   969  002E                     ReadClock@date10:	
   970                           ; 1 bytes @ 0xE
   971                           
   972                           
   973                           ; 1 bytes @ 0xE
   974  002E                     	ds	1
   975  002F                     ReadClock@month10:	
   976                           
   977                           ; 1 bytes @ 0xF
   978  002F                     	ds	1
   979  0030                     ReadClock@year10:	
   980                           
   981                           ; 1 bytes @ 0x10
   982  0030                     	ds	1
   983  0031                     ReadClock@seconds:	
   984  0031                     FindChannel@cnt:	
   985                           ; 1 bytes @ 0x11
   986                           
   987                           
   988                           ; 2 bytes @ 0x11
   989  0031                     	ds	1
   990  0032                     ReadClock@sec1:	
   991                           
   992                           ; 1 bytes @ 0x12
   993  0032                     	ds	1
   994  0033                     ReadClock@min1:	
   995  0033                     FindChannel@i:	
   996                           ; 1 bytes @ 0x13
   997                           
   998                           
   999                           ; 2 bytes @ 0x13
  1000  0033                     	ds	1
  1001  0034                     ReadClock@hour1:	
  1002                           
  1003                           ; 1 bytes @ 0x14
  1004  0034                     	ds	1
  1005  0035                     ??_TransiverInit:	
  1006  0035                     ?_TransmittPacket:	
  1007                           ; 1 bytes @ 0x15
  1008                           
  1009  0035                     ??_TransiverToReceive:	
  1010                           ; 1 bytes @ 0x15
  1011                           
  1012  0035                     TransmittPacket@value:	
  1013                           ; 1 bytes @ 0x15
  1014                           
  1015  0035                     ReadClock@month1:	
  1016                           ; 1 bytes @ 0x15
  1017                           
  1018                           
  1019                           ; 1 bytes @ 0x15
  1020  0035                     	ds	1
  1021  0036                     ??_TransmittPacket:	
  1022  0036                     ReadClock@year1:	
  1023                           ; 1 bytes @ 0x16
  1024                           
  1025                           
  1026                           ; 1 bytes @ 0x16
  1027  0036                     	ds	1
  1028  0037                     ReadClock@date1:	
  1029                           
  1030                           ; 1 bytes @ 0x17
  1031  0037                     	ds	1
  1032  0038                     TransmittPacket@i:	
  1033                           
  1034                           ; 2 bytes @ 0x18
  1035  0038                     	ds	2
  1036  003A                     TransmittPacket@topic:	
  1037                           
  1038                           ; 1 bytes @ 0x1A
  1039  003A                     	ds	1
  1040  003B                     ??_Mode_4:	
  1041  003B                     ??_Mode_5:	
  1042                           ; 1 bytes @ 0x1B
  1043                           
  1044  003B                     ??_ReceivedPacketHandler:	
  1045                           ; 1 bytes @ 0x1B
  1046                           
  1047                           
  1048                           ; 1 bytes @ 0x1B
  1049  003B                     	ds	1
  1050  003C                     ReceivedPacketHandler@Data:	
  1051                           
  1052                           ; 1 bytes @ 0x1C
  1053  003C                     	ds	1
  1054  003D                     ??_TransiverReadFIFO:	
  1055                           
  1056                           ; 1 bytes @ 0x1D
  1057  003D                     	ds	2
  1058  003F                     TransiverReadFIFO@ReceivedString:	
  1059                           
  1060                           ; 30 bytes @ 0x1F
  1061  003F                     	ds	30
  1062  005D                     TransiverReadFIFO@i:	
  1063                           
  1064                           ; 2 bytes @ 0x3D
  1065  005D                     	ds	2
  1066  005F                     TransiverReadFIFO@j:	
  1067                           
  1068                           ; 2 bytes @ 0x3F
  1069  005F                     	ds	2
  1070  0061                     ??_main:	
  1071                           
  1072                           ; 1 bytes @ 0x41
  1073  0061                     	ds	5
  1074  0066                     main@seconds:	
  1075                           
  1076                           ; 1 bytes @ 0x46
  1077  0066                     	ds	1
  1078  0067                     main@minutes:	
  1079                           
  1080                           ; 1 bytes @ 0x47
  1081  0067                     	ds	1
  1082  0068                     main@hour:	
  1083                           
  1084                           ; 1 bytes @ 0x48
  1085  0068                     	ds	1
  1086  0069                     main@date:	
  1087                           
  1088                           ; 1 bytes @ 0x49
  1089  0069                     	ds	1
  1090  006A                     main@month:	
  1091                           
  1092                           ; 1 bytes @ 0x4A
  1093  006A                     	ds	1
  1094  006B                     main@year:	
  1095                           
  1096                           ; 1 bytes @ 0x4B
  1097  006B                     	ds	1
  1098                           
  1099                           	psect	maintext
  1100  004C                     __pmaintext:	
  1101 ;;
  1102 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1103 ;;
  1104 ;; *************** function _main *****************
  1105 ;; Defined at:
  1106 ;;		line 33 in file "main.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;  year            1   75[BANK0 ] unsigned char 
  1111 ;;  month           1   74[BANK0 ] unsigned char 
  1112 ;;  date            1   73[BANK0 ] unsigned char 
  1113 ;;  hour            1   72[BANK0 ] unsigned char 
  1114 ;;  minutes         1   71[BANK0 ] unsigned char 
  1115 ;;  seconds         1   70[BANK0 ] unsigned char 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  2   78[None  ] int 
  1118 ;; Registers used:
  1119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : B00/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1125 ;;      Params:         0       0       0       0       0
  1126 ;;      Locals:         0       6       0       0       0
  1127 ;;      Temps:          0       5       0       0       0
  1128 ;;      Totals:         0      11       0       0       0
  1129 ;;Total ram usage:       11 bytes
  1130 ;; Hardware stack levels required when called:   10
  1131 ;; This function calls:
  1132 ;;		_ClockInit
  1133 ;;		_Mode_0
  1134 ;;		_Mode_1
  1135 ;;		_Mode_2
  1136 ;;		_Mode_4
  1137 ;;		_Mode_5
  1138 ;;		_OperationMode
  1139 ;;		_PICInit
  1140 ;;		_ReadClock
  1141 ;;		_TransiverInit
  1142 ;;		_TransiverReadFIFO
  1143 ;;		_TransiverToReceive
  1144 ;;		_TransmittPacket
  1145 ;;		_eeprom_write
  1146 ;; This function is called by:
  1147 ;;		Startup code after reset
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           
  1152                           ;psect for function _main
  1153  004C                     _main:	
  1154                           
  1155                           ;main.c: 36: PICInit();
  1156                           
  1157                           ;incstack = 0
  1158 ;; hardware stack exceeded
  1159                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1160  004C  120A  158A  2638  120A  118A  	fcall	_PICInit
  1161                           
  1162                           ;main.c: 38: TransiverInit();
  1163  0051  120A  118A  254A  120A  118A  	fcall	_TransiverInit
  1164                           
  1165                           ;main.c: 40: ClockInit();
  1166  0056  120A  158A  2770  120A  118A  	fcall	_ClockInit
  1167                           
  1168                           ;main.c: 47: RB1 = 0;
  1169  005B  1283               	bcf	3,5	;RP0=0, select bank0
  1170  005C  1303               	bcf	3,6	;RP1=0, select bank0
  1171  005D  1086               	bcf	6,1	;volatile
  1172                           
  1173                           ;main.c: 48: _delay((unsigned long)((300)*(4000000/4000.0)));
  1174  005E  3002               	movlw	2
  1175  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1176  0060  1303               	bcf	3,6	;RP1=0, select bank0
  1177  0061  00E3               	movwf	??_main+2
  1178  0062  3086               	movlw	134
  1179  0063  00E2               	movwf	??_main+1
  1180  0064  3098               	movlw	152
  1181  0065  00E1               	movwf	??_main
  1182  0066                     u1997:	
  1183  0066  0BE1               	decfsz	??_main,f
  1184  0067  2866               	goto	u1997
  1185  0068  0BE2               	decfsz	??_main+1,f
  1186  0069  2866               	goto	u1997
  1187  006A  0BE3               	decfsz	??_main+2,f
  1188  006B  2866               	goto	u1997
  1189  006C  0000               	nop
  1190                           
  1191                           ;main.c: 49: RB1 = 1;
  1192  006D  1283               	bcf	3,5	;RP0=0, select bank0
  1193  006E  1303               	bcf	3,6	;RP1=0, select bank0
  1194  006F  1486               	bsf	6,1	;volatile
  1195                           
  1196                           ;main.c: 50: _delay((unsigned long)((300)*(4000000/4000.0)));
  1197  0070  3002               	movlw	2
  1198  0071  1283               	bcf	3,5	;RP0=0, select bank0
  1199  0072  1303               	bcf	3,6	;RP1=0, select bank0
  1200  0073  00E3               	movwf	??_main+2
  1201  0074  3086               	movlw	134
  1202  0075  00E2               	movwf	??_main+1
  1203  0076  3098               	movlw	152
  1204  0077  00E1               	movwf	??_main
  1205  0078                     u2007:	
  1206  0078  0BE1               	decfsz	??_main,f
  1207  0079  2878               	goto	u2007
  1208  007A  0BE2               	decfsz	??_main+1,f
  1209  007B  2878               	goto	u2007
  1210  007C  0BE3               	decfsz	??_main+2,f
  1211  007D  2878               	goto	u2007
  1212  007E  0000               	nop
  1213                           
  1214                           ;main.c: 53: eeprom_write(1,0);
  1215  007F  1283               	bcf	3,5	;RP0=0, select bank0
  1216  0080  1303               	bcf	3,6	;RP1=0, select bank0
  1217  0081  01A0               	clrf	eeprom_write@value
  1218  0082  3001               	movlw	1
  1219  0083  120A  158A  2537  120A  118A  	fcall	_eeprom_write
  1220                           
  1221                           ;main.c: 54: eeprom_write(2,0);
  1222  0088  1283               	bcf	3,5	;RP0=0, select bank0
  1223  0089  1303               	bcf	3,6	;RP1=0, select bank0
  1224  008A  01A0               	clrf	eeprom_write@value
  1225  008B  3002               	movlw	2
  1226  008C  120A  158A  2537  120A  118A  	fcall	_eeprom_write
  1227                           
  1228                           ;main.c: 55: eeprom_write(3,0);
  1229  0091  1283               	bcf	3,5	;RP0=0, select bank0
  1230  0092  1303               	bcf	3,6	;RP1=0, select bank0
  1231  0093  01A0               	clrf	eeprom_write@value
  1232  0094  3003               	movlw	3
  1233  0095  120A  158A  2537  120A  118A  	fcall	_eeprom_write
  1234                           
  1235                           ;main.c: 60: RB1 = 0;
  1236  009A  1283               	bcf	3,5	;RP0=0, select bank0
  1237  009B  1303               	bcf	3,6	;RP1=0, select bank0
  1238  009C  1086               	bcf	6,1	;volatile
  1239                           
  1240                           ;main.c: 61: _delay((unsigned long)((300)*(4000000/4000.0)));
  1241  009D  3002               	movlw	2
  1242  009E  1283               	bcf	3,5	;RP0=0, select bank0
  1243  009F  1303               	bcf	3,6	;RP1=0, select bank0
  1244  00A0  00E3               	movwf	??_main+2
  1245  00A1  3086               	movlw	134
  1246  00A2  00E2               	movwf	??_main+1
  1247  00A3  3098               	movlw	152
  1248  00A4  00E1               	movwf	??_main
  1249  00A5                     u2017:	
  1250  00A5  0BE1               	decfsz	??_main,f
  1251  00A6  28A5               	goto	u2017
  1252  00A7  0BE2               	decfsz	??_main+1,f
  1253  00A8  28A5               	goto	u2017
  1254  00A9  0BE3               	decfsz	??_main+2,f
  1255  00AA  28A5               	goto	u2017
  1256  00AB  0000               	nop
  1257                           
  1258                           ;main.c: 62: RB1 = 1;
  1259  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1260  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1261  00AE  1486               	bsf	6,1	;volatile
  1262                           
  1263                           ;main.c: 63: _delay((unsigned long)((300)*(4000000/4000.0)));
  1264  00AF  3002               	movlw	2
  1265  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  1266  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  1267  00B2  00E3               	movwf	??_main+2
  1268  00B3  3086               	movlw	134
  1269  00B4  00E2               	movwf	??_main+1
  1270  00B5  3098               	movlw	152
  1271  00B6  00E1               	movwf	??_main
  1272  00B7                     u2027:	
  1273  00B7  0BE1               	decfsz	??_main,f
  1274  00B8  28B7               	goto	u2027
  1275  00B9  0BE2               	decfsz	??_main+1,f
  1276  00BA  28B7               	goto	u2027
  1277  00BB  0BE3               	decfsz	??_main+2,f
  1278  00BC  28B7               	goto	u2027
  1279  00BD  0000               	nop
  1280  00BE                     l2731:	
  1281                           ;main.c: 71: while(1)
  1282                           
  1283                           
  1284                           ;main.c: 72: {
  1285                           ;main.c: 73: if(!RB0)
  1286  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1287  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1288  00C0  1806               	btfsc	6,0	;volatile
  1289  00C1  2969               	goto	l2759
  1290                           
  1291                           ;main.c: 74: {
  1292                           ;main.c: 76: unsigned char seconds, minutes, hour, date, month, year;
  1293                           ;main.c: 78: ReadClock(&seconds, &minutes, &hour, &date, &month, &year);
  1294  00C2  3067               	movlw	(low (main@minutes| 0))& (0+255)
  1295  00C3  00E1               	movwf	??_main
  1296  00C4  0861               	movf	??_main,w
  1297  00C5  00A4               	movwf	ReadClock@minutes
  1298  00C6  3068               	movlw	(low (main@hour| 0))& (0+255)
  1299  00C7  00E2               	movwf	??_main+1
  1300  00C8  0862               	movf	??_main+1,w
  1301  00C9  00A5               	movwf	ReadClock@hour
  1302  00CA  3069               	movlw	(low (main@date| 0))& (0+255)
  1303  00CB  00E3               	movwf	??_main+2
  1304  00CC  0863               	movf	??_main+2,w
  1305  00CD  00A6               	movwf	ReadClock@date
  1306  00CE  306A               	movlw	(low (main@month| 0))& (0+255)
  1307  00CF  00E4               	movwf	??_main+3
  1308  00D0  0864               	movf	??_main+3,w
  1309  00D1  00A7               	movwf	ReadClock@month
  1310  00D2  306B               	movlw	(low (main@year| 0))& (0+255)
  1311  00D3  00E5               	movwf	??_main+4
  1312  00D4  0865               	movf	??_main+4,w
  1313  00D5  00A8               	movwf	ReadClock@year
  1314  00D6  3066               	movlw	(low (main@seconds| 0))& (0+255)
  1315  00D7  120A  118A  2311  120A  118A  	fcall	_ReadClock
  1316                           
  1317                           ;main.c: 80: TransmittPacket(1,seconds);
  1318  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1319  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1320  00DE  0866               	movf	main@seconds,w
  1321  00DF  00E1               	movwf	??_main
  1322  00E0  0861               	movf	??_main,w
  1323  00E1  00B5               	movwf	TransmittPacket@value
  1324  00E2  3001               	movlw	1
  1325  00E3  120A  118A  26F8  120A  118A  	fcall	_TransmittPacket
  1326                           
  1327                           ;main.c: 81: _delay((unsigned long)((50)*(4000000/4000.0)));
  1328  00E8  3041               	movlw	65
  1329  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1330  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  1331  00EB  00E2               	movwf	??_main+1
  1332  00EC  30ED               	movlw	237
  1333  00ED  00E1               	movwf	??_main
  1334  00EE                     u2037:	
  1335  00EE  0BE1               	decfsz	??_main,f
  1336  00EF  28EE               	goto	u2037
  1337  00F0  0BE2               	decfsz	??_main+1,f
  1338  00F1  28EE               	goto	u2037
  1339  00F2  28F3               	nop2
  1340                           
  1341                           ;main.c: 82: TransmittPacket(2,minutes);
  1342  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1343  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1344  00F5  0867               	movf	main@minutes,w
  1345  00F6  00E1               	movwf	??_main
  1346  00F7  0861               	movf	??_main,w
  1347  00F8  00B5               	movwf	TransmittPacket@value
  1348  00F9  3002               	movlw	2
  1349  00FA  120A  118A  26F8  120A  118A  	fcall	_TransmittPacket
  1350                           
  1351                           ;main.c: 83: _delay((unsigned long)((50)*(4000000/4000.0)));
  1352  00FF  3041               	movlw	65
  1353  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0102  00E2               	movwf	??_main+1
  1356  0103  30ED               	movlw	237
  1357  0104  00E1               	movwf	??_main
  1358  0105                     u2047:	
  1359  0105  0BE1               	decfsz	??_main,f
  1360  0106  2905               	goto	u2047
  1361  0107  0BE2               	decfsz	??_main+1,f
  1362  0108  2905               	goto	u2047
  1363  0109  290A               	nop2
  1364                           
  1365                           ;main.c: 84: TransmittPacket(3,hour);
  1366  010A  1283               	bcf	3,5	;RP0=0, select bank0
  1367  010B  1303               	bcf	3,6	;RP1=0, select bank0
  1368  010C  0868               	movf	main@hour,w
  1369  010D  00E1               	movwf	??_main
  1370  010E  0861               	movf	??_main,w
  1371  010F  00B5               	movwf	TransmittPacket@value
  1372  0110  3003               	movlw	3
  1373  0111  120A  118A  26F8  120A  118A  	fcall	_TransmittPacket
  1374                           
  1375                           ;main.c: 85: _delay((unsigned long)((50)*(4000000/4000.0)));
  1376  0116  3041               	movlw	65
  1377  0117  1283               	bcf	3,5	;RP0=0, select bank0
  1378  0118  1303               	bcf	3,6	;RP1=0, select bank0
  1379  0119  00E2               	movwf	??_main+1
  1380  011A  30ED               	movlw	237
  1381  011B  00E1               	movwf	??_main
  1382  011C                     u2057:	
  1383  011C  0BE1               	decfsz	??_main,f
  1384  011D  291C               	goto	u2057
  1385  011E  0BE2               	decfsz	??_main+1,f
  1386  011F  291C               	goto	u2057
  1387  0120  2921               	nop2
  1388                           
  1389                           ;main.c: 86: TransmittPacket(4,date);
  1390  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1392  0123  0869               	movf	main@date,w
  1393  0124  00E1               	movwf	??_main
  1394  0125  0861               	movf	??_main,w
  1395  0126  00B5               	movwf	TransmittPacket@value
  1396  0127  3004               	movlw	4
  1397  0128  120A  118A  26F8  120A  118A  	fcall	_TransmittPacket
  1398                           
  1399                           ;main.c: 87: _delay((unsigned long)((50)*(4000000/4000.0)));
  1400  012D  3041               	movlw	65
  1401  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1402  012F  1303               	bcf	3,6	;RP1=0, select bank0
  1403  0130  00E2               	movwf	??_main+1
  1404  0131  30ED               	movlw	237
  1405  0132  00E1               	movwf	??_main
  1406  0133                     u2067:	
  1407  0133  0BE1               	decfsz	??_main,f
  1408  0134  2933               	goto	u2067
  1409  0135  0BE2               	decfsz	??_main+1,f
  1410  0136  2933               	goto	u2067
  1411  0137  2938               	nop2
  1412                           
  1413                           ;main.c: 88: TransmittPacket(5,month);
  1414  0138  1283               	bcf	3,5	;RP0=0, select bank0
  1415  0139  1303               	bcf	3,6	;RP1=0, select bank0
  1416  013A  086A               	movf	main@month,w
  1417  013B  00E1               	movwf	??_main
  1418  013C  0861               	movf	??_main,w
  1419  013D  00B5               	movwf	TransmittPacket@value
  1420  013E  3005               	movlw	5
  1421  013F  120A  118A  26F8  120A  118A  	fcall	_TransmittPacket
  1422                           
  1423                           ;main.c: 89: _delay((unsigned long)((50)*(4000000/4000.0)));
  1424  0144  3041               	movlw	65
  1425  0145  1283               	bcf	3,5	;RP0=0, select bank0
  1426  0146  1303               	bcf	3,6	;RP1=0, select bank0
  1427  0147  00E2               	movwf	??_main+1
  1428  0148  30ED               	movlw	237
  1429  0149  00E1               	movwf	??_main
  1430  014A                     u2077:	
  1431  014A  0BE1               	decfsz	??_main,f
  1432  014B  294A               	goto	u2077
  1433  014C  0BE2               	decfsz	??_main+1,f
  1434  014D  294A               	goto	u2077
  1435  014E  294F               	nop2
  1436                           
  1437                           ;main.c: 90: TransmittPacket(6,year);
  1438  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1439  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1440  0151  086B               	movf	main@year,w
  1441  0152  00E1               	movwf	??_main
  1442  0153  0861               	movf	??_main,w
  1443  0154  00B5               	movwf	TransmittPacket@value
  1444  0155  3006               	movlw	6
  1445  0156  120A  118A  26F8  120A  118A  	fcall	_TransmittPacket
  1446                           
  1447                           ;main.c: 92: _delay((unsigned long)((2400)*(4000000/4000.0)));
  1448  015B  300D               	movlw	13
  1449  015C  1283               	bcf	3,5	;RP0=0, select bank0
  1450  015D  1303               	bcf	3,6	;RP1=0, select bank0
  1451  015E  00E3               	movwf	??_main+2
  1452  015F  302D               	movlw	45
  1453  0160  00E2               	movwf	??_main+1
  1454  0161  30D7               	movlw	215
  1455  0162  00E1               	movwf	??_main
  1456  0163                     u2087:	
  1457  0163  0BE1               	decfsz	??_main,f
  1458  0164  2963               	goto	u2087
  1459  0165  0BE2               	decfsz	??_main+1,f
  1460  0166  2963               	goto	u2087
  1461  0167  0BE3               	decfsz	??_main+2,f
  1462  0168  2963               	goto	u2087
  1463  0169                     l2759:	
  1464                           
  1465                           ;main.c: 189: }
  1466                           ;main.c: 191: if(OperationMode() == 0)
  1467  0169  120A  158A  23D7  120A  118A  	fcall	_OperationMode
  1468  016E  3A00               	xorlw	0
  1469  016F  1D03               	skipz
  1470  0170  2976               	goto	l2763
  1471                           
  1472                           ;main.c: 192: {
  1473                           ;main.c: 193: Mode_0();
  1474  0171  120A  118A  27FC  120A  118A  	fcall	_Mode_0
  1475  0176                     l2763:	
  1476                           
  1477                           ;main.c: 194: }
  1478                           ;main.c: 195: if(OperationMode() == 1)
  1479  0176  120A  158A  23D7  120A  118A  	fcall	_OperationMode
  1480  017B  3A01               	xorlw	1
  1481  017C  1D03               	skipz
  1482  017D  2983               	goto	l2767
  1483                           
  1484                           ;main.c: 196: {
  1485                           ;main.c: 197: Mode_1();
  1486  017E  120A  158A  247F  120A  118A  	fcall	_Mode_1
  1487  0183                     l2767:	
  1488                           
  1489                           ;main.c: 198: }
  1490                           ;main.c: 200: if(OperationMode() == 2)
  1491  0183  120A  158A  23D7  120A  118A  	fcall	_OperationMode
  1492  0188  3A02               	xorlw	2
  1493  0189  1D03               	skipz
  1494  018A  2990               	goto	l2771
  1495                           
  1496                           ;main.c: 201: {
  1497                           ;main.c: 202: Mode_2();
  1498  018B  120A  158A  23EC  120A  118A  	fcall	_Mode_2
  1499  0190                     l2771:	
  1500                           
  1501                           ;main.c: 203: }
  1502                           ;main.c: 205: if(OperationMode() == 4)
  1503  0190  120A  158A  23D7  120A  118A  	fcall	_OperationMode
  1504  0195  3A04               	xorlw	4
  1505  0196  1D03               	skipz
  1506  0197  299D               	goto	l2775
  1507                           
  1508                           ;main.c: 206: {
  1509                           ;main.c: 207: Mode_4();
  1510  0198  120A  158A  2415  120A  118A  	fcall	_Mode_4
  1511  019D                     l2775:	
  1512                           
  1513                           ;main.c: 208: }
  1514                           ;main.c: 210: if(OperationMode() == 5)
  1515  019D  120A  158A  23D7  120A  118A  	fcall	_OperationMode
  1516  01A2  3A05               	xorlw	5
  1517  01A3  1D03               	skipz
  1518  01A4  29AA               	goto	l2779
  1519                           
  1520                           ;main.c: 211: {
  1521                           ;main.c: 212: Mode_5();
  1522  01A5  120A  158A  2437  120A  118A  	fcall	_Mode_5
  1523  01AA                     l2779:	
  1524                           
  1525                           ;main.c: 213: }
  1526                           ;main.c: 217: if(!bTransiverModeReceive)
  1527  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1528  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1529  01AC  086E               	movf	_bTransiverModeReceive,w
  1530  01AD  1D03               	btfss	3,2
  1531  01AE  29B4               	goto	l2783
  1532                           
  1533                           ;main.c: 218: TransiverToReceive();
  1534  01AF  120A  158A  25DC  120A  118A  	fcall	_TransiverToReceive
  1535  01B4                     l2783:	
  1536                           
  1537                           ;main.c: 219: if(RB4 && bTransiverModeReceive)
  1538  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1539  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  1540  01B6  1E06               	btfss	6,4	;volatile
  1541  01B7  28BE               	goto	l2731
  1542  01B8  086E               	movf	_bTransiverModeReceive,w
  1543  01B9  1903               	btfsc	3,2
  1544  01BA  28BE               	goto	l2731
  1545                           
  1546                           ;main.c: 220: TransiverReadFIFO();
  1547  01BB  120A  158A  269A  120A  118A  	fcall	_TransiverReadFIFO
  1548  01C0  28BE               	goto	l2731
  1549  01C1                     __end_of_main:	
  1550                           
  1551                           	psect	text1
  1552  0D37                     __ptext1:	
  1553 ;; *************** function _eeprom_write *****************
  1554 ;; Defined at:
  1555 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eewrite.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;  addr            1    wreg     unsigned char 
  1558 ;;  value           1    0[BANK0 ] unsigned char 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  addr            1    2[BANK0 ] unsigned char 
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  1    wreg      void 
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, status,0
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1570 ;;      Params:         0       1       0       0       0
  1571 ;;      Locals:         0       1       0       0       0
  1572 ;;      Temps:          0       1       0       0       0
  1573 ;;      Totals:         0       3       0       0       0
  1574 ;;Total ram usage:        3 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    2
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_main
  1581 ;;		_IncreaseMemoryAdress
  1582 ;;		_ResetMemoryAdress
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           
  1587                           ;psect for function _eeprom_write
  1588  0D37                     _eeprom_write:	
  1589                           
  1590                           ;incstack = 0
  1591                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  1592                           ;eeprom_write@addr stored from wreg
  1593  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  1594  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  1595  0D39  00A2               	movwf	eeprom_write@addr
  1596  0D3A                     l655:	
  1597  0D3A  1683               	bsf	3,5	;RP0=1, select bank3
  1598  0D3B  1703               	bsf	3,6	;RP1=1, select bank3
  1599  0D3C  188C               	btfsc	12,1	;volsfr
  1600  0D3D  2D3A               	goto	l655
  1601  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  1602  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  1603  0D40  0822               	movf	eeprom_write@addr,w
  1604  0D41  1283               	bcf	3,5	;RP0=0, select bank2
  1605  0D42  1703               	bsf	3,6	;RP1=1, select bank2
  1606  0D43  008D               	movwf	13	;volatile
  1607  0D44  1283               	bcf	3,5	;RP0=0, select bank0
  1608  0D45  1303               	bcf	3,6	;RP1=0, select bank0
  1609  0D46  0820               	movf	eeprom_write@value,w
  1610  0D47  1283               	bcf	3,5	;RP0=0, select bank2
  1611  0D48  1703               	bsf	3,6	;RP1=1, select bank2
  1612  0D49  008C               	movwf	12	;volatile
  1613  0D4A  303F               	movlw	63
  1614  0D4B  1283               	bcf	3,5	;RP0=0, select bank0
  1615  0D4C  1303               	bcf	3,6	;RP1=0, select bank0
  1616  0D4D  00A1               	movwf	??_eeprom_write
  1617  0D4E  0821               	movf	??_eeprom_write,w
  1618  0D4F  1683               	bsf	3,5	;RP0=1, select bank3
  1619  0D50  1703               	bsf	3,6	;RP1=1, select bank3
  1620  0D51  058C               	andwf	12,f	;volsfr
  1621  0D52  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0D53  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0D54  1003               	bcf	3,0	;volatile
  1624  0D55  1B8B               	btfsc	11,7	;volatile
  1625  0D56  1403               	bsf	3,0	;volatile
  1626  0D57  138B               	bcf	11,7	;volatile
  1627  0D58  1683               	bsf	3,5	;RP0=1, select bank3
  1628  0D59  1703               	bsf	3,6	;RP1=1, select bank3
  1629  0D5A  150C               	bsf	12,2	;volsfr
  1630  0D5B  3055               	movlw	85
  1631  0D5C  008D               	movwf	13	;volsfr
  1632  0D5D  30AA               	movlw	170
  1633  0D5E  008D               	movwf	13	;volsfr
  1634  0D5F  148C               	bsf	12,1	;volsfr
  1635  0D60  110C               	bcf	12,2	;volsfr
  1636  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  1637  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  1638  0D63  1C03               	btfss	3,0	;volatile
  1639  0D64  0008               	return
  1640  0D65  178B               	bsf	11,7	;volatile
  1641  0D66  0008               	return
  1642  0D67                     __end_of_eeprom_write:	
  1643                           
  1644                           	psect	text2
  1645  0DDC                     __ptext2:	
  1646 ;; *************** function _TransiverToReceive *****************
  1647 ;; Defined at:
  1648 ;;		line 16 in file "functions.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;		None
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1662 ;;      Params:         0       0       0       0       0
  1663 ;;      Locals:         0       0       0       0       0
  1664 ;;      Temps:          0       2       0       0       0
  1665 ;;      Totals:         0       2       0       0       0
  1666 ;;Total ram usage:        2 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    7
  1669 ;; This function calls:
  1670 ;;		_FindChannel
  1671 ;;		_RegisterRead
  1672 ;;		_RegisterSet
  1673 ;;		_SetRFMode
  1674 ;;		_timerFunction
  1675 ;; This function is called by:
  1676 ;;		_main
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           
  1681                           ;psect for function _TransiverToReceive
  1682  0DDC                     _TransiverToReceive:	
  1683                           
  1684                           ;functions.c: 18: timerFunction(2, 5);
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in _TransiverToReceive: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1688  0DDC  3002               	movlw	2
  1689  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
  1690  0DDE  1303               	bcf	3,6	;RP1=0, select bank0
  1691  0DDF  00A0               	movwf	timerFunction@intTimerNumber
  1692  0DE0  3000               	movlw	0
  1693  0DE1  00A1               	movwf	timerFunction@intTimerNumber+1
  1694  0DE2  3005               	movlw	5
  1695  0DE3  00A2               	movwf	timerFunction@intSetSeconds
  1696  0DE4  3000               	movlw	0
  1697  0DE5  00A3               	movwf	timerFunction@intSetSeconds+1
  1698  0DE6  120A  158A  2425  120A  158A  	fcall	_timerFunction
  1699                           
  1700                           ;functions.c: 22: SetRFMode(0x20);
  1701  0DEB  3020               	movlw	32
  1702  0DEC  120A  158A  2701  120A  158A  	fcall	_SetRFMode
  1703                           
  1704                           ;functions.c: 23: _delay((unsigned long)((10)*(4000000/4000.0)));
  1705  0DF1  300D               	movlw	13
  1706  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  1707  0DF3  1303               	bcf	3,6	;RP1=0, select bank0
  1708  0DF4  00B6               	movwf	??_TransiverToReceive+1
  1709  0DF5  30FB               	movlw	251
  1710  0DF6  00B5               	movwf	??_TransiverToReceive
  1711  0DF7                     u2097:	
  1712  0DF7  0BB5               	decfsz	??_TransiverToReceive,f
  1713  0DF8  2DF7               	goto	u2097
  1714  0DF9  0BB6               	decfsz	??_TransiverToReceive+1,f
  1715  0DFA  2DF7               	goto	u2097
  1716                           
  1717                           ;functions.c: 24: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  1718  0DFB  300E               	movlw	14
  1719  0DFC  120A  158A  2463  120A  158A  	fcall	_RegisterRead
  1720  0E01  3802               	iorlw	2
  1721  0E02  1283               	bcf	3,5	;RP0=0, select bank0
  1722  0E03  1303               	bcf	3,6	;RP1=0, select bank0
  1723  0E04  00B5               	movwf	??_TransiverToReceive
  1724  0E05  0835               	movf	??_TransiverToReceive,w
  1725  0E06  00A7               	movwf	RegisterSet@value
  1726  0E07  300E               	movlw	14
  1727  0E08  120A  158A  2449  120A  158A  	fcall	_RegisterSet
  1728                           
  1729                           ;functions.c: 25: SetRFMode(0x40);
  1730  0E0D  3040               	movlw	64
  1731  0E0E  120A  158A  2701  120A  158A  	fcall	_SetRFMode
  1732  0E13                     l2631:	
  1733                           ;functions.c: 26: while((RegisterRead(0x0E) & 0b00000010) == 0)
  1734                           
  1735  0E13  300E               	movlw	14
  1736  0E14  120A  158A  2463  120A  158A  	fcall	_RegisterRead
  1737  0E19  3902               	andlw	2
  1738  0E1A  1D03               	btfss	3,2
  1739  0E1B  2E26               	goto	l2633
  1740                           
  1741                           ;functions.c: 27: {
  1742                           ;functions.c: 28: if(bTimerComplete[2])
  1743  0E1C  1683               	bsf	3,5	;RP0=1, select bank1
  1744  0E1D  1303               	bcf	3,6	;RP1=0, select bank1
  1745  0E1E  0854               	movf	(_bTimerComplete^(0+128)+2),w
  1746  0E1F  1903               	btfsc	3,2
  1747  0E20  2E13               	goto	l2631
  1748                           
  1749                           ;functions.c: 29: {
  1750                           ;functions.c: 30: FindChannel();
  1751  0E21  120A  118A  244A  120A  158A  	fcall	_FindChannel
  1752  0E26                     l2633:	
  1753                           ;functions.c: 31: break;
  1754                           
  1755                           
  1756                           ;functions.c: 32: }
  1757                           ;functions.c: 33: }
  1758                           ;functions.c: 35: SetRFMode(0x60);
  1759  0E26  3060               	movlw	96
  1760  0E27  120A  158A  2701  120A  158A  	fcall	_SetRFMode
  1761                           
  1762                           ;functions.c: 36: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1763  0E2C  30A5               	movlw	165
  1764  0E2D  1283               	bcf	3,5	;RP0=0, select bank0
  1765  0E2E  1303               	bcf	3,6	;RP1=0, select bank0
  1766  0E2F  00B5               	movwf	??_TransiverToReceive
  1767  0E30                     u2107:	
  1768  0E30  0BB5               	decfsz	??_TransiverToReceive,f
  1769  0E31  2E30               	goto	u2107
  1770  0E32  2E33               	nop2
  1771                           
  1772                           ;functions.c: 37: bTransiverModeReceive = 1;
  1773  0E33  1283               	bcf	3,5	;RP0=0, select bank0
  1774  0E34  1303               	bcf	3,6	;RP1=0, select bank0
  1775  0E35  01EE               	clrf	_bTransiverModeReceive
  1776  0E36  0AEE               	incf	_bTransiverModeReceive,f
  1777  0E37  0008               	return
  1778  0E38                     __end_of_TransiverToReceive:	
  1779                           
  1780                           	psect	text3
  1781  0E9A                     __ptext3:	
  1782 ;; *************** function _TransiverReadFIFO *****************
  1783 ;; Defined at:
  1784 ;;		line 42 in file "functions.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;		None
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;  j               2   63[BANK0 ] int 
  1789 ;;  ReceivedStri   30   31[BANK0 ] unsigned char [30]
  1790 ;;  i               2   61[BANK0 ] int 
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1800 ;;      Params:         0       0       0       0       0
  1801 ;;      Locals:         0      34       0       0       0
  1802 ;;      Temps:          0       2       0       0       0
  1803 ;;      Totals:         0      36       0       0       0
  1804 ;;Total ram usage:       36 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    9
  1807 ;; This function calls:
  1808 ;;		_ReadFIFO
  1809 ;;		_ReceivedPacketHandler
  1810 ;;		_SetRFMode
  1811 ;;		_timerFunction
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           
  1818                           ;psect for function _TransiverReadFIFO
  1819  0E9A                     _TransiverReadFIFO:	
  1820                           
  1821                           ;functions.c: 44: unsigned char ReceivedString[30];
  1822                           ;functions.c: 45: timerFunction(3, 5);
  1823                           
  1824                           ;incstack = 0
  1825 ;; hardware stack exceeded
  1826                           ; Regs used in _TransiverReadFIFO: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1827  0E9A  3003               	movlw	3
  1828  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  1829  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  1830  0E9D  00A0               	movwf	timerFunction@intTimerNumber
  1831  0E9E  3000               	movlw	0
  1832  0E9F  00A1               	movwf	timerFunction@intTimerNumber+1
  1833  0EA0  3005               	movlw	5
  1834  0EA1  00A2               	movwf	timerFunction@intSetSeconds
  1835  0EA2  3000               	movlw	0
  1836  0EA3  00A3               	movwf	timerFunction@intSetSeconds+1
  1837  0EA4  120A  158A  2425  120A  158A  	fcall	_timerFunction
  1838                           
  1839                           ;functions.c: 47: SetRFMode(0x20);
  1840  0EA9  3020               	movlw	32
  1841  0EAA  120A  158A  2701  120A  158A  	fcall	_SetRFMode
  1842                           
  1843                           ;functions.c: 48: bTransiverModeReceive = 0;
  1844  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  1845  0EB0  1303               	bcf	3,6	;RP1=0, select bank0
  1846  0EB1  01EE               	clrf	_bTransiverModeReceive
  1847                           
  1848                           ;functions.c: 49: int i = 0;
  1849  0EB2  01DD               	clrf	TransiverReadFIFO@i
  1850  0EB3  01DE               	clrf	TransiverReadFIFO@i+1
  1851                           
  1852                           ;functions.c: 50: for (int j = 0; j < 30; ++j)
  1853  0EB4  01DF               	clrf	TransiverReadFIFO@j
  1854  0EB5  01E0               	clrf	TransiverReadFIFO@j+1
  1855  0EB6                     L1:	
  1856  0EB6  0860               	movf	TransiverReadFIFO@j+1,w
  1857  0EB7  3A80               	xorlw	128
  1858  0EB8  00FF               	movwf	127
  1859  0EB9  3080               	movlw	128
  1860  0EBA  027F               	subwf	127,w
  1861  0EBB  1D03               	skipz
  1862  0EBC  2EBF               	goto	u1605
  1863  0EBD  301E               	movlw	30
  1864  0EBE  025F               	subwf	TransiverReadFIFO@j,w
  1865  0EBF                     u1605:	
  1866  0EBF  1803               	btfsc	3,0
  1867  0EC0  2EE3               	goto	l2661
  1868                           
  1869                           ;functions.c: 51: {
  1870                           ;functions.c: 52: ReceivedString[j] = 0;
  1871  0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  1872  0EC2  1303               	bcf	3,6	;RP1=0, select bank0
  1873  0EC3  085F               	movf	TransiverReadFIFO@j,w
  1874  0EC4  3E3F               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  1875  0EC5  0084               	movwf	4
  1876  0EC6  1383               	bcf	3,7	;select IRP bank0
  1877  0EC7  0180               	clrf	0
  1878  0EC8  3001               	movlw	1
  1879  0EC9  07DF               	addwf	TransiverReadFIFO@j,f
  1880  0ECA  1803               	skipnc
  1881  0ECB  0AE0               	incf	TransiverReadFIFO@j+1,f
  1882  0ECC  3000               	movlw	0
  1883  0ECD  07E0               	addwf	TransiverReadFIFO@j+1,f
  1884  0ECE  2EB6               	goto	L1
  1885  0ECF                     l2657:	
  1886                           ;functions.c: 53: }
  1887                           ;functions.c: 54: while((RB3)&&(!bTimerComplete[3]))
  1888                           
  1889                           
  1890                           ;functions.c: 55: {
  1891                           ;functions.c: 56: ReceivedString[i] = ReadFIFO();
  1892  0ECF  120A  158A  2407  120A  158A  	fcall	_ReadFIFO
  1893  0ED4  1283               	bcf	3,5	;RP0=0, select bank0
  1894  0ED5  1303               	bcf	3,6	;RP1=0, select bank0
  1895  0ED6  00BD               	movwf	??_TransiverReadFIFO
  1896  0ED7  085D               	movf	TransiverReadFIFO@i,w
  1897  0ED8  3E3F               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  1898  0ED9  0084               	movwf	4
  1899  0EDA  083D               	movf	??_TransiverReadFIFO,w
  1900  0EDB  1383               	bcf	3,7	;select IRP bank0
  1901  0EDC  0080               	movwf	0
  1902                           
  1903                           ;functions.c: 57: i++;
  1904  0EDD  3001               	movlw	1
  1905  0EDE  07DD               	addwf	TransiverReadFIFO@i,f
  1906  0EDF  1803               	skipnc
  1907  0EE0  0ADE               	incf	TransiverReadFIFO@i+1,f
  1908  0EE1  3000               	movlw	0
  1909  0EE2  07DE               	addwf	TransiverReadFIFO@i+1,f
  1910  0EE3                     l2661:	
  1911  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  1912  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  1913  0EE5  1D86               	btfss	6,3	;volatile
  1914  0EE6  2EEC               	goto	l2665
  1915  0EE7  1683               	bsf	3,5	;RP0=1, select bank1
  1916  0EE8  1303               	bcf	3,6	;RP1=0, select bank1
  1917  0EE9  0855               	movf	(_bTimerComplete^(0+128)+3),w
  1918  0EEA  1903               	btfsc	3,2
  1919  0EEB  2ECF               	goto	l2657
  1920  0EEC                     l2665:	
  1921                           
  1922                           ;functions.c: 58: }
  1923                           ;functions.c: 60: _delay((unsigned long)((10)*(4000000/4000.0)));
  1924  0EEC  300D               	movlw	13
  1925  0EED  1283               	bcf	3,5	;RP0=0, select bank0
  1926  0EEE  1303               	bcf	3,6	;RP1=0, select bank0
  1927  0EEF  00BE               	movwf	??_TransiverReadFIFO+1
  1928  0EF0  30FB               	movlw	251
  1929  0EF1  00BD               	movwf	??_TransiverReadFIFO
  1930  0EF2                     u2117:	
  1931  0EF2  0BBD               	decfsz	??_TransiverReadFIFO,f
  1932  0EF3  2EF2               	goto	u2117
  1933  0EF4  0BBE               	decfsz	??_TransiverReadFIFO+1,f
  1934  0EF5  2EF2               	goto	u2117
  1935                           
  1936                           ;functions.c: 61: SetRFMode(0x00);
  1937  0EF6  3000               	movlw	0
  1938  0EF7  120A  158A  2701  120A  158A  	fcall	_SetRFMode
  1939                           
  1940                           ;functions.c: 63: ReceivedPacketHandler(ReceivedString);
  1941  0EFC  303F               	movlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  1942  0EFD  120A  118A  21C1   	fcall	_ReceivedPacketHandler
  1943  0F00  0008               	return
  1944  0F01                     __end_of_TransiverReadFIFO:	
  1945                           
  1946                           	psect	text4
  1947  01C1                     __ptext4:	
  1948 ;; *************** function _ReceivedPacketHandler *****************
  1949 ;; Defined at:
  1950 ;;		line 73 in file "functions.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  Data            1    wreg     PTR unsigned char 
  1953 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  Data            1   28[BANK0 ] PTR unsigned char 
  1956 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1966 ;;      Params:         0       0       0       0       0
  1967 ;;      Locals:         0       1       0       0       0
  1968 ;;      Temps:          0       1       0       0       0
  1969 ;;      Totals:         0       2       0       0       0
  1970 ;;Total ram usage:        2 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    8
  1973 ;; This function calls:
  1974 ;;		_AnalogValue
  1975 ;;		_DarknessCheck
  1976 ;;		_DelayDs
  1977 ;;		_OperationMode
  1978 ;;		_TransmittPacket
  1979 ;;		_eeprom_read
  1980 ;; This function is called by:
  1981 ;;		_TransiverReadFIFO
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           
  1986                           ;psect for function _ReceivedPacketHandler
  1987  01C1                     _ReceivedPacketHandler:	
  1988                           
  1989                           ;incstack = 0
  1990 ;; hardware stack exceeded
  1991                           ; Regs used in _ReceivedPacketHandler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1992                           ;ReceivedPacketHandler@Data stored from wreg
  1993  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1994  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  1995  01C3  00BC               	movwf	ReceivedPacketHandler@Data
  1996                           
  1997                           ;functions.c: 75: if(Data[0] != 44 || Data[3] != 55)
  1998  01C4  083C               	movf	ReceivedPacketHandler@Data,w
  1999  01C5  0084               	movwf	4
  2000  01C6  302C               	movlw	44
  2001  01C7  1383               	bcf	3,7	;select IRP bank0
  2002  01C8  0600               	xorwf	0,w
  2003  01C9  1D03               	btfss	3,2
  2004  01CA  0008               	return
  2005  01CB  083C               	movf	ReceivedPacketHandler@Data,w
  2006  01CC  3E03               	addlw	3
  2007  01CD  0084               	movwf	4
  2008  01CE  3037               	movlw	55
  2009  01CF  0600               	xorwf	0,w
  2010  01D0  1D03               	btfss	3,2
  2011  01D1  0008               	return
  2012  01D2  2AF4               	goto	l2337
  2013  01D3                     l287:	
  2014                           ;functions.c: 82: {
  2015                           ;functions.c: 83: case 1:
  2016                           
  2017                           ;functions.c: 81: switch (Data[2])
  2018                           
  2019                           ;functions.c: 79: {
  2020                           ;functions.c: 80: case 1:
  2021                           
  2022                           ;functions.c: 78: switch (Data[1])
  2023                           
  2024                           ;functions.c: 76: return;
  2025                           
  2026                           
  2027                           ;functions.c: 84: RC2 = 1;
  2028  01D3  1507               	bsf	7,2	;volatile
  2029                           
  2030                           ;functions.c: 85: DelayDs(10);
  2031  01D4  300A               	movlw	10
  2032  01D5  00A0               	movwf	DelayDs@cnt
  2033  01D6  3000               	movlw	0
  2034  01D7  00A1               	movwf	DelayDs@cnt+1
  2035  01D8  120A  158A  249E  120A  118A  	fcall	_DelayDs
  2036                           
  2037                           ;functions.c: 86: RC2 = 0;
  2038  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  2039  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  2040  01DF  1107               	bcf	7,2	;volatile
  2041                           
  2042                           ;functions.c: 87: DelayDs(5);
  2043  01E0  3005               	movlw	5
  2044  01E1  00A0               	movwf	DelayDs@cnt
  2045  01E2  3000               	movlw	0
  2046  01E3  00A1               	movwf	DelayDs@cnt+1
  2047  01E4  120A  158A  249E   	fcall	_DelayDs
  2048                           
  2049                           ;functions.c: 88: break;
  2050  01E7  0008               	return
  2051  01E8                     l289:	
  2052                           ;functions.c: 90: case 2:
  2053                           
  2054                           
  2055                           ;functions.c: 91: RC1 = 1;
  2056  01E8  1487               	bsf	7,1	;volatile
  2057                           
  2058                           ;functions.c: 92: DelayDs(10);
  2059  01E9  300A               	movlw	10
  2060  01EA  00A0               	movwf	DelayDs@cnt
  2061  01EB  3000               	movlw	0
  2062  01EC  00A1               	movwf	DelayDs@cnt+1
  2063  01ED  120A  158A  249E  120A  118A  	fcall	_DelayDs
  2064                           
  2065                           ;functions.c: 93: RC1 = 0;
  2066  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  2067  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  2068  01F4  1087               	bcf	7,1	;volatile
  2069                           
  2070                           ;functions.c: 94: DelayDs(5);
  2071  01F5  3005               	movlw	5
  2072  01F6  00A0               	movwf	DelayDs@cnt
  2073  01F7  3000               	movlw	0
  2074  01F8  00A1               	movwf	DelayDs@cnt+1
  2075  01F9  120A  158A  249E   	fcall	_DelayDs
  2076                           
  2077                           ;functions.c: 95: break;
  2078  01FC  0008               	return
  2079  01FD                     l290:	
  2080                           ;functions.c: 97: case 3:
  2081                           
  2082                           
  2083                           ;functions.c: 98: RB1 = 0;
  2084  01FD  1086               	bcf	6,1	;volatile
  2085                           
  2086                           ;functions.c: 99: DelayDs(10);
  2087  01FE  300A               	movlw	10
  2088  01FF  00A0               	movwf	DelayDs@cnt
  2089  0200  3000               	movlw	0
  2090  0201  00A1               	movwf	DelayDs@cnt+1
  2091  0202  120A  158A  249E  120A  118A  	fcall	_DelayDs
  2092                           
  2093                           ;functions.c: 100: RB1 = 1;
  2094  0207  1283               	bcf	3,5	;RP0=0, select bank0
  2095  0208  1303               	bcf	3,6	;RP1=0, select bank0
  2096  0209  1486               	bsf	6,1	;volatile
  2097                           
  2098                           ;functions.c: 101: DelayDs(5);
  2099  020A  3005               	movlw	5
  2100  020B  00A0               	movwf	DelayDs@cnt
  2101  020C  3000               	movlw	0
  2102  020D  00A1               	movwf	DelayDs@cnt+1
  2103  020E  120A  158A  249E   	fcall	_DelayDs
  2104                           
  2105                           ;functions.c: 107: }
  2106                           
  2107                           ;functions.c: 105: break;
  2108                           
  2109                           ;functions.c: 104: default:
  2110                           
  2111                           ;functions.c: 102: break;
  2112  0211  0008               	return
  2113  0212                     l2273:	
  2114  0212  1283               	bcf	3,5	;RP0=0, select bank0
  2115  0213  1303               	bcf	3,6	;RP1=0, select bank0
  2116  0214  083C               	movf	ReceivedPacketHandler@Data,w
  2117  0215  3E02               	addlw	2
  2118  0216  0084               	movwf	4
  2119  0217  1383               	bcf	3,7	;select IRP bank0
  2120  0218  0800               	movf	0,w
  2121                           
  2122                           ; Switch size 1, requested type "space"
  2123                           ; Number of cases is 3, Range of values is 1 to 3
  2124                           ; switch strategies available:
  2125                           ; Name         Instructions Cycles
  2126                           ; simple_byte           10     6 (average)
  2127                           ; direct_byte           20    11 (fixed)
  2128                           ; jumptable            263     9 (fixed)
  2129                           ;	Chosen strategy is simple_byte
  2130  0219  3A01               	xorlw	1	; case 1
  2131  021A  1903               	skipnz
  2132  021B  29D3               	goto	l287
  2133  021C  3A03               	xorlw	3	; case 2
  2134  021D  1903               	skipnz
  2135  021E  29E8               	goto	l289
  2136  021F  3A01               	xorlw	1	; case 3
  2137  0220  1903               	skipnz
  2138  0221  29FD               	goto	l290
  2139  0222  2B10               	goto	l283
  2140                           
  2141                           ;functions.c: 108: break;
  2142  0223  0008               	return
  2143  0224                     l2275:	
  2144                           ;functions.c: 109: case 2:
  2145                           
  2146                           
  2147                           ;functions.c: 110: if(Data[2] == 1 && OperationMode() == 6)
  2148  0224  083C               	movf	ReceivedPacketHandler@Data,w
  2149  0225  3E02               	addlw	2
  2150  0226  0084               	movwf	4
  2151  0227  0300               	decf	0,w
  2152  0228  1D03               	btfss	3,2
  2153  0229  2A45               	goto	l2285
  2154  022A  120A  158A  23D7  120A  118A  	fcall	_OperationMode
  2155  022F  3A06               	xorlw	6
  2156  0230  1D03               	skipz
  2157  0231  2A45               	goto	l2285
  2158                           
  2159                           ;functions.c: 111: {
  2160                           ;functions.c: 112: intBlinkCycle = 1;
  2161  0232  3001               	movlw	1
  2162  0233  00FC               	movwf	_intBlinkCycle
  2163  0234  3000               	movlw	0
  2164  0235  00FD               	movwf	_intBlinkCycle+1
  2165                           
  2166                           ;functions.c: 113: intBlinkCounter = 0;
  2167  0236  1683               	bsf	3,5	;RP0=1, select bank1
  2168  0237  1303               	bcf	3,6	;RP1=0, select bank1
  2169  0238  01D9               	clrf	_intBlinkCounter^(0+128)
  2170  0239  01DA               	clrf	(_intBlinkCounter+1)^(0+128)
  2171                           
  2172                           ;functions.c: 114: DelayDs(100);
  2173  023A  3064               	movlw	100
  2174  023B  1283               	bcf	3,5	;RP0=0, select bank0
  2175  023C  1303               	bcf	3,6	;RP1=0, select bank0
  2176  023D  00A0               	movwf	DelayDs@cnt
  2177  023E  3000               	movlw	0
  2178  023F  00A1               	movwf	DelayDs@cnt+1
  2179  0240  120A  158A  249E  120A  118A  	fcall	_DelayDs
  2180  0245                     l2285:	
  2181                           
  2182                           ;functions.c: 115: }
  2183                           ;functions.c: 116: if(Data[2] == 2 && OperationMode() == 7)
  2184  0245  1283               	bcf	3,5	;RP0=0, select bank0
  2185  0246  1303               	bcf	3,6	;RP1=0, select bank0
  2186  0247  083C               	movf	ReceivedPacketHandler@Data,w
  2187  0248  3E02               	addlw	2
  2188  0249  0084               	movwf	4
  2189  024A  3002               	movlw	2
  2190  024B  1383               	bcf	3,7	;select IRP bank0
  2191  024C  0600               	xorwf	0,w
  2192  024D  1D03               	btfss	3,2
  2193  024E  0008               	return
  2194  024F  120A  158A  23D7  120A  118A  	fcall	_OperationMode
  2195  0254  3A07               	xorlw	7
  2196  0255  1D03               	skipz
  2197  0256  0008               	return
  2198                           
  2199                           ;functions.c: 117: {
  2200                           ;functions.c: 118: intBlinkCycle = 1;
  2201  0257  3001               	movlw	1
  2202  0258  00FC               	movwf	_intBlinkCycle
  2203  0259  3000               	movlw	0
  2204  025A  00FD               	movwf	_intBlinkCycle+1
  2205                           
  2206                           ;functions.c: 119: intBlinkCounter = 0;
  2207  025B  1683               	bsf	3,5	;RP0=1, select bank1
  2208  025C  1303               	bcf	3,6	;RP1=0, select bank1
  2209  025D  01D9               	clrf	_intBlinkCounter^(0+128)
  2210  025E  01DA               	clrf	(_intBlinkCounter+1)^(0+128)
  2211                           
  2212                           ;functions.c: 120: DelayDs(100);
  2213  025F  3064               	movlw	100
  2214  0260  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0261  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0262  00A0               	movwf	DelayDs@cnt
  2217  0263  3000               	movlw	0
  2218  0264  00A1               	movwf	DelayDs@cnt+1
  2219  0265  120A  158A  249E   	fcall	_DelayDs
  2220                           
  2221                           ;functions.c: 121: }
  2222                           ;functions.c: 122: break;
  2223  0268  0008               	return
  2224  0269                     l2295:	
  2225                           ;functions.c: 124: case 3:
  2226                           
  2227                           
  2228                           ;functions.c: 125: if(Data[2] != 0)
  2229  0269  1283               	bcf	3,5	;RP0=0, select bank0
  2230  026A  1303               	bcf	3,6	;RP1=0, select bank0
  2231  026B  083C               	movf	ReceivedPacketHandler@Data,w
  2232  026C  3E02               	addlw	2
  2233  026D  0084               	movwf	4
  2234  026E  1383               	bcf	3,7	;select IRP bank0
  2235  026F  0800               	movf	0,w
  2236  0270  1D03               	btfss	3,2
  2237  0271  0008               	return
  2238                           
  2239                           ;functions.c: 127: TransmittPacket(3, AnalogValue(0));
  2240                           
  2241                           ;functions.c: 126: break;
  2242  0272  3000               	movlw	0
  2243  0273  120A  158A  24E5  120A  118A  	fcall	_AnalogValue
  2244  0278  1283               	bcf	3,5	;RP0=0, select bank0
  2245  0279  1303               	bcf	3,6	;RP1=0, select bank0
  2246  027A  00BB               	movwf	??_ReceivedPacketHandler
  2247  027B  083B               	movf	??_ReceivedPacketHandler,w
  2248  027C  00B5               	movwf	TransmittPacket@value
  2249  027D  3003               	movlw	3
  2250  027E  120A  118A  26F8   	fcall	_TransmittPacket
  2251                           
  2252                           ;functions.c: 128: break;
  2253  0281  0008               	return
  2254  0282                     l2301:	
  2255                           ;functions.c: 130: case 4:
  2256                           
  2257                           
  2258                           ;functions.c: 131: if(Data[2] != 0)
  2259  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2260  0283  1303               	bcf	3,6	;RP1=0, select bank0
  2261  0284  083C               	movf	ReceivedPacketHandler@Data,w
  2262  0285  3E02               	addlw	2
  2263  0286  0084               	movwf	4
  2264  0287  1383               	bcf	3,7	;select IRP bank0
  2265  0288  0800               	movf	0,w
  2266  0289  1D03               	btfss	3,2
  2267  028A  0008               	return
  2268                           
  2269                           ;functions.c: 133: TransmittPacket(4, AnalogValue(3));
  2270                           
  2271                           ;functions.c: 132: break;
  2272  028B  3003               	movlw	3
  2273  028C  120A  158A  24E5  120A  118A  	fcall	_AnalogValue
  2274  0291  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0292  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0293  00BB               	movwf	??_ReceivedPacketHandler
  2277  0294  083B               	movf	??_ReceivedPacketHandler,w
  2278  0295  00B5               	movwf	TransmittPacket@value
  2279  0296  3004               	movlw	4
  2280  0297  120A  118A  26F8   	fcall	_TransmittPacket
  2281                           
  2282                           ;functions.c: 134: break;
  2283  029A  0008               	return
  2284  029B                     l2307:	
  2285                           ;functions.c: 136: case 5:
  2286                           
  2287                           
  2288                           ;functions.c: 137: if(Data[2] != 0)
  2289  029B  1283               	bcf	3,5	;RP0=0, select bank0
  2290  029C  1303               	bcf	3,6	;RP1=0, select bank0
  2291  029D  083C               	movf	ReceivedPacketHandler@Data,w
  2292  029E  3E02               	addlw	2
  2293  029F  0084               	movwf	4
  2294  02A0  1383               	bcf	3,7	;select IRP bank0
  2295  02A1  0800               	movf	0,w
  2296  02A2  1D03               	btfss	3,2
  2297  02A3  0008               	return
  2298                           
  2299                           ;functions.c: 139: TransmittPacket(5, eeprom_read(0));
  2300                           
  2301                           ;functions.c: 138: break;
  2302  02A4  3000               	movlw	0
  2303  02A5  120A  158A  24C1  120A  118A  	fcall	_eeprom_read
  2304  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2305  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2306  02AC  00BB               	movwf	??_ReceivedPacketHandler
  2307  02AD  083B               	movf	??_ReceivedPacketHandler,w
  2308  02AE  00B5               	movwf	TransmittPacket@value
  2309  02AF  3005               	movlw	5
  2310  02B0  120A  118A  26F8   	fcall	_TransmittPacket
  2311                           
  2312                           ;functions.c: 140: break;
  2313  02B3  0008               	return
  2314  02B4                     l2313:	
  2315                           ;functions.c: 142: case 6:
  2316                           
  2317                           
  2318                           ;functions.c: 143: if(Data[2] != 0)
  2319  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2320  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  2321  02B6  083C               	movf	ReceivedPacketHandler@Data,w
  2322  02B7  3E02               	addlw	2
  2323  02B8  0084               	movwf	4
  2324  02B9  1383               	bcf	3,7	;select IRP bank0
  2325  02BA  0800               	movf	0,w
  2326  02BB  1D03               	btfss	3,2
  2327  02BC  0008               	return
  2328                           
  2329                           ;functions.c: 145: if(bValueFromPot == TRUE)
  2330                           
  2331                           ;functions.c: 144: break;
  2332  02BD  036F               	decf	_bValueFromPot,w
  2333  02BE  1D03               	btfss	3,2
  2334  02BF  2AC7               	goto	l2321
  2335                           
  2336                           ;functions.c: 146: TransmittPacket(6, 1);
  2337  02C0  01B5               	clrf	TransmittPacket@value
  2338  02C1  0AB5               	incf	TransmittPacket@value,f
  2339  02C2  3006               	movlw	6
  2340  02C3  120A  118A  26F8   	fcall	_TransmittPacket
  2341  02C6  0008               	return
  2342  02C7                     l2321:	
  2343                           
  2344                           ;functions.c: 147: else
  2345                           ;functions.c: 148: TransmittPacket(6, 0);
  2346  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  2347  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  2348  02C9  01B5               	clrf	TransmittPacket@value
  2349  02CA  3006               	movlw	6
  2350  02CB  120A  118A  26F8   	fcall	_TransmittPacket
  2351                           
  2352                           ;functions.c: 149: break;
  2353  02CE  0008               	return
  2354  02CF                     l2323:	
  2355                           ;functions.c: 151: case 7:
  2356                           
  2357                           
  2358                           ;functions.c: 152: if(Data[2] != 0)
  2359  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  2360  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  2361  02D1  083C               	movf	ReceivedPacketHandler@Data,w
  2362  02D2  3E02               	addlw	2
  2363  02D3  0084               	movwf	4
  2364  02D4  1383               	bcf	3,7	;select IRP bank0
  2365  02D5  0800               	movf	0,w
  2366  02D6  1D03               	btfss	3,2
  2367  02D7  0008               	return
  2368                           
  2369                           ;functions.c: 154: DarknessCheck();
  2370                           
  2371                           ;functions.c: 153: break;
  2372  02D8  120A  158A  250E  120A  118A  	fcall	_DarknessCheck
  2373                           
  2374                           ;functions.c: 155: if(bDark)
  2375  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  2376  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  2377  02DF  086D               	movf	_bDark,w
  2378  02E0  1903               	btfsc	3,2
  2379  02E1  2AE9               	goto	l2333
  2380                           
  2381                           ;functions.c: 156: TransmittPacket(7, 1);
  2382  02E2  01B5               	clrf	TransmittPacket@value
  2383  02E3  0AB5               	incf	TransmittPacket@value,f
  2384  02E4  3007               	movlw	7
  2385  02E5  120A  118A  26F8   	fcall	_TransmittPacket
  2386  02E8  0008               	return
  2387  02E9                     l2333:	
  2388                           
  2389                           ;functions.c: 157: else
  2390                           ;functions.c: 158: TransmittPacket(7, 2);
  2391  02E9  3002               	movlw	2
  2392  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2393  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  2394  02EC  00BB               	movwf	??_ReceivedPacketHandler
  2395  02ED  083B               	movf	??_ReceivedPacketHandler,w
  2396  02EE  00B5               	movwf	TransmittPacket@value
  2397  02EF  3007               	movlw	7
  2398  02F0  120A  118A  26F8   	fcall	_TransmittPacket
  2399                           
  2400                           ;functions.c: 163: }
  2401                           
  2402                           ;functions.c: 162: break;
  2403                           
  2404                           ;functions.c: 161: default:
  2405                           
  2406                           ;functions.c: 159: break;
  2407  02F3  0008               	return
  2408  02F4                     l2337:	
  2409  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  2410  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  2411  02F6  0A3C               	incf	ReceivedPacketHandler@Data,w
  2412  02F7  0084               	movwf	4
  2413  02F8  1383               	bcf	3,7	;select IRP bank0
  2414  02F9  0800               	movf	0,w
  2415                           
  2416                           ; Switch size 1, requested type "space"
  2417                           ; Number of cases is 7, Range of values is 1 to 7
  2418                           ; switch strategies available:
  2419                           ; Name         Instructions Cycles
  2420                           ; simple_byte           22    12 (average)
  2421                           ; direct_byte           32    11 (fixed)
  2422                           ; jumptable            263     9 (fixed)
  2423                           ;	Chosen strategy is simple_byte
  2424  02FA  3A01               	xorlw	1	; case 1
  2425  02FB  1903               	skipnz
  2426  02FC  2A12               	goto	l2273
  2427  02FD  3A03               	xorlw	3	; case 2
  2428  02FE  1903               	skipnz
  2429  02FF  2A24               	goto	l2275
  2430  0300  3A01               	xorlw	1	; case 3
  2431  0301  1903               	skipnz
  2432  0302  2A69               	goto	l2295
  2433  0303  3A07               	xorlw	7	; case 4
  2434  0304  1903               	skipnz
  2435  0305  2A82               	goto	l2301
  2436  0306  3A01               	xorlw	1	; case 5
  2437  0307  1903               	skipnz
  2438  0308  2A9B               	goto	l2307
  2439  0309  3A03               	xorlw	3	; case 6
  2440  030A  1903               	skipnz
  2441  030B  2AB4               	goto	l2313
  2442  030C  3A01               	xorlw	1	; case 7
  2443  030D  1903               	skipnz
  2444  030E  2ACF               	goto	l2323
  2445  030F  2B10               	goto	l283
  2446  0310                     l283:	
  2447  0310  0008               	return
  2448  0311                     __end_of_ReceivedPacketHandler:	
  2449                           
  2450                           	psect	text5
  2451  0BD7                     __ptext5:	
  2452 ;; *************** function _OperationMode *****************
  2453 ;; Defined at:
  2454 ;;		line 919 in file "functions.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;		None
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  bracketStatu    1    1[BANK0 ] unsigned char 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  1    wreg      unsigned char 
  2461 ;; Registers used:
  2462 ;;		wreg, status,2
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2468 ;;      Params:         0       0       0       0       0
  2469 ;;      Locals:         0       1       0       0       0
  2470 ;;      Temps:          0       1       0       0       0
  2471 ;;      Totals:         0       2       0       0       0
  2472 ;;Total ram usage:        2 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    2
  2475 ;; This function calls:
  2476 ;;		Nothing
  2477 ;; This function is called by:
  2478 ;;		_main
  2479 ;;		_ReceivedPacketHandler
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function _OperationMode
  2485  0BD7                     _OperationMode:	
  2486                           
  2487                           ;functions.c: 921: unsigned char bracketStatus;
  2488                           ;functions.c: 922: bracketStatus = ((~PORTB) & 0b00000111) ;
  2489                           
  2490                           ;incstack = 0
  2491                           ; Regs used in _OperationMode: [wreg+status,2]
  2492  0BD7  1283               	bcf	3,5	;RP0=0, select bank0
  2493  0BD8  1303               	bcf	3,6	;RP1=0, select bank0
  2494  0BD9  0906               	comf	6,w	;volatile
  2495  0BDA  3907               	andlw	7
  2496  0BDB  00A0               	movwf	??_OperationMode
  2497  0BDC  0820               	movf	??_OperationMode,w
  2498  0BDD  00A1               	movwf	OperationMode@bracketStatus
  2499                           
  2500                           ;functions.c: 924: return 6;
  2501  0BDE  3006               	movlw	6
  2502  0BDF  0008               	return
  2503  0BE0                     __end_of_OperationMode:	
  2504                           
  2505                           	psect	text6
  2506  0C07                     __ptext6:	
  2507 ;; *************** function _ReadFIFO *****************
  2508 ;; Defined at:
  2509 ;;		line 735 in file "functions.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;		None
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  value           1    4[BANK0 ] unsigned char 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      unsigned char 
  2516 ;; Registers used:
  2517 ;;		wreg, status,2, status,0, pclath, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2523 ;;      Params:         0       0       0       0       0
  2524 ;;      Locals:         0       1       0       0       0
  2525 ;;      Temps:          0       1       0       0       0
  2526 ;;      Totals:         0       2       0       0       0
  2527 ;;Total ram usage:        2 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    4
  2530 ;; This function calls:
  2531 ;;		_ReadSPI
  2532 ;; This function is called by:
  2533 ;;		_TransiverReadFIFO
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           
  2538                           ;psect for function _ReadFIFO
  2539  0C07                     _ReadFIFO:	
  2540                           
  2541                           ;functions.c: 737: BYTE value;
  2542                           ;functions.c: 738: RA5 = 0;
  2543                           
  2544                           ;incstack = 0
  2545                           ; Regs used in _ReadFIFO: [wreg+status,2+status,0+pclath+cstack]
  2546  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0C09  1285               	bcf	5,5	;volatile
  2549                           
  2550                           ;functions.c: 739: value = ReadSPI();
  2551  0C0A  120A  158A  23BE   	fcall	_ReadSPI
  2552  0C0D  1283               	bcf	3,5	;RP0=0, select bank0
  2553  0C0E  1303               	bcf	3,6	;RP1=0, select bank0
  2554  0C0F  00A3               	movwf	??_ReadFIFO
  2555  0C10  0823               	movf	??_ReadFIFO,w
  2556  0C11  00A4               	movwf	ReadFIFO@value
  2557                           
  2558                           ;functions.c: 740: RA5 = 1;
  2559  0C12  1685               	bsf	5,5	;volatile
  2560                           
  2561                           ;functions.c: 741: return value;
  2562  0C13  0824               	movf	ReadFIFO@value,w
  2563  0C14  0008               	return
  2564  0C15                     __end_of_ReadFIFO:	
  2565                           
  2566                           	psect	text7
  2567  054A                     __ptext7:	
  2568 ;; *************** function _TransiverInit *****************
  2569 ;; Defined at:
  2570 ;;		line 500 in file "functions.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2584 ;;      Params:         0       0       0       0       0
  2585 ;;      Locals:         0       0       0       0       0
  2586 ;;      Temps:          0       1       0       0       0
  2587 ;;      Totals:         0       1       0       0       0
  2588 ;;Total ram usage:        1 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; Hardware stack levels required when called:    7
  2591 ;; This function calls:
  2592 ;;		_Blink
  2593 ;;		_FindChannel
  2594 ;;		_RegisterRead
  2595 ;;		_RegisterSet
  2596 ;;		_SetRFMode
  2597 ;; This function is called by:
  2598 ;;		_main
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           
  2603                           ;psect for function _TransiverInit
  2604  054A                     _TransiverInit:	
  2605                           
  2606                           ;functions.c: 503: RegisterSet(0x00, 0x30);
  2607                           
  2608                           ;incstack = 0
  2609                           ; Regs used in _TransiverInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2610  054A  3030               	movlw	48
  2611  054B  1283               	bcf	3,5	;RP0=0, select bank0
  2612  054C  1303               	bcf	3,6	;RP1=0, select bank0
  2613  054D  00B5               	movwf	??_TransiverInit
  2614  054E  0835               	movf	??_TransiverInit,w
  2615  054F  00A7               	movwf	RegisterSet@value
  2616  0550  3000               	movlw	0
  2617  0551  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2618                           
  2619                           ;functions.c: 504: RegisterSet(0x01,(0xA8));
  2620  0556  30A8               	movlw	168
  2621  0557  1283               	bcf	3,5	;RP0=0, select bank0
  2622  0558  1303               	bcf	3,6	;RP1=0, select bank0
  2623  0559  00B5               	movwf	??_TransiverInit
  2624  055A  0835               	movf	??_TransiverInit,w
  2625  055B  00A7               	movwf	RegisterSet@value
  2626  055C  3001               	movlw	1
  2627  055D  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2628                           
  2629                           ;functions.c: 505: RegisterSet(0x02, 0x09);
  2630  0562  3009               	movlw	9
  2631  0563  1283               	bcf	3,5	;RP0=0, select bank0
  2632  0564  1303               	bcf	3,6	;RP1=0, select bank0
  2633  0565  00B5               	movwf	??_TransiverInit
  2634  0566  0835               	movf	??_TransiverInit,w
  2635  0567  00A7               	movwf	RegisterSet@value
  2636  0568  3002               	movlw	2
  2637  0569  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2638                           
  2639                           ;functions.c: 506: RegisterSet(0x03, 0x07);
  2640  056E  3007               	movlw	7
  2641  056F  1283               	bcf	3,5	;RP0=0, select bank0
  2642  0570  1303               	bcf	3,6	;RP1=0, select bank0
  2643  0571  00B5               	movwf	??_TransiverInit
  2644  0572  0835               	movf	??_TransiverInit,w
  2645  0573  00A7               	movwf	RegisterSet@value
  2646  0574  3003               	movlw	3
  2647  0575  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2648                           
  2649                           ;functions.c: 507: RegisterSet(0x05,(0x0A));
  2650  057A  300A               	movlw	10
  2651  057B  1283               	bcf	3,5	;RP0=0, select bank0
  2652  057C  1303               	bcf	3,6	;RP1=0, select bank0
  2653  057D  00B5               	movwf	??_TransiverInit
  2654  057E  0835               	movf	??_TransiverInit,w
  2655  057F  00A7               	movwf	RegisterSet@value
  2656  0580  3005               	movlw	5
  2657  0581  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2658                           
  2659                           ;functions.c: 508: RegisterSet(0x0D,(0x00|0xB0|0x09));
  2660  0586  30B9               	movlw	185
  2661  0587  1283               	bcf	3,5	;RP0=0, select bank0
  2662  0588  1303               	bcf	3,6	;RP1=0, select bank0
  2663  0589  00B5               	movwf	??_TransiverInit
  2664  058A  0835               	movf	??_TransiverInit,w
  2665  058B  00A7               	movwf	RegisterSet@value
  2666  058C  300D               	movlw	13
  2667  058D  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2668                           
  2669                           ;functions.c: 509: RegisterSet(0x0E,(0x01|0x10|0x01));
  2670  0592  3011               	movlw	17
  2671  0593  1283               	bcf	3,5	;RP0=0, select bank0
  2672  0594  1303               	bcf	3,6	;RP1=0, select bank0
  2673  0595  00B5               	movwf	??_TransiverInit
  2674  0596  0835               	movf	??_TransiverInit,w
  2675  0597  00A7               	movwf	RegisterSet@value
  2676  0598  300E               	movlw	14
  2677  0599  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2678                           
  2679                           ;functions.c: 510: RegisterSet(0x10, 0xA3);
  2680  059E  30A3               	movlw	163
  2681  059F  1283               	bcf	3,5	;RP0=0, select bank0
  2682  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  2683  05A1  00B5               	movwf	??_TransiverInit
  2684  05A2  0835               	movf	??_TransiverInit,w
  2685  05A3  00A7               	movwf	RegisterSet@value
  2686  05A4  3010               	movlw	16
  2687  05A5  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2688                           
  2689                           ;functions.c: 511: RegisterSet(0x12,(0x18|0x20|0x06));
  2690  05AA  303E               	movlw	62
  2691  05AB  1283               	bcf	3,5	;RP0=0, select bank0
  2692  05AC  1303               	bcf	3,6	;RP1=0, select bank0
  2693  05AD  00B5               	movwf	??_TransiverInit
  2694  05AE  0835               	movf	??_TransiverInit,w
  2695  05AF  00A7               	movwf	RegisterSet@value
  2696  05B0  3012               	movlw	18
  2697  05B1  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2698                           
  2699                           ;functions.c: 512: RegisterSet(0x16,('S'));
  2700  05B6  3053               	movlw	83
  2701  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  2702  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  2703  05B9  00B5               	movwf	??_TransiverInit
  2704  05BA  0835               	movf	??_TransiverInit,w
  2705  05BB  00A7               	movwf	RegisterSet@value
  2706  05BC  3016               	movlw	22
  2707  05BD  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2708                           
  2709                           ;functions.c: 513: RegisterSet(0x17,('Y'));
  2710  05C2  3059               	movlw	89
  2711  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  2712  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  2713  05C5  00B5               	movwf	??_TransiverInit
  2714  05C6  0835               	movf	??_TransiverInit,w
  2715  05C7  00A7               	movwf	RegisterSet@value
  2716  05C8  3017               	movlw	23
  2717  05C9  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2718                           
  2719                           ;functions.c: 514: RegisterSet(0x18,('N'));
  2720  05CE  304E               	movlw	78
  2721  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  2722  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  2723  05D1  00B5               	movwf	??_TransiverInit
  2724  05D2  0835               	movf	??_TransiverInit,w
  2725  05D3  00A7               	movwf	RegisterSet@value
  2726  05D4  3018               	movlw	24
  2727  05D5  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2728                           
  2729                           ;functions.c: 515: RegisterSet(0x19,('C'));
  2730  05DA  3043               	movlw	67
  2731  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  2732  05DC  1303               	bcf	3,6	;RP1=0, select bank0
  2733  05DD  00B5               	movwf	??_TransiverInit
  2734  05DE  0835               	movf	??_TransiverInit,w
  2735  05DF  00A7               	movwf	RegisterSet@value
  2736  05E0  3019               	movlw	25
  2737  05E1  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2738                           
  2739                           ;functions.c: 516: RegisterSet(0x1A, 0x72);
  2740  05E6  3072               	movlw	114
  2741  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  2742  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  2743  05E9  00B5               	movwf	??_TransiverInit
  2744  05EA  0835               	movf	??_TransiverInit,w
  2745  05EB  00A7               	movwf	RegisterSet@value
  2746  05EC  301A               	movlw	26
  2747  05ED  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2748                           
  2749                           ;functions.c: 517: RegisterSet(0x1B, 0x3C);
  2750  05F2  303C               	movlw	60
  2751  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  2752  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  2753  05F5  00B5               	movwf	??_TransiverInit
  2754  05F6  0835               	movf	??_TransiverInit,w
  2755  05F7  00A7               	movwf	RegisterSet@value
  2756  05F8  301B               	movlw	27
  2757  05F9  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2758                           
  2759                           ;functions.c: 518: RegisterSet(0x1F, 0x80);
  2760  05FE  3080               	movlw	128
  2761  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  2762  0600  1303               	bcf	3,6	;RP1=0, select bank0
  2763  0601  00B5               	movwf	??_TransiverInit
  2764  0602  0835               	movf	??_TransiverInit,w
  2765  0603  00A7               	movwf	RegisterSet@value
  2766  0604  301F               	movlw	31
  2767  0605  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2768                           
  2769                           ;functions.c: 519: RegisterSet(0x00, (RegisterRead(0x00)|0x01));
  2770  060A  3000               	movlw	0
  2771  060B  120A  158A  2463  120A  118A  	fcall	_RegisterRead
  2772  0610  3801               	iorlw	1
  2773  0611  1283               	bcf	3,5	;RP0=0, select bank0
  2774  0612  1303               	bcf	3,6	;RP1=0, select bank0
  2775  0613  00B5               	movwf	??_TransiverInit
  2776  0614  0835               	movf	??_TransiverInit,w
  2777  0615  00A7               	movwf	RegisterSet@value
  2778  0616  3000               	movlw	0
  2779  0617  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  2780                           
  2781                           ;functions.c: 521: if(FindChannel() == 1)
  2782  061C  120A  118A  244A  120A  118A  	fcall	_FindChannel
  2783  0621  3A01               	xorlw	1
  2784  0622  1D03               	skipz
  2785  0623  2E2F               	goto	l2485
  2786                           
  2787                           ;functions.c: 522: Blink(1);
  2788  0624  3001               	movlw	1
  2789  0625  1283               	bcf	3,5	;RP0=0, select bank0
  2790  0626  1303               	bcf	3,6	;RP1=0, select bank0
  2791  0627  00A6               	movwf	Blink@n
  2792  0628  3000               	movlw	0
  2793  0629  00A7               	movwf	Blink@n+1
  2794  062A  120A  158A  2567  120A  118A  	fcall	_Blink
  2795  062F                     l2485:	
  2796                           
  2797                           ;functions.c: 523: SetRFMode(0x00);
  2798  062F  3000               	movlw	0
  2799  0630  120A  158A  2701   	fcall	_SetRFMode
  2800  0633  0008               	return
  2801  0634                     __end_of_TransiverInit:	
  2802                           
  2803                           	psect	text8
  2804  0D67                     __ptext8:	
  2805 ;; *************** function _Blink *****************
  2806 ;; Defined at:
  2807 ;;		line 648 in file "functions.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  n               2    6[BANK0 ] int 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  i               2    9[BANK0 ] int 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, status,0, pclath, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2821 ;;      Params:         0       2       0       0       0
  2822 ;;      Locals:         0       2       0       0       0
  2823 ;;      Temps:          0       1       0       0       0
  2824 ;;      Totals:         0       5       0       0       0
  2825 ;;Total ram usage:        5 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    3
  2828 ;; This function calls:
  2829 ;;		_DelayDs
  2830 ;; This function is called by:
  2831 ;;		_TransiverInit
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           
  2836                           ;psect for function _Blink
  2837  0D67                     _Blink:	
  2838                           
  2839                           ;functions.c: 650: for(int i = 1;i<=n;i++)
  2840                           
  2841                           ;incstack = 0
  2842                           ; Regs used in _Blink: [wreg+status,2+status,0+pclath+cstack]
  2843  0D67  3001               	movlw	1
  2844  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  2845  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  2846  0D6A  00A9               	movwf	Blink@i
  2847  0D6B  3000               	movlw	0
  2848  0D6C  00AA               	movwf	Blink@i+1
  2849  0D6D                     l2373:	
  2850  0D6D  0827               	movf	Blink@n+1,w
  2851  0D6E  3A80               	xorlw	128
  2852  0D6F  00A8               	movwf	??_Blink
  2853  0D70  082A               	movf	Blink@i+1,w
  2854  0D71  3A80               	xorlw	128
  2855  0D72  0228               	subwf	??_Blink,w
  2856  0D73  1D03               	skipz
  2857  0D74  2D77               	goto	u1355
  2858  0D75  0829               	movf	Blink@i,w
  2859  0D76  0226               	subwf	Blink@n,w
  2860  0D77                     u1355:	
  2861  0D77  1C03               	btfss	3,0
  2862  0D78  0008               	return
  2863                           
  2864                           ;functions.c: 651: {
  2865                           ;functions.c: 652: RC1 = 1;
  2866  0D79  1283               	bcf	3,5	;RP0=0, select bank0
  2867  0D7A  1303               	bcf	3,6	;RP1=0, select bank0
  2868  0D7B  1487               	bsf	7,1	;volatile
  2869                           
  2870                           ;functions.c: 653: DelayDs(2);
  2871  0D7C  3002               	movlw	2
  2872  0D7D  00A0               	movwf	DelayDs@cnt
  2873  0D7E  3000               	movlw	0
  2874  0D7F  00A1               	movwf	DelayDs@cnt+1
  2875  0D80  120A  158A  249E  120A  158A  	fcall	_DelayDs
  2876                           
  2877                           ;functions.c: 654: RC1 = 0;
  2878  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  2879  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  2880  0D87  1087               	bcf	7,1	;volatile
  2881                           
  2882                           ;functions.c: 655: DelayDs(6);
  2883  0D88  3006               	movlw	6
  2884  0D89  00A0               	movwf	DelayDs@cnt
  2885  0D8A  3000               	movlw	0
  2886  0D8B  00A1               	movwf	DelayDs@cnt+1
  2887  0D8C  120A  158A  249E  120A  158A  	fcall	_DelayDs
  2888  0D91  3001               	movlw	1
  2889  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  2890  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  2891  0D94  07A9               	addwf	Blink@i,f
  2892  0D95  1803               	skipnc
  2893  0D96  0AAA               	incf	Blink@i+1,f
  2894  0D97  3000               	movlw	0
  2895  0D98  07AA               	addwf	Blink@i+1,f
  2896  0D99  2D6D               	goto	l2373
  2897  0D9A                     __end_of_Blink:	
  2898                           
  2899                           	psect	text9
  2900  0311                     __ptext9:	
  2901 ;; *************** function _ReadClock *****************
  2902 ;; Defined at:
  2903 ;;		line 48 in file "MCP79510.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;  seconds         1    wreg     PTR unsigned char 
  2906 ;;		 -> main@seconds(1), 
  2907 ;;  minutes         1    4[BANK0 ] PTR unsigned char 
  2908 ;;		 -> main@minutes(1), 
  2909 ;;  hour            1    5[BANK0 ] PTR unsigned char 
  2910 ;;		 -> main@hour(1), 
  2911 ;;  date            1    6[BANK0 ] PTR unsigned char 
  2912 ;;		 -> main@date(1), 
  2913 ;;  month           1    7[BANK0 ] PTR unsigned char 
  2914 ;;		 -> main@month(1), 
  2915 ;;  year            1    8[BANK0 ] PTR unsigned char 
  2916 ;;		 -> main@year(1), 
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  seconds         1   17[BANK0 ] PTR unsigned char 
  2919 ;;		 -> main@seconds(1), 
  2920 ;;  date1           1   23[BANK0 ] unsigned char 
  2921 ;;  year1           1   22[BANK0 ] unsigned char 
  2922 ;;  month1          1   21[BANK0 ] unsigned char 
  2923 ;;  hour1           1   20[BANK0 ] unsigned char 
  2924 ;;  min1            1   19[BANK0 ] unsigned char 
  2925 ;;  sec1            1   18[BANK0 ] unsigned char 
  2926 ;;  year10          1   16[BANK0 ] unsigned char 
  2927 ;;  month10         1   15[BANK0 ] unsigned char 
  2928 ;;  date10          1   14[BANK0 ] unsigned char 
  2929 ;;  hour10          1   13[BANK0 ] unsigned char 
  2930 ;;  min10           1   12[BANK0 ] unsigned char 
  2931 ;;  sec10           1   11[BANK0 ] unsigned char 
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  1    wreg      void 
  2934 ;; Registers used:
  2935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2941 ;;      Params:         0       5       0       0       0
  2942 ;;      Locals:         0      13       0       0       0
  2943 ;;      Temps:          0       2       0       0       0
  2944 ;;      Totals:         0      20       0       0       0
  2945 ;;Total ram usage:       20 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    4
  2948 ;; This function calls:
  2949 ;;		_ReadSPI
  2950 ;;		_WriteSPI
  2951 ;;		___bmul
  2952 ;; This function is called by:
  2953 ;;		_main
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           
  2958                           ;psect for function _ReadClock
  2959  0311                     _ReadClock:	
  2960                           
  2961                           ;incstack = 0
  2962                           ; Regs used in _ReadClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2963                           ;ReadClock@seconds stored from wreg
  2964  0311  1283               	bcf	3,5	;RP0=0, select bank0
  2965  0312  1303               	bcf	3,6	;RP1=0, select bank0
  2966  0313  00B1               	movwf	ReadClock@seconds
  2967                           
  2968                           ;MCP79510.c: 50: unsigned char sec10, min10, hour10, date10, month10, year10, sec1, min1
      +                          , hour1, date1, month1, year1;
  2969                           ;MCP79510.c: 52: RD4 = 0;
  2970  0314  1208               	bcf	8,4	;volatile
  2971                           
  2972                           ;MCP79510.c: 54: WriteSPI(0x13);
  2973  0315  3013               	movlw	19
  2974  0316  120A  158A  23F9  120A  118A  	fcall	_WriteSPI
  2975                           
  2976                           ;MCP79510.c: 55: WriteSPI(0x01);
  2977  031B  3001               	movlw	1
  2978  031C  120A  158A  23F9  120A  118A  	fcall	_WriteSPI
  2979                           
  2980                           ;MCP79510.c: 57: sec1 = ReadSPI() & 0x7F;
  2981  0321  120A  158A  23BE  120A  118A  	fcall	_ReadSPI
  2982  0326  397F               	andlw	127
  2983  0327  1283               	bcf	3,5	;RP0=0, select bank0
  2984  0328  1303               	bcf	3,6	;RP1=0, select bank0
  2985  0329  00A9               	movwf	??_ReadClock
  2986  032A  0829               	movf	??_ReadClock,w
  2987  032B  00B2               	movwf	ReadClock@sec1
  2988                           
  2989                           ;MCP79510.c: 58: min1 = ReadSPI() & 0x7F;
  2990  032C  120A  158A  23BE  120A  118A  	fcall	_ReadSPI
  2991  0331  397F               	andlw	127
  2992  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2993  0333  1303               	bcf	3,6	;RP1=0, select bank0
  2994  0334  00A9               	movwf	??_ReadClock
  2995  0335  0829               	movf	??_ReadClock,w
  2996  0336  00B3               	movwf	ReadClock@min1
  2997                           
  2998                           ;MCP79510.c: 59: hour1 = ReadSPI() & 0x3F;
  2999  0337  120A  158A  23BE  120A  118A  	fcall	_ReadSPI
  3000  033C  393F               	andlw	63
  3001  033D  1283               	bcf	3,5	;RP0=0, select bank0
  3002  033E  1303               	bcf	3,6	;RP1=0, select bank0
  3003  033F  00A9               	movwf	??_ReadClock
  3004  0340  0829               	movf	??_ReadClock,w
  3005  0341  00B4               	movwf	ReadClock@hour1
  3006                           
  3007                           ;MCP79510.c: 60: date1 = ReadSPI();
  3008  0342  120A  158A  23BE  120A  118A  	fcall	_ReadSPI
  3009  0347  1283               	bcf	3,5	;RP0=0, select bank0
  3010  0348  1303               	bcf	3,6	;RP1=0, select bank0
  3011  0349  00A9               	movwf	??_ReadClock
  3012  034A  0829               	movf	??_ReadClock,w
  3013  034B  00B7               	movwf	ReadClock@date1
  3014                           
  3015                           ;MCP79510.c: 61: date1 = ReadSPI() & 0x3F;
  3016  034C  120A  158A  23BE  120A  118A  	fcall	_ReadSPI
  3017  0351  393F               	andlw	63
  3018  0352  1283               	bcf	3,5	;RP0=0, select bank0
  3019  0353  1303               	bcf	3,6	;RP1=0, select bank0
  3020  0354  00A9               	movwf	??_ReadClock
  3021  0355  0829               	movf	??_ReadClock,w
  3022  0356  00B7               	movwf	ReadClock@date1
  3023                           
  3024                           ;MCP79510.c: 62: month1 = ReadSPI() & 0x1F;
  3025  0357  120A  158A  23BE  120A  118A  	fcall	_ReadSPI
  3026  035C  391F               	andlw	31
  3027  035D  1283               	bcf	3,5	;RP0=0, select bank0
  3028  035E  1303               	bcf	3,6	;RP1=0, select bank0
  3029  035F  00A9               	movwf	??_ReadClock
  3030  0360  0829               	movf	??_ReadClock,w
  3031  0361  00B5               	movwf	ReadClock@month1
  3032                           
  3033                           ;MCP79510.c: 63: year1 = ReadSPI();
  3034  0362  120A  158A  23BE  120A  118A  	fcall	_ReadSPI
  3035  0367  1283               	bcf	3,5	;RP0=0, select bank0
  3036  0368  1303               	bcf	3,6	;RP1=0, select bank0
  3037  0369  00A9               	movwf	??_ReadClock
  3038  036A  0829               	movf	??_ReadClock,w
  3039  036B  00B6               	movwf	ReadClock@year1
  3040                           
  3041                           ;MCP79510.c: 65: RD4 = 1;
  3042  036C  1608               	bsf	8,4	;volatile
  3043                           
  3044                           ;MCP79510.c: 68: sec10 = (sec1 & 0x70) >> 4;
  3045  036D  0832               	movf	ReadClock@sec1,w
  3046  036E  00A9               	movwf	??_ReadClock
  3047  036F  3004               	movlw	4
  3048  0370                     u1455:	
  3049  0370  1003               	clrc
  3050  0371  0CA9               	rrf	??_ReadClock,f
  3051  0372  3EFF               	addlw	-1
  3052  0373  1D03               	skipz
  3053  0374  2B70               	goto	u1455
  3054  0375  0829               	movf	??_ReadClock,w
  3055  0376  3907               	andlw	7
  3056  0377  00AA               	movwf	??_ReadClock+1
  3057  0378  082A               	movf	??_ReadClock+1,w
  3058  0379  00AB               	movwf	ReadClock@sec10
  3059                           
  3060                           ;MCP79510.c: 69: sec1 = sec1 & 0x0F;
  3061  037A  0832               	movf	ReadClock@sec1,w
  3062  037B  390F               	andlw	15
  3063  037C  00A9               	movwf	??_ReadClock
  3064  037D  0829               	movf	??_ReadClock,w
  3065  037E  00B2               	movwf	ReadClock@sec1
  3066                           
  3067                           ;MCP79510.c: 70: *seconds = sec1 + sec10 * 10;
  3068  037F  300A               	movlw	10
  3069  0380  00A9               	movwf	??_ReadClock
  3070  0381  0829               	movf	??_ReadClock,w
  3071  0382  00A0               	movwf	___bmul@multiplicand
  3072  0383  082B               	movf	ReadClock@sec10,w
  3073  0384  120A  118A  27E9  120A  118A  	fcall	___bmul
  3074  0389  1283               	bcf	3,5	;RP0=0, select bank0
  3075  038A  1303               	bcf	3,6	;RP1=0, select bank0
  3076  038B  0732               	addwf	ReadClock@sec1,w
  3077  038C  00AA               	movwf	??_ReadClock+1
  3078  038D  0831               	movf	ReadClock@seconds,w
  3079  038E  0084               	movwf	4
  3080  038F  082A               	movf	??_ReadClock+1,w
  3081  0390  1383               	bcf	3,7	;select IRP bank0
  3082  0391  0080               	movwf	0
  3083                           
  3084                           ;MCP79510.c: 72: min10 = (min1 & 0x70) >> 4;
  3085  0392  0833               	movf	ReadClock@min1,w
  3086  0393  00A9               	movwf	??_ReadClock
  3087  0394  3004               	movlw	4
  3088  0395                     u1465:	
  3089  0395  1003               	clrc
  3090  0396  0CA9               	rrf	??_ReadClock,f
  3091  0397  3EFF               	addlw	-1
  3092  0398  1D03               	skipz
  3093  0399  2B95               	goto	u1465
  3094  039A  0829               	movf	??_ReadClock,w
  3095  039B  3907               	andlw	7
  3096  039C  00AA               	movwf	??_ReadClock+1
  3097  039D  082A               	movf	??_ReadClock+1,w
  3098  039E  00AC               	movwf	ReadClock@min10
  3099                           
  3100                           ;MCP79510.c: 73: min1 = min1 & 0x0F;
  3101  039F  0833               	movf	ReadClock@min1,w
  3102  03A0  390F               	andlw	15
  3103  03A1  00A9               	movwf	??_ReadClock
  3104  03A2  0829               	movf	??_ReadClock,w
  3105  03A3  00B3               	movwf	ReadClock@min1
  3106                           
  3107                           ;MCP79510.c: 74: *minutes = min1 + min10 * 10;
  3108  03A4  300A               	movlw	10
  3109  03A5  00A9               	movwf	??_ReadClock
  3110  03A6  0829               	movf	??_ReadClock,w
  3111  03A7  00A0               	movwf	___bmul@multiplicand
  3112  03A8  082C               	movf	ReadClock@min10,w
  3113  03A9  120A  118A  27E9  120A  118A  	fcall	___bmul
  3114  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  3115  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  3116  03B0  0733               	addwf	ReadClock@min1,w
  3117  03B1  00AA               	movwf	??_ReadClock+1
  3118  03B2  0824               	movf	ReadClock@minutes,w
  3119  03B3  0084               	movwf	4
  3120  03B4  082A               	movf	??_ReadClock+1,w
  3121  03B5  1383               	bcf	3,7	;select IRP bank0
  3122  03B6  0080               	movwf	0
  3123                           
  3124                           ;MCP79510.c: 76: hour10 = (hour1 & 0x30) >> 4;
  3125  03B7  0834               	movf	ReadClock@hour1,w
  3126  03B8  00A9               	movwf	??_ReadClock
  3127  03B9  3004               	movlw	4
  3128  03BA                     u1475:	
  3129  03BA  1003               	clrc
  3130  03BB  0CA9               	rrf	??_ReadClock,f
  3131  03BC  3EFF               	addlw	-1
  3132  03BD  1D03               	skipz
  3133  03BE  2BBA               	goto	u1475
  3134  03BF  0829               	movf	??_ReadClock,w
  3135  03C0  3903               	andlw	3
  3136  03C1  00AA               	movwf	??_ReadClock+1
  3137  03C2  082A               	movf	??_ReadClock+1,w
  3138  03C3  00AD               	movwf	ReadClock@hour10
  3139                           
  3140                           ;MCP79510.c: 77: hour1 = hour1 & 0x0F;
  3141  03C4  0834               	movf	ReadClock@hour1,w
  3142  03C5  390F               	andlw	15
  3143  03C6  00A9               	movwf	??_ReadClock
  3144  03C7  0829               	movf	??_ReadClock,w
  3145  03C8  00B4               	movwf	ReadClock@hour1
  3146                           
  3147                           ;MCP79510.c: 78: *hour = hour1 + hour10 * 10;
  3148  03C9  300A               	movlw	10
  3149  03CA  00A9               	movwf	??_ReadClock
  3150  03CB  0829               	movf	??_ReadClock,w
  3151  03CC  00A0               	movwf	___bmul@multiplicand
  3152  03CD  082D               	movf	ReadClock@hour10,w
  3153  03CE  120A  118A  27E9  120A  118A  	fcall	___bmul
  3154  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  3155  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  3156  03D5  0734               	addwf	ReadClock@hour1,w
  3157  03D6  00AA               	movwf	??_ReadClock+1
  3158  03D7  0825               	movf	ReadClock@hour,w
  3159  03D8  0084               	movwf	4
  3160  03D9  082A               	movf	??_ReadClock+1,w
  3161  03DA  1383               	bcf	3,7	;select IRP bank0
  3162  03DB  0080               	movwf	0
  3163                           
  3164                           ;MCP79510.c: 80: date10 = (date1 & 0x30) >> 4;
  3165  03DC  0837               	movf	ReadClock@date1,w
  3166  03DD  00A9               	movwf	??_ReadClock
  3167  03DE  3004               	movlw	4
  3168  03DF                     u1485:	
  3169  03DF  1003               	clrc
  3170  03E0  0CA9               	rrf	??_ReadClock,f
  3171  03E1  3EFF               	addlw	-1
  3172  03E2  1D03               	skipz
  3173  03E3  2BDF               	goto	u1485
  3174  03E4  0829               	movf	??_ReadClock,w
  3175  03E5  3903               	andlw	3
  3176  03E6  00AA               	movwf	??_ReadClock+1
  3177  03E7  082A               	movf	??_ReadClock+1,w
  3178  03E8  00AE               	movwf	ReadClock@date10
  3179                           
  3180                           ;MCP79510.c: 81: date1 = date1 & 0x0F;
  3181  03E9  0837               	movf	ReadClock@date1,w
  3182  03EA  390F               	andlw	15
  3183  03EB  00A9               	movwf	??_ReadClock
  3184  03EC  0829               	movf	??_ReadClock,w
  3185  03ED  00B7               	movwf	ReadClock@date1
  3186                           
  3187                           ;MCP79510.c: 82: *date = date1 + date10 * 10;
  3188  03EE  300A               	movlw	10
  3189  03EF  00A9               	movwf	??_ReadClock
  3190  03F0  0829               	movf	??_ReadClock,w
  3191  03F1  00A0               	movwf	___bmul@multiplicand
  3192  03F2  082E               	movf	ReadClock@date10,w
  3193  03F3  120A  118A  27E9  120A  118A  	fcall	___bmul
  3194  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  3195  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  3196  03FA  0737               	addwf	ReadClock@date1,w
  3197  03FB  00AA               	movwf	??_ReadClock+1
  3198  03FC  0826               	movf	ReadClock@date,w
  3199  03FD  0084               	movwf	4
  3200  03FE  082A               	movf	??_ReadClock+1,w
  3201  03FF  1383               	bcf	3,7	;select IRP bank0
  3202  0400  0080               	movwf	0
  3203                           
  3204                           ;MCP79510.c: 84: month10 = (month1 & 0x10) >> 4;
  3205  0401  0835               	movf	ReadClock@month1,w
  3206  0402  00A9               	movwf	??_ReadClock
  3207  0403  3004               	movlw	4
  3208  0404                     u1495:	
  3209  0404  1003               	clrc
  3210  0405  0CA9               	rrf	??_ReadClock,f
  3211  0406  3EFF               	addlw	-1
  3212  0407  1D03               	skipz
  3213  0408  2C04               	goto	u1495
  3214  0409  0829               	movf	??_ReadClock,w
  3215  040A  3901               	andlw	1
  3216  040B  00AA               	movwf	??_ReadClock+1
  3217  040C  082A               	movf	??_ReadClock+1,w
  3218  040D  00AF               	movwf	ReadClock@month10
  3219                           
  3220                           ;MCP79510.c: 85: month1 = month1 & 0x0F;
  3221  040E  0835               	movf	ReadClock@month1,w
  3222  040F  390F               	andlw	15
  3223  0410  00A9               	movwf	??_ReadClock
  3224  0411  0829               	movf	??_ReadClock,w
  3225  0412  00B5               	movwf	ReadClock@month1
  3226                           
  3227                           ;MCP79510.c: 86: *month = month1 + month10 * 10;
  3228  0413  300A               	movlw	10
  3229  0414  00A9               	movwf	??_ReadClock
  3230  0415  0829               	movf	??_ReadClock,w
  3231  0416  00A0               	movwf	___bmul@multiplicand
  3232  0417  082F               	movf	ReadClock@month10,w
  3233  0418  120A  118A  27E9  120A  118A  	fcall	___bmul
  3234  041D  1283               	bcf	3,5	;RP0=0, select bank0
  3235  041E  1303               	bcf	3,6	;RP1=0, select bank0
  3236  041F  0735               	addwf	ReadClock@month1,w
  3237  0420  00AA               	movwf	??_ReadClock+1
  3238  0421  0827               	movf	ReadClock@month,w
  3239  0422  0084               	movwf	4
  3240  0423  082A               	movf	??_ReadClock+1,w
  3241  0424  1383               	bcf	3,7	;select IRP bank0
  3242  0425  0080               	movwf	0
  3243                           
  3244                           ;MCP79510.c: 88: year10 = (year1 & 0xF0) >> 4;
  3245  0426  0836               	movf	ReadClock@year1,w
  3246  0427  00A9               	movwf	??_ReadClock
  3247  0428  3004               	movlw	4
  3248  0429                     u1505:	
  3249  0429  1003               	clrc
  3250  042A  0CA9               	rrf	??_ReadClock,f
  3251  042B  3EFF               	addlw	-1
  3252  042C  1D03               	skipz
  3253  042D  2C29               	goto	u1505
  3254  042E  0829               	movf	??_ReadClock,w
  3255  042F  390F               	andlw	15
  3256  0430  00AA               	movwf	??_ReadClock+1
  3257  0431  082A               	movf	??_ReadClock+1,w
  3258  0432  00B0               	movwf	ReadClock@year10
  3259                           
  3260                           ;MCP79510.c: 89: year1 = year1 & 0x0F;
  3261  0433  0836               	movf	ReadClock@year1,w
  3262  0434  390F               	andlw	15
  3263  0435  00A9               	movwf	??_ReadClock
  3264  0436  0829               	movf	??_ReadClock,w
  3265  0437  00B6               	movwf	ReadClock@year1
  3266                           
  3267                           ;MCP79510.c: 90: *year = year1 + year10 * 10;
  3268  0438  300A               	movlw	10
  3269  0439  00A9               	movwf	??_ReadClock
  3270  043A  0829               	movf	??_ReadClock,w
  3271  043B  00A0               	movwf	___bmul@multiplicand
  3272  043C  0830               	movf	ReadClock@year10,w
  3273  043D  120A  118A  27E9   	fcall	___bmul
  3274  0440  1283               	bcf	3,5	;RP0=0, select bank0
  3275  0441  1303               	bcf	3,6	;RP1=0, select bank0
  3276  0442  0736               	addwf	ReadClock@year1,w
  3277  0443  00AA               	movwf	??_ReadClock+1
  3278  0444  0828               	movf	ReadClock@year,w
  3279  0445  0084               	movwf	4
  3280  0446  082A               	movf	??_ReadClock+1,w
  3281  0447  1383               	bcf	3,7	;select IRP bank0
  3282  0448  0080               	movwf	0
  3283  0449  0008               	return
  3284  044A                     __end_of_ReadClock:	
  3285                           
  3286                           	psect	text10
  3287  07E9                     __ptext10:	
  3288 ;; *************** function ___bmul *****************
  3289 ;; Defined at:
  3290 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;  multiplier      1    wreg     unsigned char 
  3293 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3296 ;;  product         1    2[BANK0 ] unsigned char 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      unsigned char 
  3299 ;; Registers used:
  3300 ;;		wreg, status,2, status,0
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3306 ;;      Params:         0       1       0       0       0
  3307 ;;      Locals:         0       2       0       0       0
  3308 ;;      Temps:          0       1       0       0       0
  3309 ;;      Totals:         0       4       0       0       0
  3310 ;;Total ram usage:        4 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    2
  3313 ;; This function calls:
  3314 ;;		Nothing
  3315 ;; This function is called by:
  3316 ;;		_ReadClock
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           
  3321                           ;psect for function ___bmul
  3322  07E9                     ___bmul:	
  3323                           
  3324                           ;incstack = 0
  3325                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3326                           ;___bmul@multiplier stored from wreg
  3327  07E9  1283               	bcf	3,5	;RP0=0, select bank0
  3328  07EA  1303               	bcf	3,6	;RP1=0, select bank0
  3329  07EB  00A3               	movwf	___bmul@multiplier
  3330  07EC  01A2               	clrf	___bmul@product
  3331  07ED                     l2377:	
  3332  07ED  1C23               	btfss	___bmul@multiplier,0
  3333  07EE  2FF3               	goto	l2381
  3334  07EF  0820               	movf	___bmul@multiplicand,w
  3335  07F0  00A1               	movwf	??___bmul
  3336  07F1  0821               	movf	??___bmul,w
  3337  07F2  07A2               	addwf	___bmul@product,f
  3338  07F3                     l2381:	
  3339  07F3  1003               	clrc
  3340  07F4  0DA0               	rlf	___bmul@multiplicand,f
  3341  07F5  1003               	clrc
  3342  07F6  0CA3               	rrf	___bmul@multiplier,f
  3343  07F7  0823               	movf	___bmul@multiplier,w
  3344  07F8  1D03               	btfss	3,2
  3345  07F9  2FED               	goto	l2377
  3346  07FA  0822               	movf	___bmul@product,w
  3347  07FB  0008               	return
  3348  07FC                     __end_of___bmul:	
  3349                           
  3350                           	psect	text11
  3351  0E38                     __ptext11:	
  3352 ;; *************** function _PICInit *****************
  3353 ;; Defined at:
  3354 ;;		line 388 in file "functions.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, status,0
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3368 ;;      Params:         0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0
  3371 ;;      Totals:         0       0       0       0       0
  3372 ;;Total ram usage:        0 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:    2
  3375 ;; This function calls:
  3376 ;;		Nothing
  3377 ;; This function is called by:
  3378 ;;		_main
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           
  3383                           ;psect for function _PICInit
  3384  0E38                     _PICInit:	
  3385                           
  3386                           ;functions.c: 392: OSCCONbits.IRCF2 = 1;
  3387                           
  3388                           ;incstack = 0
  3389                           ; Regs used in _PICInit: [wreg+status,2+status,0]
  3390  0E38  1683               	bsf	3,5	;RP0=1, select bank1
  3391  0E39  1303               	bcf	3,6	;RP1=0, select bank1
  3392  0E3A  170F               	bsf	15,6	;volatile
  3393                           
  3394                           ;functions.c: 393: OSCCONbits.IRCF1 = 1;
  3395  0E3B  168F               	bsf	15,5	;volatile
  3396                           
  3397                           ;functions.c: 394: OSCCONbits.IRCF0 = 0;
  3398  0E3C  120F               	bcf	15,4	;volatile
  3399                           
  3400                           ;functions.c: 395: OSCCONbits.SCS = 1;
  3401  0E3D  140F               	bsf	15,0	;volatile
  3402                           
  3403                           ;functions.c: 398: PORTA = 0x00;
  3404  0E3E  1283               	bcf	3,5	;RP0=0, select bank0
  3405  0E3F  1303               	bcf	3,6	;RP1=0, select bank0
  3406  0E40  0185               	clrf	5	;volatile
  3407                           
  3408                           ;functions.c: 399: PORTB = 0x00;
  3409  0E41  0186               	clrf	6	;volatile
  3410                           
  3411                           ;functions.c: 400: PORTC = 0x00;
  3412  0E42  0187               	clrf	7	;volatile
  3413                           
  3414                           ;functions.c: 401: PORTD = 0x00;
  3415  0E43  0188               	clrf	8	;volatile
  3416                           
  3417                           ;functions.c: 402: PORTE = 0x00;
  3418  0E44  0189               	clrf	9	;volatile
  3419                           
  3420                           ;functions.c: 404: TRISA = 0b00001011;
  3421  0E45  300B               	movlw	11
  3422  0E46  1683               	bsf	3,5	;RP0=1, select bank1
  3423  0E47  1303               	bcf	3,6	;RP1=0, select bank1
  3424  0E48  0085               	movwf	5	;volatile
  3425                           
  3426                           ;functions.c: 405: TRISB = 0b00111101;
  3427  0E49  303D               	movlw	61
  3428  0E4A  0086               	movwf	6	;volatile
  3429                           
  3430                           ;functions.c: 406: TRISC = 0b00010000;
  3431  0E4B  3010               	movlw	16
  3432  0E4C  0087               	movwf	7	;volatile
  3433                           
  3434                           ;functions.c: 407: TRISD = 0b00000111;
  3435  0E4D  3007               	movlw	7
  3436  0E4E  0088               	movwf	8	;volatile
  3437                           
  3438                           ;functions.c: 408: TRISE = 0b00000111;
  3439  0E4F  3007               	movlw	7
  3440  0E50  0089               	movwf	9	;volatile
  3441                           
  3442                           ;functions.c: 410: ANSEL = 0b00000000;
  3443  0E51  1683               	bsf	3,5	;RP0=1, select bank3
  3444  0E52  1703               	bsf	3,6	;RP1=1, select bank3
  3445  0E53  0188               	clrf	8	;volatile
  3446                           
  3447                           ;functions.c: 411: ANSELH = 0b00000000;
  3448  0E54  0189               	clrf	9	;volatile
  3449                           
  3450                           ;functions.c: 412: ANSELbits.ANS0 = 1;
  3451  0E55  1408               	bsf	8,0	;volatile
  3452                           
  3453                           ;functions.c: 413: ANSELbits.ANS3 = 1;
  3454  0E56  1588               	bsf	8,3	;volatile
  3455                           
  3456                           ;functions.c: 414: ANSELbits.ANS5 = 1;
  3457  0E57  1688               	bsf	8,5	;volatile
  3458                           
  3459                           ;functions.c: 415: ANSELbits.ANS6 = 1;
  3460  0E58  1708               	bsf	8,6	;volatile
  3461                           
  3462                           ;functions.c: 416: ANSELbits.ANS7 = 1;
  3463  0E59  1788               	bsf	8,7	;volatile
  3464                           
  3465                           ;functions.c: 417: ANSELHbits.ANS8 = 1;
  3466  0E5A  1409               	bsf	9,0	;volatile
  3467                           
  3468                           ;functions.c: 419: OPTION_REGbits.nRBPU = 0;
  3469  0E5B  1683               	bsf	3,5	;RP0=1, select bank1
  3470  0E5C  1303               	bcf	3,6	;RP1=0, select bank1
  3471  0E5D  1381               	bcf	1,7	;volatile
  3472                           
  3473                           ;functions.c: 420: WPUBbits.WPUB0 = 1;
  3474  0E5E  1415               	bsf	21,0	;volatile
  3475  0E5F                     l367:	
  3476                           ;functions.c: 421: while(!RB0);
  3477                           
  3478  0E5F  1283               	bcf	3,5	;RP0=0, select bank0
  3479  0E60  1C06               	btfss	6,0	;volatile
  3480  0E61  2E5F               	goto	l367
  3481                           
  3482                           ;functions.c: 422: WPUBbits.WPUB5 = 1;
  3483  0E62  1683               	bsf	3,5	;RP0=1, select bank1
  3484  0E63  1303               	bcf	3,6	;RP1=0, select bank1
  3485  0E64  1695               	bsf	21,5	;volatile
  3486  0E65                     l370:	
  3487                           ;functions.c: 423: while(!RB5);
  3488                           
  3489  0E65  1283               	bcf	3,5	;RP0=0, select bank0
  3490  0E66  1E86               	btfss	6,5	;volatile
  3491  0E67  2E65               	goto	l370
  3492                           
  3493                           ;functions.c: 426: SSPCONbits.SSPM=0x00;
  3494  0E68  30F0               	movlw	-16
  3495  0E69  0594               	andwf	20,f	;volatile
  3496                           
  3497                           ;functions.c: 427: SSPCONbits.CKP=0;
  3498  0E6A  1214               	bcf	20,4	;volatile
  3499                           
  3500                           ;functions.c: 428: SSPSTATbits.CKE=1;
  3501  0E6B  1683               	bsf	3,5	;RP0=1, select bank1
  3502  0E6C  1303               	bcf	3,6	;RP1=0, select bank1
  3503  0E6D  1714               	bsf	20,6	;volatile
  3504                           
  3505                           ;functions.c: 429: SSPSTATbits.SMP=0;
  3506  0E6E  1394               	bcf	20,7	;volatile
  3507                           
  3508                           ;functions.c: 430: SSPCONbits.SSPEN=0x01;
  3509  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  3511  0E71  1694               	bsf	20,5	;volatile
  3512                           
  3513                           ;functions.c: 431: SSPIE = 0;
  3514  0E72  1683               	bsf	3,5	;RP0=1, select bank1
  3515  0E73  1303               	bcf	3,6	;RP1=0, select bank1
  3516  0E74  118C               	bcf	12,3	;volatile
  3517                           
  3518                           ;functions.c: 434: RA5 = 1;
  3519  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0E77  1685               	bsf	5,5	;volatile
  3522                           
  3523                           ;functions.c: 435: RA4 = 1;
  3524  0E78  1605               	bsf	5,4	;volatile
  3525                           
  3526                           ;functions.c: 436: RD4 = 1;
  3527  0E79  1608               	bsf	8,4	;volatile
  3528                           
  3529                           ;functions.c: 437: RD3 = 1;
  3530  0E7A  1588               	bsf	8,3	;volatile
  3531                           
  3532                           ;functions.c: 439: RB1 = 1;
  3533  0E7B  1486               	bsf	6,1	;volatile
  3534                           
  3535                           ;functions.c: 444: INTCONbits.RBIE = 1;
  3536  0E7C  158B               	bsf	11,3	;volatile
  3537                           
  3538                           ;functions.c: 445: INTCONbits.PEIE = 1;
  3539  0E7D  170B               	bsf	11,6	;volatile
  3540                           
  3541                           ;functions.c: 446: PIE1bits.TMR1IE = 1;
  3542  0E7E  1683               	bsf	3,5	;RP0=1, select bank1
  3543  0E7F  1303               	bcf	3,6	;RP1=0, select bank1
  3544  0E80  140C               	bsf	12,0	;volatile
  3545                           
  3546                           ;functions.c: 447: INTCONbits.GIE = 1;
  3547  0E81  178B               	bsf	11,7	;volatile
  3548                           
  3549                           ;functions.c: 448: IOCBbits.IOCB5 = 1;
  3550  0E82  1696               	bsf	22,5	;volatile
  3551                           
  3552                           ;functions.c: 451: T1CON = 0b00110000;
  3553  0E83  3030               	movlw	48
  3554  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  3555  0E85  1303               	bcf	3,6	;RP1=0, select bank0
  3556  0E86  0090               	movwf	16	;volatile
  3557                           
  3558                           ;functions.c: 452: TMR1H = 0x0B;
  3559  0E87  300B               	movlw	11
  3560  0E88  008F               	movwf	15	;volatile
  3561                           
  3562                           ;functions.c: 453: TMR1L = 0xDB;
  3563  0E89  30DB               	movlw	219
  3564  0E8A  008E               	movwf	14	;volatile
  3565                           
  3566                           ;functions.c: 454: T1CONbits.TMR1ON = 1;
  3567  0E8B  1410               	bsf	16,0	;volatile
  3568                           
  3569                           ;functions.c: 457: ADCON0bits.ADCS0 = 0;
  3570  0E8C  131F               	bcf	31,6	;volatile
  3571                           
  3572                           ;functions.c: 458: ADCON0bits.ADCS1 = 0;
  3573  0E8D  139F               	bcf	31,7	;volatile
  3574                           
  3575                           ;functions.c: 459: ADCON1bits.ADFM = 0;
  3576  0E8E  1683               	bsf	3,5	;RP0=1, select bank1
  3577  0E8F  1303               	bcf	3,6	;RP1=0, select bank1
  3578  0E90  139F               	bcf	31,7	;volatile
  3579                           
  3580                           ;functions.c: 460: ADCON1bits.VCFG1 = 0;
  3581  0E91  129F               	bcf	31,5	;volatile
  3582                           
  3583                           ;functions.c: 461: ADCON1bits.VCFG0 = 0;
  3584  0E92  121F               	bcf	31,4	;volatile
  3585                           
  3586                           ;functions.c: 464: intSecondCounter = 0;
  3587  0E93  01E1               	clrf	_intSecondCounter^(0+128)
  3588  0E94  01E2               	clrf	(_intSecondCounter+1)^(0+128)
  3589                           
  3590                           ;functions.c: 465: intHalfSecondCounter = 0;
  3591  0E95  01DD               	clrf	_intHalfSecondCounter^(0+128)
  3592  0E96  01DE               	clrf	(_intHalfSecondCounter+1)^(0+128)
  3593                           
  3594                           ;functions.c: 466: intMinuteCounter = 0;
  3595  0E97  01DF               	clrf	_intMinuteCounter^(0+128)
  3596  0E98  01E0               	clrf	(_intMinuteCounter+1)^(0+128)
  3597  0E99  0008               	return
  3598  0E9A                     __end_of_PICInit:	
  3599                           
  3600                           	psect	text12
  3601  0C37                     __ptext12:	
  3602 ;; *************** function _Mode_5 *****************
  3603 ;; Defined at:
  3604 ;;		line 289 in file "functions.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;		None
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;		None
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      void 
  3611 ;; Registers used:
  3612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3618 ;;      Params:         0       0       0       0       0
  3619 ;;      Locals:         0       0       0       0       0
  3620 ;;      Temps:          0       1       0       0       0
  3621 ;;      Totals:         0       1       0       0       0
  3622 ;;Total ram usage:        1 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    8
  3625 ;; This function calls:
  3626 ;;		_LightWithSensController
  3627 ;;		_TransmittPacket
  3628 ;; This function is called by:
  3629 ;;		_main
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           
  3634                           ;psect for function _Mode_5
  3635  0C37                     _Mode_5:	
  3636                           
  3637                           ;functions.c: 291: if(!RB5)
  3638                           
  3639                           ;incstack = 0
  3640 ;; hardware stack exceeded
  3641                           ; Regs used in _Mode_5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3642  0C37  1283               	bcf	3,5	;RP0=0, select bank0
  3643  0C38  1303               	bcf	3,6	;RP1=0, select bank0
  3644  0C39  1A86               	btfsc	6,5	;volatile
  3645  0C3A  2C45               	goto	l2617
  3646                           
  3647                           ;functions.c: 292: {
  3648                           ;functions.c: 293: TransmittPacket(2, 2);
  3649  0C3B  3002               	movlw	2
  3650  0C3C  00BB               	movwf	??_Mode_5
  3651  0C3D  083B               	movf	??_Mode_5,w
  3652  0C3E  00B5               	movwf	TransmittPacket@value
  3653  0C3F  3002               	movlw	2
  3654  0C40  120A  118A  26F8  120A  158A  	fcall	_TransmittPacket
  3655  0C45                     l2617:	
  3656                           
  3657                           ;functions.c: 294: }
  3658                           ;functions.c: 295: LightWithSensController();
  3659  0C45  120A  118A  27A7   	fcall	_LightWithSensController
  3660  0C48  0008               	return
  3661  0C49                     __end_of_Mode_5:	
  3662                           
  3663                           	psect	text13
  3664  0C15                     __ptext13:	
  3665 ;; *************** function _Mode_4 *****************
  3666 ;; Defined at:
  3667 ;;		line 277 in file "functions.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;		None
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3681 ;;      Params:         0       0       0       0       0
  3682 ;;      Locals:         0       0       0       0       0
  3683 ;;      Temps:          0       0       0       0       0
  3684 ;;      Totals:         0       0       0       0       0
  3685 ;;Total ram usage:        0 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    8
  3688 ;; This function calls:
  3689 ;;		_LightWithSensController
  3690 ;;		_TransmittPacket
  3691 ;; This function is called by:
  3692 ;;		_main
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           
  3697                           ;psect for function _Mode_4
  3698  0C15                     _Mode_4:	
  3699                           
  3700                           ;functions.c: 279: if(!RB5)
  3701                           
  3702                           ;incstack = 0
  3703 ;; hardware stack exceeded
  3704                           ; Regs used in _Mode_4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3705  0C15  1283               	bcf	3,5	;RP0=0, select bank0
  3706  0C16  1303               	bcf	3,6	;RP1=0, select bank0
  3707  0C17  1A86               	btfsc	6,5	;volatile
  3708  0C18  2C21               	goto	l2611
  3709                           
  3710                           ;functions.c: 280: {
  3711                           ;functions.c: 281: TransmittPacket(2, 1);
  3712  0C19  01B5               	clrf	TransmittPacket@value
  3713  0C1A  0AB5               	incf	TransmittPacket@value,f
  3714  0C1B  3002               	movlw	2
  3715  0C1C  120A  118A  26F8  120A  158A  	fcall	_TransmittPacket
  3716  0C21                     l2611:	
  3717                           
  3718                           ;functions.c: 282: }
  3719                           ;functions.c: 283: LightWithSensController();
  3720  0C21  120A  118A  27A7   	fcall	_LightWithSensController
  3721  0C24  0008               	return
  3722  0C25                     __end_of_Mode_4:	
  3723                           
  3724                           	psect	text14
  3725  06F8                     __ptext14:	
  3726 ;; *************** function _TransmittPacket *****************
  3727 ;; Defined at:
  3728 ;;		line 184 in file "functions.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;  topic           1    wreg     unsigned char 
  3731 ;;  value           1   21[BANK0 ] unsigned char 
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  topic           1   26[BANK0 ] unsigned char 
  3734 ;;  i               2   24[BANK0 ] int 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3744 ;;      Params:         0       1       0       0       0
  3745 ;;      Locals:         0       3       0       0       0
  3746 ;;      Temps:          0       2       0       0       0
  3747 ;;      Totals:         0       6       0       0       0
  3748 ;;Total ram usage:        6 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    7
  3751 ;; This function calls:
  3752 ;;		_FindChannel
  3753 ;;		_RegisterRead
  3754 ;;		_RegisterSet
  3755 ;;		_SetRFMode
  3756 ;;		_WriteFIFO
  3757 ;;		_timerFunction
  3758 ;; This function is called by:
  3759 ;;		_main
  3760 ;;		_ReceivedPacketHandler
  3761 ;;		_Mode_4
  3762 ;;		_Mode_5
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           
  3767                           ;psect for function _TransmittPacket
  3768  06F8                     _TransmittPacket:	
  3769                           
  3770                           ;incstack = 0
  3771                           ; Regs used in _TransmittPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3772                           ;TransmittPacket@topic stored from wreg
  3773  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  3774  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  3775  06FA  00BA               	movwf	TransmittPacket@topic
  3776                           
  3777                           ;functions.c: 186: timerFunction(4, 5);
  3778  06FB  3004               	movlw	4
  3779  06FC  00A0               	movwf	timerFunction@intTimerNumber
  3780  06FD  3000               	movlw	0
  3781  06FE  00A1               	movwf	timerFunction@intTimerNumber+1
  3782  06FF  3005               	movlw	5
  3783  0700  00A2               	movwf	timerFunction@intSetSeconds
  3784  0701  3000               	movlw	0
  3785  0702  00A3               	movwf	timerFunction@intSetSeconds+1
  3786  0703  120A  158A  2425  120A  118A  	fcall	_timerFunction
  3787                           
  3788                           ;functions.c: 188: int i = 0;
  3789  0708  1283               	bcf	3,5	;RP0=0, select bank0
  3790  0709  1303               	bcf	3,6	;RP1=0, select bank0
  3791  070A  01B8               	clrf	TransmittPacket@i
  3792  070B  01B9               	clrf	TransmittPacket@i+1
  3793                           
  3794                           ;functions.c: 191: SetRFMode(0x20);
  3795  070C  3020               	movlw	32
  3796  070D  120A  158A  2701  120A  118A  	fcall	_SetRFMode
  3797                           
  3798                           ;functions.c: 192: _delay((unsigned long)((10)*(4000000/4000.0)));
  3799  0712  300D               	movlw	13
  3800  0713  1283               	bcf	3,5	;RP0=0, select bank0
  3801  0714  1303               	bcf	3,6	;RP1=0, select bank0
  3802  0715  00B7               	movwf	??_TransmittPacket+1
  3803  0716  30FB               	movlw	251
  3804  0717  00B6               	movwf	??_TransmittPacket
  3805  0718                     u2127:	
  3806  0718  0BB6               	decfsz	??_TransmittPacket,f
  3807  0719  2F18               	goto	u2127
  3808  071A  0BB7               	decfsz	??_TransmittPacket+1,f
  3809  071B  2F18               	goto	u2127
  3810                           
  3811                           ;functions.c: 193: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  3812  071C  300E               	movlw	14
  3813  071D  120A  158A  2463  120A  118A  	fcall	_RegisterRead
  3814  0722  3802               	iorlw	2
  3815  0723  1283               	bcf	3,5	;RP0=0, select bank0
  3816  0724  1303               	bcf	3,6	;RP1=0, select bank0
  3817  0725  00B6               	movwf	??_TransmittPacket
  3818  0726  0836               	movf	??_TransmittPacket,w
  3819  0727  00A7               	movwf	RegisterSet@value
  3820  0728  300E               	movlw	14
  3821  0729  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  3822                           
  3823                           ;functions.c: 194: SetRFMode(0x40);
  3824  072E  3040               	movlw	64
  3825  072F  120A  158A  2701  120A  118A  	fcall	_SetRFMode
  3826  0734                     l2193:	
  3827                           ;functions.c: 195: while((RegisterRead(0x0E) & 0b00000010) == 0)
  3828                           
  3829  0734  300E               	movlw	14
  3830  0735  120A  158A  2463  120A  118A  	fcall	_RegisterRead
  3831  073A  3902               	andlw	2
  3832  073B  1D03               	btfss	3,2
  3833  073C  2F47               	goto	l2195
  3834                           
  3835                           ;functions.c: 196: {
  3836                           ;functions.c: 197: if(bTimerComplete[4])
  3837  073D  1683               	bsf	3,5	;RP0=1, select bank1
  3838  073E  1303               	bcf	3,6	;RP1=0, select bank1
  3839  073F  0856               	movf	(_bTimerComplete^(0+128)+4),w
  3840  0740  1903               	btfsc	3,2
  3841  0741  2F34               	goto	l2193
  3842                           
  3843                           ;functions.c: 198: {
  3844                           ;functions.c: 199: FindChannel();
  3845  0742  120A  118A  244A  120A  118A  	fcall	_FindChannel
  3846  0747                     l2195:	
  3847                           ;functions.c: 200: break;
  3848                           
  3849                           
  3850                           ;functions.c: 201: }
  3851                           ;functions.c: 203: }
  3852                           ;functions.c: 204: SetRFMode(0x80);
  3853  0747  3080               	movlw	128
  3854  0748  120A  158A  2701  120A  118A  	fcall	_SetRFMode
  3855                           
  3856                           ;functions.c: 205: _delay((unsigned long)((500)*(4000000/4000000.0)));
  3857  074D  30A5               	movlw	165
  3858  074E  1283               	bcf	3,5	;RP0=0, select bank0
  3859  074F  1303               	bcf	3,6	;RP1=0, select bank0
  3860  0750  00B6               	movwf	??_TransmittPacket
  3861  0751                     u2137:	
  3862  0751  0BB6               	decfsz	??_TransmittPacket,f
  3863  0752  2F51               	goto	u2137
  3864  0753  2F54               	nop2
  3865                           
  3866                           ;functions.c: 208: WriteFIFO('S');
  3867  0754  3053               	movlw	83
  3868  0755  120A  158A  23E0  120A  118A  	fcall	_WriteFIFO
  3869                           
  3870                           ;functions.c: 209: WriteFIFO('Y');
  3871  075A  3059               	movlw	89
  3872  075B  120A  158A  23E0  120A  118A  	fcall	_WriteFIFO
  3873                           
  3874                           ;functions.c: 210: WriteFIFO('N');
  3875  0760  304E               	movlw	78
  3876  0761  120A  158A  23E0  120A  118A  	fcall	_WriteFIFO
  3877                           
  3878                           ;functions.c: 211: WriteFIFO('C');
  3879  0766  3043               	movlw	67
  3880  0767  120A  158A  23E0  120A  118A  	fcall	_WriteFIFO
  3881                           
  3882                           ;functions.c: 214: WriteFIFO(44);
  3883  076C  302C               	movlw	44
  3884  076D  120A  158A  23E0  120A  118A  	fcall	_WriteFIFO
  3885                           
  3886                           ;functions.c: 215: WriteFIFO(topic);
  3887  0772  1283               	bcf	3,5	;RP0=0, select bank0
  3888  0773  1303               	bcf	3,6	;RP1=0, select bank0
  3889  0774  083A               	movf	TransmittPacket@topic,w
  3890  0775  120A  158A  23E0  120A  118A  	fcall	_WriteFIFO
  3891                           
  3892                           ;functions.c: 216: WriteFIFO(value);
  3893  077A  1283               	bcf	3,5	;RP0=0, select bank0
  3894  077B  1303               	bcf	3,6	;RP1=0, select bank0
  3895  077C  0835               	movf	TransmittPacket@value,w
  3896  077D  120A  158A  23E0  120A  118A  	fcall	_WriteFIFO
  3897                           
  3898                           ;functions.c: 217: WriteFIFO(55);
  3899  0782  3037               	movlw	55
  3900  0783  120A  158A  23E0  120A  118A  	fcall	_WriteFIFO
  3901  0788                     l317:	
  3902                           ;functions.c: 220: while(!RB4)
  3903                           
  3904  0788  1283               	bcf	3,5	;RP0=0, select bank0
  3905  0789  1303               	bcf	3,6	;RP1=0, select bank0
  3906  078A  1A06               	btfsc	6,4	;volatile
  3907  078B  2F91               	goto	l2219
  3908                           
  3909                           ;functions.c: 221: {
  3910                           ;functions.c: 222: if(bTimerComplete[4])
  3911  078C  1683               	bsf	3,5	;RP0=1, select bank1
  3912  078D  1303               	bcf	3,6	;RP1=0, select bank1
  3913  078E  0856               	movf	(_bTimerComplete^(0+128)+4),w
  3914  078F  1903               	btfsc	3,2
  3915  0790  2F88               	goto	l317
  3916  0791                     l2219:	
  3917                           ;functions.c: 223: break;
  3918                           
  3919                           
  3920                           ;functions.c: 224: }
  3921                           ;functions.c: 225: _delay((unsigned long)((10)*(4000000/4000000.0)));
  3922  0791  3002               	movlw	2
  3923  0792  1283               	bcf	3,5	;RP0=0, select bank0
  3924  0793  1303               	bcf	3,6	;RP1=0, select bank0
  3925  0794  00B6               	movwf	??_TransmittPacket
  3926  0795                     u2147:	
  3927  0795  0BB6               	decfsz	??_TransmittPacket,f
  3928  0796  2F95               	goto	u2147
  3929  0797  0000               	nop
  3930                           
  3931                           ;functions.c: 226: SetRFMode(0x00);
  3932  0798  3000               	movlw	0
  3933  0799  120A  158A  2701  120A  118A  	fcall	_SetRFMode
  3934                           
  3935                           ;functions.c: 227: _delay((unsigned long)((1)*(4000000/4000.0)));
  3936  079E  30C7               	movlw	199
  3937  079F  1283               	bcf	3,5	;RP0=0, select bank0
  3938  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  3939  07A1  00B6               	movwf	??_TransmittPacket
  3940  07A2                     u2157:	
  3941  07A2  2FA3               	nop2
  3942  07A3  0BB6               	decfsz	??_TransmittPacket,f
  3943  07A4  2FA2               	goto	u2157
  3944  07A5  2FA6               	nop2
  3945  07A6  0008               	return
  3946  07A7                     __end_of_TransmittPacket:	
  3947                           
  3948                           	psect	text15
  3949  0BE0                     __ptext15:	
  3950 ;; *************** function _WriteFIFO *****************
  3951 ;; Defined at:
  3952 ;;		line 762 in file "functions.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;  Data            1    wreg     unsigned char 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  Data            1    3[BANK0 ] unsigned char 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0, pclath, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3966 ;;      Params:         0       0       0       0       0
  3967 ;;      Locals:         0       1       0       0       0
  3968 ;;      Temps:          0       0       0       0       0
  3969 ;;      Totals:         0       1       0       0       0
  3970 ;;Total ram usage:        1 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    3
  3973 ;; This function calls:
  3974 ;;		_WriteSPI
  3975 ;; This function is called by:
  3976 ;;		_TransmittPacket
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function _WriteFIFO
  3982  0BE0                     _WriteFIFO:	
  3983                           
  3984                           ;incstack = 0
  3985                           ; Regs used in _WriteFIFO: [wreg+status,2+status,0+pclath+cstack]
  3986                           ;WriteFIFO@Data stored from wreg
  3987  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  3988  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  3989  0BE2  00A3               	movwf	WriteFIFO@Data
  3990                           
  3991                           ;functions.c: 764: RA5 = 0;
  3992  0BE3  1285               	bcf	5,5	;volatile
  3993                           
  3994                           ;functions.c: 765: WriteSPI(Data);
  3995  0BE4  0823               	movf	WriteFIFO@Data,w
  3996  0BE5  120A  158A  23F9   	fcall	_WriteSPI
  3997                           
  3998                           ;functions.c: 766: RA5 = 1;
  3999  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  4000  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  4001  0BEA  1685               	bsf	5,5	;volatile
  4002  0BEB  0008               	return
  4003  0BEC                     __end_of_WriteFIFO:	
  4004                           
  4005                           	psect	text16
  4006  044A                     __ptext16:	
  4007 ;; *************** function _FindChannel *****************
  4008 ;; Defined at:
  4009 ;;		line 545 in file "functions.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;		None
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  i               2   19[BANK0 ] int 
  4014 ;;  cnt             2   17[BANK0 ] int 
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  1    wreg      unsigned char 
  4017 ;; Registers used:
  4018 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4024 ;;      Params:         0       0       0       0       0
  4025 ;;      Locals:         0       4       0       0       0
  4026 ;;      Temps:          0       3       0       0       0
  4027 ;;      Totals:         0       7       0       0       0
  4028 ;;Total ram usage:        7 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    6
  4031 ;; This function calls:
  4032 ;;		_RegisterRead
  4033 ;;		_RegisterSet
  4034 ;;		_SetRFMode
  4035 ;; This function is called by:
  4036 ;;		_TransiverToReceive
  4037 ;;		_TransmittPacket
  4038 ;;		_TransiverInit
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           
  4043                           ;psect for function _FindChannel
  4044  044A                     _FindChannel:	
  4045                           
  4046                           ;functions.c: 547: int cnt = 0;
  4047                           
  4048                           ;incstack = 0
  4049 ;; using string table level
  4050                           ; Regs used in _FindChannel: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4051  044A  1283               	bcf	3,5	;RP0=0, select bank0
  4052  044B  1303               	bcf	3,6	;RP1=0, select bank0
  4053  044C  01B1               	clrf	FindChannel@cnt
  4054  044D  01B2               	clrf	FindChannel@cnt+1
  4055                           
  4056                           ;functions.c: 548: bChannelFound = 0;
  4057  044E  01EC               	clrf	_bChannelFound
  4058                           
  4059                           ;functions.c: 549: channelFound = 0;
  4060  044F  1683               	bsf	3,5	;RP0=1, select bank1
  4061  0450  1303               	bcf	3,6	;RP1=0, select bank1
  4062  0451  01D7               	clrf	_channelFound^(0+128)
  4063  0452  01D8               	clrf	(_channelFound+1)^(0+128)
  4064                           
  4065                           ;functions.c: 551: _delay((unsigned long)((1000)*(4000000/4000.0)));
  4066  0453  3006               	movlw	6
  4067  0454  1283               	bcf	3,5	;RP0=0, select bank0
  4068  0455  1303               	bcf	3,6	;RP1=0, select bank0
  4069  0456  00B0               	movwf	??_FindChannel+2
  4070  0457  3013               	movlw	19
  4071  0458  00AF               	movwf	??_FindChannel+1
  4072  0459  30AD               	movlw	173
  4073  045A  00AE               	movwf	??_FindChannel
  4074  045B                     u2167:	
  4075  045B  0BAE               	decfsz	??_FindChannel,f
  4076  045C  2C5B               	goto	u2167
  4077  045D  0BAF               	decfsz	??_FindChannel+1,f
  4078  045E  2C5B               	goto	u2167
  4079  045F  0BB0               	decfsz	??_FindChannel+2,f
  4080  0460  2C5B               	goto	u2167
  4081                           
  4082                           ;functions.c: 552: for (int i = 0; i < 13; i++)
  4083  0461  1283               	bcf	3,5	;RP0=0, select bank0
  4084  0462  1303               	bcf	3,6	;RP1=0, select bank0
  4085  0463  01B3               	clrf	FindChannel@i
  4086  0464  01B4               	clrf	FindChannel@i+1
  4087  0465  0834               	movf	FindChannel@i+1,w
  4088  0466  3A80               	xorlw	128
  4089  0467  00FF               	movwf	127
  4090  0468  3080               	movlw	128
  4091  0469  027F               	subwf	127,w
  4092  046A  1D03               	skipz
  4093  046B  2C6E               	goto	u1025
  4094  046C  300D               	movlw	13
  4095  046D  0233               	subwf	FindChannel@i,w
  4096  046E                     u1025:	
  4097  046E  1803               	btfsc	3,0
  4098  046F  2D48               	goto	l2149
  4099  0470                     l2125:	
  4100                           
  4101                           ;functions.c: 553: {
  4102                           ;functions.c: 554: RegisterSet(0x06,ChannelR[i]);
  4103  0470  1283               	bcf	3,5	;RP0=0, select bank0
  4104  0471  1303               	bcf	3,6	;RP1=0, select bank0
  4105  0472  0833               	movf	FindChannel@i,w
  4106  0473  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  4107  0474  0084               	movwf	4
  4108  0475  120A  158A  2000  120A  118A  	fcall	stringdir
  4109  047A  00AE               	movwf	??_FindChannel
  4110  047B  082E               	movf	??_FindChannel,w
  4111  047C  00A7               	movwf	RegisterSet@value
  4112  047D  3006               	movlw	6
  4113  047E  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  4114                           
  4115                           ;functions.c: 555: RegisterSet(0x07,ChannelP[i]);
  4116  0483  1283               	bcf	3,5	;RP0=0, select bank0
  4117  0484  1303               	bcf	3,6	;RP1=0, select bank0
  4118  0485  0833               	movf	FindChannel@i,w
  4119  0486  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  4120  0487  0084               	movwf	4
  4121  0488  120A  158A  2000  120A  118A  	fcall	stringdir
  4122  048D  00AE               	movwf	??_FindChannel
  4123  048E  082E               	movf	??_FindChannel,w
  4124  048F  00A7               	movwf	RegisterSet@value
  4125  0490  3007               	movlw	7
  4126  0491  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  4127                           
  4128                           ;functions.c: 556: RegisterSet(0x08,ChannelS[i]);
  4129  0496  1283               	bcf	3,5	;RP0=0, select bank0
  4130  0497  1303               	bcf	3,6	;RP1=0, select bank0
  4131  0498  0833               	movf	FindChannel@i,w
  4132  0499  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  4133  049A  0084               	movwf	4
  4134  049B  120A  158A  2000  120A  118A  	fcall	stringdir
  4135  04A0  00AE               	movwf	??_FindChannel
  4136  04A1  082E               	movf	??_FindChannel,w
  4137  04A2  00A7               	movwf	RegisterSet@value
  4138  04A3  3008               	movlw	8
  4139  04A4  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  4140                           
  4141                           ;functions.c: 557: RegisterSet(0x09,ChannelR[i]);
  4142  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  4143  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  4144  04AB  0833               	movf	FindChannel@i,w
  4145  04AC  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  4146  04AD  0084               	movwf	4
  4147  04AE  120A  158A  2000  120A  118A  	fcall	stringdir
  4148  04B3  00AE               	movwf	??_FindChannel
  4149  04B4  082E               	movf	??_FindChannel,w
  4150  04B5  00A7               	movwf	RegisterSet@value
  4151  04B6  3009               	movlw	9
  4152  04B7  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  4153                           
  4154                           ;functions.c: 558: RegisterSet(0x0A,ChannelP[i]);
  4155  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  4156  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  4157  04BE  0833               	movf	FindChannel@i,w
  4158  04BF  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  4159  04C0  0084               	movwf	4
  4160  04C1  120A  158A  2000  120A  118A  	fcall	stringdir
  4161  04C6  00AE               	movwf	??_FindChannel
  4162  04C7  082E               	movf	??_FindChannel,w
  4163  04C8  00A7               	movwf	RegisterSet@value
  4164  04C9  300A               	movlw	10
  4165  04CA  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  4166                           
  4167                           ;functions.c: 559: RegisterSet(0x0B,ChannelS[i]);
  4168  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  4169  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  4170  04D1  0833               	movf	FindChannel@i,w
  4171  04D2  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  4172  04D3  0084               	movwf	4
  4173  04D4  120A  158A  2000  120A  118A  	fcall	stringdir
  4174  04D9  00AE               	movwf	??_FindChannel
  4175  04DA  082E               	movf	??_FindChannel,w
  4176  04DB  00A7               	movwf	RegisterSet@value
  4177  04DC  300B               	movlw	11
  4178  04DD  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  4179                           
  4180                           ;functions.c: 560: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  4181  04E2  300E               	movlw	14
  4182  04E3  120A  158A  2463  120A  118A  	fcall	_RegisterRead
  4183  04E8  3802               	iorlw	2
  4184  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  4185  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  4186  04EB  00AE               	movwf	??_FindChannel
  4187  04EC  082E               	movf	??_FindChannel,w
  4188  04ED  00A7               	movwf	RegisterSet@value
  4189  04EE  300E               	movlw	14
  4190  04EF  120A  158A  2449  120A  118A  	fcall	_RegisterSet
  4191                           
  4192                           ;functions.c: 561: SetRFMode(0x40);
  4193  04F4  3040               	movlw	64
  4194  04F5  120A  158A  2701  120A  118A  	fcall	_SetRFMode
  4195                           
  4196                           ;functions.c: 562: cnt = 0;
  4197  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  4198  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  4199  04FC  01B1               	clrf	FindChannel@cnt
  4200  04FD  01B2               	clrf	FindChannel@cnt+1
  4201  04FE                     l2143:	
  4202                           ;functions.c: 563: while(cnt < 5)
  4203                           
  4204  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  4205  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  4206  0500  0832               	movf	FindChannel@cnt+1,w
  4207  0501  3A80               	xorlw	128
  4208  0502  00FF               	movwf	127
  4209  0503  3080               	movlw	128
  4210  0504  027F               	subwf	127,w
  4211  0505  1D03               	skipz
  4212  0506  2D09               	goto	u1045
  4213  0507  3005               	movlw	5
  4214  0508  0231               	subwf	FindChannel@cnt,w
  4215  0509                     u1045:	
  4216  0509  1803               	btfsc	3,0
  4217  050A  2D35               	goto	l2145
  4218                           
  4219                           ;functions.c: 564: {
  4220                           ;functions.c: 566: if((RegisterRead(0x0E) & 0b00000010) != 0)
  4221  050B  300E               	movlw	14
  4222  050C  120A  158A  2463  120A  118A  	fcall	_RegisterRead
  4223  0511  3902               	andlw	2
  4224  0512  1903               	btfsc	3,2
  4225  0513  2D24               	goto	l2141
  4226                           
  4227                           ;functions.c: 567: {
  4228                           ;functions.c: 568: bChannelFound = 1;
  4229  0514  1283               	bcf	3,5	;RP0=0, select bank0
  4230  0515  1303               	bcf	3,6	;RP1=0, select bank0
  4231  0516  01EC               	clrf	_bChannelFound
  4232  0517  0AEC               	incf	_bChannelFound,f
  4233                           
  4234                           ;functions.c: 569: channelFound = i;
  4235  0518  0834               	movf	FindChannel@i+1,w
  4236  0519  1683               	bsf	3,5	;RP0=1, select bank1
  4237  051A  1303               	bcf	3,6	;RP1=0, select bank1
  4238  051B  00D8               	movwf	(_channelFound+1)^(0+128)
  4239  051C  1283               	bcf	3,5	;RP0=0, select bank0
  4240  051D  1303               	bcf	3,6	;RP1=0, select bank0
  4241  051E  0833               	movf	FindChannel@i,w
  4242  051F  1683               	bsf	3,5	;RP0=1, select bank1
  4243  0520  1303               	bcf	3,6	;RP1=0, select bank1
  4244  0521  00D7               	movwf	_channelFound^(0+128)
  4245                           
  4246                           ;functions.c: 570: return 1;
  4247  0522  3001               	movlw	1
  4248  0523  0008               	return
  4249  0524                     l2141:	
  4250                           
  4251                           ;functions.c: 571: }
  4252                           ;functions.c: 572: cnt++;
  4253  0524  3001               	movlw	1
  4254  0525  1283               	bcf	3,5	;RP0=0, select bank0
  4255  0526  1303               	bcf	3,6	;RP1=0, select bank0
  4256  0527  07B1               	addwf	FindChannel@cnt,f
  4257  0528  1803               	skipnc
  4258  0529  0AB2               	incf	FindChannel@cnt+1,f
  4259  052A  3000               	movlw	0
  4260  052B  07B2               	addwf	FindChannel@cnt+1,f
  4261                           
  4262                           ;functions.c: 573: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  4263  052C  30C7               	movlw	199
  4264  052D  1283               	bcf	3,5	;RP0=0, select bank0
  4265  052E  1303               	bcf	3,6	;RP1=0, select bank0
  4266  052F  00AE               	movwf	??_FindChannel
  4267  0530                     u2177:	
  4268  0530  2D31               	nop2
  4269  0531  0BAE               	decfsz	??_FindChannel,f
  4270  0532  2D30               	goto	u2177
  4271  0533  2D34               	nop2
  4272  0534  2CFE               	goto	l2143
  4273  0535                     l2145:	
  4274  0535  3001               	movlw	1
  4275  0536  1283               	bcf	3,5	;RP0=0, select bank0
  4276  0537  1303               	bcf	3,6	;RP1=0, select bank0
  4277  0538  07B3               	addwf	FindChannel@i,f
  4278  0539  1803               	skipnc
  4279  053A  0AB4               	incf	FindChannel@i+1,f
  4280  053B  3000               	movlw	0
  4281  053C  07B4               	addwf	FindChannel@i+1,f
  4282  053D  0834               	movf	FindChannel@i+1,w
  4283  053E  3A80               	xorlw	128
  4284  053F  00FF               	movwf	127
  4285  0540  3080               	movlw	128
  4286  0541  027F               	subwf	127,w
  4287  0542  1D03               	skipz
  4288  0543  2D46               	goto	u1055
  4289  0544  300D               	movlw	13
  4290  0545  0233               	subwf	FindChannel@i,w
  4291  0546                     u1055:	
  4292  0546  1C03               	skipc
  4293  0547  2C70               	goto	l2125
  4294  0548                     l2149:	
  4295                           
  4296                           ;functions.c: 574: }
  4297                           ;functions.c: 577: }
  4298                           ;functions.c: 578: return 0;
  4299  0548  3000               	movlw	0
  4300  0549  0008               	return
  4301  054A                     __end_of_FindChannel:	
  4302                           
  4303                           	psect	text17
  4304  0F01                     __ptext17:	
  4305 ;; *************** function _SetRFMode *****************
  4306 ;; Defined at:
  4307 ;;		line 600 in file "functions.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  mode            1    wreg     unsigned char 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  mode            1   12[BANK0 ] unsigned char 
  4312 ;;  mcparam0_rea    1   13[BANK0 ] unsigned char 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4322 ;;      Params:         0       0       0       0       0
  4323 ;;      Locals:         0       2       0       0       0
  4324 ;;      Temps:          0       1       0       0       0
  4325 ;;      Totals:         0       3       0       0       0
  4326 ;;Total ram usage:        3 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    5
  4329 ;; This function calls:
  4330 ;;		_RegisterRead
  4331 ;;		_RegisterSet
  4332 ;; This function is called by:
  4333 ;;		_TransiverToReceive
  4334 ;;		_TransiverReadFIFO
  4335 ;;		_TransmittPacket
  4336 ;;		_TransiverInit
  4337 ;;		_FindChannel
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           
  4342                           ;psect for function _SetRFMode
  4343  0F01                     _SetRFMode:	
  4344                           
  4345                           ;incstack = 0
  4346                           ; Regs used in _SetRFMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4347                           ;SetRFMode@mode stored from wreg
  4348  0F01  1283               	bcf	3,5	;RP0=0, select bank0
  4349  0F02  1303               	bcf	3,6	;RP1=0, select bank0
  4350  0F03  00AC               	movwf	SetRFMode@mode
  4351                           
  4352                           ;functions.c: 602: RA4 = 0;
  4353  0F04  1205               	bcf	5,4	;volatile
  4354                           
  4355                           ;functions.c: 603: BYTE mcparam0_read;
  4356                           ;functions.c: 604: mcparam0_read = RegisterRead(0);
  4357  0F05  3000               	movlw	0
  4358  0F06  120A  158A  2463  120A  158A  	fcall	_RegisterRead
  4359  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  4360  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  4361  0F0D  00AB               	movwf	??_SetRFMode
  4362  0F0E  082B               	movf	??_SetRFMode,w
  4363  0F0F  00AD               	movwf	SetRFMode@mcparam0_read
  4364                           
  4365                           ;functions.c: 605: switch (mode) {
  4366  0F10  2F59               	goto	l2105
  4367  0F11                     l2093:	
  4368                           ;functions.c: 606: case 0x80:
  4369                           
  4370                           
  4371                           ;functions.c: 607: RegisterSet(0, (mcparam0_read & 0x1F) | 0x80);
  4372  0F11  082D               	movf	SetRFMode@mcparam0_read,w
  4373  0F12  391F               	andlw	31
  4374  0F13  3880               	iorlw	128
  4375  0F14  00AB               	movwf	??_SetRFMode
  4376  0F15  082B               	movf	??_SetRFMode,w
  4377  0F16  00A7               	movwf	RegisterSet@value
  4378  0F17  3000               	movlw	0
  4379  0F18  120A  158A  2449  120A  158A  	fcall	_RegisterSet
  4380                           
  4381                           ;functions.c: 609: break;
  4382  0F1D  2F6C               	goto	l406
  4383  0F1E                     l2095:	
  4384                           ;functions.c: 610: case 0x60:
  4385                           
  4386                           
  4387                           ;functions.c: 611: RegisterSet(0, (mcparam0_read & 0x1F) | 0x60);
  4388  0F1E  1283               	bcf	3,5	;RP0=0, select bank0
  4389  0F1F  1303               	bcf	3,6	;RP1=0, select bank0
  4390  0F20  082D               	movf	SetRFMode@mcparam0_read,w
  4391  0F21  391F               	andlw	31
  4392  0F22  3860               	iorlw	96
  4393  0F23  00AB               	movwf	??_SetRFMode
  4394  0F24  082B               	movf	??_SetRFMode,w
  4395  0F25  00A7               	movwf	RegisterSet@value
  4396  0F26  3000               	movlw	0
  4397  0F27  120A  158A  2449  120A  158A  	fcall	_RegisterSet
  4398                           
  4399                           ;functions.c: 613: break;
  4400  0F2C  2F6C               	goto	l406
  4401  0F2D                     l2097:	
  4402                           ;functions.c: 614: case 0x40:
  4403                           
  4404                           
  4405                           ;functions.c: 615: RegisterSet(0, (mcparam0_read & 0x1F) | 0x40);
  4406  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  4407  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  4408  0F2F  082D               	movf	SetRFMode@mcparam0_read,w
  4409  0F30  391F               	andlw	31
  4410  0F31  3840               	iorlw	64
  4411  0F32  00AB               	movwf	??_SetRFMode
  4412  0F33  082B               	movf	??_SetRFMode,w
  4413  0F34  00A7               	movwf	RegisterSet@value
  4414  0F35  3000               	movlw	0
  4415  0F36  120A  158A  2449  120A  158A  	fcall	_RegisterSet
  4416                           
  4417                           ;functions.c: 617: break;
  4418  0F3B  2F6C               	goto	l406
  4419  0F3C                     l2099:	
  4420                           ;functions.c: 618: case 0x20:
  4421                           
  4422                           
  4423                           ;functions.c: 619: RegisterSet(0, (mcparam0_read & 0x1F) | 0x20);
  4424  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  4425  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  4426  0F3E  082D               	movf	SetRFMode@mcparam0_read,w
  4427  0F3F  391F               	andlw	31
  4428  0F40  3820               	iorlw	32
  4429  0F41  00AB               	movwf	??_SetRFMode
  4430  0F42  082B               	movf	??_SetRFMode,w
  4431  0F43  00A7               	movwf	RegisterSet@value
  4432  0F44  3000               	movlw	0
  4433  0F45  120A  158A  2449  120A  158A  	fcall	_RegisterSet
  4434                           
  4435                           ;functions.c: 621: break;
  4436  0F4A  2F6C               	goto	l406
  4437  0F4B                     l2101:	
  4438                           ;functions.c: 622: case 0x00:
  4439                           
  4440                           
  4441                           ;functions.c: 623: RegisterSet(0, (mcparam0_read & 0x1F) | 0x00);
  4442  0F4B  1283               	bcf	3,5	;RP0=0, select bank0
  4443  0F4C  1303               	bcf	3,6	;RP1=0, select bank0
  4444  0F4D  082D               	movf	SetRFMode@mcparam0_read,w
  4445  0F4E  391F               	andlw	31
  4446  0F4F  00AB               	movwf	??_SetRFMode
  4447  0F50  082B               	movf	??_SetRFMode,w
  4448  0F51  00A7               	movwf	RegisterSet@value
  4449  0F52  3000               	movlw	0
  4450  0F53  120A  158A  2449  120A  158A  	fcall	_RegisterSet
  4451                           
  4452                           ;functions.c: 626: }
  4453                           
  4454                           ;functions.c: 625: break;
  4455  0F58  2F6C               	goto	l406
  4456  0F59                     l2105:	
  4457  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  4458  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  4459  0F5B  082C               	movf	SetRFMode@mode,w
  4460                           
  4461                           ; Switch size 1, requested type "space"
  4462                           ; Number of cases is 5, Range of values is 0 to 128
  4463                           ; switch strategies available:
  4464                           ; Name         Instructions Cycles
  4465                           ; simple_byte           16     9 (average)
  4466                           ; jumptable            260     6 (fixed)
  4467                           ;	Chosen strategy is simple_byte
  4468  0F5C  3A00               	xorlw	0	; case 0
  4469  0F5D  1903               	skipnz
  4470  0F5E  2F4B               	goto	l2101
  4471  0F5F  3A20               	xorlw	32	; case 32
  4472  0F60  1903               	skipnz
  4473  0F61  2F3C               	goto	l2099
  4474  0F62  3A60               	xorlw	96	; case 64
  4475  0F63  1903               	skipnz
  4476  0F64  2F2D               	goto	l2097
  4477  0F65  3A20               	xorlw	32	; case 96
  4478  0F66  1903               	skipnz
  4479  0F67  2F1E               	goto	l2095
  4480  0F68  3AE0               	xorlw	224	; case 128
  4481  0F69  1903               	skipnz
  4482  0F6A  2F11               	goto	l2093
  4483  0F6B  2F6C               	goto	l406
  4484  0F6C                     l406:	
  4485                           
  4486                           ;functions.c: 627: RA4 = 1;
  4487  0F6C  1283               	bcf	3,5	;RP0=0, select bank0
  4488  0F6D  1303               	bcf	3,6	;RP1=0, select bank0
  4489  0F6E  1605               	bsf	5,4	;volatile
  4490  0F6F  0008               	return
  4491  0F70                     __end_of_SetRFMode:	
  4492                           
  4493                           	psect	text18
  4494  0C49                     __ptext18:	
  4495 ;; *************** function _RegisterSet *****************
  4496 ;; Defined at:
  4497 ;;		line 709 in file "functions.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;  adress          1    wreg     unsigned char 
  4500 ;;  value           1    7[BANK0 ] unsigned char 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;  adress          1   10[BANK0 ] unsigned char 
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      void 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0, pclath, cstack
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4512 ;;      Params:         0       1       0       0       0
  4513 ;;      Locals:         0       1       0       0       0
  4514 ;;      Temps:          0       2       0       0       0
  4515 ;;      Totals:         0       4       0       0       0
  4516 ;;Total ram usage:        4 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:    3
  4519 ;; This function calls:
  4520 ;;		_WriteSPI
  4521 ;; This function is called by:
  4522 ;;		_TransiverToReceive
  4523 ;;		_TransmittPacket
  4524 ;;		_TransiverInit
  4525 ;;		_FindChannel
  4526 ;;		_SetRFMode
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           
  4531                           ;psect for function _RegisterSet
  4532  0C49                     _RegisterSet:	
  4533                           
  4534                           ;incstack = 0
  4535                           ; Regs used in _RegisterSet: [wreg+status,2+status,0+pclath+cstack]
  4536                           ;RegisterSet@adress stored from wreg
  4537  0C49  1283               	bcf	3,5	;RP0=0, select bank0
  4538  0C4A  1303               	bcf	3,6	;RP1=0, select bank0
  4539  0C4B  00AA               	movwf	RegisterSet@adress
  4540                           
  4541                           ;functions.c: 711: RA4 = 0;
  4542  0C4C  1205               	bcf	5,4	;volatile
  4543                           
  4544                           ;functions.c: 712: adress = (adress<<1);
  4545  0C4D  082A               	movf	RegisterSet@adress,w
  4546  0C4E  00A8               	movwf	??_RegisterSet
  4547  0C4F  0728               	addwf	??_RegisterSet,w
  4548  0C50  00A9               	movwf	??_RegisterSet+1
  4549  0C51  0829               	movf	??_RegisterSet+1,w
  4550  0C52  00AA               	movwf	RegisterSet@adress
  4551                           
  4552                           ;functions.c: 713: WriteSPI(adress);
  4553  0C53  082A               	movf	RegisterSet@adress,w
  4554  0C54  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  4555                           
  4556                           ;functions.c: 714: WriteSPI(value);
  4557  0C59  1283               	bcf	3,5	;RP0=0, select bank0
  4558  0C5A  1303               	bcf	3,6	;RP1=0, select bank0
  4559  0C5B  0827               	movf	RegisterSet@value,w
  4560  0C5C  120A  158A  23F9   	fcall	_WriteSPI
  4561                           
  4562                           ;functions.c: 715: RA4 = 1;
  4563  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  4564  0C60  1303               	bcf	3,6	;RP1=0, select bank0
  4565  0C61  1605               	bsf	5,4	;volatile
  4566  0C62  0008               	return
  4567  0C63                     __end_of_RegisterSet:	
  4568                           
  4569                           	psect	text19
  4570  0C63                     __ptext19:	
  4571 ;; *************** function _RegisterRead *****************
  4572 ;; Defined at:
  4573 ;;		line 679 in file "functions.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  adress          1    wreg     unsigned char 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  adress          1    6[BANK0 ] unsigned char 
  4578 ;;  value           1    5[BANK0 ] unsigned char 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      unsigned char 
  4581 ;; Registers used:
  4582 ;;		wreg, status,2, status,0, pclath, cstack
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4588 ;;      Params:         0       0       0       0       0
  4589 ;;      Locals:         0       2       0       0       0
  4590 ;;      Temps:          0       2       0       0       0
  4591 ;;      Totals:         0       4       0       0       0
  4592 ;;Total ram usage:        4 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    4
  4595 ;; This function calls:
  4596 ;;		_ReadSPI
  4597 ;;		_WriteSPI
  4598 ;; This function is called by:
  4599 ;;		_TransiverToReceive
  4600 ;;		_TransmittPacket
  4601 ;;		_TransiverInit
  4602 ;;		_FindChannel
  4603 ;;		_SetRFMode
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           
  4608                           ;psect for function _RegisterRead
  4609  0C63                     _RegisterRead:	
  4610                           
  4611                           ;incstack = 0
  4612                           ; Regs used in _RegisterRead: [wreg+status,2+status,0+pclath+cstack]
  4613                           ;RegisterRead@adress stored from wreg
  4614  0C63  1283               	bcf	3,5	;RP0=0, select bank0
  4615  0C64  1303               	bcf	3,6	;RP1=0, select bank0
  4616  0C65  00A6               	movwf	RegisterRead@adress
  4617                           
  4618                           ;functions.c: 681: BYTE value;
  4619                           ;functions.c: 682: RA4 = 0;
  4620  0C66  1205               	bcf	5,4	;volatile
  4621                           
  4622                           ;functions.c: 683: adress = ((adress<<1)|0x40);
  4623  0C67  0826               	movf	RegisterRead@adress,w
  4624  0C68  00A3               	movwf	??_RegisterRead
  4625  0C69  0723               	addwf	??_RegisterRead,w
  4626  0C6A  3840               	iorlw	64
  4627  0C6B  00A4               	movwf	??_RegisterRead+1
  4628  0C6C  0824               	movf	??_RegisterRead+1,w
  4629  0C6D  00A6               	movwf	RegisterRead@adress
  4630                           
  4631                           ;functions.c: 684: WriteSPI(adress);
  4632  0C6E  0826               	movf	RegisterRead@adress,w
  4633  0C6F  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  4634                           
  4635                           ;functions.c: 685: value = ReadSPI();
  4636  0C74  120A  158A  23BE   	fcall	_ReadSPI
  4637  0C77  1283               	bcf	3,5	;RP0=0, select bank0
  4638  0C78  1303               	bcf	3,6	;RP1=0, select bank0
  4639  0C79  00A3               	movwf	??_RegisterRead
  4640  0C7A  0823               	movf	??_RegisterRead,w
  4641  0C7B  00A5               	movwf	RegisterRead@value
  4642                           
  4643                           ;functions.c: 686: RA4 = 1;
  4644  0C7C  1605               	bsf	5,4	;volatile
  4645                           
  4646                           ;functions.c: 687: return value;
  4647  0C7D  0825               	movf	RegisterRead@value,w
  4648  0C7E  0008               	return
  4649  0C7F                     __end_of_RegisterRead:	
  4650                           
  4651                           	psect	text20
  4652  0BEC                     __ptext20:	
  4653 ;; *************** function _Mode_2 *****************
  4654 ;; Defined at:
  4655 ;;		line 258 in file "functions.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;		None
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;		None
  4660 ;; Return value:  Size  Location     Type
  4661 ;;                  1    wreg      void 
  4662 ;; Registers used:
  4663 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4669 ;;      Params:         0       0       0       0       0
  4670 ;;      Locals:         0       0       0       0       0
  4671 ;;      Temps:          0       0       0       0       0
  4672 ;;      Totals:         0       0       0       0       0
  4673 ;;Total ram usage:        0 bytes
  4674 ;; Hardware stack levels used:    1
  4675 ;; Hardware stack levels required when called:    6
  4676 ;; This function calls:
  4677 ;;		_LightWithSensController
  4678 ;; This function is called by:
  4679 ;;		_main
  4680 ;; This function uses a non-reentrant model
  4681 ;;
  4682                           
  4683                           
  4684                           ;psect for function _Mode_2
  4685  0BEC                     _Mode_2:	
  4686                           
  4687                           ;functions.c: 260: LightWithSensController();
  4688                           
  4689                           ;incstack = 0
  4690                           ; Regs used in _Mode_2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4691  0BEC  120A  118A  27A7  120A  158A  	fcall	_LightWithSensController
  4692                           
  4693                           ;functions.c: 261: if(RC2)
  4694  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  4695  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  4696  0BF3  1D07               	btfss	7,2	;volatile
  4697  0BF4  2BF7               	goto	l333
  4698                           
  4699                           ;functions.c: 262: RC1 = 1;
  4700  0BF5  1487               	bsf	7,1	;volatile
  4701  0BF6  0008               	return
  4702  0BF7                     l333:	
  4703                           
  4704                           ;functions.c: 263: else
  4705                           ;functions.c: 264: RC1 = 0;
  4706  0BF7  1087               	bcf	7,1	;volatile
  4707  0BF8  0008               	return
  4708  0BF9                     __end_of_Mode_2:	
  4709                           
  4710                           	psect	text21
  4711  0C7F                     __ptext21:	
  4712 ;; *************** function _Mode_1 *****************
  4713 ;; Defined at:
  4714 ;;		line 244 in file "functions.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;		None
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  1    wreg      void 
  4721 ;; Registers used:
  4722 ;;		wreg, status,2, status,0, pclath, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4728 ;;      Params:         0       0       0       0       0
  4729 ;;      Locals:         0       0       0       0       0
  4730 ;;      Temps:          0       0       0       0       0
  4731 ;;      Totals:         0       0       0       0       0
  4732 ;;Total ram usage:        0 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    5
  4735 ;; This function calls:
  4736 ;;		_DarknessCheck
  4737 ;; This function is called by:
  4738 ;;		_main
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _Mode_1
  4744  0C7F                     _Mode_1:	
  4745                           
  4746                           ;functions.c: 247: if((intSecondCounter == 30)&&(!RC2))
  4747                           
  4748                           ;incstack = 0
  4749                           ; Regs used in _Mode_1: [wreg+status,2+status,0+pclath+cstack]
  4750  0C7F  301E               	movlw	30
  4751  0C80  1683               	bsf	3,5	;RP0=1, select bank1
  4752  0C81  1303               	bcf	3,6	;RP1=0, select bank1
  4753  0C82  0661               	xorwf	_intSecondCounter^(0+128),w
  4754  0C83  0462               	iorwf	(_intSecondCounter+1)^(0+128),w
  4755  0C84  1D03               	btfss	3,2
  4756  0C85  2C8F               	goto	l2595
  4757  0C86  1283               	bcf	3,5	;RP0=0, select bank0
  4758  0C87  1303               	bcf	3,6	;RP1=0, select bank0
  4759  0C88  1907               	btfsc	7,2	;volatile
  4760  0C89  2C8F               	goto	l2595
  4761                           
  4762                           ;functions.c: 248: DarknessCheck();
  4763  0C8A  120A  158A  250E  120A  158A  	fcall	_DarknessCheck
  4764  0C8F                     l2595:	
  4765                           
  4766                           ;functions.c: 249: if((intBlinkCycle == 1)&&(bDark == 1))
  4767  0C8F  037C               	decf	_intBlinkCycle,w
  4768  0C90  047D               	iorwf	_intBlinkCycle+1,w
  4769  0C91  1D03               	btfss	3,2
  4770  0C92  2C9A               	goto	l328
  4771  0C93  1283               	bcf	3,5	;RP0=0, select bank0
  4772  0C94  1303               	bcf	3,6	;RP1=0, select bank0
  4773  0C95  036D               	decf	_bDark,w
  4774  0C96  1D03               	btfss	3,2
  4775  0C97  2C9A               	goto	l328
  4776                           
  4777                           ;functions.c: 250: RC2 = 1;
  4778  0C98  1507               	bsf	7,2	;volatile
  4779  0C99  0008               	return
  4780  0C9A                     l328:	
  4781                           
  4782                           ;functions.c: 251: else
  4783                           ;functions.c: 252: RC2 = 0;
  4784  0C9A  1283               	bcf	3,5	;RP0=0, select bank0
  4785  0C9B  1303               	bcf	3,6	;RP1=0, select bank0
  4786  0C9C  1107               	bcf	7,2	;volatile
  4787  0C9D  0008               	return
  4788  0C9E                     __end_of_Mode_1:	
  4789                           
  4790                           	psect	text22
  4791  07FC                     __ptext22:	
  4792 ;; *************** function _Mode_0 *****************
  4793 ;; Defined at:
  4794 ;;		line 236 in file "functions.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;		None
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;		None
  4799 ;; Return value:  Size  Location     Type
  4800 ;;                  1    wreg      void 
  4801 ;; Registers used:
  4802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4803 ;; Tracked objects:
  4804 ;;		On entry : 0/0
  4805 ;;		On exit  : 0/0
  4806 ;;		Unchanged: 0/0
  4807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4808 ;;      Params:         0       0       0       0       0
  4809 ;;      Locals:         0       0       0       0       0
  4810 ;;      Temps:          0       0       0       0       0
  4811 ;;      Totals:         0       0       0       0       0
  4812 ;;Total ram usage:        0 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:    6
  4815 ;; This function calls:
  4816 ;;		_LightWithSensController
  4817 ;; This function is called by:
  4818 ;;		_main
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           
  4823                           ;psect for function _Mode_0
  4824  07FC                     _Mode_0:	
  4825                           
  4826                           ;functions.c: 238: LightWithSensController();
  4827                           
  4828                           ;incstack = 0
  4829                           ; Regs used in _Mode_0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4830  07FC  120A  118A  27A7   	fcall	_LightWithSensController
  4831  07FF  0008               	return
  4832  0800                     __end_of_Mode_0:	
  4833                           
  4834                           	psect	text23
  4835  07A7                     __ptext23:	
  4836 ;; *************** function _LightWithSensController *****************
  4837 ;; Defined at:
  4838 ;;		line 302 in file "functions.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;		None
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;		None
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4852 ;;      Params:         0       0       0       0       0
  4853 ;;      Locals:         0       0       0       0       0
  4854 ;;      Temps:          0       0       0       0       0
  4855 ;;      Totals:         0       0       0       0       0
  4856 ;;Total ram usage:        0 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    5
  4859 ;; This function calls:
  4860 ;;		_DarknessCheck
  4861 ;;		_timerFunction
  4862 ;; This function is called by:
  4863 ;;		_Mode_0
  4864 ;;		_Mode_2
  4865 ;;		_Mode_4
  4866 ;;		_Mode_5
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           
  4871                           ;psect for function _LightWithSensController
  4872  07A7                     _LightWithSensController:	
  4873                           
  4874                           ;functions.c: 306: if((intSecondCounter == 30)&&(!RC2))
  4875                           
  4876                           ;incstack = 0
  4877                           ; Regs used in _LightWithSensController: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4878  07A7  301E               	movlw	30
  4879  07A8  1683               	bsf	3,5	;RP0=1, select bank1
  4880  07A9  1303               	bcf	3,6	;RP1=0, select bank1
  4881  07AA  0661               	xorwf	_intSecondCounter^(0+128),w
  4882  07AB  0462               	iorwf	(_intSecondCounter+1)^(0+128),w
  4883  07AC  1D03               	btfss	3,2
  4884  07AD  2FB7               	goto	l2345
  4885  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  4886  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  4887  07B0  1907               	btfsc	7,2	;volatile
  4888  07B1  2FB7               	goto	l2345
  4889                           
  4890                           ;functions.c: 307: DarknessCheck();
  4891  07B2  120A  158A  250E  120A  118A  	fcall	_DarknessCheck
  4892  07B7                     l2345:	
  4893                           
  4894                           ;functions.c: 311: if((bDark == 1)&&(RA1)&&(!RC2))
  4895  07B7  1283               	bcf	3,5	;RP0=0, select bank0
  4896  07B8  1303               	bcf	3,6	;RP1=0, select bank0
  4897  07B9  036D               	decf	_bDark,w
  4898  07BA  1903               	btfsc	3,2
  4899  07BB  1C85               	btfss	5,1	;volatile
  4900  07BC  2FCC               	goto	l2355
  4901  07BD  1907               	btfsc	7,2	;volatile
  4902  07BE  2FCC               	goto	l2355
  4903                           
  4904                           ;functions.c: 312: {
  4905                           ;functions.c: 314: RC2 = 1;
  4906  07BF  1507               	bsf	7,2	;volatile
  4907                           
  4908                           ;functions.c: 316: timerFunction(0,120);
  4909  07C0  3000               	movlw	0
  4910  07C1  00A0               	movwf	timerFunction@intTimerNumber
  4911  07C2  00A1               	movwf	timerFunction@intTimerNumber+1
  4912  07C3  3078               	movlw	120
  4913  07C4  00A2               	movwf	timerFunction@intSetSeconds
  4914  07C5  3000               	movlw	0
  4915  07C6  00A3               	movwf	timerFunction@intSetSeconds+1
  4916  07C7  120A  158A  2425  120A  118A  	fcall	_timerFunction
  4917  07CC                     l2355:	
  4918                           
  4919                           ;functions.c: 317: }
  4920                           ;functions.c: 320: if(bTimerComplete[0])
  4921  07CC  1683               	bsf	3,5	;RP0=1, select bank1
  4922  07CD  1303               	bcf	3,6	;RP1=0, select bank1
  4923  07CE  0852               	movf	_bTimerComplete^(0+128),w
  4924  07CF  1903               	btfsc	3,2
  4925  07D0  0008               	return
  4926                           
  4927                           ;functions.c: 321: {
  4928                           ;functions.c: 322: DarknessCheck();
  4929  07D1  120A  158A  250E  120A  118A  	fcall	_DarknessCheck
  4930                           
  4931                           ;functions.c: 323: if((bDark)&&(RA1))
  4932  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  4933  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  4934  07D8  086D               	movf	_bDark,w
  4935  07D9  1D03               	btfss	3,2
  4936  07DA  1C85               	btfss	5,1	;volatile
  4937  07DB  2FE7               	goto	l352
  4938                           
  4939                           ;functions.c: 324: {
  4940                           ;functions.c: 325: timerFunction(0,120);
  4941  07DC  3000               	movlw	0
  4942  07DD  00A0               	movwf	timerFunction@intTimerNumber
  4943  07DE  00A1               	movwf	timerFunction@intTimerNumber+1
  4944  07DF  3078               	movlw	120
  4945  07E0  00A2               	movwf	timerFunction@intSetSeconds
  4946  07E1  3000               	movlw	0
  4947  07E2  00A3               	movwf	timerFunction@intSetSeconds+1
  4948  07E3  120A  158A  2425   	fcall	_timerFunction
  4949                           
  4950                           ;functions.c: 326: }
  4951  07E6  0008               	return
  4952  07E7                     l352:	
  4953                           
  4954                           ;functions.c: 327: else
  4955                           ;functions.c: 328: RC2 = 0;
  4956  07E7  1107               	bcf	7,2	;volatile
  4957  07E8  0008               	return
  4958  07E9                     __end_of_LightWithSensController:	
  4959                           
  4960                           	psect	text24
  4961  0C25                     __ptext24:	
  4962 ;; *************** function _timerFunction *****************
  4963 ;; Defined at:
  4964 ;;		line 353 in file "functions.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;  intTimerNumb    2    0[BANK0 ] int 
  4967 ;;  intSetSecond    2    2[BANK0 ] int 
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;		None
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      unsigned char 
  4972 ;; Registers used:
  4973 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4979 ;;      Params:         0       4       0       0       0
  4980 ;;      Locals:         0       0       0       0       0
  4981 ;;      Temps:          0       1       0       0       0
  4982 ;;      Totals:         0       5       0       0       0
  4983 ;;Total ram usage:        5 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:    2
  4986 ;; This function calls:
  4987 ;;		Nothing
  4988 ;; This function is called by:
  4989 ;;		_TransiverToReceive
  4990 ;;		_TransiverReadFIFO
  4991 ;;		_TransmittPacket
  4992 ;;		_LightWithSensController
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           
  4997                           ;psect for function _timerFunction
  4998  0C25                     _timerFunction:	
  4999                           
  5000                           ;functions.c: 355: intClockTimer[intTimerNumber] = intSetSeconds;
  5001                           
  5002                           ;incstack = 0
  5003                           ; Regs used in _timerFunction: [wreg-fsr0h+status,2+status,0]
  5004  0C25  1283               	bcf	3,5	;RP0=0, select bank0
  5005  0C26  1303               	bcf	3,6	;RP1=0, select bank0
  5006  0C27  0820               	movf	timerFunction@intTimerNumber,w
  5007  0C28  00A4               	movwf	??_timerFunction
  5008  0C29  0724               	addwf	??_timerFunction,w
  5009  0C2A  3EC8               	addlw	(low (_intClockTimer| 0))& (0+255)
  5010  0C2B  0084               	movwf	4
  5011  0C2C  0822               	movf	timerFunction@intSetSeconds,w
  5012  0C2D  1383               	bcf	3,7	;select IRP bank1
  5013  0C2E  0080               	movwf	0
  5014  0C2F  0A84               	incf	4,f
  5015  0C30  0823               	movf	timerFunction@intSetSeconds+1,w
  5016  0C31  0080               	movwf	0
  5017                           
  5018                           ;functions.c: 356: bTimerComplete[intTimerNumber] = 0;
  5019  0C32  0820               	movf	timerFunction@intTimerNumber,w
  5020  0C33  3ED2               	addlw	(low (_bTimerComplete| 0))& (0+255)
  5021  0C34  0084               	movwf	4
  5022  0C35  0180               	clrf	0
  5023  0C36  0008               	return
  5024  0C37                     __end_of_timerFunction:	
  5025                           ;functions.c: 357: return 1;
  5026                           ;	Return value of _timerFunction is never used
  5027                           
  5028                           
  5029                           	psect	text25
  5030  0D0E                     __ptext25:	
  5031 ;; *************** function _DarknessCheck *****************
  5032 ;; Defined at:
  5033 ;;		line 885 in file "functions.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;		None
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  darknessValu    1    9[BANK0 ] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      void 
  5040 ;; Registers used:
  5041 ;;		wreg, status,2, status,0, pclath, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5047 ;;      Params:         0       0       0       0       0
  5048 ;;      Locals:         0       1       0       0       0
  5049 ;;      Temps:          0       1       0       0       0
  5050 ;;      Totals:         0       2       0       0       0
  5051 ;;Total ram usage:        2 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    4
  5054 ;; This function calls:
  5055 ;;		_AnalogValue
  5056 ;;		_eeprom_read
  5057 ;; This function is called by:
  5058 ;;		_ReceivedPacketHandler
  5059 ;;		_Mode_1
  5060 ;;		_LightWithSensController
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           
  5065                           ;psect for function _DarknessCheck
  5066  0D0E                     _DarknessCheck:	
  5067                           
  5068                           ;functions.c: 887: unsigned char darknessValue;
  5069                           ;functions.c: 888: RC0 = 0;
  5070                           
  5071                           ;incstack = 0
  5072                           ; Regs used in _DarknessCheck: [wreg+status,2+status,0+pclath+cstack]
  5073  0D0E  1283               	bcf	3,5	;RP0=0, select bank0
  5074  0D0F  1303               	bcf	3,6	;RP1=0, select bank0
  5075  0D10  1007               	bcf	7,0	;volatile
  5076                           
  5077                           ;functions.c: 890: if(bValueFromPot == TRUE)
  5078  0D11  036F               	decf	_bValueFromPot,w
  5079  0D12  1D03               	btfss	3,2
  5080  0D13  2D1B               	goto	l2237
  5081                           
  5082                           ;functions.c: 891: darknessValue= AnalogValue(3);
  5083  0D14  3003               	movlw	3
  5084  0D15  120A  158A  24E5  120A  158A  	fcall	_AnalogValue
  5085  0D1A  2D21               	goto	L2
  5086  0D1B                     l2237:	
  5087                           
  5088                           ;functions.c: 892: else
  5089                           ;functions.c: 893: darknessValue=eeprom_read(0);
  5090  0D1B  3000               	movlw	0
  5091  0D1C  120A  158A  24C1  120A  158A  	fcall	_eeprom_read
  5092  0D21                     L2:	
  5093  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  5094  0D22  1303               	bcf	3,6	;RP1=0, select bank0
  5095  0D23  00A8               	movwf	??_DarknessCheck
  5096  0D24  0828               	movf	??_DarknessCheck,w
  5097  0D25  00A9               	movwf	DarknessCheck@darknessValue
  5098                           
  5099                           ;functions.c: 895: if(AnalogValue(0)>darknessValue)
  5100  0D26  3000               	movlw	0
  5101  0D27  120A  158A  24E5  120A  158A  	fcall	_AnalogValue
  5102  0D2C  1283               	bcf	3,5	;RP0=0, select bank0
  5103  0D2D  1303               	bcf	3,6	;RP1=0, select bank0
  5104  0D2E  0229               	subwf	DarknessCheck@darknessValue,w
  5105  0D2F  1803               	skipnc
  5106  0D30  2D34               	goto	l2241
  5107                           
  5108                           ;functions.c: 896: bDark = 1;
  5109  0D31  01ED               	clrf	_bDark
  5110  0D32  0AED               	incf	_bDark,f
  5111  0D33  2D35               	goto	l2243
  5112  0D34                     l2241:	
  5113                           
  5114                           ;functions.c: 897: else
  5115                           ;functions.c: 898: bDark = 0;
  5116  0D34  01ED               	clrf	_bDark
  5117  0D35                     l2243:	
  5118                           
  5119                           ;functions.c: 899: RC0 = 0;
  5120  0D35  1007               	bcf	7,0	;volatile
  5121  0D36  0008               	return
  5122  0D37                     __end_of_DarknessCheck:	
  5123                           
  5124                           	psect	text26
  5125  0CC1                     __ptext26:	
  5126 ;; *************** function _eeprom_read *****************
  5127 ;; Defined at:
  5128 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eeread.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;  addr            1    wreg     unsigned char 
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;  addr            1    1[BANK0 ] unsigned char 
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      unsigned char 
  5135 ;; Registers used:
  5136 ;;		wreg, status,2, status,0
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5142 ;;      Params:         0       0       0       0       0
  5143 ;;      Locals:         0       1       0       0       0
  5144 ;;      Temps:          0       1       0       0       0
  5145 ;;      Totals:         0       2       0       0       0
  5146 ;;Total ram usage:        2 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    2
  5149 ;; This function calls:
  5150 ;;		Nothing
  5151 ;; This function is called by:
  5152 ;;		_ReceivedPacketHandler
  5153 ;;		_DarknessCheck
  5154 ;;		_ReadMemoryAdress
  5155 ;;		_IncreaseMemoryAdress
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           
  5160                           ;psect for function _eeprom_read
  5161  0CC1                     _eeprom_read:	
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5165                           ;eeprom_read@addr stored from wreg
  5166  0CC1  1283               	bcf	3,5	;RP0=0, select bank0
  5167  0CC2  1303               	bcf	3,6	;RP1=0, select bank0
  5168  0CC3  00A1               	movwf	eeprom_read@addr
  5169  0CC4  2CC7               	goto	l633
  5170  0CC5                     u1071:	
  5171  0CC5  1283               	bcf	3,5	;RP0=0, select bank0
  5172  0CC6  1303               	bcf	3,6	;RP1=0, select bank0
  5173  0CC7                     l633:	
  5174  0CC7  0064               	clrwdt	;# 
  5175  0CC8  1683               	bsf	3,5	;RP0=1, select bank3
  5176  0CC9  1703               	bsf	3,6	;RP1=1, select bank3
  5177  0CCA  188C               	btfsc	12,1	;volsfr
  5178  0CCB  2CC5               	goto	u1071
  5179  0CCC  1283               	bcf	3,5	;RP0=0, select bank0
  5180  0CCD  1303               	bcf	3,6	;RP1=0, select bank0
  5181  0CCE  0821               	movf	eeprom_read@addr,w
  5182  0CCF  1283               	bcf	3,5	;RP0=0, select bank2
  5183  0CD0  1703               	bsf	3,6	;RP1=1, select bank2
  5184  0CD1  008D               	movwf	13	;volatile
  5185  0CD2  303F               	movlw	63
  5186  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  5187  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  5188  0CD5  00A0               	movwf	??_eeprom_read
  5189  0CD6  0820               	movf	??_eeprom_read,w
  5190  0CD7  1683               	bsf	3,5	;RP0=1, select bank3
  5191  0CD8  1703               	bsf	3,6	;RP1=1, select bank3
  5192  0CD9  058C               	andwf	12,f	;volsfr
  5193  0CDA  140C               	bsf	12,0	;volsfr
  5194  0CDB  1003               	clrc
  5195  0CDC  180C               	btfsc	12,0	;volsfr
  5196  0CDD  1403               	setc
  5197  0CDE  3000               	movlw	0
  5198  0CDF  1803               	skipnc
  5199  0CE0  3001               	movlw	1
  5200  0CE1  1283               	bcf	3,5	;RP0=0, select bank2
  5201  0CE2  1703               	bsf	3,6	;RP1=1, select bank2
  5202  0CE3  080C               	movf	12,w	;volatile
  5203  0CE4  0008               	return
  5204  0CE5                     __end_of_eeprom_read:	
  5205                           
  5206                           	psect	text27
  5207  0CE5                     __ptext27:	
  5208 ;; *************** function _AnalogValue *****************
  5209 ;; Defined at:
  5210 ;;		line 858 in file "functions.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;  channel         1    wreg     unsigned char 
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  channel         1    7[BANK0 ] unsigned char 
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  1    wreg      unsigned char 
  5217 ;; Registers used:
  5218 ;;		wreg, status,2, status,0, pclath, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5224 ;;      Params:         0       0       0       0       0
  5225 ;;      Locals:         0       1       0       0       0
  5226 ;;      Temps:          0       1       0       0       0
  5227 ;;      Totals:         0       2       0       0       0
  5228 ;;Total ram usage:        2 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    3
  5231 ;; This function calls:
  5232 ;;		_DelayDs
  5233 ;; This function is called by:
  5234 ;;		_ReceivedPacketHandler
  5235 ;;		_DarknessCheck
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           
  5240                           ;psect for function _AnalogValue
  5241  0CE5                     _AnalogValue:	
  5242                           
  5243                           ;incstack = 0
  5244                           ; Regs used in _AnalogValue: [wreg+status,2+status,0+pclath+cstack]
  5245                           ;AnalogValue@channel stored from wreg
  5246  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  5247  0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  5248  0CE7  00A7               	movwf	AnalogValue@channel
  5249                           
  5250                           ;functions.c: 860: ADCON0bits.CHS = channel;
  5251  0CE8  0827               	movf	AnalogValue@channel,w
  5252  0CE9  00A6               	movwf	??_AnalogValue
  5253  0CEA  0DA6               	rlf	??_AnalogValue,f
  5254  0CEB  0DA6               	rlf	??_AnalogValue,f
  5255  0CEC  081F               	movf	31,w	;volatile
  5256  0CED  0626               	xorwf	??_AnalogValue,w
  5257  0CEE  39C3               	andlw	-61
  5258  0CEF  0626               	xorwf	??_AnalogValue,w
  5259  0CF0  009F               	movwf	31	;volatile
  5260                           
  5261                           ;functions.c: 861: ADCON0bits.ADON = 1;
  5262  0CF1  141F               	bsf	31,0	;volatile
  5263                           
  5264                           ;functions.c: 862: DelayDs(1);
  5265  0CF2  3001               	movlw	1
  5266  0CF3  00A0               	movwf	DelayDs@cnt
  5267  0CF4  3000               	movlw	0
  5268  0CF5  00A1               	movwf	DelayDs@cnt+1
  5269  0CF6  120A  158A  249E  120A  158A  	fcall	_DelayDs
  5270                           
  5271                           ;functions.c: 863: ADCON0bits.GO = 1;
  5272  0CFB  1283               	bcf	3,5	;RP0=0, select bank0
  5273  0CFC  1303               	bcf	3,6	;RP1=0, select bank0
  5274  0CFD  149F               	bsf	31,1	;volatile
  5275                           
  5276                           ;functions.c: 864: DelayDs(1);
  5277  0CFE  3001               	movlw	1
  5278  0CFF  00A0               	movwf	DelayDs@cnt
  5279  0D00  3000               	movlw	0
  5280  0D01  00A1               	movwf	DelayDs@cnt+1
  5281  0D02  120A  158A  249E  120A  158A  	fcall	_DelayDs
  5282  0D07                     l446:	
  5283                           ;functions.c: 865: while(ADCON0bits.GO);
  5284                           
  5285  0D07  1283               	bcf	3,5	;RP0=0, select bank0
  5286  0D08  1303               	bcf	3,6	;RP1=0, select bank0
  5287  0D09  189F               	btfsc	31,1	;volatile
  5288  0D0A  2D07               	goto	l446
  5289                           
  5290                           ;functions.c: 866: ADCON0bits.ADON = 0;
  5291  0D0B  101F               	bcf	31,0	;volatile
  5292                           
  5293                           ;functions.c: 867: return ADRESH;
  5294  0D0C  081E               	movf	30,w	;volatile
  5295  0D0D  0008               	return
  5296  0D0E                     __end_of_AnalogValue:	
  5297                           
  5298                           	psect	text28
  5299  0C9E                     __ptext28:	
  5300 ;; *************** function _DelayDs *****************
  5301 ;; Defined at:
  5302 ;;		line 471 in file "functions.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  cnt             2    0[BANK0 ] int 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;  i               2    4[BANK0 ] int 
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  1    wreg      void 
  5309 ;; Registers used:
  5310 ;;		wreg, status,2
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5316 ;;      Params:         0       2       0       0       0
  5317 ;;      Locals:         0       2       0       0       0
  5318 ;;      Temps:          0       2       0       0       0
  5319 ;;      Totals:         0       6       0       0       0
  5320 ;;Total ram usage:        6 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    2
  5323 ;; This function calls:
  5324 ;;		Nothing
  5325 ;; This function is called by:
  5326 ;;		_ReceivedPacketHandler
  5327 ;;		_Blink
  5328 ;;		_AnalogValue
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           
  5333                           ;psect for function _DelayDs
  5334  0C9E                     _DelayDs:	
  5335                           
  5336                           ;functions.c: 472: int i;
  5337                           ;functions.c: 473: for(i=0;i<cnt;i++){
  5338                           
  5339                           ;incstack = 0
  5340                           ; Regs used in _DelayDs: [wreg+status,2]
  5341  0C9E  1283               	bcf	3,5	;RP0=0, select bank0
  5342  0C9F  1303               	bcf	3,6	;RP1=0, select bank0
  5343  0CA0  01A4               	clrf	DelayDs@i
  5344  0CA1  01A5               	clrf	DelayDs@i+1
  5345  0CA2                     l376:	
  5346  0CA2  0825               	movf	DelayDs@i+1,w
  5347  0CA3  3A80               	xorlw	128
  5348  0CA4  00A2               	movwf	??_DelayDs
  5349  0CA5  0821               	movf	DelayDs@cnt+1,w
  5350  0CA6  3A80               	xorlw	128
  5351  0CA7  0222               	subwf	??_DelayDs,w
  5352  0CA8  1D03               	skipz
  5353  0CA9  2CAC               	goto	u1015
  5354  0CAA  0820               	movf	DelayDs@cnt,w
  5355  0CAB  0224               	subwf	DelayDs@i,w
  5356  0CAC                     u1015:	
  5357  0CAC  1803               	btfsc	3,0
  5358  0CAD  0008               	return
  5359                           
  5360                           ;functions.c: 474: _delay((unsigned long)((100)*(4000000/4000.0)));
  5361  0CAE  3082               	movlw	130
  5362  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  5363  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  5364  0CB1  00A3               	movwf	??_DelayDs+1
  5365  0CB2  30DD               	movlw	221
  5366  0CB3  00A2               	movwf	??_DelayDs
  5367  0CB4                     u2187:	
  5368  0CB4  0BA2               	decfsz	??_DelayDs,f
  5369  0CB5  2CB4               	goto	u2187
  5370  0CB6  0BA3               	decfsz	??_DelayDs+1,f
  5371  0CB7  2CB4               	goto	u2187
  5372  0CB8  3001               	movlw	1
  5373  0CB9  1283               	bcf	3,5	;RP0=0, select bank0
  5374  0CBA  1303               	bcf	3,6	;RP1=0, select bank0
  5375  0CBB  07A4               	addwf	DelayDs@i,f
  5376  0CBC  1803               	skipnc
  5377  0CBD  0AA5               	incf	DelayDs@i+1,f
  5378  0CBE  3000               	movlw	0
  5379  0CBF  07A5               	addwf	DelayDs@i+1,f
  5380  0CC0  2CA2               	goto	l376
  5381  0CC1                     __end_of_DelayDs:	
  5382                           
  5383                           	psect	text29
  5384  0F70                     __ptext29:	
  5385 ;; *************** function _ClockInit *****************
  5386 ;; Defined at:
  5387 ;;		line 6 in file "MCP79510.c"
  5388 ;; Parameters:    Size  Location     Type
  5389 ;;		None
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;		None
  5392 ;; Return value:  Size  Location     Type
  5393 ;;                  1    wreg      void 
  5394 ;; Registers used:
  5395 ;;		wreg, status,2, status,0, pclath, cstack
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5401 ;;      Params:         0       0       0       0       0
  5402 ;;      Locals:         0       0       0       0       0
  5403 ;;      Temps:          0       1       0       0       0
  5404 ;;      Totals:         0       1       0       0       0
  5405 ;;Total ram usage:        1 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    4
  5408 ;; This function calls:
  5409 ;;		_ReadSPI
  5410 ;;		_WriteSPI
  5411 ;; This function is called by:
  5412 ;;		_main
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           
  5417                           ;psect for function _ClockInit
  5418  0F70                     _ClockInit:	
  5419                           
  5420                           ;MCP79510.c: 8: RD4 = 0;
  5421                           
  5422                           ;incstack = 0
  5423                           ; Regs used in _ClockInit: [wreg+status,2+status,0+pclath+cstack]
  5424  0F70  1283               	bcf	3,5	;RP0=0, select bank0
  5425  0F71  1303               	bcf	3,6	;RP1=0, select bank0
  5426  0F72  1208               	bcf	8,4	;volatile
  5427                           
  5428                           ;MCP79510.c: 9: WriteSPI(0x12);
  5429  0F73  3012               	movlw	18
  5430  0F74  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5431                           
  5432                           ;MCP79510.c: 10: WriteSPI(0x01);
  5433  0F79  3001               	movlw	1
  5434  0F7A  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5435                           
  5436                           ;MCP79510.c: 11: WriteSPI(0x00);
  5437  0F7F  3000               	movlw	0
  5438  0F80  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5439                           
  5440                           ;MCP79510.c: 12: RD4 = 1;
  5441  0F85  1283               	bcf	3,5	;RP0=0, select bank0
  5442  0F86  1303               	bcf	3,6	;RP1=0, select bank0
  5443  0F87  1608               	bsf	8,4	;volatile
  5444                           
  5445                           ;MCP79510.c: 13: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5446  0F88  300C               	movlw	12
  5447  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  5448  0F8A  1303               	bcf	3,6	;RP1=0, select bank0
  5449  0F8B  00A3               	movwf	??_ClockInit
  5450  0F8C                     u2197:	
  5451  0F8C  0BA3               	decfsz	??_ClockInit,f
  5452  0F8D  2F8C               	goto	u2197
  5453  0F8E  0000               	nop
  5454                           
  5455                           ;MCP79510.c: 14: RD4 = 0;
  5456  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  5457  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  5458  0F91  1208               	bcf	8,4	;volatile
  5459                           
  5460                           ;MCP79510.c: 15: WriteSPI(0x12);
  5461  0F92  3012               	movlw	18
  5462  0F93  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5463                           
  5464                           ;MCP79510.c: 16: WriteSPI(0x02);
  5465  0F98  3002               	movlw	2
  5466  0F99  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5467                           
  5468                           ;MCP79510.c: 17: WriteSPI(0x00);
  5469  0F9E  3000               	movlw	0
  5470  0F9F  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5471                           
  5472                           ;MCP79510.c: 18: RD4 = 1;
  5473  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  5474  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  5475  0FA6  1608               	bsf	8,4	;volatile
  5476                           
  5477                           ;MCP79510.c: 19: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5478  0FA7  300C               	movlw	12
  5479  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  5480  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  5481  0FAA  00A3               	movwf	??_ClockInit
  5482  0FAB                     u2207:	
  5483  0FAB  0BA3               	decfsz	??_ClockInit,f
  5484  0FAC  2FAB               	goto	u2207
  5485  0FAD  0000               	nop
  5486                           
  5487                           ;MCP79510.c: 20: RD4 = 0;
  5488  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  5489  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  5490  0FB0  1208               	bcf	8,4	;volatile
  5491                           
  5492                           ;MCP79510.c: 21: WriteSPI(0x12);
  5493  0FB1  3012               	movlw	18
  5494  0FB2  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5495                           
  5496                           ;MCP79510.c: 22: WriteSPI(0x08);
  5497  0FB7  3008               	movlw	8
  5498  0FB8  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5499                           
  5500                           ;MCP79510.c: 23: WriteSPI(0x00);
  5501  0FBD  3000               	movlw	0
  5502  0FBE  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5503                           
  5504                           ;MCP79510.c: 24: RD4 = 1;
  5505  0FC3  1283               	bcf	3,5	;RP0=0, select bank0
  5506  0FC4  1303               	bcf	3,6	;RP1=0, select bank0
  5507  0FC5  1608               	bsf	8,4	;volatile
  5508                           
  5509                           ;MCP79510.c: 25: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5510  0FC6  300C               	movlw	12
  5511  0FC7  1283               	bcf	3,5	;RP0=0, select bank0
  5512  0FC8  1303               	bcf	3,6	;RP1=0, select bank0
  5513  0FC9  00A3               	movwf	??_ClockInit
  5514  0FCA                     u2217:	
  5515  0FCA  0BA3               	decfsz	??_ClockInit,f
  5516  0FCB  2FCA               	goto	u2217
  5517  0FCC  0000               	nop
  5518                           
  5519                           ;MCP79510.c: 26: RD4 = 0;
  5520  0FCD  1283               	bcf	3,5	;RP0=0, select bank0
  5521  0FCE  1303               	bcf	3,6	;RP1=0, select bank0
  5522  0FCF  1208               	bcf	8,4	;volatile
  5523                           
  5524                           ;MCP79510.c: 27: WriteSPI(0x12);
  5525  0FD0  3012               	movlw	18
  5526  0FD1  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5527                           
  5528                           ;MCP79510.c: 28: WriteSPI(0x01);
  5529  0FD6  3001               	movlw	1
  5530  0FD7  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5531                           
  5532                           ;MCP79510.c: 29: WriteSPI(0x80);
  5533  0FDC  3080               	movlw	128
  5534  0FDD  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5535                           
  5536                           ;MCP79510.c: 30: RD4 = 1;
  5537  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  5538  0FE3  1303               	bcf	3,6	;RP1=0, select bank0
  5539  0FE4  1608               	bsf	8,4	;volatile
  5540  0FE5                     l2521:	
  5541                           ;MCP79510.c: 32: while(1)
  5542                           
  5543                           
  5544                           ;MCP79510.c: 33: {
  5545                           ;MCP79510.c: 35: RD4 = 0;
  5546  0FE5  1283               	bcf	3,5	;RP0=0, select bank0
  5547  0FE6  1303               	bcf	3,6	;RP1=0, select bank0
  5548  0FE7  1208               	bcf	8,4	;volatile
  5549                           
  5550                           ;MCP79510.c: 36: WriteSPI(0x13);
  5551  0FE8  3013               	movlw	19
  5552  0FE9  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5553                           
  5554                           ;MCP79510.c: 37: WriteSPI(0x04);
  5555  0FEE  3004               	movlw	4
  5556  0FEF  120A  158A  23F9  120A  158A  	fcall	_WriteSPI
  5557                           
  5558                           ;MCP79510.c: 38: if((ReadSPI() & 0b00100000) != 0)
  5559  0FF4  120A  158A  23BE  120A  158A  	fcall	_ReadSPI
  5560  0FF9  3920               	andlw	32
  5561  0FFA  1903               	btfsc	3,2
  5562  0FFB  2FE5               	goto	l2521
  5563                           
  5564                           ;MCP79510.c: 39: {
  5565                           ;MCP79510.c: 40: RD4 = 1;
  5566  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  5567  0FFD  1303               	bcf	3,6	;RP1=0, select bank0
  5568  0FFE  1608               	bsf	8,4	;volatile
  5569                           
  5570                           ;MCP79510.c: 41: break;
  5571  0FFF  0008               	return
  5572  1000                     __end_of_ClockInit:	
  5573                           
  5574                           	psect	text30
  5575  0BBE                     __ptext30:	
  5576 ;; *************** function _ReadSPI *****************
  5577 ;; Defined at:
  5578 ;;		line 492 in file "functions.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;		None
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      unsigned char 
  5585 ;; Registers used:
  5586 ;;		wreg, status,2, status,0, pclath, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5592 ;;      Params:         0       0       0       0       0
  5593 ;;      Locals:         0       0       0       0       0
  5594 ;;      Temps:          0       0       0       0       0
  5595 ;;      Totals:         0       0       0       0       0
  5596 ;;Total ram usage:        0 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    3
  5599 ;; This function calls:
  5600 ;;		_WriteSPI
  5601 ;; This function is called by:
  5602 ;;		_RegisterRead
  5603 ;;		_ReadFIFO
  5604 ;;		_ClockInit
  5605 ;;		_ReadClock
  5606 ;;		_read_ram_id
  5607 ;;		_read_ram_status
  5608 ;;		_read_write_flash_ram
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           
  5613                           ;psect for function _ReadSPI
  5614  0BBE                     _ReadSPI:	
  5615                           
  5616                           ;functions.c: 494: WriteSPI(0x00);
  5617                           
  5618                           ;incstack = 0
  5619                           ; Regs used in _ReadSPI: [wreg+status,2+status,0+pclath+cstack]
  5620  0BBE  3000               	movlw	0
  5621  0BBF  120A  158A  23F9   	fcall	_WriteSPI
  5622                           
  5623                           ;functions.c: 495: return SSPBUF;
  5624  0BC2  1283               	bcf	3,5	;RP0=0, select bank0
  5625  0BC3  1303               	bcf	3,6	;RP1=0, select bank0
  5626  0BC4  0813               	movf	19,w	;volatile
  5627  0BC5  0008               	return
  5628  0BC6                     __end_of_ReadSPI:	
  5629                           
  5630                           	psect	text31
  5631  0BF9                     __ptext31:	
  5632 ;; *************** function _WriteSPI *****************
  5633 ;; Defined at:
  5634 ;;		line 480 in file "functions.c"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;  databyte        1    wreg     unsigned char 
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;  databyte        1    2[BANK0 ] unsigned char 
  5639 ;;  buffer          1    1[BANK0 ] unsigned char 
  5640 ;; Return value:  Size  Location     Type
  5641 ;;                  1    wreg      void 
  5642 ;; Registers used:
  5643 ;;		wreg
  5644 ;; Tracked objects:
  5645 ;;		On entry : 0/0
  5646 ;;		On exit  : 0/0
  5647 ;;		Unchanged: 0/0
  5648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5649 ;;      Params:         0       0       0       0       0
  5650 ;;      Locals:         0       2       0       0       0
  5651 ;;      Temps:          0       1       0       0       0
  5652 ;;      Totals:         0       3       0       0       0
  5653 ;;Total ram usage:        3 bytes
  5654 ;; Hardware stack levels used:    1
  5655 ;; Hardware stack levels required when called:    2
  5656 ;; This function calls:
  5657 ;;		Nothing
  5658 ;; This function is called by:
  5659 ;;		_ReadSPI
  5660 ;;		_RegisterRead
  5661 ;;		_RegisterSet
  5662 ;;		_WriteFIFO
  5663 ;;		_ClockInit
  5664 ;;		_ReadClock
  5665 ;;		_read_ram_id
  5666 ;;		_read_ram_status
  5667 ;;		_ram_bulk_erase
  5668 ;;		_ram_sector_erase
  5669 ;;		_read_write_flash_ram
  5670 ;;		_write_ram_status
  5671 ;;		_power_up_flash_ram
  5672 ;;		_power_down_flash_ram
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           
  5677                           ;psect for function _WriteSPI
  5678  0BF9                     _WriteSPI:	
  5679                           
  5680                           ;incstack = 0
  5681                           ; Regs used in _WriteSPI: [wreg]
  5682                           ;WriteSPI@databyte stored from wreg
  5683  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  5684  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  5685  0BFB  00A2               	movwf	WriteSPI@databyte
  5686                           
  5687                           ;functions.c: 482: unsigned char buffer;
  5688                           ;functions.c: 483: buffer = SSPBUF;
  5689  0BFC  0813               	movf	19,w	;volatile
  5690  0BFD  00A0               	movwf	??_WriteSPI
  5691  0BFE  0820               	movf	??_WriteSPI,w
  5692  0BFF  00A1               	movwf	WriteSPI@buffer
  5693                           
  5694                           ;functions.c: 484: PIR1bits.SSPIF=0;
  5695  0C00  118C               	bcf	12,3	;volatile
  5696                           
  5697                           ;functions.c: 485: SSPBUF = databyte;
  5698  0C01  0822               	movf	WriteSPI@databyte,w
  5699  0C02  0093               	movwf	19	;volatile
  5700  0C03                     l382:	
  5701                           ;functions.c: 486: while(PIR1bits.SSPIF == 0);
  5702                           
  5703  0C03  1D8C               	btfss	12,3	;volatile
  5704  0C04  2C03               	goto	l382
  5705                           
  5706                           ;functions.c: 487: PIR1bits.SSPIF = 0;
  5707  0C05  118C               	bcf	12,3	;volatile
  5708  0C06  0008               	return
  5709  0C07                     __end_of_WriteSPI:	
  5710                           
  5711                           	psect	text32
  5712  0634                     __ptext32:	
  5713 ;; *************** function _tc_int *****************
  5714 ;; Defined at:
  5715 ;;		line 786 in file "functions.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;		None
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;		None
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  1    wreg      void 
  5722 ;; Registers used:
  5723 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5729 ;;      Params:         0       0       0       0       0
  5730 ;;      Locals:         0       0       0       0       0
  5731 ;;      Temps:          7       0       0       0       0
  5732 ;;      Totals:         7       0       0       0       0
  5733 ;;Total ram usage:        7 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    1
  5736 ;; This function calls:
  5737 ;;		_TimerCounter
  5738 ;;		i1_OperationMode
  5739 ;; This function is called by:
  5740 ;;		Interrupt level 1
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           
  5745                           ;psect for function _tc_int
  5746  0634                     _tc_int:	
  5747                           
  5748                           ;functions.c: 789: if((RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2)){
  5749  0634  1A86               	btfsc	6,5	;volatile
  5750  0635  2E4C               	goto	i1l2799
  5751  0636  087C               	movf	_intBlinkCycle,w
  5752  0637  047D               	iorwf	_intBlinkCycle+1,w
  5753  0638  1D03               	btfss	3,2
  5754  0639  2E4C               	goto	i1l2799
  5755  063A  120A  158A  23CE  120A  118A  	fcall	i1_OperationMode
  5756  063F  00F5               	movwf	??_tc_int
  5757  0640  3002               	movlw	2
  5758  0641  0275               	subwf	??_tc_int,w
  5759  0642  1803               	skipnc
  5760  0643  2E4C               	goto	i1l2799
  5761                           
  5762                           ;functions.c: 790: intBlinkCycle = 1;
  5763  0644  3001               	movlw	1
  5764  0645  00FC               	movwf	_intBlinkCycle
  5765  0646  3000               	movlw	0
  5766  0647  00FD               	movwf	_intBlinkCycle+1
  5767                           
  5768                           ;functions.c: 791: intBlinkCounter = 0;
  5769  0648  1683               	bsf	3,5	;RP0=1, select bank1
  5770  0649  1303               	bcf	3,6	;RP1=0, select bank1
  5771  064A  01D9               	clrf	_intBlinkCounter^(0+128)
  5772  064B  01DA               	clrf	(_intBlinkCounter+1)^(0+128)
  5773  064C                     i1l2799:	
  5774                           
  5775                           ;functions.c: 793: }
  5776                           ;functions.c: 796: if(TMR1IF ==1){
  5777  064C  1283               	bcf	3,5	;RP0=0, select bank0
  5778  064D  1303               	bcf	3,6	;RP1=0, select bank0
  5779  064E  1C0C               	btfss	12,0	;volatile
  5780  064F  2EEB               	goto	L4
  5781                           
  5782                           ;functions.c: 797: TMR1ON = 0;
  5783  0650  1010               	bcf	16,0	;volatile
  5784                           
  5785                           ;functions.c: 798: TMR1H = 0x0B;
  5786  0651  300B               	movlw	11
  5787  0652  008F               	movwf	15	;volatile
  5788                           
  5789                           ;functions.c: 799: TMR1L = 0xDB;
  5790  0653  30DB               	movlw	219
  5791  0654  008E               	movwf	14	;volatile
  5792                           
  5793                           ;functions.c: 801: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
  5794  0655  037C               	decf	_intBlinkCycle,w
  5795  0656  047D               	iorwf	_intBlinkCycle+1,w
  5796  0657  1D03               	btfss	3,2
  5797  0658  2E7F               	goto	i1l2817
  5798  0659  1683               	bsf	3,5	;RP0=1, select bank1
  5799  065A  1303               	bcf	3,6	;RP1=0, select bank1
  5800  065B  0864               	movf	(_intNumberOfBlinks+1)^(0+128),w
  5801  065C  00F6               	movwf	??_tc_int+1
  5802  065D  0863               	movf	_intNumberOfBlinks^(0+128),w
  5803  065E  00F5               	movwf	??_tc_int
  5804  065F  1003               	clrc
  5805  0660  0DF5               	rlf	??_tc_int,f
  5806  0661  0DF6               	rlf	??_tc_int+1,f
  5807  0662  085A               	movf	(_intBlinkCounter+1)^(0+128),w
  5808  0663  3A80               	xorlw	128
  5809  0664  00F7               	movwf	??_tc_int+2
  5810  0665  0876               	movf	??_tc_int+1,w
  5811  0666  3A80               	xorlw	128
  5812  0667  0277               	subwf	??_tc_int+2,w
  5813  0668  1D03               	skipz
  5814  0669  2E6C               	goto	u181_25
  5815  066A  0875               	movf	??_tc_int,w
  5816  066B  0259               	subwf	_intBlinkCounter^(0+128),w
  5817  066C                     u181_25:	
  5818  066C  1803               	skipnc
  5819  066D  2E7F               	goto	i1l2817
  5820                           
  5821                           ;functions.c: 802: intBlinkCounter++;
  5822  066E  3001               	movlw	1
  5823  066F  1683               	bsf	3,5	;RP0=1, select bank1
  5824  0670  1303               	bcf	3,6	;RP1=0, select bank1
  5825  0671  07D9               	addwf	_intBlinkCounter^(0+128),f
  5826  0672  1803               	skipnc
  5827  0673  0ADA               	incf	(_intBlinkCounter+1)^(0+128),f
  5828  0674  3000               	movlw	0
  5829  0675  07DA               	addwf	(_intBlinkCounter+1)^(0+128),f
  5830                           
  5831                           ;functions.c: 804: if(RC1 == 0)
  5832  0676  1283               	bcf	3,5	;RP0=0, select bank0
  5833  0677  1303               	bcf	3,6	;RP1=0, select bank0
  5834  0678  1887               	btfsc	7,1	;volatile
  5835  0679  2E7C               	goto	i1l435
  5836                           
  5837                           ;functions.c: 805: RC1 = 1;
  5838  067A  1487               	bsf	7,1	;volatile
  5839  067B  2E9D               	goto	i1l2825
  5840  067C                     i1l435:	
  5841                           
  5842                           ;functions.c: 806: else if(RC1 == 1)
  5843  067C  1C87               	btfss	7,1	;volatile
  5844  067D  2E9D               	goto	i1l2825
  5845  067E  2E9C               	goto	L3
  5846  067F                     i1l2817:	
  5847                           ;functions.c: 808: }
  5848                           
  5849                           ;functions.c: 807: RC1 = 0;
  5850                           
  5851                           
  5852                           ;functions.c: 810: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
  5853  067F  037C               	decf	_intBlinkCycle,w
  5854  0680  047D               	iorwf	_intBlinkCycle+1,w
  5855  0681  1D03               	btfss	3,2
  5856  0682  2E9D               	goto	i1l2825
  5857  0683  1683               	bsf	3,5	;RP0=1, select bank1
  5858  0684  1303               	bcf	3,6	;RP1=0, select bank1
  5859  0685  0864               	movf	(_intNumberOfBlinks+1)^(0+128),w
  5860  0686  00F6               	movwf	??_tc_int+1
  5861  0687  0863               	movf	_intNumberOfBlinks^(0+128),w
  5862  0688  00F5               	movwf	??_tc_int
  5863  0689  1003               	clrc
  5864  068A  0DF5               	rlf	??_tc_int,f
  5865  068B  0DF6               	rlf	??_tc_int+1,f
  5866  068C  085A               	movf	(_intBlinkCounter+1)^(0+128),w
  5867  068D  3A80               	xorlw	128
  5868  068E  00F7               	movwf	??_tc_int+2
  5869  068F  0876               	movf	??_tc_int+1,w
  5870  0690  3A80               	xorlw	128
  5871  0691  0277               	subwf	??_tc_int+2,w
  5872  0692  1D03               	skipz
  5873  0693  2E96               	goto	u185_25
  5874  0694  0875               	movf	??_tc_int,w
  5875  0695  0259               	subwf	_intBlinkCounter^(0+128),w
  5876  0696                     u185_25:	
  5877  0696  1C03               	skipc
  5878  0697  2E9D               	goto	i1l2825
  5879                           
  5880                           ;functions.c: 811: intBlinkCycle = 0;
  5881  0698  01FC               	clrf	_intBlinkCycle
  5882  0699  01FD               	clrf	_intBlinkCycle+1
  5883                           
  5884                           ;functions.c: 812: RC1 = 0;
  5885  069A  1283               	bcf	3,5	;RP0=0, select bank0
  5886  069B  1303               	bcf	3,6	;RP1=0, select bank0
  5887  069C                     L3:	
  5888  069C  1087               	bcf	7,1	;volatile
  5889  069D                     i1l2825:	
  5890                           
  5891                           ;functions.c: 813: }
  5892                           ;functions.c: 816: intHalfSecondCounter++;
  5893  069D  3001               	movlw	1
  5894  069E  1683               	bsf	3,5	;RP0=1, select bank1
  5895  069F  1303               	bcf	3,6	;RP1=0, select bank1
  5896  06A0  07DD               	addwf	_intHalfSecondCounter^(0+128),f
  5897  06A1  1803               	skipnc
  5898  06A2  0ADE               	incf	(_intHalfSecondCounter+1)^(0+128),f
  5899  06A3  3000               	movlw	0
  5900  06A4  07DE               	addwf	(_intHalfSecondCounter+1)^(0+128),f
  5901                           
  5902                           ;functions.c: 817: if(intHalfSecondCounter>=2)
  5903  06A5  085E               	movf	(_intHalfSecondCounter+1)^(0+128),w
  5904  06A6  3A80               	xorlw	128
  5905  06A7  00FF               	movwf	127
  5906  06A8  3080               	movlw	128
  5907  06A9  027F               	subwf	127,w
  5908  06AA  1D03               	skipz
  5909  06AB  2EAE               	goto	u186_25
  5910  06AC  3002               	movlw	2
  5911  06AD  025D               	subwf	_intHalfSecondCounter^(0+128),w
  5912  06AE                     u186_25:	
  5913  06AE  1C03               	skipc
  5914  06AF  2EBF               	goto	i1l2835
  5915                           
  5916                           ;functions.c: 818: {
  5917                           ;functions.c: 819: intHalfSecondCounter = 0;
  5918  06B0  1683               	bsf	3,5	;RP0=1, select bank1
  5919  06B1  1303               	bcf	3,6	;RP1=0, select bank1
  5920  06B2  01DD               	clrf	_intHalfSecondCounter^(0+128)
  5921  06B3  01DE               	clrf	(_intHalfSecondCounter+1)^(0+128)
  5922                           
  5923                           ;functions.c: 820: intSecondCounter++;
  5924  06B4  3001               	movlw	1
  5925  06B5  07E1               	addwf	_intSecondCounter^(0+128),f
  5926  06B6  1803               	skipnc
  5927  06B7  0AE2               	incf	(_intSecondCounter+1)^(0+128),f
  5928  06B8  3000               	movlw	0
  5929  06B9  07E2               	addwf	(_intSecondCounter+1)^(0+128),f
  5930                           
  5931                           ;functions.c: 821: TimerCounter();
  5932  06BA  120A  158A  259A  120A  118A  	fcall	_TimerCounter
  5933  06BF                     i1l2835:	
  5934                           
  5935                           ;functions.c: 822: }
  5936                           ;functions.c: 823: if(intSecondCounter >=60)
  5937  06BF  1683               	bsf	3,5	;RP0=1, select bank1
  5938  06C0  1303               	bcf	3,6	;RP1=0, select bank1
  5939  06C1  0862               	movf	(_intSecondCounter+1)^(0+128),w
  5940  06C2  3A80               	xorlw	128
  5941  06C3  00FF               	movwf	127
  5942  06C4  3080               	movlw	128
  5943  06C5  027F               	subwf	127,w
  5944  06C6  1D03               	skipz
  5945  06C7  2ECA               	goto	u187_25
  5946  06C8  303C               	movlw	60
  5947  06C9  0261               	subwf	_intSecondCounter^(0+128),w
  5948  06CA                     u187_25:	
  5949  06CA  1C03               	skipc
  5950  06CB  2ED6               	goto	i1l2841
  5951                           
  5952                           ;functions.c: 824: {
  5953                           ;functions.c: 825: intSecondCounter = 0;
  5954  06CC  1683               	bsf	3,5	;RP0=1, select bank1
  5955  06CD  1303               	bcf	3,6	;RP1=0, select bank1
  5956  06CE  01E1               	clrf	_intSecondCounter^(0+128)
  5957  06CF  01E2               	clrf	(_intSecondCounter+1)^(0+128)
  5958                           
  5959                           ;functions.c: 826: intMinuteCounter++;
  5960  06D0  3001               	movlw	1
  5961  06D1  07DF               	addwf	_intMinuteCounter^(0+128),f
  5962  06D2  1803               	skipnc
  5963  06D3  0AE0               	incf	(_intMinuteCounter+1)^(0+128),f
  5964  06D4  3000               	movlw	0
  5965  06D5  07E0               	addwf	(_intMinuteCounter+1)^(0+128),f
  5966  06D6                     i1l2841:	
  5967                           
  5968                           ;functions.c: 827: }
  5969                           ;functions.c: 828: if(intMinuteCounter >= 60)
  5970  06D6  1683               	bsf	3,5	;RP0=1, select bank1
  5971  06D7  1303               	bcf	3,6	;RP1=0, select bank1
  5972  06D8  0860               	movf	(_intMinuteCounter+1)^(0+128),w
  5973  06D9  3A80               	xorlw	128
  5974  06DA  00FF               	movwf	127
  5975  06DB  3080               	movlw	128
  5976  06DC  027F               	subwf	127,w
  5977  06DD  1D03               	skipz
  5978  06DE  2EE1               	goto	u188_25
  5979  06DF  303C               	movlw	60
  5980  06E0  025F               	subwf	_intMinuteCounter^(0+128),w
  5981  06E1                     u188_25:	
  5982  06E1  1C03               	skipc
  5983  06E2  2EE7               	goto	i1l2845
  5984                           
  5985                           ;functions.c: 829: {
  5986                           ;functions.c: 830: intMinuteCounter = 0;
  5987  06E3  1683               	bsf	3,5	;RP0=1, select bank1
  5988  06E4  1303               	bcf	3,6	;RP1=0, select bank1
  5989  06E5  01DF               	clrf	_intMinuteCounter^(0+128)
  5990  06E6  01E0               	clrf	(_intMinuteCounter+1)^(0+128)
  5991  06E7                     i1l2845:	
  5992                           
  5993                           ;functions.c: 831: }
  5994                           ;functions.c: 834: TMR1ON = 1;
  5995  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  5996  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  5997  06E9  1410               	bsf	16,0	;volatile
  5998                           
  5999                           ;functions.c: 835: }
  6000                           ;functions.c: 836: TMR1IF = 0;
  6001  06EA  100C               	bcf	12,0	;volatile
  6002  06EB                     L4:	
  6003                           
  6004                           ;functions.c: 837: RBIF = 0;
  6005  06EB  100B               	bcf	11,0	;volatile
  6006                           
  6007                           ;functions.c: 838: GIE = 1;
  6008  06EC  178B               	bsf	11,7	;volatile
  6009                           
  6010                           ;functions.c: 839: return;
  6011  06ED  087B               	movf	??_tc_int+6,w
  6012  06EE  00FF               	movwf	127
  6013  06EF  087A               	movf	??_tc_int+5,w
  6014  06F0  008A               	movwf	10
  6015  06F1  0879               	movf	??_tc_int+4,w
  6016  06F2  0084               	movwf	4
  6017  06F3  0E78               	swapf	(??_tc_int+3)^(0+-128),w
  6018  06F4  0083               	movwf	3
  6019  06F5  0EFE               	swapf	126,f
  6020  06F6  0E7E               	swapf	126,w
  6021  06F7  0009               	retfie
  6022  06F8                     __end_of_tc_int:	
  6023                           
  6024                           	psect	intentry
  6025  0004                     __pintentry:	
  6026                           ;incstack = 0
  6027 ;; hardware stack exceeded
  6028                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6029                           
  6030  0004                     interrupt_function:	
  6031  007E                     saved_w	set	btemp
  6032  0004  00FE               	movwf	btemp
  6033  0005  0E03               	swapf	3,w
  6034  0006  00F8               	movwf	??_tc_int+3
  6035  0007  0804               	movf	4,w
  6036  0008  00F9               	movwf	??_tc_int+4
  6037  0009  080A               	movf	10,w
  6038  000A  00FA               	movwf	??_tc_int+5
  6039  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6040  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6041  000D  087F               	movf	btemp+1,w
  6042  000E  00FB               	movwf	??_tc_int+6
  6043  000F  120A  118A  2E34   	ljmp	_tc_int
  6044                           
  6045                           	psect	text33
  6046  0BCE                     __ptext33:	
  6047 ;; *************** function i1_OperationMode *****************
  6048 ;; Defined at:
  6049 ;;		line 919 in file "functions.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;		None
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;  OperationMod    1    1[COMMON] unsigned char 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      unsigned char 
  6056 ;; Registers used:
  6057 ;;		wreg, status,2
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6063 ;;      Params:         0       0       0       0       0
  6064 ;;      Locals:         1       0       0       0       0
  6065 ;;      Temps:          1       0       0       0       0
  6066 ;;      Totals:         2       0       0       0       0
  6067 ;;Total ram usage:        2 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; This function calls:
  6070 ;;		Nothing
  6071 ;; This function is called by:
  6072 ;;		_tc_int
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           
  6077                           ;psect for function i1_OperationMode
  6078  0BCE                     i1_OperationMode:	
  6079                           
  6080                           ;functions.c: 921: unsigned char bracketStatus;
  6081                           ;functions.c: 922: bracketStatus = ((~PORTB) & 0b00000111) ;
  6082                           
  6083                           ;incstack = 0
  6084 ;; hardware stack exceeded
  6085                           ; Regs used in i1_OperationMode: [wreg+status,2]
  6086  0BCE  1283               	bcf	3,5	;RP0=0, select bank0
  6087  0BCF  1303               	bcf	3,6	;RP1=0, select bank0
  6088  0BD0  0906               	comf	6,w	;volatile
  6089  0BD1  3907               	andlw	7
  6090  0BD2  00F0               	movwf	??i1_OperationMode
  6091  0BD3  0870               	movf	??i1_OperationMode,w
  6092  0BD4  00F1               	movwf	i1OperationMode@bracketStatus
  6093                           
  6094                           ;functions.c: 924: return 6;
  6095  0BD5  3006               	movlw	6
  6096  0BD6  0008               	return
  6097  0BD7                     __end_ofi1_OperationMode:	
  6098                           
  6099                           	psect	text34
  6100  0D9A                     __ptext34:	
  6101 ;; *************** function _TimerCounter *****************
  6102 ;; Defined at:
  6103 ;;		line 375 in file "functions.c"
  6104 ;; Parameters:    Size  Location     Type
  6105 ;;		None
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;  i               2    3[COMMON] int 
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  1    wreg      void 
  6110 ;; Registers used:
  6111 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6117 ;;      Params:         0       0       0       0       0
  6118 ;;      Locals:         2       0       0       0       0
  6119 ;;      Temps:          3       0       0       0       0
  6120 ;;      Totals:         5       0       0       0       0
  6121 ;;Total ram usage:        5 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		_tc_int
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           
  6131                           ;psect for function _TimerCounter
  6132  0D9A                     _TimerCounter:	
  6133                           
  6134                           ;functions.c: 377: for (int i = 0; i < 5; i++)
  6135                           
  6136                           ;incstack = 0
  6137 ;; hardware stack exceeded
  6138                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  6139  0D9A  01F3               	clrf	TimerCounter@i
  6140  0D9B  01F4               	clrf	TimerCounter@i+1
  6141  0D9C                     L5:	
  6142  0D9C  0874               	movf	TimerCounter@i+1,w
  6143  0D9D  3A80               	xorlw	128
  6144  0D9E  00FF               	movwf	127
  6145  0D9F  3080               	movlw	128
  6146  0DA0  027F               	subwf	127,w
  6147  0DA1  1D03               	skipz
  6148  0DA2  2DA5               	goto	u164_25
  6149  0DA3  3005               	movlw	5
  6150  0DA4  0273               	subwf	TimerCounter@i,w
  6151  0DA5                     u164_25:	
  6152  0DA5  1803               	btfsc	3,0
  6153  0DA6  0008               	return
  6154                           
  6155                           ;functions.c: 378: {
  6156                           ;functions.c: 379: if(intClockTimer[i]>0)
  6157  0DA7  0873               	movf	TimerCounter@i,w
  6158  0DA8  00F0               	movwf	??_TimerCounter
  6159  0DA9  0770               	addwf	??_TimerCounter,w
  6160  0DAA  3EC8               	addlw	(low (_intClockTimer| 0))& (0+255)
  6161  0DAB  0084               	movwf	4
  6162  0DAC  1383               	bcf	3,7	;select IRP bank1
  6163  0DAD  0800               	movf	0,w
  6164  0DAE  00F1               	movwf	??_TimerCounter+1
  6165  0DAF  0A84               	incf	4,f
  6166  0DB0  0800               	movf	0,w
  6167  0DB1  00F2               	movwf	??_TimerCounter+2
  6168  0DB2  0872               	movf	??_TimerCounter+2,w
  6169  0DB3  3A80               	xorlw	128
  6170  0DB4  00FF               	movwf	127
  6171  0DB5  3080               	movlw	128
  6172  0DB6  027F               	subwf	127,w
  6173  0DB7  1D03               	skipz
  6174  0DB8  2DBB               	goto	u165_25
  6175  0DB9  3001               	movlw	1
  6176  0DBA  0271               	subwf	??_TimerCounter+1,w
  6177  0DBB                     u165_25:	
  6178  0DBB  1C03               	skipc
  6179  0DBC  2DCF               	goto	i1l2681
  6180                           
  6181                           ;functions.c: 380: intClockTimer[i]--;
  6182  0DBD  0873               	movf	TimerCounter@i,w
  6183  0DBE  00F0               	movwf	??_TimerCounter
  6184  0DBF  0770               	addwf	??_TimerCounter,w
  6185  0DC0  3EC8               	addlw	(low (_intClockTimer| 0))& (0+255)
  6186  0DC1  0084               	movwf	4
  6187  0DC2  30FF               	movlw	255
  6188  0DC3  1383               	bcf	3,7	;select IRP bank1
  6189  0DC4  0780               	addwf	0,f
  6190  0DC5  0F84               	incfsz	4,f
  6191  0DC6  0800               	movf	0,w
  6192  0DC7  1803               	skipnc
  6193  0DC8  0A00               	incf	0,w
  6194  0DC9  00FF               	movwf	127
  6195  0DCA  30FF               	movlw	255
  6196  0DCB  077F               	addwf	127,w
  6197  0DCC  0080               	movwf	0
  6198  0DCD  0384               	decf	4,f
  6199  0DCE  2DD5               	goto	i1l2683
  6200  0DCF                     i1l2681:	
  6201                           
  6202                           ;functions.c: 381: else
  6203                           ;functions.c: 382: bTimerComplete[i] = 1;
  6204  0DCF  0873               	movf	TimerCounter@i,w
  6205  0DD0  3ED2               	addlw	(low (_bTimerComplete| 0))& (0+255)
  6206  0DD1  0084               	movwf	4
  6207  0DD2  1383               	bcf	3,7	;select IRP bank1
  6208  0DD3  0180               	clrf	0
  6209  0DD4  0A80               	incf	0,f
  6210  0DD5                     i1l2683:	
  6211  0DD5  3001               	movlw	1
  6212  0DD6  07F3               	addwf	TimerCounter@i,f
  6213  0DD7  1803               	skipnc
  6214  0DD8  0AF4               	incf	TimerCounter@i+1,f
  6215  0DD9  3000               	movlw	0
  6216  0DDA  07F4               	addwf	TimerCounter@i+1,f
  6217  0DDB  2D9C               	goto	L5
  6218  0DDC                     __end_of_TimerCounter:	
  6219  007E                     btemp	set	126	;btemp
  6220  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    39
    Data        3
    BSS         262
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     76      80
    BANK1            80      0      69
    BANK3            96      0      95
    BANK2            96      0      95

Pointer List with Targets:

    ReadClock@year	PTR unsigned char  size(1) Largest target is 1
		 -> main@year(BANK0[1]), 

    ReadClock@month	PTR unsigned char  size(1) Largest target is 1
		 -> main@month(BANK0[1]), 

    ReadClock@date	PTR unsigned char  size(1) Largest target is 1
		 -> main@date(BANK0[1]), 

    ReadClock@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), 

    ReadClock@minutes	PTR unsigned char  size(1) Largest target is 1
		 -> main@minutes(BANK0[1]), 

    ReadClock@seconds	PTR unsigned char  size(1) Largest target is 1
		 -> main@seconds(BANK0[1]), 

    ReceivedPacketHandler@Data	PTR unsigned char  size(1) Largest target is 30
		 -> TransiverReadFIFO@ReceivedString(BANK0[30]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_TimerCounter

Critical Paths under _main in BANK0

    _main->_TransiverReadFIFO
    _TransiverToReceive->_FindChannel
    _TransiverReadFIFO->_ReceivedPacketHandler
    _ReceivedPacketHandler->_TransmittPacket
    _TransiverInit->_FindChannel
    _Blink->_DelayDs
    _ReadClock->___bmul
    _Mode_5->_TransmittPacket
    _Mode_4->_TransmittPacket
    _TransmittPacket->_FindChannel
    _WriteFIFO->_WriteSPI
    _FindChannel->_SetRFMode
    _SetRFMode->_RegisterSet
    _RegisterSet->_RegisterRead
    _RegisterRead->_WriteSPI
    _Mode_1->_DarknessCheck
    _LightWithSensController->_DarknessCheck
    _DarknessCheck->_AnalogValue
    _AnalogValue->_DelayDs
    _ClockInit->_WriteSPI
    _ReadSPI->_WriteSPI

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0   79915
                                             65 BANK0     11    11      0
                          _ClockInit
                             _Mode_0
                             _Mode_1
                             _Mode_2
                             _Mode_4
                             _Mode_5
                      _OperationMode
                            _PICInit
                          _ReadClock
                      _TransiverInit
                  _TransiverReadFIFO
                 _TransiverToReceive
                    _TransmittPacket
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         3     2      1     620
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _TransiverToReceive                                   2     2      0    9949
                                             21 BANK0      2     2      0
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (1) _TransiverReadFIFO                                   36    36      0   17074
                                             29 BANK0     36    36      0
                           _ReadFIFO
              _ReceivedPacketHandler
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _ReceivedPacketHandler                                2     2      0   13826
                                             27 BANK0      2     2      0
                        _AnalogValue
                      _DarknessCheck
                            _DelayDs
                      _OperationMode
                    _TransmittPacket
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0       1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadFIFO                                             2     2      0      46
                                              3 BANK0      2     2      0
                            _ReadSPI
 ---------------------------------------------------------------------------------
 (1) _TransiverInit                                        1     1      0   10167
                                             21 BANK0      1     1      0
                              _Blink
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _Blink                                                5     3      2     924
                                              6 BANK0      5     3      2
                            _DelayDs
 ---------------------------------------------------------------------------------
 (1) _ReadClock                                           20    15      5    1551
                                              4 BANK0     20    15      5
                            _ReadSPI
                           _WriteSPI
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     476
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _PICInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mode_5                                               1     1      0   12587
                                             27 BANK0      1     1      0
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (1) _Mode_4                                               0     0      0   12587
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (1) _TransmittPacket                                      6     5      1   10999
                                             21 BANK0      6     5      1
                        _AnalogValue (ARG)
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                          _WriteFIFO
                        _eeprom_read (ARG)
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _WriteFIFO                                            1     1      0      45
                                              3 BANK0      1     1      0
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _FindChannel                                          7     7      0    4734
                                             14 BANK0      7     7      0
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _SetRFMode                                            3     3      0    2321
                                             11 BANK0      3     3      0
                       _RegisterRead
                        _RegisterSet
 ---------------------------------------------------------------------------------
 (3) _RegisterSet                                          4     3      1    2074
                                              7 BANK0      4     3      1
                       _RegisterRead (ARG)
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _RegisterRead                                         4     4      0     114
                                              3 BANK0      4     4      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (1) _Mode_2                                               0     0      0    1588
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (1) _Mode_1                                               0     0      0     882
                      _DarknessCheck
 ---------------------------------------------------------------------------------
 (1) _Mode_0                                               0     0      0    1588
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (2) _LightWithSensController                              0     0      0    1588
                      _DarknessCheck
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _timerFunction                                        5     1      4     706
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _DarknessCheck                                        2     2      0     882
                                              8 BANK0      2     2      0
                        _AnalogValue
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _AnalogValue                                          2     2      0     836
                                              6 BANK0      2     2      0
                            _DelayDs
 ---------------------------------------------------------------------------------
 (3) _DelayDs                                              6     4      2     814
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            1     1      0      46
                                              3 BANK0      1     1      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _ReadSPI                                              0     0      0      23
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _WriteSPI                                             3     3      0      23
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _tc_int                                               7     7      0     113
                                              5 COMMON     7     7      0
                       _TimerCounter
                    i1_OperationMode
 ---------------------------------------------------------------------------------
 (10) i1_OperationMode                                     2     2      0       1
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _TimerCounter                                        5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClockInit
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _Mode_0
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_1
     _DarknessCheck
       _AnalogValue
         _DelayDs
       _eeprom_read
   _Mode_2
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_4
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _Mode_5
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _OperationMode
   _PICInit
   _ReadClock
     _ReadSPI
       _WriteSPI
     _WriteSPI
     ___bmul
   _TransiverInit
     _Blink
       _DelayDs
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
   _TransiverReadFIFO
     _ReadFIFO
       _ReadSPI
         _WriteSPI
     _ReceivedPacketHandler
       _AnalogValue
         _DelayDs
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _DelayDs
       _OperationMode
       _TransmittPacket
         _AnalogValue (ARG)
           _DelayDs
         _FindChannel (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
         _WriteFIFO (ARG)
           _WriteSPI
         _eeprom_read (ARG)
         _timerFunction (ARG)
       _eeprom_read
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _TransiverToReceive
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _TransmittPacket
     _AnalogValue (ARG)
       _DelayDs
     _FindChannel (ARG)
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead (ARG)
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode (ARG)
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _WriteFIFO (ARG)
       _WriteSPI
     _eeprom_read (ARG)
     _timerFunction (ARG)
   _eeprom_write

 _tc_int (ROOT)
   _TimerCounter
   i1_OperationMode

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      5F       9       99.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      5F      11       99.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      45       7       86.3%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4C      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     161      12        0.0%
ABS                  0      0     161       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Feb 06 22:18:21 2017

                      __CFG_CP$ON 0000                                 pc 0002        __size_of_TransiverReadFIFO 0067  
           _bTransiverModeReceive 006E                    ___bmul@product 0022                       _SSPSTATbits 0094  
                              _RD 0C60                       __CFG_CPD$ON 0000                                _WR 0C61  
                              fsr 0004                               l333 0BF7                               l317 0788  
                             l406 0F6C                               l352 07E7                               l328 0C9A  
                             l370 0E65                               l290 01FD                               l283 0310  
                             l382 0C03                               l446 0D07                               l367 0E5F  
                             l287 01D3                               l376 0CA2                               l633 0CC7  
                             l289 01E8                               l655 0D3A                               _GIE 005F  
                             _RA1 0029                               _RB0 0030                               _RB1 0031  
                             _RC0 0038                               _RA4 002C                               _RC1 0039  
                             _RB3 0033                               _RA5 002D                               _RC2 003A  
                             _RB4 0034                               _RB5 0035                               _RD3 0043  
                             _RD4 0044             __end_of_DarknessCheck 0D37                               fsr0 0004  
                             indf 0000                  TransmittPacket@i 0038               __end_of_FindChannel 054A  
                 ??_timerFunction 0024                      __CFG_LVP$OFF 0000                              l2101 0F4B  
                            l2105 0F59                              l2141 0524                              l2125 0470  
                            l2301 0282                              l2143 04FE                              l2241 0D34  
                            l2145 0535                              l2321 02C7                              l2313 02B4  
                            l2243 0D35                              l2219 0791                              l2323 02CF  
                            l2307 029B                              l2237 0D1B                              l2093 0F11  
                            l2149 0548                              l2333 02E9                              l2095 0F1E  
                            l2521 0FE5                              l2345 07B7                              l2097 0F2D  
                            l2193 0734                              l2273 0212                              l2337 02F4  
                            l2355 07CC                              l2099 0F3C                              l2195 0747  
                            l2611 0C21                              l2275 0224                              l2381 07F3  
                            l2373 0D6D                              l2285 0245                              l2295 0269  
                            l2631 0E13                              l2617 0C45                              l2377 07ED  
                            l2633 0E26                              l2731 00BE                              l2485 062F  
                            l2661 0EE3                              l2665 0EEC                              l2657 0ECF  
                            l2595 0C8F                              l2771 0190                              l2763 0176  
                            l2783 01B4                              l2775 019D                              l2767 0183  
                            l2759 0169                              l2779 01AA       __size_of_TransiverToReceive 005C  
                            u1015 0CAC                              u1025 046E                              u1045 0509  
                            u1071 0CC5                              u1055 0546                              u2007 0078  
                            u2017 00A5                              u2107 0E30                              u2027 00B7  
                            u2117 0EF2                              u2037 00EE                              u2207 0FAB  
                            u2127 0718                              u2047 0105                              u2217 0FCA  
                            u2137 0751                              u1505 0429                              u2057 011C  
                            u2147 0795                              u1355 0D77                              u2067 0133  
                            u2157 07A2                              u1605 0EBF                              u2077 014A  
                            u2167 045B                              u1455 0370                              u2087 0163  
                            u2177 0530                              u1465 0395                              u2097 0DF7  
                            u2187 0CB4                              u1475 03BA                              u2197 0F8C  
                            u1485 03DF                              u1495 0404                              _RBIF 0058  
                            u1997 0066                   __end_of_PICInit 0E9A                              _WREN 0C62  
                  ??_eeprom_write 0021                       main@minutes 0067                       main@seconds 0066  
                            _main 004C                              _var1 0190                              _var2 0110  
                            btemp 007E                              start 0012                     __CFG_IESO$OFF 0000  
                 __end_of_DelayDs 0CC1  __size_of_LightWithSensController 0042                 ___bmul@multiplier 0023  
                 __end_of_ReadSPI 0BC6                             ?_main 0070                  ReadClock@month10 002F  
                           _EEADR 010D                     __CFG_WDTE$OFF 0000                  ReadClock@minutes 0024  
                ReadClock@seconds 0031                             _CARRY 0018                             _ANSEL 0188  
           __end_of_OperationMode 0BE0                             _T1CON 0010                    __CFG_DEBUG$OFF 0000  
                           i1l435 067C                             _TMR1H 000F                             _TMR1L 000E  
                           _PORTA 0005                             _PORTB 0006                             _PORTC 0007  
                           _PORTD 0008                             _PORTE 0009                             _TRISA 0085  
                           _TRISB 0086                             _TRISC 0087                             _TRISD 0088  
                           _SSPIE 0463                             _TRISE 0089                             _Blink 0D67  
                           _bDark 006D                    __CFG_FCMEN$OFF 0000           ??_ReceivedPacketHandler 003B  
                     _AnalogValue 0CE5                    __CFG_BOREN$OFF 0000                             pclath 000A  
                 ??_TransiverInit 0035                             status 0003                     _intBlinkCycle 007C  
                           wtemp0 007E                    WriteSPI@buffer 0021                  __end_of_ChannelP 0813  
                __end_of_ChannelR 0820                  __end_of_ChannelS 082D                    __CFG_MCLRE$OFF 0000  
                   _intClockTimer 00C8                 _intNumberOfBlinks 00E3                   __initialization 0015  
                    __end_of_main 01C1                  __end_of_ReadFIFO 0C15                     ReadFIFO@value 0024  
                     _FindChannel 044A                     ??_RegisterSet 0028                            ??_main 0061  
              __size_of_ClockInit 0090                            ?_Blink 0026                         ??_PICInit 0020  
                          _ADRESH 001E                            _EEDATA 010C                            _EECON1 018C  
                          _EECON2 018D                            _ANSELH 0189                  __end_of_WriteSPI 0C07  
                          i1l2681 0DCF                            i1l2841 06D6                            i1l2825 069D  
                          i1l2817 067F                            i1l2683 0DD5                            i1l2835 06BF  
                          i1l2845 06E7                            i1l2799 064C                            u164_25 0DA5  
                       ??_DelayDs 0022                            u165_25 0DBB                            u181_25 066C  
                          Blink@i 0029                            Blink@n 0026                            u185_25 0696  
                          u186_25 06AE                            u187_25 06CA                            u188_25 06E1  
                          _TMR1IF 0060                            _TMR1ON 0080      i1OperationMode@bracketStatus 0071  
              __size_of_ReadClock 0139                            _SSPBUF 0013                         ??_ReadSPI 0023  
                  __CFG_PWRTE$OFF 0000                            _Mode_0 07FC                            _Mode_1 0C7F  
                          _Mode_2 0BEC                            _Mode_4 0C15                            _Mode_5 0C37  
              __size_of_SetRFMode 006F              __size_of_eeprom_read 0024   TransiverReadFIFO@ReceivedString 003F  
                          ___bmul 07E9                            _tc_int 0634              __end_of_eeprom_write 0D67  
                          saved_w 007E               __end_of_RegisterSet 0C63                     ?_RegisterRead 0070  
              RegisterRead@adress 0026                __size_of_WriteFIFO 000C           __end_of__initialization 0048  
                 eeprom_read@addr 0021                 __end_of_ClockInit 1000           _LightWithSensController 07A7  
                   _bChannelFound 006C               ___bmul@multiplicand 0020                     __end_of_Blink 0D9A  
                  __pcstackCOMMON 0070                      __pidataBANK0 0003                      __pidataBANK1 0BBC  
                    _channelFound 00D7                 __end_of_ReadClock 044A                    _OPTION_REGbits 0081  
                         ??_Blink 0028                 __end_of_SetRFMode 0F70                 eeprom_write@value 0020  
                  ??_RegisterRead 0023                        __pbssBANK0 006C                        __pbssBANK1 00A0  
                      __pbssBANK2 0110                        __pbssBANK3 0190          __size_ofi1_OperationMode 0009  
                       ?_ReadFIFO 0070        timerFunction@intSetSeconds 0022                AnalogValue@channel 0027  
        __size_of_TransmittPacket 00AF                           ?_Mode_0 0070                           ?_Mode_1 0070  
                         ?_Mode_2 0070                           ?_Mode_4 0070                           ?_Mode_5 0070  
                      __pmaintext 004C                           ?___bmul 0020                        __pintentry 0004  
                         ?_tc_int 0070                         ?_WriteSPI 0070                 __end_of_WriteFIFO 0BEC  
                     _RegisterSet 0C49                           _PICInit 0E38                     ?_TimerCounter 0070  
      __end_of_TransiverToReceive 0E38             __end_of_timerFunction 0C37                      ?_AnalogValue 0070  
                      __stringtab 0800                        ??_ReadFIFO 0023    __size_of_ReceivedPacketHandler 0150  
   __end_of_ReceivedPacketHandler 0311                           _DelayDs 0C9E         ??_LightWithSensController 002A  
                   ReadClock@date 0026                     ReadClock@min1 0033                     ReadClock@sec1 0032  
                   ReadClock@hour 0025                     ReadClock@year 0028                           _ReadSPI 0BBE  
          __size_of_DarknessCheck 0029                   __size_of_Mode_0 0004                   __size_of_Mode_1 001F  
                 __size_of_Mode_2 000D                   __size_of_Mode_4 0010                   __size_of_Mode_5 0012  
      OperationMode@bracketStatus 0021             __size_of_eeprom_write 0030                   __size_of___bmul 0013  
                    ?_FindChannel 0070                         _ANSELbits 0188                        ??_WriteSPI 0020  
                 __size_of_tc_int 00C4                           __ptext1 0D37                           __ptext2 0DDC  
                         __ptext3 0E9A                           __ptext4 01C1                           __ptext5 0BD7  
                         __ptext6 0C07                           __ptext7 054A                           __ptext8 0D67  
                         __ptext9 0311                         _T1CONbits 0010                    ??_TimerCounter 0070  
                         clrloop0 0BC7              end_of_initialization 0048                      _eeprom_write 0D37  
           __end_of_TransiverInit 0634              TransmittPacket@value 0035              TransmittPacket@topic 003A  
          __size_of_OperationMode 0009                 ??i1_OperationMode 0070                  WriteSPI@databyte 0022  
            __end_of_RegisterRead 0C7F                 ??_TransmittPacket 0036                     WriteFIFO@Data 0023  
                 _intBlinkCounter 00D9                     _DarknessCheck 0D0E                     ??_eeprom_read 0020  
                 ReadClock@date10 002E                    __end_of_Mode_0 0800                    __end_of_Mode_1 0C9E  
                  __end_of_Mode_2 0BF9                    __end_of_Mode_4 0C25                    __end_of_Mode_5 0C49  
                       _ClockInit 0F70                   ReadClock@hour10 002D                    __end_of___bmul 07FC  
                 ReadClock@month1 0035                   ReadClock@year10 0030                    __end_of_tc_int 06F8  
                  ?_DarknessCheck 0070                     _OperationMode 0BD7               start_initialization 0015  
                       _ReadClock 0311             _intDarkCheckIntervall 00DB        DarknessCheck@darknessValue 0029  
                       _SetRFMode 0F01              __size_of_AnalogValue 0029                 __size_of_ReadFIFO 000E  
        __CFG_FOSC$INTRC_NOCLKOUT 0000                          ??_Mode_0 002A                          ??_Mode_1 002A  
                        ??_Mode_2 002A                          ??_Mode_4 003B                          ??_Mode_5 003B  
            __end_of_TimerCounter 0DDC                          ??___bmul 0021                        ?_ClockInit 0070  
             __end_of_eeprom_read 0CE5                     TimerCounter@i 0073                       __pdataBANK0 006F  
                     __pdataBANK1 00E3                          ??_tc_int 0075                      ?_RegisterSet 0027  
                  ?_OperationMode 0070              __size_of_FindChannel 0100                 RegisterRead@value 0025  
               __size_of_WriteSPI 000E                       __pbssCOMMON 007C                         ___latbits 0002  
                       _WriteFIFO 0BE0                     __pcstackBANK0 0020                          ?_PICInit 0070  
                      ?_ReadClock 0024                      _ReceivedData 00A0            SetRFMode@mcparam0_read 002D  
                      ?_SetRFMode 0070                  eeprom_write@addr 0022                          ?_DelayDs 0020  
               RegisterSet@adress 002A                          ?_ReadSPI 0070             __size_of_RegisterRead 001C  
              _TransiverToReceive 0DDC               ?_TransiverToReceive 0070                   ??_DarknessCheck 0028  
                       __pstrings 0800       timerFunction@intTimerNumber 0020                    __size_of_Blink 0033  
                      ?_WriteFIFO 0070                   i1_OperationMode 0BCE              ??_TransiverToReceive 0035  
                    _RegisterRead 0C63                   _TransmittPacket 06F8                 interrupt_function 0004  
                        _IOCBbits 0096                          DelayDs@i 0024                      FindChannel@i 0033  
           _ReceivedPacketHandler 01C1                         clear_ram0 0BC6                       _eeprom_read 0CC1  
                        _PIE1bits 008C                          _PIR1bits 000C                       ??_ClockInit 0023  
          __size_of_timerFunction 0012                   ??_OperationMode 0020                     SetRFMode@mode 002C  
                      _ADCON0bits 001F                       __stringbase 0805                        _ADCON1bits 009F  
                        _WPUBbits 0095                          _ChannelP 0806                          _ChannelR 0813  
                        _ChannelS 0820                         main@month 006A                       ??_ReadClock 0029  
                  ReadClock@date1 0037                    ReadClock@min10 002C                    ReadClock@sec10 002B  
                  ReadClock@hour1 0034                  __size_of_PICInit 0062          ?_LightWithSensController 0070  
                  ReadClock@month 0027                    ReadClock@year1 0036                       ??_SetRFMode 002B  
                        _ReadFIFO 0C07             __size_of_TimerCounter 0042                  __size_of_DelayDs 0023  
                __size_of_ReadSPI 0008                    _bTimerComplete 00D2                  _intMinuteCounter 00DF  
               _TransiverReadFIFO 0E9A                          _WriteSPI 0BF9                __end_of__stringtab 0806  
                _intSecondCounter 00E1                ?_TransiverReadFIFO 0070                        _ANSELHbits 0189  
         __end_ofi1_OperationMode 0BD7            __size_of_TransiverInit 00EA              __size_of_RegisterSet 001A  
                RegisterSet@value 0027                       ??_WriteFIFO 0023           __end_of_TransmittPacket 07A7  
                    _TimerCounter 0D9A                          __ptext10 07E9                          __ptext11 0E38  
                        __ptext20 0BEC                          __ptext12 0C37                          __ptext21 0C7F  
                        __ptext13 0C15                          __ptext30 0BBE                          __ptext22 07FC  
                        __ptext14 06F8                          __ptext31 0BF9                          __ptext23 07A7  
                        __ptext15 0BE0                          __ptext32 0634                          __ptext24 0C25  
                        __ptext16 044A                          __ptext33 0BCE                          __ptext25 0D0E  
                        __ptext17 0F01                          __ptext34 0D9A                          __ptext26 0CC1  
                        __ptext18 0C49                          __ptext27 0CE5                          __ptext19 0C63  
                        __ptext28 0C9E                          __ptext29 0F70               ??_TransiverReadFIFO 003D  
                   _timerFunction 0C25            ?_ReceivedPacketHandler 0070                     __size_of_main 0175  
                   _bValueFromPot 006F         __end_of_TransiverReadFIFO 0F01                          main@date 0069  
                        main@hour 0068                          main@year 006B                        DelayDs@cnt 0020  
                  FindChannel@cnt 0031   __end_of_LightWithSensController 07E9              _intHalfSecondCounter 00DD  
                      _INTCONbits 000B                TransiverReadFIFO@i 005D                TransiverReadFIFO@j 005F  
                  ?_timerFunction 0020                     ??_AnalogValue 0026                          intlevel1 0000  
                   _TransiverInit 054A                         stringcode 0800                        _OSCCONbits 008F  
                   ??_FindChannel 002E                  ?i1_OperationMode 0070                          stringdir 0800  
                        stringtab 0800                  ?_TransmittPacket 0035         ReceivedPacketHandler@Data 003C  
                   ?_eeprom_write 0020                    ?_TransiverInit 0070                      ?_eeprom_read 0070  
             __end_of_AnalogValue 0D0E                        _SSPCONbits 0014  
