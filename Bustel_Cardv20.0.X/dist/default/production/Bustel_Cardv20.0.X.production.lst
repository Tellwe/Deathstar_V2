

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Mar 19 14:16:52 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	intentry,global,class=CODE,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     
    67                           ; Version 1.40
    68                           ; Generated 01/12/2016 GMT
    69                           ; 
    70                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC16F887 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  000E                     	;# 
   116  000E                     	;# 
   117  000F                     	;# 
   118  0010                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0017                     	;# 
   127  0018                     	;# 
   128  0019                     	;# 
   129  001A                     	;# 
   130  001B                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001D                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  0081                     	;# 
   137  0085                     	;# 
   138  0086                     	;# 
   139  0087                     	;# 
   140  0088                     	;# 
   141  0089                     	;# 
   142  008C                     	;# 
   143  008D                     	;# 
   144  008E                     	;# 
   145  008F                     	;# 
   146  0090                     	;# 
   147  0091                     	;# 
   148  0092                     	;# 
   149  0093                     	;# 
   150  0093                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0095                     	;# 
   154  0096                     	;# 
   155  0097                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009A                     	;# 
   159  009B                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  0105                     	;# 
   165  0107                     	;# 
   166  0108                     	;# 
   167  0109                     	;# 
   168  010C                     	;# 
   169  010C                     	;# 
   170  010D                     	;# 
   171  010E                     	;# 
   172  010F                     	;# 
   173  0185                     	;# 
   174  0187                     	;# 
   175  0188                     	;# 
   176  0189                     	;# 
   177  018C                     	;# 
   178  018D                     	;# 
   179  0000                     	;# 
   180  0001                     	;# 
   181  0002                     	;# 
   182  0003                     	;# 
   183  0004                     	;# 
   184  0005                     	;# 
   185  0006                     	;# 
   186  0007                     	;# 
   187  0008                     	;# 
   188  0009                     	;# 
   189  000A                     	;# 
   190  000B                     	;# 
   191  000C                     	;# 
   192  000D                     	;# 
   193  000E                     	;# 
   194  000E                     	;# 
   195  000F                     	;# 
   196  0010                     	;# 
   197  0011                     	;# 
   198  0012                     	;# 
   199  0013                     	;# 
   200  0014                     	;# 
   201  0015                     	;# 
   202  0015                     	;# 
   203  0016                     	;# 
   204  0017                     	;# 
   205  0018                     	;# 
   206  0019                     	;# 
   207  001A                     	;# 
   208  001B                     	;# 
   209  001B                     	;# 
   210  001C                     	;# 
   211  001D                     	;# 
   212  001E                     	;# 
   213  001F                     	;# 
   214  0081                     	;# 
   215  0085                     	;# 
   216  0086                     	;# 
   217  0087                     	;# 
   218  0088                     	;# 
   219  0089                     	;# 
   220  008C                     	;# 
   221  008D                     	;# 
   222  008E                     	;# 
   223  008F                     	;# 
   224  0090                     	;# 
   225  0091                     	;# 
   226  0092                     	;# 
   227  0093                     	;# 
   228  0093                     	;# 
   229  0093                     	;# 
   230  0094                     	;# 
   231  0095                     	;# 
   232  0096                     	;# 
   233  0097                     	;# 
   234  0098                     	;# 
   235  0099                     	;# 
   236  009A                     	;# 
   237  009B                     	;# 
   238  009C                     	;# 
   239  009D                     	;# 
   240  009E                     	;# 
   241  009F                     	;# 
   242  0105                     	;# 
   243  0107                     	;# 
   244  0108                     	;# 
   245  0109                     	;# 
   246  010C                     	;# 
   247  010C                     	;# 
   248  010D                     	;# 
   249  010E                     	;# 
   250  010F                     	;# 
   251  0185                     	;# 
   252  0187                     	;# 
   253  0188                     	;# 
   254  0189                     	;# 
   255  018C                     	;# 
   256  018D                     	;# 
   257  0000                     	;# 
   258  0001                     	;# 
   259  0002                     	;# 
   260  0003                     	;# 
   261  0004                     	;# 
   262  0005                     	;# 
   263  0006                     	;# 
   264  0007                     	;# 
   265  0008                     	;# 
   266  0009                     	;# 
   267  000A                     	;# 
   268  000B                     	;# 
   269  000C                     	;# 
   270  000D                     	;# 
   271  000E                     	;# 
   272  000E                     	;# 
   273  000F                     	;# 
   274  0010                     	;# 
   275  0011                     	;# 
   276  0012                     	;# 
   277  0013                     	;# 
   278  0014                     	;# 
   279  0015                     	;# 
   280  0015                     	;# 
   281  0016                     	;# 
   282  0017                     	;# 
   283  0018                     	;# 
   284  0019                     	;# 
   285  001A                     	;# 
   286  001B                     	;# 
   287  001B                     	;# 
   288  001C                     	;# 
   289  001D                     	;# 
   290  001E                     	;# 
   291  001F                     	;# 
   292  0081                     	;# 
   293  0085                     	;# 
   294  0086                     	;# 
   295  0087                     	;# 
   296  0088                     	;# 
   297  0089                     	;# 
   298  008C                     	;# 
   299  008D                     	;# 
   300  008E                     	;# 
   301  008F                     	;# 
   302  0090                     	;# 
   303  0091                     	;# 
   304  0092                     	;# 
   305  0093                     	;# 
   306  0093                     	;# 
   307  0093                     	;# 
   308  0094                     	;# 
   309  0095                     	;# 
   310  0096                     	;# 
   311  0097                     	;# 
   312  0098                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009C                     	;# 
   317  009D                     	;# 
   318  009E                     	;# 
   319  009F                     	;# 
   320  0105                     	;# 
   321  0107                     	;# 
   322  0108                     	;# 
   323  0109                     	;# 
   324  010C                     	;# 
   325  010C                     	;# 
   326  010D                     	;# 
   327  010E                     	;# 
   328  010F                     	;# 
   329  0185                     	;# 
   330  0187                     	;# 
   331  0188                     	;# 
   332  0189                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  0000                     	;# 
   336  0001                     	;# 
   337  0002                     	;# 
   338  0003                     	;# 
   339  0004                     	;# 
   340  0005                     	;# 
   341  0006                     	;# 
   342  0007                     	;# 
   343  0008                     	;# 
   344  0009                     	;# 
   345  000A                     	;# 
   346  000B                     	;# 
   347  000C                     	;# 
   348  000D                     	;# 
   349  000E                     	;# 
   350  000E                     	;# 
   351  000F                     	;# 
   352  0010                     	;# 
   353  0011                     	;# 
   354  0012                     	;# 
   355  0013                     	;# 
   356  0014                     	;# 
   357  0015                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0017                     	;# 
   361  0018                     	;# 
   362  0019                     	;# 
   363  001A                     	;# 
   364  001B                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  001D                     	;# 
   368  001E                     	;# 
   369  001F                     	;# 
   370  0081                     	;# 
   371  0085                     	;# 
   372  0086                     	;# 
   373  0087                     	;# 
   374  0088                     	;# 
   375  0089                     	;# 
   376  008C                     	;# 
   377  008D                     	;# 
   378  008E                     	;# 
   379  008F                     	;# 
   380  0090                     	;# 
   381  0091                     	;# 
   382  0092                     	;# 
   383  0093                     	;# 
   384  0093                     	;# 
   385  0093                     	;# 
   386  0094                     	;# 
   387  0095                     	;# 
   388  0096                     	;# 
   389  0097                     	;# 
   390  0098                     	;# 
   391  0099                     	;# 
   392  009A                     	;# 
   393  009B                     	;# 
   394  009C                     	;# 
   395  009D                     	;# 
   396  009E                     	;# 
   397  009F                     	;# 
   398  0105                     	;# 
   399  0107                     	;# 
   400  0108                     	;# 
   401  0109                     	;# 
   402  010C                     	;# 
   403  010C                     	;# 
   404  010D                     	;# 
   405  010E                     	;# 
   406  010F                     	;# 
   407  0185                     	;# 
   408  0187                     	;# 
   409  0188                     	;# 
   410  0189                     	;# 
   411  018C                     	;# 
   412  018D                     	;# 
   413                           
   414                           	psect	idataBANK0
   415  1626                     __pidataBANK0:	
   416                           
   417                           ;initializer for _intNumberOfBlinks
   418  1626  3458               	retlw	88
   419  1627  3402               	retlw	2
   420                           
   421                           ;initializer for _bValueFromPot
   422  1628  3401               	retlw	1
   423                           
   424                           	psect	strings
   425  0800                     __pstrings:	
   426  0800                     stringtab:	
   427  0800                     __stringtab:	
   428  0800                     stringcode:	
   429                           ;	String table - string pointers are 1 byte each
   430                           
   431  0800                     stringdir:	
   432  0800  3008               	movlw	high stringdir
   433  0801  008A               	movwf	10
   434  0802  0804               	movf	4,w
   435  0803  0A84               	incf	4,f
   436  0804  0782               	addwf	2,f
   437  0805                     __stringbase:	
   438  0805  3400               	retlw	0
   439  0806                     __end_of__stringtab:	
   440  0806                     _ChannelP:	
   441  0806  343F               	retlw	63
   442  0807  3447               	retlw	71
   443  0808  344F               	retlw	79
   444  0809  3457               	retlw	87
   445  080A  345F               	retlw	95
   446  080B  3477               	retlw	119
   447  080C  347E               	retlw	126
   448  080D  347F               	retlw	127
   449  080E  3486               	retlw	134
   450  080F  3487               	retlw	135
   451  0810  3437               	retlw	55
   452  0811  3467               	retlw	103
   453  0812  346F               	retlw	111
   454  0813                     __end_of_ChannelP:	
   455  0813                     _ChannelR:	
   456  0813  344F               	retlw	79
   457  0814  3459               	retlw	89
   458  0815  3463               	retlw	99
   459  0816  346D               	retlw	109
   460  0817  3477               	retlw	119
   461  0818  3495               	retlw	149
   462  0819  349F               	retlw	159
   463  081A  349F               	retlw	159
   464  081B  34A9               	retlw	169
   465  081C  34A9               	retlw	169
   466  081D  3445               	retlw	69
   467  081E  3481               	retlw	129
   468  081F  348B               	retlw	139
   469  0820                     __end_of_ChannelR:	
   470  0820                     _ChannelS:	
   471  0820  3418               	retlw	24
   472  0821  341B               	retlw	27
   473  0822  341E               	retlw	30
   474  0823  3421               	retlw	33
   475  0824  3424               	retlw	36
   476  0825  342D               	retlw	45
   477  0826  347B               	retlw	123
   478  0827  3430               	retlw	48
   479  0828  347E               	retlw	126
   480  0829  3433               	retlw	51
   481  082A  3415               	retlw	21
   482  082B  3427               	retlw	39
   483  082C  342A               	retlw	42
   484  082D                     __end_of_ChannelS:	
   485  001F                     _ADCON0bits	set	31
   486  001E                     _ADRESH	set	30
   487  000B                     _INTCONbits	set	11
   488  000C                     _PIR1bits	set	12
   489  0005                     _PORTA	set	5
   490  0006                     _PORTB	set	6
   491  0007                     _PORTC	set	7
   492  0008                     _PORTD	set	8
   493  0009                     _PORTE	set	9
   494  0013                     _SSPBUF	set	19
   495  0014                     _SSPCONbits	set	20
   496  0010                     _T1CON	set	16
   497  0010                     _T1CONbits	set	16
   498  000F                     _TMR1H	set	15
   499  000E                     _TMR1L	set	14
   500  0018                     _CARRY	set	24
   501  005F                     _GIE	set	95
   502  0029                     _RA1	set	41
   503  002C                     _RA4	set	44
   504  002D                     _RA5	set	45
   505  0030                     _RB0	set	48
   506  0031                     _RB1	set	49
   507  0033                     _RB3	set	51
   508  0034                     _RB4	set	52
   509  0035                     _RB5	set	53
   510  0058                     _RBIF	set	88
   511  0038                     _RC0	set	56
   512  0039                     _RC1	set	57
   513  003A                     _RC2	set	58
   514  0043                     _RD3	set	67
   515  0044                     _RD4	set	68
   516  0060                     _TMR1IF	set	96
   517  0080                     _TMR1ON	set	128
   518  009F                     _ADCON1bits	set	159
   519  0096                     _IOCBbits	set	150
   520  0081                     _OPTION_REGbits	set	129
   521  008F                     _OSCCONbits	set	143
   522  008C                     _PIE1bits	set	140
   523  0094                     _SSPSTATbits	set	148
   524  0085                     _TRISA	set	133
   525  0086                     _TRISB	set	134
   526  0087                     _TRISC	set	135
   527  0088                     _TRISD	set	136
   528  0089                     _TRISE	set	137
   529  0095                     _WPUBbits	set	149
   530  0463                     _SSPIE	set	1123
   531  010D                     _EEADR	set	269
   532  010C                     _EEDATA	set	268
   533  0188                     _ANSEL	set	392
   534  0189                     _ANSELH	set	393
   535  0189                     _ANSELHbits	set	393
   536  0188                     _ANSELbits	set	392
   537  018C                     _EECON1	set	396
   538  018D                     _EECON2	set	397
   539  0C60                     _RD	set	3168
   540  0C61                     _WR	set	3169
   541  0C62                     _WREN	set	3170
   542  082D                     STR_1:	
   543  082D  344E               	retlw	78	;'N'
   544  082E  3431               	retlw	49	;'1'
   545  082F  3442               	retlw	66	;'B'
   546  0830  344C               	retlw	76	;'L'
   547  0831  3449               	retlw	73	;'I'
   548  0832  344E               	retlw	78	;'N'
   549  0833  344B               	retlw	75	;'K'
   550  0834  3400               	retlw	0
   551  0835                     STR_2:	
   552  0835  344E               	retlw	78	;'N'
   553  0836  3432               	retlw	50	;'2'
   554  0837  3442               	retlw	66	;'B'
   555  0838  344C               	retlw	76	;'L'
   556  0839  3449               	retlw	73	;'I'
   557  083A  344E               	retlw	78	;'N'
   558  083B  344B               	retlw	75	;'K'
   559  083C  3400               	retlw	0
   560                           
   561                           ; #config settings
   562  0000                     
   563                           	psect	cinit
   564  0015                     start_initialization:	
   565  0015                     __initialization:	
   566                           
   567                           ; Initialize objects allocated to BANK0
   568  0015  160A  118A  2626  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   569  001A  00EB               	movwf	__pdataBANK0& (0+127)
   570  001B  160A  118A  2627  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   571  0020  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   572  0021  160A  118A  2628  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   573  0026  00ED               	movwf	(__pdataBANK0+2)& (0+127)
   574                           
   575                           ; Clear objects allocated to BANK3
   576  0027  1783               	bsf	3,7	;select IRP bank2
   577  0028  3090               	movlw	low __pbssBANK3
   578  0029  0084               	movwf	4
   579  002A  30B8               	movlw	low (__pbssBANK3+40)
   580  002B  160A  118A  2635  120A  118A  	fcall	clear_ram0
   581                           
   582                           ; Clear objects allocated to BANK1
   583  0030  1383               	bcf	3,7	;select IRP bank0
   584  0031  30C2               	movlw	low __pbssBANK1
   585  0032  0084               	movwf	4
   586  0033  30CC               	movlw	low (__pbssBANK1+10)
   587  0034  160A  118A  2635  120A  118A  	fcall	clear_ram0
   588                           
   589                           ; Clear objects allocated to BANK0
   590  0039  3056               	movlw	low __pbssBANK0
   591  003A  0084               	movwf	4
   592  003B  306B               	movlw	low (__pbssBANK0+21)
   593  003C  160A  118A  2635   	fcall	clear_ram0
   594                           
   595                           ; Clear objects allocated to COMMON
   596  003F  01FC               	clrf	__pbssCOMMON& (0+127)
   597  0040  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   598  0041                     end_of_initialization:	
   599                           ;End of C runtime variable initialization code
   600                           
   601  0041                     __end_of__initialization:	
   602  0041  0183               	clrf	3
   603  0042  120A  158A  2D04   	ljmp	_main	;jump to C main() function
   604                           
   605                           	psect	bssCOMMON
   606  007C                     __pbssCOMMON:	
   607  007C                     _intBlinkCounter:	
   608  007C                     	ds	2
   609                           
   610                           	psect	bssBANK0
   611  0056                     __pbssBANK0:	
   612  0056                     _bTimerComplete:	
   613  0056                     	ds	5
   614  005B                     _channelFound:	
   615  005B                     	ds	2
   616  005D                     _intBlinkCycle:	
   617  005D                     	ds	2
   618  005F                     _intDarkCheckIntervall:	
   619  005F                     	ds	2
   620  0061                     _intHalfSecondCounter:	
   621  0061                     	ds	2
   622  0063                     _intMinuteCounter:	
   623  0063                     	ds	2
   624  0065                     _intSecondCounter:	
   625  0065                     	ds	2
   626  0067                     _bChannelFound:	
   627  0067                     	ds	1
   628  0068                     _bDark:	
   629  0068                     	ds	1
   630  0069                     _bSaveDataToFlash:	
   631  0069                     	ds	1
   632  006A                     _bTransiverModeReceive:	
   633  006A                     	ds	1
   634                           
   635                           	psect	dataBANK0
   636  006B                     __pdataBANK0:	
   637  006B                     _intNumberOfBlinks:	
   638  006B                     	ds	2
   639  006D                     _bValueFromPot:	
   640  006D                     	ds	1
   641                           
   642                           	psect	bssBANK1
   643  00C2                     __pbssBANK1:	
   644  00C2                     _intClockTimer:	
   645  00C2                     	ds	10
   646                           
   647                           	psect	bssBANK3
   648  0190                     __pbssBANK3:	
   649  0190                     _ReceivedData:	
   650  0190                     	ds	40
   651                           
   652                           	psect	clrtext
   653  1635                     clear_ram0:	
   654                           ;	Called with FSR containing the base address, and
   655                           ;	W with the last address+1
   656                           
   657  1635  0064               	clrwdt	;clear the watchdog before getting into this loop
   658  1636                     clrloop0:	
   659  1636  0180               	clrf	0	;clear RAM location pointed to by FSR
   660  1637  0A84               	incf	4,f	;increment pointer
   661  1638  0604               	xorwf	4,w	;XOR with final address
   662  1639  1903               	btfsc	3,2	;have we reached the end yet?
   663  163A  3400               	retlw	0	;all done for this memory range, return
   664  163B  0604               	xorwf	4,w	;XOR again to restore value
   665  163C  2E36               	goto	clrloop0	;do the next byte
   666                           
   667                           	psect	cstackBANK1
   668  00A0                     __pcstackBANK1:	
   669  00A0                     TransiverReadFIFO@ReceivedString:	
   670                           
   671                           ; 30 bytes @ 0x0
   672  00A0                     	ds	30
   673  00BE                     TransiverReadFIFO@i:	
   674                           
   675                           ; 2 bytes @ 0x1E
   676  00BE                     	ds	2
   677  00C0                     TransiverReadFIFO@j:	
   678                           
   679                           ; 2 bytes @ 0x20
   680  00C0                     	ds	2
   681                           
   682                           	psect	cstackCOMMON
   683  0070                     __pcstackCOMMON:	
   684  0070                     ?_PICInit:	
   685  0070                     ?_TransiverInit:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_ClockInit:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ?_OperationMode:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ?_Mode_0:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     ?_Mode_1:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0070                     ?_Mode_2:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0070                     ?_Mode_4:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ?_Mode_5:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ?_TransiverToReceive:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?_TransiverReadFIFO:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_saveDataToFlash:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ?_SetRFMode:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_RegisterRead:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ?_FindChannel:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_ReadFIFO:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ?_ReceivedPacketHandler:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ?_AnalogValue:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     ?_eeprom_read:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0070                     ?_DarknessCheck:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0070                     ?_write_ram_status:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0070                     ?_read_ram_status:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0070                     ?_ResetMemoryAdress:	
   749                           ; 1 bytes @ 0x0
   750                           
   751  0070                     ?_ram_bulk_erase:	
   752                           ; 1 bytes @ 0x0
   753                           
   754  0070                     ?_SendMemoryData:	
   755                           ; 1 bytes @ 0x0
   756                           
   757  0070                     ?_WriteFIFO:	
   758                           ; 1 bytes @ 0x0
   759                           
   760  0070                     ?_LightWithSensController:	
   761                           ; 1 bytes @ 0x0
   762                           
   763  0070                     ?_TimerCounter:	
   764                           ; 1 bytes @ 0x0
   765                           
   766  0070                     ??_TimerCounter:	
   767                           ; 1 bytes @ 0x0
   768                           
   769  0070                     ?_WriteSPI:	
   770                           ; 1 bytes @ 0x0
   771                           
   772  0070                     ?_ReadSPI:	
   773                           ; 1 bytes @ 0x0
   774                           
   775  0070                     ?_tc_int:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0070                     ?_IncreaseMemoryAdress:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0070                     ?i1_OperationMode:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0070                     ??i1_OperationMode:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0070                     ?_main:	
   788                           ; 1 bytes @ 0x0
   789                           
   790                           
   791                           ; 2 bytes @ 0x0
   792  0070                     	ds	1
   793  0071                     i1OperationMode@bracketStatus:	
   794                           
   795                           ; 1 bytes @ 0x1
   796  0071                     	ds	2
   797  0073                     TimerCounter@i:	
   798                           
   799                           ; 2 bytes @ 0x3
   800  0073                     	ds	2
   801  0075                     ??_tc_int:	
   802                           
   803                           ; 1 bytes @ 0x5
   804  0075                     	ds	7
   805                           
   806                           	psect	cstackBANK0
   807  0020                     __pcstackBANK0:	
   808  0020                     ??_PICInit:	
   809  0020                     ??_OperationMode:	
   810                           ; 1 bytes @ 0x0
   811                           
   812  0020                     ?_timerFunction:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  0020                     ?_DelayDs:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  0020                     ?_eeprom_write:	
   819                           ; 1 bytes @ 0x0
   820                           
   821  0020                     ??_eeprom_read:	
   822                           ; 1 bytes @ 0x0
   823                           
   824  0020                     ?_strchr:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0020                     ??_WriteSPI:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  0020                     ?___bmul:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0020                     ?_strlen:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0020                     eeprom_write@value:	
   837                           ; 2 bytes @ 0x0
   838                           
   839  0020                     ___bmul@multiplicand:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0020                     timerFunction@intTimerNumber:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0020                     DelayDs@cnt:	
   846                           ; 2 bytes @ 0x0
   847                           
   848  0020                     strchr@chr:	
   849                           ; 2 bytes @ 0x0
   850                           
   851                           
   852                           ; 2 bytes @ 0x0
   853  0020                     	ds	1
   854  0021                     ??_eeprom_write:	
   855  0021                     ??___bmul:	
   856                           ; 1 bytes @ 0x1
   857                           
   858  0021                     WriteSPI@buffer:	
   859                           ; 1 bytes @ 0x1
   860                           
   861  0021                     OperationMode@bracketStatus:	
   862                           ; 1 bytes @ 0x1
   863                           
   864  0021                     eeprom_read@addr:	
   865                           ; 1 bytes @ 0x1
   866                           
   867                           
   868                           ; 1 bytes @ 0x1
   869  0021                     	ds	1
   870  0022                     ??_DelayDs:	
   871  0022                     ??_strlen:	
   872                           ; 1 bytes @ 0x2
   873                           
   874  0022                     ??_strchr:	
   875                           ; 1 bytes @ 0x2
   876                           
   877  0022                     ?_ReadMemoryAdress:	
   878                           ; 1 bytes @ 0x2
   879                           
   880  0022                     WriteSPI@databyte:	
   881                           ; 1 bytes @ 0x2
   882                           
   883  0022                     ReadMemoryAdress@var2:	
   884                           ; 1 bytes @ 0x2
   885                           
   886  0022                     eeprom_write@addr:	
   887                           ; 1 bytes @ 0x2
   888                           
   889  0022                     ___bmul@product:	
   890                           ; 1 bytes @ 0x2
   891                           
   892  0022                     strchr@ptr:	
   893                           ; 1 bytes @ 0x2
   894                           
   895  0022                     timerFunction@intSetSeconds:	
   896                           ; 1 bytes @ 0x2
   897                           
   898                           
   899                           ; 2 bytes @ 0x2
   900  0022                     	ds	1
   901  0023                     ??_ClockInit:	
   902  0023                     ??_RegisterRead:	
   903                           ; 1 bytes @ 0x3
   904                           
   905  0023                     ??_ReadFIFO:	
   906                           ; 1 bytes @ 0x3
   907                           
   908  0023                     ??_read_ram_status:	
   909                           ; 1 bytes @ 0x3
   910                           
   911  0023                     ??_ResetMemoryAdress:	
   912                           ; 1 bytes @ 0x3
   913                           
   914  0023                     ??_WriteFIFO:	
   915                           ; 1 bytes @ 0x3
   916                           
   917  0023                     ??_ReadSPI:	
   918                           ; 1 bytes @ 0x3
   919                           
   920  0023                     ??_IncreaseMemoryAdress:	
   921                           ; 1 bytes @ 0x3
   922                           
   923  0023                     WriteFIFO@Data:	
   924                           ; 1 bytes @ 0x3
   925                           
   926  0023                     ReadMemoryAdress@var1:	
   927                           ; 1 bytes @ 0x3
   928                           
   929  0023                     ___bmul@multiplier:	
   930                           ; 1 bytes @ 0x3
   931                           
   932                           
   933                           ; 1 bytes @ 0x3
   934  0023                     	ds	1
   935  0024                     ??_timerFunction:	
   936  0024                     ?_ReadClock:	
   937                           ; 1 bytes @ 0x4
   938                           
   939  0024                     ??_ReadMemoryAdress:	
   940                           ; 1 bytes @ 0x4
   941                           
   942  0024                     ReadFIFO@value:	
   943                           ; 1 bytes @ 0x4
   944                           
   945  0024                     IncreaseMemoryAdress@var1:	
   946                           ; 1 bytes @ 0x4
   947                           
   948  0024                     read_ram_status@status:	
   949                           ; 1 bytes @ 0x4
   950                           
   951  0024                     ClockInit@cnt:	
   952                           ; 1 bytes @ 0x4
   953                           
   954  0024                     ReadClock@minutes:	
   955                           ; 1 bytes @ 0x4
   956                           
   957  0024                     DelayDs@i:	
   958                           ; 1 bytes @ 0x4
   959                           
   960                           
   961                           ; 2 bytes @ 0x4
   962  0024                     	ds	1
   963  0025                     ??_write_ram_status:	
   964  0025                     ??_ram_bulk_erase:	
   965                           ; 1 bytes @ 0x5
   966                           
   967  0025                     ?_read_write_flash_ram:	
   968                           ; 1 bytes @ 0x5
   969                           
   970  0025                     RegisterRead@value:	
   971                           ; 1 bytes @ 0x5
   972                           
   973  0025                     ReadMemoryAdress@var3:	
   974                           ; 1 bytes @ 0x5
   975                           
   976  0025                     IncreaseMemoryAdress@var2:	
   977                           ; 1 bytes @ 0x5
   978                           
   979  0025                     write_ram_status@status:	
   980                           ; 1 bytes @ 0x5
   981                           
   982  0025                     ReadClock@hour:	
   983                           ; 1 bytes @ 0x5
   984                           
   985  0025                     read_write_flash_ram@bytes_to_readwrite:	
   986                           ; 1 bytes @ 0x5
   987                           
   988                           
   989                           ; 2 bytes @ 0x5
   990  0025                     	ds	1
   991  0026                     ??_AnalogValue:	
   992  0026                     ?_Blink:	
   993                           ; 1 bytes @ 0x6
   994                           
   995  0026                     RegisterRead@adress:	
   996                           ; 1 bytes @ 0x6
   997                           
   998  0026                     IncreaseMemoryAdress@var3:	
   999                           ; 1 bytes @ 0x6
  1000                           
  1001  0026                     ReadClock@date:	
  1002                           ; 1 bytes @ 0x6
  1003                           
  1004  0026                     strlen@s:	
  1005                           ; 1 bytes @ 0x6
  1006                           
  1007  0026                     Blink@n:	
  1008                           ; 1 bytes @ 0x6
  1009                           
  1010                           
  1011                           ; 2 bytes @ 0x6
  1012  0026                     	ds	1
  1013  0027                     ?_RegisterSet:	
  1014  0027                     RegisterSet@value:	
  1015                           ; 1 bytes @ 0x7
  1016                           
  1017  0027                     AnalogValue@channel:	
  1018                           ; 1 bytes @ 0x7
  1019                           
  1020  0027                     read_write_flash_ram@flash_sector:	
  1021                           ; 1 bytes @ 0x7
  1022                           
  1023  0027                     ReadClock@month:	
  1024                           ; 1 bytes @ 0x7
  1025                           
  1026  0027                     strlen@cp:	
  1027                           ; 1 bytes @ 0x7
  1028                           
  1029                           
  1030                           ; 1 bytes @ 0x7
  1031  0027                     	ds	1
  1032  0028                     ??_RegisterSet:	
  1033  0028                     ??_DarknessCheck:	
  1034                           ; 1 bytes @ 0x8
  1035                           
  1036  0028                     ??_Blink:	
  1037                           ; 1 bytes @ 0x8
  1038                           
  1039  0028                     ?_strncmp:	
  1040                           ; 1 bytes @ 0x8
  1041                           
  1042  0028                     read_write_flash_ram@flash_page:	
  1043                           ; 2 bytes @ 0x8
  1044                           
  1045  0028                     ReadClock@year:	
  1046                           ; 1 bytes @ 0x8
  1047                           
  1048  0028                     strncmp@s2:	
  1049                           ; 1 bytes @ 0x8
  1050                           
  1051                           
  1052                           ; 1 bytes @ 0x8
  1053  0028                     	ds	1
  1054  0029                     ??_ReadClock:	
  1055  0029                     DarknessCheck@darknessValue:	
  1056                           ; 1 bytes @ 0x9
  1057                           
  1058  0029                     read_write_flash_ram@offset:	
  1059                           ; 1 bytes @ 0x9
  1060                           
  1061  0029                     Blink@i:	
  1062                           ; 1 bytes @ 0x9
  1063                           
  1064  0029                     strncmp@len:	
  1065                           ; 2 bytes @ 0x9
  1066                           
  1067                           
  1068                           ; 2 bytes @ 0x9
  1069  0029                     	ds	1
  1070  002A                     ??_Mode_0:	
  1071  002A                     ??_Mode_1:	
  1072                           ; 1 bytes @ 0xA
  1073                           
  1074  002A                     ??_Mode_2:	
  1075                           ; 1 bytes @ 0xA
  1076                           
  1077  002A                     ??_LightWithSensController:	
  1078                           ; 1 bytes @ 0xA
  1079                           
  1080  002A                     RegisterSet@adress:	
  1081                           ; 1 bytes @ 0xA
  1082                           
  1083  002A                     read_write_flash_ram@mem_ptr:	
  1084                           ; 1 bytes @ 0xA
  1085                           
  1086                           
  1087                           ; 1 bytes @ 0xA
  1088  002A                     	ds	1
  1089  002B                     ??_SetRFMode:	
  1090  002B                     ??_read_write_flash_ram:	
  1091                           ; 1 bytes @ 0xB
  1092                           
  1093  002B                     ??_strncmp:	
  1094                           ; 1 bytes @ 0xB
  1095                           
  1096  002B                     ReadClock@sec10:	
  1097                           ; 1 bytes @ 0xB
  1098                           
  1099                           
  1100                           ; 1 bytes @ 0xB
  1101  002B                     	ds	1
  1102  002C                     SetRFMode@mode:	
  1103  002C                     ReadClock@min10:	
  1104                           ; 1 bytes @ 0xC
  1105                           
  1106                           
  1107                           ; 1 bytes @ 0xC
  1108  002C                     	ds	1
  1109  002D                     SetRFMode@mcparam0_read:	
  1110  002D                     read_write_flash_ram@one_read_zero_write:	
  1111                           ; 1 bytes @ 0xD
  1112                           
  1113  002D                     ReadClock@hour10:	
  1114                           ; 1 bytes @ 0xD
  1115                           
  1116  002D                     strncmp@s1:	
  1117                           ; 1 bytes @ 0xD
  1118                           
  1119                           
  1120                           ; 1 bytes @ 0xD
  1121  002D                     	ds	1
  1122  002E                     ??_FindChannel:	
  1123  002E                     ?_strstr:	
  1124                           ; 1 bytes @ 0xE
  1125                           
  1126  002E                     ReadClock@date10:	
  1127                           ; 1 bytes @ 0xE
  1128                           
  1129  002E                     strstr@s2:	
  1130                           ; 1 bytes @ 0xE
  1131                           
  1132  002E                     read_write_flash_ram@i:	
  1133                           ; 1 bytes @ 0xE
  1134                           
  1135                           
  1136                           ; 2 bytes @ 0xE
  1137  002E                     	ds	1
  1138  002F                     ??_strstr:	
  1139  002F                     ReadClock@month10:	
  1140                           ; 1 bytes @ 0xF
  1141                           
  1142                           
  1143                           ; 1 bytes @ 0xF
  1144  002F                     	ds	1
  1145  0030                     ReadClock@year10:	
  1146                           
  1147                           ; 1 bytes @ 0x10
  1148  0030                     	ds	1
  1149  0031                     ReadClock@seconds:	
  1150  0031                     FindChannel@cnt:	
  1151                           ; 1 bytes @ 0x11
  1152                           
  1153                           
  1154                           ; 2 bytes @ 0x11
  1155  0031                     	ds	1
  1156  0032                     ReadClock@sec1:	
  1157  0032                     strstr@s1:	
  1158                           ; 1 bytes @ 0x12
  1159                           
  1160                           
  1161                           ; 1 bytes @ 0x12
  1162  0032                     	ds	1
  1163  0033                     ReadClock@min1:	
  1164  0033                     FindChannel@i:	
  1165                           ; 1 bytes @ 0x13
  1166                           
  1167                           
  1168                           ; 2 bytes @ 0x13
  1169  0033                     	ds	1
  1170  0034                     ReadClock@hour1:	
  1171                           
  1172                           ; 1 bytes @ 0x14
  1173  0034                     	ds	1
  1174  0035                     ??_TransiverInit:	
  1175  0035                     ??_TransiverToReceive:	
  1176                           ; 1 bytes @ 0x15
  1177                           
  1178  0035                     ?_TransmittPacket:	
  1179                           ; 1 bytes @ 0x15
  1180                           
  1181  0035                     TransmittPacket@value:	
  1182                           ; 1 bytes @ 0x15
  1183                           
  1184  0035                     ReadClock@month1:	
  1185                           ; 1 bytes @ 0x15
  1186                           
  1187                           
  1188                           ; 1 bytes @ 0x15
  1189  0035                     	ds	1
  1190  0036                     ??_TransmittPacket:	
  1191  0036                     ReadClock@year1:	
  1192                           ; 1 bytes @ 0x16
  1193                           
  1194                           
  1195                           ; 1 bytes @ 0x16
  1196  0036                     	ds	1
  1197  0037                     ReadClock@date1:	
  1198                           
  1199                           ; 1 bytes @ 0x17
  1200  0037                     	ds	1
  1201  0038                     ??_saveDataToFlash:	
  1202  0038                     TransmittPacket@i:	
  1203                           ; 1 bytes @ 0x18
  1204                           
  1205                           
  1206                           ; 2 bytes @ 0x18
  1207  0038                     	ds	2
  1208  003A                     TransmittPacket@topic:	
  1209                           
  1210                           ; 1 bytes @ 0x1A
  1211  003A                     	ds	1
  1212  003B                     ??_Mode_4:	
  1213  003B                     ??_Mode_5:	
  1214                           ; 1 bytes @ 0x1B
  1215                           
  1216  003B                     ??_SendMemoryData:	
  1217                           ; 1 bytes @ 0x1B
  1218                           
  1219                           
  1220                           ; 1 bytes @ 0x1B
  1221  003B                     	ds	2
  1222  003D                     saveDataToFlash@seconds:	
  1223                           
  1224                           ; 1 bytes @ 0x1D
  1225  003D                     	ds	1
  1226  003E                     saveDataToFlash@minutes:	
  1227                           
  1228                           ; 1 bytes @ 0x1E
  1229  003E                     	ds	1
  1230  003F                     saveDataToFlash@hours:	
  1231                           
  1232                           ; 1 bytes @ 0x1F
  1233  003F                     	ds	1
  1234  0040                     saveDataToFlash@date:	
  1235                           
  1236                           ; 1 bytes @ 0x20
  1237  0040                     	ds	1
  1238  0041                     saveDataToFlash@month:	
  1239                           
  1240                           ; 1 bytes @ 0x21
  1241  0041                     	ds	1
  1242  0042                     saveDataToFlash@year:	
  1243                           
  1244                           ; 1 bytes @ 0x22
  1245  0042                     	ds	1
  1246  0043                     saveDataToFlash@value:	
  1247  0043                     SendMemoryData@value:	
  1248                           ; 1 bytes @ 0x23
  1249                           
  1250                           
  1251                           ; 1 bytes @ 0x23
  1252  0043                     	ds	1
  1253  0044                     saveDataToFlash@addr1:	
  1254  0044                     SendMemoryData@addr3:	
  1255                           ; 1 bytes @ 0x24
  1256                           
  1257                           
  1258                           ; 1 bytes @ 0x24
  1259  0044                     	ds	1
  1260  0045                     saveDataToFlash@addr2:	
  1261  0045                     SendMemoryData@addr2:	
  1262                           ; 1 bytes @ 0x25
  1263                           
  1264                           
  1265                           ; 1 bytes @ 0x25
  1266  0045                     	ds	1
  1267  0046                     saveDataToFlash@addr3:	
  1268  0046                     SendMemoryData@addr1:	
  1269                           ; 1 bytes @ 0x26
  1270                           
  1271                           
  1272                           ; 1 bytes @ 0x26
  1273  0046                     	ds	1
  1274  0047                     SendMemoryData@address:	
  1275                           
  1276                           ; 4 bytes @ 0x27
  1277  0047                     	ds	4
  1278  004B                     SendMemoryData@finalAddress:	
  1279                           
  1280                           ; 4 bytes @ 0x2B
  1281  004B                     	ds	4
  1282  004F                     ??_ReceivedPacketHandler:	
  1283                           
  1284                           ; 1 bytes @ 0x2F
  1285  004F                     	ds	1
  1286  0050                     ReceivedPacketHandler@Data:	
  1287                           
  1288                           ; 1 bytes @ 0x30
  1289  0050                     	ds	1
  1290  0051                     ??_TransiverReadFIFO:	
  1291                           
  1292                           ; 1 bytes @ 0x31
  1293  0051                     	ds	2
  1294  0053                     ??_main:	
  1295                           
  1296                           ; 1 bytes @ 0x33
  1297  0053                     	ds	3
  1298                           
  1299                           	psect	maintext
  1300  0D04                     __pmaintext:	
  1301 ;;
  1302 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1303 ;;
  1304 ;; *************** function _main *****************
  1305 ;; Defined at:
  1306 ;;		line 21 in file "main.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;		None
  1309 ;; Auto vars:     Size  Location     Type
  1310 ;;		None
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  2   74[None  ] int 
  1313 ;; Registers used:
  1314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1315 ;; Tracked objects:
  1316 ;;		On entry : B00/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1320 ;;      Params:         0       0       0       0       0
  1321 ;;      Locals:         0       0       0       0       0
  1322 ;;      Temps:          0       3       0       0       0
  1323 ;;      Totals:         0       3       0       0       0
  1324 ;;Total ram usage:        3 bytes
  1325 ;; Hardware stack levels required when called:   11
  1326 ;; This function calls:
  1327 ;;		_ClockInit
  1328 ;;		_Mode_0
  1329 ;;		_Mode_1
  1330 ;;		_Mode_2
  1331 ;;		_Mode_4
  1332 ;;		_Mode_5
  1333 ;;		_OperationMode
  1334 ;;		_PICInit
  1335 ;;		_TransiverInit
  1336 ;;		_TransiverReadFIFO
  1337 ;;		_TransiverToReceive
  1338 ;;		_saveDataToFlash
  1339 ;; This function is called by:
  1340 ;;		Startup code after reset
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           
  1345                           ;psect for function _main
  1346  0D04                     _main:	
  1347                           
  1348                           ;main.c: 24: PICInit();
  1349                           
  1350                           ;incstack = 0
  1351 ;; hardware stack exceeded
  1352                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1353  0D04  120A  158A  22AE  120A  158A  	fcall	_PICInit
  1354                           
  1355                           ;main.c: 25: TransiverInit();
  1356  0D09  120A  158A  2716  120A  158A  	fcall	_TransiverInit
  1357                           
  1358                           ;main.c: 26: ClockInit();
  1359  0D0E  120A  158A  246A  120A  158A  	fcall	_ClockInit
  1360                           
  1361                           ;main.c: 30: RB1 = 0;
  1362  0D13  1283               	bcf	3,5	;RP0=0, select bank0
  1363  0D14  1303               	bcf	3,6	;RP1=0, select bank0
  1364  0D15  1086               	bcf	6,1	;volatile
  1365                           
  1366                           ;main.c: 31: _delay((unsigned long)((300)*(4000000/4000.0)));
  1367  0D16  3002               	movlw	2
  1368  0D17  1283               	bcf	3,5	;RP0=0, select bank0
  1369  0D18  1303               	bcf	3,6	;RP1=0, select bank0
  1370  0D19  00D5               	movwf	??_main+2
  1371  0D1A  3086               	movlw	134
  1372  0D1B  00D4               	movwf	??_main+1
  1373  0D1C  3098               	movlw	152
  1374  0D1D  00D3               	movwf	??_main
  1375  0D1E                     u2497:	
  1376  0D1E  0BD3               	decfsz	??_main,f
  1377  0D1F  2D1E               	goto	u2497
  1378  0D20  0BD4               	decfsz	??_main+1,f
  1379  0D21  2D1E               	goto	u2497
  1380  0D22  0BD5               	decfsz	??_main+2,f
  1381  0D23  2D1E               	goto	u2497
  1382  0D24  0000               	nop
  1383                           
  1384                           ;main.c: 32: RB1 = 1;
  1385  0D25  1283               	bcf	3,5	;RP0=0, select bank0
  1386  0D26  1303               	bcf	3,6	;RP1=0, select bank0
  1387  0D27  1486               	bsf	6,1	;volatile
  1388                           
  1389                           ;main.c: 33: _delay((unsigned long)((300)*(4000000/4000.0)));
  1390  0D28  3002               	movlw	2
  1391  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  1392  0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  1393  0D2B  00D5               	movwf	??_main+2
  1394  0D2C  3086               	movlw	134
  1395  0D2D  00D4               	movwf	??_main+1
  1396  0D2E  3098               	movlw	152
  1397  0D2F  00D3               	movwf	??_main
  1398  0D30                     u2507:	
  1399  0D30  0BD3               	decfsz	??_main,f
  1400  0D31  2D30               	goto	u2507
  1401  0D32  0BD4               	decfsz	??_main+1,f
  1402  0D33  2D30               	goto	u2507
  1403  0D34  0BD5               	decfsz	??_main+2,f
  1404  0D35  2D30               	goto	u2507
  1405  0D36  0000               	nop
  1406  0D37                     l3265:	
  1407                           ;main.c: 35: while(1)
  1408                           
  1409                           
  1410                           ;main.c: 36: {
  1411                           ;main.c: 37: if(!RB0)
  1412  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  1413  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  1414  0D39  1C06               	btfss	6,0	;volatile
  1415  0D3A                     l77:	
  1416                           ;main.c: 38: {
  1417                           ;main.c: 53: while(!RB0);
  1418                           
  1419  0D3A  1C06               	btfss	6,0	;volatile
  1420  0D3B  2D3A               	goto	l77
  1421                           
  1422                           ;main.c: 55: }
  1423                           ;main.c: 57: if(OperationMode() == 0)
  1424  0D3C  160A  118A  2646  120A  158A  	fcall	_OperationMode
  1425  0D41  3A00               	xorlw	0
  1426  0D42  1D03               	skipz
  1427  0D43  2D49               	goto	l3273
  1428                           
  1429                           ;main.c: 58: {
  1430                           ;main.c: 59: Mode_0();
  1431  0D44  160A  118A  2629  120A  158A  	fcall	_Mode_0
  1432  0D49                     l3273:	
  1433                           
  1434                           ;main.c: 60: }
  1435                           ;main.c: 61: if(OperationMode() == 1)
  1436  0D49  160A  118A  2646  120A  158A  	fcall	_OperationMode
  1437  0D4E  3A01               	xorlw	1
  1438  0D4F  1D03               	skipz
  1439  0D50  2D56               	goto	l3277
  1440                           
  1441                           ;main.c: 62: {
  1442                           ;main.c: 63: Mode_1();
  1443  0D51  160A  118A  26DB  120A  158A  	fcall	_Mode_1
  1444  0D56                     l3277:	
  1445                           
  1446                           ;main.c: 64: }
  1447                           ;main.c: 67: if(OperationMode() == 2)
  1448  0D56  160A  118A  2646  120A  158A  	fcall	_OperationMode
  1449  0D5B  3A02               	xorlw	2
  1450  0D5C  1D03               	skipz
  1451  0D5D  2D63               	goto	l3281
  1452                           
  1453                           ;main.c: 68: {
  1454                           ;main.c: 69: Mode_2();
  1455  0D5E  120A  158A  203D  120A  158A  	fcall	_Mode_2
  1456  0D63                     l3281:	
  1457                           
  1458                           ;main.c: 70: }
  1459                           ;main.c: 72: if(OperationMode() == 4)
  1460  0D63  160A  118A  2646  120A  158A  	fcall	_OperationMode
  1461  0D68  3A04               	xorlw	4
  1462  0D69  1D03               	skipz
  1463  0D6A  2D70               	goto	l3285
  1464                           
  1465                           ;main.c: 73: {
  1466                           ;main.c: 74: Mode_4();
  1467  0D6B  160A  118A  266B  120A  158A  	fcall	_Mode_4
  1468  0D70                     l3285:	
  1469                           
  1470                           ;main.c: 75: }
  1471                           ;main.c: 77: if(OperationMode() == 5)
  1472  0D70  160A  118A  2646  120A  158A  	fcall	_OperationMode
  1473  0D75  3A05               	xorlw	5
  1474  0D76  1D03               	skipz
  1475  0D77  2D7D               	goto	l3289
  1476                           
  1477                           ;main.c: 78: {
  1478                           ;main.c: 79: Mode_5();
  1479  0D78  160A  118A  268D  120A  158A  	fcall	_Mode_5
  1480  0D7D                     l3289:	
  1481                           
  1482                           ;main.c: 80: }
  1483                           ;main.c: 84: if(!bTransiverModeReceive)
  1484  0D7D  1283               	bcf	3,5	;RP0=0, select bank0
  1485  0D7E  1303               	bcf	3,6	;RP1=0, select bank0
  1486  0D7F  086A               	movf	_bTransiverModeReceive,w
  1487  0D80  1D03               	btfss	3,2
  1488  0D81  2D87               	goto	l3293
  1489                           
  1490                           ;main.c: 85: TransiverToReceive();
  1491  0D82  120A  158A  21F6  120A  158A  	fcall	_TransiverToReceive
  1492  0D87                     l3293:	
  1493                           
  1494                           ;main.c: 86: if(RB4 && bTransiverModeReceive)
  1495  0D87  1283               	bcf	3,5	;RP0=0, select bank0
  1496  0D88  1303               	bcf	3,6	;RP1=0, select bank0
  1497  0D89  1E06               	btfss	6,4	;volatile
  1498  0D8A  2D93               	goto	l3299
  1499  0D8B  086A               	movf	_bTransiverModeReceive,w
  1500  0D8C  1903               	btfsc	3,2
  1501  0D8D  2D93               	goto	l3299
  1502                           
  1503                           ;main.c: 87: TransiverReadFIFO();
  1504  0D8E  120A  158A  2312  120A  158A  	fcall	_TransiverReadFIFO
  1505  0D93                     l3299:	
  1506                           
  1507                           ;main.c: 89: if(bSaveDataToFlash)
  1508  0D93  1283               	bcf	3,5	;RP0=0, select bank0
  1509  0D94  1303               	bcf	3,6	;RP1=0, select bank0
  1510  0D95  0869               	movf	_bSaveDataToFlash,w
  1511  0D96  1903               	btfsc	3,2
  1512  0D97  2D37               	goto	l3265
  1513                           
  1514                           ;main.c: 90: {
  1515                           ;main.c: 91: RC2 = 1;
  1516  0D98  1507               	bsf	7,2	;volatile
  1517                           
  1518                           ;main.c: 92: saveDataToFlash();
  1519  0D99  120A  118A  2045  120A  158A  	fcall	_saveDataToFlash
  1520                           
  1521                           ;main.c: 93: bSaveDataToFlash = FALSE;
  1522  0D9E  1283               	bcf	3,5	;RP0=0, select bank0
  1523  0D9F  1303               	bcf	3,6	;RP1=0, select bank0
  1524  0DA0  01E9               	clrf	_bSaveDataToFlash
  1525  0DA1  2D37               	goto	l3265
  1526  0DA2                     __end_of_main:	
  1527                           
  1528                           	psect	text1
  1529  0045                     __ptext1:	
  1530 ;; *************** function _saveDataToFlash *****************
  1531 ;; Defined at:
  1532 ;;		line 1075 in file "functions.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;		None
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;  addr3           1   38[BANK0 ] unsigned char 
  1537 ;;  addr2           1   37[BANK0 ] unsigned char 
  1538 ;;  addr1           1   36[BANK0 ] unsigned char 
  1539 ;;  value           1   35[BANK0 ] unsigned char 
  1540 ;;  year            1   34[BANK0 ] unsigned char 
  1541 ;;  month           1   33[BANK0 ] unsigned char 
  1542 ;;  date            1   32[BANK0 ] unsigned char 
  1543 ;;  hours           1   31[BANK0 ] unsigned char 
  1544 ;;  minutes         1   30[BANK0 ] unsigned char 
  1545 ;;  seconds         1   29[BANK0 ] unsigned char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1555 ;;      Params:         0       0       0       0       0
  1556 ;;      Locals:         0      10       0       0       0
  1557 ;;      Temps:          0       5       0       0       0
  1558 ;;      Totals:         0      15       0       0       0
  1559 ;;Total ram usage:       15 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    6
  1562 ;; This function calls:
  1563 ;;		_AnalogValue
  1564 ;;		_IncreaseMemoryAdress
  1565 ;;		_ReadClock
  1566 ;;		_ReadMemoryAdress
  1567 ;;		_read_write_flash_ram
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           
  1574                           ;psect for function _saveDataToFlash
  1575  0045                     _saveDataToFlash:	
  1576                           
  1577                           ;functions.c: 1077: unsigned char value, addr1, addr2, addr3, seconds, minutes, hours, d
      +                          ate, month, year;
  1578                           ;functions.c: 1079: ReadClock(&seconds, &minutes, &hours, &date, &month, &year);
  1579                           
  1580                           ;incstack = 0
  1581                           ; Regs used in _saveDataToFlash: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1582  0045  303E               	movlw	(low (saveDataToFlash@minutes| 0))& (0+255)
  1583  0046  1283               	bcf	3,5	;RP0=0, select bank0
  1584  0047  1303               	bcf	3,6	;RP1=0, select bank0
  1585  0048  00B8               	movwf	??_saveDataToFlash
  1586  0049  0838               	movf	??_saveDataToFlash,w
  1587  004A  00A4               	movwf	ReadClock@minutes
  1588  004B  303F               	movlw	(low (saveDataToFlash@hours| 0))& (0+255)
  1589  004C  00B9               	movwf	??_saveDataToFlash+1
  1590  004D  0839               	movf	??_saveDataToFlash+1,w
  1591  004E  00A5               	movwf	ReadClock@hour
  1592  004F  3040               	movlw	(low (saveDataToFlash@date| 0))& (0+255)
  1593  0050  00BA               	movwf	??_saveDataToFlash+2
  1594  0051  083A               	movf	??_saveDataToFlash+2,w
  1595  0052  00A6               	movwf	ReadClock@date
  1596  0053  3041               	movlw	(low (saveDataToFlash@month| 0))& (0+255)
  1597  0054  00BB               	movwf	??_saveDataToFlash+3
  1598  0055  083B               	movf	??_saveDataToFlash+3,w
  1599  0056  00A7               	movwf	ReadClock@month
  1600  0057  3042               	movlw	(low (saveDataToFlash@year| 0))& (0+255)
  1601  0058  00BC               	movwf	??_saveDataToFlash+4
  1602  0059  083C               	movf	??_saveDataToFlash+4,w
  1603  005A  00A8               	movwf	ReadClock@year
  1604  005B  303D               	movlw	(low (saveDataToFlash@seconds| 0))& (0+255)
  1605  005C  120A  118A  246D  120A  118A  	fcall	_ReadClock
  1606                           
  1607                           ;functions.c: 1081: value = year;
  1608  0061  1283               	bcf	3,5	;RP0=0, select bank0
  1609  0062  1303               	bcf	3,6	;RP1=0, select bank0
  1610  0063  0842               	movf	saveDataToFlash@year,w
  1611  0064  00B8               	movwf	??_saveDataToFlash
  1612  0065  0838               	movf	??_saveDataToFlash,w
  1613  0066  00C3               	movwf	saveDataToFlash@value
  1614                           
  1615                           ;functions.c: 1082: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1616  0067  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1617  0068  00B8               	movwf	??_saveDataToFlash
  1618  0069  0838               	movf	??_saveDataToFlash,w
  1619  006A  00A2               	movwf	ReadMemoryAdress@var2
  1620  006B  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1621  006C  00B9               	movwf	??_saveDataToFlash+1
  1622  006D  0839               	movf	??_saveDataToFlash+1,w
  1623  006E  00A3               	movwf	ReadMemoryAdress@var1
  1624  006F  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1625  0070  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  1626                           
  1627                           ;functions.c: 1083: read_write_flash_ram(
  1628                           ;functions.c: 1084: 0,
  1629                           ;functions.c: 1085: 1,
  1630                           ;functions.c: 1086: addr3,
  1631                           ;functions.c: 1087: addr2,
  1632                           ;functions.c: 1088: addr1,
  1633                           ;functions.c: 1089: &value);
  1634  0075  3001               	movlw	1
  1635  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1636  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1637  0078  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1638  0079  3000               	movlw	0
  1639  007A  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1640  007B  0846               	movf	saveDataToFlash@addr3,w
  1641  007C  00B8               	movwf	??_saveDataToFlash
  1642  007D  0838               	movf	??_saveDataToFlash,w
  1643  007E  00A7               	movwf	read_write_flash_ram@flash_sector
  1644  007F  0845               	movf	saveDataToFlash@addr2,w
  1645  0080  00B9               	movwf	??_saveDataToFlash+1
  1646  0081  0839               	movf	??_saveDataToFlash+1,w
  1647  0082  00A8               	movwf	read_write_flash_ram@flash_page
  1648  0083  0844               	movf	saveDataToFlash@addr1,w
  1649  0084  00BA               	movwf	??_saveDataToFlash+2
  1650  0085  083A               	movf	??_saveDataToFlash+2,w
  1651  0086  00A9               	movwf	read_write_flash_ram@offset
  1652  0087  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1653  0088  00BB               	movwf	??_saveDataToFlash+3
  1654  0089  083B               	movf	??_saveDataToFlash+3,w
  1655  008A  00AA               	movwf	read_write_flash_ram@mem_ptr
  1656  008B  3000               	movlw	0
  1657  008C  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  1658                           
  1659                           ;functions.c: 1090: IncreaseMemoryAdress();
  1660  0091  120A  158A  2252  120A  118A  	fcall	_IncreaseMemoryAdress
  1661                           
  1662                           ;functions.c: 1092: value = month;
  1663  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1664  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1665  0098  0841               	movf	saveDataToFlash@month,w
  1666  0099  00B8               	movwf	??_saveDataToFlash
  1667  009A  0838               	movf	??_saveDataToFlash,w
  1668  009B  00C3               	movwf	saveDataToFlash@value
  1669                           
  1670                           ;functions.c: 1093: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1671  009C  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1672  009D  00B8               	movwf	??_saveDataToFlash
  1673  009E  0838               	movf	??_saveDataToFlash,w
  1674  009F  00A2               	movwf	ReadMemoryAdress@var2
  1675  00A0  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1676  00A1  00B9               	movwf	??_saveDataToFlash+1
  1677  00A2  0839               	movf	??_saveDataToFlash+1,w
  1678  00A3  00A3               	movwf	ReadMemoryAdress@var1
  1679  00A4  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1680  00A5  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  1681                           
  1682                           ;functions.c: 1094: read_write_flash_ram(
  1683                           ;functions.c: 1095: 0,
  1684                           ;functions.c: 1096: 1,
  1685                           ;functions.c: 1097: addr3,
  1686                           ;functions.c: 1098: addr2,
  1687                           ;functions.c: 1099: addr1,
  1688                           ;functions.c: 1100: &value);
  1689  00AA  3001               	movlw	1
  1690  00AB  1283               	bcf	3,5	;RP0=0, select bank0
  1691  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  1692  00AD  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1693  00AE  3000               	movlw	0
  1694  00AF  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1695  00B0  0846               	movf	saveDataToFlash@addr3,w
  1696  00B1  00B8               	movwf	??_saveDataToFlash
  1697  00B2  0838               	movf	??_saveDataToFlash,w
  1698  00B3  00A7               	movwf	read_write_flash_ram@flash_sector
  1699  00B4  0845               	movf	saveDataToFlash@addr2,w
  1700  00B5  00B9               	movwf	??_saveDataToFlash+1
  1701  00B6  0839               	movf	??_saveDataToFlash+1,w
  1702  00B7  00A8               	movwf	read_write_flash_ram@flash_page
  1703  00B8  0844               	movf	saveDataToFlash@addr1,w
  1704  00B9  00BA               	movwf	??_saveDataToFlash+2
  1705  00BA  083A               	movf	??_saveDataToFlash+2,w
  1706  00BB  00A9               	movwf	read_write_flash_ram@offset
  1707  00BC  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1708  00BD  00BB               	movwf	??_saveDataToFlash+3
  1709  00BE  083B               	movf	??_saveDataToFlash+3,w
  1710  00BF  00AA               	movwf	read_write_flash_ram@mem_ptr
  1711  00C0  3000               	movlw	0
  1712  00C1  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  1713                           
  1714                           ;functions.c: 1101: IncreaseMemoryAdress();
  1715  00C6  120A  158A  2252  120A  118A  	fcall	_IncreaseMemoryAdress
  1716                           
  1717                           ;functions.c: 1103: value = date;
  1718  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1719  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1720  00CD  0840               	movf	saveDataToFlash@date,w
  1721  00CE  00B8               	movwf	??_saveDataToFlash
  1722  00CF  0838               	movf	??_saveDataToFlash,w
  1723  00D0  00C3               	movwf	saveDataToFlash@value
  1724                           
  1725                           ;functions.c: 1104: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1726  00D1  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1727  00D2  00B8               	movwf	??_saveDataToFlash
  1728  00D3  0838               	movf	??_saveDataToFlash,w
  1729  00D4  00A2               	movwf	ReadMemoryAdress@var2
  1730  00D5  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1731  00D6  00B9               	movwf	??_saveDataToFlash+1
  1732  00D7  0839               	movf	??_saveDataToFlash+1,w
  1733  00D8  00A3               	movwf	ReadMemoryAdress@var1
  1734  00D9  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1735  00DA  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  1736                           
  1737                           ;functions.c: 1105: read_write_flash_ram(
  1738                           ;functions.c: 1106: 0,
  1739                           ;functions.c: 1107: 1,
  1740                           ;functions.c: 1108: addr3,
  1741                           ;functions.c: 1109: addr2,
  1742                           ;functions.c: 1110: addr1,
  1743                           ;functions.c: 1111: &value);
  1744  00DF  3001               	movlw	1
  1745  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1746  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1747  00E2  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1748  00E3  3000               	movlw	0
  1749  00E4  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1750  00E5  0846               	movf	saveDataToFlash@addr3,w
  1751  00E6  00B8               	movwf	??_saveDataToFlash
  1752  00E7  0838               	movf	??_saveDataToFlash,w
  1753  00E8  00A7               	movwf	read_write_flash_ram@flash_sector
  1754  00E9  0845               	movf	saveDataToFlash@addr2,w
  1755  00EA  00B9               	movwf	??_saveDataToFlash+1
  1756  00EB  0839               	movf	??_saveDataToFlash+1,w
  1757  00EC  00A8               	movwf	read_write_flash_ram@flash_page
  1758  00ED  0844               	movf	saveDataToFlash@addr1,w
  1759  00EE  00BA               	movwf	??_saveDataToFlash+2
  1760  00EF  083A               	movf	??_saveDataToFlash+2,w
  1761  00F0  00A9               	movwf	read_write_flash_ram@offset
  1762  00F1  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1763  00F2  00BB               	movwf	??_saveDataToFlash+3
  1764  00F3  083B               	movf	??_saveDataToFlash+3,w
  1765  00F4  00AA               	movwf	read_write_flash_ram@mem_ptr
  1766  00F5  3000               	movlw	0
  1767  00F6  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  1768                           
  1769                           ;functions.c: 1112: IncreaseMemoryAdress();
  1770  00FB  120A  158A  2252  120A  118A  	fcall	_IncreaseMemoryAdress
  1771                           
  1772                           ;functions.c: 1114: value = hours;
  1773  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1774  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1775  0102  083F               	movf	saveDataToFlash@hours,w
  1776  0103  00B8               	movwf	??_saveDataToFlash
  1777  0104  0838               	movf	??_saveDataToFlash,w
  1778  0105  00C3               	movwf	saveDataToFlash@value
  1779                           
  1780                           ;functions.c: 1115: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1781  0106  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1782  0107  00B8               	movwf	??_saveDataToFlash
  1783  0108  0838               	movf	??_saveDataToFlash,w
  1784  0109  00A2               	movwf	ReadMemoryAdress@var2
  1785  010A  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1786  010B  00B9               	movwf	??_saveDataToFlash+1
  1787  010C  0839               	movf	??_saveDataToFlash+1,w
  1788  010D  00A3               	movwf	ReadMemoryAdress@var1
  1789  010E  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1790  010F  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  1791                           
  1792                           ;functions.c: 1116: read_write_flash_ram(
  1793                           ;functions.c: 1117: 0,
  1794                           ;functions.c: 1118: 1,
  1795                           ;functions.c: 1119: addr3,
  1796                           ;functions.c: 1120: addr2,
  1797                           ;functions.c: 1121: addr1,
  1798                           ;functions.c: 1122: &value);
  1799  0114  3001               	movlw	1
  1800  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1801  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1802  0117  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1803  0118  3000               	movlw	0
  1804  0119  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1805  011A  0846               	movf	saveDataToFlash@addr3,w
  1806  011B  00B8               	movwf	??_saveDataToFlash
  1807  011C  0838               	movf	??_saveDataToFlash,w
  1808  011D  00A7               	movwf	read_write_flash_ram@flash_sector
  1809  011E  0845               	movf	saveDataToFlash@addr2,w
  1810  011F  00B9               	movwf	??_saveDataToFlash+1
  1811  0120  0839               	movf	??_saveDataToFlash+1,w
  1812  0121  00A8               	movwf	read_write_flash_ram@flash_page
  1813  0122  0844               	movf	saveDataToFlash@addr1,w
  1814  0123  00BA               	movwf	??_saveDataToFlash+2
  1815  0124  083A               	movf	??_saveDataToFlash+2,w
  1816  0125  00A9               	movwf	read_write_flash_ram@offset
  1817  0126  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1818  0127  00BB               	movwf	??_saveDataToFlash+3
  1819  0128  083B               	movf	??_saveDataToFlash+3,w
  1820  0129  00AA               	movwf	read_write_flash_ram@mem_ptr
  1821  012A  3000               	movlw	0
  1822  012B  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  1823                           
  1824                           ;functions.c: 1123: IncreaseMemoryAdress();
  1825  0130  120A  158A  2252  120A  118A  	fcall	_IncreaseMemoryAdress
  1826                           
  1827                           ;functions.c: 1126: value = AnalogValue(0);
  1828  0135  3000               	movlw	0
  1829  0136  160A  118A  27D5  120A  118A  	fcall	_AnalogValue
  1830  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1831  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1832  013D  00B8               	movwf	??_saveDataToFlash
  1833  013E  0838               	movf	??_saveDataToFlash,w
  1834  013F  00C3               	movwf	saveDataToFlash@value
  1835                           
  1836                           ;functions.c: 1127: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1837  0140  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1838  0141  00B8               	movwf	??_saveDataToFlash
  1839  0142  0838               	movf	??_saveDataToFlash,w
  1840  0143  00A2               	movwf	ReadMemoryAdress@var2
  1841  0144  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1842  0145  00B9               	movwf	??_saveDataToFlash+1
  1843  0146  0839               	movf	??_saveDataToFlash+1,w
  1844  0147  00A3               	movwf	ReadMemoryAdress@var1
  1845  0148  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1846  0149  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  1847                           
  1848                           ;functions.c: 1128: read_write_flash_ram(
  1849                           ;functions.c: 1129: 0,
  1850                           ;functions.c: 1130: 1,
  1851                           ;functions.c: 1131: addr3,
  1852                           ;functions.c: 1132: addr2,
  1853                           ;functions.c: 1133: addr1,
  1854                           ;functions.c: 1134: &value);
  1855  014E  3001               	movlw	1
  1856  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1857  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1858  0151  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1859  0152  3000               	movlw	0
  1860  0153  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1861  0154  0846               	movf	saveDataToFlash@addr3,w
  1862  0155  00B8               	movwf	??_saveDataToFlash
  1863  0156  0838               	movf	??_saveDataToFlash,w
  1864  0157  00A7               	movwf	read_write_flash_ram@flash_sector
  1865  0158  0845               	movf	saveDataToFlash@addr2,w
  1866  0159  00B9               	movwf	??_saveDataToFlash+1
  1867  015A  0839               	movf	??_saveDataToFlash+1,w
  1868  015B  00A8               	movwf	read_write_flash_ram@flash_page
  1869  015C  0844               	movf	saveDataToFlash@addr1,w
  1870  015D  00BA               	movwf	??_saveDataToFlash+2
  1871  015E  083A               	movf	??_saveDataToFlash+2,w
  1872  015F  00A9               	movwf	read_write_flash_ram@offset
  1873  0160  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1874  0161  00BB               	movwf	??_saveDataToFlash+3
  1875  0162  083B               	movf	??_saveDataToFlash+3,w
  1876  0163  00AA               	movwf	read_write_flash_ram@mem_ptr
  1877  0164  3000               	movlw	0
  1878  0165  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  1879                           
  1880                           ;functions.c: 1135: IncreaseMemoryAdress();
  1881  016A  120A  158A  2252  120A  118A  	fcall	_IncreaseMemoryAdress
  1882                           
  1883                           ;functions.c: 1137: value = AnalogValue(3);
  1884  016F  3003               	movlw	3
  1885  0170  160A  118A  27D5  120A  118A  	fcall	_AnalogValue
  1886  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1887  0176  1303               	bcf	3,6	;RP1=0, select bank0
  1888  0177  00B8               	movwf	??_saveDataToFlash
  1889  0178  0838               	movf	??_saveDataToFlash,w
  1890  0179  00C3               	movwf	saveDataToFlash@value
  1891                           
  1892                           ;functions.c: 1138: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1893  017A  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1894  017B  00B8               	movwf	??_saveDataToFlash
  1895  017C  0838               	movf	??_saveDataToFlash,w
  1896  017D  00A2               	movwf	ReadMemoryAdress@var2
  1897  017E  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1898  017F  00B9               	movwf	??_saveDataToFlash+1
  1899  0180  0839               	movf	??_saveDataToFlash+1,w
  1900  0181  00A3               	movwf	ReadMemoryAdress@var1
  1901  0182  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1902  0183  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  1903                           
  1904                           ;functions.c: 1139: read_write_flash_ram(
  1905                           ;functions.c: 1140: 0,
  1906                           ;functions.c: 1141: 1,
  1907                           ;functions.c: 1142: addr3,
  1908                           ;functions.c: 1143: addr2,
  1909                           ;functions.c: 1144: addr1,
  1910                           ;functions.c: 1145: &value);
  1911  0188  3001               	movlw	1
  1912  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1913  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1914  018B  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1915  018C  3000               	movlw	0
  1916  018D  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1917  018E  0846               	movf	saveDataToFlash@addr3,w
  1918  018F  00B8               	movwf	??_saveDataToFlash
  1919  0190  0838               	movf	??_saveDataToFlash,w
  1920  0191  00A7               	movwf	read_write_flash_ram@flash_sector
  1921  0192  0845               	movf	saveDataToFlash@addr2,w
  1922  0193  00B9               	movwf	??_saveDataToFlash+1
  1923  0194  0839               	movf	??_saveDataToFlash+1,w
  1924  0195  00A8               	movwf	read_write_flash_ram@flash_page
  1925  0196  0844               	movf	saveDataToFlash@addr1,w
  1926  0197  00BA               	movwf	??_saveDataToFlash+2
  1927  0198  083A               	movf	??_saveDataToFlash+2,w
  1928  0199  00A9               	movwf	read_write_flash_ram@offset
  1929  019A  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1930  019B  00BB               	movwf	??_saveDataToFlash+3
  1931  019C  083B               	movf	??_saveDataToFlash+3,w
  1932  019D  00AA               	movwf	read_write_flash_ram@mem_ptr
  1933  019E  3000               	movlw	0
  1934  019F  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  1935                           
  1936                           ;functions.c: 1146: IncreaseMemoryAdress();
  1937  01A4  120A  158A  2252  120A  118A  	fcall	_IncreaseMemoryAdress
  1938                           
  1939                           ;functions.c: 1148: value = AnalogValue(5);
  1940  01A9  3005               	movlw	5
  1941  01AA  160A  118A  27D5  120A  118A  	fcall	_AnalogValue
  1942  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1943  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1944  01B1  00B8               	movwf	??_saveDataToFlash
  1945  01B2  0838               	movf	??_saveDataToFlash,w
  1946  01B3  00C3               	movwf	saveDataToFlash@value
  1947                           
  1948                           ;functions.c: 1149: ReadMemoryAdress(&addr3, &addr2, &addr1);
  1949  01B4  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  1950  01B5  00B8               	movwf	??_saveDataToFlash
  1951  01B6  0838               	movf	??_saveDataToFlash,w
  1952  01B7  00A2               	movwf	ReadMemoryAdress@var2
  1953  01B8  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  1954  01B9  00B9               	movwf	??_saveDataToFlash+1
  1955  01BA  0839               	movf	??_saveDataToFlash+1,w
  1956  01BB  00A3               	movwf	ReadMemoryAdress@var1
  1957  01BC  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  1958  01BD  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  1959                           
  1960                           ;functions.c: 1150: read_write_flash_ram(
  1961                           ;functions.c: 1151: 0,
  1962                           ;functions.c: 1152: 1,
  1963                           ;functions.c: 1153: addr3,
  1964                           ;functions.c: 1154: addr2,
  1965                           ;functions.c: 1155: addr1,
  1966                           ;functions.c: 1156: &value);
  1967  01C2  3001               	movlw	1
  1968  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1969  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1970  01C5  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  1971  01C6  3000               	movlw	0
  1972  01C7  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  1973  01C8  0846               	movf	saveDataToFlash@addr3,w
  1974  01C9  00B8               	movwf	??_saveDataToFlash
  1975  01CA  0838               	movf	??_saveDataToFlash,w
  1976  01CB  00A7               	movwf	read_write_flash_ram@flash_sector
  1977  01CC  0845               	movf	saveDataToFlash@addr2,w
  1978  01CD  00B9               	movwf	??_saveDataToFlash+1
  1979  01CE  0839               	movf	??_saveDataToFlash+1,w
  1980  01CF  00A8               	movwf	read_write_flash_ram@flash_page
  1981  01D0  0844               	movf	saveDataToFlash@addr1,w
  1982  01D1  00BA               	movwf	??_saveDataToFlash+2
  1983  01D2  083A               	movf	??_saveDataToFlash+2,w
  1984  01D3  00A9               	movwf	read_write_flash_ram@offset
  1985  01D4  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  1986  01D5  00BB               	movwf	??_saveDataToFlash+3
  1987  01D6  083B               	movf	??_saveDataToFlash+3,w
  1988  01D7  00AA               	movwf	read_write_flash_ram@mem_ptr
  1989  01D8  3000               	movlw	0
  1990  01D9  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  1991                           
  1992                           ;functions.c: 1157: IncreaseMemoryAdress();
  1993  01DE  120A  158A  2252  120A  118A  	fcall	_IncreaseMemoryAdress
  1994                           
  1995                           ;functions.c: 1159: value = AnalogValue(7);
  1996  01E3  3007               	movlw	7
  1997  01E4  160A  118A  27D5  120A  118A  	fcall	_AnalogValue
  1998  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  1999  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  2000  01EB  00B8               	movwf	??_saveDataToFlash
  2001  01EC  0838               	movf	??_saveDataToFlash,w
  2002  01ED  00C3               	movwf	saveDataToFlash@value
  2003                           
  2004                           ;functions.c: 1160: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2005  01EE  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2006  01EF  00B8               	movwf	??_saveDataToFlash
  2007  01F0  0838               	movf	??_saveDataToFlash,w
  2008  01F1  00A2               	movwf	ReadMemoryAdress@var2
  2009  01F2  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2010  01F3  00B9               	movwf	??_saveDataToFlash+1
  2011  01F4  0839               	movf	??_saveDataToFlash+1,w
  2012  01F5  00A3               	movwf	ReadMemoryAdress@var1
  2013  01F6  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2014  01F7  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  2015                           
  2016                           ;functions.c: 1161: read_write_flash_ram(
  2017                           ;functions.c: 1162: 0,
  2018                           ;functions.c: 1163: 1,
  2019                           ;functions.c: 1164: addr3,
  2020                           ;functions.c: 1165: addr2,
  2021                           ;functions.c: 1166: addr1,
  2022                           ;functions.c: 1167: &value);
  2023  01FC  3001               	movlw	1
  2024  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2025  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2026  01FF  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2027  0200  3000               	movlw	0
  2028  0201  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2029  0202  0846               	movf	saveDataToFlash@addr3,w
  2030  0203  00B8               	movwf	??_saveDataToFlash
  2031  0204  0838               	movf	??_saveDataToFlash,w
  2032  0205  00A7               	movwf	read_write_flash_ram@flash_sector
  2033  0206  0845               	movf	saveDataToFlash@addr2,w
  2034  0207  00B9               	movwf	??_saveDataToFlash+1
  2035  0208  0839               	movf	??_saveDataToFlash+1,w
  2036  0209  00A8               	movwf	read_write_flash_ram@flash_page
  2037  020A  0844               	movf	saveDataToFlash@addr1,w
  2038  020B  00BA               	movwf	??_saveDataToFlash+2
  2039  020C  083A               	movf	??_saveDataToFlash+2,w
  2040  020D  00A9               	movwf	read_write_flash_ram@offset
  2041  020E  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2042  020F  00BB               	movwf	??_saveDataToFlash+3
  2043  0210  083B               	movf	??_saveDataToFlash+3,w
  2044  0211  00AA               	movwf	read_write_flash_ram@mem_ptr
  2045  0212  3000               	movlw	0
  2046  0213  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  2047                           
  2048                           ;functions.c: 1168: IncreaseMemoryAdress();
  2049  0218  120A  158A  2252  120A  118A  	fcall	_IncreaseMemoryAdress
  2050                           
  2051                           ;functions.c: 1171: value = AnalogValue(6);
  2052  021D  3006               	movlw	6
  2053  021E  160A  118A  27D5  120A  118A  	fcall	_AnalogValue
  2054  0223  1283               	bcf	3,5	;RP0=0, select bank0
  2055  0224  1303               	bcf	3,6	;RP1=0, select bank0
  2056  0225  00B8               	movwf	??_saveDataToFlash
  2057  0226  0838               	movf	??_saveDataToFlash,w
  2058  0227  00C3               	movwf	saveDataToFlash@value
  2059                           
  2060                           ;functions.c: 1172: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2061  0228  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2062  0229  00B8               	movwf	??_saveDataToFlash
  2063  022A  0838               	movf	??_saveDataToFlash,w
  2064  022B  00A2               	movwf	ReadMemoryAdress@var2
  2065  022C  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2066  022D  00B9               	movwf	??_saveDataToFlash+1
  2067  022E  0839               	movf	??_saveDataToFlash+1,w
  2068  022F  00A3               	movwf	ReadMemoryAdress@var1
  2069  0230  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2070  0231  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  2071                           
  2072                           ;functions.c: 1173: read_write_flash_ram(
  2073                           ;functions.c: 1174: 0,
  2074                           ;functions.c: 1175: 1,
  2075                           ;functions.c: 1176: addr3,
  2076                           ;functions.c: 1177: addr2,
  2077                           ;functions.c: 1178: addr1,
  2078                           ;functions.c: 1179: &value);
  2079  0236  3001               	movlw	1
  2080  0237  1283               	bcf	3,5	;RP0=0, select bank0
  2081  0238  1303               	bcf	3,6	;RP1=0, select bank0
  2082  0239  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2083  023A  3000               	movlw	0
  2084  023B  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2085  023C  0846               	movf	saveDataToFlash@addr3,w
  2086  023D  00B8               	movwf	??_saveDataToFlash
  2087  023E  0838               	movf	??_saveDataToFlash,w
  2088  023F  00A7               	movwf	read_write_flash_ram@flash_sector
  2089  0240  0845               	movf	saveDataToFlash@addr2,w
  2090  0241  00B9               	movwf	??_saveDataToFlash+1
  2091  0242  0839               	movf	??_saveDataToFlash+1,w
  2092  0243  00A8               	movwf	read_write_flash_ram@flash_page
  2093  0244  0844               	movf	saveDataToFlash@addr1,w
  2094  0245  00BA               	movwf	??_saveDataToFlash+2
  2095  0246  083A               	movf	??_saveDataToFlash+2,w
  2096  0247  00A9               	movwf	read_write_flash_ram@offset
  2097  0248  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2098  0249  00BB               	movwf	??_saveDataToFlash+3
  2099  024A  083B               	movf	??_saveDataToFlash+3,w
  2100  024B  00AA               	movwf	read_write_flash_ram@mem_ptr
  2101  024C  3000               	movlw	0
  2102  024D  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  2103                           
  2104                           ;functions.c: 1180: IncreaseMemoryAdress();
  2105  0252  120A  158A  2252  120A  118A  	fcall	_IncreaseMemoryAdress
  2106                           
  2107                           ;functions.c: 1183: value = AnalogValue(8);
  2108  0257  3008               	movlw	8
  2109  0258  160A  118A  27D5  120A  118A  	fcall	_AnalogValue
  2110  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2111  025E  1303               	bcf	3,6	;RP1=0, select bank0
  2112  025F  00B8               	movwf	??_saveDataToFlash
  2113  0260  0838               	movf	??_saveDataToFlash,w
  2114  0261  00C3               	movwf	saveDataToFlash@value
  2115                           
  2116                           ;functions.c: 1184: ReadMemoryAdress(&addr3, &addr2, &addr1);
  2117  0262  3045               	movlw	(low (saveDataToFlash@addr2| 0))& (0+255)
  2118  0263  00B8               	movwf	??_saveDataToFlash
  2119  0264  0838               	movf	??_saveDataToFlash,w
  2120  0265  00A2               	movwf	ReadMemoryAdress@var2
  2121  0266  3044               	movlw	(low (saveDataToFlash@addr1| 0))& (0+255)
  2122  0267  00B9               	movwf	??_saveDataToFlash+1
  2123  0268  0839               	movf	??_saveDataToFlash+1,w
  2124  0269  00A3               	movwf	ReadMemoryAdress@var1
  2125  026A  3046               	movlw	(low (saveDataToFlash@addr3| 0))& (0+255)
  2126  026B  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  2127                           
  2128                           ;functions.c: 1185: read_write_flash_ram(
  2129                           ;functions.c: 1186: 0,
  2130                           ;functions.c: 1187: 1,
  2131                           ;functions.c: 1188: addr3,
  2132                           ;functions.c: 1189: addr2,
  2133                           ;functions.c: 1190: addr1,
  2134                           ;functions.c: 1191: &value);
  2135  0270  3001               	movlw	1
  2136  0271  1283               	bcf	3,5	;RP0=0, select bank0
  2137  0272  1303               	bcf	3,6	;RP1=0, select bank0
  2138  0273  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  2139  0274  3000               	movlw	0
  2140  0275  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  2141  0276  0846               	movf	saveDataToFlash@addr3,w
  2142  0277  00B8               	movwf	??_saveDataToFlash
  2143  0278  0838               	movf	??_saveDataToFlash,w
  2144  0279  00A7               	movwf	read_write_flash_ram@flash_sector
  2145  027A  0845               	movf	saveDataToFlash@addr2,w
  2146  027B  00B9               	movwf	??_saveDataToFlash+1
  2147  027C  0839               	movf	??_saveDataToFlash+1,w
  2148  027D  00A8               	movwf	read_write_flash_ram@flash_page
  2149  027E  0844               	movf	saveDataToFlash@addr1,w
  2150  027F  00BA               	movwf	??_saveDataToFlash+2
  2151  0280  083A               	movf	??_saveDataToFlash+2,w
  2152  0281  00A9               	movwf	read_write_flash_ram@offset
  2153  0282  3043               	movlw	(low (saveDataToFlash@value| 0))& (0+255)
  2154  0283  00BB               	movwf	??_saveDataToFlash+3
  2155  0284  083B               	movf	??_saveDataToFlash+3,w
  2156  0285  00AA               	movwf	read_write_flash_ram@mem_ptr
  2157  0286  3000               	movlw	0
  2158  0287  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  2159                           
  2160                           ;functions.c: 1192: IncreaseMemoryAdress();
  2161  028C  120A  158A  2252   	fcall	_IncreaseMemoryAdress
  2162  028F  0008               	return
  2163  0290                     __end_of_saveDataToFlash:	
  2164                           
  2165                           	psect	text2
  2166  046D                     __ptext2:	
  2167 ;; *************** function _ReadClock *****************
  2168 ;; Defined at:
  2169 ;;		line 49 in file "MCP79510.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  seconds         1    wreg     PTR unsigned char 
  2172 ;;		 -> saveDataToFlash@seconds(1), 
  2173 ;;  minutes         1    4[BANK0 ] PTR unsigned char 
  2174 ;;		 -> saveDataToFlash@minutes(1), 
  2175 ;;  hour            1    5[BANK0 ] PTR unsigned char 
  2176 ;;		 -> saveDataToFlash@hours(1), 
  2177 ;;  date            1    6[BANK0 ] PTR unsigned char 
  2178 ;;		 -> saveDataToFlash@date(1), 
  2179 ;;  month           1    7[BANK0 ] PTR unsigned char 
  2180 ;;		 -> saveDataToFlash@month(1), 
  2181 ;;  year            1    8[BANK0 ] PTR unsigned char 
  2182 ;;		 -> saveDataToFlash@year(1), 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  seconds         1   17[BANK0 ] PTR unsigned char 
  2185 ;;		 -> saveDataToFlash@seconds(1), 
  2186 ;;  date1           1   23[BANK0 ] unsigned char 
  2187 ;;  year1           1   22[BANK0 ] unsigned char 
  2188 ;;  month1          1   21[BANK0 ] unsigned char 
  2189 ;;  hour1           1   20[BANK0 ] unsigned char 
  2190 ;;  min1            1   19[BANK0 ] unsigned char 
  2191 ;;  sec1            1   18[BANK0 ] unsigned char 
  2192 ;;  year10          1   16[BANK0 ] unsigned char 
  2193 ;;  month10         1   15[BANK0 ] unsigned char 
  2194 ;;  date10          1   14[BANK0 ] unsigned char 
  2195 ;;  hour10          1   13[BANK0 ] unsigned char 
  2196 ;;  min10           1   12[BANK0 ] unsigned char 
  2197 ;;  sec10           1   11[BANK0 ] unsigned char 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      void 
  2200 ;; Registers used:
  2201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2207 ;;      Params:         0       5       0       0       0
  2208 ;;      Locals:         0      13       0       0       0
  2209 ;;      Temps:          0       2       0       0       0
  2210 ;;      Totals:         0      20       0       0       0
  2211 ;;Total ram usage:       20 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    4
  2214 ;; This function calls:
  2215 ;;		_ReadSPI
  2216 ;;		_WriteSPI
  2217 ;;		___bmul
  2218 ;; This function is called by:
  2219 ;;		_saveDataToFlash
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           
  2224                           ;psect for function _ReadClock
  2225  046D                     _ReadClock:	
  2226                           
  2227                           ;incstack = 0
  2228                           ; Regs used in _ReadClock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2229                           ;ReadClock@seconds stored from wreg
  2230  046D  1283               	bcf	3,5	;RP0=0, select bank0
  2231  046E  1303               	bcf	3,6	;RP1=0, select bank0
  2232  046F  00B1               	movwf	ReadClock@seconds
  2233                           
  2234                           ;MCP79510.c: 51: unsigned char sec10, min10, hour10, date10, month10, year10, sec1, min1
      +                          , hour1, date1, month1, year1;
  2235                           ;MCP79510.c: 53: RD4 = 0;
  2236  0470  1208               	bcf	8,4	;volatile
  2237                           
  2238                           ;MCP79510.c: 55: WriteSPI(0x13);
  2239  0471  3013               	movlw	19
  2240  0472  160A  118A  264F  120A  118A  	fcall	_WriteSPI
  2241                           
  2242                           ;MCP79510.c: 56: WriteSPI(0x01);
  2243  0477  3001               	movlw	1
  2244  0478  160A  118A  264F  120A  118A  	fcall	_WriteSPI
  2245                           
  2246                           ;MCP79510.c: 58: sec1 = ReadSPI() & 0x7F;
  2247  047D  160A  118A  262D  120A  118A  	fcall	_ReadSPI
  2248  0482  397F               	andlw	127
  2249  0483  1283               	bcf	3,5	;RP0=0, select bank0
  2250  0484  1303               	bcf	3,6	;RP1=0, select bank0
  2251  0485  00A9               	movwf	??_ReadClock
  2252  0486  0829               	movf	??_ReadClock,w
  2253  0487  00B2               	movwf	ReadClock@sec1
  2254                           
  2255                           ;MCP79510.c: 59: min1 = ReadSPI() & 0x7F;
  2256  0488  160A  118A  262D  120A  118A  	fcall	_ReadSPI
  2257  048D  397F               	andlw	127
  2258  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2259  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2260  0490  00A9               	movwf	??_ReadClock
  2261  0491  0829               	movf	??_ReadClock,w
  2262  0492  00B3               	movwf	ReadClock@min1
  2263                           
  2264                           ;MCP79510.c: 60: hour1 = ReadSPI() & 0x3F;
  2265  0493  160A  118A  262D  120A  118A  	fcall	_ReadSPI
  2266  0498  393F               	andlw	63
  2267  0499  1283               	bcf	3,5	;RP0=0, select bank0
  2268  049A  1303               	bcf	3,6	;RP1=0, select bank0
  2269  049B  00A9               	movwf	??_ReadClock
  2270  049C  0829               	movf	??_ReadClock,w
  2271  049D  00B4               	movwf	ReadClock@hour1
  2272                           
  2273                           ;MCP79510.c: 61: date1 = ReadSPI();
  2274  049E  160A  118A  262D  120A  118A  	fcall	_ReadSPI
  2275  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  2276  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  2277  04A5  00A9               	movwf	??_ReadClock
  2278  04A6  0829               	movf	??_ReadClock,w
  2279  04A7  00B7               	movwf	ReadClock@date1
  2280                           
  2281                           ;MCP79510.c: 62: date1 = ReadSPI() & 0x3F;
  2282  04A8  160A  118A  262D  120A  118A  	fcall	_ReadSPI
  2283  04AD  393F               	andlw	63
  2284  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  2285  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  2286  04B0  00A9               	movwf	??_ReadClock
  2287  04B1  0829               	movf	??_ReadClock,w
  2288  04B2  00B7               	movwf	ReadClock@date1
  2289                           
  2290                           ;MCP79510.c: 63: month1 = ReadSPI() & 0x1F;
  2291  04B3  160A  118A  262D  120A  118A  	fcall	_ReadSPI
  2292  04B8  391F               	andlw	31
  2293  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2294  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2295  04BB  00A9               	movwf	??_ReadClock
  2296  04BC  0829               	movf	??_ReadClock,w
  2297  04BD  00B5               	movwf	ReadClock@month1
  2298                           
  2299                           ;MCP79510.c: 64: year1 = ReadSPI();
  2300  04BE  160A  118A  262D  120A  118A  	fcall	_ReadSPI
  2301  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  2302  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  2303  04C5  00A9               	movwf	??_ReadClock
  2304  04C6  0829               	movf	??_ReadClock,w
  2305  04C7  00B6               	movwf	ReadClock@year1
  2306                           
  2307                           ;MCP79510.c: 66: RD4 = 1;
  2308  04C8  1608               	bsf	8,4	;volatile
  2309                           
  2310                           ;MCP79510.c: 69: sec10 = (sec1 & 0x70) >> 4;
  2311  04C9  0832               	movf	ReadClock@sec1,w
  2312  04CA  00A9               	movwf	??_ReadClock
  2313  04CB  3004               	movlw	4
  2314  04CC                     u1975:	
  2315  04CC  1003               	clrc
  2316  04CD  0CA9               	rrf	??_ReadClock,f
  2317  04CE  3EFF               	addlw	-1
  2318  04CF  1D03               	skipz
  2319  04D0  2CCC               	goto	u1975
  2320  04D1  0829               	movf	??_ReadClock,w
  2321  04D2  3907               	andlw	7
  2322  04D3  00AA               	movwf	??_ReadClock+1
  2323  04D4  082A               	movf	??_ReadClock+1,w
  2324  04D5  00AB               	movwf	ReadClock@sec10
  2325                           
  2326                           ;MCP79510.c: 70: sec1 = sec1 & 0x0F;
  2327  04D6  0832               	movf	ReadClock@sec1,w
  2328  04D7  390F               	andlw	15
  2329  04D8  00A9               	movwf	??_ReadClock
  2330  04D9  0829               	movf	??_ReadClock,w
  2331  04DA  00B2               	movwf	ReadClock@sec1
  2332                           
  2333                           ;MCP79510.c: 71: *seconds = sec1 + sec10 * 10;
  2334  04DB  300A               	movlw	10
  2335  04DC  00A9               	movwf	??_ReadClock
  2336  04DD  0829               	movf	??_ReadClock,w
  2337  04DE  00A0               	movwf	___bmul@multiplicand
  2338  04DF  082B               	movf	ReadClock@sec10,w
  2339  04E0  160A  118A  269F  120A  118A  	fcall	___bmul
  2340  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  2341  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  2342  04E7  0732               	addwf	ReadClock@sec1,w
  2343  04E8  00AA               	movwf	??_ReadClock+1
  2344  04E9  0831               	movf	ReadClock@seconds,w
  2345  04EA  0084               	movwf	4
  2346  04EB  082A               	movf	??_ReadClock+1,w
  2347  04EC  1383               	bcf	3,7	;select IRP bank0
  2348  04ED  0080               	movwf	0
  2349                           
  2350                           ;MCP79510.c: 73: min10 = (min1 & 0x70) >> 4;
  2351  04EE  0833               	movf	ReadClock@min1,w
  2352  04EF  00A9               	movwf	??_ReadClock
  2353  04F0  3004               	movlw	4
  2354  04F1                     u1985:	
  2355  04F1  1003               	clrc
  2356  04F2  0CA9               	rrf	??_ReadClock,f
  2357  04F3  3EFF               	addlw	-1
  2358  04F4  1D03               	skipz
  2359  04F5  2CF1               	goto	u1985
  2360  04F6  0829               	movf	??_ReadClock,w
  2361  04F7  3907               	andlw	7
  2362  04F8  00AA               	movwf	??_ReadClock+1
  2363  04F9  082A               	movf	??_ReadClock+1,w
  2364  04FA  00AC               	movwf	ReadClock@min10
  2365                           
  2366                           ;MCP79510.c: 74: min1 = min1 & 0x0F;
  2367  04FB  0833               	movf	ReadClock@min1,w
  2368  04FC  390F               	andlw	15
  2369  04FD  00A9               	movwf	??_ReadClock
  2370  04FE  0829               	movf	??_ReadClock,w
  2371  04FF  00B3               	movwf	ReadClock@min1
  2372                           
  2373                           ;MCP79510.c: 75: *minutes = min1 + min10 * 10;
  2374  0500  300A               	movlw	10
  2375  0501  00A9               	movwf	??_ReadClock
  2376  0502  0829               	movf	??_ReadClock,w
  2377  0503  00A0               	movwf	___bmul@multiplicand
  2378  0504  082C               	movf	ReadClock@min10,w
  2379  0505  160A  118A  269F  120A  118A  	fcall	___bmul
  2380  050A  1283               	bcf	3,5	;RP0=0, select bank0
  2381  050B  1303               	bcf	3,6	;RP1=0, select bank0
  2382  050C  0733               	addwf	ReadClock@min1,w
  2383  050D  00AA               	movwf	??_ReadClock+1
  2384  050E  0824               	movf	ReadClock@minutes,w
  2385  050F  0084               	movwf	4
  2386  0510  082A               	movf	??_ReadClock+1,w
  2387  0511  1383               	bcf	3,7	;select IRP bank0
  2388  0512  0080               	movwf	0
  2389                           
  2390                           ;MCP79510.c: 77: hour10 = (hour1 & 0x30) >> 4;
  2391  0513  0834               	movf	ReadClock@hour1,w
  2392  0514  00A9               	movwf	??_ReadClock
  2393  0515  3004               	movlw	4
  2394  0516                     u1995:	
  2395  0516  1003               	clrc
  2396  0517  0CA9               	rrf	??_ReadClock,f
  2397  0518  3EFF               	addlw	-1
  2398  0519  1D03               	skipz
  2399  051A  2D16               	goto	u1995
  2400  051B  0829               	movf	??_ReadClock,w
  2401  051C  3903               	andlw	3
  2402  051D  00AA               	movwf	??_ReadClock+1
  2403  051E  082A               	movf	??_ReadClock+1,w
  2404  051F  00AD               	movwf	ReadClock@hour10
  2405                           
  2406                           ;MCP79510.c: 78: hour1 = hour1 & 0x0F;
  2407  0520  0834               	movf	ReadClock@hour1,w
  2408  0521  390F               	andlw	15
  2409  0522  00A9               	movwf	??_ReadClock
  2410  0523  0829               	movf	??_ReadClock,w
  2411  0524  00B4               	movwf	ReadClock@hour1
  2412                           
  2413                           ;MCP79510.c: 79: *hour = hour1 + hour10 * 10;
  2414  0525  300A               	movlw	10
  2415  0526  00A9               	movwf	??_ReadClock
  2416  0527  0829               	movf	??_ReadClock,w
  2417  0528  00A0               	movwf	___bmul@multiplicand
  2418  0529  082D               	movf	ReadClock@hour10,w
  2419  052A  160A  118A  269F  120A  118A  	fcall	___bmul
  2420  052F  1283               	bcf	3,5	;RP0=0, select bank0
  2421  0530  1303               	bcf	3,6	;RP1=0, select bank0
  2422  0531  0734               	addwf	ReadClock@hour1,w
  2423  0532  00AA               	movwf	??_ReadClock+1
  2424  0533  0825               	movf	ReadClock@hour,w
  2425  0534  0084               	movwf	4
  2426  0535  082A               	movf	??_ReadClock+1,w
  2427  0536  1383               	bcf	3,7	;select IRP bank0
  2428  0537  0080               	movwf	0
  2429                           
  2430                           ;MCP79510.c: 81: date10 = (date1 & 0x30) >> 4;
  2431  0538  0837               	movf	ReadClock@date1,w
  2432  0539  00A9               	movwf	??_ReadClock
  2433  053A  3004               	movlw	4
  2434  053B                     u2005:	
  2435  053B  1003               	clrc
  2436  053C  0CA9               	rrf	??_ReadClock,f
  2437  053D  3EFF               	addlw	-1
  2438  053E  1D03               	skipz
  2439  053F  2D3B               	goto	u2005
  2440  0540  0829               	movf	??_ReadClock,w
  2441  0541  3903               	andlw	3
  2442  0542  00AA               	movwf	??_ReadClock+1
  2443  0543  082A               	movf	??_ReadClock+1,w
  2444  0544  00AE               	movwf	ReadClock@date10
  2445                           
  2446                           ;MCP79510.c: 82: date1 = date1 & 0x0F;
  2447  0545  0837               	movf	ReadClock@date1,w
  2448  0546  390F               	andlw	15
  2449  0547  00A9               	movwf	??_ReadClock
  2450  0548  0829               	movf	??_ReadClock,w
  2451  0549  00B7               	movwf	ReadClock@date1
  2452                           
  2453                           ;MCP79510.c: 83: *date = date1 + date10 * 10;
  2454  054A  300A               	movlw	10
  2455  054B  00A9               	movwf	??_ReadClock
  2456  054C  0829               	movf	??_ReadClock,w
  2457  054D  00A0               	movwf	___bmul@multiplicand
  2458  054E  082E               	movf	ReadClock@date10,w
  2459  054F  160A  118A  269F  120A  118A  	fcall	___bmul
  2460  0554  1283               	bcf	3,5	;RP0=0, select bank0
  2461  0555  1303               	bcf	3,6	;RP1=0, select bank0
  2462  0556  0737               	addwf	ReadClock@date1,w
  2463  0557  00AA               	movwf	??_ReadClock+1
  2464  0558  0826               	movf	ReadClock@date,w
  2465  0559  0084               	movwf	4
  2466  055A  082A               	movf	??_ReadClock+1,w
  2467  055B  1383               	bcf	3,7	;select IRP bank0
  2468  055C  0080               	movwf	0
  2469                           
  2470                           ;MCP79510.c: 85: month10 = (month1 & 0x10) >> 4;
  2471  055D  0835               	movf	ReadClock@month1,w
  2472  055E  00A9               	movwf	??_ReadClock
  2473  055F  3004               	movlw	4
  2474  0560                     u2015:	
  2475  0560  1003               	clrc
  2476  0561  0CA9               	rrf	??_ReadClock,f
  2477  0562  3EFF               	addlw	-1
  2478  0563  1D03               	skipz
  2479  0564  2D60               	goto	u2015
  2480  0565  0829               	movf	??_ReadClock,w
  2481  0566  3901               	andlw	1
  2482  0567  00AA               	movwf	??_ReadClock+1
  2483  0568  082A               	movf	??_ReadClock+1,w
  2484  0569  00AF               	movwf	ReadClock@month10
  2485                           
  2486                           ;MCP79510.c: 86: month1 = month1 & 0x0F;
  2487  056A  0835               	movf	ReadClock@month1,w
  2488  056B  390F               	andlw	15
  2489  056C  00A9               	movwf	??_ReadClock
  2490  056D  0829               	movf	??_ReadClock,w
  2491  056E  00B5               	movwf	ReadClock@month1
  2492                           
  2493                           ;MCP79510.c: 87: *month = month1 + month10 * 10;
  2494  056F  300A               	movlw	10
  2495  0570  00A9               	movwf	??_ReadClock
  2496  0571  0829               	movf	??_ReadClock,w
  2497  0572  00A0               	movwf	___bmul@multiplicand
  2498  0573  082F               	movf	ReadClock@month10,w
  2499  0574  160A  118A  269F  120A  118A  	fcall	___bmul
  2500  0579  1283               	bcf	3,5	;RP0=0, select bank0
  2501  057A  1303               	bcf	3,6	;RP1=0, select bank0
  2502  057B  0735               	addwf	ReadClock@month1,w
  2503  057C  00AA               	movwf	??_ReadClock+1
  2504  057D  0827               	movf	ReadClock@month,w
  2505  057E  0084               	movwf	4
  2506  057F  082A               	movf	??_ReadClock+1,w
  2507  0580  1383               	bcf	3,7	;select IRP bank0
  2508  0581  0080               	movwf	0
  2509                           
  2510                           ;MCP79510.c: 89: year10 = (year1 & 0xF0) >> 4;
  2511  0582  0836               	movf	ReadClock@year1,w
  2512  0583  00A9               	movwf	??_ReadClock
  2513  0584  3004               	movlw	4
  2514  0585                     u2025:	
  2515  0585  1003               	clrc
  2516  0586  0CA9               	rrf	??_ReadClock,f
  2517  0587  3EFF               	addlw	-1
  2518  0588  1D03               	skipz
  2519  0589  2D85               	goto	u2025
  2520  058A  0829               	movf	??_ReadClock,w
  2521  058B  390F               	andlw	15
  2522  058C  00AA               	movwf	??_ReadClock+1
  2523  058D  082A               	movf	??_ReadClock+1,w
  2524  058E  00B0               	movwf	ReadClock@year10
  2525                           
  2526                           ;MCP79510.c: 90: year1 = year1 & 0x0F;
  2527  058F  0836               	movf	ReadClock@year1,w
  2528  0590  390F               	andlw	15
  2529  0591  00A9               	movwf	??_ReadClock
  2530  0592  0829               	movf	??_ReadClock,w
  2531  0593  00B6               	movwf	ReadClock@year1
  2532                           
  2533                           ;MCP79510.c: 91: *year = year1 + year10 * 10;
  2534  0594  300A               	movlw	10
  2535  0595  00A9               	movwf	??_ReadClock
  2536  0596  0829               	movf	??_ReadClock,w
  2537  0597  00A0               	movwf	___bmul@multiplicand
  2538  0598  0830               	movf	ReadClock@year10,w
  2539  0599  160A  118A  269F   	fcall	___bmul
  2540  059C  1283               	bcf	3,5	;RP0=0, select bank0
  2541  059D  1303               	bcf	3,6	;RP1=0, select bank0
  2542  059E  0736               	addwf	ReadClock@year1,w
  2543  059F  00AA               	movwf	??_ReadClock+1
  2544  05A0  0828               	movf	ReadClock@year,w
  2545  05A1  0084               	movwf	4
  2546  05A2  082A               	movf	??_ReadClock+1,w
  2547  05A3  1383               	bcf	3,7	;select IRP bank0
  2548  05A4  0080               	movwf	0
  2549  05A5  0008               	return
  2550  05A6                     __end_of_ReadClock:	
  2551                           
  2552                           	psect	text3
  2553  169F                     __ptext3:	
  2554 ;; *************** function ___bmul *****************
  2555 ;; Defined at:
  2556 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  multiplier      1    wreg     unsigned char 
  2559 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2562 ;;  product         1    2[BANK0 ] unsigned char 
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      unsigned char 
  2565 ;; Registers used:
  2566 ;;		wreg, status,2, status,0
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2572 ;;      Params:         0       1       0       0       0
  2573 ;;      Locals:         0       2       0       0       0
  2574 ;;      Temps:          0       1       0       0       0
  2575 ;;      Totals:         0       4       0       0       0
  2576 ;;Total ram usage:        4 bytes
  2577 ;; Hardware stack levels used:    1
  2578 ;; Hardware stack levels required when called:    2
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_ReadClock
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           
  2587                           ;psect for function ___bmul
  2588  169F                     ___bmul:	
  2589                           
  2590                           ;incstack = 0
  2591                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2592                           ;___bmul@multiplier stored from wreg
  2593  169F  1283               	bcf	3,5	;RP0=0, select bank0
  2594  16A0  1303               	bcf	3,6	;RP1=0, select bank0
  2595  16A1  00A3               	movwf	___bmul@multiplier
  2596  16A2  01A2               	clrf	___bmul@product
  2597  16A3                     l2679:	
  2598  16A3  1C23               	btfss	___bmul@multiplier,0
  2599  16A4  2EA9               	goto	l2683
  2600  16A5  0820               	movf	___bmul@multiplicand,w
  2601  16A6  00A1               	movwf	??___bmul
  2602  16A7  0821               	movf	??___bmul,w
  2603  16A8  07A2               	addwf	___bmul@product,f
  2604  16A9                     l2683:	
  2605  16A9  1003               	clrc
  2606  16AA  0DA0               	rlf	___bmul@multiplicand,f
  2607  16AB  1003               	clrc
  2608  16AC  0CA3               	rrf	___bmul@multiplier,f
  2609  16AD  0823               	movf	___bmul@multiplier,w
  2610  16AE  1D03               	btfss	3,2
  2611  16AF  2EA3               	goto	l2679
  2612  16B0  0822               	movf	___bmul@product,w
  2613  16B1  0008               	return
  2614  16B2                     __end_of___bmul:	
  2615                           
  2616                           	psect	text4
  2617  0A52                     __ptext4:	
  2618 ;; *************** function _IncreaseMemoryAdress *****************
  2619 ;; Defined at:
  2620 ;;		line 1013 in file "functions.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;		None
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  var3            1    6[BANK0 ] unsigned char 
  2625 ;;  var2            1    5[BANK0 ] unsigned char 
  2626 ;;  var1            1    4[BANK0 ] unsigned char 
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0, pclath, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2636 ;;      Params:         0       0       0       0       0
  2637 ;;      Locals:         0       3       0       0       0
  2638 ;;      Temps:          0       1       0       0       0
  2639 ;;      Totals:         0       4       0       0       0
  2640 ;;Total ram usage:        4 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    3
  2643 ;; This function calls:
  2644 ;;		_eeprom_read
  2645 ;;		_eeprom_write
  2646 ;; This function is called by:
  2647 ;;		_saveDataToFlash
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           
  2652                           ;psect for function _IncreaseMemoryAdress
  2653  0A52                     _IncreaseMemoryAdress:	
  2654                           
  2655                           ;functions.c: 1015: unsigned char var1, var2, var3;
  2656                           ;functions.c: 1016: var1 = eeprom_read(3);
  2657                           
  2658                           ;incstack = 0
  2659                           ; Regs used in _IncreaseMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  2660  0A52  3003               	movlw	3
  2661  0A53  160A  118A  278A  120A  158A  	fcall	_eeprom_read
  2662  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0A59  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0A5A  00A3               	movwf	??_IncreaseMemoryAdress
  2665  0A5B  0823               	movf	??_IncreaseMemoryAdress,w
  2666  0A5C  00A4               	movwf	IncreaseMemoryAdress@var1
  2667                           
  2668                           ;functions.c: 1017: var1++;
  2669  0A5D  3001               	movlw	1
  2670  0A5E  00A3               	movwf	??_IncreaseMemoryAdress
  2671  0A5F  0823               	movf	??_IncreaseMemoryAdress,w
  2672  0A60  07A4               	addwf	IncreaseMemoryAdress@var1,f
  2673                           
  2674                           ;functions.c: 1018: eeprom_write(3,var1);
  2675  0A61  0824               	movf	IncreaseMemoryAdress@var1,w
  2676  0A62  00A3               	movwf	??_IncreaseMemoryAdress
  2677  0A63  0823               	movf	??_IncreaseMemoryAdress,w
  2678  0A64  00A0               	movwf	eeprom_write@value
  2679  0A65  3003               	movlw	3
  2680  0A66  120A  158A  20CE  120A  158A  	fcall	_eeprom_write
  2681                           
  2682                           ;functions.c: 1019: if(var1 == 0)
  2683  0A6B  1283               	bcf	3,5	;RP0=0, select bank0
  2684  0A6C  1303               	bcf	3,6	;RP1=0, select bank0
  2685  0A6D  0824               	movf	IncreaseMemoryAdress@var1,w
  2686  0A6E  1D03               	btfss	3,2
  2687  0A6F  0008               	return
  2688                           
  2689                           ;functions.c: 1020: {
  2690                           ;functions.c: 1021: var2 = eeprom_read(2);
  2691  0A70  3002               	movlw	2
  2692  0A71  160A  118A  278A  120A  158A  	fcall	_eeprom_read
  2693  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  2694  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  2695  0A78  00A3               	movwf	??_IncreaseMemoryAdress
  2696  0A79  0823               	movf	??_IncreaseMemoryAdress,w
  2697  0A7A  00A5               	movwf	IncreaseMemoryAdress@var2
  2698                           
  2699                           ;functions.c: 1022: var2++;
  2700  0A7B  3001               	movlw	1
  2701  0A7C  00A3               	movwf	??_IncreaseMemoryAdress
  2702  0A7D  0823               	movf	??_IncreaseMemoryAdress,w
  2703  0A7E  07A5               	addwf	IncreaseMemoryAdress@var2,f
  2704                           
  2705                           ;functions.c: 1023: eeprom_write(2,var2);
  2706  0A7F  0825               	movf	IncreaseMemoryAdress@var2,w
  2707  0A80  00A3               	movwf	??_IncreaseMemoryAdress
  2708  0A81  0823               	movf	??_IncreaseMemoryAdress,w
  2709  0A82  00A0               	movwf	eeprom_write@value
  2710  0A83  3002               	movlw	2
  2711  0A84  120A  158A  20CE  120A  158A  	fcall	_eeprom_write
  2712                           
  2713                           ;functions.c: 1024: if(var2 == 0)
  2714  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  2715  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  2716  0A8B  0825               	movf	IncreaseMemoryAdress@var2,w
  2717  0A8C  1D03               	btfss	3,2
  2718  0A8D  0008               	return
  2719                           
  2720                           ;functions.c: 1025: {
  2721                           ;functions.c: 1026: var3 = eeprom_read(1);
  2722  0A8E  3001               	movlw	1
  2723  0A8F  160A  118A  278A  120A  158A  	fcall	_eeprom_read
  2724  0A94  1283               	bcf	3,5	;RP0=0, select bank0
  2725  0A95  1303               	bcf	3,6	;RP1=0, select bank0
  2726  0A96  00A3               	movwf	??_IncreaseMemoryAdress
  2727  0A97  0823               	movf	??_IncreaseMemoryAdress,w
  2728  0A98  00A6               	movwf	IncreaseMemoryAdress@var3
  2729                           
  2730                           ;functions.c: 1027: var3++;
  2731  0A99  3001               	movlw	1
  2732  0A9A  00A3               	movwf	??_IncreaseMemoryAdress
  2733  0A9B  0823               	movf	??_IncreaseMemoryAdress,w
  2734  0A9C  07A6               	addwf	IncreaseMemoryAdress@var3,f
  2735                           
  2736                           ;functions.c: 1028: if(var3 > 0x1F)
  2737  0A9D  3020               	movlw	32
  2738  0A9E  0226               	subwf	IncreaseMemoryAdress@var3,w
  2739  0A9F  1C03               	skipc
  2740  0AA0  2AA5               	goto	l2877
  2741                           
  2742                           ;functions.c: 1029: var3 = 0x1F;
  2743  0AA1  301F               	movlw	31
  2744  0AA2  00A3               	movwf	??_IncreaseMemoryAdress
  2745  0AA3  0823               	movf	??_IncreaseMemoryAdress,w
  2746  0AA4  00A6               	movwf	IncreaseMemoryAdress@var3
  2747  0AA5                     l2877:	
  2748                           
  2749                           ;functions.c: 1031: eeprom_write(1, var3);
  2750  0AA5  0826               	movf	IncreaseMemoryAdress@var3,w
  2751  0AA6  00A3               	movwf	??_IncreaseMemoryAdress
  2752  0AA7  0823               	movf	??_IncreaseMemoryAdress,w
  2753  0AA8  00A0               	movwf	eeprom_write@value
  2754  0AA9  3001               	movlw	1
  2755  0AAA  120A  158A  20CE   	fcall	_eeprom_write
  2756  0AAD  0008               	return
  2757  0AAE                     __end_of_IncreaseMemoryAdress:	
  2758                           
  2759                           	psect	text5
  2760  09F6                     __ptext5:	
  2761 ;; *************** function _TransiverToReceive *****************
  2762 ;; Defined at:
  2763 ;;		line 16 in file "functions.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2777 ;;      Params:         0       0       0       0       0
  2778 ;;      Locals:         0       0       0       0       0
  2779 ;;      Temps:          0       2       0       0       0
  2780 ;;      Totals:         0       2       0       0       0
  2781 ;;Total ram usage:        2 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    7
  2784 ;; This function calls:
  2785 ;;		_FindChannel
  2786 ;;		_RegisterRead
  2787 ;;		_RegisterSet
  2788 ;;		_SetRFMode
  2789 ;;		_timerFunction
  2790 ;; This function is called by:
  2791 ;;		_main
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           
  2796                           ;psect for function _TransiverToReceive
  2797  09F6                     _TransiverToReceive:	
  2798                           
  2799                           ;functions.c: 18: timerFunction(2, 5);
  2800                           
  2801                           ;incstack = 0
  2802                           ; Regs used in _TransiverToReceive: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2803  09F6  3002               	movlw	2
  2804  09F7  1283               	bcf	3,5	;RP0=0, select bank0
  2805  09F8  1303               	bcf	3,6	;RP1=0, select bank0
  2806  09F9  00A0               	movwf	timerFunction@intTimerNumber
  2807  09FA  3000               	movlw	0
  2808  09FB  00A1               	movwf	timerFunction@intTimerNumber+1
  2809  09FC  3005               	movlw	5
  2810  09FD  00A2               	movwf	timerFunction@intSetSeconds
  2811  09FE  3000               	movlw	0
  2812  09FF  00A3               	movwf	timerFunction@intSetSeconds+1
  2813  0A00  160A  118A  267B  120A  158A  	fcall	_timerFunction
  2814                           
  2815                           ;functions.c: 22: SetRFMode(0x20);
  2816  0A05  3020               	movlw	32
  2817  0A06  120A  158A  237F  120A  158A  	fcall	_SetRFMode
  2818                           
  2819                           ;functions.c: 23: _delay((unsigned long)((10)*(4000000/4000.0)));
  2820  0A0B  300D               	movlw	13
  2821  0A0C  1283               	bcf	3,5	;RP0=0, select bank0
  2822  0A0D  1303               	bcf	3,6	;RP1=0, select bank0
  2823  0A0E  00B6               	movwf	??_TransiverToReceive+1
  2824  0A0F  30FB               	movlw	251
  2825  0A10  00B5               	movwf	??_TransiverToReceive
  2826  0A11                     u2517:	
  2827  0A11  0BB5               	decfsz	??_TransiverToReceive,f
  2828  0A12  2A11               	goto	u2517
  2829  0A13  0BB6               	decfsz	??_TransiverToReceive+1,f
  2830  0A14  2A11               	goto	u2517
  2831                           
  2832                           ;functions.c: 24: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  2833  0A15  300E               	movlw	14
  2834  0A16  160A  118A  2729  120A  158A  	fcall	_RegisterRead
  2835  0A1B  3802               	iorlw	2
  2836  0A1C  1283               	bcf	3,5	;RP0=0, select bank0
  2837  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  2838  0A1E  00B5               	movwf	??_TransiverToReceive
  2839  0A1F  0835               	movf	??_TransiverToReceive,w
  2840  0A20  00A7               	movwf	RegisterSet@value
  2841  0A21  300E               	movlw	14
  2842  0A22  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  2843                           
  2844                           ;functions.c: 25: SetRFMode(0x40);
  2845  0A27  3040               	movlw	64
  2846  0A28  120A  158A  237F  120A  158A  	fcall	_SetRFMode
  2847  0A2D                     l3107:	
  2848                           ;functions.c: 26: while((RegisterRead(0x0E) & 0b00000010) == 0)
  2849                           
  2850  0A2D  300E               	movlw	14
  2851  0A2E  160A  118A  2729  120A  158A  	fcall	_RegisterRead
  2852  0A33  3902               	andlw	2
  2853  0A34  1D03               	btfss	3,2
  2854  0A35  2A40               	goto	l3109
  2855                           
  2856                           ;functions.c: 27: {
  2857                           ;functions.c: 28: if(bTimerComplete[2])
  2858  0A36  1283               	bcf	3,5	;RP0=0, select bank0
  2859  0A37  1303               	bcf	3,6	;RP1=0, select bank0
  2860  0A38  0858               	movf	_bTimerComplete+2,w
  2861  0A39  1903               	btfsc	3,2
  2862  0A3A  2A2D               	goto	l3107
  2863                           
  2864                           ;functions.c: 29: {
  2865                           ;functions.c: 30: FindChannel();
  2866  0A3B  120A  118A  26B6  120A  158A  	fcall	_FindChannel
  2867  0A40                     l3109:	
  2868                           ;functions.c: 31: break;
  2869                           
  2870                           
  2871                           ;functions.c: 32: }
  2872                           ;functions.c: 33: }
  2873                           ;functions.c: 35: SetRFMode(0x60);
  2874  0A40  3060               	movlw	96
  2875  0A41  120A  158A  237F  120A  158A  	fcall	_SetRFMode
  2876                           
  2877                           ;functions.c: 36: _delay((unsigned long)((500)*(4000000/4000000.0)));
  2878  0A46  30A5               	movlw	165
  2879  0A47  1283               	bcf	3,5	;RP0=0, select bank0
  2880  0A48  1303               	bcf	3,6	;RP1=0, select bank0
  2881  0A49  00B5               	movwf	??_TransiverToReceive
  2882  0A4A                     u2527:	
  2883  0A4A  0BB5               	decfsz	??_TransiverToReceive,f
  2884  0A4B  2A4A               	goto	u2527
  2885  0A4C  2A4D               	nop2
  2886                           
  2887                           ;functions.c: 37: bTransiverModeReceive = 1;
  2888  0A4D  1283               	bcf	3,5	;RP0=0, select bank0
  2889  0A4E  1303               	bcf	3,6	;RP1=0, select bank0
  2890  0A4F  01EA               	clrf	_bTransiverModeReceive
  2891  0A50  0AEA               	incf	_bTransiverModeReceive,f
  2892  0A51  0008               	return
  2893  0A52                     __end_of_TransiverToReceive:	
  2894                           
  2895                           	psect	text6
  2896  0B12                     __ptext6:	
  2897 ;; *************** function _TransiverReadFIFO *****************
  2898 ;; Defined at:
  2899 ;;		line 42 in file "functions.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;		None
  2902 ;; Auto vars:     Size  Location     Type
  2903 ;;  j               2   32[BANK1 ] int 
  2904 ;;  ReceivedStri   30    0[BANK1 ] unsigned char [30]
  2905 ;;  i               2   30[BANK1 ] int 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2915 ;;      Params:         0       0       0       0       0
  2916 ;;      Locals:         0       0      34       0       0
  2917 ;;      Temps:          0       2       0       0       0
  2918 ;;      Totals:         0       2      34       0       0
  2919 ;;Total ram usage:       36 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:   10
  2922 ;; This function calls:
  2923 ;;		_ReadFIFO
  2924 ;;		_ReceivedPacketHandler
  2925 ;;		_SetRFMode
  2926 ;;		_timerFunction
  2927 ;; This function is called by:
  2928 ;;		_main
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           
  2933                           ;psect for function _TransiverReadFIFO
  2934  0B12                     _TransiverReadFIFO:	
  2935                           
  2936                           ;functions.c: 44: unsigned char ReceivedString[30];
  2937                           ;functions.c: 45: timerFunction(3, 5);
  2938                           
  2939                           ;incstack = 0
  2940 ;; hardware stack exceeded
  2941                           ; Regs used in _TransiverReadFIFO: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2942  0B12  3003               	movlw	3
  2943  0B13  1283               	bcf	3,5	;RP0=0, select bank0
  2944  0B14  1303               	bcf	3,6	;RP1=0, select bank0
  2945  0B15  00A0               	movwf	timerFunction@intTimerNumber
  2946  0B16  3000               	movlw	0
  2947  0B17  00A1               	movwf	timerFunction@intTimerNumber+1
  2948  0B18  3005               	movlw	5
  2949  0B19  00A2               	movwf	timerFunction@intSetSeconds
  2950  0B1A  3000               	movlw	0
  2951  0B1B  00A3               	movwf	timerFunction@intSetSeconds+1
  2952  0B1C  160A  118A  267B  120A  158A  	fcall	_timerFunction
  2953                           
  2954                           ;functions.c: 47: SetRFMode(0x20);
  2955  0B21  3020               	movlw	32
  2956  0B22  120A  158A  237F  120A  158A  	fcall	_SetRFMode
  2957                           
  2958                           ;functions.c: 48: bTransiverModeReceive = 0;
  2959  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  2960  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  2961  0B29  01EA               	clrf	_bTransiverModeReceive
  2962                           
  2963                           ;functions.c: 49: int i = 0;
  2964  0B2A  1683               	bsf	3,5	;RP0=1, select bank1
  2965  0B2B  1303               	bcf	3,6	;RP1=0, select bank1
  2966  0B2C  01BE               	clrf	TransiverReadFIFO@i^(0+128)
  2967  0B2D  01BF               	clrf	(TransiverReadFIFO@i+1)^(0+128)
  2968                           
  2969                           ;functions.c: 50: for (int j = 0; j < 30; ++j)
  2970  0B2E  01C0               	clrf	TransiverReadFIFO@j^(0+128)
  2971  0B2F  01C1               	clrf	(TransiverReadFIFO@j+1)^(0+128)
  2972  0B30                     L1:	
  2973  0B30  0841               	movf	(TransiverReadFIFO@j+1)^(0+128),w
  2974  0B31  3A80               	xorlw	128
  2975  0B32  00FF               	movwf	127
  2976  0B33  3080               	movlw	128
  2977  0B34  027F               	subwf	127,w
  2978  0B35  1D03               	skipz
  2979  0B36  2B39               	goto	u2175
  2980  0B37  301E               	movlw	30
  2981  0B38  0240               	subwf	TransiverReadFIFO@j^(0+128),w
  2982  0B39                     u2175:	
  2983  0B39  1803               	btfsc	3,0
  2984  0B3A  2B63               	goto	l3137
  2985                           
  2986                           ;functions.c: 51: {
  2987                           ;functions.c: 52: ReceivedString[j] = 0;
  2988  0B3B  1683               	bsf	3,5	;RP0=1, select bank1
  2989  0B3C  1303               	bcf	3,6	;RP1=0, select bank1
  2990  0B3D  0840               	movf	TransiverReadFIFO@j^(0+128),w
  2991  0B3E  3EA0               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  2992  0B3F  0084               	movwf	4
  2993  0B40  1383               	bcf	3,7	;select IRP bank1
  2994  0B41  0180               	clrf	0
  2995  0B42  3001               	movlw	1
  2996  0B43  07C0               	addwf	TransiverReadFIFO@j^(0+128),f
  2997  0B44  1803               	skipnc
  2998  0B45  0AC1               	incf	(TransiverReadFIFO@j+1)^(0+128),f
  2999  0B46  3000               	movlw	0
  3000  0B47  07C1               	addwf	(TransiverReadFIFO@j+1)^(0+128),f
  3001  0B48  2B30               	goto	L1
  3002  0B49                     l3133:	
  3003                           ;functions.c: 53: }
  3004                           ;functions.c: 54: while((RB3)&&(!bTimerComplete[3]))
  3005                           
  3006                           
  3007                           ;functions.c: 55: {
  3008                           ;functions.c: 56: ReceivedString[i] = ReadFIFO();
  3009  0B49  160A  118A  265D  120A  158A  	fcall	_ReadFIFO
  3010  0B4E  1283               	bcf	3,5	;RP0=0, select bank0
  3011  0B4F  1303               	bcf	3,6	;RP1=0, select bank0
  3012  0B50  00D1               	movwf	??_TransiverReadFIFO
  3013  0B51  1683               	bsf	3,5	;RP0=1, select bank1
  3014  0B52  1303               	bcf	3,6	;RP1=0, select bank1
  3015  0B53  083E               	movf	TransiverReadFIFO@i^(0+128),w
  3016  0B54  3EA0               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3017  0B55  0084               	movwf	4
  3018  0B56  1283               	bcf	3,5	;RP0=0, select bank0
  3019  0B57  1303               	bcf	3,6	;RP1=0, select bank0
  3020  0B58  0851               	movf	??_TransiverReadFIFO,w
  3021  0B59  1383               	bcf	3,7	;select IRP bank1
  3022  0B5A  0080               	movwf	0
  3023                           
  3024                           ;functions.c: 57: i++;
  3025  0B5B  3001               	movlw	1
  3026  0B5C  1683               	bsf	3,5	;RP0=1, select bank1
  3027  0B5D  1303               	bcf	3,6	;RP1=0, select bank1
  3028  0B5E  07BE               	addwf	TransiverReadFIFO@i^(0+128),f
  3029  0B5F  1803               	skipnc
  3030  0B60  0ABF               	incf	(TransiverReadFIFO@i+1)^(0+128),f
  3031  0B61  3000               	movlw	0
  3032  0B62  07BF               	addwf	(TransiverReadFIFO@i+1)^(0+128),f
  3033  0B63                     l3137:	
  3034  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  3035  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  3036  0B65  1D86               	btfss	6,3	;volatile
  3037  0B66  2B6A               	goto	l3141
  3038  0B67  0859               	movf	_bTimerComplete+3,w
  3039  0B68  1903               	btfsc	3,2
  3040  0B69  2B49               	goto	l3133
  3041  0B6A                     l3141:	
  3042                           
  3043                           ;functions.c: 58: }
  3044                           ;functions.c: 60: _delay((unsigned long)((10)*(4000000/4000.0)));
  3045  0B6A  300D               	movlw	13
  3046  0B6B  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0B6C  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0B6D  00D2               	movwf	??_TransiverReadFIFO+1
  3049  0B6E  30FB               	movlw	251
  3050  0B6F  00D1               	movwf	??_TransiverReadFIFO
  3051  0B70                     u2537:	
  3052  0B70  0BD1               	decfsz	??_TransiverReadFIFO,f
  3053  0B71  2B70               	goto	u2537
  3054  0B72  0BD2               	decfsz	??_TransiverReadFIFO+1,f
  3055  0B73  2B70               	goto	u2537
  3056                           
  3057                           ;functions.c: 61: SetRFMode(0x00);
  3058  0B74  3000               	movlw	0
  3059  0B75  120A  158A  237F  120A  158A  	fcall	_SetRFMode
  3060                           
  3061                           ;functions.c: 63: ReceivedPacketHandler(ReceivedString);
  3062  0B7A  30A0               	movlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  3063  0B7B  120A  118A  2290   	fcall	_ReceivedPacketHandler
  3064  0B7E  0008               	return
  3065  0B7F                     __end_of_TransiverReadFIFO:	
  3066                           
  3067                           	psect	text7
  3068  0290                     __ptext7:	
  3069 ;; *************** function _ReceivedPacketHandler *****************
  3070 ;; Defined at:
  3071 ;;		line 73 in file "functions.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;  Data            1    wreg     PTR unsigned char 
  3074 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  Data            1   48[BANK0 ] PTR unsigned char 
  3077 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  3078 ;; Return value:  Size  Location     Type
  3079 ;;                  1    wreg      void 
  3080 ;; Registers used:
  3081 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3082 ;; Tracked objects:
  3083 ;;		On entry : 0/0
  3084 ;;		On exit  : 0/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3087 ;;      Params:         0       0       0       0       0
  3088 ;;      Locals:         0       1       0       0       0
  3089 ;;      Temps:          0       1       0       0       0
  3090 ;;      Totals:         0       2       0       0       0
  3091 ;;Total ram usage:        2 bytes
  3092 ;; Hardware stack levels used:    1
  3093 ;; Hardware stack levels required when called:    9
  3094 ;; This function calls:
  3095 ;;		_AnalogValue
  3096 ;;		_DarknessCheck
  3097 ;;		_DelayDs
  3098 ;;		_OperationMode
  3099 ;;		_ResetMemoryAdress
  3100 ;;		_SendMemoryData
  3101 ;;		_TransmittPacket
  3102 ;;		_eeprom_read
  3103 ;;		_eeprom_write
  3104 ;;		_ram_bulk_erase
  3105 ;;		_read_ram_status
  3106 ;;		_strstr
  3107 ;;		_write_ram_status
  3108 ;; This function is called by:
  3109 ;;		_TransiverReadFIFO
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           
  3114                           ;psect for function _ReceivedPacketHandler
  3115  0290                     _ReceivedPacketHandler:	
  3116                           
  3117                           ;incstack = 0
  3118 ;; hardware stack exceeded
  3119                           ; Regs used in _ReceivedPacketHandler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  3120                           ;ReceivedPacketHandler@Data stored from wreg
  3121  0290  1283               	bcf	3,5	;RP0=0, select bank0
  3122  0291  1303               	bcf	3,6	;RP1=0, select bank0
  3123  0292  00D0               	movwf	ReceivedPacketHandler@Data
  3124                           
  3125                           ;functions.c: 77: if((strstr(Data, "N1BLINK")) && (OperationMode() == 6))
  3126  0293  3028               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3127  0294  00CF               	movwf	??_ReceivedPacketHandler
  3128  0295  084F               	movf	??_ReceivedPacketHandler,w
  3129  0296  00AE               	movwf	strstr@s2
  3130  0297  0850               	movf	ReceivedPacketHandler@Data,w
  3131  0298  120A  118A  27AE  120A  118A  	fcall	_strstr
  3132  029D  3A00               	xorlw	0
  3133  029E  1903               	skipnz
  3134  029F  2AA8               	goto	l2711
  3135  02A0  160A  118A  2646  120A  118A  	fcall	_OperationMode
  3136  02A5  3A06               	xorlw	6
  3137  02A6  1903               	btfsc	3,2
  3138  02A7  2ABF               	goto	l2715
  3139  02A8                     l2711:	
  3140                           ;functions.c: 82: }
  3141                           
  3142                           ;functions.c: 81: DelayDs(100);
  3143                           
  3144                           ;functions.c: 80: intBlinkCounter = 0;
  3145                           
  3146                           ;functions.c: 78: {
  3147                           ;functions.c: 79: intBlinkCycle = 1;
  3148                           
  3149                           
  3150                           ;functions.c: 83: else if((strstr(Data, "N2BLINK")) && (OperationMode() == 7))
  3151  02A8  3030               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3152  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  3153  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  3154  02AB  00CF               	movwf	??_ReceivedPacketHandler
  3155  02AC  084F               	movf	??_ReceivedPacketHandler,w
  3156  02AD  00AE               	movwf	strstr@s2
  3157  02AE  0850               	movf	ReceivedPacketHandler@Data,w
  3158  02AF  120A  118A  27AE  120A  118A  	fcall	_strstr
  3159  02B4  3A00               	xorlw	0
  3160  02B5  1903               	skipnz
  3161  02B6  2AD0               	goto	l2721
  3162  02B7  160A  118A  2646  120A  118A  	fcall	_OperationMode
  3163  02BC  3A07               	xorlw	7
  3164  02BD  1D03               	skipz
  3165  02BE  2AD0               	goto	l2721
  3166  02BF                     l2715:	
  3167                           
  3168                           ;functions.c: 84: {
  3169                           ;functions.c: 85: intBlinkCycle = 1;
  3170  02BF  3001               	movlw	1
  3171  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3172  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3173  02C2  00DD               	movwf	_intBlinkCycle
  3174  02C3  3000               	movlw	0
  3175  02C4  00DE               	movwf	_intBlinkCycle+1
  3176                           
  3177                           ;functions.c: 86: intBlinkCounter = 0;
  3178  02C5  01FC               	clrf	_intBlinkCounter
  3179  02C6  01FD               	clrf	_intBlinkCounter+1
  3180                           
  3181                           ;functions.c: 87: DelayDs(100);
  3182  02C7  3064               	movlw	100
  3183  02C8  00A0               	movwf	DelayDs@cnt
  3184  02C9  3000               	movlw	0
  3185  02CA  00A1               	movwf	DelayDs@cnt+1
  3186  02CB  160A  118A  2767  120A  118A  	fcall	_DelayDs
  3187  02D0                     l2721:	
  3188                           
  3189                           ;functions.c: 88: }
  3190                           ;functions.c: 92: if(Data[0] != 44 || Data[3] != 55)
  3191  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3192  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3193  02D2  0850               	movf	ReceivedPacketHandler@Data,w
  3194  02D3  0084               	movwf	4
  3195  02D4  302C               	movlw	44
  3196  02D5  1383               	bcf	3,7	;select IRP bank0
  3197  02D6  0600               	xorwf	0,w
  3198  02D7  1D03               	btfss	3,2
  3199  02D8  0008               	return
  3200  02D9  0850               	movf	ReceivedPacketHandler@Data,w
  3201  02DA  3E03               	addlw	3
  3202  02DB  0084               	movwf	4
  3203  02DC  3037               	movlw	55
  3204  02DD  0600               	xorwf	0,w
  3205  02DE  1D03               	btfss	3,2
  3206  02DF  0008               	return
  3207  02E0  2C4A               	goto	l2819
  3208  02E1                     l308:	
  3209                           ;functions.c: 99: {
  3210                           ;functions.c: 100: case 1:
  3211                           
  3212                           ;functions.c: 98: switch (Data[2])
  3213                           
  3214                           ;functions.c: 96: {
  3215                           ;functions.c: 97: case 1:
  3216                           
  3217                           ;functions.c: 95: switch (Data[1])
  3218                           
  3219                           ;functions.c: 93: return;
  3220                           
  3221                           
  3222                           ;functions.c: 101: RC2 = 1;
  3223  02E1  1507               	bsf	7,2	;volatile
  3224                           
  3225                           ;functions.c: 102: DelayDs(10);
  3226  02E2  300A               	movlw	10
  3227  02E3  00A0               	movwf	DelayDs@cnt
  3228  02E4  3000               	movlw	0
  3229  02E5  00A1               	movwf	DelayDs@cnt+1
  3230  02E6  160A  118A  2767  120A  118A  	fcall	_DelayDs
  3231                           
  3232                           ;functions.c: 103: RC2 = 0;
  3233  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  3234  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  3235  02ED  1107               	bcf	7,2	;volatile
  3236                           
  3237                           ;functions.c: 104: DelayDs(5);
  3238  02EE  3005               	movlw	5
  3239  02EF  00A0               	movwf	DelayDs@cnt
  3240  02F0  3000               	movlw	0
  3241  02F1  00A1               	movwf	DelayDs@cnt+1
  3242  02F2  160A  118A  2767   	fcall	_DelayDs
  3243                           
  3244                           ;functions.c: 105: break;
  3245  02F5  0008               	return
  3246  02F6                     l310:	
  3247                           ;functions.c: 107: case 2:
  3248                           
  3249                           
  3250                           ;functions.c: 108: RC1 = 1;
  3251  02F6  1487               	bsf	7,1	;volatile
  3252                           
  3253                           ;functions.c: 109: DelayDs(10);
  3254  02F7  300A               	movlw	10
  3255  02F8  00A0               	movwf	DelayDs@cnt
  3256  02F9  3000               	movlw	0
  3257  02FA  00A1               	movwf	DelayDs@cnt+1
  3258  02FB  160A  118A  2767  120A  118A  	fcall	_DelayDs
  3259                           
  3260                           ;functions.c: 110: RC1 = 0;
  3261  0300  1283               	bcf	3,5	;RP0=0, select bank0
  3262  0301  1303               	bcf	3,6	;RP1=0, select bank0
  3263  0302  1087               	bcf	7,1	;volatile
  3264                           
  3265                           ;functions.c: 111: DelayDs(5);
  3266  0303  3005               	movlw	5
  3267  0304  00A0               	movwf	DelayDs@cnt
  3268  0305  3000               	movlw	0
  3269  0306  00A1               	movwf	DelayDs@cnt+1
  3270  0307  160A  118A  2767   	fcall	_DelayDs
  3271                           
  3272                           ;functions.c: 112: break;
  3273  030A  0008               	return
  3274  030B                     l311:	
  3275                           ;functions.c: 114: case 3:
  3276                           
  3277                           
  3278                           ;functions.c: 115: RB1 = 0;
  3279  030B  1086               	bcf	6,1	;volatile
  3280                           
  3281                           ;functions.c: 116: DelayDs(10);
  3282  030C  300A               	movlw	10
  3283  030D  00A0               	movwf	DelayDs@cnt
  3284  030E  3000               	movlw	0
  3285  030F  00A1               	movwf	DelayDs@cnt+1
  3286  0310  160A  118A  2767  120A  118A  	fcall	_DelayDs
  3287                           
  3288                           ;functions.c: 117: RB1 = 1;
  3289  0315  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0316  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0317  1486               	bsf	6,1	;volatile
  3292                           
  3293                           ;functions.c: 118: DelayDs(5);
  3294  0318  3005               	movlw	5
  3295  0319  00A0               	movwf	DelayDs@cnt
  3296  031A  3000               	movlw	0
  3297  031B  00A1               	movwf	DelayDs@cnt+1
  3298  031C  160A  118A  2767   	fcall	_DelayDs
  3299                           
  3300                           ;functions.c: 124: }
  3301                           
  3302                           ;functions.c: 122: break;
  3303                           
  3304                           ;functions.c: 121: default:
  3305                           
  3306                           ;functions.c: 119: break;
  3307  031F  0008               	return
  3308  0320                     l2739:	
  3309  0320  1283               	bcf	3,5	;RP0=0, select bank0
  3310  0321  1303               	bcf	3,6	;RP1=0, select bank0
  3311  0322  0850               	movf	ReceivedPacketHandler@Data,w
  3312  0323  3E02               	addlw	2
  3313  0324  0084               	movwf	4
  3314  0325  1383               	bcf	3,7	;select IRP bank0
  3315  0326  0800               	movf	0,w
  3316                           
  3317                           ; Switch size 1, requested type "space"
  3318                           ; Number of cases is 3, Range of values is 1 to 3
  3319                           ; switch strategies available:
  3320                           ; Name         Instructions Cycles
  3321                           ; simple_byte           10     6 (average)
  3322                           ; direct_byte           20    11 (fixed)
  3323                           ; jumptable            263     9 (fixed)
  3324                           ;	Chosen strategy is simple_byte
  3325  0327  3A01               	xorlw	1	; case 1
  3326  0328  1903               	skipnz
  3327  0329  2AE1               	goto	l308
  3328  032A  3A03               	xorlw	3	; case 2
  3329  032B  1903               	skipnz
  3330  032C  2AF6               	goto	l310
  3331  032D  3A01               	xorlw	1	; case 3
  3332  032E  1903               	skipnz
  3333  032F  2B0B               	goto	l311
  3334  0330  2C6C               	goto	l304
  3335                           
  3336                           ;functions.c: 125: break;
  3337  0331  0008               	return
  3338  0332                     l2741:	
  3339                           ;functions.c: 126: case 2:
  3340                           
  3341                           
  3342                           ;functions.c: 127: if(Data[2] == 1 && OperationMode() == 6)
  3343  0332  0850               	movf	ReceivedPacketHandler@Data,w
  3344  0333  3E02               	addlw	2
  3345  0334  0084               	movwf	4
  3346  0335  0300               	decf	0,w
  3347  0336  1D03               	btfss	3,2
  3348  0337  2B51               	goto	l2751
  3349  0338  160A  118A  2646  120A  118A  	fcall	_OperationMode
  3350  033D  3A06               	xorlw	6
  3351  033E  1D03               	skipz
  3352  033F  2B51               	goto	l2751
  3353                           
  3354                           ;functions.c: 128: {
  3355                           ;functions.c: 129: intBlinkCycle = 1;
  3356  0340  3001               	movlw	1
  3357  0341  1283               	bcf	3,5	;RP0=0, select bank0
  3358  0342  1303               	bcf	3,6	;RP1=0, select bank0
  3359  0343  00DD               	movwf	_intBlinkCycle
  3360  0344  3000               	movlw	0
  3361  0345  00DE               	movwf	_intBlinkCycle+1
  3362                           
  3363                           ;functions.c: 130: intBlinkCounter = 0;
  3364  0346  01FC               	clrf	_intBlinkCounter
  3365  0347  01FD               	clrf	_intBlinkCounter+1
  3366                           
  3367                           ;functions.c: 131: DelayDs(100);
  3368  0348  3064               	movlw	100
  3369  0349  00A0               	movwf	DelayDs@cnt
  3370  034A  3000               	movlw	0
  3371  034B  00A1               	movwf	DelayDs@cnt+1
  3372  034C  160A  118A  2767  120A  118A  	fcall	_DelayDs
  3373  0351                     l2751:	
  3374                           
  3375                           ;functions.c: 132: }
  3376                           ;functions.c: 133: if(Data[2] == 2 && OperationMode() == 7)
  3377  0351  1283               	bcf	3,5	;RP0=0, select bank0
  3378  0352  1303               	bcf	3,6	;RP1=0, select bank0
  3379  0353  0850               	movf	ReceivedPacketHandler@Data,w
  3380  0354  3E02               	addlw	2
  3381  0355  0084               	movwf	4
  3382  0356  3002               	movlw	2
  3383  0357  1383               	bcf	3,7	;select IRP bank0
  3384  0358  0600               	xorwf	0,w
  3385  0359  1D03               	btfss	3,2
  3386  035A  0008               	return
  3387  035B  160A  118A  2646  120A  118A  	fcall	_OperationMode
  3388  0360  3A07               	xorlw	7
  3389  0361  1D03               	skipz
  3390  0362  0008               	return
  3391                           
  3392                           ;functions.c: 134: {
  3393                           ;functions.c: 135: intBlinkCycle = 1;
  3394  0363  3001               	movlw	1
  3395  0364  1283               	bcf	3,5	;RP0=0, select bank0
  3396  0365  1303               	bcf	3,6	;RP1=0, select bank0
  3397  0366  00DD               	movwf	_intBlinkCycle
  3398  0367  3000               	movlw	0
  3399  0368  00DE               	movwf	_intBlinkCycle+1
  3400                           
  3401                           ;functions.c: 136: intBlinkCounter = 0;
  3402  0369  01FC               	clrf	_intBlinkCounter
  3403  036A  01FD               	clrf	_intBlinkCounter+1
  3404                           
  3405                           ;functions.c: 137: DelayDs(100);
  3406  036B  3064               	movlw	100
  3407  036C  00A0               	movwf	DelayDs@cnt
  3408  036D  3000               	movlw	0
  3409  036E  00A1               	movwf	DelayDs@cnt+1
  3410  036F  160A  118A  2767   	fcall	_DelayDs
  3411                           
  3412                           ;functions.c: 138: }
  3413                           ;functions.c: 139: break;
  3414  0372  0008               	return
  3415  0373                     l2761:	
  3416                           ;functions.c: 141: case 3:
  3417                           
  3418                           
  3419                           ;functions.c: 142: if(Data[2] != 0)
  3420  0373  1283               	bcf	3,5	;RP0=0, select bank0
  3421  0374  1303               	bcf	3,6	;RP1=0, select bank0
  3422  0375  0850               	movf	ReceivedPacketHandler@Data,w
  3423  0376  3E02               	addlw	2
  3424  0377  0084               	movwf	4
  3425  0378  1383               	bcf	3,7	;select IRP bank0
  3426  0379  0800               	movf	0,w
  3427  037A  1D03               	btfss	3,2
  3428  037B  0008               	return
  3429                           
  3430                           ;functions.c: 144: TransmittPacket(3, AnalogValue(0));
  3431                           
  3432                           ;functions.c: 143: break;
  3433  037C  3000               	movlw	0
  3434  037D  160A  118A  27D5  120A  118A  	fcall	_AnalogValue
  3435  0382  1283               	bcf	3,5	;RP0=0, select bank0
  3436  0383  1303               	bcf	3,6	;RP1=0, select bank0
  3437  0384  00CF               	movwf	??_ReceivedPacketHandler
  3438  0385  084F               	movf	??_ReceivedPacketHandler,w
  3439  0386  00B5               	movwf	TransmittPacket@value
  3440  0387  3003               	movlw	3
  3441  0388  120A  158A  25A2   	fcall	_TransmittPacket
  3442                           
  3443                           ;functions.c: 145: break;
  3444  038B  0008               	return
  3445  038C                     l2767:	
  3446                           ;functions.c: 147: case 4:
  3447                           
  3448                           
  3449                           ;functions.c: 148: if(Data[2] != 0)
  3450  038C  1283               	bcf	3,5	;RP0=0, select bank0
  3451  038D  1303               	bcf	3,6	;RP1=0, select bank0
  3452  038E  0850               	movf	ReceivedPacketHandler@Data,w
  3453  038F  3E02               	addlw	2
  3454  0390  0084               	movwf	4
  3455  0391  1383               	bcf	3,7	;select IRP bank0
  3456  0392  0800               	movf	0,w
  3457  0393  1D03               	btfss	3,2
  3458  0394  0008               	return
  3459                           
  3460                           ;functions.c: 150: TransmittPacket(4, AnalogValue(3));
  3461                           
  3462                           ;functions.c: 149: break;
  3463  0395  3003               	movlw	3
  3464  0396  160A  118A  27D5  120A  118A  	fcall	_AnalogValue
  3465  039B  1283               	bcf	3,5	;RP0=0, select bank0
  3466  039C  1303               	bcf	3,6	;RP1=0, select bank0
  3467  039D  00CF               	movwf	??_ReceivedPacketHandler
  3468  039E  084F               	movf	??_ReceivedPacketHandler,w
  3469  039F  00B5               	movwf	TransmittPacket@value
  3470  03A0  3004               	movlw	4
  3471  03A1  120A  158A  25A2   	fcall	_TransmittPacket
  3472                           
  3473                           ;functions.c: 151: break;
  3474  03A4  0008               	return
  3475  03A5                     l2773:	
  3476                           ;functions.c: 153: case 5:
  3477                           
  3478                           
  3479                           ;functions.c: 154: if(Data[2] != 0)
  3480  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  3481  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  3482  03A7  0850               	movf	ReceivedPacketHandler@Data,w
  3483  03A8  3E02               	addlw	2
  3484  03A9  0084               	movwf	4
  3485  03AA  1383               	bcf	3,7	;select IRP bank0
  3486  03AB  0800               	movf	0,w
  3487  03AC  1903               	btfsc	3,2
  3488  03AD  2BBA               	goto	l2777
  3489                           
  3490                           ;functions.c: 155: {
  3491                           ;functions.c: 156: eeprom_write(0, Data[2]);
  3492  03AE  0850               	movf	ReceivedPacketHandler@Data,w
  3493  03AF  3E02               	addlw	2
  3494  03B0  0084               	movwf	4
  3495  03B1  0800               	movf	0,w
  3496  03B2  00CF               	movwf	??_ReceivedPacketHandler
  3497  03B3  084F               	movf	??_ReceivedPacketHandler,w
  3498  03B4  00A0               	movwf	eeprom_write@value
  3499  03B5  3000               	movlw	0
  3500  03B6  120A  158A  20CE   	fcall	_eeprom_write
  3501                           
  3502                           ;functions.c: 157: break;
  3503  03B9  0008               	return
  3504  03BA                     l2777:	
  3505                           
  3506                           ;functions.c: 158: }
  3507                           ;functions.c: 159: TransmittPacket(5, eeprom_read(0));
  3508  03BA  3000               	movlw	0
  3509  03BB  160A  118A  278A  120A  118A  	fcall	_eeprom_read
  3510  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  3511  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  3512  03C2  00CF               	movwf	??_ReceivedPacketHandler
  3513  03C3  084F               	movf	??_ReceivedPacketHandler,w
  3514  03C4  00B5               	movwf	TransmittPacket@value
  3515  03C5  3005               	movlw	5
  3516  03C6  120A  158A  25A2   	fcall	_TransmittPacket
  3517                           
  3518                           ;functions.c: 160: break;
  3519  03C9  0008               	return
  3520  03CA                     l2779:	
  3521                           ;functions.c: 162: case 6:
  3522                           
  3523                           
  3524                           ;functions.c: 163: if(Data[2] == 0)
  3525  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  3526  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  3527  03CC  0850               	movf	ReceivedPacketHandler@Data,w
  3528  03CD  3E02               	addlw	2
  3529  03CE  0084               	movwf	4
  3530  03CF  1383               	bcf	3,7	;select IRP bank0
  3531  03D0  0800               	movf	0,w
  3532  03D1  1D03               	btfss	3,2
  3533  03D2  2BE5               	goto	l2787
  3534                           
  3535                           ;functions.c: 164: {
  3536                           ;functions.c: 165: if(bValueFromPot == TRUE)
  3537  03D3  036D               	decf	_bValueFromPot,w
  3538  03D4  1D03               	btfss	3,2
  3539  03D5  2BDD               	goto	l2785
  3540                           
  3541                           ;functions.c: 166: TransmittPacket(6, 1);
  3542  03D6  01B5               	clrf	TransmittPacket@value
  3543  03D7  0AB5               	incf	TransmittPacket@value,f
  3544  03D8  3006               	movlw	6
  3545  03D9  120A  158A  25A2   	fcall	_TransmittPacket
  3546  03DC  0008               	return
  3547  03DD                     l2785:	
  3548                           
  3549                           ;functions.c: 167: else
  3550                           ;functions.c: 168: TransmittPacket(6, 0);
  3551  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  3552  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  3553  03DF  01B5               	clrf	TransmittPacket@value
  3554  03E0  3006               	movlw	6
  3555  03E1  120A  158A  25A2   	fcall	_TransmittPacket
  3556                           
  3557                           ;functions.c: 169: }
  3558  03E4  0008               	return
  3559  03E5                     l2787:	
  3560                           
  3561                           ;functions.c: 170: else if(Data[2] == 1)
  3562  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  3563  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  3564  03E7  0850               	movf	ReceivedPacketHandler@Data,w
  3565  03E8  3E02               	addlw	2
  3566  03E9  0084               	movwf	4
  3567  03EA  1383               	bcf	3,7	;select IRP bank0
  3568  03EB  0300               	decf	0,w
  3569  03EC  1D03               	btfss	3,2
  3570  03ED  2BF1               	goto	l2791
  3571                           
  3572                           ;functions.c: 171: bValueFromPot = TRUE;
  3573  03EE  01ED               	clrf	_bValueFromPot
  3574  03EF  0AED               	incf	_bValueFromPot,f
  3575  03F0  0008               	return
  3576  03F1                     l2791:	
  3577                           
  3578                           ;functions.c: 172: else if(Data[2] == 0)
  3579  03F1  0850               	movf	ReceivedPacketHandler@Data,w
  3580  03F2  3E02               	addlw	2
  3581  03F3  0084               	movwf	4
  3582  03F4  0800               	movf	0,w
  3583  03F5  1D03               	btfss	3,2
  3584  03F6  0008               	return
  3585                           
  3586                           ;functions.c: 173: bValueFromPot = FALSE;
  3587  03F7  01ED               	clrf	_bValueFromPot
  3588                           
  3589                           ;functions.c: 175: break;
  3590  03F8  0008               	return
  3591  03F9                     l2795:	
  3592                           ;functions.c: 177: case 7:
  3593                           
  3594                           
  3595                           ;functions.c: 178: if(Data[2] != 0)
  3596  03F9  0850               	movf	ReceivedPacketHandler@Data,w
  3597  03FA  3E02               	addlw	2
  3598  03FB  0084               	movwf	4
  3599  03FC  0800               	movf	0,w
  3600  03FD  1D03               	btfss	3,2
  3601  03FE  0008               	return
  3602                           
  3603                           ;functions.c: 180: DarknessCheck();
  3604                           
  3605                           ;functions.c: 179: break;
  3606  03FF  160A  118A  27AE  120A  118A  	fcall	_DarknessCheck
  3607                           
  3608                           ;functions.c: 181: if(bDark)
  3609  0404  1283               	bcf	3,5	;RP0=0, select bank0
  3610  0405  1303               	bcf	3,6	;RP1=0, select bank0
  3611  0406  0868               	movf	_bDark,w
  3612  0407  1903               	btfsc	3,2
  3613  0408  2C10               	goto	l2805
  3614                           
  3615                           ;functions.c: 182: TransmittPacket(7, 1);
  3616  0409  01B5               	clrf	TransmittPacket@value
  3617  040A  0AB5               	incf	TransmittPacket@value,f
  3618  040B  3007               	movlw	7
  3619  040C  120A  158A  25A2   	fcall	_TransmittPacket
  3620  040F  0008               	return
  3621  0410                     l2805:	
  3622                           
  3623                           ;functions.c: 183: else
  3624                           ;functions.c: 184: TransmittPacket(7, 2);
  3625  0410  3002               	movlw	2
  3626  0411  1283               	bcf	3,5	;RP0=0, select bank0
  3627  0412  1303               	bcf	3,6	;RP1=0, select bank0
  3628  0413  00CF               	movwf	??_ReceivedPacketHandler
  3629  0414  084F               	movf	??_ReceivedPacketHandler,w
  3630  0415  00B5               	movwf	TransmittPacket@value
  3631  0416  3007               	movlw	7
  3632  0417  120A  158A  25A2   	fcall	_TransmittPacket
  3633                           
  3634                           ;functions.c: 185: break;
  3635  041A  0008               	return
  3636  041B                     l2807:	
  3637                           ;functions.c: 187: case 9:
  3638                           
  3639                           
  3640                           ;functions.c: 188: write_ram_status(read_ram_status() & 0b11100011);
  3641  041B  160A  118A  26B2  120A  118A  	fcall	_read_ram_status
  3642  0420  39E3               	andlw	227
  3643  0421  120A  158A  20A2  120A  118A  	fcall	_write_ram_status
  3644                           
  3645                           ;functions.c: 189: ResetMemoryAdress();
  3646  0426  160A  118A  270F  120A  118A  	fcall	_ResetMemoryAdress
  3647                           
  3648                           ;functions.c: 190: ram_bulk_erase();
  3649  042B  160A  118A  2745  120A  118A  	fcall	_ram_bulk_erase
  3650                           
  3651                           ;functions.c: 191: TransmittPacket(9, 1);
  3652  0430  1283               	bcf	3,5	;RP0=0, select bank0
  3653  0431  1303               	bcf	3,6	;RP1=0, select bank0
  3654  0432  01B5               	clrf	TransmittPacket@value
  3655  0433  0AB5               	incf	TransmittPacket@value,f
  3656  0434  3009               	movlw	9
  3657  0435  120A  158A  25A2   	fcall	_TransmittPacket
  3658                           
  3659                           ;functions.c: 192: break;
  3660  0438  0008               	return
  3661  0439                     l2811:	
  3662                           ;functions.c: 194: case 8:
  3663                           
  3664                           
  3665                           ;functions.c: 195: if(!bSaveDataToFlash)
  3666  0439  1283               	bcf	3,5	;RP0=0, select bank0
  3667  043A  1303               	bcf	3,6	;RP1=0, select bank0
  3668  043B  0869               	movf	_bSaveDataToFlash,w
  3669  043C  1D03               	btfss	3,2
  3670  043D  2C42               	goto	l2815
  3671                           
  3672                           ;functions.c: 196: SendMemoryData();
  3673  043E  120A  118A  25A6   	fcall	_SendMemoryData
  3674  0441  0008               	return
  3675  0442                     l2815:	
  3676                           
  3677                           ;functions.c: 197: else
  3678                           ;functions.c: 198: TransmittPacket(8, 0);
  3679  0442  1283               	bcf	3,5	;RP0=0, select bank0
  3680  0443  1303               	bcf	3,6	;RP1=0, select bank0
  3681  0444  01B5               	clrf	TransmittPacket@value
  3682  0445  3008               	movlw	8
  3683  0446  120A  158A  25A2   	fcall	_TransmittPacket
  3684                           
  3685                           ;functions.c: 203: }
  3686                           
  3687                           ;functions.c: 202: break;
  3688                           
  3689                           ;functions.c: 201: default:
  3690                           
  3691                           ;functions.c: 199: break;
  3692  0449  0008               	return
  3693  044A                     l2819:	
  3694  044A  1283               	bcf	3,5	;RP0=0, select bank0
  3695  044B  1303               	bcf	3,6	;RP1=0, select bank0
  3696  044C  0A50               	incf	ReceivedPacketHandler@Data,w
  3697  044D  0084               	movwf	4
  3698  044E  1383               	bcf	3,7	;select IRP bank0
  3699  044F  0800               	movf	0,w
  3700                           
  3701                           ; Switch size 1, requested type "space"
  3702                           ; Number of cases is 9, Range of values is 1 to 9
  3703                           ; switch strategies available:
  3704                           ; Name         Instructions Cycles
  3705                           ; simple_byte           28    15 (average)
  3706                           ; direct_byte           38    11 (fixed)
  3707                           ; jumptable            263     9 (fixed)
  3708                           ;	Chosen strategy is simple_byte
  3709  0450  3A01               	xorlw	1	; case 1
  3710  0451  1903               	skipnz
  3711  0452  2B20               	goto	l2739
  3712  0453  3A03               	xorlw	3	; case 2
  3713  0454  1903               	skipnz
  3714  0455  2B32               	goto	l2741
  3715  0456  3A01               	xorlw	1	; case 3
  3716  0457  1903               	skipnz
  3717  0458  2B73               	goto	l2761
  3718  0459  3A07               	xorlw	7	; case 4
  3719  045A  1903               	skipnz
  3720  045B  2B8C               	goto	l2767
  3721  045C  3A01               	xorlw	1	; case 5
  3722  045D  1903               	skipnz
  3723  045E  2BA5               	goto	l2773
  3724  045F  3A03               	xorlw	3	; case 6
  3725  0460  1903               	skipnz
  3726  0461  2BCA               	goto	l2779
  3727  0462  3A01               	xorlw	1	; case 7
  3728  0463  1903               	skipnz
  3729  0464  2BF9               	goto	l2795
  3730  0465  3A0F               	xorlw	15	; case 8
  3731  0466  1903               	skipnz
  3732  0467  2C39               	goto	l2811
  3733  0468  3A01               	xorlw	1	; case 9
  3734  0469  1903               	skipnz
  3735  046A  2C1B               	goto	l2807
  3736  046B  2C6C               	goto	l304
  3737  046C                     l304:	
  3738  046C  0008               	return
  3739  046D                     __end_of_ReceivedPacketHandler:	
  3740                           
  3741                           	psect	text8
  3742  08A2                     __ptext8:	
  3743 ;; *************** function _write_ram_status *****************
  3744 ;; Defined at:
  3745 ;;		line 169 in file "m25p16.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;  status          1    wreg     unsigned char 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  status          1    5[BANK0 ] unsigned char 
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  1    wreg      void 
  3752 ;; Registers used:
  3753 ;;		wreg, status,2, status,0, pclath, cstack
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3759 ;;      Params:         0       0       0       0       0
  3760 ;;      Locals:         0       1       0       0       0
  3761 ;;      Temps:          0       0       0       0       0
  3762 ;;      Totals:         0       1       0       0       0
  3763 ;;Total ram usage:        1 bytes
  3764 ;; Hardware stack levels used:    1
  3765 ;; Hardware stack levels required when called:    5
  3766 ;; This function calls:
  3767 ;;		_WriteSPI
  3768 ;;		_read_ram_status
  3769 ;; This function is called by:
  3770 ;;		_ReceivedPacketHandler
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           
  3775                           ;psect for function _write_ram_status
  3776  08A2                     _write_ram_status:	
  3777                           
  3778                           ;incstack = 0
  3779                           ; Regs used in _write_ram_status: [wreg+status,2+status,0+pclath+cstack]
  3780                           ;write_ram_status@status stored from wreg
  3781  08A2  1283               	bcf	3,5	;RP0=0, select bank0
  3782  08A3  1303               	bcf	3,6	;RP1=0, select bank0
  3783  08A4  00A5               	movwf	write_ram_status@status
  3784                           
  3785                           ;m25p16.c: 172: RD3 = 0;
  3786  08A5  1188               	bcf	8,3	;volatile
  3787                           
  3788                           ;m25p16.c: 173: WriteSPI(0x06);
  3789  08A6  3006               	movlw	6
  3790  08A7  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  3791                           
  3792                           ;m25p16.c: 174: RD3 = 1;
  3793  08AC  1283               	bcf	3,5	;RP0=0, select bank0
  3794  08AD  1303               	bcf	3,6	;RP1=0, select bank0
  3795  08AE  1588               	bsf	8,3	;volatile
  3796                           
  3797                           ;m25p16.c: 175: _delay((unsigned long)((2)*(4000000/4000000.0)));
  3798  08AF  28B0               	nop2	;2 cycle nop
  3799                           
  3800                           ;m25p16.c: 176: RD3 = 0;
  3801  08B0  1283               	bcf	3,5	;RP0=0, select bank0
  3802  08B1  1303               	bcf	3,6	;RP1=0, select bank0
  3803  08B2  1188               	bcf	8,3	;volatile
  3804                           
  3805                           ;m25p16.c: 177: WriteSPI(0x01);
  3806  08B3  3001               	movlw	1
  3807  08B4  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  3808                           
  3809                           ;m25p16.c: 178: WriteSPI(status);
  3810  08B9  1283               	bcf	3,5	;RP0=0, select bank0
  3811  08BA  1303               	bcf	3,6	;RP1=0, select bank0
  3812  08BB  0825               	movf	write_ram_status@status,w
  3813  08BC  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  3814                           
  3815                           ;m25p16.c: 179: RD3 = 1;
  3816  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  3817  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  3818  08C3  1588               	bsf	8,3	;volatile
  3819                           
  3820                           ;m25p16.c: 180: _delay((unsigned long)((2)*(4000000/4000000.0)));
  3821  08C4  28C5               	nop2	;2 cycle nop
  3822  08C5                     l2631:	
  3823                           ;m25p16.c: 181: while (read_ram_status() & 0x01);
  3824                           
  3825  08C5  160A  118A  26B2  120A  158A  	fcall	_read_ram_status
  3826  08CA  3901               	andlw	1
  3827  08CB  1903               	btfsc	3,2
  3828  08CC  0008               	return
  3829  08CD  28C5               	goto	l2631
  3830  08CE                     __end_of_write_ram_status:	
  3831                           
  3832                           	psect	text9
  3833  07AE                     __ptext9:	
  3834 ;; *************** function _strstr *****************
  3835 ;; Defined at:
  3836 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strstr.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  s1              1    wreg     PTR const unsigned char 
  3839 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  3840 ;;  s2              1   14[BANK0 ] PTR const unsigned char 
  3841 ;;		 -> STR_2(8), STR_1(8), 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  s1              1   18[BANK0 ] PTR const unsigned char 
  3844 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      PTR unsigned char 
  3847 ;; Registers used:
  3848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3854 ;;      Params:         0       1       0       0       0
  3855 ;;      Locals:         0       1       0       0       0
  3856 ;;      Temps:          0       3       0       0       0
  3857 ;;      Totals:         0       5       0       0       0
  3858 ;;Total ram usage:        5 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    3
  3861 ;; This function calls:
  3862 ;;		_strchr
  3863 ;;		_strlen
  3864 ;;		_strncmp
  3865 ;; This function is called by:
  3866 ;;		_ReceivedPacketHandler
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           
  3871                           ;psect for function _strstr
  3872  07AE                     _strstr:	
  3873                           
  3874                           ;incstack = 0
  3875                           ; Regs used in _strstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3876                           ;strstr@s1 stored from wreg
  3877  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  3878  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  3879  07B0  00B2               	movwf	strstr@s1
  3880  07B1  2FE9               	goto	l2599
  3881  07B2                     l2591:	
  3882  07B2  082E               	movf	strstr@s2,w
  3883  07B3  00AF               	movwf	??_strstr
  3884  07B4  082F               	movf	??_strstr,w
  3885  07B5  00A8               	movwf	strncmp@s2
  3886  07B6  082E               	movf	strstr@s2,w
  3887  07B7  120A  158A  2076  120A  118A  	fcall	_strlen
  3888  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  3889  07BD  1303               	bcf	3,6	;RP1=0, select bank0
  3890  07BE  0821               	movf	?_strlen+1,w
  3891  07BF  00AA               	movwf	strncmp@len+1
  3892  07C0  0820               	movf	?_strlen,w
  3893  07C1  00A9               	movwf	strncmp@len
  3894  07C2  0832               	movf	strstr@s1,w
  3895  07C3  120A  158A  21B2  120A  118A  	fcall	_strncmp
  3896  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  3897  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  3898  07CA  0828               	movf	?_strncmp,w
  3899  07CB  0429               	iorwf	?_strncmp+1,w
  3900  07CC  1D03               	btfss	3,2
  3901  07CD  2FD0               	goto	l2597
  3902  07CE  0832               	movf	strstr@s1,w
  3903  07CF  0008               	return
  3904  07D0                     l2597:	
  3905  07D0  082E               	movf	strstr@s2,w
  3906  07D1  0084               	movwf	4
  3907  07D2  120A  158A  2000  120A  118A  	fcall	stringdir
  3908  07D7  00AF               	movwf	??_strstr
  3909  07D8  01B0               	clrf	??_strstr+1
  3910  07D9  082F               	movf	??_strstr,w
  3911  07DA  00A0               	movwf	strchr@chr
  3912  07DB  0830               	movf	??_strstr+1,w
  3913  07DC  00A1               	movwf	strchr@chr+1
  3914  07DD  0832               	movf	strstr@s1,w
  3915  07DE  3E01               	addlw	1
  3916  07DF  160A  118A  26C6  120A  118A  	fcall	_strchr
  3917  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  3918  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  3919  07E6  00B1               	movwf	??_strstr+2
  3920  07E7  0831               	movf	??_strstr+2,w
  3921  07E8  00B2               	movwf	strstr@s1
  3922  07E9                     l2599:	
  3923  07E9  0832               	movf	strstr@s1,w
  3924  07EA  1903               	btfsc	3,2
  3925  07EB  2FF2               	goto	l2603
  3926  07EC  0832               	movf	strstr@s1,w
  3927  07ED  0084               	movwf	4
  3928  07EE  1383               	bcf	3,7	;select IRP bank0
  3929  07EF  0800               	movf	0,w
  3930  07F0  1D03               	btfss	3,2
  3931  07F1  2FB2               	goto	l2591
  3932  07F2                     l2603:	
  3933  07F2  3000               	movlw	0
  3934  07F3  0008               	return
  3935  07F4                     __end_of_strstr:	
  3936                           
  3937                           	psect	text10
  3938  09B2                     __ptext10:	
  3939 ;; *************** function _strncmp *****************
  3940 ;; Defined at:
  3941 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strncmp.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  s1              1    wreg     PTR const unsigned char 
  3944 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  3945 ;;  s2              1    8[BANK0 ] PTR const unsigned char 
  3946 ;;		 -> STR_2(8), STR_1(8), 
  3947 ;;  len             2    9[BANK0 ] unsigned int 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;  s1              1   13[BANK0 ] PTR const unsigned char 
  3950 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  3951 ;; Return value:  Size  Location     Type
  3952 ;;                  2    8[BANK0 ] int 
  3953 ;; Registers used:
  3954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3955 ;; Tracked objects:
  3956 ;;		On entry : 0/0
  3957 ;;		On exit  : 0/0
  3958 ;;		Unchanged: 0/0
  3959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3960 ;;      Params:         0       3       0       0       0
  3961 ;;      Locals:         0       1       0       0       0
  3962 ;;      Temps:          0       2       0       0       0
  3963 ;;      Totals:         0       6       0       0       0
  3964 ;;Total ram usage:        6 bytes
  3965 ;; Hardware stack levels used:    1
  3966 ;; Hardware stack levels required when called:    2
  3967 ;; This function calls:
  3968 ;;		Nothing
  3969 ;; This function is called by:
  3970 ;;		_strstr
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           
  3975                           ;psect for function _strncmp
  3976  09B2                     _strncmp:	
  3977                           
  3978                           ;incstack = 0
  3979                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
  3980                           ;strncmp@s1 stored from wreg
  3981  09B2  1283               	bcf	3,5	;RP0=0, select bank0
  3982  09B3  1303               	bcf	3,6	;RP1=0, select bank0
  3983  09B4  00AD               	movwf	strncmp@s1
  3984  09B5                     l1171:	
  3985  09B5  3001               	movlw	1
  3986  09B6  02A9               	subwf	strncmp@len,f
  3987  09B7  3000               	movlw	0
  3988  09B8  1C03               	skipc
  3989  09B9  03AA               	decf	strncmp@len+1,f
  3990  09BA  02AA               	subwf	strncmp@len+1,f
  3991  09BB  0A29               	incf	strncmp@len,w
  3992  09BC  1903               	btfsc	3,2
  3993  09BD  0A2A               	incf	strncmp@len+1,w
  3994  09BE  1903               	btfsc	3,2
  3995  09BF  29F3               	goto	l2567
  3996  09C0  082D               	movf	strncmp@s1,w
  3997  09C1  0084               	movwf	4
  3998  09C2  1383               	bcf	3,7	;select IRP bank0
  3999  09C3  0800               	movf	0,w
  4000  09C4  1903               	btfsc	3,2
  4001  09C5  29D4               	goto	l2561
  4002  09C6  0828               	movf	strncmp@s2,w
  4003  09C7  0084               	movwf	4
  4004  09C8  120A  158A  2000  120A  158A  	fcall	stringdir
  4005  09CD  00AB               	movwf	??_strncmp
  4006  09CE  082D               	movf	strncmp@s1,w
  4007  09CF  0084               	movwf	4
  4008  09D0  0800               	movf	0,w
  4009  09D1  062B               	xorwf	??_strncmp,w
  4010  09D2  1903               	skipnz
  4011  09D3  29EA               	goto	l2565
  4012  09D4                     l2561:	
  4013  09D4  0828               	movf	strncmp@s2,w
  4014  09D5  0084               	movwf	4
  4015  09D6  120A  158A  2000   	fcall	stringdir
  4016  09D9  00AB               	movwf	??_strncmp
  4017  09DA  01AC               	clrf	??_strncmp+1
  4018  09DB  09AB               	comf	??_strncmp,f
  4019  09DC  09AC               	comf	??_strncmp+1,f
  4020  09DD  0AAB               	incf	??_strncmp,f
  4021  09DE  1903               	skipnz
  4022  09DF  0AAC               	incf	??_strncmp+1,f
  4023  09E0  082D               	movf	strncmp@s1,w
  4024  09E1  0084               	movwf	4
  4025  09E2  0800               	movf	0,w
  4026  09E3  072B               	addwf	??_strncmp,w
  4027  09E4  00A8               	movwf	?_strncmp
  4028  09E5  082C               	movf	??_strncmp+1,w
  4029  09E6  1803               	skipnc
  4030  09E7  0A2C               	incf	??_strncmp+1,w
  4031  09E8  00A9               	movwf	?_strncmp+1
  4032  09E9  0008               	return
  4033  09EA                     l2565:	
  4034  09EA  3001               	movlw	1
  4035  09EB  00AB               	movwf	??_strncmp
  4036  09EC  082B               	movf	??_strncmp,w
  4037  09ED  07AD               	addwf	strncmp@s1,f
  4038  09EE  3001               	movlw	1
  4039  09EF  00AB               	movwf	??_strncmp
  4040  09F0  082B               	movf	??_strncmp,w
  4041  09F1  07A8               	addwf	strncmp@s2,f
  4042  09F2  29B5               	goto	l1171
  4043  09F3                     l2567:	
  4044  09F3  01A8               	clrf	?_strncmp
  4045  09F4  01A9               	clrf	?_strncmp+1
  4046  09F5  0008               	return
  4047  09F6                     __end_of_strncmp:	
  4048                           
  4049                           	psect	text11
  4050  0876                     __ptext11:	
  4051 ;; *************** function _strlen *****************
  4052 ;; Defined at:
  4053 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strlen.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;  s               1    wreg     PTR const unsigned char 
  4056 ;;		 -> STR_2(8), STR_1(8), 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;  s               1    6[BANK0 ] PTR const unsigned char 
  4059 ;;		 -> STR_2(8), STR_1(8), 
  4060 ;;  cp              1    7[BANK0 ] PTR const unsigned char 
  4061 ;;		 -> STR_2(8), STR_1(8), 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  2    0[BANK0 ] unsigned int 
  4064 ;; Registers used:
  4065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4071 ;;      Params:         0       2       0       0       0
  4072 ;;      Locals:         0       2       0       0       0
  4073 ;;      Temps:          0       4       0       0       0
  4074 ;;      Totals:         0       8       0       0       0
  4075 ;;Total ram usage:        8 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    2
  4078 ;; This function calls:
  4079 ;;		Nothing
  4080 ;; This function is called by:
  4081 ;;		_strstr
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           
  4086                           ;psect for function _strlen
  4087  0876                     _strlen:	
  4088                           
  4089                           ;incstack = 0
  4090                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
  4091                           ;strlen@s stored from wreg
  4092  0876  1283               	bcf	3,5	;RP0=0, select bank0
  4093  0877  1303               	bcf	3,6	;RP1=0, select bank0
  4094  0878  00A6               	movwf	strlen@s
  4095  0879  0826               	movf	strlen@s,w
  4096  087A  00A2               	movwf	??_strlen
  4097  087B  0822               	movf	??_strlen,w
  4098  087C  00A7               	movwf	strlen@cp
  4099  087D                     l2549:	
  4100  087D  0827               	movf	strlen@cp,w
  4101  087E  0084               	movwf	4
  4102  087F  120A  158A  2000  120A  158A  	fcall	stringdir
  4103  0884  3A00               	xorlw	0
  4104  0885  1903               	btfsc	3,2
  4105  0886  288C               	goto	l2551
  4106  0887  3001               	movlw	1
  4107  0888  00A2               	movwf	??_strlen
  4108  0889  0822               	movf	??_strlen,w
  4109  088A  07A7               	addwf	strlen@cp,f
  4110  088B  287D               	goto	l2549
  4111  088C                     l2551:	
  4112  088C  0826               	movf	strlen@s,w
  4113  088D  00A2               	movwf	??_strlen
  4114  088E  3080               	movlw	128
  4115  088F  00A3               	movwf	??_strlen+1
  4116  0890  09A2               	comf	??_strlen,f
  4117  0891  09A3               	comf	??_strlen+1,f
  4118  0892  0AA2               	incf	??_strlen,f
  4119  0893  1903               	skipnz
  4120  0894  0AA3               	incf	??_strlen+1,f
  4121  0895  0827               	movf	strlen@cp,w
  4122  0896  00A4               	movwf	??_strlen+2
  4123  0897  3080               	movlw	128
  4124  0898  00A5               	movwf	??_strlen+3
  4125  0899  0822               	movf	??_strlen,w
  4126  089A  0724               	addwf	??_strlen+2,w
  4127  089B  00A0               	movwf	?_strlen
  4128  089C  0823               	movf	??_strlen+1,w
  4129  089D  1803               	skipnc
  4130  089E  0A23               	incf	??_strlen+1,w
  4131  089F  0725               	addwf	??_strlen+3,w
  4132  08A0  00A1               	movwf	?_strlen+1
  4133  08A1  0008               	return
  4134  08A2                     __end_of_strlen:	
  4135                           
  4136                           	psect	text12
  4137  16C6                     __ptext12:	
  4138 ;; *************** function _strchr *****************
  4139 ;; Defined at:
  4140 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strchr.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;  ptr             1    wreg     PTR const unsigned char 
  4143 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4144 ;;  chr             2    0[BANK0 ] int 
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;  ptr             1    2[BANK0 ] PTR const unsigned char 
  4147 ;;		 -> NULL(0), TransiverReadFIFO@ReceivedString(30), 
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  1    wreg      PTR unsigned char 
  4150 ;; Registers used:
  4151 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4157 ;;      Params:         0       2       0       0       0
  4158 ;;      Locals:         0       1       0       0       0
  4159 ;;      Temps:          0       0       0       0       0
  4160 ;;      Totals:         0       3       0       0       0
  4161 ;;Total ram usage:        3 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    2
  4164 ;; This function calls:
  4165 ;;		Nothing
  4166 ;; This function is called by:
  4167 ;;		_strstr
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           
  4172                           ;psect for function _strchr
  4173  16C6                     _strchr:	
  4174                           
  4175                           ;incstack = 0
  4176                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0]
  4177                           ;strchr@ptr stored from wreg
  4178  16C6  1283               	bcf	3,5	;RP0=0, select bank0
  4179  16C7  1303               	bcf	3,6	;RP1=0, select bank0
  4180  16C8  00A2               	movwf	strchr@ptr
  4181  16C9                     l1159:	
  4182  16C9  0822               	movf	strchr@ptr,w
  4183  16CA  0084               	movwf	4
  4184  16CB  1383               	bcf	3,7	;select IRP bank0
  4185  16CC  0800               	movf	0,w
  4186  16CD  0620               	xorwf	strchr@chr,w
  4187  16CE  1D03               	skipz
  4188  16CF  2ED2               	goto	l2577
  4189  16D0  0822               	movf	strchr@ptr,w
  4190  16D1  0008               	return
  4191  16D2                     l2577:	
  4192  16D2  0822               	movf	strchr@ptr,w
  4193  16D3  0084               	movwf	4
  4194  16D4  3001               	movlw	1
  4195  16D5  07A2               	addwf	strchr@ptr,f
  4196  16D6  0800               	movf	0,w
  4197  16D7  1D03               	btfss	3,2
  4198  16D8  2EC9               	goto	l1159
  4199  16D9  3000               	movlw	0
  4200  16DA  0008               	return
  4201  16DB                     __end_of_strchr:	
  4202                           
  4203                           	psect	text13
  4204  1745                     __ptext13:	
  4205 ;; *************** function _ram_bulk_erase *****************
  4206 ;; Defined at:
  4207 ;;		line 69 in file "m25p16.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;		None
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;		None
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, status,0, pclath, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4221 ;;      Params:         0       0       0       0       0
  4222 ;;      Locals:         0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0
  4224 ;;      Totals:         0       0       0       0       0
  4225 ;;Total ram usage:        0 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    5
  4228 ;; This function calls:
  4229 ;;		_WriteSPI
  4230 ;;		_read_ram_status
  4231 ;; This function is called by:
  4232 ;;		_ReceivedPacketHandler
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           
  4237                           ;psect for function _ram_bulk_erase
  4238  1745                     _ram_bulk_erase:	
  4239                           
  4240                           ;m25p16.c: 71: RD3 = 0;
  4241                           
  4242                           ;incstack = 0
  4243                           ; Regs used in _ram_bulk_erase: [wreg+status,2+status,0+pclath+cstack]
  4244  1745  1283               	bcf	3,5	;RP0=0, select bank0
  4245  1746  1303               	bcf	3,6	;RP1=0, select bank0
  4246  1747  1188               	bcf	8,3	;volatile
  4247                           
  4248                           ;m25p16.c: 72: WriteSPI(0x06);
  4249  1748  3006               	movlw	6
  4250  1749  160A  118A  264F  160A  118A  	fcall	_WriteSPI
  4251                           
  4252                           ;m25p16.c: 73: RD3 = 1;
  4253  174E  1283               	bcf	3,5	;RP0=0, select bank0
  4254  174F  1303               	bcf	3,6	;RP1=0, select bank0
  4255  1750  1588               	bsf	8,3	;volatile
  4256                           
  4257                           ;m25p16.c: 74: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4258  1751  0000               	nop
  4259                           
  4260                           ;m25p16.c: 75: RD3 = 0;
  4261  1752  1283               	bcf	3,5	;RP0=0, select bank0
  4262  1753  1303               	bcf	3,6	;RP1=0, select bank0
  4263  1754  1188               	bcf	8,3	;volatile
  4264                           
  4265                           ;m25p16.c: 76: WriteSPI(0xC7);
  4266  1755  30C7               	movlw	199
  4267  1756  160A  118A  264F  160A  118A  	fcall	_WriteSPI
  4268                           
  4269                           ;m25p16.c: 77: RD3 = 1;
  4270  175B  1283               	bcf	3,5	;RP0=0, select bank0
  4271  175C  1303               	bcf	3,6	;RP1=0, select bank0
  4272  175D  1588               	bsf	8,3	;volatile
  4273  175E                     l2647:	
  4274                           ;m25p16.c: 78: while(read_ram_status());
  4275                           
  4276  175E  160A  118A  26B2  160A  118A  	fcall	_read_ram_status
  4277  1763  3A00               	xorlw	0
  4278  1764  1903               	btfsc	3,2
  4279  1765  0008               	return
  4280  1766  2F5E               	goto	l2647
  4281  1767                     __end_of_ram_bulk_erase:	
  4282                           
  4283                           	psect	text14
  4284  05A6                     __ptext14:	
  4285 ;; *************** function _SendMemoryData *****************
  4286 ;; Defined at:
  4287 ;;		line 1212 in file "functions.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;		None
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  finalAddress    4   43[BANK0 ] unsigned long 
  4292 ;;  address         4   39[BANK0 ] unsigned long 
  4293 ;;  addr1           1   38[BANK0 ] unsigned char 
  4294 ;;  addr2           1   37[BANK0 ] unsigned char 
  4295 ;;  addr3           1   36[BANK0 ] unsigned char 
  4296 ;;  value           1   35[BANK0 ] unsigned char 
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  1    wreg      void 
  4299 ;; Registers used:
  4300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4306 ;;      Params:         0       0       0       0       0
  4307 ;;      Locals:         0      12       0       0       0
  4308 ;;      Temps:          0       8       0       0       0
  4309 ;;      Totals:         0      20       0       0       0
  4310 ;;Total ram usage:       20 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    8
  4313 ;; This function calls:
  4314 ;;		_ReadMemoryAdress
  4315 ;;		_TransmittPacket
  4316 ;;		_read_write_flash_ram
  4317 ;; This function is called by:
  4318 ;;		_ReceivedPacketHandler
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           
  4323                           ;psect for function _SendMemoryData
  4324  05A6                     _SendMemoryData:	
  4325                           
  4326                           ;functions.c: 1214: unsigned long address, finalAddress = 0;
  4327                           
  4328                           ;incstack = 0
  4329 ;; hardware stack exceeded
  4330                           ; Regs used in _SendMemoryData: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4331  05A6  3000               	movlw	0
  4332  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  4333  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  4334  05A9  00CE               	movwf	SendMemoryData@finalAddress+3
  4335  05AA  3000               	movlw	0
  4336  05AB  00CD               	movwf	SendMemoryData@finalAddress+2
  4337  05AC  3000               	movlw	0
  4338  05AD  00CC               	movwf	SendMemoryData@finalAddress+1
  4339  05AE  3000               	movlw	0
  4340  05AF  00CB               	movwf	SendMemoryData@finalAddress
  4341                           
  4342                           ;functions.c: 1215: unsigned char addr3, addr2, addr1, value;
  4343                           ;functions.c: 1217: ReadMemoryAdress(&addr3, &addr2, &addr1);
  4344  05B0  3045               	movlw	(low (SendMemoryData@addr2| 0))& (0+255)
  4345  05B1  00BB               	movwf	??_SendMemoryData
  4346  05B2  083B               	movf	??_SendMemoryData,w
  4347  05B3  00A2               	movwf	ReadMemoryAdress@var2
  4348  05B4  3046               	movlw	(low (SendMemoryData@addr1| 0))& (0+255)
  4349  05B5  00BC               	movwf	??_SendMemoryData+1
  4350  05B6  083C               	movf	??_SendMemoryData+1,w
  4351  05B7  00A3               	movwf	ReadMemoryAdress@var1
  4352  05B8  3044               	movlw	(low (SendMemoryData@addr3| 0))& (0+255)
  4353  05B9  120A  158A  204A  120A  118A  	fcall	_ReadMemoryAdress
  4354                           
  4355                           ;functions.c: 1219: finalAddress = (finalAddress << 8) | addr3;
  4356  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  4357  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  4358  05C0  0844               	movf	SendMemoryData@addr3,w
  4359  05C1  00BB               	movwf	??_SendMemoryData
  4360  05C2  01BC               	clrf	??_SendMemoryData+1
  4361  05C3  01BD               	clrf	??_SendMemoryData+2
  4362  05C4  01BE               	clrf	??_SendMemoryData+3
  4363  05C5  084B               	movf	SendMemoryData@finalAddress,w
  4364  05C6  00BF               	movwf	??_SendMemoryData+4
  4365  05C7  084C               	movf	SendMemoryData@finalAddress+1,w
  4366  05C8  00C0               	movwf	??_SendMemoryData+5
  4367  05C9  084D               	movf	SendMemoryData@finalAddress+2,w
  4368  05CA  00C1               	movwf	??_SendMemoryData+6
  4369  05CB  084E               	movf	SendMemoryData@finalAddress+3,w
  4370  05CC  00C2               	movwf	??_SendMemoryData+7
  4371  05CD  3008               	movlw	8
  4372  05CE                     u1575:	
  4373  05CE  1003               	clrc
  4374  05CF  0DBF               	rlf	??_SendMemoryData+4,f
  4375  05D0  0DC0               	rlf	??_SendMemoryData+5,f
  4376  05D1  0DC1               	rlf	??_SendMemoryData+6,f
  4377  05D2  0DC2               	rlf	??_SendMemoryData+7,f
  4378  05D3  3EFF               	addlw	-1
  4379  05D4  1D03               	skipz
  4380  05D5  2DCE               	goto	u1575
  4381  05D6  083F               	movf	??_SendMemoryData+4,w
  4382  05D7  04BB               	iorwf	??_SendMemoryData,f
  4383  05D8  0840               	movf	??_SendMemoryData+5,w
  4384  05D9  04BC               	iorwf	??_SendMemoryData+1,f
  4385  05DA  0841               	movf	??_SendMemoryData+6,w
  4386  05DB  04BD               	iorwf	??_SendMemoryData+2,f
  4387  05DC  0842               	movf	??_SendMemoryData+7,w
  4388  05DD  04BE               	iorwf	??_SendMemoryData+3,f
  4389  05DE  083E               	movf	??_SendMemoryData+3,w
  4390  05DF  00CE               	movwf	SendMemoryData@finalAddress+3
  4391  05E0  083D               	movf	??_SendMemoryData+2,w
  4392  05E1  00CD               	movwf	SendMemoryData@finalAddress+2
  4393  05E2  083C               	movf	??_SendMemoryData+1,w
  4394  05E3  00CC               	movwf	SendMemoryData@finalAddress+1
  4395  05E4  083B               	movf	??_SendMemoryData,w
  4396  05E5  00CB               	movwf	SendMemoryData@finalAddress
  4397                           
  4398                           ;functions.c: 1220: finalAddress = (finalAddress << 8) | addr2;
  4399  05E6  0845               	movf	SendMemoryData@addr2,w
  4400  05E7  00BB               	movwf	??_SendMemoryData
  4401  05E8  01BC               	clrf	??_SendMemoryData+1
  4402  05E9  01BD               	clrf	??_SendMemoryData+2
  4403  05EA  01BE               	clrf	??_SendMemoryData+3
  4404  05EB  084B               	movf	SendMemoryData@finalAddress,w
  4405  05EC  00BF               	movwf	??_SendMemoryData+4
  4406  05ED  084C               	movf	SendMemoryData@finalAddress+1,w
  4407  05EE  00C0               	movwf	??_SendMemoryData+5
  4408  05EF  084D               	movf	SendMemoryData@finalAddress+2,w
  4409  05F0  00C1               	movwf	??_SendMemoryData+6
  4410  05F1  084E               	movf	SendMemoryData@finalAddress+3,w
  4411  05F2  00C2               	movwf	??_SendMemoryData+7
  4412  05F3  3008               	movlw	8
  4413  05F4                     u1585:	
  4414  05F4  1003               	clrc
  4415  05F5  0DBF               	rlf	??_SendMemoryData+4,f
  4416  05F6  0DC0               	rlf	??_SendMemoryData+5,f
  4417  05F7  0DC1               	rlf	??_SendMemoryData+6,f
  4418  05F8  0DC2               	rlf	??_SendMemoryData+7,f
  4419  05F9  3EFF               	addlw	-1
  4420  05FA  1D03               	skipz
  4421  05FB  2DF4               	goto	u1585
  4422  05FC  083F               	movf	??_SendMemoryData+4,w
  4423  05FD  04BB               	iorwf	??_SendMemoryData,f
  4424  05FE  0840               	movf	??_SendMemoryData+5,w
  4425  05FF  04BC               	iorwf	??_SendMemoryData+1,f
  4426  0600  0841               	movf	??_SendMemoryData+6,w
  4427  0601  04BD               	iorwf	??_SendMemoryData+2,f
  4428  0602  0842               	movf	??_SendMemoryData+7,w
  4429  0603  04BE               	iorwf	??_SendMemoryData+3,f
  4430  0604  083E               	movf	??_SendMemoryData+3,w
  4431  0605  00CE               	movwf	SendMemoryData@finalAddress+3
  4432  0606  083D               	movf	??_SendMemoryData+2,w
  4433  0607  00CD               	movwf	SendMemoryData@finalAddress+2
  4434  0608  083C               	movf	??_SendMemoryData+1,w
  4435  0609  00CC               	movwf	SendMemoryData@finalAddress+1
  4436  060A  083B               	movf	??_SendMemoryData,w
  4437  060B  00CB               	movwf	SendMemoryData@finalAddress
  4438                           
  4439                           ;functions.c: 1221: finalAddress = (finalAddress << 8) | addr1;
  4440  060C  0846               	movf	SendMemoryData@addr1,w
  4441  060D  00BB               	movwf	??_SendMemoryData
  4442  060E  01BC               	clrf	??_SendMemoryData+1
  4443  060F  01BD               	clrf	??_SendMemoryData+2
  4444  0610  01BE               	clrf	??_SendMemoryData+3
  4445  0611  084B               	movf	SendMemoryData@finalAddress,w
  4446  0612  00BF               	movwf	??_SendMemoryData+4
  4447  0613  084C               	movf	SendMemoryData@finalAddress+1,w
  4448  0614  00C0               	movwf	??_SendMemoryData+5
  4449  0615  084D               	movf	SendMemoryData@finalAddress+2,w
  4450  0616  00C1               	movwf	??_SendMemoryData+6
  4451  0617  084E               	movf	SendMemoryData@finalAddress+3,w
  4452  0618  00C2               	movwf	??_SendMemoryData+7
  4453  0619  3008               	movlw	8
  4454  061A                     u1595:	
  4455  061A  1003               	clrc
  4456  061B  0DBF               	rlf	??_SendMemoryData+4,f
  4457  061C  0DC0               	rlf	??_SendMemoryData+5,f
  4458  061D  0DC1               	rlf	??_SendMemoryData+6,f
  4459  061E  0DC2               	rlf	??_SendMemoryData+7,f
  4460  061F  3EFF               	addlw	-1
  4461  0620  1D03               	skipz
  4462  0621  2E1A               	goto	u1595
  4463  0622  083F               	movf	??_SendMemoryData+4,w
  4464  0623  04BB               	iorwf	??_SendMemoryData,f
  4465  0624  0840               	movf	??_SendMemoryData+5,w
  4466  0625  04BC               	iorwf	??_SendMemoryData+1,f
  4467  0626  0841               	movf	??_SendMemoryData+6,w
  4468  0627  04BD               	iorwf	??_SendMemoryData+2,f
  4469  0628  0842               	movf	??_SendMemoryData+7,w
  4470  0629  04BE               	iorwf	??_SendMemoryData+3,f
  4471  062A  083E               	movf	??_SendMemoryData+3,w
  4472  062B  00CE               	movwf	SendMemoryData@finalAddress+3
  4473  062C  083D               	movf	??_SendMemoryData+2,w
  4474  062D  00CD               	movwf	SendMemoryData@finalAddress+2
  4475  062E  083C               	movf	??_SendMemoryData+1,w
  4476  062F  00CC               	movwf	SendMemoryData@finalAddress+1
  4477  0630  083B               	movf	??_SendMemoryData,w
  4478  0631  00CB               	movwf	SendMemoryData@finalAddress
  4479                           
  4480                           ;functions.c: 1223: for(address = 0; address < finalAddress; address++)
  4481  0632  3000               	movlw	0
  4482  0633  00CA               	movwf	SendMemoryData@address+3
  4483  0634  3000               	movlw	0
  4484  0635  00C9               	movwf	SendMemoryData@address+2
  4485  0636  3000               	movlw	0
  4486  0637  00C8               	movwf	SendMemoryData@address+1
  4487  0638  3000               	movlw	0
  4488  0639  00C7               	movwf	SendMemoryData@address
  4489  063A                     l2673:	
  4490  063A  084E               	movf	SendMemoryData@finalAddress+3,w
  4491  063B  024A               	subwf	SendMemoryData@address+3,w
  4492  063C  1D03               	skipz
  4493  063D  2E48               	goto	u1625
  4494  063E  084D               	movf	SendMemoryData@finalAddress+2,w
  4495  063F  0249               	subwf	SendMemoryData@address+2,w
  4496  0640  1D03               	skipz
  4497  0641  2E48               	goto	u1625
  4498  0642  084C               	movf	SendMemoryData@finalAddress+1,w
  4499  0643  0248               	subwf	SendMemoryData@address+1,w
  4500  0644  1D03               	skipz
  4501  0645  2E48               	goto	u1625
  4502  0646  084B               	movf	SendMemoryData@finalAddress,w
  4503  0647  0247               	subwf	SendMemoryData@address,w
  4504  0648                     u1625:	
  4505  0648  1803               	btfsc	3,0
  4506  0649  2EAF               	goto	l2675
  4507                           
  4508                           ;functions.c: 1224: {
  4509                           ;functions.c: 1226: addr1 = address & 0x00FF;
  4510  064A  0847               	movf	SendMemoryData@address,w
  4511  064B  00BB               	movwf	??_SendMemoryData
  4512  064C  083B               	movf	??_SendMemoryData,w
  4513  064D  00C6               	movwf	SendMemoryData@addr1
  4514                           
  4515                           ;functions.c: 1227: addr2 = address >> 8 & 0x00FF;
  4516  064E  0847               	movf	SendMemoryData@address,w
  4517  064F  00BB               	movwf	??_SendMemoryData
  4518  0650  0848               	movf	SendMemoryData@address+1,w
  4519  0651  00BC               	movwf	??_SendMemoryData+1
  4520  0652  0849               	movf	SendMemoryData@address+2,w
  4521  0653  00BD               	movwf	??_SendMemoryData+2
  4522  0654  084A               	movf	SendMemoryData@address+3,w
  4523  0655  00BE               	movwf	??_SendMemoryData+3
  4524  0656  3008               	movlw	8
  4525  0657                     u1605:	
  4526  0657  1003               	clrc
  4527  0658  0CBE               	rrf	??_SendMemoryData+3,f
  4528  0659  0CBD               	rrf	??_SendMemoryData+2,f
  4529  065A  0CBC               	rrf	??_SendMemoryData+1,f
  4530  065B  0CBB               	rrf	??_SendMemoryData,f
  4531  065C  3EFF               	addlw	-1
  4532  065D  1D03               	skipz
  4533  065E  2E57               	goto	u1605
  4534  065F  083B               	movf	??_SendMemoryData,w
  4535  0660  00BF               	movwf	??_SendMemoryData+4
  4536  0661  083F               	movf	??_SendMemoryData+4,w
  4537  0662  00C5               	movwf	SendMemoryData@addr2
  4538                           
  4539                           ;functions.c: 1228: addr3 = address >> 16 & 0x00FF;
  4540  0663  0847               	movf	SendMemoryData@address,w
  4541  0664  00BB               	movwf	??_SendMemoryData
  4542  0665  0848               	movf	SendMemoryData@address+1,w
  4543  0666  00BC               	movwf	??_SendMemoryData+1
  4544  0667  0849               	movf	SendMemoryData@address+2,w
  4545  0668  00BD               	movwf	??_SendMemoryData+2
  4546  0669  084A               	movf	SendMemoryData@address+3,w
  4547  066A  00BE               	movwf	??_SendMemoryData+3
  4548  066B  3010               	movlw	16
  4549  066C                     u1615:	
  4550  066C  1003               	clrc
  4551  066D  0CBE               	rrf	??_SendMemoryData+3,f
  4552  066E  0CBD               	rrf	??_SendMemoryData+2,f
  4553  066F  0CBC               	rrf	??_SendMemoryData+1,f
  4554  0670  0CBB               	rrf	??_SendMemoryData,f
  4555  0671  3EFF               	addlw	-1
  4556  0672  1D03               	skipz
  4557  0673  2E6C               	goto	u1615
  4558  0674  083B               	movf	??_SendMemoryData,w
  4559  0675  00BF               	movwf	??_SendMemoryData+4
  4560  0676  083F               	movf	??_SendMemoryData+4,w
  4561  0677  00C4               	movwf	SendMemoryData@addr3
  4562                           
  4563                           ;functions.c: 1231: read_write_flash_ram(
  4564                           ;functions.c: 1232: 1,
  4565                           ;functions.c: 1233: 1,
  4566                           ;functions.c: 1234: addr3,
  4567                           ;functions.c: 1235: addr2,
  4568                           ;functions.c: 1236: addr1,
  4569                           ;functions.c: 1237: &value);
  4570  0678  3001               	movlw	1
  4571  0679  00A5               	movwf	read_write_flash_ram@bytes_to_readwrite
  4572  067A  3000               	movlw	0
  4573  067B  00A6               	movwf	read_write_flash_ram@bytes_to_readwrite+1
  4574  067C  0844               	movf	SendMemoryData@addr3,w
  4575  067D  00BB               	movwf	??_SendMemoryData
  4576  067E  083B               	movf	??_SendMemoryData,w
  4577  067F  00A7               	movwf	read_write_flash_ram@flash_sector
  4578  0680  0845               	movf	SendMemoryData@addr2,w
  4579  0681  00BC               	movwf	??_SendMemoryData+1
  4580  0682  083C               	movf	??_SendMemoryData+1,w
  4581  0683  00A8               	movwf	read_write_flash_ram@flash_page
  4582  0684  0846               	movf	SendMemoryData@addr1,w
  4583  0685  00BD               	movwf	??_SendMemoryData+2
  4584  0686  083D               	movf	??_SendMemoryData+2,w
  4585  0687  00A9               	movwf	read_write_flash_ram@offset
  4586  0688  3043               	movlw	(low (SendMemoryData@value| 0))& (0+255)
  4587  0689  00BE               	movwf	??_SendMemoryData+3
  4588  068A  083E               	movf	??_SendMemoryData+3,w
  4589  068B  00AA               	movwf	read_write_flash_ram@mem_ptr
  4590  068C  3001               	movlw	1
  4591  068D  120A  158A  23EE  120A  118A  	fcall	_read_write_flash_ram
  4592                           
  4593                           ;functions.c: 1239: TransmittPacket(10, value);
  4594  0692  1283               	bcf	3,5	;RP0=0, select bank0
  4595  0693  1303               	bcf	3,6	;RP1=0, select bank0
  4596  0694  0843               	movf	SendMemoryData@value,w
  4597  0695  00BB               	movwf	??_SendMemoryData
  4598  0696  083B               	movf	??_SendMemoryData,w
  4599  0697  00B5               	movwf	TransmittPacket@value
  4600  0698  300A               	movlw	10
  4601  0699  120A  158A  25A2  120A  118A  	fcall	_TransmittPacket
  4602  069E  3001               	movlw	1
  4603  069F  1283               	bcf	3,5	;RP0=0, select bank0
  4604  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  4605  06A1  07C7               	addwf	SendMemoryData@address,f
  4606  06A2  3000               	movlw	0
  4607  06A3  1803               	skipnc
  4608  06A4  3001               	movlw	1
  4609  06A5  07C8               	addwf	SendMemoryData@address+1,f
  4610  06A6  3000               	movlw	0
  4611  06A7  1803               	skipnc
  4612  06A8  3001               	movlw	1
  4613  06A9  07C9               	addwf	SendMemoryData@address+2,f
  4614  06AA  3000               	movlw	0
  4615  06AB  1803               	skipnc
  4616  06AC  3001               	movlw	1
  4617  06AD  07CA               	addwf	SendMemoryData@address+3,f
  4618  06AE  2E3A               	goto	l2673
  4619  06AF                     l2675:	
  4620                           
  4621                           ;functions.c: 1240: }
  4622                           ;functions.c: 1241: TransmittPacket(8, 1);
  4623  06AF  01B5               	clrf	TransmittPacket@value
  4624  06B0  0AB5               	incf	TransmittPacket@value,f
  4625  06B1  3008               	movlw	8
  4626  06B2  120A  158A  25A2   	fcall	_TransmittPacket
  4627  06B5  0008               	return
  4628  06B6                     __end_of_SendMemoryData:	
  4629                           
  4630                           	psect	text15
  4631  0BEE                     __ptext15:	
  4632 ;; *************** function _read_write_flash_ram *****************
  4633 ;; Defined at:
  4634 ;;		line 107 in file "m25p16.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  one_read_zer    1    wreg     unsigned char 
  4637 ;;  bytes_to_rea    2    5[BANK0 ] unsigned short 
  4638 ;;  flash_sector    1    7[BANK0 ] unsigned char 
  4639 ;;  flash_page      1    8[BANK0 ] unsigned char 
  4640 ;;  offset          1    9[BANK0 ] unsigned char 
  4641 ;;  mem_ptr         1   10[BANK0 ] PTR unsigned char 
  4642 ;;		 -> SendMemoryData@value(1), saveDataToFlash@value(1), 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  one_read_zer    1   13[BANK0 ] unsigned char 
  4645 ;;  i               2   14[BANK0 ] unsigned short 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      void 
  4648 ;; Registers used:
  4649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4655 ;;      Params:         0       6       0       0       0
  4656 ;;      Locals:         0       3       0       0       0
  4657 ;;      Temps:          0       2       0       0       0
  4658 ;;      Totals:         0      11       0       0       0
  4659 ;;Total ram usage:       11 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    5
  4662 ;; This function calls:
  4663 ;;		_ReadSPI
  4664 ;;		_WriteSPI
  4665 ;;		_read_ram_status
  4666 ;; This function is called by:
  4667 ;;		_saveDataToFlash
  4668 ;;		_SendMemoryData
  4669 ;;		_write_flash_page
  4670 ;;		_read_flash_page
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           
  4675                           ;psect for function _read_write_flash_ram
  4676  0BEE                     _read_write_flash_ram:	
  4677                           
  4678                           ;incstack = 0
  4679                           ; Regs used in _read_write_flash_ram: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4680                           ;read_write_flash_ram@one_read_zero_write stored from wreg
  4681  0BEE  1283               	bcf	3,5	;RP0=0, select bank0
  4682  0BEF  1303               	bcf	3,6	;RP1=0, select bank0
  4683  0BF0  00AD               	movwf	read_write_flash_ram@one_read_zero_write
  4684                           
  4685                           ;m25p16.c: 122: unsigned short int i;
  4686                           ;m25p16.c: 126: RD3 = 0;
  4687  0BF1  1188               	bcf	8,3	;volatile
  4688                           
  4689                           ;m25p16.c: 127: if(one_read_zero_write)
  4690  0BF2  082D               	movf	read_write_flash_ram@one_read_zero_write,w
  4691  0BF3  1903               	btfsc	3,2
  4692  0BF4  2BF7               	goto	l2521
  4693                           
  4694                           ;m25p16.c: 128: {
  4695                           ;m25p16.c: 129: WriteSPI(0x03);
  4696  0BF5  3003               	movlw	3
  4697  0BF6  2C05               	goto	L2
  4698  0BF7                     l2521:	
  4699                           ;m25p16.c: 130: }
  4700                           
  4701                           
  4702                           ;m25p16.c: 131: else
  4703                           ;m25p16.c: 132: {
  4704                           ;m25p16.c: 133: WriteSPI(0x06);
  4705  0BF7  3006               	movlw	6
  4706  0BF8  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  4707                           
  4708                           ;m25p16.c: 134: RD3 = 1;
  4709  0BFD  1283               	bcf	3,5	;RP0=0, select bank0
  4710  0BFE  1303               	bcf	3,6	;RP1=0, select bank0
  4711  0BFF  1588               	bsf	8,3	;volatile
  4712                           
  4713                           ;m25p16.c: 135: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4714  0C00  0000               	nop
  4715                           
  4716                           ;m25p16.c: 136: RD3 = 0;
  4717  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  4718  0C02  1303               	bcf	3,6	;RP1=0, select bank0
  4719  0C03  1188               	bcf	8,3	;volatile
  4720                           
  4721                           ;m25p16.c: 137: WriteSPI(0x02);
  4722  0C04  3002               	movlw	2
  4723  0C05                     L2:	
  4724  0C05  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  4725                           
  4726                           ;m25p16.c: 139: }
  4727                           ;m25p16.c: 141: WriteSPI(flash_sector);
  4728  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  4729  0C0B  1303               	bcf	3,6	;RP1=0, select bank0
  4730  0C0C  0827               	movf	read_write_flash_ram@flash_sector,w
  4731  0C0D  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  4732                           
  4733                           ;m25p16.c: 142: WriteSPI(flash_page);
  4734  0C12  1283               	bcf	3,5	;RP0=0, select bank0
  4735  0C13  1303               	bcf	3,6	;RP1=0, select bank0
  4736  0C14  0828               	movf	read_write_flash_ram@flash_page,w
  4737  0C15  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  4738                           
  4739                           ;m25p16.c: 143: WriteSPI(offset);
  4740  0C1A  1283               	bcf	3,5	;RP0=0, select bank0
  4741  0C1B  1303               	bcf	3,6	;RP1=0, select bank0
  4742  0C1C  0829               	movf	read_write_flash_ram@offset,w
  4743  0C1D  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  4744                           
  4745                           ;m25p16.c: 145: for (i=0;i<bytes_to_readwrite;i++)
  4746  0C22  1283               	bcf	3,5	;RP0=0, select bank0
  4747  0C23  1303               	bcf	3,6	;RP1=0, select bank0
  4748  0C24  01AE               	clrf	read_write_flash_ram@i
  4749  0C25  01AF               	clrf	read_write_flash_ram@i+1
  4750  0C26                     l2539:	
  4751  0C26  0826               	movf	read_write_flash_ram@bytes_to_readwrite+1,w
  4752  0C27  022F               	subwf	read_write_flash_ram@i+1,w
  4753  0C28  1D03               	skipz
  4754  0C29  2C2C               	goto	u1425
  4755  0C2A  0825               	movf	read_write_flash_ram@bytes_to_readwrite,w
  4756  0C2B  022E               	subwf	read_write_flash_ram@i,w
  4757  0C2C                     u1425:	
  4758  0C2C  1803               	btfsc	3,0
  4759  0C2D  2C57               	goto	l590
  4760                           
  4761                           ;m25p16.c: 146: {
  4762                           ;m25p16.c: 147: if (one_read_zero_write)
  4763  0C2E  082D               	movf	read_write_flash_ram@one_read_zero_write,w
  4764  0C2F  1903               	btfsc	3,2
  4765  0C30  2C42               	goto	l2535
  4766                           
  4767                           ;m25p16.c: 148: {
  4768                           ;m25p16.c: 149: mem_ptr[i] = ReadSPI();
  4769  0C31  160A  118A  262D  120A  158A  	fcall	_ReadSPI
  4770  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  4771  0C37  1303               	bcf	3,6	;RP1=0, select bank0
  4772  0C38  00AB               	movwf	??_read_write_flash_ram
  4773  0C39  082E               	movf	read_write_flash_ram@i,w
  4774  0C3A  072A               	addwf	read_write_flash_ram@mem_ptr,w
  4775  0C3B  00AC               	movwf	??_read_write_flash_ram+1
  4776  0C3C  082C               	movf	??_read_write_flash_ram+1,w
  4777  0C3D  0084               	movwf	4
  4778  0C3E  082B               	movf	??_read_write_flash_ram,w
  4779  0C3F  1383               	bcf	3,7	;select IRP bank0
  4780  0C40  0080               	movwf	0
  4781                           
  4782                           ;m25p16.c: 150: }
  4783  0C41  2C4E               	goto	l2537
  4784  0C42                     l2535:	
  4785                           
  4786                           ;m25p16.c: 151: else
  4787                           ;m25p16.c: 152: {
  4788                           ;m25p16.c: 153: WriteSPI(mem_ptr[i]);
  4789  0C42  082E               	movf	read_write_flash_ram@i,w
  4790  0C43  072A               	addwf	read_write_flash_ram@mem_ptr,w
  4791  0C44  00AB               	movwf	??_read_write_flash_ram
  4792  0C45  082B               	movf	??_read_write_flash_ram,w
  4793  0C46  0084               	movwf	4
  4794  0C47  1383               	bcf	3,7	;select IRP bank0
  4795  0C48  0800               	movf	0,w
  4796  0C49  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  4797  0C4E                     l2537:	
  4798  0C4E  3001               	movlw	1
  4799  0C4F  1283               	bcf	3,5	;RP0=0, select bank0
  4800  0C50  1303               	bcf	3,6	;RP1=0, select bank0
  4801  0C51  07AE               	addwf	read_write_flash_ram@i,f
  4802  0C52  1803               	skipnc
  4803  0C53  0AAF               	incf	read_write_flash_ram@i+1,f
  4804  0C54  3000               	movlw	0
  4805  0C55  07AF               	addwf	read_write_flash_ram@i+1,f
  4806  0C56  2C26               	goto	l2539
  4807  0C57                     l590:	
  4808                           
  4809                           ;m25p16.c: 154: }
  4810                           ;m25p16.c: 155: }
  4811                           ;m25p16.c: 157: RD3 = 1;
  4812  0C57  1588               	bsf	8,3	;volatile
  4813                           
  4814                           ;m25p16.c: 159: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4815  0C58  0000               	nop
  4816  0C59                     l2543:	
  4817                           ;m25p16.c: 160: while (read_ram_status() & 0b00000011) {
  4818                           
  4819  0C59  160A  118A  26B2  120A  158A  	fcall	_read_ram_status
  4820  0C5E  3903               	andlw	3
  4821  0C5F  1903               	btfsc	3,2
  4822  0C60  0008               	return
  4823                           
  4824                           ;m25p16.c: 161: _delay((unsigned long)((1)*(4000000/4000.0)));
  4825  0C61  30C7               	movlw	199
  4826  0C62  1283               	bcf	3,5	;RP0=0, select bank0
  4827  0C63  1303               	bcf	3,6	;RP1=0, select bank0
  4828  0C64  00AB               	movwf	??_read_write_flash_ram
  4829  0C65                     u2547:	
  4830  0C65  2C66               	nop2
  4831  0C66  0BAB               	decfsz	??_read_write_flash_ram,f
  4832  0C67  2C65               	goto	u2547
  4833  0C68  2C69               	nop2
  4834  0C69  2C59               	goto	l2543
  4835  0C6A                     __end_of_read_write_flash_ram:	
  4836                           
  4837                           	psect	text16
  4838  16B2                     __ptext16:	
  4839 ;; *************** function _read_ram_status *****************
  4840 ;; Defined at:
  4841 ;;		line 57 in file "m25p16.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;		None
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  status          1    4[BANK0 ] unsigned char 
  4846 ;; Return value:  Size  Location     Type
  4847 ;;                  1    wreg      unsigned char 
  4848 ;; Registers used:
  4849 ;;		wreg, status,2, status,0, pclath, cstack
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4855 ;;      Params:         0       0       0       0       0
  4856 ;;      Locals:         0       1       0       0       0
  4857 ;;      Temps:          0       1       0       0       0
  4858 ;;      Totals:         0       2       0       0       0
  4859 ;;Total ram usage:        2 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    4
  4862 ;; This function calls:
  4863 ;;		_ReadSPI
  4864 ;;		_WriteSPI
  4865 ;; This function is called by:
  4866 ;;		_ReceivedPacketHandler
  4867 ;;		_ram_bulk_erase
  4868 ;;		_read_write_flash_ram
  4869 ;;		_write_ram_status
  4870 ;;		_ram_sector_erase
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           
  4875                           ;psect for function _read_ram_status
  4876  16B2                     _read_ram_status:	
  4877                           
  4878                           ;m25p16.c: 59: unsigned char status;
  4879                           ;m25p16.c: 60: RD3 = 0;
  4880                           
  4881                           ;incstack = 0
  4882                           ; Regs used in _read_ram_status: [wreg+status,2+status,0+pclath+cstack]
  4883  16B2  1283               	bcf	3,5	;RP0=0, select bank0
  4884  16B3  1303               	bcf	3,6	;RP1=0, select bank0
  4885  16B4  1188               	bcf	8,3	;volatile
  4886                           
  4887                           ;m25p16.c: 61: WriteSPI(0x05);
  4888  16B5  3005               	movlw	5
  4889  16B6  160A  118A  264F  160A  118A  	fcall	_WriteSPI
  4890                           
  4891                           ;m25p16.c: 62: status = ReadSPI();
  4892  16BB  160A  118A  262D   	fcall	_ReadSPI
  4893  16BE  1283               	bcf	3,5	;RP0=0, select bank0
  4894  16BF  1303               	bcf	3,6	;RP1=0, select bank0
  4895  16C0  00A3               	movwf	??_read_ram_status
  4896  16C1  0823               	movf	??_read_ram_status,w
  4897  16C2  00A4               	movwf	read_ram_status@status
  4898                           
  4899                           ;m25p16.c: 63: RD3 = 1;
  4900  16C3  1588               	bsf	8,3	;volatile
  4901                           
  4902                           ;m25p16.c: 64: return status;
  4903  16C4  0824               	movf	read_ram_status@status,w
  4904  16C5  0008               	return
  4905  16C6                     __end_of_read_ram_status:	
  4906                           
  4907                           	psect	text17
  4908  084A                     __ptext17:	
  4909 ;; *************** function _ReadMemoryAdress *****************
  4910 ;; Defined at:
  4911 ;;		line 988 in file "functions.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  var3            1    wreg     PTR unsigned char 
  4914 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), 
  4915 ;;  var2            1    2[BANK0 ] PTR unsigned char 
  4916 ;;		 -> SendMemoryData@addr2(1), saveDataToFlash@addr2(1), 
  4917 ;;  var1            1    3[BANK0 ] PTR unsigned char 
  4918 ;;		 -> SendMemoryData@addr1(1), saveDataToFlash@addr1(1), 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  var3            1    5[BANK0 ] PTR unsigned char 
  4921 ;;		 -> SendMemoryData@addr3(1), saveDataToFlash@addr3(1), 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  1    wreg      void 
  4924 ;; Registers used:
  4925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4931 ;;      Params:         0       2       0       0       0
  4932 ;;      Locals:         0       1       0       0       0
  4933 ;;      Temps:          0       1       0       0       0
  4934 ;;      Totals:         0       4       0       0       0
  4935 ;;Total ram usage:        4 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    3
  4938 ;; This function calls:
  4939 ;;		_eeprom_read
  4940 ;; This function is called by:
  4941 ;;		_saveDataToFlash
  4942 ;;		_SendMemoryData
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           
  4947                           ;psect for function _ReadMemoryAdress
  4948  084A                     _ReadMemoryAdress:	
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _ReadMemoryAdress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4952                           ;ReadMemoryAdress@var3 stored from wreg
  4953  084A  1283               	bcf	3,5	;RP0=0, select bank0
  4954  084B  1303               	bcf	3,6	;RP1=0, select bank0
  4955  084C  00A5               	movwf	ReadMemoryAdress@var3
  4956                           
  4957                           ;functions.c: 990: *var3 = eeprom_read(1);
  4958  084D  3001               	movlw	1
  4959  084E  160A  118A  278A  120A  158A  	fcall	_eeprom_read
  4960  0853  1283               	bcf	3,5	;RP0=0, select bank0
  4961  0854  1303               	bcf	3,6	;RP1=0, select bank0
  4962  0855  00A4               	movwf	??_ReadMemoryAdress
  4963  0856  0825               	movf	ReadMemoryAdress@var3,w
  4964  0857  0084               	movwf	4
  4965  0858  0824               	movf	??_ReadMemoryAdress,w
  4966  0859  1383               	bcf	3,7	;select IRP bank0
  4967  085A  0080               	movwf	0
  4968                           
  4969                           ;functions.c: 991: *var2 = eeprom_read(2);
  4970  085B  3002               	movlw	2
  4971  085C  160A  118A  278A  120A  158A  	fcall	_eeprom_read
  4972  0861  1283               	bcf	3,5	;RP0=0, select bank0
  4973  0862  1303               	bcf	3,6	;RP1=0, select bank0
  4974  0863  00A4               	movwf	??_ReadMemoryAdress
  4975  0864  0822               	movf	ReadMemoryAdress@var2,w
  4976  0865  0084               	movwf	4
  4977  0866  0824               	movf	??_ReadMemoryAdress,w
  4978  0867  1383               	bcf	3,7	;select IRP bank0
  4979  0868  0080               	movwf	0
  4980                           
  4981                           ;functions.c: 992: *var1 = eeprom_read(3);
  4982  0869  3003               	movlw	3
  4983  086A  160A  118A  278A   	fcall	_eeprom_read
  4984  086D  1283               	bcf	3,5	;RP0=0, select bank0
  4985  086E  1303               	bcf	3,6	;RP1=0, select bank0
  4986  086F  00A4               	movwf	??_ReadMemoryAdress
  4987  0870  0823               	movf	ReadMemoryAdress@var1,w
  4988  0871  0084               	movwf	4
  4989  0872  0824               	movf	??_ReadMemoryAdress,w
  4990  0873  1383               	bcf	3,7	;select IRP bank0
  4991  0874  0080               	movwf	0
  4992  0875  0008               	return
  4993  0876                     __end_of_ReadMemoryAdress:	
  4994                           
  4995                           	psect	text18
  4996  170F                     __ptext18:	
  4997 ;; *************** function _ResetMemoryAdress *****************
  4998 ;; Defined at:
  4999 ;;		line 1052 in file "functions.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;		None
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;		None
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, status,2, status,0, pclath, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5013 ;;      Params:         0       0       0       0       0
  5014 ;;      Locals:         0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0
  5016 ;;      Totals:         0       0       0       0       0
  5017 ;;Total ram usage:        0 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    3
  5020 ;; This function calls:
  5021 ;;		_eeprom_write
  5022 ;; This function is called by:
  5023 ;;		_ReceivedPacketHandler
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           
  5028                           ;psect for function _ResetMemoryAdress
  5029  170F                     _ResetMemoryAdress:	
  5030                           
  5031                           ;functions.c: 1054: eeprom_write(3,0);
  5032                           
  5033                           ;incstack = 0
  5034                           ; Regs used in _ResetMemoryAdress: [wreg+status,2+status,0+pclath+cstack]
  5035  170F  1283               	bcf	3,5	;RP0=0, select bank0
  5036  1710  1303               	bcf	3,6	;RP1=0, select bank0
  5037  1711  01A0               	clrf	eeprom_write@value
  5038  1712  3003               	movlw	3
  5039  1713  120A  158A  20CE  160A  118A  	fcall	_eeprom_write
  5040                           
  5041                           ;functions.c: 1055: eeprom_write(2,0);
  5042  1718  1283               	bcf	3,5	;RP0=0, select bank0
  5043  1719  1303               	bcf	3,6	;RP1=0, select bank0
  5044  171A  01A0               	clrf	eeprom_write@value
  5045  171B  3002               	movlw	2
  5046  171C  120A  158A  20CE  160A  118A  	fcall	_eeprom_write
  5047                           
  5048                           ;functions.c: 1056: eeprom_write(1,0);
  5049  1721  1283               	bcf	3,5	;RP0=0, select bank0
  5050  1722  1303               	bcf	3,6	;RP1=0, select bank0
  5051  1723  01A0               	clrf	eeprom_write@value
  5052  1724  3001               	movlw	1
  5053  1725  120A  158A  20CE   	fcall	_eeprom_write
  5054  1728  0008               	return
  5055  1729                     __end_of_ResetMemoryAdress:	
  5056                           
  5057                           	psect	text19
  5058  08CE                     __ptext19:	
  5059 ;; *************** function _eeprom_write *****************
  5060 ;; Defined at:
  5061 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eewrite.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  addr            1    wreg     unsigned char 
  5064 ;;  value           1    0[BANK0 ] unsigned char 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  addr            1    2[BANK0 ] unsigned char 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      void 
  5069 ;; Registers used:
  5070 ;;		wreg, status,2, status,0
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5076 ;;      Params:         0       1       0       0       0
  5077 ;;      Locals:         0       1       0       0       0
  5078 ;;      Temps:          0       1       0       0       0
  5079 ;;      Totals:         0       3       0       0       0
  5080 ;;Total ram usage:        3 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    2
  5083 ;; This function calls:
  5084 ;;		Nothing
  5085 ;; This function is called by:
  5086 ;;		_ReceivedPacketHandler
  5087 ;;		_IncreaseMemoryAdress
  5088 ;;		_ResetMemoryAdress
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           
  5093                           ;psect for function _eeprom_write
  5094  08CE                     _eeprom_write:	
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  5098                           ;eeprom_write@addr stored from wreg
  5099  08CE  1283               	bcf	3,5	;RP0=0, select bank0
  5100  08CF  1303               	bcf	3,6	;RP1=0, select bank0
  5101  08D0  00A2               	movwf	eeprom_write@addr
  5102  08D1                     l697:	
  5103  08D1  1683               	bsf	3,5	;RP0=1, select bank3
  5104  08D2  1703               	bsf	3,6	;RP1=1, select bank3
  5105  08D3  188C               	btfsc	12,1	;volsfr
  5106  08D4  28D1               	goto	l697
  5107  08D5  1283               	bcf	3,5	;RP0=0, select bank0
  5108  08D6  1303               	bcf	3,6	;RP1=0, select bank0
  5109  08D7  0822               	movf	eeprom_write@addr,w
  5110  08D8  1283               	bcf	3,5	;RP0=0, select bank2
  5111  08D9  1703               	bsf	3,6	;RP1=1, select bank2
  5112  08DA  008D               	movwf	13	;volatile
  5113  08DB  1283               	bcf	3,5	;RP0=0, select bank0
  5114  08DC  1303               	bcf	3,6	;RP1=0, select bank0
  5115  08DD  0820               	movf	eeprom_write@value,w
  5116  08DE  1283               	bcf	3,5	;RP0=0, select bank2
  5117  08DF  1703               	bsf	3,6	;RP1=1, select bank2
  5118  08E0  008C               	movwf	12	;volatile
  5119  08E1  303F               	movlw	63
  5120  08E2  1283               	bcf	3,5	;RP0=0, select bank0
  5121  08E3  1303               	bcf	3,6	;RP1=0, select bank0
  5122  08E4  00A1               	movwf	??_eeprom_write
  5123  08E5  0821               	movf	??_eeprom_write,w
  5124  08E6  1683               	bsf	3,5	;RP0=1, select bank3
  5125  08E7  1703               	bsf	3,6	;RP1=1, select bank3
  5126  08E8  058C               	andwf	12,f	;volsfr
  5127  08E9  1283               	bcf	3,5	;RP0=0, select bank0
  5128  08EA  1303               	bcf	3,6	;RP1=0, select bank0
  5129  08EB  1003               	bcf	3,0	;volatile
  5130  08EC  1B8B               	btfsc	11,7	;volatile
  5131  08ED  1403               	bsf	3,0	;volatile
  5132  08EE  138B               	bcf	11,7	;volatile
  5133  08EF  1683               	bsf	3,5	;RP0=1, select bank3
  5134  08F0  1703               	bsf	3,6	;RP1=1, select bank3
  5135  08F1  150C               	bsf	12,2	;volsfr
  5136  08F2  3055               	movlw	85
  5137  08F3  008D               	movwf	13	;volsfr
  5138  08F4  30AA               	movlw	170
  5139  08F5  008D               	movwf	13	;volsfr
  5140  08F6  148C               	bsf	12,1	;volsfr
  5141  08F7  110C               	bcf	12,2	;volsfr
  5142  08F8  1283               	bcf	3,5	;RP0=0, select bank0
  5143  08F9  1303               	bcf	3,6	;RP1=0, select bank0
  5144  08FA  1C03               	btfss	3,0	;volatile
  5145  08FB  0008               	return
  5146  08FC  178B               	bsf	11,7	;volatile
  5147  08FD  0008               	return
  5148  08FE                     __end_of_eeprom_write:	
  5149                           
  5150                           	psect	text20
  5151  1646                     __ptext20:	
  5152 ;; *************** function _OperationMode *****************
  5153 ;; Defined at:
  5154 ;;		line 964 in file "functions.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;		None
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;  bracketStatu    1    1[BANK0 ] unsigned char 
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  1    wreg      unsigned char 
  5161 ;; Registers used:
  5162 ;;		wreg, status,2
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5168 ;;      Params:         0       0       0       0       0
  5169 ;;      Locals:         0       1       0       0       0
  5170 ;;      Temps:          0       1       0       0       0
  5171 ;;      Totals:         0       2       0       0       0
  5172 ;;Total ram usage:        2 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:    2
  5175 ;; This function calls:
  5176 ;;		Nothing
  5177 ;; This function is called by:
  5178 ;;		_main
  5179 ;;		_ReceivedPacketHandler
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           
  5184                           ;psect for function _OperationMode
  5185  1646                     _OperationMode:	
  5186                           
  5187                           ;functions.c: 966: unsigned char bracketStatus;
  5188                           ;functions.c: 967: bracketStatus = ((~PORTB) & 0b00000111) ;
  5189                           
  5190                           ;incstack = 0
  5191                           ; Regs used in _OperationMode: [wreg+status,2]
  5192  1646  1283               	bcf	3,5	;RP0=0, select bank0
  5193  1647  1303               	bcf	3,6	;RP1=0, select bank0
  5194  1648  0906               	comf	6,w	;volatile
  5195  1649  3907               	andlw	7
  5196  164A  00A0               	movwf	??_OperationMode
  5197  164B  0820               	movf	??_OperationMode,w
  5198  164C  00A1               	movwf	OperationMode@bracketStatus
  5199                           
  5200                           ;functions.c: 969: return bracketStatus;
  5201  164D  0821               	movf	OperationMode@bracketStatus,w
  5202  164E  0008               	return
  5203  164F                     __end_of_OperationMode:	
  5204                           
  5205                           	psect	text21
  5206  165D                     __ptext21:	
  5207 ;; *************** function _ReadFIFO *****************
  5208 ;; Defined at:
  5209 ;;		line 775 in file "functions.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;		None
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  value           1    4[BANK0 ] unsigned char 
  5214 ;; Return value:  Size  Location     Type
  5215 ;;                  1    wreg      unsigned char 
  5216 ;; Registers used:
  5217 ;;		wreg, status,2, status,0, pclath, cstack
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5223 ;;      Params:         0       0       0       0       0
  5224 ;;      Locals:         0       1       0       0       0
  5225 ;;      Temps:          0       1       0       0       0
  5226 ;;      Totals:         0       2       0       0       0
  5227 ;;Total ram usage:        2 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; Hardware stack levels required when called:    4
  5230 ;; This function calls:
  5231 ;;		_ReadSPI
  5232 ;; This function is called by:
  5233 ;;		_TransiverReadFIFO
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           
  5238                           ;psect for function _ReadFIFO
  5239  165D                     _ReadFIFO:	
  5240                           
  5241                           ;functions.c: 777: BYTE value;
  5242                           ;functions.c: 778: RA5 = 0;
  5243                           
  5244                           ;incstack = 0
  5245                           ; Regs used in _ReadFIFO: [wreg+status,2+status,0+pclath+cstack]
  5246  165D  1283               	bcf	3,5	;RP0=0, select bank0
  5247  165E  1303               	bcf	3,6	;RP1=0, select bank0
  5248  165F  1285               	bcf	5,5	;volatile
  5249                           
  5250                           ;functions.c: 779: value = ReadSPI();
  5251  1660  160A  118A  262D   	fcall	_ReadSPI
  5252  1663  1283               	bcf	3,5	;RP0=0, select bank0
  5253  1664  1303               	bcf	3,6	;RP1=0, select bank0
  5254  1665  00A3               	movwf	??_ReadFIFO
  5255  1666  0823               	movf	??_ReadFIFO,w
  5256  1667  00A4               	movwf	ReadFIFO@value
  5257                           
  5258                           ;functions.c: 780: RA5 = 1;
  5259  1668  1685               	bsf	5,5	;volatile
  5260                           
  5261                           ;functions.c: 781: return value;
  5262  1669  0824               	movf	ReadFIFO@value,w
  5263  166A  0008               	return
  5264  166B                     __end_of_ReadFIFO:	
  5265                           
  5266                           	psect	text22
  5267  0F16                     __ptext22:	
  5268 ;; *************** function _TransiverInit *****************
  5269 ;; Defined at:
  5270 ;;		line 540 in file "functions.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  1    wreg      void 
  5277 ;; Registers used:
  5278 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5284 ;;      Params:         0       0       0       0       0
  5285 ;;      Locals:         0       0       0       0       0
  5286 ;;      Temps:          0       1       0       0       0
  5287 ;;      Totals:         0       1       0       0       0
  5288 ;;Total ram usage:        1 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    7
  5291 ;; This function calls:
  5292 ;;		_Blink
  5293 ;;		_FindChannel
  5294 ;;		_RegisterRead
  5295 ;;		_RegisterSet
  5296 ;;		_SetRFMode
  5297 ;; This function is called by:
  5298 ;;		_main
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           
  5303                           ;psect for function _TransiverInit
  5304  0F16                     _TransiverInit:	
  5305                           
  5306                           ;functions.c: 543: RegisterSet(0x00, 0x30);
  5307                           
  5308                           ;incstack = 0
  5309                           ; Regs used in _TransiverInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5310  0F16  3030               	movlw	48
  5311  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  5312  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  5313  0F19  00B5               	movwf	??_TransiverInit
  5314  0F1A  0835               	movf	??_TransiverInit,w
  5315  0F1B  00A7               	movwf	RegisterSet@value
  5316  0F1C  3000               	movlw	0
  5317  0F1D  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5318                           
  5319                           ;functions.c: 544: RegisterSet(0x01,(0xA8));
  5320  0F22  30A8               	movlw	168
  5321  0F23  1283               	bcf	3,5	;RP0=0, select bank0
  5322  0F24  1303               	bcf	3,6	;RP1=0, select bank0
  5323  0F25  00B5               	movwf	??_TransiverInit
  5324  0F26  0835               	movf	??_TransiverInit,w
  5325  0F27  00A7               	movwf	RegisterSet@value
  5326  0F28  3001               	movlw	1
  5327  0F29  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5328                           
  5329                           ;functions.c: 545: RegisterSet(0x02, 0x09);
  5330  0F2E  3009               	movlw	9
  5331  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  5332  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  5333  0F31  00B5               	movwf	??_TransiverInit
  5334  0F32  0835               	movf	??_TransiverInit,w
  5335  0F33  00A7               	movwf	RegisterSet@value
  5336  0F34  3002               	movlw	2
  5337  0F35  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5338                           
  5339                           ;functions.c: 546: RegisterSet(0x03, 0x07);
  5340  0F3A  3007               	movlw	7
  5341  0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  5342  0F3C  1303               	bcf	3,6	;RP1=0, select bank0
  5343  0F3D  00B5               	movwf	??_TransiverInit
  5344  0F3E  0835               	movf	??_TransiverInit,w
  5345  0F3F  00A7               	movwf	RegisterSet@value
  5346  0F40  3003               	movlw	3
  5347  0F41  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5348                           
  5349                           ;functions.c: 547: RegisterSet(0x05,(0x0A));
  5350  0F46  300A               	movlw	10
  5351  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  5352  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  5353  0F49  00B5               	movwf	??_TransiverInit
  5354  0F4A  0835               	movf	??_TransiverInit,w
  5355  0F4B  00A7               	movwf	RegisterSet@value
  5356  0F4C  3005               	movlw	5
  5357  0F4D  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5358                           
  5359                           ;functions.c: 548: RegisterSet(0x0D,(0x00|0xB0|0x09));
  5360  0F52  30B9               	movlw	185
  5361  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  5362  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  5363  0F55  00B5               	movwf	??_TransiverInit
  5364  0F56  0835               	movf	??_TransiverInit,w
  5365  0F57  00A7               	movwf	RegisterSet@value
  5366  0F58  300D               	movlw	13
  5367  0F59  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5368                           
  5369                           ;functions.c: 549: RegisterSet(0x0E,(0x01|0x10|0x01));
  5370  0F5E  3011               	movlw	17
  5371  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  5372  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  5373  0F61  00B5               	movwf	??_TransiverInit
  5374  0F62  0835               	movf	??_TransiverInit,w
  5375  0F63  00A7               	movwf	RegisterSet@value
  5376  0F64  300E               	movlw	14
  5377  0F65  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5378                           
  5379                           ;functions.c: 550: RegisterSet(0x10, 0xA3);
  5380  0F6A  30A3               	movlw	163
  5381  0F6B  1283               	bcf	3,5	;RP0=0, select bank0
  5382  0F6C  1303               	bcf	3,6	;RP1=0, select bank0
  5383  0F6D  00B5               	movwf	??_TransiverInit
  5384  0F6E  0835               	movf	??_TransiverInit,w
  5385  0F6F  00A7               	movwf	RegisterSet@value
  5386  0F70  3010               	movlw	16
  5387  0F71  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5388                           
  5389                           ;functions.c: 551: RegisterSet(0x12,(0x18|0x20|0x06));
  5390  0F76  303E               	movlw	62
  5391  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  5392  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  5393  0F79  00B5               	movwf	??_TransiverInit
  5394  0F7A  0835               	movf	??_TransiverInit,w
  5395  0F7B  00A7               	movwf	RegisterSet@value
  5396  0F7C  3012               	movlw	18
  5397  0F7D  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5398                           
  5399                           ;functions.c: 552: RegisterSet(0x16,('S'));
  5400  0F82  3053               	movlw	83
  5401  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  5402  0F84  1303               	bcf	3,6	;RP1=0, select bank0
  5403  0F85  00B5               	movwf	??_TransiverInit
  5404  0F86  0835               	movf	??_TransiverInit,w
  5405  0F87  00A7               	movwf	RegisterSet@value
  5406  0F88  3016               	movlw	22
  5407  0F89  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5408                           
  5409                           ;functions.c: 553: RegisterSet(0x17,('Y'));
  5410  0F8E  3059               	movlw	89
  5411  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  5412  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  5413  0F91  00B5               	movwf	??_TransiverInit
  5414  0F92  0835               	movf	??_TransiverInit,w
  5415  0F93  00A7               	movwf	RegisterSet@value
  5416  0F94  3017               	movlw	23
  5417  0F95  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5418                           
  5419                           ;functions.c: 554: RegisterSet(0x18,('N'));
  5420  0F9A  304E               	movlw	78
  5421  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  5422  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  5423  0F9D  00B5               	movwf	??_TransiverInit
  5424  0F9E  0835               	movf	??_TransiverInit,w
  5425  0F9F  00A7               	movwf	RegisterSet@value
  5426  0FA0  3018               	movlw	24
  5427  0FA1  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5428                           
  5429                           ;functions.c: 555: RegisterSet(0x19,('C'));
  5430  0FA6  3043               	movlw	67
  5431  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  5432  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  5433  0FA9  00B5               	movwf	??_TransiverInit
  5434  0FAA  0835               	movf	??_TransiverInit,w
  5435  0FAB  00A7               	movwf	RegisterSet@value
  5436  0FAC  3019               	movlw	25
  5437  0FAD  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5438                           
  5439                           ;functions.c: 556: RegisterSet(0x1A, 0x72);
  5440  0FB2  3072               	movlw	114
  5441  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  5442  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  5443  0FB5  00B5               	movwf	??_TransiverInit
  5444  0FB6  0835               	movf	??_TransiverInit,w
  5445  0FB7  00A7               	movwf	RegisterSet@value
  5446  0FB8  301A               	movlw	26
  5447  0FB9  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5448                           
  5449                           ;functions.c: 557: RegisterSet(0x1B, 0x3C);
  5450  0FBE  303C               	movlw	60
  5451  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  5452  0FC0  1303               	bcf	3,6	;RP1=0, select bank0
  5453  0FC1  00B5               	movwf	??_TransiverInit
  5454  0FC2  0835               	movf	??_TransiverInit,w
  5455  0FC3  00A7               	movwf	RegisterSet@value
  5456  0FC4  301B               	movlw	27
  5457  0FC5  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5458                           
  5459                           ;functions.c: 558: RegisterSet(0x1F, 0x80);
  5460  0FCA  3080               	movlw	128
  5461  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  5462  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  5463  0FCD  00B5               	movwf	??_TransiverInit
  5464  0FCE  0835               	movf	??_TransiverInit,w
  5465  0FCF  00A7               	movwf	RegisterSet@value
  5466  0FD0  301F               	movlw	31
  5467  0FD1  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5468                           
  5469                           ;functions.c: 559: RegisterSet(0x00, (RegisterRead(0x00)|0x01));
  5470  0FD6  3000               	movlw	0
  5471  0FD7  160A  118A  2729  120A  158A  	fcall	_RegisterRead
  5472  0FDC  3801               	iorlw	1
  5473  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  5474  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  5475  0FDF  00B5               	movwf	??_TransiverInit
  5476  0FE0  0835               	movf	??_TransiverInit,w
  5477  0FE1  00A7               	movwf	RegisterSet@value
  5478  0FE2  3000               	movlw	0
  5479  0FE3  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  5480                           
  5481                           ;functions.c: 561: if(FindChannel() == 1)
  5482  0FE8  120A  118A  26B6  120A  158A  	fcall	_FindChannel
  5483  0FED  3A01               	xorlw	1
  5484  0FEE  1D03               	skipz
  5485  0FEF  2FFB               	goto	l3017
  5486                           
  5487                           ;functions.c: 562: Blink(1);
  5488  0FF0  3001               	movlw	1
  5489  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  5490  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  5491  0FF3  00A6               	movwf	Blink@n
  5492  0FF4  3000               	movlw	0
  5493  0FF5  00A7               	movwf	Blink@n+1
  5494  0FF6  120A  158A  20FE  120A  158A  	fcall	_Blink
  5495  0FFB                     l3017:	
  5496                           
  5497                           ;functions.c: 563: SetRFMode(0x00);
  5498  0FFB  3000               	movlw	0
  5499  0FFC  120A  158A  237F   	fcall	_SetRFMode
  5500  0FFF  0008               	return
  5501  1000                     __end_of_TransiverInit:	
  5502                           
  5503                           	psect	text23
  5504  08FE                     __ptext23:	
  5505 ;; *************** function _Blink *****************
  5506 ;; Defined at:
  5507 ;;		line 688 in file "functions.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;  n               2    6[BANK0 ] int 
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;  i               2    9[BANK0 ] int 
  5512 ;; Return value:  Size  Location     Type
  5513 ;;                  1    wreg      void 
  5514 ;; Registers used:
  5515 ;;		wreg, status,2, status,0, pclath, cstack
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5521 ;;      Params:         0       2       0       0       0
  5522 ;;      Locals:         0       2       0       0       0
  5523 ;;      Temps:          0       1       0       0       0
  5524 ;;      Totals:         0       5       0       0       0
  5525 ;;Total ram usage:        5 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    3
  5528 ;; This function calls:
  5529 ;;		_DelayDs
  5530 ;; This function is called by:
  5531 ;;		_TransiverInit
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           
  5536                           ;psect for function _Blink
  5537  08FE                     _Blink:	
  5538                           
  5539                           ;functions.c: 690: for(int i = 1;i<=n;i++)
  5540                           
  5541                           ;incstack = 0
  5542                           ; Regs used in _Blink: [wreg+status,2+status,0+pclath+cstack]
  5543  08FE  3001               	movlw	1
  5544  08FF  1283               	bcf	3,5	;RP0=0, select bank0
  5545  0900  1303               	bcf	3,6	;RP1=0, select bank0
  5546  0901  00A9               	movwf	Blink@i
  5547  0902  3000               	movlw	0
  5548  0903  00AA               	movwf	Blink@i+1
  5549  0904                     l2855:	
  5550  0904  0827               	movf	Blink@n+1,w
  5551  0905  3A80               	xorlw	128
  5552  0906  00A8               	movwf	??_Blink
  5553  0907  082A               	movf	Blink@i+1,w
  5554  0908  3A80               	xorlw	128
  5555  0909  0228               	subwf	??_Blink,w
  5556  090A  1D03               	skipz
  5557  090B  290E               	goto	u1935
  5558  090C  0829               	movf	Blink@i,w
  5559  090D  0226               	subwf	Blink@n,w
  5560  090E                     u1935:	
  5561  090E  1C03               	btfss	3,0
  5562  090F  0008               	return
  5563                           
  5564                           ;functions.c: 691: {
  5565                           ;functions.c: 692: RC1 = 1;
  5566  0910  1283               	bcf	3,5	;RP0=0, select bank0
  5567  0911  1303               	bcf	3,6	;RP1=0, select bank0
  5568  0912  1487               	bsf	7,1	;volatile
  5569                           
  5570                           ;functions.c: 693: DelayDs(2);
  5571  0913  3002               	movlw	2
  5572  0914  00A0               	movwf	DelayDs@cnt
  5573  0915  3000               	movlw	0
  5574  0916  00A1               	movwf	DelayDs@cnt+1
  5575  0917  160A  118A  2767  120A  158A  	fcall	_DelayDs
  5576                           
  5577                           ;functions.c: 694: RC1 = 0;
  5578  091C  1283               	bcf	3,5	;RP0=0, select bank0
  5579  091D  1303               	bcf	3,6	;RP1=0, select bank0
  5580  091E  1087               	bcf	7,1	;volatile
  5581                           
  5582                           ;functions.c: 695: DelayDs(6);
  5583  091F  3006               	movlw	6
  5584  0920  00A0               	movwf	DelayDs@cnt
  5585  0921  3000               	movlw	0
  5586  0922  00A1               	movwf	DelayDs@cnt+1
  5587  0923  160A  118A  2767  120A  158A  	fcall	_DelayDs
  5588  0928  3001               	movlw	1
  5589  0929  1283               	bcf	3,5	;RP0=0, select bank0
  5590  092A  1303               	bcf	3,6	;RP1=0, select bank0
  5591  092B  07A9               	addwf	Blink@i,f
  5592  092C  1803               	skipnc
  5593  092D  0AAA               	incf	Blink@i+1,f
  5594  092E  3000               	movlw	0
  5595  092F  07AA               	addwf	Blink@i+1,f
  5596  0930  2904               	goto	l2855
  5597  0931                     __end_of_Blink:	
  5598                           
  5599                           	psect	text24
  5600  0AAE                     __ptext24:	
  5601 ;; *************** function _PICInit *****************
  5602 ;; Defined at:
  5603 ;;		line 428 in file "functions.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;		None
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;		None
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      void 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5617 ;;      Params:         0       0       0       0       0
  5618 ;;      Locals:         0       0       0       0       0
  5619 ;;      Temps:          0       0       0       0       0
  5620 ;;      Totals:         0       0       0       0       0
  5621 ;;Total ram usage:        0 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    2
  5624 ;; This function calls:
  5625 ;;		Nothing
  5626 ;; This function is called by:
  5627 ;;		_main
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function _PICInit
  5633  0AAE                     _PICInit:	
  5634                           
  5635                           ;functions.c: 432: OSCCONbits.IRCF2 = 1;
  5636                           
  5637                           ;incstack = 0
  5638                           ; Regs used in _PICInit: [wreg+status,2+status,0]
  5639  0AAE  1683               	bsf	3,5	;RP0=1, select bank1
  5640  0AAF  1303               	bcf	3,6	;RP1=0, select bank1
  5641  0AB0  170F               	bsf	15,6	;volatile
  5642                           
  5643                           ;functions.c: 433: OSCCONbits.IRCF1 = 1;
  5644  0AB1  168F               	bsf	15,5	;volatile
  5645                           
  5646                           ;functions.c: 434: OSCCONbits.IRCF0 = 0;
  5647  0AB2  120F               	bcf	15,4	;volatile
  5648                           
  5649                           ;functions.c: 435: OSCCONbits.SCS = 1;
  5650  0AB3  140F               	bsf	15,0	;volatile
  5651                           
  5652                           ;functions.c: 438: PORTA = 0x00;
  5653  0AB4  1283               	bcf	3,5	;RP0=0, select bank0
  5654  0AB5  1303               	bcf	3,6	;RP1=0, select bank0
  5655  0AB6  0185               	clrf	5	;volatile
  5656                           
  5657                           ;functions.c: 439: PORTB = 0x00;
  5658  0AB7  0186               	clrf	6	;volatile
  5659                           
  5660                           ;functions.c: 440: PORTC = 0x00;
  5661  0AB8  0187               	clrf	7	;volatile
  5662                           
  5663                           ;functions.c: 441: PORTD = 0x00;
  5664  0AB9  0188               	clrf	8	;volatile
  5665                           
  5666                           ;functions.c: 442: PORTE = 0x00;
  5667  0ABA  0189               	clrf	9	;volatile
  5668                           
  5669                           ;functions.c: 444: TRISA = 0b00001011;
  5670  0ABB  300B               	movlw	11
  5671  0ABC  1683               	bsf	3,5	;RP0=1, select bank1
  5672  0ABD  1303               	bcf	3,6	;RP1=0, select bank1
  5673  0ABE  0085               	movwf	5	;volatile
  5674                           
  5675                           ;functions.c: 445: TRISB = 0b00111101;
  5676  0ABF  303D               	movlw	61
  5677  0AC0  0086               	movwf	6	;volatile
  5678                           
  5679                           ;functions.c: 446: TRISC = 0b00010000;
  5680  0AC1  3010               	movlw	16
  5681  0AC2  0087               	movwf	7	;volatile
  5682                           
  5683                           ;functions.c: 447: TRISD = 0b00000111;
  5684  0AC3  3007               	movlw	7
  5685  0AC4  0088               	movwf	8	;volatile
  5686                           
  5687                           ;functions.c: 448: TRISE = 0b00000111;
  5688  0AC5  3007               	movlw	7
  5689  0AC6  0089               	movwf	9	;volatile
  5690                           
  5691                           ;functions.c: 450: ANSEL = 0b00000000;
  5692  0AC7  1683               	bsf	3,5	;RP0=1, select bank3
  5693  0AC8  1703               	bsf	3,6	;RP1=1, select bank3
  5694  0AC9  0188               	clrf	8	;volatile
  5695                           
  5696                           ;functions.c: 451: ANSELH = 0b00000000;
  5697  0ACA  0189               	clrf	9	;volatile
  5698                           
  5699                           ;functions.c: 452: ANSELbits.ANS0 = 1;
  5700  0ACB  1408               	bsf	8,0	;volatile
  5701                           
  5702                           ;functions.c: 453: ANSELbits.ANS3 = 1;
  5703  0ACC  1588               	bsf	8,3	;volatile
  5704                           
  5705                           ;functions.c: 454: ANSELbits.ANS5 = 1;
  5706  0ACD  1688               	bsf	8,5	;volatile
  5707                           
  5708                           ;functions.c: 455: ANSELbits.ANS6 = 1;
  5709  0ACE  1708               	bsf	8,6	;volatile
  5710                           
  5711                           ;functions.c: 456: ANSELbits.ANS7 = 1;
  5712  0ACF  1788               	bsf	8,7	;volatile
  5713                           
  5714                           ;functions.c: 457: ANSELHbits.ANS8 = 1;
  5715  0AD0  1409               	bsf	9,0	;volatile
  5716                           
  5717                           ;functions.c: 459: OPTION_REGbits.nRBPU = 0;
  5718  0AD1  1683               	bsf	3,5	;RP0=1, select bank1
  5719  0AD2  1303               	bcf	3,6	;RP1=0, select bank1
  5720  0AD3  1381               	bcf	1,7	;volatile
  5721                           
  5722                           ;functions.c: 460: WPUBbits.WPUB0 = 1;
  5723  0AD4  1415               	bsf	21,0	;volatile
  5724  0AD5                     l396:	
  5725                           ;functions.c: 461: while(!RB0);
  5726                           
  5727  0AD5  1283               	bcf	3,5	;RP0=0, select bank0
  5728  0AD6  1C06               	btfss	6,0	;volatile
  5729  0AD7  2AD5               	goto	l396
  5730                           
  5731                           ;functions.c: 462: WPUBbits.WPUB5 = 1;
  5732  0AD8  1683               	bsf	3,5	;RP0=1, select bank1
  5733  0AD9  1303               	bcf	3,6	;RP1=0, select bank1
  5734  0ADA  1695               	bsf	21,5	;volatile
  5735  0ADB                     l399:	
  5736                           ;functions.c: 463: while(!RB5);
  5737                           
  5738  0ADB  1283               	bcf	3,5	;RP0=0, select bank0
  5739  0ADC  1E86               	btfss	6,5	;volatile
  5740  0ADD  2ADB               	goto	l399
  5741                           
  5742                           ;functions.c: 466: SSPCONbits.SSPM=0x00;
  5743  0ADE  30F0               	movlw	-16
  5744  0ADF  0594               	andwf	20,f	;volatile
  5745                           
  5746                           ;functions.c: 467: SSPCONbits.CKP=0;
  5747  0AE0  1214               	bcf	20,4	;volatile
  5748                           
  5749                           ;functions.c: 468: SSPSTATbits.CKE=1;
  5750  0AE1  1683               	bsf	3,5	;RP0=1, select bank1
  5751  0AE2  1303               	bcf	3,6	;RP1=0, select bank1
  5752  0AE3  1714               	bsf	20,6	;volatile
  5753                           
  5754                           ;functions.c: 469: SSPSTATbits.SMP=0;
  5755  0AE4  1394               	bcf	20,7	;volatile
  5756                           
  5757                           ;functions.c: 470: SSPCONbits.SSPEN=0x01;
  5758  0AE5  1283               	bcf	3,5	;RP0=0, select bank0
  5759  0AE6  1303               	bcf	3,6	;RP1=0, select bank0
  5760  0AE7  1694               	bsf	20,5	;volatile
  5761                           
  5762                           ;functions.c: 471: SSPIE = 0;
  5763  0AE8  1683               	bsf	3,5	;RP0=1, select bank1
  5764  0AE9  1303               	bcf	3,6	;RP1=0, select bank1
  5765  0AEA  118C               	bcf	12,3	;volatile
  5766                           
  5767                           ;functions.c: 474: RA5 = 1;
  5768  0AEB  1283               	bcf	3,5	;RP0=0, select bank0
  5769  0AEC  1303               	bcf	3,6	;RP1=0, select bank0
  5770  0AED  1685               	bsf	5,5	;volatile
  5771                           
  5772                           ;functions.c: 475: RA4 = 1;
  5773  0AEE  1605               	bsf	5,4	;volatile
  5774                           
  5775                           ;functions.c: 476: RD4 = 1;
  5776  0AEF  1608               	bsf	8,4	;volatile
  5777                           
  5778                           ;functions.c: 477: RD3 = 1;
  5779  0AF0  1588               	bsf	8,3	;volatile
  5780                           
  5781                           ;functions.c: 479: RB1 = 1;
  5782  0AF1  1486               	bsf	6,1	;volatile
  5783                           
  5784                           ;functions.c: 484: INTCONbits.RBIE = 1;
  5785  0AF2  158B               	bsf	11,3	;volatile
  5786                           
  5787                           ;functions.c: 485: INTCONbits.PEIE = 1;
  5788  0AF3  170B               	bsf	11,6	;volatile
  5789                           
  5790                           ;functions.c: 486: PIE1bits.TMR1IE = 1;
  5791  0AF4  1683               	bsf	3,5	;RP0=1, select bank1
  5792  0AF5  1303               	bcf	3,6	;RP1=0, select bank1
  5793  0AF6  140C               	bsf	12,0	;volatile
  5794                           
  5795                           ;functions.c: 487: INTCONbits.GIE = 1;
  5796  0AF7  178B               	bsf	11,7	;volatile
  5797                           
  5798                           ;functions.c: 488: IOCBbits.IOCB5 = 1;
  5799  0AF8  1696               	bsf	22,5	;volatile
  5800                           
  5801                           ;functions.c: 491: T1CON = 0b00110000;
  5802  0AF9  3030               	movlw	48
  5803  0AFA  1283               	bcf	3,5	;RP0=0, select bank0
  5804  0AFB  1303               	bcf	3,6	;RP1=0, select bank0
  5805  0AFC  0090               	movwf	16	;volatile
  5806                           
  5807                           ;functions.c: 492: TMR1H = 0x0B;
  5808  0AFD  300B               	movlw	11
  5809  0AFE  008F               	movwf	15	;volatile
  5810                           
  5811                           ;functions.c: 493: TMR1L = 0xDB;
  5812  0AFF  30DB               	movlw	219
  5813  0B00  008E               	movwf	14	;volatile
  5814                           
  5815                           ;functions.c: 494: T1CONbits.TMR1ON = 1;
  5816  0B01  1410               	bsf	16,0	;volatile
  5817                           
  5818                           ;functions.c: 497: ADCON0bits.ADCS0 = 0;
  5819  0B02  131F               	bcf	31,6	;volatile
  5820                           
  5821                           ;functions.c: 498: ADCON0bits.ADCS1 = 0;
  5822  0B03  139F               	bcf	31,7	;volatile
  5823                           
  5824                           ;functions.c: 499: ADCON1bits.ADFM = 0;
  5825  0B04  1683               	bsf	3,5	;RP0=1, select bank1
  5826  0B05  1303               	bcf	3,6	;RP1=0, select bank1
  5827  0B06  139F               	bcf	31,7	;volatile
  5828                           
  5829                           ;functions.c: 500: ADCON1bits.VCFG1 = 0;
  5830  0B07  129F               	bcf	31,5	;volatile
  5831                           
  5832                           ;functions.c: 501: ADCON1bits.VCFG0 = 0;
  5833  0B08  121F               	bcf	31,4	;volatile
  5834                           
  5835                           ;functions.c: 504: intSecondCounter = 0;
  5836  0B09  1283               	bcf	3,5	;RP0=0, select bank0
  5837  0B0A  1303               	bcf	3,6	;RP1=0, select bank0
  5838  0B0B  01E5               	clrf	_intSecondCounter
  5839  0B0C  01E6               	clrf	_intSecondCounter+1
  5840                           
  5841                           ;functions.c: 505: intHalfSecondCounter = 0;
  5842  0B0D  01E1               	clrf	_intHalfSecondCounter
  5843  0B0E  01E2               	clrf	_intHalfSecondCounter+1
  5844                           
  5845                           ;functions.c: 506: intMinuteCounter = 0;
  5846  0B0F  01E3               	clrf	_intMinuteCounter
  5847  0B10  01E4               	clrf	_intMinuteCounter+1
  5848  0B11  0008               	return
  5849  0B12                     __end_of_PICInit:	
  5850                           
  5851                           	psect	text25
  5852  168D                     __ptext25:	
  5853 ;; *************** function _Mode_5 *****************
  5854 ;; Defined at:
  5855 ;;		line 329 in file "functions.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;		None
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;		None
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  1    wreg      void 
  5862 ;; Registers used:
  5863 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5869 ;;      Params:         0       0       0       0       0
  5870 ;;      Locals:         0       0       0       0       0
  5871 ;;      Temps:          0       1       0       0       0
  5872 ;;      Totals:         0       1       0       0       0
  5873 ;;Total ram usage:        1 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:    8
  5876 ;; This function calls:
  5877 ;;		_LightWithSensController
  5878 ;;		_TransmittPacket
  5879 ;; This function is called by:
  5880 ;;		_main
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           
  5885                           ;psect for function _Mode_5
  5886  168D                     _Mode_5:	
  5887                           
  5888                           ;functions.c: 331: if(!RB5)
  5889                           
  5890                           ;incstack = 0
  5891 ;; hardware stack exceeded
  5892                           ; Regs used in _Mode_5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5893  168D  1283               	bcf	3,5	;RP0=0, select bank0
  5894  168E  1303               	bcf	3,6	;RP1=0, select bank0
  5895  168F  1A86               	btfsc	6,5	;volatile
  5896  1690  2E9B               	goto	l3093
  5897                           
  5898                           ;functions.c: 332: {
  5899                           ;functions.c: 333: TransmittPacket(2, 2);
  5900  1691  3002               	movlw	2
  5901  1692  00BB               	movwf	??_Mode_5
  5902  1693  083B               	movf	??_Mode_5,w
  5903  1694  00B5               	movwf	TransmittPacket@value
  5904  1695  3002               	movlw	2
  5905  1696  120A  158A  25A2  160A  118A  	fcall	_TransmittPacket
  5906  169B                     l3093:	
  5907                           
  5908                           ;functions.c: 334: }
  5909                           ;functions.c: 335: LightWithSensController();
  5910  169B  120A  158A  2131   	fcall	_LightWithSensController
  5911  169E  0008               	return
  5912  169F                     __end_of_Mode_5:	
  5913                           
  5914                           	psect	text26
  5915  166B                     __ptext26:	
  5916 ;; *************** function _Mode_4 *****************
  5917 ;; Defined at:
  5918 ;;		line 317 in file "functions.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;		None
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;		None
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  1    wreg      void 
  5925 ;; Registers used:
  5926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5932 ;;      Params:         0       0       0       0       0
  5933 ;;      Locals:         0       0       0       0       0
  5934 ;;      Temps:          0       0       0       0       0
  5935 ;;      Totals:         0       0       0       0       0
  5936 ;;Total ram usage:        0 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; Hardware stack levels required when called:    8
  5939 ;; This function calls:
  5940 ;;		_LightWithSensController
  5941 ;;		_TransmittPacket
  5942 ;; This function is called by:
  5943 ;;		_main
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           
  5948                           ;psect for function _Mode_4
  5949  166B                     _Mode_4:	
  5950                           
  5951                           ;functions.c: 319: if(!RB5)
  5952                           
  5953                           ;incstack = 0
  5954 ;; hardware stack exceeded
  5955                           ; Regs used in _Mode_4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5956  166B  1283               	bcf	3,5	;RP0=0, select bank0
  5957  166C  1303               	bcf	3,6	;RP1=0, select bank0
  5958  166D  1A86               	btfsc	6,5	;volatile
  5959  166E  2E77               	goto	l3087
  5960                           
  5961                           ;functions.c: 320: {
  5962                           ;functions.c: 321: TransmittPacket(2, 1);
  5963  166F  01B5               	clrf	TransmittPacket@value
  5964  1670  0AB5               	incf	TransmittPacket@value,f
  5965  1671  3002               	movlw	2
  5966  1672  120A  158A  25A2  160A  118A  	fcall	_TransmittPacket
  5967  1677                     l3087:	
  5968                           
  5969                           ;functions.c: 322: }
  5970                           ;functions.c: 323: LightWithSensController();
  5971  1677  120A  158A  2131   	fcall	_LightWithSensController
  5972  167A  0008               	return
  5973  167B                     __end_of_Mode_4:	
  5974                           
  5975                           	psect	text27
  5976  0DA2                     __ptext27:	
  5977 ;; *************** function _TransmittPacket *****************
  5978 ;; Defined at:
  5979 ;;		line 224 in file "functions.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;  topic           1    wreg     unsigned char 
  5982 ;;  value           1   21[BANK0 ] unsigned char 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;  topic           1   26[BANK0 ] unsigned char 
  5985 ;;  i               2   24[BANK0 ] int 
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  1    wreg      void 
  5988 ;; Registers used:
  5989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5995 ;;      Params:         0       1       0       0       0
  5996 ;;      Locals:         0       3       0       0       0
  5997 ;;      Temps:          0       2       0       0       0
  5998 ;;      Totals:         0       6       0       0       0
  5999 ;;Total ram usage:        6 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    7
  6002 ;; This function calls:
  6003 ;;		_FindChannel
  6004 ;;		_RegisterRead
  6005 ;;		_RegisterSet
  6006 ;;		_SetRFMode
  6007 ;;		_WriteFIFO
  6008 ;;		_timerFunction
  6009 ;; This function is called by:
  6010 ;;		_ReceivedPacketHandler
  6011 ;;		_Mode_4
  6012 ;;		_Mode_5
  6013 ;;		_SendMemoryData
  6014 ;; This function uses a non-reentrant model
  6015 ;;
  6016                           
  6017                           
  6018                           ;psect for function _TransmittPacket
  6019  0DA2                     _TransmittPacket:	
  6020                           
  6021                           ;incstack = 0
  6022 ;; hardware stack exceeded
  6023                           ; Regs used in _TransmittPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6024                           ;TransmittPacket@topic stored from wreg
  6025  0DA2  1283               	bcf	3,5	;RP0=0, select bank0
  6026  0DA3  1303               	bcf	3,6	;RP1=0, select bank0
  6027  0DA4  00BA               	movwf	TransmittPacket@topic
  6028                           
  6029                           ;functions.c: 226: timerFunction(4, 5);
  6030  0DA5  3004               	movlw	4
  6031  0DA6  00A0               	movwf	timerFunction@intTimerNumber
  6032  0DA7  3000               	movlw	0
  6033  0DA8  00A1               	movwf	timerFunction@intTimerNumber+1
  6034  0DA9  3005               	movlw	5
  6035  0DAA  00A2               	movwf	timerFunction@intSetSeconds
  6036  0DAB  3000               	movlw	0
  6037  0DAC  00A3               	movwf	timerFunction@intSetSeconds+1
  6038  0DAD  160A  118A  267B  120A  158A  	fcall	_timerFunction
  6039                           
  6040                           ;functions.c: 228: int i = 0;
  6041  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  6042  0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  6043  0DB4  01B8               	clrf	TransmittPacket@i
  6044  0DB5  01B9               	clrf	TransmittPacket@i+1
  6045                           
  6046                           ;functions.c: 231: SetRFMode(0x20);
  6047  0DB6  3020               	movlw	32
  6048  0DB7  120A  158A  237F  120A  158A  	fcall	_SetRFMode
  6049                           
  6050                           ;functions.c: 232: _delay((unsigned long)((10)*(4000000/4000.0)));
  6051  0DBC  300D               	movlw	13
  6052  0DBD  1283               	bcf	3,5	;RP0=0, select bank0
  6053  0DBE  1303               	bcf	3,6	;RP1=0, select bank0
  6054  0DBF  00B7               	movwf	??_TransmittPacket+1
  6055  0DC0  30FB               	movlw	251
  6056  0DC1  00B6               	movwf	??_TransmittPacket
  6057  0DC2                     u2557:	
  6058  0DC2  0BB6               	decfsz	??_TransmittPacket,f
  6059  0DC3  2DC2               	goto	u2557
  6060  0DC4  0BB7               	decfsz	??_TransmittPacket+1,f
  6061  0DC5  2DC2               	goto	u2557
  6062                           
  6063                           ;functions.c: 233: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  6064  0DC6  300E               	movlw	14
  6065  0DC7  160A  118A  2729  120A  158A  	fcall	_RegisterRead
  6066  0DCC  3802               	iorlw	2
  6067  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  6068  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  6069  0DCF  00B6               	movwf	??_TransmittPacket
  6070  0DD0  0836               	movf	??_TransmittPacket,w
  6071  0DD1  00A7               	movwf	RegisterSet@value
  6072  0DD2  300E               	movlw	14
  6073  0DD3  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  6074                           
  6075                           ;functions.c: 234: SetRFMode(0x40);
  6076  0DD8  3040               	movlw	64
  6077  0DD9  120A  158A  237F  120A  158A  	fcall	_SetRFMode
  6078  0DDE                     l2461:	
  6079                           ;functions.c: 235: while((RegisterRead(0x0E) & 0b00000010) == 0)
  6080                           
  6081  0DDE  300E               	movlw	14
  6082  0DDF  160A  118A  2729  120A  158A  	fcall	_RegisterRead
  6083  0DE4  3902               	andlw	2
  6084  0DE5  1D03               	btfss	3,2
  6085  0DE6  2DF1               	goto	l2463
  6086                           
  6087                           ;functions.c: 236: {
  6088                           ;functions.c: 237: if(bTimerComplete[4])
  6089  0DE7  1283               	bcf	3,5	;RP0=0, select bank0
  6090  0DE8  1303               	bcf	3,6	;RP1=0, select bank0
  6091  0DE9  085A               	movf	_bTimerComplete+4,w
  6092  0DEA  1903               	btfsc	3,2
  6093  0DEB  2DDE               	goto	l2461
  6094                           
  6095                           ;functions.c: 238: {
  6096                           ;functions.c: 239: FindChannel();
  6097  0DEC  120A  118A  26B6  120A  158A  	fcall	_FindChannel
  6098  0DF1                     l2463:	
  6099                           ;functions.c: 240: break;
  6100                           
  6101                           
  6102                           ;functions.c: 241: }
  6103                           ;functions.c: 243: }
  6104                           ;functions.c: 244: SetRFMode(0x80);
  6105  0DF1  3080               	movlw	128
  6106  0DF2  120A  158A  237F  120A  158A  	fcall	_SetRFMode
  6107                           
  6108                           ;functions.c: 245: _delay((unsigned long)((500)*(4000000/4000000.0)));
  6109  0DF7  30A5               	movlw	165
  6110  0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  6111  0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  6112  0DFA  00B6               	movwf	??_TransmittPacket
  6113  0DFB                     u2567:	
  6114  0DFB  0BB6               	decfsz	??_TransmittPacket,f
  6115  0DFC  2DFB               	goto	u2567
  6116  0DFD  2DFE               	nop2
  6117                           
  6118                           ;functions.c: 248: WriteFIFO('S');
  6119  0DFE  3053               	movlw	83
  6120  0DFF  120A  118A  27F4  120A  158A  	fcall	_WriteFIFO
  6121                           
  6122                           ;functions.c: 249: WriteFIFO('Y');
  6123  0E04  3059               	movlw	89
  6124  0E05  120A  118A  27F4  120A  158A  	fcall	_WriteFIFO
  6125                           
  6126                           ;functions.c: 250: WriteFIFO('N');
  6127  0E0A  304E               	movlw	78
  6128  0E0B  120A  118A  27F4  120A  158A  	fcall	_WriteFIFO
  6129                           
  6130                           ;functions.c: 251: WriteFIFO('C');
  6131  0E10  3043               	movlw	67
  6132  0E11  120A  118A  27F4  120A  158A  	fcall	_WriteFIFO
  6133                           
  6134                           ;functions.c: 254: WriteFIFO(44);
  6135  0E16  302C               	movlw	44
  6136  0E17  120A  118A  27F4  120A  158A  	fcall	_WriteFIFO
  6137                           
  6138                           ;functions.c: 255: WriteFIFO(topic);
  6139  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  6140  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  6141  0E1E  083A               	movf	TransmittPacket@topic,w
  6142  0E1F  120A  118A  27F4  120A  158A  	fcall	_WriteFIFO
  6143                           
  6144                           ;functions.c: 256: WriteFIFO(value);
  6145  0E24  1283               	bcf	3,5	;RP0=0, select bank0
  6146  0E25  1303               	bcf	3,6	;RP1=0, select bank0
  6147  0E26  0835               	movf	TransmittPacket@value,w
  6148  0E27  120A  118A  27F4  120A  158A  	fcall	_WriteFIFO
  6149                           
  6150                           ;functions.c: 257: WriteFIFO(55);
  6151  0E2C  3037               	movlw	55
  6152  0E2D  120A  118A  27F4  120A  158A  	fcall	_WriteFIFO
  6153  0E32                     l346:	
  6154                           ;functions.c: 260: while(!RB4)
  6155                           
  6156  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  6157  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  6158  0E34  1A06               	btfsc	6,4	;volatile
  6159  0E35  2E3B               	goto	l2487
  6160                           
  6161                           ;functions.c: 261: {
  6162                           ;functions.c: 262: if(bTimerComplete[4])
  6163  0E36  1283               	bcf	3,5	;RP0=0, select bank0
  6164  0E37  1303               	bcf	3,6	;RP1=0, select bank0
  6165  0E38  085A               	movf	_bTimerComplete+4,w
  6166  0E39  1903               	btfsc	3,2
  6167  0E3A  2E32               	goto	l346
  6168  0E3B                     l2487:	
  6169                           ;functions.c: 263: break;
  6170                           
  6171                           
  6172                           ;functions.c: 264: }
  6173                           ;functions.c: 265: _delay((unsigned long)((10)*(4000000/4000000.0)));
  6174  0E3B  3002               	movlw	2
  6175  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
  6176  0E3D  1303               	bcf	3,6	;RP1=0, select bank0
  6177  0E3E  00B6               	movwf	??_TransmittPacket
  6178  0E3F                     u2577:	
  6179  0E3F  0BB6               	decfsz	??_TransmittPacket,f
  6180  0E40  2E3F               	goto	u2577
  6181  0E41  0000               	nop
  6182                           
  6183                           ;functions.c: 266: SetRFMode(0x00);
  6184  0E42  3000               	movlw	0
  6185  0E43  120A  158A  237F  120A  158A  	fcall	_SetRFMode
  6186                           
  6187                           ;functions.c: 267: _delay((unsigned long)((50)*(4000000/4000.0)));
  6188  0E48  3041               	movlw	65
  6189  0E49  1283               	bcf	3,5	;RP0=0, select bank0
  6190  0E4A  1303               	bcf	3,6	;RP1=0, select bank0
  6191  0E4B  00B7               	movwf	??_TransmittPacket+1
  6192  0E4C  30ED               	movlw	237
  6193  0E4D  00B6               	movwf	??_TransmittPacket
  6194  0E4E                     u2587:	
  6195  0E4E  0BB6               	decfsz	??_TransmittPacket,f
  6196  0E4F  2E4E               	goto	u2587
  6197  0E50  0BB7               	decfsz	??_TransmittPacket+1,f
  6198  0E51  2E4E               	goto	u2587
  6199  0E52  2E53               	nop2
  6200  0E53  0008               	return
  6201  0E54                     __end_of_TransmittPacket:	
  6202                           
  6203                           	psect	text28
  6204  07F4                     __ptext28:	
  6205 ;; *************** function _WriteFIFO *****************
  6206 ;; Defined at:
  6207 ;;		line 802 in file "functions.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;  Data            1    wreg     unsigned char 
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;  Data            1    3[BANK0 ] unsigned char 
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  1    wreg      void 
  6214 ;; Registers used:
  6215 ;;		wreg, status,2, status,0, pclath, cstack
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6221 ;;      Params:         0       0       0       0       0
  6222 ;;      Locals:         0       1       0       0       0
  6223 ;;      Temps:          0       0       0       0       0
  6224 ;;      Totals:         0       1       0       0       0
  6225 ;;Total ram usage:        1 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    3
  6228 ;; This function calls:
  6229 ;;		_WriteSPI
  6230 ;; This function is called by:
  6231 ;;		_TransmittPacket
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           
  6236                           ;psect for function _WriteFIFO
  6237  07F4                     _WriteFIFO:	
  6238                           
  6239                           ;incstack = 0
  6240                           ; Regs used in _WriteFIFO: [wreg+status,2+status,0+pclath+cstack]
  6241                           ;WriteFIFO@Data stored from wreg
  6242  07F4  1283               	bcf	3,5	;RP0=0, select bank0
  6243  07F5  1303               	bcf	3,6	;RP1=0, select bank0
  6244  07F6  00A3               	movwf	WriteFIFO@Data
  6245                           
  6246                           ;functions.c: 804: RA5 = 0;
  6247  07F7  1285               	bcf	5,5	;volatile
  6248                           
  6249                           ;functions.c: 805: WriteSPI(Data);
  6250  07F8  0823               	movf	WriteFIFO@Data,w
  6251  07F9  160A  118A  264F   	fcall	_WriteSPI
  6252                           
  6253                           ;functions.c: 806: RA5 = 1;
  6254  07FC  1283               	bcf	3,5	;RP0=0, select bank0
  6255  07FD  1303               	bcf	3,6	;RP1=0, select bank0
  6256  07FE  1685               	bsf	5,5	;volatile
  6257  07FF  0008               	return
  6258  0800                     __end_of_WriteFIFO:	
  6259                           
  6260                           	psect	text29
  6261  06B6                     __ptext29:	
  6262 ;; *************** function _FindChannel *****************
  6263 ;; Defined at:
  6264 ;;		line 585 in file "functions.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;  i               2   19[BANK0 ] int 
  6269 ;;  cnt             2   17[BANK0 ] int 
  6270 ;; Return value:  Size  Location     Type
  6271 ;;                  1    wreg      unsigned char 
  6272 ;; Registers used:
  6273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6279 ;;      Params:         0       0       0       0       0
  6280 ;;      Locals:         0       4       0       0       0
  6281 ;;      Temps:          0       3       0       0       0
  6282 ;;      Totals:         0       7       0       0       0
  6283 ;;Total ram usage:        7 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    6
  6286 ;; This function calls:
  6287 ;;		_RegisterRead
  6288 ;;		_RegisterSet
  6289 ;;		_SetRFMode
  6290 ;; This function is called by:
  6291 ;;		_TransiverToReceive
  6292 ;;		_TransmittPacket
  6293 ;;		_TransiverInit
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           
  6298                           ;psect for function _FindChannel
  6299  06B6                     _FindChannel:	
  6300                           
  6301                           ;functions.c: 587: int cnt = 0;
  6302                           
  6303                           ;incstack = 0
  6304 ;; using string table level
  6305                           ; Regs used in _FindChannel: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6306  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  6307  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  6308  06B8  01B1               	clrf	FindChannel@cnt
  6309  06B9  01B2               	clrf	FindChannel@cnt+1
  6310                           
  6311                           ;functions.c: 588: bChannelFound = 0;
  6312  06BA  01E7               	clrf	_bChannelFound
  6313                           
  6314                           ;functions.c: 589: channelFound = 0;
  6315  06BB  01DB               	clrf	_channelFound
  6316  06BC  01DC               	clrf	_channelFound+1
  6317                           
  6318                           ;functions.c: 591: _delay((unsigned long)((1000)*(4000000/4000.0)));
  6319  06BD  3006               	movlw	6
  6320  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  6321  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  6322  06C0  00B0               	movwf	??_FindChannel+2
  6323  06C1  3013               	movlw	19
  6324  06C2  00AF               	movwf	??_FindChannel+1
  6325  06C3  30AD               	movlw	173
  6326  06C4  00AE               	movwf	??_FindChannel
  6327  06C5                     u2597:	
  6328  06C5  0BAE               	decfsz	??_FindChannel,f
  6329  06C6  2EC5               	goto	u2597
  6330  06C7  0BAF               	decfsz	??_FindChannel+1,f
  6331  06C8  2EC5               	goto	u2597
  6332  06C9  0BB0               	decfsz	??_FindChannel+2,f
  6333  06CA  2EC5               	goto	u2597
  6334                           
  6335                           ;functions.c: 592: for (int i = 0; i < 13; i++)
  6336  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  6337  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  6338  06CD  01B3               	clrf	FindChannel@i
  6339  06CE  01B4               	clrf	FindChannel@i+1
  6340  06CF  0834               	movf	FindChannel@i+1,w
  6341  06D0  3A80               	xorlw	128
  6342  06D1  00FF               	movwf	127
  6343  06D2  3080               	movlw	128
  6344  06D3  027F               	subwf	127,w
  6345  06D4  1D03               	skipz
  6346  06D5  2ED8               	goto	u1265
  6347  06D6  300D               	movlw	13
  6348  06D7  0233               	subwf	FindChannel@i,w
  6349  06D8                     u1265:	
  6350  06D8  1803               	btfsc	3,0
  6351  06D9  2FAC               	goto	l2401
  6352  06DA                     l2377:	
  6353                           
  6354                           ;functions.c: 593: {
  6355                           ;functions.c: 594: RegisterSet(0x06,ChannelR[i]);
  6356  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  6357  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  6358  06DC  0833               	movf	FindChannel@i,w
  6359  06DD  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  6360  06DE  0084               	movwf	4
  6361  06DF  120A  158A  2000  120A  118A  	fcall	stringdir
  6362  06E4  00AE               	movwf	??_FindChannel
  6363  06E5  082E               	movf	??_FindChannel,w
  6364  06E6  00A7               	movwf	RegisterSet@value
  6365  06E7  3006               	movlw	6
  6366  06E8  160A  118A  26F5  120A  118A  	fcall	_RegisterSet
  6367                           
  6368                           ;functions.c: 595: RegisterSet(0x07,ChannelP[i]);
  6369  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  6370  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  6371  06EF  0833               	movf	FindChannel@i,w
  6372  06F0  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  6373  06F1  0084               	movwf	4
  6374  06F2  120A  158A  2000  120A  118A  	fcall	stringdir
  6375  06F7  00AE               	movwf	??_FindChannel
  6376  06F8  082E               	movf	??_FindChannel,w
  6377  06F9  00A7               	movwf	RegisterSet@value
  6378  06FA  3007               	movlw	7
  6379  06FB  160A  118A  26F5  120A  118A  	fcall	_RegisterSet
  6380                           
  6381                           ;functions.c: 596: RegisterSet(0x08,ChannelS[i]);
  6382  0700  1283               	bcf	3,5	;RP0=0, select bank0
  6383  0701  1303               	bcf	3,6	;RP1=0, select bank0
  6384  0702  0833               	movf	FindChannel@i,w
  6385  0703  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  6386  0704  0084               	movwf	4
  6387  0705  120A  158A  2000  120A  118A  	fcall	stringdir
  6388  070A  00AE               	movwf	??_FindChannel
  6389  070B  082E               	movf	??_FindChannel,w
  6390  070C  00A7               	movwf	RegisterSet@value
  6391  070D  3008               	movlw	8
  6392  070E  160A  118A  26F5  120A  118A  	fcall	_RegisterSet
  6393                           
  6394                           ;functions.c: 597: RegisterSet(0x09,ChannelR[i]);
  6395  0713  1283               	bcf	3,5	;RP0=0, select bank0
  6396  0714  1303               	bcf	3,6	;RP1=0, select bank0
  6397  0715  0833               	movf	FindChannel@i,w
  6398  0716  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  6399  0717  0084               	movwf	4
  6400  0718  120A  158A  2000  120A  118A  	fcall	stringdir
  6401  071D  00AE               	movwf	??_FindChannel
  6402  071E  082E               	movf	??_FindChannel,w
  6403  071F  00A7               	movwf	RegisterSet@value
  6404  0720  3009               	movlw	9
  6405  0721  160A  118A  26F5  120A  118A  	fcall	_RegisterSet
  6406                           
  6407                           ;functions.c: 598: RegisterSet(0x0A,ChannelP[i]);
  6408  0726  1283               	bcf	3,5	;RP0=0, select bank0
  6409  0727  1303               	bcf	3,6	;RP1=0, select bank0
  6410  0728  0833               	movf	FindChannel@i,w
  6411  0729  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  6412  072A  0084               	movwf	4
  6413  072B  120A  158A  2000  120A  118A  	fcall	stringdir
  6414  0730  00AE               	movwf	??_FindChannel
  6415  0731  082E               	movf	??_FindChannel,w
  6416  0732  00A7               	movwf	RegisterSet@value
  6417  0733  300A               	movlw	10
  6418  0734  160A  118A  26F5  120A  118A  	fcall	_RegisterSet
  6419                           
  6420                           ;functions.c: 599: RegisterSet(0x0B,ChannelS[i]);
  6421  0739  1283               	bcf	3,5	;RP0=0, select bank0
  6422  073A  1303               	bcf	3,6	;RP1=0, select bank0
  6423  073B  0833               	movf	FindChannel@i,w
  6424  073C  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  6425  073D  0084               	movwf	4
  6426  073E  120A  158A  2000  120A  118A  	fcall	stringdir
  6427  0743  00AE               	movwf	??_FindChannel
  6428  0744  082E               	movf	??_FindChannel,w
  6429  0745  00A7               	movwf	RegisterSet@value
  6430  0746  300B               	movlw	11
  6431  0747  160A  118A  26F5  120A  118A  	fcall	_RegisterSet
  6432                           
  6433                           ;functions.c: 600: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  6434  074C  300E               	movlw	14
  6435  074D  160A  118A  2729  120A  118A  	fcall	_RegisterRead
  6436  0752  3802               	iorlw	2
  6437  0753  1283               	bcf	3,5	;RP0=0, select bank0
  6438  0754  1303               	bcf	3,6	;RP1=0, select bank0
  6439  0755  00AE               	movwf	??_FindChannel
  6440  0756  082E               	movf	??_FindChannel,w
  6441  0757  00A7               	movwf	RegisterSet@value
  6442  0758  300E               	movlw	14
  6443  0759  160A  118A  26F5  120A  118A  	fcall	_RegisterSet
  6444                           
  6445                           ;functions.c: 601: SetRFMode(0x40);
  6446  075E  3040               	movlw	64
  6447  075F  120A  158A  237F  120A  118A  	fcall	_SetRFMode
  6448                           
  6449                           ;functions.c: 602: cnt = 0;
  6450  0764  1283               	bcf	3,5	;RP0=0, select bank0
  6451  0765  1303               	bcf	3,6	;RP1=0, select bank0
  6452  0766  01B1               	clrf	FindChannel@cnt
  6453  0767  01B2               	clrf	FindChannel@cnt+1
  6454  0768                     l2395:	
  6455                           ;functions.c: 603: while(cnt < 5)
  6456                           
  6457  0768  1283               	bcf	3,5	;RP0=0, select bank0
  6458  0769  1303               	bcf	3,6	;RP1=0, select bank0
  6459  076A  0832               	movf	FindChannel@cnt+1,w
  6460  076B  3A80               	xorlw	128
  6461  076C  00FF               	movwf	127
  6462  076D  3080               	movlw	128
  6463  076E  027F               	subwf	127,w
  6464  076F  1D03               	skipz
  6465  0770  2F73               	goto	u1285
  6466  0771  3005               	movlw	5
  6467  0772  0231               	subwf	FindChannel@cnt,w
  6468  0773                     u1285:	
  6469  0773  1803               	btfsc	3,0
  6470  0774  2F99               	goto	l2397
  6471                           
  6472                           ;functions.c: 604: {
  6473                           ;functions.c: 606: if((RegisterRead(0x0E) & 0b00000010) != 0)
  6474  0775  300E               	movlw	14
  6475  0776  160A  118A  2729  120A  118A  	fcall	_RegisterRead
  6476  077B  3902               	andlw	2
  6477  077C  1903               	btfsc	3,2
  6478  077D  2F88               	goto	l2393
  6479                           
  6480                           ;functions.c: 607: {
  6481                           ;functions.c: 608: bChannelFound = 1;
  6482  077E  1283               	bcf	3,5	;RP0=0, select bank0
  6483  077F  1303               	bcf	3,6	;RP1=0, select bank0
  6484  0780  01E7               	clrf	_bChannelFound
  6485  0781  0AE7               	incf	_bChannelFound,f
  6486                           
  6487                           ;functions.c: 609: channelFound = i;
  6488  0782  0834               	movf	FindChannel@i+1,w
  6489  0783  00DC               	movwf	_channelFound+1
  6490  0784  0833               	movf	FindChannel@i,w
  6491  0785  00DB               	movwf	_channelFound
  6492                           
  6493                           ;functions.c: 610: return 1;
  6494  0786  3001               	movlw	1
  6495  0787  0008               	return
  6496  0788                     l2393:	
  6497                           
  6498                           ;functions.c: 611: }
  6499                           ;functions.c: 612: cnt++;
  6500  0788  3001               	movlw	1
  6501  0789  1283               	bcf	3,5	;RP0=0, select bank0
  6502  078A  1303               	bcf	3,6	;RP1=0, select bank0
  6503  078B  07B1               	addwf	FindChannel@cnt,f
  6504  078C  1803               	skipnc
  6505  078D  0AB2               	incf	FindChannel@cnt+1,f
  6506  078E  3000               	movlw	0
  6507  078F  07B2               	addwf	FindChannel@cnt+1,f
  6508                           
  6509                           ;functions.c: 613: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  6510  0790  30C7               	movlw	199
  6511  0791  1283               	bcf	3,5	;RP0=0, select bank0
  6512  0792  1303               	bcf	3,6	;RP1=0, select bank0
  6513  0793  00AE               	movwf	??_FindChannel
  6514  0794                     u2607:	
  6515  0794  2F95               	nop2
  6516  0795  0BAE               	decfsz	??_FindChannel,f
  6517  0796  2F94               	goto	u2607
  6518  0797  2F98               	nop2
  6519  0798  2F68               	goto	l2395
  6520  0799                     l2397:	
  6521  0799  3001               	movlw	1
  6522  079A  1283               	bcf	3,5	;RP0=0, select bank0
  6523  079B  1303               	bcf	3,6	;RP1=0, select bank0
  6524  079C  07B3               	addwf	FindChannel@i,f
  6525  079D  1803               	skipnc
  6526  079E  0AB4               	incf	FindChannel@i+1,f
  6527  079F  3000               	movlw	0
  6528  07A0  07B4               	addwf	FindChannel@i+1,f
  6529  07A1  0834               	movf	FindChannel@i+1,w
  6530  07A2  3A80               	xorlw	128
  6531  07A3  00FF               	movwf	127
  6532  07A4  3080               	movlw	128
  6533  07A5  027F               	subwf	127,w
  6534  07A6  1D03               	skipz
  6535  07A7  2FAA               	goto	u1295
  6536  07A8  300D               	movlw	13
  6537  07A9  0233               	subwf	FindChannel@i,w
  6538  07AA                     u1295:	
  6539  07AA  1C03               	skipc
  6540  07AB  2EDA               	goto	l2377
  6541  07AC                     l2401:	
  6542                           
  6543                           ;functions.c: 614: }
  6544                           ;functions.c: 617: }
  6545                           ;functions.c: 618: return 0;
  6546  07AC  3000               	movlw	0
  6547  07AD  0008               	return
  6548  07AE                     __end_of_FindChannel:	
  6549                           
  6550                           	psect	text30
  6551  0B7F                     __ptext30:	
  6552 ;; *************** function _SetRFMode *****************
  6553 ;; Defined at:
  6554 ;;		line 640 in file "functions.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  mode            1    wreg     unsigned char 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  mode            1   12[BANK0 ] unsigned char 
  6559 ;;  mcparam0_rea    1   13[BANK0 ] unsigned char 
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6569 ;;      Params:         0       0       0       0       0
  6570 ;;      Locals:         0       2       0       0       0
  6571 ;;      Temps:          0       1       0       0       0
  6572 ;;      Totals:         0       3       0       0       0
  6573 ;;Total ram usage:        3 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:    5
  6576 ;; This function calls:
  6577 ;;		_RegisterRead
  6578 ;;		_RegisterSet
  6579 ;; This function is called by:
  6580 ;;		_TransiverToReceive
  6581 ;;		_TransiverReadFIFO
  6582 ;;		_TransmittPacket
  6583 ;;		_TransiverInit
  6584 ;;		_FindChannel
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           
  6589                           ;psect for function _SetRFMode
  6590  0B7F                     _SetRFMode:	
  6591                           
  6592                           ;incstack = 0
  6593                           ; Regs used in _SetRFMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6594                           ;SetRFMode@mode stored from wreg
  6595  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
  6596  0B80  1303               	bcf	3,6	;RP1=0, select bank0
  6597  0B81  00AC               	movwf	SetRFMode@mode
  6598                           
  6599                           ;functions.c: 642: RA4 = 0;
  6600  0B82  1205               	bcf	5,4	;volatile
  6601                           
  6602                           ;functions.c: 643: BYTE mcparam0_read;
  6603                           ;functions.c: 644: mcparam0_read = RegisterRead(0);
  6604  0B83  3000               	movlw	0
  6605  0B84  160A  118A  2729  120A  158A  	fcall	_RegisterRead
  6606  0B89  1283               	bcf	3,5	;RP0=0, select bank0
  6607  0B8A  1303               	bcf	3,6	;RP1=0, select bank0
  6608  0B8B  00AB               	movwf	??_SetRFMode
  6609  0B8C  082B               	movf	??_SetRFMode,w
  6610  0B8D  00AD               	movwf	SetRFMode@mcparam0_read
  6611                           
  6612                           ;functions.c: 645: switch (mode) {
  6613  0B8E  2BD7               	goto	l2361
  6614  0B8F                     l2349:	
  6615                           ;functions.c: 646: case 0x80:
  6616                           
  6617                           
  6618                           ;functions.c: 647: RegisterSet(0, (mcparam0_read & 0x1F) | 0x80);
  6619  0B8F  082D               	movf	SetRFMode@mcparam0_read,w
  6620  0B90  391F               	andlw	31
  6621  0B91  3880               	iorlw	128
  6622  0B92  00AB               	movwf	??_SetRFMode
  6623  0B93  082B               	movf	??_SetRFMode,w
  6624  0B94  00A7               	movwf	RegisterSet@value
  6625  0B95  3000               	movlw	0
  6626  0B96  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  6627                           
  6628                           ;functions.c: 649: break;
  6629  0B9B  2BEA               	goto	l435
  6630  0B9C                     l2351:	
  6631                           ;functions.c: 650: case 0x60:
  6632                           
  6633                           
  6634                           ;functions.c: 651: RegisterSet(0, (mcparam0_read & 0x1F) | 0x60);
  6635  0B9C  1283               	bcf	3,5	;RP0=0, select bank0
  6636  0B9D  1303               	bcf	3,6	;RP1=0, select bank0
  6637  0B9E  082D               	movf	SetRFMode@mcparam0_read,w
  6638  0B9F  391F               	andlw	31
  6639  0BA0  3860               	iorlw	96
  6640  0BA1  00AB               	movwf	??_SetRFMode
  6641  0BA2  082B               	movf	??_SetRFMode,w
  6642  0BA3  00A7               	movwf	RegisterSet@value
  6643  0BA4  3000               	movlw	0
  6644  0BA5  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  6645                           
  6646                           ;functions.c: 653: break;
  6647  0BAA  2BEA               	goto	l435
  6648  0BAB                     l2353:	
  6649                           ;functions.c: 654: case 0x40:
  6650                           
  6651                           
  6652                           ;functions.c: 655: RegisterSet(0, (mcparam0_read & 0x1F) | 0x40);
  6653  0BAB  1283               	bcf	3,5	;RP0=0, select bank0
  6654  0BAC  1303               	bcf	3,6	;RP1=0, select bank0
  6655  0BAD  082D               	movf	SetRFMode@mcparam0_read,w
  6656  0BAE  391F               	andlw	31
  6657  0BAF  3840               	iorlw	64
  6658  0BB0  00AB               	movwf	??_SetRFMode
  6659  0BB1  082B               	movf	??_SetRFMode,w
  6660  0BB2  00A7               	movwf	RegisterSet@value
  6661  0BB3  3000               	movlw	0
  6662  0BB4  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  6663                           
  6664                           ;functions.c: 657: break;
  6665  0BB9  2BEA               	goto	l435
  6666  0BBA                     l2355:	
  6667                           ;functions.c: 658: case 0x20:
  6668                           
  6669                           
  6670                           ;functions.c: 659: RegisterSet(0, (mcparam0_read & 0x1F) | 0x20);
  6671  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
  6672  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
  6673  0BBC  082D               	movf	SetRFMode@mcparam0_read,w
  6674  0BBD  391F               	andlw	31
  6675  0BBE  3820               	iorlw	32
  6676  0BBF  00AB               	movwf	??_SetRFMode
  6677  0BC0  082B               	movf	??_SetRFMode,w
  6678  0BC1  00A7               	movwf	RegisterSet@value
  6679  0BC2  3000               	movlw	0
  6680  0BC3  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  6681                           
  6682                           ;functions.c: 661: break;
  6683  0BC8  2BEA               	goto	l435
  6684  0BC9                     l2357:	
  6685                           ;functions.c: 662: case 0x00:
  6686                           
  6687                           
  6688                           ;functions.c: 663: RegisterSet(0, (mcparam0_read & 0x1F) | 0x00);
  6689  0BC9  1283               	bcf	3,5	;RP0=0, select bank0
  6690  0BCA  1303               	bcf	3,6	;RP1=0, select bank0
  6691  0BCB  082D               	movf	SetRFMode@mcparam0_read,w
  6692  0BCC  391F               	andlw	31
  6693  0BCD  00AB               	movwf	??_SetRFMode
  6694  0BCE  082B               	movf	??_SetRFMode,w
  6695  0BCF  00A7               	movwf	RegisterSet@value
  6696  0BD0  3000               	movlw	0
  6697  0BD1  160A  118A  26F5  120A  158A  	fcall	_RegisterSet
  6698                           
  6699                           ;functions.c: 666: }
  6700                           
  6701                           ;functions.c: 665: break;
  6702  0BD6  2BEA               	goto	l435
  6703  0BD7                     l2361:	
  6704  0BD7  1283               	bcf	3,5	;RP0=0, select bank0
  6705  0BD8  1303               	bcf	3,6	;RP1=0, select bank0
  6706  0BD9  082C               	movf	SetRFMode@mode,w
  6707                           
  6708                           ; Switch size 1, requested type "space"
  6709                           ; Number of cases is 5, Range of values is 0 to 128
  6710                           ; switch strategies available:
  6711                           ; Name         Instructions Cycles
  6712                           ; simple_byte           16     9 (average)
  6713                           ; jumptable            260     6 (fixed)
  6714                           ;	Chosen strategy is simple_byte
  6715  0BDA  3A00               	xorlw	0	; case 0
  6716  0BDB  1903               	skipnz
  6717  0BDC  2BC9               	goto	l2357
  6718  0BDD  3A20               	xorlw	32	; case 32
  6719  0BDE  1903               	skipnz
  6720  0BDF  2BBA               	goto	l2355
  6721  0BE0  3A60               	xorlw	96	; case 64
  6722  0BE1  1903               	skipnz
  6723  0BE2  2BAB               	goto	l2353
  6724  0BE3  3A20               	xorlw	32	; case 96
  6725  0BE4  1903               	skipnz
  6726  0BE5  2B9C               	goto	l2351
  6727  0BE6  3AE0               	xorlw	224	; case 128
  6728  0BE7  1903               	skipnz
  6729  0BE8  2B8F               	goto	l2349
  6730  0BE9  2BEA               	goto	l435
  6731  0BEA                     l435:	
  6732                           
  6733                           ;functions.c: 667: RA4 = 1;
  6734  0BEA  1283               	bcf	3,5	;RP0=0, select bank0
  6735  0BEB  1303               	bcf	3,6	;RP1=0, select bank0
  6736  0BEC  1605               	bsf	5,4	;volatile
  6737  0BED  0008               	return
  6738  0BEE                     __end_of_SetRFMode:	
  6739                           
  6740                           	psect	text31
  6741  16F5                     __ptext31:	
  6742 ;; *************** function _RegisterSet *****************
  6743 ;; Defined at:
  6744 ;;		line 749 in file "functions.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  adress          1    wreg     unsigned char 
  6747 ;;  value           1    7[BANK0 ] unsigned char 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  adress          1   10[BANK0 ] unsigned char 
  6750 ;; Return value:  Size  Location     Type
  6751 ;;                  1    wreg      void 
  6752 ;; Registers used:
  6753 ;;		wreg, status,2, status,0, pclath, cstack
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6759 ;;      Params:         0       1       0       0       0
  6760 ;;      Locals:         0       1       0       0       0
  6761 ;;      Temps:          0       2       0       0       0
  6762 ;;      Totals:         0       4       0       0       0
  6763 ;;Total ram usage:        4 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    3
  6766 ;; This function calls:
  6767 ;;		_WriteSPI
  6768 ;; This function is called by:
  6769 ;;		_TransiverToReceive
  6770 ;;		_TransmittPacket
  6771 ;;		_TransiverInit
  6772 ;;		_FindChannel
  6773 ;;		_SetRFMode
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _RegisterSet
  6779  16F5                     _RegisterSet:	
  6780                           
  6781                           ;incstack = 0
  6782                           ; Regs used in _RegisterSet: [wreg+status,2+status,0+pclath+cstack]
  6783                           ;RegisterSet@adress stored from wreg
  6784  16F5  1283               	bcf	3,5	;RP0=0, select bank0
  6785  16F6  1303               	bcf	3,6	;RP1=0, select bank0
  6786  16F7  00AA               	movwf	RegisterSet@adress
  6787                           
  6788                           ;functions.c: 751: RA4 = 0;
  6789  16F8  1205               	bcf	5,4	;volatile
  6790                           
  6791                           ;functions.c: 752: adress = (adress<<1);
  6792  16F9  082A               	movf	RegisterSet@adress,w
  6793  16FA  00A8               	movwf	??_RegisterSet
  6794  16FB  0728               	addwf	??_RegisterSet,w
  6795  16FC  00A9               	movwf	??_RegisterSet+1
  6796  16FD  0829               	movf	??_RegisterSet+1,w
  6797  16FE  00AA               	movwf	RegisterSet@adress
  6798                           
  6799                           ;functions.c: 753: WriteSPI(adress);
  6800  16FF  082A               	movf	RegisterSet@adress,w
  6801  1700  160A  118A  264F  160A  118A  	fcall	_WriteSPI
  6802                           
  6803                           ;functions.c: 754: WriteSPI(value);
  6804  1705  1283               	bcf	3,5	;RP0=0, select bank0
  6805  1706  1303               	bcf	3,6	;RP1=0, select bank0
  6806  1707  0827               	movf	RegisterSet@value,w
  6807  1708  160A  118A  264F   	fcall	_WriteSPI
  6808                           
  6809                           ;functions.c: 755: RA4 = 1;
  6810  170B  1283               	bcf	3,5	;RP0=0, select bank0
  6811  170C  1303               	bcf	3,6	;RP1=0, select bank0
  6812  170D  1605               	bsf	5,4	;volatile
  6813  170E  0008               	return
  6814  170F                     __end_of_RegisterSet:	
  6815                           
  6816                           	psect	text32
  6817  1729                     __ptext32:	
  6818 ;; *************** function _RegisterRead *****************
  6819 ;; Defined at:
  6820 ;;		line 719 in file "functions.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;  adress          1    wreg     unsigned char 
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;  adress          1    6[BANK0 ] unsigned char 
  6825 ;;  value           1    5[BANK0 ] unsigned char 
  6826 ;; Return value:  Size  Location     Type
  6827 ;;                  1    wreg      unsigned char 
  6828 ;; Registers used:
  6829 ;;		wreg, status,2, status,0, pclath, cstack
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6835 ;;      Params:         0       0       0       0       0
  6836 ;;      Locals:         0       2       0       0       0
  6837 ;;      Temps:          0       2       0       0       0
  6838 ;;      Totals:         0       4       0       0       0
  6839 ;;Total ram usage:        4 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    4
  6842 ;; This function calls:
  6843 ;;		_ReadSPI
  6844 ;;		_WriteSPI
  6845 ;; This function is called by:
  6846 ;;		_TransiverToReceive
  6847 ;;		_TransmittPacket
  6848 ;;		_TransiverInit
  6849 ;;		_FindChannel
  6850 ;;		_SetRFMode
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function _RegisterRead
  6856  1729                     _RegisterRead:	
  6857                           
  6858                           ;incstack = 0
  6859                           ; Regs used in _RegisterRead: [wreg+status,2+status,0+pclath+cstack]
  6860                           ;RegisterRead@adress stored from wreg
  6861  1729  1283               	bcf	3,5	;RP0=0, select bank0
  6862  172A  1303               	bcf	3,6	;RP1=0, select bank0
  6863  172B  00A6               	movwf	RegisterRead@adress
  6864                           
  6865                           ;functions.c: 721: BYTE value;
  6866                           ;functions.c: 722: RA4 = 0;
  6867  172C  1205               	bcf	5,4	;volatile
  6868                           
  6869                           ;functions.c: 723: adress = ((adress<<1)|0x40);
  6870  172D  0826               	movf	RegisterRead@adress,w
  6871  172E  00A3               	movwf	??_RegisterRead
  6872  172F  0723               	addwf	??_RegisterRead,w
  6873  1730  3840               	iorlw	64
  6874  1731  00A4               	movwf	??_RegisterRead+1
  6875  1732  0824               	movf	??_RegisterRead+1,w
  6876  1733  00A6               	movwf	RegisterRead@adress
  6877                           
  6878                           ;functions.c: 724: WriteSPI(adress);
  6879  1734  0826               	movf	RegisterRead@adress,w
  6880  1735  160A  118A  264F  160A  118A  	fcall	_WriteSPI
  6881                           
  6882                           ;functions.c: 725: value = ReadSPI();
  6883  173A  160A  118A  262D   	fcall	_ReadSPI
  6884  173D  1283               	bcf	3,5	;RP0=0, select bank0
  6885  173E  1303               	bcf	3,6	;RP1=0, select bank0
  6886  173F  00A3               	movwf	??_RegisterRead
  6887  1740  0823               	movf	??_RegisterRead,w
  6888  1741  00A5               	movwf	RegisterRead@value
  6889                           
  6890                           ;functions.c: 726: RA4 = 1;
  6891  1742  1605               	bsf	5,4	;volatile
  6892                           
  6893                           ;functions.c: 727: return value;
  6894  1743  0825               	movf	RegisterRead@value,w
  6895  1744  0008               	return
  6896  1745                     __end_of_RegisterRead:	
  6897                           
  6898                           	psect	text33
  6899  083D                     __ptext33:	
  6900 ;; *************** function _Mode_2 *****************
  6901 ;; Defined at:
  6902 ;;		line 298 in file "functions.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;		None
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;		None
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6916 ;;      Params:         0       0       0       0       0
  6917 ;;      Locals:         0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0
  6919 ;;      Totals:         0       0       0       0       0
  6920 ;;Total ram usage:        0 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    6
  6923 ;; This function calls:
  6924 ;;		_LightWithSensController
  6925 ;; This function is called by:
  6926 ;;		_main
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           
  6931                           ;psect for function _Mode_2
  6932  083D                     _Mode_2:	
  6933                           
  6934                           ;functions.c: 300: LightWithSensController();
  6935                           
  6936                           ;incstack = 0
  6937                           ; Regs used in _Mode_2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6938  083D  120A  158A  2131  120A  158A  	fcall	_LightWithSensController
  6939                           
  6940                           ;functions.c: 301: if(RC2)
  6941  0842  1283               	bcf	3,5	;RP0=0, select bank0
  6942  0843  1303               	bcf	3,6	;RP1=0, select bank0
  6943  0844  1D07               	btfss	7,2	;volatile
  6944  0845  2848               	goto	l362
  6945                           
  6946                           ;functions.c: 302: RC1 = 1;
  6947  0846  1487               	bsf	7,1	;volatile
  6948  0847  0008               	return
  6949  0848                     l362:	
  6950                           
  6951                           ;functions.c: 303: else
  6952                           ;functions.c: 304: RC1 = 0;
  6953  0848  1087               	bcf	7,1	;volatile
  6954  0849  0008               	return
  6955  084A                     __end_of_Mode_2:	
  6956                           
  6957                           	psect	text34
  6958  16DB                     __ptext34:	
  6959 ;; *************** function _Mode_1 *****************
  6960 ;; Defined at:
  6961 ;;		line 284 in file "functions.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;		None
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;		None
  6966 ;; Return value:  Size  Location     Type
  6967 ;;                  1    wreg      void 
  6968 ;; Registers used:
  6969 ;;		wreg, status,2, status,0, pclath, cstack
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6975 ;;      Params:         0       0       0       0       0
  6976 ;;      Locals:         0       0       0       0       0
  6977 ;;      Temps:          0       0       0       0       0
  6978 ;;      Totals:         0       0       0       0       0
  6979 ;;Total ram usage:        0 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; Hardware stack levels required when called:    5
  6982 ;; This function calls:
  6983 ;;		_DarknessCheck
  6984 ;; This function is called by:
  6985 ;;		_main
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           
  6990                           ;psect for function _Mode_1
  6991  16DB                     _Mode_1:	
  6992                           
  6993                           ;functions.c: 287: if((intSecondCounter == 30)&&(!RC2))
  6994                           
  6995                           ;incstack = 0
  6996                           ; Regs used in _Mode_1: [wreg+status,2+status,0+pclath+cstack]
  6997  16DB  301E               	movlw	30
  6998  16DC  1283               	bcf	3,5	;RP0=0, select bank0
  6999  16DD  1303               	bcf	3,6	;RP1=0, select bank0
  7000  16DE  0665               	xorwf	_intSecondCounter,w
  7001  16DF  0466               	iorwf	_intSecondCounter+1,w
  7002  16E0  1903               	btfsc	3,2
  7003  16E1  1907               	btfsc	7,2	;volatile
  7004  16E2  2EE8               	goto	l3071
  7005                           
  7006                           ;functions.c: 288: DarknessCheck();
  7007  16E3  160A  118A  27AE  160A  118A  	fcall	_DarknessCheck
  7008  16E8                     l3071:	
  7009                           
  7010                           ;functions.c: 289: if((intBlinkCycle == 1)&&(bDark == 1))
  7011  16E8  1283               	bcf	3,5	;RP0=0, select bank0
  7012  16E9  1303               	bcf	3,6	;RP1=0, select bank0
  7013  16EA  035D               	decf	_intBlinkCycle,w
  7014  16EB  045E               	iorwf	_intBlinkCycle+1,w
  7015  16EC  1D03               	btfss	3,2
  7016  16ED  2EF3               	goto	l357
  7017  16EE  0368               	decf	_bDark,w
  7018  16EF  1D03               	btfss	3,2
  7019  16F0  2EF3               	goto	l357
  7020                           
  7021                           ;functions.c: 290: RC2 = 1;
  7022  16F1  1507               	bsf	7,2	;volatile
  7023  16F2  0008               	return
  7024  16F3                     l357:	
  7025                           
  7026                           ;functions.c: 291: else
  7027                           ;functions.c: 292: RC2 = 0;
  7028  16F3  1107               	bcf	7,2	;volatile
  7029  16F4  0008               	return
  7030  16F5                     __end_of_Mode_1:	
  7031                           
  7032                           	psect	text35
  7033  1629                     __ptext35:	
  7034 ;; *************** function _Mode_0 *****************
  7035 ;; Defined at:
  7036 ;;		line 276 in file "functions.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;		None
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;		None
  7041 ;; Return value:  Size  Location     Type
  7042 ;;                  1    wreg      void 
  7043 ;; Registers used:
  7044 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7050 ;;      Params:         0       0       0       0       0
  7051 ;;      Locals:         0       0       0       0       0
  7052 ;;      Temps:          0       0       0       0       0
  7053 ;;      Totals:         0       0       0       0       0
  7054 ;;Total ram usage:        0 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:    6
  7057 ;; This function calls:
  7058 ;;		_LightWithSensController
  7059 ;; This function is called by:
  7060 ;;		_main
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           
  7065                           ;psect for function _Mode_0
  7066  1629                     _Mode_0:	
  7067                           
  7068                           ;functions.c: 278: LightWithSensController();
  7069                           
  7070                           ;incstack = 0
  7071                           ; Regs used in _Mode_0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7072  1629  120A  158A  2131   	fcall	_LightWithSensController
  7073  162C  0008               	return
  7074  162D                     __end_of_Mode_0:	
  7075                           
  7076                           	psect	text36
  7077  0931                     __ptext36:	
  7078 ;; *************** function _LightWithSensController *****************
  7079 ;; Defined at:
  7080 ;;		line 342 in file "functions.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;		None
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;		None
  7085 ;; Return value:  Size  Location     Type
  7086 ;;                  1    wreg      void 
  7087 ;; Registers used:
  7088 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7094 ;;      Params:         0       0       0       0       0
  7095 ;;      Locals:         0       0       0       0       0
  7096 ;;      Temps:          0       0       0       0       0
  7097 ;;      Totals:         0       0       0       0       0
  7098 ;;Total ram usage:        0 bytes
  7099 ;; Hardware stack levels used:    1
  7100 ;; Hardware stack levels required when called:    5
  7101 ;; This function calls:
  7102 ;;		_DarknessCheck
  7103 ;;		_timerFunction
  7104 ;; This function is called by:
  7105 ;;		_Mode_0
  7106 ;;		_Mode_2
  7107 ;;		_Mode_4
  7108 ;;		_Mode_5
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           
  7113                           ;psect for function _LightWithSensController
  7114  0931                     _LightWithSensController:	
  7115                           
  7116                           ;functions.c: 346: if((intSecondCounter == 30)&&(!RC2))
  7117                           
  7118                           ;incstack = 0
  7119                           ; Regs used in _LightWithSensController: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7120  0931  301E               	movlw	30
  7121  0932  1283               	bcf	3,5	;RP0=0, select bank0
  7122  0933  1303               	bcf	3,6	;RP1=0, select bank0
  7123  0934  0665               	xorwf	_intSecondCounter,w
  7124  0935  0466               	iorwf	_intSecondCounter+1,w
  7125  0936  1903               	btfsc	3,2
  7126  0937  1907               	btfsc	7,2	;volatile
  7127  0938  293E               	goto	l2827
  7128                           
  7129                           ;functions.c: 347: DarknessCheck();
  7130  0939  160A  118A  27AE  120A  158A  	fcall	_DarknessCheck
  7131  093E                     l2827:	
  7132                           
  7133                           ;functions.c: 351: if((bDark == 1)&&(RA1)&&(!RC2))
  7134  093E  1283               	bcf	3,5	;RP0=0, select bank0
  7135  093F  1303               	bcf	3,6	;RP1=0, select bank0
  7136  0940  0368               	decf	_bDark,w
  7137  0941  1903               	btfsc	3,2
  7138  0942  1C85               	btfss	5,1	;volatile
  7139  0943  2953               	goto	l2837
  7140  0944  1907               	btfsc	7,2	;volatile
  7141  0945  2953               	goto	l2837
  7142                           
  7143                           ;functions.c: 352: {
  7144                           ;functions.c: 354: RC2 = 1;
  7145  0946  1507               	bsf	7,2	;volatile
  7146                           
  7147                           ;functions.c: 356: timerFunction(0,120);
  7148  0947  3000               	movlw	0
  7149  0948  00A0               	movwf	timerFunction@intTimerNumber
  7150  0949  00A1               	movwf	timerFunction@intTimerNumber+1
  7151  094A  3078               	movlw	120
  7152  094B  00A2               	movwf	timerFunction@intSetSeconds
  7153  094C  3000               	movlw	0
  7154  094D  00A3               	movwf	timerFunction@intSetSeconds+1
  7155  094E  160A  118A  267B  120A  158A  	fcall	_timerFunction
  7156  0953                     l2837:	
  7157                           
  7158                           ;functions.c: 357: }
  7159                           ;functions.c: 360: if(bTimerComplete[0])
  7160  0953  1283               	bcf	3,5	;RP0=0, select bank0
  7161  0954  1303               	bcf	3,6	;RP1=0, select bank0
  7162  0955  0856               	movf	_bTimerComplete,w
  7163  0956  1903               	btfsc	3,2
  7164  0957  0008               	return
  7165                           
  7166                           ;functions.c: 361: {
  7167                           ;functions.c: 362: DarknessCheck();
  7168  0958  160A  118A  27AE  120A  158A  	fcall	_DarknessCheck
  7169                           
  7170                           ;functions.c: 363: if((bDark)&&(RA1))
  7171  095D  1283               	bcf	3,5	;RP0=0, select bank0
  7172  095E  1303               	bcf	3,6	;RP1=0, select bank0
  7173  095F  0868               	movf	_bDark,w
  7174  0960  1D03               	btfss	3,2
  7175  0961  1C85               	btfss	5,1	;volatile
  7176  0962  296E               	goto	l381
  7177                           
  7178                           ;functions.c: 364: {
  7179                           ;functions.c: 365: timerFunction(0,120);
  7180  0963  3000               	movlw	0
  7181  0964  00A0               	movwf	timerFunction@intTimerNumber
  7182  0965  00A1               	movwf	timerFunction@intTimerNumber+1
  7183  0966  3078               	movlw	120
  7184  0967  00A2               	movwf	timerFunction@intSetSeconds
  7185  0968  3000               	movlw	0
  7186  0969  00A3               	movwf	timerFunction@intSetSeconds+1
  7187  096A  160A  118A  267B   	fcall	_timerFunction
  7188                           
  7189                           ;functions.c: 366: }
  7190  096D  0008               	return
  7191  096E                     l381:	
  7192                           
  7193                           ;functions.c: 367: else
  7194                           ;functions.c: 368: RC2 = 0;
  7195  096E  1107               	bcf	7,2	;volatile
  7196  096F  0008               	return
  7197  0970                     __end_of_LightWithSensController:	
  7198                           
  7199                           	psect	text37
  7200  167B                     __ptext37:	
  7201 ;; *************** function _timerFunction *****************
  7202 ;; Defined at:
  7203 ;;		line 393 in file "functions.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  intTimerNumb    2    0[BANK0 ] int 
  7206 ;;  intSetSecond    2    2[BANK0 ] int 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;		None
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      unsigned char 
  7211 ;; Registers used:
  7212 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7218 ;;      Params:         0       4       0       0       0
  7219 ;;      Locals:         0       0       0       0       0
  7220 ;;      Temps:          0       1       0       0       0
  7221 ;;      Totals:         0       5       0       0       0
  7222 ;;Total ram usage:        5 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    2
  7225 ;; This function calls:
  7226 ;;		Nothing
  7227 ;; This function is called by:
  7228 ;;		_TransiverToReceive
  7229 ;;		_TransiverReadFIFO
  7230 ;;		_TransmittPacket
  7231 ;;		_LightWithSensController
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           
  7236                           ;psect for function _timerFunction
  7237  167B                     _timerFunction:	
  7238                           
  7239                           ;functions.c: 395: intClockTimer[intTimerNumber] = intSetSeconds;
  7240                           
  7241                           ;incstack = 0
  7242                           ; Regs used in _timerFunction: [wreg-fsr0h+status,2+status,0]
  7243  167B  1283               	bcf	3,5	;RP0=0, select bank0
  7244  167C  1303               	bcf	3,6	;RP1=0, select bank0
  7245  167D  0820               	movf	timerFunction@intTimerNumber,w
  7246  167E  00A4               	movwf	??_timerFunction
  7247  167F  0724               	addwf	??_timerFunction,w
  7248  1680  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  7249  1681  0084               	movwf	4
  7250  1682  0822               	movf	timerFunction@intSetSeconds,w
  7251  1683  1383               	bcf	3,7	;select IRP bank1
  7252  1684  0080               	movwf	0
  7253  1685  0A84               	incf	4,f
  7254  1686  0823               	movf	timerFunction@intSetSeconds+1,w
  7255  1687  0080               	movwf	0
  7256                           
  7257                           ;functions.c: 396: bTimerComplete[intTimerNumber] = 0;
  7258  1688  0820               	movf	timerFunction@intTimerNumber,w
  7259  1689  3E56               	addlw	(low (_bTimerComplete| 0))& (0+255)
  7260  168A  0084               	movwf	4
  7261  168B  0180               	clrf	0
  7262  168C  0008               	return
  7263  168D                     __end_of_timerFunction:	
  7264                           ;functions.c: 397: return 1;
  7265                           ;	Return value of _timerFunction is never used
  7266                           
  7267                           
  7268                           	psect	text38
  7269  17AE                     __ptext38:	
  7270 ;; *************** function _DarknessCheck *****************
  7271 ;; Defined at:
  7272 ;;		line 931 in file "functions.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;		None
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  darknessValu    1    9[BANK0 ] unsigned char 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg, status,2, status,0, pclath, cstack
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7286 ;;      Params:         0       0       0       0       0
  7287 ;;      Locals:         0       1       0       0       0
  7288 ;;      Temps:          0       1       0       0       0
  7289 ;;      Totals:         0       2       0       0       0
  7290 ;;Total ram usage:        2 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    4
  7293 ;; This function calls:
  7294 ;;		_AnalogValue
  7295 ;;		_eeprom_read
  7296 ;; This function is called by:
  7297 ;;		_ReceivedPacketHandler
  7298 ;;		_Mode_1
  7299 ;;		_LightWithSensController
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           
  7304                           ;psect for function _DarknessCheck
  7305  17AE                     _DarknessCheck:	
  7306                           
  7307                           ;functions.c: 933: unsigned char darknessValue;
  7308                           ;functions.c: 936: if(bValueFromPot == TRUE)
  7309                           
  7310                           ;incstack = 0
  7311                           ; Regs used in _DarknessCheck: [wreg+status,2+status,0+pclath+cstack]
  7312  17AE  1283               	bcf	3,5	;RP0=0, select bank0
  7313  17AF  1303               	bcf	3,6	;RP1=0, select bank0
  7314  17B0  036D               	decf	_bValueFromPot,w
  7315  17B1  1D03               	btfss	3,2
  7316  17B2  2FBA               	goto	l2611
  7317                           
  7318                           ;functions.c: 937: darknessValue= AnalogValue(3);
  7319  17B3  3003               	movlw	3
  7320  17B4  160A  118A  27D5  160A  118A  	fcall	_AnalogValue
  7321  17B9  2FC0               	goto	L3
  7322  17BA                     l2611:	
  7323                           
  7324                           ;functions.c: 938: else
  7325                           ;functions.c: 939: darknessValue=eeprom_read(0);
  7326  17BA  3000               	movlw	0
  7327  17BB  160A  118A  278A  160A  118A  	fcall	_eeprom_read
  7328  17C0                     L3:	
  7329  17C0  1283               	bcf	3,5	;RP0=0, select bank0
  7330  17C1  1303               	bcf	3,6	;RP1=0, select bank0
  7331  17C2  00A8               	movwf	??_DarknessCheck
  7332  17C3  0828               	movf	??_DarknessCheck,w
  7333  17C4  00A9               	movwf	DarknessCheck@darknessValue
  7334                           
  7335                           ;functions.c: 941: if(AnalogValue(0)>darknessValue)
  7336  17C5  3000               	movlw	0
  7337  17C6  160A  118A  27D5  160A  118A  	fcall	_AnalogValue
  7338  17CB  1283               	bcf	3,5	;RP0=0, select bank0
  7339  17CC  1303               	bcf	3,6	;RP1=0, select bank0
  7340  17CD  0229               	subwf	DarknessCheck@darknessValue,w
  7341  17CE  1803               	skipnc
  7342  17CF  2FD3               	goto	l2615
  7343                           
  7344                           ;functions.c: 942: bDark = 1;
  7345  17D0  01E8               	clrf	_bDark
  7346  17D1  0AE8               	incf	_bDark,f
  7347  17D2  0008               	return
  7348  17D3                     l2615:	
  7349                           
  7350                           ;functions.c: 943: else
  7351                           ;functions.c: 944: bDark = 0;
  7352  17D3  01E8               	clrf	_bDark
  7353  17D4  0008               	return
  7354  17D5                     __end_of_DarknessCheck:	
  7355                           
  7356                           	psect	text39
  7357  178A                     __ptext39:	
  7358 ;; *************** function _eeprom_read *****************
  7359 ;; Defined at:
  7360 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eeread.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;  addr            1    wreg     unsigned char 
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;  addr            1    1[BANK0 ] unsigned char 
  7365 ;; Return value:  Size  Location     Type
  7366 ;;                  1    wreg      unsigned char 
  7367 ;; Registers used:
  7368 ;;		wreg, status,2, status,0
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7374 ;;      Params:         0       0       0       0       0
  7375 ;;      Locals:         0       1       0       0       0
  7376 ;;      Temps:          0       1       0       0       0
  7377 ;;      Totals:         0       2       0       0       0
  7378 ;;Total ram usage:        2 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    2
  7381 ;; This function calls:
  7382 ;;		Nothing
  7383 ;; This function is called by:
  7384 ;;		_ReceivedPacketHandler
  7385 ;;		_DarknessCheck
  7386 ;;		_ReadMemoryAdress
  7387 ;;		_IncreaseMemoryAdress
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           
  7392                           ;psect for function _eeprom_read
  7393  178A                     _eeprom_read:	
  7394                           
  7395                           ;incstack = 0
  7396                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  7397                           ;eeprom_read@addr stored from wreg
  7398  178A  1283               	bcf	3,5	;RP0=0, select bank0
  7399  178B  1303               	bcf	3,6	;RP1=0, select bank0
  7400  178C  00A1               	movwf	eeprom_read@addr
  7401  178D  2F90               	goto	l675
  7402  178E                     u1311:	
  7403  178E  1283               	bcf	3,5	;RP0=0, select bank0
  7404  178F  1303               	bcf	3,6	;RP1=0, select bank0
  7405  1790                     l675:	
  7406  1790  0064               	clrwdt	;# 
  7407  1791  1683               	bsf	3,5	;RP0=1, select bank3
  7408  1792  1703               	bsf	3,6	;RP1=1, select bank3
  7409  1793  188C               	btfsc	12,1	;volsfr
  7410  1794  2F8E               	goto	u1311
  7411  1795  1283               	bcf	3,5	;RP0=0, select bank0
  7412  1796  1303               	bcf	3,6	;RP1=0, select bank0
  7413  1797  0821               	movf	eeprom_read@addr,w
  7414  1798  1283               	bcf	3,5	;RP0=0, select bank2
  7415  1799  1703               	bsf	3,6	;RP1=1, select bank2
  7416  179A  008D               	movwf	13	;volatile
  7417  179B  303F               	movlw	63
  7418  179C  1283               	bcf	3,5	;RP0=0, select bank0
  7419  179D  1303               	bcf	3,6	;RP1=0, select bank0
  7420  179E  00A0               	movwf	??_eeprom_read
  7421  179F  0820               	movf	??_eeprom_read,w
  7422  17A0  1683               	bsf	3,5	;RP0=1, select bank3
  7423  17A1  1703               	bsf	3,6	;RP1=1, select bank3
  7424  17A2  058C               	andwf	12,f	;volsfr
  7425  17A3  140C               	bsf	12,0	;volsfr
  7426  17A4  1003               	clrc
  7427  17A5  180C               	btfsc	12,0	;volsfr
  7428  17A6  1403               	setc
  7429  17A7  3000               	movlw	0
  7430  17A8  1803               	skipnc
  7431  17A9  3001               	movlw	1
  7432  17AA  1283               	bcf	3,5	;RP0=0, select bank2
  7433  17AB  1703               	bsf	3,6	;RP1=1, select bank2
  7434  17AC  080C               	movf	12,w	;volatile
  7435  17AD  0008               	return
  7436  17AE                     __end_of_eeprom_read:	
  7437                           
  7438                           	psect	text40
  7439  17D5                     __ptext40:	
  7440 ;; *************** function _AnalogValue *****************
  7441 ;; Defined at:
  7442 ;;		line 901 in file "functions.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;  channel         1    wreg     unsigned char 
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;  channel         1    7[BANK0 ] unsigned char 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  1    wreg      unsigned char 
  7449 ;; Registers used:
  7450 ;;		wreg, status,2, status,0, pclath, cstack
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7456 ;;      Params:         0       0       0       0       0
  7457 ;;      Locals:         0       1       0       0       0
  7458 ;;      Temps:          0       1       0       0       0
  7459 ;;      Totals:         0       2       0       0       0
  7460 ;;Total ram usage:        2 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:    3
  7463 ;; This function calls:
  7464 ;;		_DelayDs
  7465 ;; This function is called by:
  7466 ;;		_ReceivedPacketHandler
  7467 ;;		_DarknessCheck
  7468 ;;		_saveDataToFlash
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           
  7473                           ;psect for function _AnalogValue
  7474  17D5                     _AnalogValue:	
  7475                           
  7476                           ;incstack = 0
  7477                           ; Regs used in _AnalogValue: [wreg+status,2+status,0+pclath+cstack]
  7478                           ;AnalogValue@channel stored from wreg
  7479  17D5  1283               	bcf	3,5	;RP0=0, select bank0
  7480  17D6  1303               	bcf	3,6	;RP1=0, select bank0
  7481  17D7  00A7               	movwf	AnalogValue@channel
  7482                           
  7483                           ;functions.c: 903: RC0 = 0;
  7484  17D8  1007               	bcf	7,0	;volatile
  7485                           
  7486                           ;functions.c: 904: ADCON0bits.CHS = channel;
  7487  17D9  0827               	movf	AnalogValue@channel,w
  7488  17DA  00A6               	movwf	??_AnalogValue
  7489  17DB  0DA6               	rlf	??_AnalogValue,f
  7490  17DC  0DA6               	rlf	??_AnalogValue,f
  7491  17DD  081F               	movf	31,w	;volatile
  7492  17DE  0626               	xorwf	??_AnalogValue,w
  7493  17DF  39C3               	andlw	-61
  7494  17E0  0626               	xorwf	??_AnalogValue,w
  7495  17E1  009F               	movwf	31	;volatile
  7496                           
  7497                           ;functions.c: 905: ADCON0bits.ADON = 1;
  7498  17E2  141F               	bsf	31,0	;volatile
  7499                           
  7500                           ;functions.c: 906: DelayDs(1);
  7501  17E3  3001               	movlw	1
  7502  17E4  00A0               	movwf	DelayDs@cnt
  7503  17E5  3000               	movlw	0
  7504  17E6  00A1               	movwf	DelayDs@cnt+1
  7505  17E7  160A  118A  2767  160A  118A  	fcall	_DelayDs
  7506                           
  7507                           ;functions.c: 907: ADCON0bits.GO = 1;
  7508  17EC  1283               	bcf	3,5	;RP0=0, select bank0
  7509  17ED  1303               	bcf	3,6	;RP1=0, select bank0
  7510  17EE  149F               	bsf	31,1	;volatile
  7511                           
  7512                           ;functions.c: 908: DelayDs(1);
  7513  17EF  3001               	movlw	1
  7514  17F0  00A0               	movwf	DelayDs@cnt
  7515  17F1  3000               	movlw	0
  7516  17F2  00A1               	movwf	DelayDs@cnt+1
  7517  17F3  160A  118A  2767  160A  118A  	fcall	_DelayDs
  7518  17F8                     l475:	
  7519                           ;functions.c: 909: while(ADCON0bits.GO);
  7520                           
  7521  17F8  1283               	bcf	3,5	;RP0=0, select bank0
  7522  17F9  1303               	bcf	3,6	;RP1=0, select bank0
  7523  17FA  189F               	btfsc	31,1	;volatile
  7524  17FB  2FF8               	goto	l475
  7525                           
  7526                           ;functions.c: 910: ADCON0bits.ADON = 0;
  7527  17FC  101F               	bcf	31,0	;volatile
  7528                           
  7529                           ;functions.c: 911: RC0 = 1;
  7530  17FD  1407               	bsf	7,0	;volatile
  7531                           
  7532                           ;functions.c: 913: return ADRESH;
  7533  17FE  081E               	movf	30,w	;volatile
  7534  17FF  0008               	return
  7535  1800                     __end_of_AnalogValue:	
  7536                           
  7537                           	psect	text41
  7538  1767                     __ptext41:	
  7539 ;; *************** function _DelayDs *****************
  7540 ;; Defined at:
  7541 ;;		line 511 in file "functions.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  cnt             2    0[BANK0 ] int 
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;  i               2    4[BANK0 ] int 
  7546 ;; Return value:  Size  Location     Type
  7547 ;;                  1    wreg      void 
  7548 ;; Registers used:
  7549 ;;		wreg, status,2
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7555 ;;      Params:         0       2       0       0       0
  7556 ;;      Locals:         0       2       0       0       0
  7557 ;;      Temps:          0       2       0       0       0
  7558 ;;      Totals:         0       6       0       0       0
  7559 ;;Total ram usage:        6 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    2
  7562 ;; This function calls:
  7563 ;;		Nothing
  7564 ;; This function is called by:
  7565 ;;		_ReceivedPacketHandler
  7566 ;;		_Blink
  7567 ;;		_AnalogValue
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           
  7572                           ;psect for function _DelayDs
  7573  1767                     _DelayDs:	
  7574                           
  7575                           ;functions.c: 512: int i;
  7576                           ;functions.c: 513: for(i=0;i<cnt;i++){
  7577                           
  7578                           ;incstack = 0
  7579                           ; Regs used in _DelayDs: [wreg+status,2]
  7580  1767  1283               	bcf	3,5	;RP0=0, select bank0
  7581  1768  1303               	bcf	3,6	;RP1=0, select bank0
  7582  1769  01A4               	clrf	DelayDs@i
  7583  176A  01A5               	clrf	DelayDs@i+1
  7584  176B                     l405:	
  7585  176B  0825               	movf	DelayDs@i+1,w
  7586  176C  3A80               	xorlw	128
  7587  176D  00A2               	movwf	??_DelayDs
  7588  176E  0821               	movf	DelayDs@cnt+1,w
  7589  176F  3A80               	xorlw	128
  7590  1770  0222               	subwf	??_DelayDs,w
  7591  1771  1D03               	skipz
  7592  1772  2F75               	goto	u1305
  7593  1773  0820               	movf	DelayDs@cnt,w
  7594  1774  0224               	subwf	DelayDs@i,w
  7595  1775                     u1305:	
  7596  1775  1803               	btfsc	3,0
  7597  1776  0008               	return
  7598                           
  7599                           ;functions.c: 514: _delay((unsigned long)((100)*(4000000/4000.0)));
  7600  1777  3082               	movlw	130
  7601  1778  1283               	bcf	3,5	;RP0=0, select bank0
  7602  1779  1303               	bcf	3,6	;RP1=0, select bank0
  7603  177A  00A3               	movwf	??_DelayDs+1
  7604  177B  30DD               	movlw	221
  7605  177C  00A2               	movwf	??_DelayDs
  7606  177D                     u2617:	
  7607  177D  0BA2               	decfsz	??_DelayDs,f
  7608  177E  2F7D               	goto	u2617
  7609  177F  0BA3               	decfsz	??_DelayDs+1,f
  7610  1780  2F7D               	goto	u2617
  7611  1781  3001               	movlw	1
  7612  1782  1283               	bcf	3,5	;RP0=0, select bank0
  7613  1783  1303               	bcf	3,6	;RP1=0, select bank0
  7614  1784  07A4               	addwf	DelayDs@i,f
  7615  1785  1803               	skipnc
  7616  1786  0AA5               	incf	DelayDs@i+1,f
  7617  1787  3000               	movlw	0
  7618  1788  07A5               	addwf	DelayDs@i+1,f
  7619  1789  2F6B               	goto	l405
  7620  178A                     __end_of_DelayDs:	
  7621                           
  7622                           	psect	text42
  7623  0C6A                     __ptext42:	
  7624 ;; *************** function _ClockInit *****************
  7625 ;; Defined at:
  7626 ;;		line 6 in file "MCP79510.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;		None
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;  cnt             1    4[BANK0 ] unsigned char 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      void 
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, status,0, pclath, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7640 ;;      Params:         0       0       0       0       0
  7641 ;;      Locals:         0       1       0       0       0
  7642 ;;      Temps:          0       1       0       0       0
  7643 ;;      Totals:         0       2       0       0       0
  7644 ;;Total ram usage:        2 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    4
  7647 ;; This function calls:
  7648 ;;		_ReadSPI
  7649 ;;		_WriteSPI
  7650 ;; This function is called by:
  7651 ;;		_main
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           
  7656                           ;psect for function _ClockInit
  7657  0C6A                     _ClockInit:	
  7658                           
  7659                           ;MCP79510.c: 8: RD4 = 0;
  7660                           
  7661                           ;incstack = 0
  7662                           ; Regs used in _ClockInit: [wreg+status,2+status,0+pclath+cstack]
  7663  0C6A  1283               	bcf	3,5	;RP0=0, select bank0
  7664  0C6B  1303               	bcf	3,6	;RP1=0, select bank0
  7665  0C6C  1208               	bcf	8,4	;volatile
  7666                           
  7667                           ;MCP79510.c: 9: WriteSPI(0x12);
  7668  0C6D  3012               	movlw	18
  7669  0C6E  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7670                           
  7671                           ;MCP79510.c: 10: WriteSPI(0x01);
  7672  0C73  3001               	movlw	1
  7673  0C74  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7674                           
  7675                           ;MCP79510.c: 11: WriteSPI(0x00);
  7676  0C79  3000               	movlw	0
  7677  0C7A  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7678                           
  7679                           ;MCP79510.c: 12: RD4 = 1;
  7680  0C7F  1283               	bcf	3,5	;RP0=0, select bank0
  7681  0C80  1303               	bcf	3,6	;RP1=0, select bank0
  7682  0C81  1608               	bsf	8,4	;volatile
  7683                           
  7684                           ;MCP79510.c: 13: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7685  0C82  300C               	movlw	12
  7686  0C83  1283               	bcf	3,5	;RP0=0, select bank0
  7687  0C84  1303               	bcf	3,6	;RP1=0, select bank0
  7688  0C85  00A3               	movwf	??_ClockInit
  7689  0C86                     u2627:	
  7690  0C86  0BA3               	decfsz	??_ClockInit,f
  7691  0C87  2C86               	goto	u2627
  7692  0C88  0000               	nop
  7693                           
  7694                           ;MCP79510.c: 14: RD4 = 0;
  7695  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  7696  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  7697  0C8B  1208               	bcf	8,4	;volatile
  7698                           
  7699                           ;MCP79510.c: 15: WriteSPI(0x12);
  7700  0C8C  3012               	movlw	18
  7701  0C8D  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7702                           
  7703                           ;MCP79510.c: 16: WriteSPI(0x02);
  7704  0C92  3002               	movlw	2
  7705  0C93  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7706                           
  7707                           ;MCP79510.c: 17: WriteSPI(0x00);
  7708  0C98  3000               	movlw	0
  7709  0C99  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7710                           
  7711                           ;MCP79510.c: 18: RD4 = 1;
  7712  0C9E  1283               	bcf	3,5	;RP0=0, select bank0
  7713  0C9F  1303               	bcf	3,6	;RP1=0, select bank0
  7714  0CA0  1608               	bsf	8,4	;volatile
  7715                           
  7716                           ;MCP79510.c: 19: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7717  0CA1  300C               	movlw	12
  7718  0CA2  1283               	bcf	3,5	;RP0=0, select bank0
  7719  0CA3  1303               	bcf	3,6	;RP1=0, select bank0
  7720  0CA4  00A3               	movwf	??_ClockInit
  7721  0CA5                     u2637:	
  7722  0CA5  0BA3               	decfsz	??_ClockInit,f
  7723  0CA6  2CA5               	goto	u2637
  7724  0CA7  0000               	nop
  7725                           
  7726                           ;MCP79510.c: 20: RD4 = 0;
  7727  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  7728  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  7729  0CAA  1208               	bcf	8,4	;volatile
  7730                           
  7731                           ;MCP79510.c: 21: WriteSPI(0x12);
  7732  0CAB  3012               	movlw	18
  7733  0CAC  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7734                           
  7735                           ;MCP79510.c: 22: WriteSPI(0x08);
  7736  0CB1  3008               	movlw	8
  7737  0CB2  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7738                           
  7739                           ;MCP79510.c: 23: WriteSPI(0x00);
  7740  0CB7  3000               	movlw	0
  7741  0CB8  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7742                           
  7743                           ;MCP79510.c: 24: RD4 = 1;
  7744  0CBD  1283               	bcf	3,5	;RP0=0, select bank0
  7745  0CBE  1303               	bcf	3,6	;RP1=0, select bank0
  7746  0CBF  1608               	bsf	8,4	;volatile
  7747                           
  7748                           ;MCP79510.c: 25: _delay((unsigned long)((40)*(4000000/4000000.0)));
  7749  0CC0  300C               	movlw	12
  7750  0CC1  1283               	bcf	3,5	;RP0=0, select bank0
  7751  0CC2  1303               	bcf	3,6	;RP1=0, select bank0
  7752  0CC3  00A3               	movwf	??_ClockInit
  7753  0CC4                     u2647:	
  7754  0CC4  0BA3               	decfsz	??_ClockInit,f
  7755  0CC5  2CC4               	goto	u2647
  7756  0CC6  0000               	nop
  7757                           
  7758                           ;MCP79510.c: 26: RD4 = 0;
  7759  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  7760  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  7761  0CC9  1208               	bcf	8,4	;volatile
  7762                           
  7763                           ;MCP79510.c: 27: WriteSPI(0x12);
  7764  0CCA  3012               	movlw	18
  7765  0CCB  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7766                           
  7767                           ;MCP79510.c: 28: WriteSPI(0x01);
  7768  0CD0  3001               	movlw	1
  7769  0CD1  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7770                           
  7771                           ;MCP79510.c: 29: WriteSPI(0x80);
  7772  0CD6  3080               	movlw	128
  7773  0CD7  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7774                           
  7775                           ;MCP79510.c: 30: RD4 = 1;
  7776  0CDC  1283               	bcf	3,5	;RP0=0, select bank0
  7777  0CDD  1303               	bcf	3,6	;RP1=0, select bank0
  7778  0CDE  1608               	bsf	8,4	;volatile
  7779                           
  7780                           ;MCP79510.c: 32: char cnt = 0;
  7781  0CDF  01A4               	clrf	ClockInit@cnt
  7782  0CE0                     l3061:	
  7783                           ;MCP79510.c: 33: while(cnt < 100)
  7784                           
  7785  0CE0  3064               	movlw	100
  7786  0CE1  0224               	subwf	ClockInit@cnt,w
  7787  0CE2  1803               	btfsc	3,0
  7788  0CE3  2D00               	goto	l658
  7789                           
  7790                           ;MCP79510.c: 34: {
  7791                           ;MCP79510.c: 35: RD4 = 0;
  7792  0CE4  1208               	bcf	8,4	;volatile
  7793                           
  7794                           ;MCP79510.c: 36: WriteSPI(0x13);
  7795  0CE5  3013               	movlw	19
  7796  0CE6  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7797                           
  7798                           ;MCP79510.c: 37: WriteSPI(0x04);
  7799  0CEB  3004               	movlw	4
  7800  0CEC  160A  118A  264F  120A  158A  	fcall	_WriteSPI
  7801                           
  7802                           ;MCP79510.c: 38: if((ReadSPI() & 0b00100000) != 0)
  7803  0CF1  160A  118A  262D  120A  158A  	fcall	_ReadSPI
  7804  0CF6  3920               	andlw	32
  7805  0CF7  1D03               	btfss	3,2
  7806  0CF8  2D00               	goto	l658
  7807                           
  7808                           ;MCP79510.c: 42: }
  7809                           ;MCP79510.c: 43: cnt++;
  7810                           
  7811                           ;MCP79510.c: 39: {
  7812                           ;MCP79510.c: 40: break;
  7813  0CF9  3001               	movlw	1
  7814  0CFA  1283               	bcf	3,5	;RP0=0, select bank0
  7815  0CFB  1303               	bcf	3,6	;RP1=0, select bank0
  7816  0CFC  00A3               	movwf	??_ClockInit
  7817  0CFD  0823               	movf	??_ClockInit,w
  7818  0CFE  07A4               	addwf	ClockInit@cnt,f
  7819  0CFF  2CE0               	goto	l3061
  7820  0D00                     l658:	
  7821                           
  7822                           ;MCP79510.c: 46: }
  7823                           ;MCP79510.c: 47: RD4 = 1;
  7824  0D00  1283               	bcf	3,5	;RP0=0, select bank0
  7825  0D01  1303               	bcf	3,6	;RP1=0, select bank0
  7826  0D02  1608               	bsf	8,4	;volatile
  7827  0D03  0008               	return
  7828  0D04                     __end_of_ClockInit:	
  7829                           
  7830                           	psect	text43
  7831  162D                     __ptext43:	
  7832 ;; *************** function _ReadSPI *****************
  7833 ;; Defined at:
  7834 ;;		line 532 in file "functions.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;		None
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;		None
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  1    wreg      unsigned char 
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0, pclath, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7848 ;;      Params:         0       0       0       0       0
  7849 ;;      Locals:         0       0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0
  7851 ;;      Totals:         0       0       0       0       0
  7852 ;;Total ram usage:        0 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    3
  7855 ;; This function calls:
  7856 ;;		_WriteSPI
  7857 ;; This function is called by:
  7858 ;;		_RegisterRead
  7859 ;;		_ReadFIFO
  7860 ;;		_read_ram_status
  7861 ;;		_read_write_flash_ram
  7862 ;;		_ClockInit
  7863 ;;		_ReadClock
  7864 ;;		_read_ram_id
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           
  7869                           ;psect for function _ReadSPI
  7870  162D                     _ReadSPI:	
  7871                           
  7872                           ;functions.c: 534: WriteSPI(0x00);
  7873                           
  7874                           ;incstack = 0
  7875                           ; Regs used in _ReadSPI: [wreg+status,2+status,0+pclath+cstack]
  7876  162D  3000               	movlw	0
  7877  162E  160A  118A  264F   	fcall	_WriteSPI
  7878                           
  7879                           ;functions.c: 535: return SSPBUF;
  7880  1631  1283               	bcf	3,5	;RP0=0, select bank0
  7881  1632  1303               	bcf	3,6	;RP1=0, select bank0
  7882  1633  0813               	movf	19,w	;volatile
  7883  1634  0008               	return
  7884  1635                     __end_of_ReadSPI:	
  7885                           
  7886                           	psect	text44
  7887  164F                     __ptext44:	
  7888 ;; *************** function _WriteSPI *****************
  7889 ;; Defined at:
  7890 ;;		line 520 in file "functions.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;  databyte        1    wreg     unsigned char 
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;  databyte        1    2[BANK0 ] unsigned char 
  7895 ;;  buffer          1    1[BANK0 ] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  1    wreg      void 
  7898 ;; Registers used:
  7899 ;;		wreg
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7905 ;;      Params:         0       0       0       0       0
  7906 ;;      Locals:         0       2       0       0       0
  7907 ;;      Temps:          0       1       0       0       0
  7908 ;;      Totals:         0       3       0       0       0
  7909 ;;Total ram usage:        3 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    2
  7912 ;; This function calls:
  7913 ;;		Nothing
  7914 ;; This function is called by:
  7915 ;;		_ReadSPI
  7916 ;;		_RegisterRead
  7917 ;;		_RegisterSet
  7918 ;;		_WriteFIFO
  7919 ;;		_read_ram_status
  7920 ;;		_ram_bulk_erase
  7921 ;;		_read_write_flash_ram
  7922 ;;		_write_ram_status
  7923 ;;		_ClockInit
  7924 ;;		_ReadClock
  7925 ;;		_read_ram_id
  7926 ;;		_ram_sector_erase
  7927 ;;		_power_up_flash_ram
  7928 ;;		_power_down_flash_ram
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function _WriteSPI
  7934  164F                     _WriteSPI:	
  7935                           
  7936                           ;incstack = 0
  7937                           ; Regs used in _WriteSPI: [wreg]
  7938                           ;WriteSPI@databyte stored from wreg
  7939  164F  1283               	bcf	3,5	;RP0=0, select bank0
  7940  1650  1303               	bcf	3,6	;RP1=0, select bank0
  7941  1651  00A2               	movwf	WriteSPI@databyte
  7942                           
  7943                           ;functions.c: 522: unsigned char buffer;
  7944                           ;functions.c: 523: buffer = SSPBUF;
  7945  1652  0813               	movf	19,w	;volatile
  7946  1653  00A0               	movwf	??_WriteSPI
  7947  1654  0820               	movf	??_WriteSPI,w
  7948  1655  00A1               	movwf	WriteSPI@buffer
  7949                           
  7950                           ;functions.c: 524: PIR1bits.SSPIF=0;
  7951  1656  118C               	bcf	12,3	;volatile
  7952                           
  7953                           ;functions.c: 525: SSPBUF = databyte;
  7954  1657  0822               	movf	WriteSPI@databyte,w
  7955  1658  0093               	movwf	19	;volatile
  7956  1659                     l411:	
  7957                           ;functions.c: 526: while(PIR1bits.SSPIF == 0);
  7958                           
  7959  1659  1D8C               	btfss	12,3	;volatile
  7960  165A  2E59               	goto	l411
  7961                           
  7962                           ;functions.c: 527: PIR1bits.SSPIF = 0;
  7963  165B  118C               	bcf	12,3	;volatile
  7964  165C  0008               	return
  7965  165D                     __end_of_WriteSPI:	
  7966                           
  7967                           	psect	text45
  7968  0E54                     __ptext45:	
  7969 ;; *************** function _tc_int *****************
  7970 ;; Defined at:
  7971 ;;		line 826 in file "functions.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;		None
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;		None
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  1    wreg      void 
  7978 ;; Registers used:
  7979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7985 ;;      Params:         0       0       0       0       0
  7986 ;;      Locals:         0       0       0       0       0
  7987 ;;      Temps:          7       0       0       0       0
  7988 ;;      Totals:         7       0       0       0       0
  7989 ;;Total ram usage:        7 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; Hardware stack levels required when called:    1
  7992 ;; This function calls:
  7993 ;;		_TimerCounter
  7994 ;;		i1_OperationMode
  7995 ;; This function is called by:
  7996 ;;		Interrupt level 1
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           
  8001                           ;psect for function _tc_int
  8002  0E54                     _tc_int:	
  8003                           
  8004                           ;functions.c: 829: if((RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2)){
  8005  0E54  1A86               	btfsc	6,5	;volatile
  8006  0E55  2E6C               	goto	i1l3317
  8007  0E56  085D               	movf	_intBlinkCycle,w
  8008  0E57  045E               	iorwf	_intBlinkCycle+1,w
  8009  0E58  1D03               	btfss	3,2
  8010  0E59  2E6C               	goto	i1l3317
  8011  0E5A  160A  118A  263D  120A  158A  	fcall	i1_OperationMode
  8012  0E5F  00F5               	movwf	??_tc_int
  8013  0E60  3002               	movlw	2
  8014  0E61  0275               	subwf	??_tc_int,w
  8015  0E62  1803               	skipnc
  8016  0E63  2E6C               	goto	i1l3317
  8017                           
  8018                           ;functions.c: 830: intBlinkCycle = 1;
  8019  0E64  3001               	movlw	1
  8020  0E65  1283               	bcf	3,5	;RP0=0, select bank0
  8021  0E66  1303               	bcf	3,6	;RP1=0, select bank0
  8022  0E67  00DD               	movwf	_intBlinkCycle
  8023  0E68  3000               	movlw	0
  8024  0E69  00DE               	movwf	_intBlinkCycle+1
  8025                           
  8026                           ;functions.c: 831: intBlinkCounter = 0;
  8027  0E6A  01FC               	clrf	_intBlinkCounter
  8028  0E6B  01FD               	clrf	_intBlinkCounter+1
  8029  0E6C                     i1l3317:	
  8030                           
  8031                           ;functions.c: 833: }
  8032                           ;functions.c: 836: if(TMR1IF ==1){
  8033  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  8034  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  8035  0E6E  1C0C               	btfss	12,0	;volatile
  8036  0E6F  2F09               	goto	L4
  8037                           
  8038                           ;functions.c: 837: TMR1ON = 0;
  8039  0E70  1010               	bcf	16,0	;volatile
  8040                           
  8041                           ;functions.c: 838: TMR1H = 0x0B;
  8042  0E71  300B               	movlw	11
  8043  0E72  008F               	movwf	15	;volatile
  8044                           
  8045                           ;functions.c: 839: TMR1L = 0xDB;
  8046  0E73  30DB               	movlw	219
  8047  0E74  008E               	movwf	14	;volatile
  8048                           
  8049                           ;functions.c: 841: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
  8050  0E75  035D               	decf	_intBlinkCycle,w
  8051  0E76  045E               	iorwf	_intBlinkCycle+1,w
  8052  0E77  1D03               	btfss	3,2
  8053  0E78  2E9B               	goto	i1l3335
  8054  0E79  086C               	movf	_intNumberOfBlinks+1,w
  8055  0E7A  00F6               	movwf	??_tc_int+1
  8056  0E7B  086B               	movf	_intNumberOfBlinks,w
  8057  0E7C  00F5               	movwf	??_tc_int
  8058  0E7D  1003               	clrc
  8059  0E7E  0DF5               	rlf	??_tc_int,f
  8060  0E7F  0DF6               	rlf	??_tc_int+1,f
  8061  0E80  087D               	movf	_intBlinkCounter+1,w
  8062  0E81  3A80               	xorlw	128
  8063  0E82  00F7               	movwf	??_tc_int+2
  8064  0E83  0876               	movf	??_tc_int+1,w
  8065  0E84  3A80               	xorlw	128
  8066  0E85  0277               	subwf	??_tc_int+2,w
  8067  0E86  1D03               	skipz
  8068  0E87  2E8A               	goto	u240_25
  8069  0E88  0875               	movf	??_tc_int,w
  8070  0E89  027C               	subwf	_intBlinkCounter,w
  8071  0E8A                     u240_25:	
  8072  0E8A  1803               	skipnc
  8073  0E8B  2E9B               	goto	i1l3335
  8074                           
  8075                           ;functions.c: 842: intBlinkCounter++;
  8076  0E8C  3001               	movlw	1
  8077  0E8D  07FC               	addwf	_intBlinkCounter,f
  8078  0E8E  1803               	skipnc
  8079  0E8F  0AFD               	incf	_intBlinkCounter+1,f
  8080  0E90  3000               	movlw	0
  8081  0E91  07FD               	addwf	_intBlinkCounter+1,f
  8082                           
  8083                           ;functions.c: 844: if(RC1 == 0)
  8084  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  8085  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  8086  0E94  1887               	btfsc	7,1	;volatile
  8087  0E95  2E98               	goto	i1l464
  8088                           
  8089                           ;functions.c: 845: RC1 = 1;
  8090  0E96  1487               	bsf	7,1	;volatile
  8091  0E97  2EB9               	goto	i1l3343
  8092  0E98                     i1l464:	
  8093                           
  8094                           ;functions.c: 846: else if(RC1 == 1)
  8095  0E98  1C87               	btfss	7,1	;volatile
  8096  0E99  2EB9               	goto	i1l3343
  8097  0E9A  2EB8               	goto	i1l3341
  8098  0E9B                     i1l3335:	
  8099                           ;functions.c: 848: }
  8100                           
  8101                           ;functions.c: 847: RC1 = 0;
  8102                           
  8103                           
  8104                           ;functions.c: 850: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
  8105  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  8106  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  8107  0E9D  035D               	decf	_intBlinkCycle,w
  8108  0E9E  045E               	iorwf	_intBlinkCycle+1,w
  8109  0E9F  1D03               	btfss	3,2
  8110  0EA0  2EB9               	goto	i1l3343
  8111  0EA1  086C               	movf	_intNumberOfBlinks+1,w
  8112  0EA2  00F6               	movwf	??_tc_int+1
  8113  0EA3  086B               	movf	_intNumberOfBlinks,w
  8114  0EA4  00F5               	movwf	??_tc_int
  8115  0EA5  1003               	clrc
  8116  0EA6  0DF5               	rlf	??_tc_int,f
  8117  0EA7  0DF6               	rlf	??_tc_int+1,f
  8118  0EA8  087D               	movf	_intBlinkCounter+1,w
  8119  0EA9  3A80               	xorlw	128
  8120  0EAA  00F7               	movwf	??_tc_int+2
  8121  0EAB  0876               	movf	??_tc_int+1,w
  8122  0EAC  3A80               	xorlw	128
  8123  0EAD  0277               	subwf	??_tc_int+2,w
  8124  0EAE  1D03               	skipz
  8125  0EAF  2EB2               	goto	u244_25
  8126  0EB0  0875               	movf	??_tc_int,w
  8127  0EB1  027C               	subwf	_intBlinkCounter,w
  8128  0EB2                     u244_25:	
  8129  0EB2  1C03               	skipc
  8130  0EB3  2EB9               	goto	i1l3343
  8131                           
  8132                           ;functions.c: 851: intBlinkCycle = 0;
  8133  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  8134  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  8135  0EB6  01DD               	clrf	_intBlinkCycle
  8136  0EB7  01DE               	clrf	_intBlinkCycle+1
  8137  0EB8                     i1l3341:	
  8138                           
  8139                           ;functions.c: 852: RC1 = 0;
  8140  0EB8  1087               	bcf	7,1	;volatile
  8141  0EB9                     i1l3343:	
  8142                           
  8143                           ;functions.c: 853: }
  8144                           ;functions.c: 856: intHalfSecondCounter++;
  8145  0EB9  3001               	movlw	1
  8146  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  8147  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  8148  0EBC  07E1               	addwf	_intHalfSecondCounter,f
  8149  0EBD  1803               	skipnc
  8150  0EBE  0AE2               	incf	_intHalfSecondCounter+1,f
  8151  0EBF  3000               	movlw	0
  8152  0EC0  07E2               	addwf	_intHalfSecondCounter+1,f
  8153                           
  8154                           ;functions.c: 857: if(intHalfSecondCounter>=2)
  8155  0EC1  0862               	movf	_intHalfSecondCounter+1,w
  8156  0EC2  3A80               	xorlw	128
  8157  0EC3  00FF               	movwf	127
  8158  0EC4  3080               	movlw	128
  8159  0EC5  027F               	subwf	127,w
  8160  0EC6  1D03               	skipz
  8161  0EC7  2ECA               	goto	u245_25
  8162  0EC8  3002               	movlw	2
  8163  0EC9  0261               	subwf	_intHalfSecondCounter,w
  8164  0ECA                     u245_25:	
  8165  0ECA  1C03               	skipc
  8166  0ECB  2EDB               	goto	i1l3353
  8167                           
  8168                           ;functions.c: 858: {
  8169                           ;functions.c: 859: intHalfSecondCounter = 0;
  8170  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  8171  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  8172  0ECE  01E1               	clrf	_intHalfSecondCounter
  8173  0ECF  01E2               	clrf	_intHalfSecondCounter+1
  8174                           
  8175                           ;functions.c: 860: intSecondCounter++;
  8176  0ED0  3001               	movlw	1
  8177  0ED1  07E5               	addwf	_intSecondCounter,f
  8178  0ED2  1803               	skipnc
  8179  0ED3  0AE6               	incf	_intSecondCounter+1,f
  8180  0ED4  3000               	movlw	0
  8181  0ED5  07E6               	addwf	_intSecondCounter+1,f
  8182                           
  8183                           ;functions.c: 861: TimerCounter();
  8184  0ED6  120A  158A  2170  120A  158A  	fcall	_TimerCounter
  8185  0EDB                     i1l3353:	
  8186                           
  8187                           ;functions.c: 863: }
  8188                           ;functions.c: 864: if(intSecondCounter >=60)
  8189  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  8190  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  8191  0EDD  0866               	movf	_intSecondCounter+1,w
  8192  0EDE  3A80               	xorlw	128
  8193  0EDF  00FF               	movwf	127
  8194  0EE0  3080               	movlw	128
  8195  0EE1  027F               	subwf	127,w
  8196  0EE2  1D03               	skipz
  8197  0EE3  2EE6               	goto	u246_25
  8198  0EE4  303C               	movlw	60
  8199  0EE5  0265               	subwf	_intSecondCounter,w
  8200  0EE6                     u246_25:	
  8201  0EE6  1C03               	skipc
  8202  0EE7  2EF2               	goto	i1l3359
  8203                           
  8204                           ;functions.c: 865: {
  8205                           ;functions.c: 866: intSecondCounter = 0;
  8206  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  8207  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  8208  0EEA  01E5               	clrf	_intSecondCounter
  8209  0EEB  01E6               	clrf	_intSecondCounter+1
  8210                           
  8211                           ;functions.c: 867: intMinuteCounter++;
  8212  0EEC  3001               	movlw	1
  8213  0EED  07E3               	addwf	_intMinuteCounter,f
  8214  0EEE  1803               	skipnc
  8215  0EEF  0AE4               	incf	_intMinuteCounter+1,f
  8216  0EF0  3000               	movlw	0
  8217  0EF1  07E4               	addwf	_intMinuteCounter+1,f
  8218  0EF2                     i1l3359:	
  8219                           
  8220                           ;functions.c: 869: }
  8221                           ;functions.c: 870: if(intMinuteCounter >= 60)
  8222  0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  8223  0EF3  1303               	bcf	3,6	;RP1=0, select bank0
  8224  0EF4  0864               	movf	_intMinuteCounter+1,w
  8225  0EF5  3A80               	xorlw	128
  8226  0EF6  00FF               	movwf	127
  8227  0EF7  3080               	movlw	128
  8228  0EF8  027F               	subwf	127,w
  8229  0EF9  1D03               	skipz
  8230  0EFA  2EFD               	goto	u247_25
  8231  0EFB  303C               	movlw	60
  8232  0EFC  0263               	subwf	_intMinuteCounter,w
  8233  0EFD                     u247_25:	
  8234  0EFD  1C03               	skipc
  8235  0EFE  2F05               	goto	i1l3365
  8236                           
  8237                           ;functions.c: 871: {
  8238                           ;functions.c: 872: intMinuteCounter = 0;
  8239  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  8240  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  8241  0F01  01E3               	clrf	_intMinuteCounter
  8242  0F02  01E4               	clrf	_intMinuteCounter+1
  8243                           
  8244                           ;functions.c: 873: bSaveDataToFlash = TRUE;
  8245  0F03  01E9               	clrf	_bSaveDataToFlash
  8246  0F04  0AE9               	incf	_bSaveDataToFlash,f
  8247  0F05                     i1l3365:	
  8248                           
  8249                           ;functions.c: 874: }
  8250                           ;functions.c: 877: TMR1ON = 1;
  8251  0F05  1283               	bcf	3,5	;RP0=0, select bank0
  8252  0F06  1303               	bcf	3,6	;RP1=0, select bank0
  8253  0F07  1410               	bsf	16,0	;volatile
  8254                           
  8255                           ;functions.c: 878: }
  8256                           ;functions.c: 879: TMR1IF = 0;
  8257  0F08  100C               	bcf	12,0	;volatile
  8258  0F09                     L4:	
  8259                           
  8260                           ;functions.c: 880: RBIF = 0;
  8261  0F09  100B               	bcf	11,0	;volatile
  8262                           
  8263                           ;functions.c: 881: GIE = 1;
  8264  0F0A  178B               	bsf	11,7	;volatile
  8265                           
  8266                           ;functions.c: 882: return;
  8267  0F0B  087B               	movf	??_tc_int+6,w
  8268  0F0C  00FF               	movwf	127
  8269  0F0D  087A               	movf	??_tc_int+5,w
  8270  0F0E  008A               	movwf	10
  8271  0F0F  0879               	movf	??_tc_int+4,w
  8272  0F10  0084               	movwf	4
  8273  0F11  0E78               	swapf	(??_tc_int+3)^(0+-128),w
  8274  0F12  0083               	movwf	3
  8275  0F13  0EFE               	swapf	126,f
  8276  0F14  0E7E               	swapf	126,w
  8277  0F15  0009               	retfie
  8278  0F16                     __end_of_tc_int:	
  8279                           
  8280                           	psect	intentry
  8281  0004                     __pintentry:	
  8282                           ;incstack = 0
  8283 ;; hardware stack exceeded
  8284                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8285                           
  8286  0004                     interrupt_function:	
  8287  007E                     saved_w	set	btemp
  8288  0004  00FE               	movwf	btemp
  8289  0005  0E03               	swapf	3,w
  8290  0006  00F8               	movwf	??_tc_int+3
  8291  0007  0804               	movf	4,w
  8292  0008  00F9               	movwf	??_tc_int+4
  8293  0009  080A               	movf	10,w
  8294  000A  00FA               	movwf	??_tc_int+5
  8295  000B  1283               	bcf	3,5	;RP0=0, select bank0
  8296  000C  1303               	bcf	3,6	;RP1=0, select bank0
  8297  000D  087F               	movf	btemp+1,w
  8298  000E  00FB               	movwf	??_tc_int+6
  8299  000F  120A  158A  2E54   	ljmp	_tc_int
  8300                           
  8301                           	psect	text46
  8302  163D                     __ptext46:	
  8303 ;; *************** function i1_OperationMode *****************
  8304 ;; Defined at:
  8305 ;;		line 964 in file "functions.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;		None
  8308 ;; Auto vars:     Size  Location     Type
  8309 ;;  OperationMod    1    1[COMMON] unsigned char 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      unsigned char 
  8312 ;; Registers used:
  8313 ;;		wreg, status,2
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8319 ;;      Params:         0       0       0       0       0
  8320 ;;      Locals:         1       0       0       0       0
  8321 ;;      Temps:          1       0       0       0       0
  8322 ;;      Totals:         2       0       0       0       0
  8323 ;;Total ram usage:        2 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; This function calls:
  8326 ;;		Nothing
  8327 ;; This function is called by:
  8328 ;;		_tc_int
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           
  8333                           ;psect for function i1_OperationMode
  8334  163D                     i1_OperationMode:	
  8335                           
  8336                           ;functions.c: 966: unsigned char bracketStatus;
  8337                           ;functions.c: 967: bracketStatus = ((~PORTB) & 0b00000111) ;
  8338                           
  8339                           ;incstack = 0
  8340 ;; hardware stack exceeded
  8341                           ; Regs used in i1_OperationMode: [wreg+status,2]
  8342  163D  1283               	bcf	3,5	;RP0=0, select bank0
  8343  163E  1303               	bcf	3,6	;RP1=0, select bank0
  8344  163F  0906               	comf	6,w	;volatile
  8345  1640  3907               	andlw	7
  8346  1641  00F0               	movwf	??i1_OperationMode
  8347  1642  0870               	movf	??i1_OperationMode,w
  8348  1643  00F1               	movwf	i1OperationMode@bracketStatus
  8349                           
  8350                           ;functions.c: 969: return bracketStatus;
  8351  1644  0871               	movf	i1OperationMode@bracketStatus,w
  8352  1645  0008               	return
  8353  1646                     __end_ofi1_OperationMode:	
  8354                           
  8355                           	psect	text47
  8356  0970                     __ptext47:	
  8357 ;; *************** function _TimerCounter *****************
  8358 ;; Defined at:
  8359 ;;		line 415 in file "functions.c"
  8360 ;; Parameters:    Size  Location     Type
  8361 ;;		None
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;  i               2    3[COMMON] int 
  8364 ;; Return value:  Size  Location     Type
  8365 ;;                  1    wreg      void 
  8366 ;; Registers used:
  8367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  8368 ;; Tracked objects:
  8369 ;;		On entry : 0/0
  8370 ;;		On exit  : 0/0
  8371 ;;		Unchanged: 0/0
  8372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8373 ;;      Params:         0       0       0       0       0
  8374 ;;      Locals:         2       0       0       0       0
  8375 ;;      Temps:          3       0       0       0       0
  8376 ;;      Totals:         5       0       0       0       0
  8377 ;;Total ram usage:        5 bytes
  8378 ;; Hardware stack levels used:    1
  8379 ;; This function calls:
  8380 ;;		Nothing
  8381 ;; This function is called by:
  8382 ;;		_tc_int
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           
  8387                           ;psect for function _TimerCounter
  8388  0970                     _TimerCounter:	
  8389                           
  8390                           ;functions.c: 417: for (int i = 0; i < 5; i++)
  8391                           
  8392                           ;incstack = 0
  8393 ;; hardware stack exceeded
  8394                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  8395  0970  01F3               	clrf	TimerCounter@i
  8396  0971  01F4               	clrf	TimerCounter@i+1
  8397  0972                     L5:	
  8398  0972  0874               	movf	TimerCounter@i+1,w
  8399  0973  3A80               	xorlw	128
  8400  0974  00FF               	movwf	127
  8401  0975  3080               	movlw	128
  8402  0976  027F               	subwf	127,w
  8403  0977  1D03               	skipz
  8404  0978  297B               	goto	u221_25
  8405  0979  3005               	movlw	5
  8406  097A  0273               	subwf	TimerCounter@i,w
  8407  097B                     u221_25:	
  8408  097B  1803               	btfsc	3,0
  8409  097C  0008               	return
  8410                           
  8411                           ;functions.c: 418: {
  8412                           ;functions.c: 419: if(intClockTimer[i]>0)
  8413  097D  0873               	movf	TimerCounter@i,w
  8414  097E  00F0               	movwf	??_TimerCounter
  8415  097F  0770               	addwf	??_TimerCounter,w
  8416  0980  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  8417  0981  0084               	movwf	4
  8418  0982  1383               	bcf	3,7	;select IRP bank1
  8419  0983  0800               	movf	0,w
  8420  0984  00F1               	movwf	??_TimerCounter+1
  8421  0985  0A84               	incf	4,f
  8422  0986  0800               	movf	0,w
  8423  0987  00F2               	movwf	??_TimerCounter+2
  8424  0988  0872               	movf	??_TimerCounter+2,w
  8425  0989  3A80               	xorlw	128
  8426  098A  00FF               	movwf	127
  8427  098B  3080               	movlw	128
  8428  098C  027F               	subwf	127,w
  8429  098D  1D03               	skipz
  8430  098E  2991               	goto	u222_25
  8431  098F  3001               	movlw	1
  8432  0990  0271               	subwf	??_TimerCounter+1,w
  8433  0991                     u222_25:	
  8434  0991  1C03               	skipc
  8435  0992  29A5               	goto	i1l3239
  8436                           
  8437                           ;functions.c: 420: intClockTimer[i]--;
  8438  0993  0873               	movf	TimerCounter@i,w
  8439  0994  00F0               	movwf	??_TimerCounter
  8440  0995  0770               	addwf	??_TimerCounter,w
  8441  0996  3EC2               	addlw	(low (_intClockTimer| 0))& (0+255)
  8442  0997  0084               	movwf	4
  8443  0998  30FF               	movlw	255
  8444  0999  1383               	bcf	3,7	;select IRP bank1
  8445  099A  0780               	addwf	0,f
  8446  099B  0F84               	incfsz	4,f
  8447  099C  0800               	movf	0,w
  8448  099D  1803               	skipnc
  8449  099E  0A00               	incf	0,w
  8450  099F  00FF               	movwf	127
  8451  09A0  30FF               	movlw	255
  8452  09A1  077F               	addwf	127,w
  8453  09A2  0080               	movwf	0
  8454  09A3  0384               	decf	4,f
  8455  09A4  29AB               	goto	i1l3241
  8456  09A5                     i1l3239:	
  8457                           
  8458                           ;functions.c: 421: else
  8459                           ;functions.c: 422: bTimerComplete[i] = 1;
  8460  09A5  0873               	movf	TimerCounter@i,w
  8461  09A6  3E56               	addlw	(low (_bTimerComplete| 0))& (0+255)
  8462  09A7  0084               	movwf	4
  8463  09A8  1383               	bcf	3,7	;select IRP bank0
  8464  09A9  0180               	clrf	0
  8465  09AA  0A80               	incf	0,f
  8466  09AB                     i1l3241:	
  8467  09AB  3001               	movlw	1
  8468  09AC  07F3               	addwf	TimerCounter@i,f
  8469  09AD  1803               	skipnc
  8470  09AE  0AF4               	incf	TimerCounter@i+1,f
  8471  09AF  3000               	movlw	0
  8472  09B0  07F4               	addwf	TimerCounter@i+1,f
  8473  09B1  2972               	goto	L5
  8474  09B2                     __end_of_TimerCounter:	
  8475  007E                     btemp	set	126	;btemp
  8476  007E                     wtemp0	set	126


Data Sizes:
    Strings     16
    Constant    39
    Data        3
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     54      78
    BANK1            80     34      44
    BANK3            96      0      40
    BANK2            96      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strchr@ptr	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    strstr@s2	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_2(CODE[8]), STR_1(CODE[8]), 

    strstr@s1	PTR const unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    ReadClock@year	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@year(BANK0[1]), 

    ReadClock@month	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@month(BANK0[1]), 

    ReadClock@date	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@date(BANK0[1]), 

    ReadClock@hour	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@hours(BANK0[1]), 

    ReadClock@minutes	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@minutes(BANK0[1]), 

    ReadClock@seconds	PTR unsigned char  size(1) Largest target is 1
		 -> saveDataToFlash@seconds(BANK0[1]), 

    read_write_flash_ram@mem_ptr	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@value(BANK0[1]), saveDataToFlash@value(BANK0[1]), 

    ReadMemoryAdress@var1	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr1(BANK0[1]), saveDataToFlash@addr1(BANK0[1]), 

    ReadMemoryAdress@var2	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr2(BANK0[1]), saveDataToFlash@addr2(BANK0[1]), 

    ReadMemoryAdress@var3	PTR unsigned char  size(1) Largest target is 1
		 -> SendMemoryData@addr3(BANK0[1]), saveDataToFlash@addr3(BANK0[1]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 30
		 -> NULL(NULL[0]), TransiverReadFIFO@ReceivedString(BANK1[30]), 

    ReceivedPacketHandler@Data	PTR unsigned char  size(1) Largest target is 30
		 -> TransiverReadFIFO@ReceivedString(BANK1[30]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_TimerCounter

Critical Paths under _main in BANK0

    _main->_TransiverReadFIFO
    _saveDataToFlash->_ReadClock
    _ReadClock->___bmul
    _IncreaseMemoryAdress->_eeprom_write
    _TransiverToReceive->_FindChannel
    _TransiverReadFIFO->_ReceivedPacketHandler
    _ReceivedPacketHandler->_SendMemoryData
    _write_ram_status->_read_ram_status
    _strstr->_strncmp
    _strncmp->_strlen
    _ram_bulk_erase->_read_ram_status
    _SendMemoryData->_TransmittPacket
    _read_write_flash_ram->_read_ram_status
    _read_ram_status->_WriteSPI
    _ReadMemoryAdress->_eeprom_read
    _ResetMemoryAdress->_eeprom_write
    _TransiverInit->_FindChannel
    _Blink->_DelayDs
    _Mode_5->_TransmittPacket
    _Mode_4->_TransmittPacket
    _TransmittPacket->_FindChannel
    _WriteFIFO->_WriteSPI
    _FindChannel->_SetRFMode
    _SetRFMode->_RegisterSet
    _RegisterSet->_RegisterRead
    _RegisterRead->_WriteSPI
    _Mode_1->_DarknessCheck
    _LightWithSensController->_DarknessCheck
    _DarknessCheck->_AnalogValue
    _AnalogValue->_DelayDs
    _ClockInit->_WriteSPI
    _ReadSPI->_WriteSPI

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_TransiverReadFIFO

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   98598
                                             51 BANK0      3     3      0
                          _ClockInit
                             _Mode_0
                             _Mode_1
                             _Mode_2
                             _Mode_4
                             _Mode_5
                      _OperationMode
                            _PICInit
                      _TransiverInit
                  _TransiverReadFIFO
                 _TransiverToReceive
                    _saveDataToFlash
 ---------------------------------------------------------------------------------
 (1) _saveDataToFlash                                     15    15      0   11304
                                             24 BANK0     15    15      0
                        _AnalogValue
               _IncreaseMemoryAdress
                          _ReadClock
                   _ReadMemoryAdress
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (2) _ReadClock                                           20    15      5    1551
                                              4 BANK0     20    15      5
                            _ReadSPI
                           _WriteSPI
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     476
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _IncreaseMemoryAdress                                 4     4      0     653
                                              3 BANK0      4     4      0
                        _eeprom_read
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (1) _TransiverToReceive                                   2     2      0    9949
                                             21 BANK0      2     2      0
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (1) _TransiverReadFIFO                                   36    36      0   37341
                                             49 BANK0      2     2      0
                                              0 BANK1     34    34      0
                           _ReadFIFO
              _ReceivedPacketHandler
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _ReceivedPacketHandler                                2     2      0   34084
                                             47 BANK0      2     2      0
                        _AnalogValue
                      _DarknessCheck
                            _DelayDs
                      _OperationMode
                  _ResetMemoryAdress
                     _SendMemoryData
                    _TransmittPacket
                        _eeprom_read
                       _eeprom_write
                     _ram_bulk_erase
                    _read_ram_status
                             _strstr
                   _write_ram_status
 ---------------------------------------------------------------------------------
 (3) _write_ram_status                                     1     1      0     114
                                              5 BANK0      1     1      0
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _strstr                                               5     4      1     959
                                             14 BANK0      5     4      1
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              6     3      3     292
                                              8 BANK0      6     3      3
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               8     6      2     120
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               3     1      2     182
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ram_bulk_erase                                       0     0      0      92
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _SendMemoryData                                      20    20      0   17652
                                             27 BANK0     20    20      0
                   _ReadMemoryAdress
                    _TransmittPacket
               _read_write_flash_ram
 ---------------------------------------------------------------------------------
 (2) _read_write_flash_ram                                11     5      6    4519
                                              5 BANK0     11     5      6
                            _ReadSPI
                           _WriteSPI
                    _read_ram_status
 ---------------------------------------------------------------------------------
 (3) _read_ram_status                                      2     2      0      69
                                              3 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _ReadMemoryAdress                                     4     2      2    1826
                                              2 BANK0      4     2      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _ResetMemoryAdress                                    0     0      0     492
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     492
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadFIFO                                             2     2      0      46
                                              3 BANK0      2     2      0
                            _ReadSPI
 ---------------------------------------------------------------------------------
 (1) _TransiverInit                                        1     1      0   10295
                                             21 BANK0      1     1      0
                              _Blink
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _Blink                                                5     3      2    1052
                                              6 BANK0      5     3      2
                            _DelayDs
 ---------------------------------------------------------------------------------
 (1) _PICInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mode_5                                               1     1      0   12587
                                             27 BANK0      1     1      0
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (1) _Mode_4                                               0     0      0   12587
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (3) _TransmittPacket                                      6     5      1   10871
                                             21 BANK0      6     5      1
                        _AnalogValue (ARG)
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                          _WriteFIFO
                        _eeprom_read (ARG)
                      _timerFunction
 ---------------------------------------------------------------------------------
 (4) _WriteFIFO                                            1     1      0      45
                                              3 BANK0      1     1      0
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _FindChannel                                          7     7      0    4734
                                             14 BANK0      7     7      0
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _SetRFMode                                            3     3      0    2321
                                             11 BANK0      3     3      0
                       _RegisterRead
                        _RegisterSet
 ---------------------------------------------------------------------------------
 (3) _RegisterSet                                          4     3      1    2074
                                              7 BANK0      4     3      1
                       _RegisterRead (ARG)
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _RegisterRead                                         4     4      0     114
                                              3 BANK0      4     4      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (1) _Mode_2                                               0     0      0    1716
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (1) _Mode_1                                               0     0      0    1010
                      _DarknessCheck
 ---------------------------------------------------------------------------------
 (1) _Mode_0                                               0     0      0    1716
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (2) _LightWithSensController                              0     0      0    1716
                      _DarknessCheck
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _timerFunction                                        5     1      4     706
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _DarknessCheck                                        2     2      0    1010
                                              8 BANK0      2     2      0
                        _AnalogValue
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _AnalogValue                                          2     2      0     964
                                              6 BANK0      2     2      0
                            _DelayDs
 ---------------------------------------------------------------------------------
 (3) _DelayDs                                              6     4      2     942
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _ClockInit                                            2     2      0      70
                                              3 BANK0      2     2      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _ReadSPI                                              0     0      0      23
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _WriteSPI                                             3     3      0      23
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _tc_int                                              7     7      0     135
                                              5 COMMON     7     7      0
                       _TimerCounter
                    i1_OperationMode
 ---------------------------------------------------------------------------------
 (11) i1_OperationMode                                     2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _TimerCounter                                        5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ClockInit
     _ReadSPI
       _WriteSPI
     _WriteSPI
   _Mode_0
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_1
     _DarknessCheck
       _AnalogValue
         _DelayDs
       _eeprom_read
   _Mode_2
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_4
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _Mode_5
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _OperationMode
   _PICInit
   _TransiverInit
     _Blink
       _DelayDs
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
   _TransiverReadFIFO
     _ReadFIFO
       _ReadSPI
         _WriteSPI
     _ReceivedPacketHandler
       _AnalogValue
         _DelayDs
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _DelayDs
       _OperationMode
       _ResetMemoryAdress
         _eeprom_write
       _SendMemoryData
         _ReadMemoryAdress
           _eeprom_read
         _TransmittPacket
           _AnalogValue (ARG)
             _DelayDs
           _FindChannel (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
             _SetRFMode
               _RegisterRead
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _RegisterSet
                 _RegisterRead (ARG)
                   _ReadSPI
                     _WriteSPI
                   _WriteSPI
                 _WriteSPI (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet (ARG)
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode (ARG)
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
           _WriteFIFO (ARG)
             _WriteSPI
           _eeprom_read (ARG)
           _timerFunction (ARG)
         _read_write_flash_ram
           _ReadSPI
             _WriteSPI
           _WriteSPI
           _read_ram_status
             _ReadSPI
               _WriteSPI
             _WriteSPI
       _TransmittPacket
         _AnalogValue (ARG)
           _DelayDs
         _FindChannel (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
         _WriteFIFO (ARG)
           _WriteSPI
         _eeprom_read (ARG)
         _timerFunction (ARG)
       _eeprom_read
       _eeprom_write
       _ram_bulk_erase
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
       _write_ram_status
         _WriteSPI
         _read_ram_status
           _ReadSPI
             _WriteSPI
           _WriteSPI
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _TransiverToReceive
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _saveDataToFlash
     _AnalogValue
       _DelayDs
     _IncreaseMemoryAdress
       _eeprom_read
       _eeprom_write
     _ReadClock
       _ReadSPI
         _WriteSPI
       _WriteSPI
       ___bmul
     _ReadMemoryAdress
       _eeprom_read
     _read_write_flash_ram
       _ReadSPI
         _WriteSPI
       _WriteSPI
       _read_ram_status
         _ReadSPI
           _WriteSPI
         _WriteSPI

 _tc_int (ROOT)
   _TimerCounter
   i1_OperationMode

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      28       9       41.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      2C       7       55.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     36      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B0      12        0.0%
ABS                  0      0      B0       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Mar 19 14:16:52 2017

                             __CFG_CP$ON 0000                 __size_of_read_ram_status 0014  
                                      pc 0002               __size_of_TransiverReadFIFO 006D  
                  _bTransiverModeReceive 006A                           ___bmul@product 0022  
                            _SSPSTATbits 0094                                       l77 0D3A  
                                     _RD 0C60                              __CFG_CPD$ON 0000  
                                     _WR 0C61                          _saveDataToFlash 0045  
                                     fsr 0004                                      l310 02F6  
                                    l311 030B                                      l304 046C  
                                    l411 1659                                      l308 02E1  
                                    l405 176B            __size_of_read_write_flash_ram 007C  
                                    l362 0848                                      l346 0E32  
                                    l435 0BEA                                      l381 096E  
                                    l357 16F3                                      l475 17F8  
                                    l396 0AD5                                      l590 0C57  
                                    l399 0ADB                                      l658 0D00  
                                    l675 1790                                      l697 08D1  
                                    _GIE 005F                                      _RA1 0029  
                                    _RB0 0030                                      _RB1 0031  
                                    _RC0 0038                                      _RA4 002C  
                                    _RC1 0039                                      _RB3 0033  
                                    _RA5 002D                                      _RC2 003A  
                                    _RB4 0034                                      _RB5 0035  
                                    _RD3 0043                                      _RD4 0044  
                  __end_of_DarknessCheck 17D5                                      fsr0 0004  
                                    indf 0000                         TransmittPacket@i 0038  
                    __end_of_FindChannel 07AE                          ??_timerFunction 0024  
                           __CFG_LVP$OFF 0000                                     l1171 09B5  
                                   l1159 16C9                                     l2401 07AC  
                                   l3017 0FFB                                     l3107 0A2D  
                                   l3061 0CE0                                     l3141 0B6A  
                                   l3133 0B49                                     l3109 0A40  
                                   l3071 16E8                                     l2351 0B9C  
                                   l2353 0BAB                                     l2361 0BD7  
                                   l2521 0BF7                                     l3137 0B63  
                                   l2611 17BA                                     l2355 0BBA  
                                   l2603 07F2                                     l2357 0BC9  
                                   l2349 0B8F                                     l2461 0DDE  
                                   l3093 169B                                     l2615 17D3  
                                   l2463 0DF1                                     l3087 1677  
                                   l2543 0C59                                     l2535 0C42  
                                   l2551 088C                                     l2631 08C5  
                                   l2711 02A8                                     l2393 0788  
                                   l2377 06DA                                     l2537 0C4E  
                                   l2561 09D4                                     l2721 02D0  
                                   l3281 0D63                                     l3273 0D49  
                                   l3265 0D37                                     l2395 0768  
                                   l2539 0C26                                     l2811 0439  
                                   l2715 02BF                                     l2397 0799  
                                   l2549 087D                                     l2565 09EA  
                                   l2805 0410                                     l2741 0332  
                                   l3293 0D87                                     l3285 0D70  
                                   l3277 0D56                                     l2487 0E3B  
                                   l2647 175E                                     l2567 09F3  
                                   l2591 07B2                                     l2815 0442  
                                   l2807 041B                                     l2751 0351  
                                   l2673 063A                                     l2577 16D2  
                                   l2761 0373                                     l3289 0D7D  
                                   l2827 093E                                     l2675 06AF  
                                   l2739 0320                                     l2819 044A  
                                   l2683 16A9                                     l3299 0D93  
                                   l2837 0953                                     l2597 07D0  
                                   l2773 03A5                                     l2855 0904  
                                   l2599 07E9                                     l2791 03F1  
                                   l2767 038C                                     l2679 16A3  
                                   l2785 03DD                                     l2777 03BA  
                                   l2795 03F9                                     l2787 03E5  
                                   l2779 03CA                                     l2877 0AA5  
            __size_of_TransiverToReceive 005C                                     STR_1 082D  
                                   STR_2 0835                                     u2005 053B  
                                   u1311 178E                                     u2015 0560  
                                   u1305 1775                                     u2025 0585  
                                   u1265 06D8                                     u1425 0C2C  
                                   u1285 0773                                     u1605 0657  
                                   u1295 07AA                                     u1615 066C  
                                   u2175 0B39                                     u1625 0648  
                                   u2507 0D30                                     u2517 0A11  
                                   u2607 0794                                     u1575 05CE  
                                   u2527 0A4A                                     u2617 177D  
                                   u1585 05F4                                     u2537 0B70  
                                   u2627 0C86                                     u2547 0C65  
                                   u1595 061A                                     u2637 0CA5  
                                   u2557 0DC2                                     u2647 0CC4  
                                   u2567 0DFB                                     u1935 090E  
                                   u2577 0E3F                                     u2497 0D1E  
                                   u2587 0E4E                                     u2597 06C5  
                                   u1975 04CC                                     _RBIF 0058  
                                   u1985 04F1                                     u1995 0516  
                        __end_of_PICInit 0B12                                     _WREN 0C62  
                         ??_eeprom_write 0021                                     _main 0D04  
                                   btemp 007E                                     start 0012  
                          __CFG_IESO$OFF 0000                          __end_of_DelayDs 178A  
       __size_of_LightWithSensController 003F                        ___bmul@multiplier 0023  
                        __end_of_ReadSPI 1635               SendMemoryData@finalAddress 004B  
                                  ?_main 0070                         ReadClock@month10 002F  
                                  _EEADR 010D                            __CFG_WDTE$OFF 0000  
                       ReadClock@minutes 0024                         ReadClock@seconds 0031  
                                  _CARRY 0018                                    _ANSEL 0188  
                  __end_of_OperationMode 164F                                    _T1CON 0010  
                         __CFG_DEBUG$OFF 0000                                    i1l464 0E98  
                                  _TMR1H 000F                                    _TMR1L 000E  
                                  _PORTA 0005                                    _PORTB 0006  
                                  _PORTC 0007                                    _PORTD 0008  
                                  _PORTE 0009                                    _TRISA 0085  
                                  _TRISB 0086                                    _TRISC 0087  
                                  _TRISD 0088                                    _SSPIE 0463  
                                  _TRISE 0089                    read_write_flash_ram@i 002E  
                                  _Blink 08FE                                    _bDark 0068  
                         __CFG_FCMEN$OFF 0000                  ??_ReceivedPacketHandler 004F  
                            _AnalogValue 17D5                           __CFG_BOREN$OFF 0000  
                                  pclath 000A                          ??_TransiverInit 0035  
                                  status 0003                            _intBlinkCycle 005D  
                                  wtemp0 007E                           WriteSPI@buffer 0021  
                   ReadMemoryAdress@var1 0023                     ReadMemoryAdress@var2 0022  
                   ReadMemoryAdress@var3 0025                         __end_of_ChannelP 0813  
                       __end_of_ChannelR 0820                         __end_of_ChannelS 082D  
                        __end_of_strncmp 09F6                  __end_of_saveDataToFlash 0290  
                         __CFG_MCLRE$OFF 0000                            _intClockTimer 00C2  
                      _intNumberOfBlinks 006B                          __initialization 0015  
                           __end_of_main 0DA2                         __end_of_ReadFIFO 166B  
                          ReadFIFO@value 0024                         ??_SendMemoryData 003B  
                            _FindChannel 06B6                            ??_RegisterSet 0028  
                                 ??_main 0053                        ??_read_ram_status 0023  
                     __size_of_ClockInit 009A                                   ?_Blink 0026  
                              ??_PICInit 0020                                   _ADRESH 001E  
                                 _EEDATA 010C                                   _EECON1 018C  
                                 _EECON2 018D                                   _ANSELH 0189  
                       __end_of_WriteSPI 165D                                   i1l3241 09AB  
                                 i1l3341 0EB8                                   i1l3317 0E6C  
                                 i1l3239 09A5                                   i1l3343 0EB9  
                                 i1l3335 0E9B                                   i1l3353 0EDB  
                                 i1l3365 0F05                                   i1l3359 0EF2  
                                 u221_25 097B                                   u222_25 0991  
                                 u240_25 0E8A                                   u244_25 0EB2  
                              ??_DelayDs 0022                                   u245_25 0ECA  
                                 u246_25 0EE6                                   u247_25 0EFD  
                                 Blink@i 0029                                   Blink@n 0026  
                       _write_ram_status 08A2                         ??_ram_bulk_erase 0025  
                                 _TMR1IF 0060                                   _TMR1ON 0080  
           i1OperationMode@bracketStatus 0071            __size_of_IncreaseMemoryAdress 005C  
                     __size_of_ReadClock 0139                                   _SSPBUF 0013  
                              ??_ReadSPI 0023                           __CFG_PWRTE$OFF 0000  
                                 _Mode_0 1629                                   _Mode_1 16DB  
                                 _Mode_2 083D                                   _Mode_4 166B  
                                 _Mode_5 168D                       __size_of_SetRFMode 006F  
                   __size_of_eeprom_read 0024          TransiverReadFIFO@ReceivedString 00A0  
                                 ___bmul 169F                                   _tc_int 0E54  
                   __end_of_eeprom_write 08FE                                   _strchr 16C6  
                                 _strlen 0876                                   _strstr 07AE  
                                 saved_w 007E                        _ResetMemoryAdress 170F  
                    __end_of_RegisterSet 170F                            ?_RegisterRead 0070  
                     ?_ResetMemoryAdress 0070                       RegisterRead@adress 0026  
                              ??_strncmp 002B                       __size_of_WriteFIFO 000C  
                __end_of__initialization 0041                          eeprom_read@addr 0021  
                    ??_ResetMemoryAdress 0023                        __end_of_ClockInit 0D04  
                _LightWithSensController 0931                            _bChannelFound 0067  
                    ___bmul@multiplicand 0020                         ?_saveDataToFlash 0070  
                          __end_of_Blink 0931                           __pcstackCOMMON 0070  
                      ?_ReadMemoryAdress 0022                             __pidataBANK0 1626  
                           _channelFound 005B                       ??_ReadMemoryAdress 0024  
                      __end_of_ReadClock 05A6                __end_of_ResetMemoryAdress 1729  
                         _OPTION_REGbits 0081                                  ??_Blink 0028  
                      __end_of_SetRFMode 0BEE                        eeprom_write@value 0020  
                         ??_RegisterRead 0023                               __pbssBANK0 0056  
                             __pbssBANK1 00C2                               __pbssBANK3 0190  
               __size_ofi1_OperationMode 0009                                ?_ReadFIFO 0070  
             timerFunction@intSetSeconds 0022                       AnalogValue@channel 0027  
           __end_of_read_write_flash_ram 0C6A                 __size_of_TransmittPacket 00B2  
                                ?_Mode_0 0070                                  ?_Mode_1 0070  
                                ?_Mode_2 0070                                  ?_Mode_4 0070  
                                ?_Mode_5 0070                               __pmaintext 0D04  
                                ?___bmul 0020                               __pintentry 0004  
                                ?_tc_int 0070                                ?_WriteSPI 0070  
                      __end_of_WriteFIFO 0800                                  ?_strchr 0020  
                                ?_strlen 0020                              _RegisterSet 16F5  
                                ?_strstr 002E                                  _PICInit 0AAE  
                          ?_TimerCounter 0070               __end_of_TransiverToReceive 0A52  
                  __end_of_timerFunction 168D                             ?_AnalogValue 0070  
                             __stringtab 0800                               ??_ReadFIFO 0023  
                    SendMemoryData@addr1 0046                      SendMemoryData@addr2 0045  
                    SendMemoryData@addr3 0044           __size_of_ReceivedPacketHandler 01DD  
          __end_of_ReceivedPacketHandler 046D                                  _DelayDs 1767  
              ??_LightWithSensController 002A                            ReadClock@date 0026  
                          ReadClock@min1 0033                            ReadClock@sec1 0032  
                          ReadClock@hour 0025                      SendMemoryData@value 0043  
                          ReadClock@year 0028                                  _ReadSPI 162D  
                 __size_of_DarknessCheck 0027                          __size_of_Mode_0 0004  
                        __size_of_Mode_1 001A                          __size_of_Mode_2 000D  
                        __size_of_Mode_4 0010                          __size_of_Mode_5 0012  
             OperationMode@bracketStatus 0021                          _read_ram_status 16B2  
                  __size_of_eeprom_write 0030                          __size_of___bmul 0013  
                  read_ram_status@status 0024                             ?_FindChannel 0070  
                              _ANSELbits 0188                 __end_of_write_ram_status 08CE  
                             ??_WriteSPI 0020                          __size_of_tc_int 00C2  
                                __ptext1 0045                                  __ptext2 046D  
                                __ptext3 169F                                  __ptext4 0A52  
                                __ptext5 09F6                                  __ptext6 0B12  
                                __ptext7 0290                                  __ptext8 08A2  
                                __ptext9 07AE                          __size_of_strchr 0015  
                        __size_of_strlen 002C               __size_of_ResetMemoryAdress 001A  
                              _T1CONbits 0010                          __size_of_strstr 0046  
                         ??_TimerCounter 0070                     saveDataToFlash@addr1 0044  
                   saveDataToFlash@addr2 0045                     saveDataToFlash@addr3 0046  
read_write_flash_ram@one_read_zero_write 002D                     saveDataToFlash@hours 003F  
                   saveDataToFlash@month 0041                     saveDataToFlash@value 0043  
                                clrloop0 1636                                  _strncmp 09B2  
                   end_of_initialization 0041                             _eeprom_write 08CE  
                  __end_of_TransiverInit 1000                     TransmittPacket@value 0035  
                   TransmittPacket@topic 003A                   __size_of_OperationMode 0009  
                      ??i1_OperationMode 0070                         WriteSPI@databyte 0022  
                   __end_of_RegisterRead 1745                        ??_TransmittPacket 0036  
                          WriteFIFO@Data 0023             __end_of_IncreaseMemoryAdress 0AAE  
                                strlen@s 0026                          _intBlinkCounter 007C  
                   _read_write_flash_ram 0BEE                            _DarknessCheck 17AE  
                __end_of_read_ram_status 16C6                    SendMemoryData@address 0047  
                          ??_eeprom_read 0020                          ReadClock@date10 002E  
                         __end_of_Mode_0 162D                           __end_of_Mode_1 16F5  
                         __end_of_Mode_2 084A                           __end_of_Mode_4 167B  
                         __end_of_Mode_5 169F                                _ClockInit 0C6A  
                        ReadClock@hour10 002D                           __end_of___bmul 16B2  
                        ReadClock@month1 0035                          ReadClock@year10 0030  
                  ?_read_write_flash_ram 0025                           __end_of_tc_int 0F16  
                         ?_DarknessCheck 0070                            _OperationMode 1646  
                         __end_of_strchr 16DB                           __end_of_strlen 08A2  
                         __end_of_strstr 07F4                      start_initialization 0015  
                              _ReadClock 046D                __size_of_ReadMemoryAdress 002C  
                __size_of_SendMemoryData 0110                    _intDarkCheckIntervall 005F  
             DarknessCheck@darknessValue 0029                                _SetRFMode 0B7F  
                   __size_of_AnalogValue 002B                        __size_of_ReadFIFO 000E  
               __CFG_FOSC$INTRC_NOCLKOUT 0000                                 ??_Mode_0 002A  
                               ??_Mode_1 002A                                 ??_Mode_2 002A  
                               ??_Mode_4 003B                                 ??_Mode_5 003B  
                   __end_of_TimerCounter 09B2                                 ??___bmul 0021  
                             ?_ClockInit 0070                      __end_of_eeprom_read 17AE  
                          TimerCounter@i 0073                  __size_of_ram_bulk_erase 0022  
                            __pdataBANK0 006B                                 ??_tc_int 0075  
               __size_of_saveDataToFlash 024B                             ?_RegisterSet 0027  
                               ??_strchr 0022                                 ??_strlen 0022  
                               ??_strstr 002F                           ?_OperationMode 0070  
                   __size_of_FindChannel 00F8              read_write_flash_ram@mem_ptr 002A  
                      RegisterRead@value 0025                        __size_of_WriteSPI 000E  
                            __pbssCOMMON 007C                                ___latbits 0002  
                              _WriteFIFO 07F4                            __pcstackBANK0 0020  
                          __pcstackBANK1 00A0                                 ?_PICInit 0070  
                             ?_ReadClock 0024                             _ReceivedData 0190  
                 SetRFMode@mcparam0_read 002D                               ?_SetRFMode 0070  
                       eeprom_write@addr 0022                                 ?_DelayDs 0020  
                      RegisterSet@adress 002A                     _IncreaseMemoryAdress 0A52  
                       ?_read_ram_status 0070                   write_ram_status@status 0025  
                               ?_ReadSPI 0070                    __size_of_RegisterRead 001C  
                     _TransiverToReceive 09F6                      ?_TransiverToReceive 0070  
                 ??_read_write_flash_ram 002B                          ??_DarknessCheck 0028  
                              __pstrings 0800                        ?_write_ram_status 0070  
            timerFunction@intTimerNumber 0020                       ??_write_ram_status 0025  
                         __size_of_Blink 0033                               ?_WriteFIFO 0070  
                        i1_OperationMode 163D                     ??_TransiverToReceive 0035  
                           _RegisterRead 1729                                 ?_strncmp 0028  
                  ?_IncreaseMemoryAdress 0070                      saveDataToFlash@date 0040  
                        _TransmittPacket 0DA2                        interrupt_function 0004  
                    saveDataToFlash@year 0042                                 _IOCBbits 0096  
                               DelayDs@i 0024                             FindChannel@i 0033  
                  _ReceivedPacketHandler 0290                                clear_ram0 1635  
                            _eeprom_read 178A                                 _PIE1bits 008C  
                               _PIR1bits 000C                              ??_ClockInit 0023  
                           ClockInit@cnt 0024                   __size_of_timerFunction 0012  
                 saveDataToFlash@minutes 003E                   saveDataToFlash@seconds 003D  
                        ??_OperationMode 0020                            SetRFMode@mode 002C  
                             _ADCON0bits 001F                              __stringbase 0805  
                             _ADCON1bits 009F                                 _WPUBbits 0095  
                               _ChannelP 0806                                 _ChannelR 0813  
                               _ChannelS 0820                              ??_ReadClock 0029  
                         ReadClock@date1 0037                           _SendMemoryData 05A6  
                       _ReadMemoryAdress 084A                           ReadClock@min10 002C  
                         ReadClock@sec10 002B                        ??_saveDataToFlash 0038  
                         ReadClock@hour1 0034                         __size_of_PICInit 0064  
               ?_LightWithSensController 0070                           ReadClock@month 0027  
                         ReadClock@year1 0036                              ??_SetRFMode 002B  
                               _ReadFIFO 165D                    __size_of_TimerCounter 0042  
                       __size_of_DelayDs 0023         read_write_flash_ram@flash_sector 0027  
                       __size_of_ReadSPI 0008                           _bTimerComplete 0056  
                         _ram_bulk_erase 1745                         _intMinuteCounter 0063  
             read_write_flash_ram@offset 0029                        _TransiverReadFIFO 0B12  
                               _WriteSPI 164F                       __end_of__stringtab 0806  
                       _intSecondCounter 0065                       ?_TransiverReadFIFO 0070  
                             _ANSELHbits 0189                  __end_ofi1_OperationMode 1646  
                 __end_of_SendMemoryData 06B6                   __size_of_TransiverInit 00EA  
                   __size_of_RegisterSet 001A                         RegisterSet@value 0027  
                            ??_WriteFIFO 0023                  __end_of_TransmittPacket 0E54  
                           _TimerCounter 0970                                 __ptext10 09B2  
                               __ptext11 0876                                 __ptext20 1646  
                               __ptext12 16C6                                 __ptext21 165D  
                               __ptext13 1745                                 __ptext30 0B7F  
                               __ptext22 0F16                                 __ptext14 05A6  
                               __ptext31 16F5                                 __ptext23 08FE  
                               __ptext15 0BEE                                 __ptext40 17D5  
                               __ptext32 1729                                 __ptext24 0AAE  
                               __ptext16 16B2                                 __ptext41 1767  
                               __ptext33 083D                                 __ptext25 168D  
                               __ptext17 084A                                 __ptext42 0C6A  
                               __ptext34 16DB                                 __ptext26 166B  
                               __ptext18 170F                                 __ptext43 162D  
                               __ptext35 1629                                 __ptext27 0DA2  
                               __ptext19 08CE                                 __ptext44 164F  
                               __ptext36 0931                                 __ptext28 07F4  
                               __ptext45 0E54                                 __ptext37 167B  
                               __ptext29 06B6                                 __ptext46 163D  
                               __ptext38 17AE                                 __ptext47 0970  
                               __ptext39 178A                      ??_TransiverReadFIFO 0051  
                          _timerFunction 167B                   ??_IncreaseMemoryAdress 0023  
                       __size_of_strncmp 0044                   ?_ReceivedPacketHandler 0070  
                          __size_of_main 009E                               strncmp@len 0029  
                 __end_of_ram_bulk_erase 1767                            _bValueFromPot 006D  
              __end_of_TransiverReadFIFO 0B7F                               DelayDs@cnt 0020  
                         FindChannel@cnt 0031          __end_of_LightWithSensController 0970  
                       _bSaveDataToFlash 0069                     _intHalfSecondCounter 0061  
                        ?_SendMemoryData 0070                               _INTCONbits 000B  
         read_write_flash_ram@flash_page 0028                       TransiverReadFIFO@i 00BE  
                     TransiverReadFIFO@j 00C0                           ?_timerFunction 0020  
                          ??_AnalogValue 0026                                 intlevel1 0000  
                              strchr@chr 0020                                strchr@ptr 0022  
                          _TransiverInit 0F16   read_write_flash_ram@bytes_to_readwrite 0025  
                              strncmp@s1 002D                                strncmp@s2 0028  
                              stringcode 0800                               _OSCCONbits 008F  
                        ?_ram_bulk_erase 0070                            ??_FindChannel 002E  
                       ?i1_OperationMode 0070                                 strlen@cp 0027  
                               stringdir 0800                                 stringtab 0800  
                       ?_TransmittPacket 0035                                 strstr@s1 0032  
                               strstr@s2 002E                ReceivedPacketHandler@Data 0050  
              __size_of_write_ram_status 002C                            ?_eeprom_write 0020  
               IncreaseMemoryAdress@var1 0024                 IncreaseMemoryAdress@var2 0025  
               IncreaseMemoryAdress@var3 0026                           ?_TransiverInit 0070  
                           ?_eeprom_read 0070                      __end_of_AnalogValue 1800  
                             _SSPCONbits 0014                 __end_of_ReadMemoryAdress 0876  
