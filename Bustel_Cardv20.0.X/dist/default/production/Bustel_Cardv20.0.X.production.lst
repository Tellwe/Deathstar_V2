

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Jan 07 11:38:40 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.40
    49                           ; Generated 01/12/2016 GMT
    50                           ; 
    51                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F887 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000D                     	;# 
    96  000E                     	;# 
    97  000E                     	;# 
    98  000F                     	;# 
    99  0010                     	;# 
   100  0011                     	;# 
   101  0012                     	;# 
   102  0013                     	;# 
   103  0014                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001B                     	;# 
   113  001C                     	;# 
   114  001D                     	;# 
   115  001E                     	;# 
   116  001F                     	;# 
   117  0081                     	;# 
   118  0085                     	;# 
   119  0086                     	;# 
   120  0087                     	;# 
   121  0088                     	;# 
   122  0089                     	;# 
   123  008C                     	;# 
   124  008D                     	;# 
   125  008E                     	;# 
   126  008F                     	;# 
   127  0090                     	;# 
   128  0091                     	;# 
   129  0092                     	;# 
   130  0093                     	;# 
   131  0093                     	;# 
   132  0093                     	;# 
   133  0094                     	;# 
   134  0095                     	;# 
   135  0096                     	;# 
   136  0097                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009A                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  0105                     	;# 
   146  0107                     	;# 
   147  0108                     	;# 
   148  0109                     	;# 
   149  010C                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  010E                     	;# 
   153  010F                     	;# 
   154  0185                     	;# 
   155  0187                     	;# 
   156  0188                     	;# 
   157  0189                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  000E                     	;# 
   176  000F                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0014                     	;# 
   182  0015                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  0087                     	;# 
   199  0088                     	;# 
   200  0089                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  008F                     	;# 
   205  0090                     	;# 
   206  0091                     	;# 
   207  0092                     	;# 
   208  0093                     	;# 
   209  0093                     	;# 
   210  0093                     	;# 
   211  0094                     	;# 
   212  0095                     	;# 
   213  0096                     	;# 
   214  0097                     	;# 
   215  0098                     	;# 
   216  0099                     	;# 
   217  009A                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  0105                     	;# 
   224  0107                     	;# 
   225  0108                     	;# 
   226  0109                     	;# 
   227  010C                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  010F                     	;# 
   232  0185                     	;# 
   233  0187                     	;# 
   234  0188                     	;# 
   235  0189                     	;# 
   236  018C                     	;# 
   237  018D                     	;# 
   238                           
   239                           	psect	idataBANK0
   240  0E95                     __pidataBANK0:	
   241                           
   242                           ;initializer for _intNumberOfBlinks
   243  0E95  3458               	retlw	88
   244  0E96  3402               	retlw	2
   245                           
   246                           ;initializer for _bValueFromPot
   247  0E97  3401               	retlw	1
   248                           
   249                           	psect	strings
   250  07C2                     __pstrings:	
   251  07C2                     stringtab:	
   252  07C2                     __stringtab:	
   253  07C2                     stringcode:	
   254                           ;	String table - string pointers are 1 byte each
   255                           
   256  07C2                     stringdir:	
   257  07C2  3007               	movlw	high stringdir
   258  07C3  008A               	movwf	10
   259  07C4  0804               	movf	4,w
   260  07C5  0A84               	incf	4,f
   261  07C6  0782               	addwf	2,f
   262  07C7                     __stringbase:	
   263  07C7  3400               	retlw	0
   264  07C8                     __end_of__stringtab:	
   265  07C8                     _ChannelP:	
   266  07C8  343F               	retlw	63
   267  07C9  3447               	retlw	71
   268  07CA  344F               	retlw	79
   269  07CB  3457               	retlw	87
   270  07CC  345F               	retlw	95
   271  07CD  3477               	retlw	119
   272  07CE  347E               	retlw	126
   273  07CF  347F               	retlw	127
   274  07D0  3486               	retlw	134
   275  07D1  3487               	retlw	135
   276  07D2  3437               	retlw	55
   277  07D3  3467               	retlw	103
   278  07D4  346F               	retlw	111
   279  07D5                     __end_of_ChannelP:	
   280  07D5                     _ChannelR:	
   281  07D5  344F               	retlw	79
   282  07D6  3459               	retlw	89
   283  07D7  3463               	retlw	99
   284  07D8  346D               	retlw	109
   285  07D9  3477               	retlw	119
   286  07DA  3495               	retlw	149
   287  07DB  349F               	retlw	159
   288  07DC  349F               	retlw	159
   289  07DD  34A9               	retlw	169
   290  07DE  34A9               	retlw	169
   291  07DF  3445               	retlw	69
   292  07E0  3481               	retlw	129
   293  07E1  348B               	retlw	139
   294  07E2                     __end_of_ChannelR:	
   295  07E2                     _ChannelS:	
   296  07E2  3418               	retlw	24
   297  07E3  341B               	retlw	27
   298  07E4  341E               	retlw	30
   299  07E5  3421               	retlw	33
   300  07E6  3424               	retlw	36
   301  07E7  342D               	retlw	45
   302  07E8  347B               	retlw	123
   303  07E9  3430               	retlw	48
   304  07EA  347E               	retlw	126
   305  07EB  3433               	retlw	51
   306  07EC  3415               	retlw	21
   307  07ED  3427               	retlw	39
   308  07EE  342A               	retlw	42
   309  07EF                     __end_of_ChannelS:	
   310  001F                     _ADCON0bits	set	31
   311  001E                     _ADRESH	set	30
   312  000B                     _INTCONbits	set	11
   313  000C                     _PIR1bits	set	12
   314  0005                     _PORTA	set	5
   315  0006                     _PORTB	set	6
   316  0007                     _PORTC	set	7
   317  0008                     _PORTD	set	8
   318  0009                     _PORTE	set	9
   319  0013                     _SSPBUF	set	19
   320  0014                     _SSPCONbits	set	20
   321  0010                     _T1CON	set	16
   322  0010                     _T1CONbits	set	16
   323  000F                     _TMR1H	set	15
   324  000E                     _TMR1L	set	14
   325  005F                     _GIE	set	95
   326  0029                     _RA1	set	41
   327  002C                     _RA4	set	44
   328  002D                     _RA5	set	45
   329  0031                     _RB1	set	49
   330  0032                     _RB2	set	50
   331  0034                     _RB4	set	52
   332  0035                     _RB5	set	53
   333  0058                     _RBIF	set	88
   334  0038                     _RC0	set	56
   335  0039                     _RC1	set	57
   336  003A                     _RC2	set	58
   337  0040                     _RD0	set	64
   338  0043                     _RD3	set	67
   339  0044                     _RD4	set	68
   340  0060                     _TMR1IF	set	96
   341  0080                     _TMR1ON	set	128
   342  009F                     _ADCON1bits	set	159
   343  0096                     _IOCBbits	set	150
   344  0081                     _OPTION_REGbits	set	129
   345  008F                     _OSCCONbits	set	143
   346  008C                     _PIE1bits	set	140
   347  0094                     _SSPSTATbits	set	148
   348  0085                     _TRISA	set	133
   349  0086                     _TRISB	set	134
   350  0087                     _TRISC	set	135
   351  0088                     _TRISD	set	136
   352  0089                     _TRISE	set	137
   353  0095                     _WPUBbits	set	149
   354  0463                     _SSPIE	set	1123
   355  010D                     _EEADR	set	269
   356  010C                     _EEDATA	set	268
   357  0188                     _ANSEL	set	392
   358  0189                     _ANSELH	set	393
   359  0189                     _ANSELHbits	set	393
   360  0188                     _ANSELbits	set	392
   361  018C                     _EECON1	set	396
   362  0C60                     _RD	set	3168
   363  0C61                     _WR	set	3169
   364                           
   365                           ; #config settings
   366  0000                     
   367                           	psect	cinit
   368  0015                     start_initialization:	
   369  0015                     __initialization:	
   370                           
   371                           ; Initialize objects allocated to BANK0
   372  0015  120A  158A  2695  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   373  001A  00ED               	movwf	__pdataBANK0& (0+127)
   374  001B  120A  158A  2696  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   375  0020  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   376  0021  120A  158A  2697  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   377  0026  00EF               	movwf	(__pdataBANK0+2)& (0+127)
   378                           
   379                           ; Clear objects allocated to BANK1
   380  0027  1383               	bcf	3,7	;select IRP bank0
   381  0028  30A0               	movlw	low __pbssBANK1
   382  0029  0084               	movwf	4
   383  002A  30DF               	movlw	low (__pbssBANK1+63)
   384  002B  120A  158A  26A4  120A  118A  	fcall	clear_ram0
   385                           
   386                           ; Clear objects allocated to BANK0
   387  0030  3064               	movlw	low __pbssBANK0
   388  0031  0084               	movwf	4
   389  0032  306D               	movlw	low (__pbssBANK0+9)
   390  0033  120A  158A  26A4   	fcall	clear_ram0
   391                           
   392                           ; Clear objects allocated to COMMON
   393  0036  01FC               	clrf	__pbssCOMMON& (0+127)
   394  0037  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   395  0038                     end_of_initialization:	
   396                           ;End of C runtime variable initialization code
   397                           
   398  0038                     __end_of__initialization:	
   399  0038  0183               	clrf	3
   400  0039  120A  118A  2CE5   	ljmp	_main	;jump to C main() function
   401                           
   402                           	psect	bssCOMMON
   403  007C                     __pbssCOMMON:	
   404  007C                     _intBlinkCounter:	
   405  007C                     	ds	2
   406                           
   407                           	psect	bssBANK0
   408  0064                     __pbssBANK0:	
   409  0064                     _addressDarknessValue:	
   410  0064                     	ds	2
   411  0066                     _intBlinkCycle:	
   412  0066                     	ds	2
   413  0068                     _intSecondCounter:	
   414  0068                     	ds	2
   415  006A                     _bChannelFound:	
   416  006A                     	ds	1
   417  006B                     _bDark:	
   418  006B                     	ds	1
   419  006C                     _bTransiverModeReceive:	
   420  006C                     	ds	1
   421                           
   422                           	psect	dataBANK0
   423  006D                     __pdataBANK0:	
   424  006D                     _intNumberOfBlinks:	
   425  006D                     	ds	2
   426  006F                     _bValueFromPot:	
   427  006F                     	ds	1
   428                           
   429                           	psect	bssBANK1
   430  00A0                     __pbssBANK1:	
   431  00A0                     _ReceivedData:	
   432  00A0                     	ds	40
   433  00C8                     _intClockTimer:	
   434  00C8                     	ds	10
   435  00D2                     _bTimerComplete:	
   436  00D2                     	ds	5
   437  00D7                     _channelFound:	
   438  00D7                     	ds	2
   439  00D9                     _intDarkCheckIntervall:	
   440  00D9                     	ds	2
   441  00DB                     _intHalfSecondCounter:	
   442  00DB                     	ds	2
   443  00DD                     _intMinuteCounter:	
   444  00DD                     	ds	2
   445                           
   446                           	psect	clrtext
   447  0EA4                     clear_ram0:	
   448                           ;	Called with FSR containing the base address, and
   449                           ;	W with the last address+1
   450                           
   451  0EA4  0064               	clrwdt	;clear the watchdog before getting into this loop
   452  0EA5                     clrloop0:	
   453  0EA5  0180               	clrf	0	;clear RAM location pointed to by FSR
   454  0EA6  0A84               	incf	4,f	;increment pointer
   455  0EA7  0604               	xorwf	4,w	;XOR with final address
   456  0EA8  1903               	btfsc	3,2	;have we reached the end yet?
   457  0EA9  3400               	retlw	0	;all done for this memory range, return
   458  0EAA  0604               	xorwf	4,w	;XOR again to restore value
   459  0EAB  2EA5               	goto	clrloop0	;do the next byte
   460                           
   461                           	psect	cstackCOMMON
   462  0070                     __pcstackCOMMON:	
   463  0070                     ?_init:	
   464  0070                     ?_TransiverInit:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_OperationMode:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_Mode_0:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_Mode_1:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_Mode_2:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_Mode_4:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_Mode_5:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_TransiverToReceive:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?_TransiverReadFIFO:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_SetRFMode:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?_RegisterRead:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_FindChannel:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ?_ReadFIFO:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ?_ReceivedPacketHandler:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0070                     ?_AnalogValue:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0070                     ?_eeprom_read:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0070                     ?_DarknessCheck:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     ?_WriteFIFO:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     ?_LightWithSensController:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     ?_TimerCounter:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0070                     ??_TimerCounter:	
   525                           ; 1 bytes @ 0x0
   526                           
   527  0070                     ?_WriteSPI:	
   528                           ; 1 bytes @ 0x0
   529                           
   530  0070                     ?_ReadSPI:	
   531                           ; 1 bytes @ 0x0
   532                           
   533  0070                     ?_tc_int:	
   534                           ; 1 bytes @ 0x0
   535                           
   536  0070                     ?i1_OperationMode:	
   537                           ; 1 bytes @ 0x0
   538                           
   539  0070                     ??i1_OperationMode:	
   540                           ; 1 bytes @ 0x0
   541                           
   542  0070                     ?_main:	
   543                           ; 1 bytes @ 0x0
   544                           
   545                           
   546                           ; 2 bytes @ 0x0
   547  0070                     	ds	1
   548  0071                     i1OperationMode@bracketStatus:	
   549                           
   550                           ; 1 bytes @ 0x1
   551  0071                     	ds	2
   552  0073                     TimerCounter@i:	
   553                           
   554                           ; 2 bytes @ 0x3
   555  0073                     	ds	2
   556  0075                     ??_tc_int:	
   557                           
   558                           ; 1 bytes @ 0x5
   559  0075                     	ds	7
   560                           
   561                           	psect	cstackBANK0
   562  0020                     __pcstackBANK0:	
   563  0020                     ??_init:	
   564  0020                     ??_OperationMode:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0020                     ?_timerFunction:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0020                     ?_DelayDs:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0020                     ??_eeprom_read:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0020                     ??_WriteSPI:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0020                     timerFunction@intTimerNumber:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0020                     DelayDs@cnt:	
   583                           ; 2 bytes @ 0x0
   584                           
   585                           
   586                           ; 2 bytes @ 0x0
   587  0020                     	ds	1
   588  0021                     WriteSPI@buffer:	
   589  0021                     OperationMode@bracketStatus:	
   590                           ; 1 bytes @ 0x1
   591                           
   592  0021                     eeprom_read@addr:	
   593                           ; 1 bytes @ 0x1
   594                           
   595                           
   596                           ; 1 bytes @ 0x1
   597  0021                     	ds	1
   598  0022                     ??_DelayDs:	
   599  0022                     WriteSPI@databyte:	
   600                           ; 1 bytes @ 0x2
   601                           
   602  0022                     timerFunction@intSetSeconds:	
   603                           ; 1 bytes @ 0x2
   604                           
   605                           
   606                           ; 2 bytes @ 0x2
   607  0022                     	ds	1
   608  0023                     ??_RegisterRead:	
   609  0023                     ??_ReadFIFO:	
   610                           ; 1 bytes @ 0x3
   611                           
   612  0023                     ??_WriteFIFO:	
   613                           ; 1 bytes @ 0x3
   614                           
   615  0023                     ??_ReadSPI:	
   616                           ; 1 bytes @ 0x3
   617                           
   618  0023                     WriteFIFO@Data:	
   619                           ; 1 bytes @ 0x3
   620                           
   621                           
   622                           ; 1 bytes @ 0x3
   623  0023                     	ds	1
   624  0024                     ??_timerFunction:	
   625  0024                     ReadFIFO@value:	
   626                           ; 1 bytes @ 0x4
   627                           
   628  0024                     DelayDs@i:	
   629                           ; 1 bytes @ 0x4
   630                           
   631                           
   632                           ; 2 bytes @ 0x4
   633  0024                     	ds	1
   634  0025                     RegisterRead@value:	
   635                           
   636                           ; 1 bytes @ 0x5
   637  0025                     	ds	1
   638  0026                     ??_AnalogValue:	
   639  0026                     ?_Blink:	
   640                           ; 1 bytes @ 0x6
   641                           
   642  0026                     RegisterRead@adress:	
   643                           ; 1 bytes @ 0x6
   644                           
   645  0026                     Blink@n:	
   646                           ; 1 bytes @ 0x6
   647                           
   648                           
   649                           ; 2 bytes @ 0x6
   650  0026                     	ds	1
   651  0027                     ?_RegisterSet:	
   652  0027                     RegisterSet@value:	
   653                           ; 1 bytes @ 0x7
   654                           
   655  0027                     AnalogValue@channel:	
   656                           ; 1 bytes @ 0x7
   657                           
   658                           
   659                           ; 1 bytes @ 0x7
   660  0027                     	ds	1
   661  0028                     ??_RegisterSet:	
   662  0028                     ??_DarknessCheck:	
   663                           ; 1 bytes @ 0x8
   664                           
   665  0028                     ??_Blink:	
   666                           ; 1 bytes @ 0x8
   667                           
   668                           
   669                           ; 1 bytes @ 0x8
   670  0028                     	ds	1
   671  0029                     DarknessCheck@darknessValue:	
   672  0029                     Blink@i:	
   673                           ; 1 bytes @ 0x9
   674                           
   675                           
   676                           ; 2 bytes @ 0x9
   677  0029                     	ds	1
   678  002A                     ??_Mode_0:	
   679  002A                     ??_Mode_1:	
   680                           ; 1 bytes @ 0xA
   681                           
   682  002A                     ??_Mode_2:	
   683                           ; 1 bytes @ 0xA
   684                           
   685  002A                     ??_LightWithSensController:	
   686                           ; 1 bytes @ 0xA
   687                           
   688  002A                     RegisterSet@adress:	
   689                           ; 1 bytes @ 0xA
   690                           
   691                           
   692                           ; 1 bytes @ 0xA
   693  002A                     	ds	1
   694  002B                     ??_SetRFMode:	
   695                           
   696                           ; 1 bytes @ 0xB
   697  002B                     	ds	1
   698  002C                     SetRFMode@mode:	
   699                           
   700                           ; 1 bytes @ 0xC
   701  002C                     	ds	1
   702  002D                     SetRFMode@mcparam0_read:	
   703                           
   704                           ; 1 bytes @ 0xD
   705  002D                     	ds	1
   706  002E                     ??_FindChannel:	
   707                           
   708                           ; 1 bytes @ 0xE
   709  002E                     	ds	3
   710  0031                     FindChannel@cnt:	
   711                           
   712                           ; 2 bytes @ 0x11
   713  0031                     	ds	2
   714  0033                     FindChannel@i:	
   715                           
   716                           ; 2 bytes @ 0x13
   717  0033                     	ds	2
   718  0035                     ??_TransiverInit:	
   719  0035                     ?_TransmittPacket:	
   720                           ; 1 bytes @ 0x15
   721                           
   722  0035                     ??_TransiverToReceive:	
   723                           ; 1 bytes @ 0x15
   724                           
   725  0035                     TransmittPacket@value:	
   726                           ; 1 bytes @ 0x15
   727                           
   728                           
   729                           ; 1 bytes @ 0x15
   730  0035                     	ds	1
   731  0036                     ??_TransmittPacket:	
   732                           
   733                           ; 1 bytes @ 0x16
   734  0036                     	ds	2
   735  0038                     TransmittPacket@i:	
   736                           
   737                           ; 2 bytes @ 0x18
   738  0038                     	ds	2
   739  003A                     TransmittPacket@topic:	
   740                           
   741                           ; 1 bytes @ 0x1A
   742  003A                     	ds	1
   743  003B                     ??_Mode_4:	
   744  003B                     ??_Mode_5:	
   745                           ; 1 bytes @ 0x1B
   746                           
   747  003B                     ??_ReceivedPacketHandler:	
   748                           ; 1 bytes @ 0x1B
   749                           
   750                           
   751                           ; 1 bytes @ 0x1B
   752  003B                     	ds	1
   753  003C                     ReceivedPacketHandler@Data:	
   754                           
   755                           ; 1 bytes @ 0x1C
   756  003C                     	ds	1
   757  003D                     ??_TransiverReadFIFO:	
   758                           
   759                           ; 1 bytes @ 0x1D
   760  003D                     	ds	2
   761  003F                     TransiverReadFIFO@ReceivedString:	
   762                           
   763                           ; 30 bytes @ 0x1F
   764  003F                     	ds	30
   765  005D                     TransiverReadFIFO@i:	
   766                           
   767                           ; 2 bytes @ 0x3D
   768  005D                     	ds	2
   769  005F                     TransiverReadFIFO@j:	
   770                           
   771                           ; 2 bytes @ 0x3F
   772  005F                     	ds	2
   773  0061                     ??_main:	
   774                           
   775                           ; 1 bytes @ 0x41
   776  0061                     	ds	3
   777                           
   778                           	psect	maintext
   779  04E5                     __pmaintext:	
   780 ;;
   781 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   782 ;;
   783 ;; *************** function _main *****************
   784 ;; Defined at:
   785 ;;		line 28 in file "main.c"
   786 ;; Parameters:    Size  Location     Type
   787 ;;		None
   788 ;; Auto vars:     Size  Location     Type
   789 ;;		None
   790 ;; Return value:  Size  Location     Type
   791 ;;                  2   70[None  ] int 
   792 ;; Registers used:
   793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : B00/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   799 ;;      Params:         0       0       0       0       0
   800 ;;      Locals:         0       0       0       0       0
   801 ;;      Temps:          0       3       0       0       0
   802 ;;      Totals:         0       3       0       0       0
   803 ;;Total ram usage:        3 bytes
   804 ;; Hardware stack levels required when called:   10
   805 ;; This function calls:
   806 ;;		_Mode_0
   807 ;;		_Mode_1
   808 ;;		_Mode_2
   809 ;;		_Mode_4
   810 ;;		_Mode_5
   811 ;;		_OperationMode
   812 ;;		_TransiverInit
   813 ;;		_TransiverReadFIFO
   814 ;;		_TransiverToReceive
   815 ;;		_TransmittPacket
   816 ;;		_init
   817 ;; This function is called by:
   818 ;;		Startup code after reset
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           
   823                           ;psect for function _main
   824  04E5                     _main:	
   825                           
   826                           ;main.c: 31: init();
   827                           
   828                           ;incstack = 0
   829 ;; hardware stack exceeded
   830                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   831  04E5  120A  118A  264D  120A  118A  	fcall	_init
   832                           
   833                           ;main.c: 33: TransiverInit();
   834  04EA  120A  118A  2288  120A  118A  	fcall	_TransiverInit
   835                           
   836                           ;main.c: 36: RB2 = 0;
   837  04EF  1283               	bcf	3,5	;RP0=0, select bank0
   838  04F0  1303               	bcf	3,6	;RP1=0, select bank0
   839  04F1  1106               	bcf	6,2	;volatile
   840                           
   841                           ;main.c: 37: _delay((unsigned long)((300)*(4000000/4000.0)));
   842  04F2  3002               	movlw	2
   843  04F3  1283               	bcf	3,5	;RP0=0, select bank0
   844  04F4  1303               	bcf	3,6	;RP1=0, select bank0
   845  04F5  00E3               	movwf	??_main+2
   846  04F6  3086               	movlw	134
   847  04F7  00E2               	movwf	??_main+1
   848  04F8  3098               	movlw	152
   849  04F9  00E1               	movwf	??_main
   850  04FA                     u1557:	
   851  04FA  0BE1               	decfsz	??_main,f
   852  04FB  2CFA               	goto	u1557
   853  04FC  0BE2               	decfsz	??_main+1,f
   854  04FD  2CFA               	goto	u1557
   855  04FE  0BE3               	decfsz	??_main+2,f
   856  04FF  2CFA               	goto	u1557
   857  0500  0000               	nop
   858                           
   859                           ;main.c: 38: RB2 = 1;
   860  0501  1283               	bcf	3,5	;RP0=0, select bank0
   861  0502  1303               	bcf	3,6	;RP1=0, select bank0
   862  0503  1506               	bsf	6,2	;volatile
   863                           
   864                           ;main.c: 39: _delay((unsigned long)((300)*(4000000/4000.0)));
   865  0504  3002               	movlw	2
   866  0505  1283               	bcf	3,5	;RP0=0, select bank0
   867  0506  1303               	bcf	3,6	;RP1=0, select bank0
   868  0507  00E3               	movwf	??_main+2
   869  0508  3086               	movlw	134
   870  0509  00E2               	movwf	??_main+1
   871  050A  3098               	movlw	152
   872  050B  00E1               	movwf	??_main
   873  050C                     u1567:	
   874  050C  0BE1               	decfsz	??_main,f
   875  050D  2D0C               	goto	u1567
   876  050E  0BE2               	decfsz	??_main+1,f
   877  050F  2D0C               	goto	u1567
   878  0510  0BE3               	decfsz	??_main+2,f
   879  0511  2D0C               	goto	u1567
   880  0512  0000               	nop
   881  0513                     l2098:	
   882                           ;main.c: 43: while(1)
   883                           
   884                           
   885                           ;main.c: 44: {
   886                           ;main.c: 45: if(!RB1)
   887  0513  1283               	bcf	3,5	;RP0=0, select bank0
   888  0514  1303               	bcf	3,6	;RP1=0, select bank0
   889  0515  1886               	btfsc	6,1	;volatile
   890  0516  2D1F               	goto	l2102
   891                           
   892                           ;main.c: 46: TransmittPacket(1, 1);
   893  0517  01B5               	clrf	TransmittPacket@value
   894  0518  0AB5               	incf	TransmittPacket@value,f
   895  0519  3001               	movlw	1
   896  051A  120A  118A  2436  120A  118A  	fcall	_TransmittPacket
   897  051F                     l2102:	
   898                           
   899                           ;main.c: 48: if(OperationMode() == 0)
   900  051F  120A  158A  26B5  120A  118A  	fcall	_OperationMode
   901  0524  3A00               	xorlw	0
   902  0525  1D03               	skipz
   903  0526  2D2C               	goto	l2106
   904                           
   905                           ;main.c: 49: {
   906                           ;main.c: 50: Mode_0();
   907  0527  120A  158A  2698  120A  118A  	fcall	_Mode_0
   908  052C                     l2106:	
   909                           
   910                           ;main.c: 51: }
   911                           ;main.c: 52: if(OperationMode() == 1)
   912  052C  120A  158A  26B5  120A  118A  	fcall	_OperationMode
   913  0531  3A01               	xorlw	1
   914  0532  1D03               	skipz
   915  0533  2D39               	goto	l2110
   916                           
   917                           ;main.c: 53: {
   918                           ;main.c: 54: Mode_1();
   919  0534  120A  158A  2717  120A  118A  	fcall	_Mode_1
   920  0539                     l2110:	
   921                           
   922                           ;main.c: 55: }
   923                           ;main.c: 57: if(OperationMode() == 2)
   924  0539  120A  158A  26B5  120A  118A  	fcall	_OperationMode
   925  053E  3A02               	xorlw	2
   926  053F  1D03               	skipz
   927  0540  2D46               	goto	l2114
   928                           
   929                           ;main.c: 58: {
   930                           ;main.c: 59: Mode_2();
   931  0541  120A  158A  26CA  120A  118A  	fcall	_Mode_2
   932  0546                     l2114:	
   933                           
   934                           ;main.c: 60: }
   935                           ;main.c: 62: if(OperationMode() == 4)
   936  0546  120A  158A  26B5  120A  118A  	fcall	_OperationMode
   937  054B  3A04               	xorlw	4
   938  054C  1D03               	skipz
   939  054D  2D53               	goto	l2118
   940                           
   941                           ;main.c: 63: {
   942                           ;main.c: 64: Mode_4();
   943  054E  120A  118A  27EF  120A  118A  	fcall	_Mode_4
   944  0553                     l2118:	
   945                           
   946                           ;main.c: 65: }
   947                           ;main.c: 67: if(OperationMode() == 5)
   948  0553  120A  158A  26B5  120A  118A  	fcall	_OperationMode
   949  0558  3A05               	xorlw	5
   950  0559  1D03               	skipz
   951  055A  2D60               	goto	l2122
   952                           
   953                           ;main.c: 68: {
   954                           ;main.c: 69: Mode_5();
   955  055B  120A  158A  2705  120A  118A  	fcall	_Mode_5
   956  0560                     l2122:	
   957                           
   958                           ;main.c: 70: }
   959                           ;main.c: 74: if(!bTransiverModeReceive)
   960  0560  1283               	bcf	3,5	;RP0=0, select bank0
   961  0561  1303               	bcf	3,6	;RP1=0, select bank0
   962  0562  086C               	movf	_bTransiverModeReceive,w
   963  0563  1D03               	btfss	3,2
   964  0564  2D6A               	goto	l2126
   965                           
   966                           ;main.c: 75: TransiverToReceive();
   967  0565  120A  118A  26B2  120A  118A  	fcall	_TransiverToReceive
   968  056A                     l2126:	
   969                           
   970                           ;main.c: 76: if(RB4 && bTransiverModeReceive)
   971  056A  1283               	bcf	3,5	;RP0=0, select bank0
   972  056B  1303               	bcf	3,6	;RP1=0, select bank0
   973  056C  1E06               	btfss	6,4	;volatile
   974  056D  2D13               	goto	l2098
   975  056E  086C               	movf	_bTransiverModeReceive,w
   976  056F  1903               	btfsc	3,2
   977  0570  2D13               	goto	l2098
   978                           
   979                           ;main.c: 77: TransiverReadFIFO();
   980  0571  120A  118A  25E6  120A  118A  	fcall	_TransiverReadFIFO
   981  0576  2D13               	goto	l2098
   982  0577                     __end_of_main:	
   983                           
   984                           	psect	text1
   985  064D                     __ptext1:	
   986 ;; *************** function _init *****************
   987 ;; Defined at:
   988 ;;		line 385 in file "functions.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, status,2, status,0
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1002 ;;      Params:         0       0       0       0       0
  1003 ;;      Locals:         0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0
  1005 ;;      Totals:         0       0       0       0       0
  1006 ;;Total ram usage:        0 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:    2
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           
  1017                           ;psect for function _init
  1018  064D                     _init:	
  1019                           
  1020                           ;functions.c: 388: OSCCONbits.IRCF2 = 1;
  1021                           
  1022                           ;incstack = 0
  1023                           ; Regs used in _init: [wreg+status,2+status,0]
  1024  064D  1683               	bsf	3,5	;RP0=1, select bank1
  1025  064E  1303               	bcf	3,6	;RP1=0, select bank1
  1026  064F  170F               	bsf	15,6	;volatile
  1027                           
  1028                           ;functions.c: 389: OSCCONbits.IRCF1 = 1;
  1029  0650  168F               	bsf	15,5	;volatile
  1030                           
  1031                           ;functions.c: 390: OSCCONbits.IRCF0 = 0;
  1032  0651  120F               	bcf	15,4	;volatile
  1033                           
  1034                           ;functions.c: 391: OSCCONbits.SCS = 1;
  1035  0652  140F               	bsf	15,0	;volatile
  1036                           
  1037                           ;functions.c: 394: PORTA = 0x00;
  1038  0653  1283               	bcf	3,5	;RP0=0, select bank0
  1039  0654  1303               	bcf	3,6	;RP1=0, select bank0
  1040  0655  0185               	clrf	5	;volatile
  1041                           
  1042                           ;functions.c: 395: PORTB = 0x00;
  1043  0656  0186               	clrf	6	;volatile
  1044                           
  1045                           ;functions.c: 396: PORTC = 0x00;
  1046  0657  0187               	clrf	7	;volatile
  1047                           
  1048                           ;functions.c: 397: PORTD = 0x00;
  1049  0658  0188               	clrf	8	;volatile
  1050                           
  1051                           ;functions.c: 398: PORTE = 0x00;
  1052  0659  0189               	clrf	9	;volatile
  1053                           
  1054                           ;functions.c: 400: TRISA = 0b00001011;
  1055  065A  300B               	movlw	11
  1056  065B  1683               	bsf	3,5	;RP0=1, select bank1
  1057  065C  1303               	bcf	3,6	;RP1=0, select bank1
  1058  065D  0085               	movwf	5	;volatile
  1059                           
  1060                           ;functions.c: 401: TRISB = 0b00110010;
  1061  065E  3032               	movlw	50
  1062  065F  0086               	movwf	6	;volatile
  1063                           
  1064                           ;functions.c: 402: TRISC = 0b00010000;
  1065  0660  3010               	movlw	16
  1066  0661  0087               	movwf	7	;volatile
  1067                           
  1068                           ;functions.c: 403: TRISD = 0b00000111;
  1069  0662  3007               	movlw	7
  1070  0663  0088               	movwf	8	;volatile
  1071                           
  1072                           ;functions.c: 404: TRISE = 0b00000111;
  1073  0664  3007               	movlw	7
  1074  0665  0089               	movwf	9	;volatile
  1075                           
  1076                           ;functions.c: 406: ANSEL = 0b00000000;
  1077  0666  1683               	bsf	3,5	;RP0=1, select bank3
  1078  0667  1703               	bsf	3,6	;RP1=1, select bank3
  1079  0668  0188               	clrf	8	;volatile
  1080                           
  1081                           ;functions.c: 407: ANSELH = 0b00000000;
  1082  0669  0189               	clrf	9	;volatile
  1083                           
  1084                           ;functions.c: 408: ANSELbits.ANS0 = 1;
  1085  066A  1408               	bsf	8,0	;volatile
  1086                           
  1087                           ;functions.c: 409: ANSELbits.ANS3 = 1;
  1088  066B  1588               	bsf	8,3	;volatile
  1089                           
  1090                           ;functions.c: 410: ANSELbits.ANS5 = 1;
  1091  066C  1688               	bsf	8,5	;volatile
  1092                           
  1093                           ;functions.c: 411: ANSELbits.ANS6 = 1;
  1094  066D  1708               	bsf	8,6	;volatile
  1095                           
  1096                           ;functions.c: 412: ANSELbits.ANS7 = 1;
  1097  066E  1788               	bsf	8,7	;volatile
  1098                           
  1099                           ;functions.c: 413: ANSELHbits.ANS9 = 1;
  1100  066F  1489               	bsf	9,1	;volatile
  1101                           
  1102                           ;functions.c: 415: OPTION_REGbits.nRBPU = 0;
  1103  0670  1683               	bsf	3,5	;RP0=1, select bank1
  1104  0671  1303               	bcf	3,6	;RP1=0, select bank1
  1105  0672  1381               	bcf	1,7	;volatile
  1106                           
  1107                           ;functions.c: 416: WPUBbits.WPUB1 = 1;
  1108  0673  1495               	bsf	21,1	;volatile
  1109  0674                     l359:	
  1110                           ;functions.c: 417: while(!RB1);
  1111                           
  1112  0674  1283               	bcf	3,5	;RP0=0, select bank0
  1113  0675  1C86               	btfss	6,1	;volatile
  1114  0676  2E74               	goto	l359
  1115                           
  1116                           ;functions.c: 418: WPUBbits.WPUB5 = 1;
  1117  0677  1683               	bsf	3,5	;RP0=1, select bank1
  1118  0678  1303               	bcf	3,6	;RP1=0, select bank1
  1119  0679  1695               	bsf	21,5	;volatile
  1120  067A                     l362:	
  1121                           ;functions.c: 419: while(!RB5);
  1122                           
  1123  067A  1283               	bcf	3,5	;RP0=0, select bank0
  1124  067B  1E86               	btfss	6,5	;volatile
  1125  067C  2E7A               	goto	l362
  1126                           
  1127                           ;functions.c: 422: SSPCONbits.SSPM=0x00;
  1128  067D  30F0               	movlw	-16
  1129  067E  0594               	andwf	20,f	;volatile
  1130                           
  1131                           ;functions.c: 423: SSPCONbits.CKP=0;
  1132  067F  1214               	bcf	20,4	;volatile
  1133                           
  1134                           ;functions.c: 424: SSPSTATbits.CKE=1;
  1135  0680  1683               	bsf	3,5	;RP0=1, select bank1
  1136  0681  1303               	bcf	3,6	;RP1=0, select bank1
  1137  0682  1714               	bsf	20,6	;volatile
  1138                           
  1139                           ;functions.c: 425: SSPSTATbits.SMP=0;
  1140  0683  1394               	bcf	20,7	;volatile
  1141                           
  1142                           ;functions.c: 426: SSPCONbits.SSPEN=0x01;
  1143  0684  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0685  1303               	bcf	3,6	;RP1=0, select bank0
  1145  0686  1694               	bsf	20,5	;volatile
  1146                           
  1147                           ;functions.c: 427: SSPIE = 0;
  1148  0687  1683               	bsf	3,5	;RP0=1, select bank1
  1149  0688  1303               	bcf	3,6	;RP1=0, select bank1
  1150  0689  118C               	bcf	12,3	;volatile
  1151                           
  1152                           ;functions.c: 430: RA5 = 1;
  1153  068A  1283               	bcf	3,5	;RP0=0, select bank0
  1154  068B  1303               	bcf	3,6	;RP1=0, select bank0
  1155  068C  1685               	bsf	5,5	;volatile
  1156                           
  1157                           ;functions.c: 431: RA4 = 1;
  1158  068D  1605               	bsf	5,4	;volatile
  1159                           
  1160                           ;functions.c: 432: RD4 = 1;
  1161  068E  1608               	bsf	8,4	;volatile
  1162                           
  1163                           ;functions.c: 433: RD3 = 1;
  1164  068F  1588               	bsf	8,3	;volatile
  1165                           
  1166                           ;functions.c: 435: RB2 = 1;
  1167  0690  1506               	bsf	6,2	;volatile
  1168                           
  1169                           ;functions.c: 440: INTCONbits.RBIE = 1;
  1170  0691  158B               	bsf	11,3	;volatile
  1171                           
  1172                           ;functions.c: 441: INTCONbits.PEIE = 1;
  1173  0692  170B               	bsf	11,6	;volatile
  1174                           
  1175                           ;functions.c: 442: PIE1bits.TMR1IE = 1;
  1176  0693  1683               	bsf	3,5	;RP0=1, select bank1
  1177  0694  1303               	bcf	3,6	;RP1=0, select bank1
  1178  0695  140C               	bsf	12,0	;volatile
  1179                           
  1180                           ;functions.c: 444: IOCBbits.IOCB5 = 1;
  1181  0696  1696               	bsf	22,5	;volatile
  1182                           
  1183                           ;functions.c: 447: T1CON = 0b00110000;
  1184  0697  3030               	movlw	48
  1185  0698  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0699  1303               	bcf	3,6	;RP1=0, select bank0
  1187  069A  0090               	movwf	16	;volatile
  1188                           
  1189                           ;functions.c: 448: TMR1H = 0x0B;
  1190  069B  300B               	movlw	11
  1191  069C  008F               	movwf	15	;volatile
  1192                           
  1193                           ;functions.c: 449: TMR1L = 0xDB;
  1194  069D  30DB               	movlw	219
  1195  069E  008E               	movwf	14	;volatile
  1196                           
  1197                           ;functions.c: 450: T1CONbits.TMR1ON = 1;
  1198  069F  1410               	bsf	16,0	;volatile
  1199                           
  1200                           ;functions.c: 453: ADCON0bits.ADCS0 = 0;
  1201  06A0  131F               	bcf	31,6	;volatile
  1202                           
  1203                           ;functions.c: 454: ADCON0bits.ADCS1 = 0;
  1204  06A1  139F               	bcf	31,7	;volatile
  1205                           
  1206                           ;functions.c: 455: ADCON1bits.ADFM = 0;
  1207  06A2  1683               	bsf	3,5	;RP0=1, select bank1
  1208  06A3  1303               	bcf	3,6	;RP1=0, select bank1
  1209  06A4  139F               	bcf	31,7	;volatile
  1210                           
  1211                           ;functions.c: 456: ADCON1bits.VCFG1 = 0;
  1212  06A5  129F               	bcf	31,5	;volatile
  1213                           
  1214                           ;functions.c: 457: ADCON1bits.VCFG0 = 0;
  1215  06A6  121F               	bcf	31,4	;volatile
  1216                           
  1217                           ;functions.c: 460: intSecondCounter = 0;
  1218  06A7  1283               	bcf	3,5	;RP0=0, select bank0
  1219  06A8  1303               	bcf	3,6	;RP1=0, select bank0
  1220  06A9  01E8               	clrf	_intSecondCounter
  1221  06AA  01E9               	clrf	_intSecondCounter+1
  1222                           
  1223                           ;functions.c: 461: intHalfSecondCounter = 0;
  1224  06AB  1683               	bsf	3,5	;RP0=1, select bank1
  1225  06AC  1303               	bcf	3,6	;RP1=0, select bank1
  1226  06AD  01DB               	clrf	_intHalfSecondCounter^(0+128)
  1227  06AE  01DC               	clrf	(_intHalfSecondCounter+1)^(0+128)
  1228                           
  1229                           ;functions.c: 462: intMinuteCounter = 0;
  1230  06AF  01DD               	clrf	_intMinuteCounter^(0+128)
  1231  06B0  01DE               	clrf	(_intMinuteCounter+1)^(0+128)
  1232  06B1  0008               	return
  1233  06B2                     __end_of_init:	
  1234                           
  1235                           	psect	text2
  1236  06B2                     __ptext2:	
  1237 ;; *************** function _TransiverToReceive *****************
  1238 ;; Defined at:
  1239 ;;		line 13 in file "functions.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;		None
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;		None
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  1    wreg      void 
  1246 ;; Registers used:
  1247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1253 ;;      Params:         0       0       0       0       0
  1254 ;;      Locals:         0       0       0       0       0
  1255 ;;      Temps:          0       2       0       0       0
  1256 ;;      Totals:         0       2       0       0       0
  1257 ;;Total ram usage:        2 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    7
  1260 ;; This function calls:
  1261 ;;		_FindChannel
  1262 ;;		_RegisterRead
  1263 ;;		_RegisterSet
  1264 ;;		_SetRFMode
  1265 ;;		_timerFunction
  1266 ;; This function is called by:
  1267 ;;		_main
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           
  1272                           ;psect for function _TransiverToReceive
  1273  06B2                     _TransiverToReceive:	
  1274                           
  1275                           ;functions.c: 15: timerFunction(2, 5);
  1276                           
  1277                           ;incstack = 0
  1278                           ; Regs used in _TransiverToReceive: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1279  06B2  3002               	movlw	2
  1280  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  1281  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  1282  06B5  00A0               	movwf	timerFunction@intTimerNumber
  1283  06B6  3000               	movlw	0
  1284  06B7  00A1               	movwf	timerFunction@intTimerNumber+1
  1285  06B8  3005               	movlw	5
  1286  06B9  00A2               	movwf	timerFunction@intSetSeconds
  1287  06BA  3000               	movlw	0
  1288  06BB  00A3               	movwf	timerFunction@intSetSeconds+1
  1289  06BC  120A  158A  26F3  120A  118A  	fcall	_timerFunction
  1290                           
  1291                           ;functions.c: 19: SetRFMode(0x20);
  1292  06C1  3020               	movlw	32
  1293  06C2  120A  118A  2577  120A  118A  	fcall	_SetRFMode
  1294                           
  1295                           ;functions.c: 20: _delay((unsigned long)((10)*(4000000/4000.0)));
  1296  06C7  300D               	movlw	13
  1297  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  1298  06C9  1303               	bcf	3,6	;RP1=0, select bank0
  1299  06CA  00B6               	movwf	??_TransiverToReceive+1
  1300  06CB  30FB               	movlw	251
  1301  06CC  00B5               	movwf	??_TransiverToReceive
  1302  06CD                     u1577:	
  1303  06CD  0BB5               	decfsz	??_TransiverToReceive,f
  1304  06CE  2ECD               	goto	u1577
  1305  06CF  0BB6               	decfsz	??_TransiverToReceive+1,f
  1306  06D0  2ECD               	goto	u1577
  1307                           
  1308                           ;functions.c: 21: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  1309  06D1  300E               	movlw	14
  1310  06D2  120A  158A  274B  120A  118A  	fcall	_RegisterRead
  1311  06D7  3802               	iorlw	2
  1312  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  1313  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  1314  06DA  00B5               	movwf	??_TransiverToReceive
  1315  06DB  0835               	movf	??_TransiverToReceive,w
  1316  06DC  00A7               	movwf	RegisterSet@value
  1317  06DD  300E               	movlw	14
  1318  06DE  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  1319                           
  1320                           ;functions.c: 22: SetRFMode(0x40);
  1321  06E3  3040               	movlw	64
  1322  06E4  120A  118A  2577  120A  118A  	fcall	_SetRFMode
  1323  06E9                     l2024:	
  1324                           ;functions.c: 23: while((RegisterRead(0x0E) & 0b00000010) == 0)
  1325                           
  1326  06E9  300E               	movlw	14
  1327  06EA  120A  158A  274B  120A  118A  	fcall	_RegisterRead
  1328  06EF  3902               	andlw	2
  1329  06F0  1D03               	btfss	3,2
  1330  06F1  2EFC               	goto	l2026
  1331                           
  1332                           ;functions.c: 24: {
  1333                           ;functions.c: 25: if(bTimerComplete[2])
  1334  06F2  1683               	bsf	3,5	;RP0=1, select bank1
  1335  06F3  1303               	bcf	3,6	;RP1=0, select bank1
  1336  06F4  0854               	movf	(_bTimerComplete^(0+128)+2),w
  1337  06F5  1903               	btfsc	3,2
  1338  06F6  2EE9               	goto	l2024
  1339                           
  1340                           ;functions.c: 26: {
  1341                           ;functions.c: 27: FindChannel();
  1342  06F7  120A  118A  2188  120A  118A  	fcall	_FindChannel
  1343  06FC                     l2026:	
  1344                           ;functions.c: 28: break;
  1345                           
  1346                           
  1347                           ;functions.c: 29: }
  1348                           ;functions.c: 30: }
  1349                           ;functions.c: 32: SetRFMode(0x60);
  1350  06FC  3060               	movlw	96
  1351  06FD  120A  118A  2577  120A  118A  	fcall	_SetRFMode
  1352                           
  1353                           ;functions.c: 33: _delay((unsigned long)((500)*(4000000/4000000.0)));
  1354  0702  30A5               	movlw	165
  1355  0703  1283               	bcf	3,5	;RP0=0, select bank0
  1356  0704  1303               	bcf	3,6	;RP1=0, select bank0
  1357  0705  00B5               	movwf	??_TransiverToReceive
  1358  0706                     u1587:	
  1359  0706  0BB5               	decfsz	??_TransiverToReceive,f
  1360  0707  2F06               	goto	u1587
  1361  0708  2F09               	nop2
  1362                           
  1363                           ;functions.c: 34: bTransiverModeReceive = 1;
  1364  0709  1283               	bcf	3,5	;RP0=0, select bank0
  1365  070A  1303               	bcf	3,6	;RP1=0, select bank0
  1366  070B  01EC               	clrf	_bTransiverModeReceive
  1367  070C  0AEC               	incf	_bTransiverModeReceive,f
  1368  070D  0008               	return
  1369  070E                     __end_of_TransiverToReceive:	
  1370                           
  1371                           	psect	text3
  1372  05E6                     __ptext3:	
  1373 ;; *************** function _TransiverReadFIFO *****************
  1374 ;; Defined at:
  1375 ;;		line 39 in file "functions.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  j               2   63[BANK0 ] int 
  1380 ;;  ReceivedStri   30   31[BANK0 ] unsigned char [30]
  1381 ;;  i               2   61[BANK0 ] int 
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  1    wreg      void 
  1384 ;; Registers used:
  1385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1391 ;;      Params:         0       0       0       0       0
  1392 ;;      Locals:         0      34       0       0       0
  1393 ;;      Temps:          0       2       0       0       0
  1394 ;;      Totals:         0      36       0       0       0
  1395 ;;Total ram usage:       36 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; Hardware stack levels required when called:    9
  1398 ;; This function calls:
  1399 ;;		_ReadFIFO
  1400 ;;		_ReceivedPacketHandler
  1401 ;;		_SetRFMode
  1402 ;;		_timerFunction
  1403 ;; This function is called by:
  1404 ;;		_main
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           
  1409                           ;psect for function _TransiverReadFIFO
  1410  05E6                     _TransiverReadFIFO:	
  1411                           
  1412                           ;functions.c: 41: unsigned char ReceivedString[30];
  1413                           ;functions.c: 42: timerFunction(3, 5);
  1414                           
  1415                           ;incstack = 0
  1416 ;; hardware stack exceeded
  1417                           ; Regs used in _TransiverReadFIFO: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1418  05E6  3003               	movlw	3
  1419  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  1420  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  1421  05E9  00A0               	movwf	timerFunction@intTimerNumber
  1422  05EA  3000               	movlw	0
  1423  05EB  00A1               	movwf	timerFunction@intTimerNumber+1
  1424  05EC  3005               	movlw	5
  1425  05ED  00A2               	movwf	timerFunction@intSetSeconds
  1426  05EE  3000               	movlw	0
  1427  05EF  00A3               	movwf	timerFunction@intSetSeconds+1
  1428  05F0  120A  158A  26F3  120A  118A  	fcall	_timerFunction
  1429                           
  1430                           ;functions.c: 44: SetRFMode(0x20);
  1431  05F5  3020               	movlw	32
  1432  05F6  120A  118A  2577  120A  118A  	fcall	_SetRFMode
  1433                           
  1434                           ;functions.c: 45: bTransiverModeReceive = 0;
  1435  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  1436  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  1437  05FD  01EC               	clrf	_bTransiverModeReceive
  1438                           
  1439                           ;functions.c: 46: int i = 0;
  1440  05FE  01DD               	clrf	TransiverReadFIFO@i
  1441  05FF  01DE               	clrf	TransiverReadFIFO@i+1
  1442                           
  1443                           ;functions.c: 47: for (int j = 0; j < 30; ++j)
  1444  0600  01DF               	clrf	TransiverReadFIFO@j
  1445  0601  01E0               	clrf	TransiverReadFIFO@j+1
  1446  0602                     L1:	
  1447  0602  0860               	movf	TransiverReadFIFO@j+1,w
  1448  0603  3A80               	xorlw	128
  1449  0604  00FF               	movwf	127
  1450  0605  3080               	movlw	128
  1451  0606  027F               	subwf	127,w
  1452  0607  1D03               	skipz
  1453  0608  2E0B               	goto	u1265
  1454  0609  301E               	movlw	30
  1455  060A  025F               	subwf	TransiverReadFIFO@j,w
  1456  060B                     u1265:	
  1457  060B  1803               	btfsc	3,0
  1458  060C  2E2F               	goto	l2054
  1459                           
  1460                           ;functions.c: 48: {
  1461                           ;functions.c: 49: ReceivedString[j] = 0;
  1462  060D  1283               	bcf	3,5	;RP0=0, select bank0
  1463  060E  1303               	bcf	3,6	;RP1=0, select bank0
  1464  060F  085F               	movf	TransiverReadFIFO@j,w
  1465  0610  3E3F               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  1466  0611  0084               	movwf	4
  1467  0612  1383               	bcf	3,7	;select IRP bank0
  1468  0613  0180               	clrf	0
  1469  0614  3001               	movlw	1
  1470  0615  07DF               	addwf	TransiverReadFIFO@j,f
  1471  0616  1803               	skipnc
  1472  0617  0AE0               	incf	TransiverReadFIFO@j+1,f
  1473  0618  3000               	movlw	0
  1474  0619  07E0               	addwf	TransiverReadFIFO@j+1,f
  1475  061A  2E02               	goto	L1
  1476  061B                     l2050:	
  1477                           ;functions.c: 50: }
  1478                           ;functions.c: 51: while((RD0)&&(!bTimerComplete[3]))
  1479                           
  1480                           
  1481                           ;functions.c: 52: {
  1482                           ;functions.c: 53: ReceivedString[i] = ReadFIFO();
  1483  061B  120A  158A  26E5  120A  118A  	fcall	_ReadFIFO
  1484  0620  1283               	bcf	3,5	;RP0=0, select bank0
  1485  0621  1303               	bcf	3,6	;RP1=0, select bank0
  1486  0622  00BD               	movwf	??_TransiverReadFIFO
  1487  0623  085D               	movf	TransiverReadFIFO@i,w
  1488  0624  3E3F               	addlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  1489  0625  0084               	movwf	4
  1490  0626  083D               	movf	??_TransiverReadFIFO,w
  1491  0627  1383               	bcf	3,7	;select IRP bank0
  1492  0628  0080               	movwf	0
  1493                           
  1494                           ;functions.c: 54: i++;
  1495  0629  3001               	movlw	1
  1496  062A  07DD               	addwf	TransiverReadFIFO@i,f
  1497  062B  1803               	skipnc
  1498  062C  0ADE               	incf	TransiverReadFIFO@i+1,f
  1499  062D  3000               	movlw	0
  1500  062E  07DE               	addwf	TransiverReadFIFO@i+1,f
  1501  062F                     l2054:	
  1502  062F  1283               	bcf	3,5	;RP0=0, select bank0
  1503  0630  1303               	bcf	3,6	;RP1=0, select bank0
  1504  0631  1C08               	btfss	8,0	;volatile
  1505  0632  2E38               	goto	l2058
  1506  0633  1683               	bsf	3,5	;RP0=1, select bank1
  1507  0634  1303               	bcf	3,6	;RP1=0, select bank1
  1508  0635  0855               	movf	(_bTimerComplete^(0+128)+3),w
  1509  0636  1903               	btfsc	3,2
  1510  0637  2E1B               	goto	l2050
  1511  0638                     l2058:	
  1512                           
  1513                           ;functions.c: 55: }
  1514                           ;functions.c: 57: _delay((unsigned long)((10)*(4000000/4000.0)));
  1515  0638  300D               	movlw	13
  1516  0639  1283               	bcf	3,5	;RP0=0, select bank0
  1517  063A  1303               	bcf	3,6	;RP1=0, select bank0
  1518  063B  00BE               	movwf	??_TransiverReadFIFO+1
  1519  063C  30FB               	movlw	251
  1520  063D  00BD               	movwf	??_TransiverReadFIFO
  1521  063E                     u1597:	
  1522  063E  0BBD               	decfsz	??_TransiverReadFIFO,f
  1523  063F  2E3E               	goto	u1597
  1524  0640  0BBE               	decfsz	??_TransiverReadFIFO+1,f
  1525  0641  2E3E               	goto	u1597
  1526                           
  1527                           ;functions.c: 58: SetRFMode(0x00);
  1528  0642  3000               	movlw	0
  1529  0643  120A  118A  2577  120A  118A  	fcall	_SetRFMode
  1530                           
  1531                           ;functions.c: 60: ReceivedPacketHandler(ReceivedString);
  1532  0648  303F               	movlw	(low (TransiverReadFIFO@ReceivedString| 0))& (0+255)
  1533  0649  120A  118A  203C   	fcall	_ReceivedPacketHandler
  1534  064C  0008               	return
  1535  064D                     __end_of_TransiverReadFIFO:	
  1536                           
  1537                           	psect	text4
  1538  003C                     __ptext4:	
  1539 ;; *************** function _ReceivedPacketHandler *****************
  1540 ;; Defined at:
  1541 ;;		line 70 in file "functions.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;  Data            1    wreg     PTR unsigned char 
  1544 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;  Data            1   28[BANK0 ] PTR unsigned char 
  1547 ;;		 -> TransiverReadFIFO@ReceivedString(30), 
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1557 ;;      Params:         0       0       0       0       0
  1558 ;;      Locals:         0       1       0       0       0
  1559 ;;      Temps:          0       1       0       0       0
  1560 ;;      Totals:         0       2       0       0       0
  1561 ;;Total ram usage:        2 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    8
  1564 ;; This function calls:
  1565 ;;		_AnalogValue
  1566 ;;		_DarknessCheck
  1567 ;;		_DelayDs
  1568 ;;		_OperationMode
  1569 ;;		_TransmittPacket
  1570 ;;		_eeprom_read
  1571 ;; This function is called by:
  1572 ;;		_TransiverReadFIFO
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           
  1577                           ;psect for function _ReceivedPacketHandler
  1578  003C                     _ReceivedPacketHandler:	
  1579                           
  1580                           ;incstack = 0
  1581 ;; hardware stack exceeded
  1582                           ; Regs used in _ReceivedPacketHandler: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1583                           ;ReceivedPacketHandler@Data stored from wreg
  1584  003C  1283               	bcf	3,5	;RP0=0, select bank0
  1585  003D  1303               	bcf	3,6	;RP1=0, select bank0
  1586  003E  00BC               	movwf	ReceivedPacketHandler@Data
  1587                           
  1588                           ;functions.c: 72: if(Data[0] != 44 || Data[3] != 55)
  1589  003F  083C               	movf	ReceivedPacketHandler@Data,w
  1590  0040  0084               	movwf	4
  1591  0041  302C               	movlw	44
  1592  0042  1383               	bcf	3,7	;select IRP bank0
  1593  0043  0600               	xorwf	0,w
  1594  0044  1D03               	btfss	3,2
  1595  0045  0008               	return
  1596  0046  083C               	movf	ReceivedPacketHandler@Data,w
  1597  0047  3E03               	addlw	3
  1598  0048  0084               	movwf	4
  1599  0049  3037               	movlw	55
  1600  004A  0600               	xorwf	0,w
  1601  004B  1D03               	btfss	3,2
  1602  004C  0008               	return
  1603  004D  296B               	goto	l1846
  1604  004E                     l279:	
  1605                           ;functions.c: 80: {
  1606                           ;functions.c: 81: case 1:
  1607                           
  1608                           ;functions.c: 79: switch (Data[2])
  1609                           
  1610                           ;functions.c: 77: {
  1611                           ;functions.c: 78: case 1:
  1612                           
  1613                           ;functions.c: 76: switch (Data[1])
  1614                           
  1615                           ;functions.c: 73: return;
  1616                           
  1617                           
  1618                           ;functions.c: 82: RC2 = 1;
  1619  004E  1507               	bsf	7,2	;volatile
  1620                           
  1621                           ;functions.c: 83: DelayDs(10);
  1622  004F  300A               	movlw	10
  1623  0050  00A0               	movwf	DelayDs@cnt
  1624  0051  3000               	movlw	0
  1625  0052  00A1               	movwf	DelayDs@cnt+1
  1626  0053  120A  158A  2767  120A  118A  	fcall	_DelayDs
  1627                           
  1628                           ;functions.c: 84: RC2 = 0;
  1629  0058  1283               	bcf	3,5	;RP0=0, select bank0
  1630  0059  1303               	bcf	3,6	;RP1=0, select bank0
  1631  005A  1107               	bcf	7,2	;volatile
  1632                           
  1633                           ;functions.c: 85: DelayDs(5);
  1634  005B  3005               	movlw	5
  1635  005C  00A0               	movwf	DelayDs@cnt
  1636  005D  3000               	movlw	0
  1637  005E  00A1               	movwf	DelayDs@cnt+1
  1638  005F  120A  158A  2767   	fcall	_DelayDs
  1639                           
  1640                           ;functions.c: 86: break;
  1641  0062  0008               	return
  1642  0063                     l281:	
  1643                           ;functions.c: 88: case 2:
  1644                           
  1645                           
  1646                           ;functions.c: 89: RC1 = 1;
  1647  0063  1487               	bsf	7,1	;volatile
  1648                           
  1649                           ;functions.c: 90: DelayDs(10);
  1650  0064  300A               	movlw	10
  1651  0065  00A0               	movwf	DelayDs@cnt
  1652  0066  3000               	movlw	0
  1653  0067  00A1               	movwf	DelayDs@cnt+1
  1654  0068  120A  158A  2767  120A  118A  	fcall	_DelayDs
  1655                           
  1656                           ;functions.c: 91: RC1 = 0;
  1657  006D  1283               	bcf	3,5	;RP0=0, select bank0
  1658  006E  1303               	bcf	3,6	;RP1=0, select bank0
  1659  006F  1087               	bcf	7,1	;volatile
  1660                           
  1661                           ;functions.c: 92: DelayDs(5);
  1662  0070  3005               	movlw	5
  1663  0071  00A0               	movwf	DelayDs@cnt
  1664  0072  3000               	movlw	0
  1665  0073  00A1               	movwf	DelayDs@cnt+1
  1666  0074  120A  158A  2767   	fcall	_DelayDs
  1667                           
  1668                           ;functions.c: 93: break;
  1669  0077  0008               	return
  1670  0078                     l282:	
  1671                           ;functions.c: 95: case 3:
  1672                           
  1673                           
  1674                           ;functions.c: 96: RB2 = 0;
  1675  0078  1106               	bcf	6,2	;volatile
  1676                           
  1677                           ;functions.c: 97: DelayDs(10);
  1678  0079  300A               	movlw	10
  1679  007A  00A0               	movwf	DelayDs@cnt
  1680  007B  3000               	movlw	0
  1681  007C  00A1               	movwf	DelayDs@cnt+1
  1682  007D  120A  158A  2767  120A  118A  	fcall	_DelayDs
  1683                           
  1684                           ;functions.c: 98: RB2 = 1;
  1685  0082  1283               	bcf	3,5	;RP0=0, select bank0
  1686  0083  1303               	bcf	3,6	;RP1=0, select bank0
  1687  0084  1506               	bsf	6,2	;volatile
  1688                           
  1689                           ;functions.c: 99: DelayDs(5);
  1690  0085  3005               	movlw	5
  1691  0086  00A0               	movwf	DelayDs@cnt
  1692  0087  3000               	movlw	0
  1693  0088  00A1               	movwf	DelayDs@cnt+1
  1694  0089  120A  158A  2767   	fcall	_DelayDs
  1695                           
  1696                           ;functions.c: 104: }
  1697                           
  1698                           ;functions.c: 102: break;
  1699                           
  1700                           ;functions.c: 101: default:
  1701                           
  1702                           ;functions.c: 100: break;
  1703  008C  0008               	return
  1704  008D                     l1782:	
  1705  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1706  008E  1303               	bcf	3,6	;RP1=0, select bank0
  1707  008F  083C               	movf	ReceivedPacketHandler@Data,w
  1708  0090  3E02               	addlw	2
  1709  0091  0084               	movwf	4
  1710  0092  1383               	bcf	3,7	;select IRP bank0
  1711  0093  0800               	movf	0,w
  1712                           
  1713                           ; Switch size 1, requested type "space"
  1714                           ; Number of cases is 3, Range of values is 1 to 3
  1715                           ; switch strategies available:
  1716                           ; Name         Instructions Cycles
  1717                           ; simple_byte           10     6 (average)
  1718                           ; direct_byte           20    11 (fixed)
  1719                           ; jumptable            263     9 (fixed)
  1720                           ;	Chosen strategy is simple_byte
  1721  0094  3A01               	xorlw	1	; case 1
  1722  0095  1903               	skipnz
  1723  0096  284E               	goto	l279
  1724  0097  3A03               	xorlw	3	; case 2
  1725  0098  1903               	skipnz
  1726  0099  2863               	goto	l281
  1727  009A  3A01               	xorlw	1	; case 3
  1728  009B  1903               	skipnz
  1729  009C  2878               	goto	l282
  1730  009D  2987               	goto	l275
  1731                           
  1732                           ;functions.c: 105: break;
  1733  009E  0008               	return
  1734  009F                     l1784:	
  1735                           ;functions.c: 106: case 2:
  1736                           
  1737                           
  1738                           ;functions.c: 107: if(Data[2] == 1 && OperationMode() == 6)
  1739  009F  083C               	movf	ReceivedPacketHandler@Data,w
  1740  00A0  3E02               	addlw	2
  1741  00A1  0084               	movwf	4
  1742  00A2  0300               	decf	0,w
  1743  00A3  1D03               	btfss	3,2
  1744  00A4  28BE               	goto	l1794
  1745  00A5  120A  158A  26B5  120A  118A  	fcall	_OperationMode
  1746  00AA  3A06               	xorlw	6
  1747  00AB  1D03               	skipz
  1748  00AC  28BE               	goto	l1794
  1749                           
  1750                           ;functions.c: 108: {
  1751                           ;functions.c: 109: intBlinkCycle = 1;
  1752  00AD  3001               	movlw	1
  1753  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1754  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  1755  00B0  00E6               	movwf	_intBlinkCycle
  1756  00B1  3000               	movlw	0
  1757  00B2  00E7               	movwf	_intBlinkCycle+1
  1758                           
  1759                           ;functions.c: 110: intBlinkCounter = 0;
  1760  00B3  01FC               	clrf	_intBlinkCounter
  1761  00B4  01FD               	clrf	_intBlinkCounter+1
  1762                           
  1763                           ;functions.c: 111: DelayDs(100);
  1764  00B5  3064               	movlw	100
  1765  00B6  00A0               	movwf	DelayDs@cnt
  1766  00B7  3000               	movlw	0
  1767  00B8  00A1               	movwf	DelayDs@cnt+1
  1768  00B9  120A  158A  2767  120A  118A  	fcall	_DelayDs
  1769  00BE                     l1794:	
  1770                           
  1771                           ;functions.c: 112: }
  1772                           ;functions.c: 113: if(Data[2] == 2 && OperationMode() == 7)
  1773  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1774  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1775  00C0  083C               	movf	ReceivedPacketHandler@Data,w
  1776  00C1  3E02               	addlw	2
  1777  00C2  0084               	movwf	4
  1778  00C3  3002               	movlw	2
  1779  00C4  1383               	bcf	3,7	;select IRP bank0
  1780  00C5  0600               	xorwf	0,w
  1781  00C6  1D03               	btfss	3,2
  1782  00C7  0008               	return
  1783  00C8  120A  158A  26B5  120A  118A  	fcall	_OperationMode
  1784  00CD  3A07               	xorlw	7
  1785  00CE  1D03               	skipz
  1786  00CF  0008               	return
  1787                           
  1788                           ;functions.c: 114: {
  1789                           ;functions.c: 115: intBlinkCycle = 1;
  1790  00D0  3001               	movlw	1
  1791  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1792  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1793  00D3  00E6               	movwf	_intBlinkCycle
  1794  00D4  3000               	movlw	0
  1795  00D5  00E7               	movwf	_intBlinkCycle+1
  1796                           
  1797                           ;functions.c: 116: intBlinkCounter = 0;
  1798  00D6  01FC               	clrf	_intBlinkCounter
  1799  00D7  01FD               	clrf	_intBlinkCounter+1
  1800                           
  1801                           ;functions.c: 117: DelayDs(100);
  1802  00D8  3064               	movlw	100
  1803  00D9  00A0               	movwf	DelayDs@cnt
  1804  00DA  3000               	movlw	0
  1805  00DB  00A1               	movwf	DelayDs@cnt+1
  1806  00DC  120A  158A  2767   	fcall	_DelayDs
  1807                           
  1808                           ;functions.c: 118: }
  1809                           ;functions.c: 119: break;
  1810  00DF  0008               	return
  1811  00E0                     l1804:	
  1812                           ;functions.c: 121: case 3:
  1813                           
  1814                           
  1815                           ;functions.c: 122: if(Data[2] != 0)
  1816  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1817  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1818  00E2  083C               	movf	ReceivedPacketHandler@Data,w
  1819  00E3  3E02               	addlw	2
  1820  00E4  0084               	movwf	4
  1821  00E5  1383               	bcf	3,7	;select IRP bank0
  1822  00E6  0800               	movf	0,w
  1823  00E7  1D03               	btfss	3,2
  1824  00E8  0008               	return
  1825                           
  1826                           ;functions.c: 124: TransmittPacket(3, AnalogValue(0));
  1827                           
  1828                           ;functions.c: 123: break;
  1829  00E9  3000               	movlw	0
  1830  00EA  120A  158A  27AE  120A  118A  	fcall	_AnalogValue
  1831  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1832  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1833  00F1  00BB               	movwf	??_ReceivedPacketHandler
  1834  00F2  083B               	movf	??_ReceivedPacketHandler,w
  1835  00F3  00B5               	movwf	TransmittPacket@value
  1836  00F4  3003               	movlw	3
  1837  00F5  120A  118A  2436   	fcall	_TransmittPacket
  1838                           
  1839                           ;functions.c: 125: break;
  1840  00F8  0008               	return
  1841  00F9                     l1810:	
  1842                           ;functions.c: 127: case 4:
  1843                           
  1844                           
  1845                           ;functions.c: 128: if(Data[2] != 0)
  1846  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1847  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  1848  00FB  083C               	movf	ReceivedPacketHandler@Data,w
  1849  00FC  3E02               	addlw	2
  1850  00FD  0084               	movwf	4
  1851  00FE  1383               	bcf	3,7	;select IRP bank0
  1852  00FF  0800               	movf	0,w
  1853  0100  1D03               	btfss	3,2
  1854  0101  0008               	return
  1855                           
  1856                           ;functions.c: 130: TransmittPacket(4, AnalogValue(3));
  1857                           
  1858                           ;functions.c: 129: break;
  1859  0102  3003               	movlw	3
  1860  0103  120A  158A  27AE  120A  118A  	fcall	_AnalogValue
  1861  0108  1283               	bcf	3,5	;RP0=0, select bank0
  1862  0109  1303               	bcf	3,6	;RP1=0, select bank0
  1863  010A  00BB               	movwf	??_ReceivedPacketHandler
  1864  010B  083B               	movf	??_ReceivedPacketHandler,w
  1865  010C  00B5               	movwf	TransmittPacket@value
  1866  010D  3004               	movlw	4
  1867  010E  120A  118A  2436   	fcall	_TransmittPacket
  1868                           
  1869                           ;functions.c: 131: break;
  1870  0111  0008               	return
  1871  0112                     l1816:	
  1872                           ;functions.c: 133: case 5:
  1873                           
  1874                           
  1875                           ;functions.c: 134: if(Data[2] != 0)
  1876  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0114  083C               	movf	ReceivedPacketHandler@Data,w
  1879  0115  3E02               	addlw	2
  1880  0116  0084               	movwf	4
  1881  0117  1383               	bcf	3,7	;select IRP bank0
  1882  0118  0800               	movf	0,w
  1883  0119  1D03               	btfss	3,2
  1884  011A  0008               	return
  1885                           
  1886                           ;functions.c: 136: TransmittPacket(5, eeprom_read(addressDarknessValue));
  1887                           
  1888                           ;functions.c: 135: break;
  1889  011B  0864               	movf	_addressDarknessValue,w
  1890  011C  120A  158A  278A  120A  118A  	fcall	_eeprom_read
  1891  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0123  00BB               	movwf	??_ReceivedPacketHandler
  1894  0124  083B               	movf	??_ReceivedPacketHandler,w
  1895  0125  00B5               	movwf	TransmittPacket@value
  1896  0126  3005               	movlw	5
  1897  0127  120A  118A  2436   	fcall	_TransmittPacket
  1898                           
  1899                           ;functions.c: 137: break;
  1900  012A  0008               	return
  1901  012B                     l1822:	
  1902                           ;functions.c: 139: case 6:
  1903                           
  1904                           
  1905                           ;functions.c: 140: if(Data[2] != 0)
  1906  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1907  012C  1303               	bcf	3,6	;RP1=0, select bank0
  1908  012D  083C               	movf	ReceivedPacketHandler@Data,w
  1909  012E  3E02               	addlw	2
  1910  012F  0084               	movwf	4
  1911  0130  1383               	bcf	3,7	;select IRP bank0
  1912  0131  0800               	movf	0,w
  1913  0132  1D03               	btfss	3,2
  1914  0133  0008               	return
  1915                           
  1916                           ;functions.c: 142: if(bValueFromPot == TRUE)
  1917                           
  1918                           ;functions.c: 141: break;
  1919  0134  036F               	decf	_bValueFromPot,w
  1920  0135  1D03               	btfss	3,2
  1921  0136  293E               	goto	l1830
  1922                           
  1923                           ;functions.c: 143: TransmittPacket(6, 1);
  1924  0137  01B5               	clrf	TransmittPacket@value
  1925  0138  0AB5               	incf	TransmittPacket@value,f
  1926  0139  3006               	movlw	6
  1927  013A  120A  118A  2436   	fcall	_TransmittPacket
  1928  013D  0008               	return
  1929  013E                     l1830:	
  1930                           
  1931                           ;functions.c: 144: else
  1932                           ;functions.c: 145: TransmittPacket(6, 0);
  1933  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1934  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1935  0140  01B5               	clrf	TransmittPacket@value
  1936  0141  3006               	movlw	6
  1937  0142  120A  118A  2436   	fcall	_TransmittPacket
  1938                           
  1939                           ;functions.c: 146: break;
  1940  0145  0008               	return
  1941  0146                     l1832:	
  1942                           ;functions.c: 148: case 7:
  1943                           
  1944                           
  1945                           ;functions.c: 149: if(Data[2] != 0)
  1946  0146  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0147  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0148  083C               	movf	ReceivedPacketHandler@Data,w
  1949  0149  3E02               	addlw	2
  1950  014A  0084               	movwf	4
  1951  014B  1383               	bcf	3,7	;select IRP bank0
  1952  014C  0800               	movf	0,w
  1953  014D  1D03               	btfss	3,2
  1954  014E  0008               	return
  1955                           
  1956                           ;functions.c: 151: DarknessCheck();
  1957                           
  1958                           ;functions.c: 150: break;
  1959  014F  120A  158A  27D7  120A  118A  	fcall	_DarknessCheck
  1960                           
  1961                           ;functions.c: 152: if(bDark)
  1962  0154  1283               	bcf	3,5	;RP0=0, select bank0
  1963  0155  1303               	bcf	3,6	;RP1=0, select bank0
  1964  0156  086B               	movf	_bDark,w
  1965  0157  1903               	btfsc	3,2
  1966  0158  2960               	goto	l1842
  1967                           
  1968                           ;functions.c: 153: TransmittPacket(7, 1);
  1969  0159  01B5               	clrf	TransmittPacket@value
  1970  015A  0AB5               	incf	TransmittPacket@value,f
  1971  015B  3007               	movlw	7
  1972  015C  120A  118A  2436   	fcall	_TransmittPacket
  1973  015F  0008               	return
  1974  0160                     l1842:	
  1975                           
  1976                           ;functions.c: 154: else
  1977                           ;functions.c: 155: TransmittPacket(7, 2);
  1978  0160  3002               	movlw	2
  1979  0161  1283               	bcf	3,5	;RP0=0, select bank0
  1980  0162  1303               	bcf	3,6	;RP1=0, select bank0
  1981  0163  00BB               	movwf	??_ReceivedPacketHandler
  1982  0164  083B               	movf	??_ReceivedPacketHandler,w
  1983  0165  00B5               	movwf	TransmittPacket@value
  1984  0166  3007               	movlw	7
  1985  0167  120A  118A  2436   	fcall	_TransmittPacket
  1986                           
  1987                           ;functions.c: 160: }
  1988                           
  1989                           ;functions.c: 159: break;
  1990                           
  1991                           ;functions.c: 158: default:
  1992                           
  1993                           ;functions.c: 156: break;
  1994  016A  0008               	return
  1995  016B                     l1846:	
  1996  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1997  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1998  016D  0A3C               	incf	ReceivedPacketHandler@Data,w
  1999  016E  0084               	movwf	4
  2000  016F  1383               	bcf	3,7	;select IRP bank0
  2001  0170  0800               	movf	0,w
  2002                           
  2003                           ; Switch size 1, requested type "space"
  2004                           ; Number of cases is 7, Range of values is 1 to 7
  2005                           ; switch strategies available:
  2006                           ; Name         Instructions Cycles
  2007                           ; simple_byte           22    12 (average)
  2008                           ; direct_byte           32    11 (fixed)
  2009                           ; jumptable            263     9 (fixed)
  2010                           ;	Chosen strategy is simple_byte
  2011  0171  3A01               	xorlw	1	; case 1
  2012  0172  1903               	skipnz
  2013  0173  288D               	goto	l1782
  2014  0174  3A03               	xorlw	3	; case 2
  2015  0175  1903               	skipnz
  2016  0176  289F               	goto	l1784
  2017  0177  3A01               	xorlw	1	; case 3
  2018  0178  1903               	skipnz
  2019  0179  28E0               	goto	l1804
  2020  017A  3A07               	xorlw	7	; case 4
  2021  017B  1903               	skipnz
  2022  017C  28F9               	goto	l1810
  2023  017D  3A01               	xorlw	1	; case 5
  2024  017E  1903               	skipnz
  2025  017F  2912               	goto	l1816
  2026  0180  3A03               	xorlw	3	; case 6
  2027  0181  1903               	skipnz
  2028  0182  292B               	goto	l1822
  2029  0183  3A01               	xorlw	1	; case 7
  2030  0184  1903               	skipnz
  2031  0185  2946               	goto	l1832
  2032  0186  2987               	goto	l275
  2033  0187                     l275:	
  2034  0187  0008               	return
  2035  0188                     __end_of_ReceivedPacketHandler:	
  2036                           
  2037                           	psect	text5
  2038  0EB5                     __ptext5:	
  2039 ;; *************** function _OperationMode *****************
  2040 ;; Defined at:
  2041 ;;		line 913 in file "functions.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;		None
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;  bracketStatu    1    1[BANK0 ] unsigned char 
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      unsigned char 
  2048 ;; Registers used:
  2049 ;;		wreg, status,2
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2055 ;;      Params:         0       0       0       0       0
  2056 ;;      Locals:         0       1       0       0       0
  2057 ;;      Temps:          0       1       0       0       0
  2058 ;;      Totals:         0       2       0       0       0
  2059 ;;Total ram usage:        2 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    2
  2062 ;; This function calls:
  2063 ;;		Nothing
  2064 ;; This function is called by:
  2065 ;;		_main
  2066 ;;		_ReceivedPacketHandler
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           
  2071                           ;psect for function _OperationMode
  2072  0EB5                     _OperationMode:	
  2073                           
  2074                           ;functions.c: 915: unsigned char bracketStatus;
  2075                           ;functions.c: 916: bracketStatus = ((~PORTB) & 0b00000111) ;
  2076                           
  2077                           ;incstack = 0
  2078                           ; Regs used in _OperationMode: [wreg+status,2]
  2079  0EB5  1283               	bcf	3,5	;RP0=0, select bank0
  2080  0EB6  1303               	bcf	3,6	;RP1=0, select bank0
  2081  0EB7  0906               	comf	6,w	;volatile
  2082  0EB8  3907               	andlw	7
  2083  0EB9  00A0               	movwf	??_OperationMode
  2084  0EBA  0820               	movf	??_OperationMode,w
  2085  0EBB  00A1               	movwf	OperationMode@bracketStatus
  2086                           
  2087                           ;functions.c: 918: return 6;
  2088  0EBC  3006               	movlw	6
  2089  0EBD  0008               	return
  2090  0EBE                     __end_of_OperationMode:	
  2091                           
  2092                           	psect	text6
  2093  0EE5                     __ptext6:	
  2094 ;; *************** function _ReadFIFO *****************
  2095 ;; Defined at:
  2096 ;;		line 731 in file "functions.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  value           1    4[BANK0 ] unsigned char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      unsigned char 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0, pclath, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2110 ;;      Params:         0       0       0       0       0
  2111 ;;      Locals:         0       1       0       0       0
  2112 ;;      Temps:          0       1       0       0       0
  2113 ;;      Totals:         0       2       0       0       0
  2114 ;;Total ram usage:        2 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    4
  2117 ;; This function calls:
  2118 ;;		_ReadSPI
  2119 ;; This function is called by:
  2120 ;;		_TransiverReadFIFO
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           
  2125                           ;psect for function _ReadFIFO
  2126  0EE5                     _ReadFIFO:	
  2127                           
  2128                           ;functions.c: 733: BYTE value;
  2129                           ;functions.c: 734: RA5 = 0;
  2130                           
  2131                           ;incstack = 0
  2132                           ; Regs used in _ReadFIFO: [wreg+status,2+status,0+pclath+cstack]
  2133  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  2134  0EE6  1303               	bcf	3,6	;RP1=0, select bank0
  2135  0EE7  1285               	bcf	5,5	;volatile
  2136                           
  2137                           ;functions.c: 735: value = ReadSPI();
  2138  0EE8  120A  158A  269C   	fcall	_ReadSPI
  2139  0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  2140  0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  2141  0EED  00A3               	movwf	??_ReadFIFO
  2142  0EEE  0823               	movf	??_ReadFIFO,w
  2143  0EEF  00A4               	movwf	ReadFIFO@value
  2144                           
  2145                           ;functions.c: 736: RA5 = 1;
  2146  0EF0  1685               	bsf	5,5	;volatile
  2147                           
  2148                           ;functions.c: 737: return value;
  2149  0EF1  0824               	movf	ReadFIFO@value,w
  2150  0EF2  0008               	return
  2151  0EF3                     __end_of_ReadFIFO:	
  2152                           
  2153                           	psect	text7
  2154  0288                     __ptext7:	
  2155 ;; *************** function _TransiverInit *****************
  2156 ;; Defined at:
  2157 ;;		line 496 in file "functions.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;		None
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;		None
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2171 ;;      Params:         0       0       0       0       0
  2172 ;;      Locals:         0       0       0       0       0
  2173 ;;      Temps:          0       1       0       0       0
  2174 ;;      Totals:         0       1       0       0       0
  2175 ;;Total ram usage:        1 bytes
  2176 ;; Hardware stack levels used:    1
  2177 ;; Hardware stack levels required when called:    7
  2178 ;; This function calls:
  2179 ;;		_Blink
  2180 ;;		_FindChannel
  2181 ;;		_RegisterRead
  2182 ;;		_RegisterSet
  2183 ;;		_SetRFMode
  2184 ;; This function is called by:
  2185 ;;		_main
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           
  2190                           ;psect for function _TransiverInit
  2191  0288                     _TransiverInit:	
  2192                           
  2193                           ;functions.c: 499: RegisterSet(0x00, 0x30);
  2194                           
  2195                           ;incstack = 0
  2196                           ; Regs used in _TransiverInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2197  0288  3030               	movlw	48
  2198  0289  1283               	bcf	3,5	;RP0=0, select bank0
  2199  028A  1303               	bcf	3,6	;RP1=0, select bank0
  2200  028B  00B5               	movwf	??_TransiverInit
  2201  028C  0835               	movf	??_TransiverInit,w
  2202  028D  00A7               	movwf	RegisterSet@value
  2203  028E  3000               	movlw	0
  2204  028F  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2205                           
  2206                           ;functions.c: 500: RegisterSet(0x01,(0xA8));
  2207  0294  30A8               	movlw	168
  2208  0295  1283               	bcf	3,5	;RP0=0, select bank0
  2209  0296  1303               	bcf	3,6	;RP1=0, select bank0
  2210  0297  00B5               	movwf	??_TransiverInit
  2211  0298  0835               	movf	??_TransiverInit,w
  2212  0299  00A7               	movwf	RegisterSet@value
  2213  029A  3001               	movlw	1
  2214  029B  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2215                           
  2216                           ;functions.c: 501: RegisterSet(0x02, 0x09);
  2217  02A0  3009               	movlw	9
  2218  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  2219  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  2220  02A3  00B5               	movwf	??_TransiverInit
  2221  02A4  0835               	movf	??_TransiverInit,w
  2222  02A5  00A7               	movwf	RegisterSet@value
  2223  02A6  3002               	movlw	2
  2224  02A7  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2225                           
  2226                           ;functions.c: 502: RegisterSet(0x03, 0x07);
  2227  02AC  3007               	movlw	7
  2228  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  2229  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  2230  02AF  00B5               	movwf	??_TransiverInit
  2231  02B0  0835               	movf	??_TransiverInit,w
  2232  02B1  00A7               	movwf	RegisterSet@value
  2233  02B2  3003               	movlw	3
  2234  02B3  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2235                           
  2236                           ;functions.c: 503: RegisterSet(0x05,(0x0A));
  2237  02B8  300A               	movlw	10
  2238  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  2239  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  2240  02BB  00B5               	movwf	??_TransiverInit
  2241  02BC  0835               	movf	??_TransiverInit,w
  2242  02BD  00A7               	movwf	RegisterSet@value
  2243  02BE  3005               	movlw	5
  2244  02BF  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2245                           
  2246                           ;functions.c: 504: RegisterSet(0x0D,(0x00|0xB0|0x09));
  2247  02C4  30B9               	movlw	185
  2248  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  2249  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  2250  02C7  00B5               	movwf	??_TransiverInit
  2251  02C8  0835               	movf	??_TransiverInit,w
  2252  02C9  00A7               	movwf	RegisterSet@value
  2253  02CA  300D               	movlw	13
  2254  02CB  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2255                           
  2256                           ;functions.c: 505: RegisterSet(0x0E,(0x01|0x10|0x01));
  2257  02D0  3011               	movlw	17
  2258  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2259  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  2260  02D3  00B5               	movwf	??_TransiverInit
  2261  02D4  0835               	movf	??_TransiverInit,w
  2262  02D5  00A7               	movwf	RegisterSet@value
  2263  02D6  300E               	movlw	14
  2264  02D7  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2265                           
  2266                           ;functions.c: 506: RegisterSet(0x10, 0xA3);
  2267  02DC  30A3               	movlw	163
  2268  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  2269  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  2270  02DF  00B5               	movwf	??_TransiverInit
  2271  02E0  0835               	movf	??_TransiverInit,w
  2272  02E1  00A7               	movwf	RegisterSet@value
  2273  02E2  3010               	movlw	16
  2274  02E3  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2275                           
  2276                           ;functions.c: 507: RegisterSet(0x12,(0x18|0x20|0x06));
  2277  02E8  303E               	movlw	62
  2278  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  2279  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  2280  02EB  00B5               	movwf	??_TransiverInit
  2281  02EC  0835               	movf	??_TransiverInit,w
  2282  02ED  00A7               	movwf	RegisterSet@value
  2283  02EE  3012               	movlw	18
  2284  02EF  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2285                           
  2286                           ;functions.c: 508: RegisterSet(0x16,('S'));
  2287  02F4  3053               	movlw	83
  2288  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  2289  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  2290  02F7  00B5               	movwf	??_TransiverInit
  2291  02F8  0835               	movf	??_TransiverInit,w
  2292  02F9  00A7               	movwf	RegisterSet@value
  2293  02FA  3016               	movlw	22
  2294  02FB  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2295                           
  2296                           ;functions.c: 509: RegisterSet(0x17,('Y'));
  2297  0300  3059               	movlw	89
  2298  0301  1283               	bcf	3,5	;RP0=0, select bank0
  2299  0302  1303               	bcf	3,6	;RP1=0, select bank0
  2300  0303  00B5               	movwf	??_TransiverInit
  2301  0304  0835               	movf	??_TransiverInit,w
  2302  0305  00A7               	movwf	RegisterSet@value
  2303  0306  3017               	movlw	23
  2304  0307  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2305                           
  2306                           ;functions.c: 510: RegisterSet(0x18,('N'));
  2307  030C  304E               	movlw	78
  2308  030D  1283               	bcf	3,5	;RP0=0, select bank0
  2309  030E  1303               	bcf	3,6	;RP1=0, select bank0
  2310  030F  00B5               	movwf	??_TransiverInit
  2311  0310  0835               	movf	??_TransiverInit,w
  2312  0311  00A7               	movwf	RegisterSet@value
  2313  0312  3018               	movlw	24
  2314  0313  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2315                           
  2316                           ;functions.c: 511: RegisterSet(0x19,('C'));
  2317  0318  3043               	movlw	67
  2318  0319  1283               	bcf	3,5	;RP0=0, select bank0
  2319  031A  1303               	bcf	3,6	;RP1=0, select bank0
  2320  031B  00B5               	movwf	??_TransiverInit
  2321  031C  0835               	movf	??_TransiverInit,w
  2322  031D  00A7               	movwf	RegisterSet@value
  2323  031E  3019               	movlw	25
  2324  031F  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2325                           
  2326                           ;functions.c: 512: RegisterSet(0x1A, 0x72);
  2327  0324  3072               	movlw	114
  2328  0325  1283               	bcf	3,5	;RP0=0, select bank0
  2329  0326  1303               	bcf	3,6	;RP1=0, select bank0
  2330  0327  00B5               	movwf	??_TransiverInit
  2331  0328  0835               	movf	??_TransiverInit,w
  2332  0329  00A7               	movwf	RegisterSet@value
  2333  032A  301A               	movlw	26
  2334  032B  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2335                           
  2336                           ;functions.c: 513: RegisterSet(0x1B, 0x3C);
  2337  0330  303C               	movlw	60
  2338  0331  1283               	bcf	3,5	;RP0=0, select bank0
  2339  0332  1303               	bcf	3,6	;RP1=0, select bank0
  2340  0333  00B5               	movwf	??_TransiverInit
  2341  0334  0835               	movf	??_TransiverInit,w
  2342  0335  00A7               	movwf	RegisterSet@value
  2343  0336  301B               	movlw	27
  2344  0337  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2345                           
  2346                           ;functions.c: 514: RegisterSet(0x1F, 0x80);
  2347  033C  3080               	movlw	128
  2348  033D  1283               	bcf	3,5	;RP0=0, select bank0
  2349  033E  1303               	bcf	3,6	;RP1=0, select bank0
  2350  033F  00B5               	movwf	??_TransiverInit
  2351  0340  0835               	movf	??_TransiverInit,w
  2352  0341  00A7               	movwf	RegisterSet@value
  2353  0342  301F               	movlw	31
  2354  0343  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2355                           
  2356                           ;functions.c: 515: RegisterSet(0x00, (RegisterRead(0x00)|0x01));
  2357  0348  3000               	movlw	0
  2358  0349  120A  158A  274B  120A  118A  	fcall	_RegisterRead
  2359  034E  3801               	iorlw	1
  2360  034F  1283               	bcf	3,5	;RP0=0, select bank0
  2361  0350  1303               	bcf	3,6	;RP1=0, select bank0
  2362  0351  00B5               	movwf	??_TransiverInit
  2363  0352  0835               	movf	??_TransiverInit,w
  2364  0353  00A7               	movwf	RegisterSet@value
  2365  0354  3000               	movlw	0
  2366  0355  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2367                           
  2368                           ;functions.c: 517: if(FindChannel() == 1)
  2369  035A  120A  118A  2188  120A  118A  	fcall	_FindChannel
  2370  035F  3A01               	xorlw	1
  2371  0360  1D03               	skipz
  2372  0361  2B6D               	goto	l1978
  2373                           
  2374                           ;functions.c: 518: Blink(1);
  2375  0362  3001               	movlw	1
  2376  0363  1283               	bcf	3,5	;RP0=0, select bank0
  2377  0364  1303               	bcf	3,6	;RP1=0, select bank0
  2378  0365  00A6               	movwf	Blink@n
  2379  0366  3000               	movlw	0
  2380  0367  00A7               	movwf	Blink@n+1
  2381  0368  120A  118A  278F  120A  118A  	fcall	_Blink
  2382  036D                     l1978:	
  2383                           
  2384                           ;functions.c: 519: SetRFMode(0x00);
  2385  036D  3000               	movlw	0
  2386  036E  120A  118A  2577   	fcall	_SetRFMode
  2387  0371  0008               	return
  2388  0372                     __end_of_TransiverInit:	
  2389                           
  2390                           	psect	text8
  2391  078F                     __ptext8:	
  2392 ;; *************** function _Blink *****************
  2393 ;; Defined at:
  2394 ;;		line 644 in file "functions.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  n               2    6[BANK0 ] int 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;  i               2    9[BANK0 ] int 
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0, pclath, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2408 ;;      Params:         0       2       0       0       0
  2409 ;;      Locals:         0       2       0       0       0
  2410 ;;      Temps:          0       1       0       0       0
  2411 ;;      Totals:         0       5       0       0       0
  2412 ;;Total ram usage:        5 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    3
  2415 ;; This function calls:
  2416 ;;		_DelayDs
  2417 ;; This function is called by:
  2418 ;;		_TransiverInit
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           
  2423                           ;psect for function _Blink
  2424  078F                     _Blink:	
  2425                           
  2426                           ;functions.c: 646: for(int i = 1;i<=n;i++)
  2427                           
  2428                           ;incstack = 0
  2429                           ; Regs used in _Blink: [wreg+status,2+status,0+pclath+cstack]
  2430  078F  3001               	movlw	1
  2431  0790  1283               	bcf	3,5	;RP0=0, select bank0
  2432  0791  1303               	bcf	3,6	;RP1=0, select bank0
  2433  0792  00A9               	movwf	Blink@i
  2434  0793  3000               	movlw	0
  2435  0794  00AA               	movwf	Blink@i+1
  2436  0795                     l1882:	
  2437  0795  0827               	movf	Blink@n+1,w
  2438  0796  3A80               	xorlw	128
  2439  0797  00A8               	movwf	??_Blink
  2440  0798  082A               	movf	Blink@i+1,w
  2441  0799  3A80               	xorlw	128
  2442  079A  0228               	subwf	??_Blink,w
  2443  079B  1D03               	skipz
  2444  079C  2F9F               	goto	u1135
  2445  079D  0829               	movf	Blink@i,w
  2446  079E  0226               	subwf	Blink@n,w
  2447  079F                     u1135:	
  2448  079F  1C03               	btfss	3,0
  2449  07A0  0008               	return
  2450                           
  2451                           ;functions.c: 647: {
  2452                           ;functions.c: 648: RC1 = 1;
  2453  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  2454  07A2  1303               	bcf	3,6	;RP1=0, select bank0
  2455  07A3  1487               	bsf	7,1	;volatile
  2456                           
  2457                           ;functions.c: 649: DelayDs(2);
  2458  07A4  3002               	movlw	2
  2459  07A5  00A0               	movwf	DelayDs@cnt
  2460  07A6  3000               	movlw	0
  2461  07A7  00A1               	movwf	DelayDs@cnt+1
  2462  07A8  120A  158A  2767  120A  118A  	fcall	_DelayDs
  2463                           
  2464                           ;functions.c: 650: RC1 = 0;
  2465  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  2466  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  2467  07AF  1087               	bcf	7,1	;volatile
  2468                           
  2469                           ;functions.c: 651: DelayDs(6);
  2470  07B0  3006               	movlw	6
  2471  07B1  00A0               	movwf	DelayDs@cnt
  2472  07B2  3000               	movlw	0
  2473  07B3  00A1               	movwf	DelayDs@cnt+1
  2474  07B4  120A  158A  2767  120A  118A  	fcall	_DelayDs
  2475  07B9  3001               	movlw	1
  2476  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  2477  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  2478  07BC  07A9               	addwf	Blink@i,f
  2479  07BD  1803               	skipnc
  2480  07BE  0AAA               	incf	Blink@i+1,f
  2481  07BF  3000               	movlw	0
  2482  07C0  07AA               	addwf	Blink@i+1,f
  2483  07C1  2F95               	goto	l1882
  2484  07C2                     __end_of_Blink:	
  2485                           
  2486                           	psect	text9
  2487  0F05                     __ptext9:	
  2488 ;; *************** function _Mode_5 *****************
  2489 ;; Defined at:
  2490 ;;		line 286 in file "functions.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;		None
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;		None
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2504 ;;      Params:         0       0       0       0       0
  2505 ;;      Locals:         0       0       0       0       0
  2506 ;;      Temps:          0       1       0       0       0
  2507 ;;      Totals:         0       1       0       0       0
  2508 ;;Total ram usage:        1 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    8
  2511 ;; This function calls:
  2512 ;;		_LightWithSensController
  2513 ;;		_TransmittPacket
  2514 ;; This function is called by:
  2515 ;;		_main
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           
  2520                           ;psect for function _Mode_5
  2521  0F05                     _Mode_5:	
  2522                           
  2523                           ;functions.c: 288: if(!RB5)
  2524                           
  2525                           ;incstack = 0
  2526 ;; hardware stack exceeded
  2527                           ; Regs used in _Mode_5: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2528  0F05  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0F06  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0F07  1A86               	btfsc	6,5	;volatile
  2531  0F08  2F13               	goto	l2010
  2532                           
  2533                           ;functions.c: 289: {
  2534                           ;functions.c: 290: TransmittPacket(2, 2);
  2535  0F09  3002               	movlw	2
  2536  0F0A  00BB               	movwf	??_Mode_5
  2537  0F0B  083B               	movf	??_Mode_5,w
  2538  0F0C  00B5               	movwf	TransmittPacket@value
  2539  0F0D  3002               	movlw	2
  2540  0F0E  120A  118A  2436  120A  158A  	fcall	_TransmittPacket
  2541  0F13                     l2010:	
  2542                           
  2543                           ;functions.c: 291: }
  2544                           ;functions.c: 292: LightWithSensController();
  2545  0F13  120A  118A  2750   	fcall	_LightWithSensController
  2546  0F16  0008               	return
  2547  0F17                     __end_of_Mode_5:	
  2548                           
  2549                           	psect	text10
  2550  07EF                     __ptext10:	
  2551 ;; *************** function _Mode_4 *****************
  2552 ;; Defined at:
  2553 ;;		line 274 in file "functions.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2567 ;;      Params:         0       0       0       0       0
  2568 ;;      Locals:         0       0       0       0       0
  2569 ;;      Temps:          0       0       0       0       0
  2570 ;;      Totals:         0       0       0       0       0
  2571 ;;Total ram usage:        0 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    8
  2574 ;; This function calls:
  2575 ;;		_LightWithSensController
  2576 ;;		_TransmittPacket
  2577 ;; This function is called by:
  2578 ;;		_main
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function _Mode_4
  2584  07EF                     _Mode_4:	
  2585                           
  2586                           ;functions.c: 276: if(!RB5)
  2587                           
  2588                           ;incstack = 0
  2589 ;; hardware stack exceeded
  2590                           ; Regs used in _Mode_4: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2591  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  2592  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  2593  07F1  1A86               	btfsc	6,5	;volatile
  2594  07F2  2FFB               	goto	l2004
  2595                           
  2596                           ;functions.c: 277: {
  2597                           ;functions.c: 278: TransmittPacket(2, 1);
  2598  07F3  01B5               	clrf	TransmittPacket@value
  2599  07F4  0AB5               	incf	TransmittPacket@value,f
  2600  07F5  3002               	movlw	2
  2601  07F6  120A  118A  2436  120A  118A  	fcall	_TransmittPacket
  2602  07FB                     l2004:	
  2603                           
  2604                           ;functions.c: 279: }
  2605                           ;functions.c: 280: LightWithSensController();
  2606  07FB  120A  118A  2750   	fcall	_LightWithSensController
  2607  07FE  0008               	return
  2608  07FF                     __end_of_Mode_4:	
  2609                           
  2610                           	psect	text11
  2611  0436                     __ptext11:	
  2612 ;; *************** function _TransmittPacket *****************
  2613 ;; Defined at:
  2614 ;;		line 181 in file "functions.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;  topic           1    wreg     unsigned char 
  2617 ;;  value           1   21[BANK0 ] unsigned char 
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;  topic           1   26[BANK0 ] unsigned char 
  2620 ;;  i               2   24[BANK0 ] int 
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2630 ;;      Params:         0       1       0       0       0
  2631 ;;      Locals:         0       3       0       0       0
  2632 ;;      Temps:          0       2       0       0       0
  2633 ;;      Totals:         0       6       0       0       0
  2634 ;;Total ram usage:        6 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    7
  2637 ;; This function calls:
  2638 ;;		_FindChannel
  2639 ;;		_RegisterRead
  2640 ;;		_RegisterSet
  2641 ;;		_SetRFMode
  2642 ;;		_WriteFIFO
  2643 ;;		_timerFunction
  2644 ;; This function is called by:
  2645 ;;		_main
  2646 ;;		_ReceivedPacketHandler
  2647 ;;		_Mode_4
  2648 ;;		_Mode_5
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           
  2653                           ;psect for function _TransmittPacket
  2654  0436                     _TransmittPacket:	
  2655                           
  2656                           ;incstack = 0
  2657                           ; Regs used in _TransmittPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2658                           ;TransmittPacket@topic stored from wreg
  2659  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2660  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2661  0438  00BA               	movwf	TransmittPacket@topic
  2662                           
  2663                           ;functions.c: 183: timerFunction(4, 5);
  2664  0439  3004               	movlw	4
  2665  043A  00A0               	movwf	timerFunction@intTimerNumber
  2666  043B  3000               	movlw	0
  2667  043C  00A1               	movwf	timerFunction@intTimerNumber+1
  2668  043D  3005               	movlw	5
  2669  043E  00A2               	movwf	timerFunction@intSetSeconds
  2670  043F  3000               	movlw	0
  2671  0440  00A3               	movwf	timerFunction@intSetSeconds+1
  2672  0441  120A  158A  26F3  120A  118A  	fcall	_timerFunction
  2673                           
  2674                           ;functions.c: 185: int i = 0;
  2675  0446  1283               	bcf	3,5	;RP0=0, select bank0
  2676  0447  1303               	bcf	3,6	;RP1=0, select bank0
  2677  0448  01B8               	clrf	TransmittPacket@i
  2678  0449  01B9               	clrf	TransmittPacket@i+1
  2679                           
  2680                           ;functions.c: 188: SetRFMode(0x20);
  2681  044A  3020               	movlw	32
  2682  044B  120A  118A  2577  120A  118A  	fcall	_SetRFMode
  2683                           
  2684                           ;functions.c: 189: _delay((unsigned long)((10)*(4000000/4000.0)));
  2685  0450  300D               	movlw	13
  2686  0451  1283               	bcf	3,5	;RP0=0, select bank0
  2687  0452  1303               	bcf	3,6	;RP1=0, select bank0
  2688  0453  00B7               	movwf	??_TransmittPacket+1
  2689  0454  30FB               	movlw	251
  2690  0455  00B6               	movwf	??_TransmittPacket
  2691  0456                     u1607:	
  2692  0456  0BB6               	decfsz	??_TransmittPacket,f
  2693  0457  2C56               	goto	u1607
  2694  0458  0BB7               	decfsz	??_TransmittPacket+1,f
  2695  0459  2C56               	goto	u1607
  2696                           
  2697                           ;functions.c: 190: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  2698  045A  300E               	movlw	14
  2699  045B  120A  158A  274B  120A  118A  	fcall	_RegisterRead
  2700  0460  3802               	iorlw	2
  2701  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2702  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2703  0463  00B6               	movwf	??_TransmittPacket
  2704  0464  0836               	movf	??_TransmittPacket,w
  2705  0465  00A7               	movwf	RegisterSet@value
  2706  0466  300E               	movlw	14
  2707  0467  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  2708                           
  2709                           ;functions.c: 191: SetRFMode(0x40);
  2710  046C  3040               	movlw	64
  2711  046D  120A  118A  2577  120A  118A  	fcall	_SetRFMode
  2712  0472                     l1702:	
  2713                           ;functions.c: 192: while((RegisterRead(0x0E) & 0b00000010) == 0)
  2714                           
  2715  0472  300E               	movlw	14
  2716  0473  120A  158A  274B  120A  118A  	fcall	_RegisterRead
  2717  0478  3902               	andlw	2
  2718  0479  1D03               	btfss	3,2
  2719  047A  2C85               	goto	l1704
  2720                           
  2721                           ;functions.c: 193: {
  2722                           ;functions.c: 194: if(bTimerComplete[4])
  2723  047B  1683               	bsf	3,5	;RP0=1, select bank1
  2724  047C  1303               	bcf	3,6	;RP1=0, select bank1
  2725  047D  0856               	movf	(_bTimerComplete^(0+128)+4),w
  2726  047E  1903               	btfsc	3,2
  2727  047F  2C72               	goto	l1702
  2728                           
  2729                           ;functions.c: 195: {
  2730                           ;functions.c: 196: FindChannel();
  2731  0480  120A  118A  2188  120A  118A  	fcall	_FindChannel
  2732  0485                     l1704:	
  2733                           ;functions.c: 197: break;
  2734                           
  2735                           
  2736                           ;functions.c: 198: }
  2737                           ;functions.c: 200: }
  2738                           ;functions.c: 201: SetRFMode(0x80);
  2739  0485  3080               	movlw	128
  2740  0486  120A  118A  2577  120A  118A  	fcall	_SetRFMode
  2741                           
  2742                           ;functions.c: 202: _delay((unsigned long)((500)*(4000000/4000000.0)));
  2743  048B  30A5               	movlw	165
  2744  048C  1283               	bcf	3,5	;RP0=0, select bank0
  2745  048D  1303               	bcf	3,6	;RP1=0, select bank0
  2746  048E  00B6               	movwf	??_TransmittPacket
  2747  048F                     u1617:	
  2748  048F  0BB6               	decfsz	??_TransmittPacket,f
  2749  0490  2C8F               	goto	u1617
  2750  0491  2C92               	nop2
  2751                           
  2752                           ;functions.c: 205: WriteFIFO('S');
  2753  0492  3053               	movlw	83
  2754  0493  120A  158A  26BE  120A  118A  	fcall	_WriteFIFO
  2755                           
  2756                           ;functions.c: 206: WriteFIFO('Y');
  2757  0498  3059               	movlw	89
  2758  0499  120A  158A  26BE  120A  118A  	fcall	_WriteFIFO
  2759                           
  2760                           ;functions.c: 207: WriteFIFO('N');
  2761  049E  304E               	movlw	78
  2762  049F  120A  158A  26BE  120A  118A  	fcall	_WriteFIFO
  2763                           
  2764                           ;functions.c: 208: WriteFIFO('C');
  2765  04A4  3043               	movlw	67
  2766  04A5  120A  158A  26BE  120A  118A  	fcall	_WriteFIFO
  2767                           
  2768                           ;functions.c: 211: WriteFIFO(44);
  2769  04AA  302C               	movlw	44
  2770  04AB  120A  158A  26BE  120A  118A  	fcall	_WriteFIFO
  2771                           
  2772                           ;functions.c: 212: WriteFIFO(topic);
  2773  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  2774  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  2775  04B2  083A               	movf	TransmittPacket@topic,w
  2776  04B3  120A  158A  26BE  120A  118A  	fcall	_WriteFIFO
  2777                           
  2778                           ;functions.c: 213: WriteFIFO(value);
  2779  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  2780  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  2781  04BA  0835               	movf	TransmittPacket@value,w
  2782  04BB  120A  158A  26BE  120A  118A  	fcall	_WriteFIFO
  2783                           
  2784                           ;functions.c: 214: WriteFIFO(55);
  2785  04C0  3037               	movlw	55
  2786  04C1  120A  158A  26BE  120A  118A  	fcall	_WriteFIFO
  2787  04C6                     l309:	
  2788                           ;functions.c: 217: while(!RB4)
  2789                           
  2790  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  2791  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  2792  04C8  1A06               	btfsc	6,4	;volatile
  2793  04C9  2CCF               	goto	l1728
  2794                           
  2795                           ;functions.c: 218: {
  2796                           ;functions.c: 219: if(bTimerComplete[4])
  2797  04CA  1683               	bsf	3,5	;RP0=1, select bank1
  2798  04CB  1303               	bcf	3,6	;RP1=0, select bank1
  2799  04CC  0856               	movf	(_bTimerComplete^(0+128)+4),w
  2800  04CD  1903               	btfsc	3,2
  2801  04CE  2CC6               	goto	l309
  2802  04CF                     l1728:	
  2803                           ;functions.c: 220: break;
  2804                           
  2805                           
  2806                           ;functions.c: 221: }
  2807                           ;functions.c: 222: _delay((unsigned long)((10)*(4000000/4000000.0)));
  2808  04CF  3002               	movlw	2
  2809  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2810  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2811  04D2  00B6               	movwf	??_TransmittPacket
  2812  04D3                     u1627:	
  2813  04D3  0BB6               	decfsz	??_TransmittPacket,f
  2814  04D4  2CD3               	goto	u1627
  2815  04D5  0000               	nop
  2816                           
  2817                           ;functions.c: 223: SetRFMode(0x00);
  2818  04D6  3000               	movlw	0
  2819  04D7  120A  118A  2577  120A  118A  	fcall	_SetRFMode
  2820                           
  2821                           ;functions.c: 224: _delay((unsigned long)((1)*(4000000/4000.0)));
  2822  04DC  30C7               	movlw	199
  2823  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  2824  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  2825  04DF  00B6               	movwf	??_TransmittPacket
  2826  04E0                     u1637:	
  2827  04E0  2CE1               	nop2
  2828  04E1  0BB6               	decfsz	??_TransmittPacket,f
  2829  04E2  2CE0               	goto	u1637
  2830  04E3  2CE4               	nop2
  2831  04E4  0008               	return
  2832  04E5                     __end_of_TransmittPacket:	
  2833                           
  2834                           	psect	text12
  2835  0EBE                     __ptext12:	
  2836 ;; *************** function _WriteFIFO *****************
  2837 ;; Defined at:
  2838 ;;		line 758 in file "functions.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  Data            1    wreg     unsigned char 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;  Data            1    3[BANK0 ] unsigned char 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0, pclath, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2852 ;;      Params:         0       0       0       0       0
  2853 ;;      Locals:         0       1       0       0       0
  2854 ;;      Temps:          0       0       0       0       0
  2855 ;;      Totals:         0       1       0       0       0
  2856 ;;Total ram usage:        1 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    3
  2859 ;; This function calls:
  2860 ;;		_WriteSPI
  2861 ;; This function is called by:
  2862 ;;		_TransmittPacket
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           
  2867                           ;psect for function _WriteFIFO
  2868  0EBE                     _WriteFIFO:	
  2869                           
  2870                           ;incstack = 0
  2871                           ; Regs used in _WriteFIFO: [wreg+status,2+status,0+pclath+cstack]
  2872                           ;WriteFIFO@Data stored from wreg
  2873  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0EC0  00A3               	movwf	WriteFIFO@Data
  2876                           
  2877                           ;functions.c: 760: RA5 = 0;
  2878  0EC1  1285               	bcf	5,5	;volatile
  2879                           
  2880                           ;functions.c: 761: WriteSPI(Data);
  2881  0EC2  0823               	movf	WriteFIFO@Data,w
  2882  0EC3  120A  158A  26D7   	fcall	_WriteSPI
  2883                           
  2884                           ;functions.c: 762: RA5 = 1;
  2885  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  2886  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  2887  0EC8  1685               	bsf	5,5	;volatile
  2888  0EC9  0008               	return
  2889  0ECA                     __end_of_WriteFIFO:	
  2890                           
  2891                           	psect	text13
  2892  0188                     __ptext13:	
  2893 ;; *************** function _FindChannel *****************
  2894 ;; Defined at:
  2895 ;;		line 541 in file "functions.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;		None
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  i               2   19[BANK0 ] int 
  2900 ;;  cnt             2   17[BANK0 ] int 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      unsigned char 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2910 ;;      Params:         0       0       0       0       0
  2911 ;;      Locals:         0       4       0       0       0
  2912 ;;      Temps:          0       3       0       0       0
  2913 ;;      Totals:         0       7       0       0       0
  2914 ;;Total ram usage:        7 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    6
  2917 ;; This function calls:
  2918 ;;		_RegisterRead
  2919 ;;		_RegisterSet
  2920 ;;		_SetRFMode
  2921 ;; This function is called by:
  2922 ;;		_TransiverToReceive
  2923 ;;		_TransmittPacket
  2924 ;;		_TransiverInit
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           
  2929                           ;psect for function _FindChannel
  2930  0188                     _FindChannel:	
  2931                           
  2932                           ;functions.c: 543: int cnt = 0;
  2933                           
  2934                           ;incstack = 0
  2935 ;; using string table level
  2936                           ; Regs used in _FindChannel: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2937  0188  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0189  1303               	bcf	3,6	;RP1=0, select bank0
  2939  018A  01B1               	clrf	FindChannel@cnt
  2940  018B  01B2               	clrf	FindChannel@cnt+1
  2941                           
  2942                           ;functions.c: 544: bChannelFound = 0;
  2943  018C  01EA               	clrf	_bChannelFound
  2944                           
  2945                           ;functions.c: 545: channelFound = 0;
  2946  018D  1683               	bsf	3,5	;RP0=1, select bank1
  2947  018E  1303               	bcf	3,6	;RP1=0, select bank1
  2948  018F  01D7               	clrf	_channelFound^(0+128)
  2949  0190  01D8               	clrf	(_channelFound+1)^(0+128)
  2950                           
  2951                           ;functions.c: 547: _delay((unsigned long)((1000)*(4000000/4000.0)));
  2952  0191  3006               	movlw	6
  2953  0192  1283               	bcf	3,5	;RP0=0, select bank0
  2954  0193  1303               	bcf	3,6	;RP1=0, select bank0
  2955  0194  00B0               	movwf	??_FindChannel+2
  2956  0195  3013               	movlw	19
  2957  0196  00AF               	movwf	??_FindChannel+1
  2958  0197  30AD               	movlw	173
  2959  0198  00AE               	movwf	??_FindChannel
  2960  0199                     u1647:	
  2961  0199  0BAE               	decfsz	??_FindChannel,f
  2962  019A  2999               	goto	u1647
  2963  019B  0BAF               	decfsz	??_FindChannel+1,f
  2964  019C  2999               	goto	u1647
  2965  019D  0BB0               	decfsz	??_FindChannel+2,f
  2966  019E  2999               	goto	u1647
  2967                           
  2968                           ;functions.c: 548: for (int i = 0; i < 13; i++)
  2969  019F  1283               	bcf	3,5	;RP0=0, select bank0
  2970  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  2971  01A1  01B3               	clrf	FindChannel@i
  2972  01A2  01B4               	clrf	FindChannel@i+1
  2973  01A3  0834               	movf	FindChannel@i+1,w
  2974  01A4  3A80               	xorlw	128
  2975  01A5  00FF               	movwf	127
  2976  01A6  3080               	movlw	128
  2977  01A7  027F               	subwf	127,w
  2978  01A8  1D03               	skipz
  2979  01A9  29AC               	goto	u805
  2980  01AA  300D               	movlw	13
  2981  01AB  0233               	subwf	FindChannel@i,w
  2982  01AC                     u805:	
  2983  01AC  1803               	btfsc	3,0
  2984  01AD  2A86               	goto	l1658
  2985  01AE                     l1634:	
  2986                           
  2987                           ;functions.c: 549: {
  2988                           ;functions.c: 550: RegisterSet(0x06,ChannelR[i]);
  2989  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  2990  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  2991  01B0  0833               	movf	FindChannel@i,w
  2992  01B1  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  2993  01B2  0084               	movwf	4
  2994  01B3  120A  118A  27C2  120A  118A  	fcall	stringdir
  2995  01B8  00AE               	movwf	??_FindChannel
  2996  01B9  082E               	movf	??_FindChannel,w
  2997  01BA  00A7               	movwf	RegisterSet@value
  2998  01BB  3006               	movlw	6
  2999  01BC  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3000                           
  3001                           ;functions.c: 551: RegisterSet(0x07,ChannelP[i]);
  3002  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  3003  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  3004  01C3  0833               	movf	FindChannel@i,w
  3005  01C4  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  3006  01C5  0084               	movwf	4
  3007  01C6  120A  118A  27C2  120A  118A  	fcall	stringdir
  3008  01CB  00AE               	movwf	??_FindChannel
  3009  01CC  082E               	movf	??_FindChannel,w
  3010  01CD  00A7               	movwf	RegisterSet@value
  3011  01CE  3007               	movlw	7
  3012  01CF  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3013                           
  3014                           ;functions.c: 552: RegisterSet(0x08,ChannelS[i]);
  3015  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  3016  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  3017  01D6  0833               	movf	FindChannel@i,w
  3018  01D7  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  3019  01D8  0084               	movwf	4
  3020  01D9  120A  118A  27C2  120A  118A  	fcall	stringdir
  3021  01DE  00AE               	movwf	??_FindChannel
  3022  01DF  082E               	movf	??_FindChannel,w
  3023  01E0  00A7               	movwf	RegisterSet@value
  3024  01E1  3008               	movlw	8
  3025  01E2  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3026                           
  3027                           ;functions.c: 553: RegisterSet(0x09,ChannelR[i]);
  3028  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  3029  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  3030  01E9  0833               	movf	FindChannel@i,w
  3031  01EA  3E0E               	addlw	low ((_ChannelR-__stringbase)| (0+32768))
  3032  01EB  0084               	movwf	4
  3033  01EC  120A  118A  27C2  120A  118A  	fcall	stringdir
  3034  01F1  00AE               	movwf	??_FindChannel
  3035  01F2  082E               	movf	??_FindChannel,w
  3036  01F3  00A7               	movwf	RegisterSet@value
  3037  01F4  3009               	movlw	9
  3038  01F5  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3039                           
  3040                           ;functions.c: 554: RegisterSet(0x0A,ChannelP[i]);
  3041  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3042  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  3043  01FC  0833               	movf	FindChannel@i,w
  3044  01FD  3E01               	addlw	low ((_ChannelP-__stringbase)| (0+32768))
  3045  01FE  0084               	movwf	4
  3046  01FF  120A  118A  27C2  120A  118A  	fcall	stringdir
  3047  0204  00AE               	movwf	??_FindChannel
  3048  0205  082E               	movf	??_FindChannel,w
  3049  0206  00A7               	movwf	RegisterSet@value
  3050  0207  300A               	movlw	10
  3051  0208  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3052                           
  3053                           ;functions.c: 555: RegisterSet(0x0B,ChannelS[i]);
  3054  020D  1283               	bcf	3,5	;RP0=0, select bank0
  3055  020E  1303               	bcf	3,6	;RP1=0, select bank0
  3056  020F  0833               	movf	FindChannel@i,w
  3057  0210  3E1B               	addlw	low ((_ChannelS-__stringbase)| (0+32768))
  3058  0211  0084               	movwf	4
  3059  0212  120A  118A  27C2  120A  118A  	fcall	stringdir
  3060  0217  00AE               	movwf	??_FindChannel
  3061  0218  082E               	movf	??_FindChannel,w
  3062  0219  00A7               	movwf	RegisterSet@value
  3063  021A  300B               	movlw	11
  3064  021B  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3065                           
  3066                           ;functions.c: 556: RegisterSet(0x0E,(RegisterRead(0x0E)|0x02));
  3067  0220  300E               	movlw	14
  3068  0221  120A  158A  274B  120A  118A  	fcall	_RegisterRead
  3069  0226  3802               	iorlw	2
  3070  0227  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0228  1303               	bcf	3,6	;RP1=0, select bank0
  3072  0229  00AE               	movwf	??_FindChannel
  3073  022A  082E               	movf	??_FindChannel,w
  3074  022B  00A7               	movwf	RegisterSet@value
  3075  022C  300E               	movlw	14
  3076  022D  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3077                           
  3078                           ;functions.c: 557: SetRFMode(0x40);
  3079  0232  3040               	movlw	64
  3080  0233  120A  118A  2577  120A  118A  	fcall	_SetRFMode
  3081                           
  3082                           ;functions.c: 558: cnt = 0;
  3083  0238  1283               	bcf	3,5	;RP0=0, select bank0
  3084  0239  1303               	bcf	3,6	;RP1=0, select bank0
  3085  023A  01B1               	clrf	FindChannel@cnt
  3086  023B  01B2               	clrf	FindChannel@cnt+1
  3087  023C                     l1652:	
  3088                           ;functions.c: 559: while(cnt < 5)
  3089                           
  3090  023C  1283               	bcf	3,5	;RP0=0, select bank0
  3091  023D  1303               	bcf	3,6	;RP1=0, select bank0
  3092  023E  0832               	movf	FindChannel@cnt+1,w
  3093  023F  3A80               	xorlw	128
  3094  0240  00FF               	movwf	127
  3095  0241  3080               	movlw	128
  3096  0242  027F               	subwf	127,w
  3097  0243  1D03               	skipz
  3098  0244  2A47               	goto	u825
  3099  0245  3005               	movlw	5
  3100  0246  0231               	subwf	FindChannel@cnt,w
  3101  0247                     u825:	
  3102  0247  1803               	btfsc	3,0
  3103  0248  2A73               	goto	l1654
  3104                           
  3105                           ;functions.c: 560: {
  3106                           ;functions.c: 562: if((RegisterRead(0x0E) & 0b00000010) != 0)
  3107  0249  300E               	movlw	14
  3108  024A  120A  158A  274B  120A  118A  	fcall	_RegisterRead
  3109  024F  3902               	andlw	2
  3110  0250  1903               	btfsc	3,2
  3111  0251  2A62               	goto	l1650
  3112                           
  3113                           ;functions.c: 563: {
  3114                           ;functions.c: 564: bChannelFound = 1;
  3115  0252  1283               	bcf	3,5	;RP0=0, select bank0
  3116  0253  1303               	bcf	3,6	;RP1=0, select bank0
  3117  0254  01EA               	clrf	_bChannelFound
  3118  0255  0AEA               	incf	_bChannelFound,f
  3119                           
  3120                           ;functions.c: 565: channelFound = i;
  3121  0256  0834               	movf	FindChannel@i+1,w
  3122  0257  1683               	bsf	3,5	;RP0=1, select bank1
  3123  0258  1303               	bcf	3,6	;RP1=0, select bank1
  3124  0259  00D8               	movwf	(_channelFound+1)^(0+128)
  3125  025A  1283               	bcf	3,5	;RP0=0, select bank0
  3126  025B  1303               	bcf	3,6	;RP1=0, select bank0
  3127  025C  0833               	movf	FindChannel@i,w
  3128  025D  1683               	bsf	3,5	;RP0=1, select bank1
  3129  025E  1303               	bcf	3,6	;RP1=0, select bank1
  3130  025F  00D7               	movwf	_channelFound^(0+128)
  3131                           
  3132                           ;functions.c: 566: return 1;
  3133  0260  3001               	movlw	1
  3134  0261  0008               	return
  3135  0262                     l1650:	
  3136                           
  3137                           ;functions.c: 567: }
  3138                           ;functions.c: 568: cnt++;
  3139  0262  3001               	movlw	1
  3140  0263  1283               	bcf	3,5	;RP0=0, select bank0
  3141  0264  1303               	bcf	3,6	;RP1=0, select bank0
  3142  0265  07B1               	addwf	FindChannel@cnt,f
  3143  0266  1803               	skipnc
  3144  0267  0AB2               	incf	FindChannel@cnt+1,f
  3145  0268  3000               	movlw	0
  3146  0269  07B2               	addwf	FindChannel@cnt+1,f
  3147                           
  3148                           ;functions.c: 569: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  3149  026A  30C7               	movlw	199
  3150  026B  1283               	bcf	3,5	;RP0=0, select bank0
  3151  026C  1303               	bcf	3,6	;RP1=0, select bank0
  3152  026D  00AE               	movwf	??_FindChannel
  3153  026E                     u1657:	
  3154  026E  2A6F               	nop2
  3155  026F  0BAE               	decfsz	??_FindChannel,f
  3156  0270  2A6E               	goto	u1657
  3157  0271  2A72               	nop2
  3158  0272  2A3C               	goto	l1652
  3159  0273                     l1654:	
  3160  0273  3001               	movlw	1
  3161  0274  1283               	bcf	3,5	;RP0=0, select bank0
  3162  0275  1303               	bcf	3,6	;RP1=0, select bank0
  3163  0276  07B3               	addwf	FindChannel@i,f
  3164  0277  1803               	skipnc
  3165  0278  0AB4               	incf	FindChannel@i+1,f
  3166  0279  3000               	movlw	0
  3167  027A  07B4               	addwf	FindChannel@i+1,f
  3168  027B  0834               	movf	FindChannel@i+1,w
  3169  027C  3A80               	xorlw	128
  3170  027D  00FF               	movwf	127
  3171  027E  3080               	movlw	128
  3172  027F  027F               	subwf	127,w
  3173  0280  1D03               	skipz
  3174  0281  2A84               	goto	u835
  3175  0282  300D               	movlw	13
  3176  0283  0233               	subwf	FindChannel@i,w
  3177  0284                     u835:	
  3178  0284  1C03               	skipc
  3179  0285  29AE               	goto	l1634
  3180  0286                     l1658:	
  3181                           
  3182                           ;functions.c: 570: }
  3183                           ;functions.c: 573: }
  3184                           ;functions.c: 574: return 0;
  3185  0286  3000               	movlw	0
  3186  0287  0008               	return
  3187  0288                     __end_of_FindChannel:	
  3188                           
  3189                           	psect	text14
  3190  0577                     __ptext14:	
  3191 ;; *************** function _SetRFMode *****************
  3192 ;; Defined at:
  3193 ;;		line 596 in file "functions.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  mode            1    wreg     unsigned char 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  mode            1   12[BANK0 ] unsigned char 
  3198 ;;  mcparam0_rea    1   13[BANK0 ] unsigned char 
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3208 ;;      Params:         0       0       0       0       0
  3209 ;;      Locals:         0       2       0       0       0
  3210 ;;      Temps:          0       1       0       0       0
  3211 ;;      Totals:         0       3       0       0       0
  3212 ;;Total ram usage:        3 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    5
  3215 ;; This function calls:
  3216 ;;		_RegisterRead
  3217 ;;		_RegisterSet
  3218 ;; This function is called by:
  3219 ;;		_TransiverToReceive
  3220 ;;		_TransiverReadFIFO
  3221 ;;		_TransmittPacket
  3222 ;;		_TransiverInit
  3223 ;;		_FindChannel
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           
  3228                           ;psect for function _SetRFMode
  3229  0577                     _SetRFMode:	
  3230                           
  3231                           ;incstack = 0
  3232                           ; Regs used in _SetRFMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3233                           ;SetRFMode@mode stored from wreg
  3234  0577  1283               	bcf	3,5	;RP0=0, select bank0
  3235  0578  1303               	bcf	3,6	;RP1=0, select bank0
  3236  0579  00AC               	movwf	SetRFMode@mode
  3237                           
  3238                           ;functions.c: 598: RA4 = 0;
  3239  057A  1205               	bcf	5,4	;volatile
  3240                           
  3241                           ;functions.c: 599: BYTE mcparam0_read;
  3242                           ;functions.c: 600: mcparam0_read = RegisterRead(0);
  3243  057B  3000               	movlw	0
  3244  057C  120A  158A  274B  120A  118A  	fcall	_RegisterRead
  3245  0581  1283               	bcf	3,5	;RP0=0, select bank0
  3246  0582  1303               	bcf	3,6	;RP1=0, select bank0
  3247  0583  00AB               	movwf	??_SetRFMode
  3248  0584  082B               	movf	??_SetRFMode,w
  3249  0585  00AD               	movwf	SetRFMode@mcparam0_read
  3250                           
  3251                           ;functions.c: 601: switch (mode) {
  3252  0586  2DCF               	goto	l1614
  3253  0587                     l1602:	
  3254                           ;functions.c: 602: case 0x80:
  3255                           
  3256                           
  3257                           ;functions.c: 603: RegisterSet(0, (mcparam0_read & 0x1F) | 0x80);
  3258  0587  082D               	movf	SetRFMode@mcparam0_read,w
  3259  0588  391F               	andlw	31
  3260  0589  3880               	iorlw	128
  3261  058A  00AB               	movwf	??_SetRFMode
  3262  058B  082B               	movf	??_SetRFMode,w
  3263  058C  00A7               	movwf	RegisterSet@value
  3264  058D  3000               	movlw	0
  3265  058E  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3266                           
  3267                           ;functions.c: 605: break;
  3268  0593  2DE2               	goto	l398
  3269  0594                     l1604:	
  3270                           ;functions.c: 606: case 0x60:
  3271                           
  3272                           
  3273                           ;functions.c: 607: RegisterSet(0, (mcparam0_read & 0x1F) | 0x60);
  3274  0594  1283               	bcf	3,5	;RP0=0, select bank0
  3275  0595  1303               	bcf	3,6	;RP1=0, select bank0
  3276  0596  082D               	movf	SetRFMode@mcparam0_read,w
  3277  0597  391F               	andlw	31
  3278  0598  3860               	iorlw	96
  3279  0599  00AB               	movwf	??_SetRFMode
  3280  059A  082B               	movf	??_SetRFMode,w
  3281  059B  00A7               	movwf	RegisterSet@value
  3282  059C  3000               	movlw	0
  3283  059D  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3284                           
  3285                           ;functions.c: 609: break;
  3286  05A2  2DE2               	goto	l398
  3287  05A3                     l1606:	
  3288                           ;functions.c: 610: case 0x40:
  3289                           
  3290                           
  3291                           ;functions.c: 611: RegisterSet(0, (mcparam0_read & 0x1F) | 0x40);
  3292  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  3293  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  3294  05A5  082D               	movf	SetRFMode@mcparam0_read,w
  3295  05A6  391F               	andlw	31
  3296  05A7  3840               	iorlw	64
  3297  05A8  00AB               	movwf	??_SetRFMode
  3298  05A9  082B               	movf	??_SetRFMode,w
  3299  05AA  00A7               	movwf	RegisterSet@value
  3300  05AB  3000               	movlw	0
  3301  05AC  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3302                           
  3303                           ;functions.c: 613: break;
  3304  05B1  2DE2               	goto	l398
  3305  05B2                     l1608:	
  3306                           ;functions.c: 614: case 0x20:
  3307                           
  3308                           
  3309                           ;functions.c: 615: RegisterSet(0, (mcparam0_read & 0x1F) | 0x20);
  3310  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  3311  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  3312  05B4  082D               	movf	SetRFMode@mcparam0_read,w
  3313  05B5  391F               	andlw	31
  3314  05B6  3820               	iorlw	32
  3315  05B7  00AB               	movwf	??_SetRFMode
  3316  05B8  082B               	movf	??_SetRFMode,w
  3317  05B9  00A7               	movwf	RegisterSet@value
  3318  05BA  3000               	movlw	0
  3319  05BB  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3320                           
  3321                           ;functions.c: 617: break;
  3322  05C0  2DE2               	goto	l398
  3323  05C1                     l1610:	
  3324                           ;functions.c: 618: case 0x00:
  3325                           
  3326                           
  3327                           ;functions.c: 619: RegisterSet(0, (mcparam0_read & 0x1F) | 0x00);
  3328  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  3329  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  3330  05C3  082D               	movf	SetRFMode@mcparam0_read,w
  3331  05C4  391F               	andlw	31
  3332  05C5  00AB               	movwf	??_SetRFMode
  3333  05C6  082B               	movf	??_SetRFMode,w
  3334  05C7  00A7               	movwf	RegisterSet@value
  3335  05C8  3000               	movlw	0
  3336  05C9  120A  158A  2731  120A  118A  	fcall	_RegisterSet
  3337                           
  3338                           ;functions.c: 622: }
  3339                           
  3340                           ;functions.c: 621: break;
  3341  05CE  2DE2               	goto	l398
  3342  05CF                     l1614:	
  3343  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  3344  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  3345  05D1  082C               	movf	SetRFMode@mode,w
  3346                           
  3347                           ; Switch size 1, requested type "space"
  3348                           ; Number of cases is 5, Range of values is 0 to 128
  3349                           ; switch strategies available:
  3350                           ; Name         Instructions Cycles
  3351                           ; simple_byte           16     9 (average)
  3352                           ; jumptable            260     6 (fixed)
  3353                           ;	Chosen strategy is simple_byte
  3354  05D2  3A00               	xorlw	0	; case 0
  3355  05D3  1903               	skipnz
  3356  05D4  2DC1               	goto	l1610
  3357  05D5  3A20               	xorlw	32	; case 32
  3358  05D6  1903               	skipnz
  3359  05D7  2DB2               	goto	l1608
  3360  05D8  3A60               	xorlw	96	; case 64
  3361  05D9  1903               	skipnz
  3362  05DA  2DA3               	goto	l1606
  3363  05DB  3A20               	xorlw	32	; case 96
  3364  05DC  1903               	skipnz
  3365  05DD  2D94               	goto	l1604
  3366  05DE  3AE0               	xorlw	224	; case 128
  3367  05DF  1903               	skipnz
  3368  05E0  2D87               	goto	l1602
  3369  05E1  2DE2               	goto	l398
  3370  05E2                     l398:	
  3371                           
  3372                           ;functions.c: 623: RA4 = 1;
  3373  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  3374  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  3375  05E4  1605               	bsf	5,4	;volatile
  3376  05E5  0008               	return
  3377  05E6                     __end_of_SetRFMode:	
  3378                           
  3379                           	psect	text15
  3380  0F31                     __ptext15:	
  3381 ;; *************** function _RegisterSet *****************
  3382 ;; Defined at:
  3383 ;;		line 705 in file "functions.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;  adress          1    wreg     unsigned char 
  3386 ;;  value           1    7[BANK0 ] unsigned char 
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  adress          1   10[BANK0 ] unsigned char 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  1    wreg      void 
  3391 ;; Registers used:
  3392 ;;		wreg, status,2, status,0, pclath, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3398 ;;      Params:         0       1       0       0       0
  3399 ;;      Locals:         0       1       0       0       0
  3400 ;;      Temps:          0       2       0       0       0
  3401 ;;      Totals:         0       4       0       0       0
  3402 ;;Total ram usage:        4 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    3
  3405 ;; This function calls:
  3406 ;;		_WriteSPI
  3407 ;; This function is called by:
  3408 ;;		_TransiverToReceive
  3409 ;;		_TransmittPacket
  3410 ;;		_TransiverInit
  3411 ;;		_FindChannel
  3412 ;;		_SetRFMode
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           
  3417                           ;psect for function _RegisterSet
  3418  0F31                     _RegisterSet:	
  3419                           
  3420                           ;incstack = 0
  3421                           ; Regs used in _RegisterSet: [wreg+status,2+status,0+pclath+cstack]
  3422                           ;RegisterSet@adress stored from wreg
  3423  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  3424  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  3425  0F33  00AA               	movwf	RegisterSet@adress
  3426                           
  3427                           ;functions.c: 707: RA4 = 0;
  3428  0F34  1205               	bcf	5,4	;volatile
  3429                           
  3430                           ;functions.c: 708: adress = (adress<<1);
  3431  0F35  082A               	movf	RegisterSet@adress,w
  3432  0F36  00A8               	movwf	??_RegisterSet
  3433  0F37  0728               	addwf	??_RegisterSet,w
  3434  0F38  00A9               	movwf	??_RegisterSet+1
  3435  0F39  0829               	movf	??_RegisterSet+1,w
  3436  0F3A  00AA               	movwf	RegisterSet@adress
  3437                           
  3438                           ;functions.c: 709: WriteSPI(adress);
  3439  0F3B  082A               	movf	RegisterSet@adress,w
  3440  0F3C  120A  158A  26D7  120A  158A  	fcall	_WriteSPI
  3441                           
  3442                           ;functions.c: 710: WriteSPI(value);
  3443  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  3444  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  3445  0F43  0827               	movf	RegisterSet@value,w
  3446  0F44  120A  158A  26D7   	fcall	_WriteSPI
  3447                           
  3448                           ;functions.c: 711: RA4 = 1;
  3449  0F47  1283               	bcf	3,5	;RP0=0, select bank0
  3450  0F48  1303               	bcf	3,6	;RP1=0, select bank0
  3451  0F49  1605               	bsf	5,4	;volatile
  3452  0F4A  0008               	return
  3453  0F4B                     __end_of_RegisterSet:	
  3454                           
  3455                           	psect	text16
  3456  0F4B                     __ptext16:	
  3457 ;; *************** function _RegisterRead *****************
  3458 ;; Defined at:
  3459 ;;		line 675 in file "functions.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;  adress          1    wreg     unsigned char 
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  adress          1    6[BANK0 ] unsigned char 
  3464 ;;  value           1    5[BANK0 ] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      unsigned char 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0, pclath, cstack
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3474 ;;      Params:         0       0       0       0       0
  3475 ;;      Locals:         0       2       0       0       0
  3476 ;;      Temps:          0       2       0       0       0
  3477 ;;      Totals:         0       4       0       0       0
  3478 ;;Total ram usage:        4 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    4
  3481 ;; This function calls:
  3482 ;;		_ReadSPI
  3483 ;;		_WriteSPI
  3484 ;; This function is called by:
  3485 ;;		_TransiverToReceive
  3486 ;;		_TransmittPacket
  3487 ;;		_TransiverInit
  3488 ;;		_FindChannel
  3489 ;;		_SetRFMode
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _RegisterRead
  3495  0F4B                     _RegisterRead:	
  3496                           
  3497                           ;incstack = 0
  3498                           ; Regs used in _RegisterRead: [wreg+status,2+status,0+pclath+cstack]
  3499                           ;RegisterRead@adress stored from wreg
  3500  0F4B  1283               	bcf	3,5	;RP0=0, select bank0
  3501  0F4C  1303               	bcf	3,6	;RP1=0, select bank0
  3502  0F4D  00A6               	movwf	RegisterRead@adress
  3503                           
  3504                           ;functions.c: 677: BYTE value;
  3505                           ;functions.c: 678: RA4 = 0;
  3506  0F4E  1205               	bcf	5,4	;volatile
  3507                           
  3508                           ;functions.c: 679: adress = ((adress<<1)|0x40);
  3509  0F4F  0826               	movf	RegisterRead@adress,w
  3510  0F50  00A3               	movwf	??_RegisterRead
  3511  0F51  0723               	addwf	??_RegisterRead,w
  3512  0F52  3840               	iorlw	64
  3513  0F53  00A4               	movwf	??_RegisterRead+1
  3514  0F54  0824               	movf	??_RegisterRead+1,w
  3515  0F55  00A6               	movwf	RegisterRead@adress
  3516                           
  3517                           ;functions.c: 680: WriteSPI(adress);
  3518  0F56  0826               	movf	RegisterRead@adress,w
  3519  0F57  120A  158A  26D7  120A  158A  	fcall	_WriteSPI
  3520                           
  3521                           ;functions.c: 681: value = ReadSPI();
  3522  0F5C  120A  158A  269C   	fcall	_ReadSPI
  3523  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  3524  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  3525  0F61  00A3               	movwf	??_RegisterRead
  3526  0F62  0823               	movf	??_RegisterRead,w
  3527  0F63  00A5               	movwf	RegisterRead@value
  3528                           
  3529                           ;functions.c: 682: RA4 = 1;
  3530  0F64  1605               	bsf	5,4	;volatile
  3531                           
  3532                           ;functions.c: 683: return value;
  3533  0F65  0825               	movf	RegisterRead@value,w
  3534  0F66  0008               	return
  3535  0F67                     __end_of_RegisterRead:	
  3536                           
  3537                           	psect	text17
  3538  0E9C                     __ptext17:	
  3539 ;; *************** function _ReadSPI *****************
  3540 ;; Defined at:
  3541 ;;		line 488 in file "functions.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      unsigned char 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0, pclath, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3555 ;;      Params:         0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0
  3557 ;;      Temps:          0       0       0       0       0
  3558 ;;      Totals:         0       0       0       0       0
  3559 ;;Total ram usage:        0 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    3
  3562 ;; This function calls:
  3563 ;;		_WriteSPI
  3564 ;; This function is called by:
  3565 ;;		_RegisterRead
  3566 ;;		_ReadFIFO
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           
  3571                           ;psect for function _ReadSPI
  3572  0E9C                     _ReadSPI:	
  3573                           
  3574                           ;functions.c: 490: WriteSPI(0x00);
  3575                           
  3576                           ;incstack = 0
  3577                           ; Regs used in _ReadSPI: [wreg+status,2+status,0+pclath+cstack]
  3578  0E9C  3000               	movlw	0
  3579  0E9D  120A  158A  26D7   	fcall	_WriteSPI
  3580                           
  3581                           ;functions.c: 491: return SSPBUF;
  3582  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  3583  0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  3584  0EA2  0813               	movf	19,w	;volatile
  3585  0EA3  0008               	return
  3586  0EA4                     __end_of_ReadSPI:	
  3587                           
  3588                           	psect	text18
  3589  0ED7                     __ptext18:	
  3590 ;; *************** function _WriteSPI *****************
  3591 ;; Defined at:
  3592 ;;		line 476 in file "functions.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;  databyte        1    wreg     unsigned char 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  databyte        1    2[BANK0 ] unsigned char 
  3597 ;;  buffer          1    1[BANK0 ] unsigned char 
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  1    wreg      void 
  3600 ;; Registers used:
  3601 ;;		wreg
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3607 ;;      Params:         0       0       0       0       0
  3608 ;;      Locals:         0       2       0       0       0
  3609 ;;      Temps:          0       1       0       0       0
  3610 ;;      Totals:         0       3       0       0       0
  3611 ;;Total ram usage:        3 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; Hardware stack levels required when called:    2
  3614 ;; This function calls:
  3615 ;;		Nothing
  3616 ;; This function is called by:
  3617 ;;		_ReadSPI
  3618 ;;		_RegisterRead
  3619 ;;		_RegisterSet
  3620 ;;		_WriteFIFO
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           
  3625                           ;psect for function _WriteSPI
  3626  0ED7                     _WriteSPI:	
  3627                           
  3628                           ;incstack = 0
  3629                           ; Regs used in _WriteSPI: [wreg]
  3630                           ;WriteSPI@databyte stored from wreg
  3631  0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  3632  0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  3633  0ED9  00A2               	movwf	WriteSPI@databyte
  3634                           
  3635                           ;functions.c: 478: unsigned char buffer;
  3636                           ;functions.c: 479: buffer = SSPBUF;
  3637  0EDA  0813               	movf	19,w	;volatile
  3638  0EDB  00A0               	movwf	??_WriteSPI
  3639  0EDC  0820               	movf	??_WriteSPI,w
  3640  0EDD  00A1               	movwf	WriteSPI@buffer
  3641                           
  3642                           ;functions.c: 480: PIR1bits.SSPIF=0;
  3643  0EDE  118C               	bcf	12,3	;volatile
  3644                           
  3645                           ;functions.c: 481: SSPBUF = databyte;
  3646  0EDF  0822               	movf	WriteSPI@databyte,w
  3647  0EE0  0093               	movwf	19	;volatile
  3648  0EE1                     l374:	
  3649                           ;functions.c: 482: while(PIR1bits.SSPIF == 0);
  3650                           
  3651  0EE1  1D8C               	btfss	12,3	;volatile
  3652  0EE2  2EE1               	goto	l374
  3653                           
  3654                           ;functions.c: 483: PIR1bits.SSPIF = 0;
  3655  0EE3  118C               	bcf	12,3	;volatile
  3656  0EE4  0008               	return
  3657  0EE5                     __end_of_WriteSPI:	
  3658                           
  3659                           	psect	text19
  3660  0ECA                     __ptext19:	
  3661 ;; *************** function _Mode_2 *****************
  3662 ;; Defined at:
  3663 ;;		line 255 in file "functions.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;		None
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3677 ;;      Params:         0       0       0       0       0
  3678 ;;      Locals:         0       0       0       0       0
  3679 ;;      Temps:          0       0       0       0       0
  3680 ;;      Totals:         0       0       0       0       0
  3681 ;;Total ram usage:        0 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    6
  3684 ;; This function calls:
  3685 ;;		_LightWithSensController
  3686 ;; This function is called by:
  3687 ;;		_main
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           
  3692                           ;psect for function _Mode_2
  3693  0ECA                     _Mode_2:	
  3694                           
  3695                           ;functions.c: 257: LightWithSensController();
  3696                           
  3697                           ;incstack = 0
  3698                           ; Regs used in _Mode_2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3699  0ECA  120A  118A  2750  120A  158A  	fcall	_LightWithSensController
  3700                           
  3701                           ;functions.c: 258: if(RC2)
  3702  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  3703  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  3704  0ED1  1D07               	btfss	7,2	;volatile
  3705  0ED2  2ED5               	goto	l325
  3706                           
  3707                           ;functions.c: 259: RC1 = 1;
  3708  0ED3  1487               	bsf	7,1	;volatile
  3709  0ED4  0008               	return
  3710  0ED5                     l325:	
  3711                           
  3712                           ;functions.c: 260: else
  3713                           ;functions.c: 261: RC1 = 0;
  3714  0ED5  1087               	bcf	7,1	;volatile
  3715  0ED6  0008               	return
  3716  0ED7                     __end_of_Mode_2:	
  3717                           
  3718                           	psect	text20
  3719  0F17                     __ptext20:	
  3720 ;; *************** function _Mode_1 *****************
  3721 ;; Defined at:
  3722 ;;		line 241 in file "functions.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0, pclath, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3736 ;;      Params:         0       0       0       0       0
  3737 ;;      Locals:         0       0       0       0       0
  3738 ;;      Temps:          0       0       0       0       0
  3739 ;;      Totals:         0       0       0       0       0
  3740 ;;Total ram usage:        0 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    5
  3743 ;; This function calls:
  3744 ;;		_DarknessCheck
  3745 ;; This function is called by:
  3746 ;;		_main
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           
  3751                           ;psect for function _Mode_1
  3752  0F17                     _Mode_1:	
  3753                           
  3754                           ;functions.c: 244: if((intSecondCounter == 30)&&(!RC2))
  3755                           
  3756                           ;incstack = 0
  3757                           ; Regs used in _Mode_1: [wreg+status,2+status,0+pclath+cstack]
  3758  0F17  301E               	movlw	30
  3759  0F18  1283               	bcf	3,5	;RP0=0, select bank0
  3760  0F19  1303               	bcf	3,6	;RP1=0, select bank0
  3761  0F1A  0668               	xorwf	_intSecondCounter,w
  3762  0F1B  0469               	iorwf	_intSecondCounter+1,w
  3763  0F1C  1903               	btfsc	3,2
  3764  0F1D  1907               	btfsc	7,2	;volatile
  3765  0F1E  2F24               	goto	l1988
  3766                           
  3767                           ;functions.c: 245: DarknessCheck();
  3768  0F1F  120A  158A  27D7  120A  158A  	fcall	_DarknessCheck
  3769  0F24                     l1988:	
  3770                           
  3771                           ;functions.c: 246: if((intBlinkCycle == 1)&&(bDark == 1))
  3772  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  3773  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  3774  0F26  0366               	decf	_intBlinkCycle,w
  3775  0F27  0467               	iorwf	_intBlinkCycle+1,w
  3776  0F28  1D03               	btfss	3,2
  3777  0F29  2F2F               	goto	l320
  3778  0F2A  036B               	decf	_bDark,w
  3779  0F2B  1D03               	btfss	3,2
  3780  0F2C  2F2F               	goto	l320
  3781                           
  3782                           ;functions.c: 247: RC2 = 1;
  3783  0F2D  1507               	bsf	7,2	;volatile
  3784  0F2E  0008               	return
  3785  0F2F                     l320:	
  3786                           
  3787                           ;functions.c: 248: else
  3788                           ;functions.c: 249: RC2 = 0;
  3789  0F2F  1107               	bcf	7,2	;volatile
  3790  0F30  0008               	return
  3791  0F31                     __end_of_Mode_1:	
  3792                           
  3793                           	psect	text21
  3794  0E98                     __ptext21:	
  3795 ;; *************** function _Mode_0 *****************
  3796 ;; Defined at:
  3797 ;;		line 233 in file "functions.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;		None
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;		None
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3811 ;;      Params:         0       0       0       0       0
  3812 ;;      Locals:         0       0       0       0       0
  3813 ;;      Temps:          0       0       0       0       0
  3814 ;;      Totals:         0       0       0       0       0
  3815 ;;Total ram usage:        0 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    6
  3818 ;; This function calls:
  3819 ;;		_LightWithSensController
  3820 ;; This function is called by:
  3821 ;;		_main
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           
  3826                           ;psect for function _Mode_0
  3827  0E98                     _Mode_0:	
  3828                           
  3829                           ;functions.c: 235: LightWithSensController();
  3830                           
  3831                           ;incstack = 0
  3832                           ; Regs used in _Mode_0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3833  0E98  120A  118A  2750   	fcall	_LightWithSensController
  3834  0E9B  0008               	return
  3835  0E9C                     __end_of_Mode_0:	
  3836                           
  3837                           	psect	text22
  3838  0750                     __ptext22:	
  3839 ;; *************** function _LightWithSensController *****************
  3840 ;; Defined at:
  3841 ;;		line 299 in file "functions.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;		None
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;		None
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3855 ;;      Params:         0       0       0       0       0
  3856 ;;      Locals:         0       0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0
  3858 ;;      Totals:         0       0       0       0       0
  3859 ;;Total ram usage:        0 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    5
  3862 ;; This function calls:
  3863 ;;		_DarknessCheck
  3864 ;;		_timerFunction
  3865 ;; This function is called by:
  3866 ;;		_Mode_0
  3867 ;;		_Mode_2
  3868 ;;		_Mode_4
  3869 ;;		_Mode_5
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           
  3874                           ;psect for function _LightWithSensController
  3875  0750                     _LightWithSensController:	
  3876                           
  3877                           ;functions.c: 303: if((intSecondCounter == 30)&&(!RC2))
  3878                           
  3879                           ;incstack = 0
  3880                           ; Regs used in _LightWithSensController: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3881  0750  301E               	movlw	30
  3882  0751  1283               	bcf	3,5	;RP0=0, select bank0
  3883  0752  1303               	bcf	3,6	;RP1=0, select bank0
  3884  0753  0668               	xorwf	_intSecondCounter,w
  3885  0754  0469               	iorwf	_intSecondCounter+1,w
  3886  0755  1903               	btfsc	3,2
  3887  0756  1907               	btfsc	7,2	;volatile
  3888  0757  2F5D               	goto	l1854
  3889                           
  3890                           ;functions.c: 304: DarknessCheck();
  3891  0758  120A  158A  27D7  120A  118A  	fcall	_DarknessCheck
  3892  075D                     l1854:	
  3893                           
  3894                           ;functions.c: 308: if((bDark == 1)&&(RA1)&&(!RC2))
  3895  075D  1283               	bcf	3,5	;RP0=0, select bank0
  3896  075E  1303               	bcf	3,6	;RP1=0, select bank0
  3897  075F  036B               	decf	_bDark,w
  3898  0760  1903               	btfsc	3,2
  3899  0761  1C85               	btfss	5,1	;volatile
  3900  0762  2F72               	goto	l1864
  3901  0763  1907               	btfsc	7,2	;volatile
  3902  0764  2F72               	goto	l1864
  3903                           
  3904                           ;functions.c: 309: {
  3905                           ;functions.c: 311: RC2 = 1;
  3906  0765  1507               	bsf	7,2	;volatile
  3907                           
  3908                           ;functions.c: 313: timerFunction(0,120);
  3909  0766  3000               	movlw	0
  3910  0767  00A0               	movwf	timerFunction@intTimerNumber
  3911  0768  00A1               	movwf	timerFunction@intTimerNumber+1
  3912  0769  3078               	movlw	120
  3913  076A  00A2               	movwf	timerFunction@intSetSeconds
  3914  076B  3000               	movlw	0
  3915  076C  00A3               	movwf	timerFunction@intSetSeconds+1
  3916  076D  120A  158A  26F3  120A  118A  	fcall	_timerFunction
  3917  0772                     l1864:	
  3918                           
  3919                           ;functions.c: 314: }
  3920                           ;functions.c: 317: if(bTimerComplete[0])
  3921  0772  1683               	bsf	3,5	;RP0=1, select bank1
  3922  0773  1303               	bcf	3,6	;RP1=0, select bank1
  3923  0774  0852               	movf	_bTimerComplete^(0+128),w
  3924  0775  1903               	btfsc	3,2
  3925  0776  0008               	return
  3926                           
  3927                           ;functions.c: 318: {
  3928                           ;functions.c: 319: DarknessCheck();
  3929  0777  120A  158A  27D7  120A  118A  	fcall	_DarknessCheck
  3930                           
  3931                           ;functions.c: 320: if((bDark)&&(RA1))
  3932  077C  1283               	bcf	3,5	;RP0=0, select bank0
  3933  077D  1303               	bcf	3,6	;RP1=0, select bank0
  3934  077E  086B               	movf	_bDark,w
  3935  077F  1D03               	btfss	3,2
  3936  0780  1C85               	btfss	5,1	;volatile
  3937  0781  2F8D               	goto	l344
  3938                           
  3939                           ;functions.c: 321: {
  3940                           ;functions.c: 322: timerFunction(0,120);
  3941  0782  3000               	movlw	0
  3942  0783  00A0               	movwf	timerFunction@intTimerNumber
  3943  0784  00A1               	movwf	timerFunction@intTimerNumber+1
  3944  0785  3078               	movlw	120
  3945  0786  00A2               	movwf	timerFunction@intSetSeconds
  3946  0787  3000               	movlw	0
  3947  0788  00A3               	movwf	timerFunction@intSetSeconds+1
  3948  0789  120A  158A  26F3   	fcall	_timerFunction
  3949                           
  3950                           ;functions.c: 323: }
  3951  078C  0008               	return
  3952  078D                     l344:	
  3953                           
  3954                           ;functions.c: 324: else
  3955                           ;functions.c: 325: RC2 = 0;
  3956  078D  1107               	bcf	7,2	;volatile
  3957  078E  0008               	return
  3958  078F                     __end_of_LightWithSensController:	
  3959                           
  3960                           	psect	text23
  3961  0EF3                     __ptext23:	
  3962 ;; *************** function _timerFunction *****************
  3963 ;; Defined at:
  3964 ;;		line 350 in file "functions.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;  intTimerNumb    2    0[BANK0 ] int 
  3967 ;;  intSetSecond    2    2[BANK0 ] int 
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;		None
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      unsigned char 
  3972 ;; Registers used:
  3973 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3979 ;;      Params:         0       4       0       0       0
  3980 ;;      Locals:         0       0       0       0       0
  3981 ;;      Temps:          0       1       0       0       0
  3982 ;;      Totals:         0       5       0       0       0
  3983 ;;Total ram usage:        5 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:    2
  3986 ;; This function calls:
  3987 ;;		Nothing
  3988 ;; This function is called by:
  3989 ;;		_TransiverToReceive
  3990 ;;		_TransiverReadFIFO
  3991 ;;		_TransmittPacket
  3992 ;;		_LightWithSensController
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           
  3997                           ;psect for function _timerFunction
  3998  0EF3                     _timerFunction:	
  3999                           
  4000                           ;functions.c: 352: intClockTimer[intTimerNumber] = intSetSeconds;
  4001                           
  4002                           ;incstack = 0
  4003                           ; Regs used in _timerFunction: [wreg-fsr0h+status,2+status,0]
  4004  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  4005  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  4006  0EF5  0820               	movf	timerFunction@intTimerNumber,w
  4007  0EF6  00A4               	movwf	??_timerFunction
  4008  0EF7  0724               	addwf	??_timerFunction,w
  4009  0EF8  3EC8               	addlw	(low (_intClockTimer| 0))& (0+255)
  4010  0EF9  0084               	movwf	4
  4011  0EFA  0822               	movf	timerFunction@intSetSeconds,w
  4012  0EFB  1383               	bcf	3,7	;select IRP bank1
  4013  0EFC  0080               	movwf	0
  4014  0EFD  0A84               	incf	4,f
  4015  0EFE  0823               	movf	timerFunction@intSetSeconds+1,w
  4016  0EFF  0080               	movwf	0
  4017                           
  4018                           ;functions.c: 353: bTimerComplete[intTimerNumber] = 0;
  4019  0F00  0820               	movf	timerFunction@intTimerNumber,w
  4020  0F01  3ED2               	addlw	(low (_bTimerComplete| 0))& (0+255)
  4021  0F02  0084               	movwf	4
  4022  0F03  0180               	clrf	0
  4023  0F04  0008               	return
  4024  0F05                     __end_of_timerFunction:	
  4025                           ;functions.c: 354: return 1;
  4026                           ;	Return value of _timerFunction is never used
  4027                           
  4028                           
  4029                           	psect	text24
  4030  0FD7                     __ptext24:	
  4031 ;; *************** function _DarknessCheck *****************
  4032 ;; Defined at:
  4033 ;;		line 879 in file "functions.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;		None
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;  darknessValu    1    9[BANK0 ] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  1    wreg      void 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0, pclath, cstack
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4047 ;;      Params:         0       0       0       0       0
  4048 ;;      Locals:         0       1       0       0       0
  4049 ;;      Temps:          0       1       0       0       0
  4050 ;;      Totals:         0       2       0       0       0
  4051 ;;Total ram usage:        2 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    4
  4054 ;; This function calls:
  4055 ;;		_AnalogValue
  4056 ;;		_eeprom_read
  4057 ;; This function is called by:
  4058 ;;		_ReceivedPacketHandler
  4059 ;;		_Mode_1
  4060 ;;		_LightWithSensController
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           
  4065                           ;psect for function _DarknessCheck
  4066  0FD7                     _DarknessCheck:	
  4067                           
  4068                           ;functions.c: 881: unsigned char darknessValue;
  4069                           ;functions.c: 882: RC0 = 0;
  4070                           
  4071                           ;incstack = 0
  4072                           ; Regs used in _DarknessCheck: [wreg+status,2+status,0+pclath+cstack]
  4073  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  4074  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  4075  0FD9  1007               	bcf	7,0	;volatile
  4076                           
  4077                           ;functions.c: 884: if(bValueFromPot == TRUE)
  4078  0FDA  036F               	decf	_bValueFromPot,w
  4079  0FDB  1D03               	btfss	3,2
  4080  0FDC  2FE4               	goto	l1746
  4081                           
  4082                           ;functions.c: 885: darknessValue= AnalogValue(3);
  4083  0FDD  3003               	movlw	3
  4084  0FDE  120A  158A  27AE  120A  158A  	fcall	_AnalogValue
  4085  0FE3  2FEA               	goto	L2
  4086  0FE4                     l1746:	
  4087                           
  4088                           ;functions.c: 886: else
  4089                           ;functions.c: 887: darknessValue=eeprom_read(addressDarknessValue);
  4090  0FE4  0864               	movf	_addressDarknessValue,w
  4091  0FE5  120A  158A  278A  120A  158A  	fcall	_eeprom_read
  4092  0FEA                     L2:	
  4093  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  4094  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  4095  0FEC  00A8               	movwf	??_DarknessCheck
  4096  0FED  0828               	movf	??_DarknessCheck,w
  4097  0FEE  00A9               	movwf	DarknessCheck@darknessValue
  4098                           
  4099                           ;functions.c: 889: if(AnalogValue(0)>darknessValue)
  4100  0FEF  3000               	movlw	0
  4101  0FF0  120A  158A  27AE  120A  158A  	fcall	_AnalogValue
  4102  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  4103  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  4104  0FF7  0229               	subwf	DarknessCheck@darknessValue,w
  4105  0FF8  1803               	skipnc
  4106  0FF9  2FFD               	goto	l1750
  4107                           
  4108                           ;functions.c: 890: bDark = 1;
  4109  0FFA  01EB               	clrf	_bDark
  4110  0FFB  0AEB               	incf	_bDark,f
  4111  0FFC  2FFE               	goto	l1752
  4112  0FFD                     l1750:	
  4113                           
  4114                           ;functions.c: 891: else
  4115                           ;functions.c: 892: bDark = 0;
  4116  0FFD  01EB               	clrf	_bDark
  4117  0FFE                     l1752:	
  4118                           
  4119                           ;functions.c: 893: RC0 = 0;
  4120  0FFE  1007               	bcf	7,0	;volatile
  4121  0FFF  0008               	return
  4122  1000                     __end_of_DarknessCheck:	
  4123                           
  4124                           	psect	text25
  4125  0F8A                     __ptext25:	
  4126 ;; *************** function _eeprom_read *****************
  4127 ;; Defined at:
  4128 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\pic\eeread.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  addr            1    wreg     unsigned char 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  addr            1    1[BANK0 ] unsigned char 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      unsigned char 
  4135 ;; Registers used:
  4136 ;;		wreg, status,2, status,0
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4142 ;;      Params:         0       0       0       0       0
  4143 ;;      Locals:         0       1       0       0       0
  4144 ;;      Temps:          0       1       0       0       0
  4145 ;;      Totals:         0       2       0       0       0
  4146 ;;Total ram usage:        2 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    2
  4149 ;; This function calls:
  4150 ;;		Nothing
  4151 ;; This function is called by:
  4152 ;;		_ReceivedPacketHandler
  4153 ;;		_DarknessCheck
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _eeprom_read
  4159  0F8A                     _eeprom_read:	
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4163                           ;eeprom_read@addr stored from wreg
  4164  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  4165  0F8B  1303               	bcf	3,6	;RP1=0, select bank0
  4166  0F8C  00A1               	movwf	eeprom_read@addr
  4167  0F8D  2F90               	goto	l464
  4168  0F8E                     u851:	
  4169  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  4170  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  4171  0F90                     l464:	
  4172  0F90  0064               	clrwdt	;# 
  4173  0F91  1683               	bsf	3,5	;RP0=1, select bank3
  4174  0F92  1703               	bsf	3,6	;RP1=1, select bank3
  4175  0F93  188C               	btfsc	12,1	;volsfr
  4176  0F94  2F8E               	goto	u851
  4177  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  4178  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  4179  0F97  0821               	movf	eeprom_read@addr,w
  4180  0F98  1283               	bcf	3,5	;RP0=0, select bank2
  4181  0F99  1703               	bsf	3,6	;RP1=1, select bank2
  4182  0F9A  008D               	movwf	13	;volatile
  4183  0F9B  303F               	movlw	63
  4184  0F9C  1283               	bcf	3,5	;RP0=0, select bank0
  4185  0F9D  1303               	bcf	3,6	;RP1=0, select bank0
  4186  0F9E  00A0               	movwf	??_eeprom_read
  4187  0F9F  0820               	movf	??_eeprom_read,w
  4188  0FA0  1683               	bsf	3,5	;RP0=1, select bank3
  4189  0FA1  1703               	bsf	3,6	;RP1=1, select bank3
  4190  0FA2  058C               	andwf	12,f	;volsfr
  4191  0FA3  140C               	bsf	12,0	;volsfr
  4192  0FA4  1003               	clrc
  4193  0FA5  180C               	btfsc	12,0	;volsfr
  4194  0FA6  1403               	setc
  4195  0FA7  3000               	movlw	0
  4196  0FA8  1803               	skipnc
  4197  0FA9  3001               	movlw	1
  4198  0FAA  1283               	bcf	3,5	;RP0=0, select bank2
  4199  0FAB  1703               	bsf	3,6	;RP1=1, select bank2
  4200  0FAC  080C               	movf	12,w	;volatile
  4201  0FAD  0008               	return
  4202  0FAE                     __end_of_eeprom_read:	
  4203                           
  4204                           	psect	text26
  4205  0FAE                     __ptext26:	
  4206 ;; *************** function _AnalogValue *****************
  4207 ;; Defined at:
  4208 ;;		line 852 in file "functions.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  channel         1    wreg     unsigned char 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  channel         1    7[BANK0 ] unsigned char 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      unsigned char 
  4215 ;; Registers used:
  4216 ;;		wreg, status,2, status,0, pclath, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4222 ;;      Params:         0       0       0       0       0
  4223 ;;      Locals:         0       1       0       0       0
  4224 ;;      Temps:          0       1       0       0       0
  4225 ;;      Totals:         0       2       0       0       0
  4226 ;;Total ram usage:        2 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    3
  4229 ;; This function calls:
  4230 ;;		_DelayDs
  4231 ;; This function is called by:
  4232 ;;		_ReceivedPacketHandler
  4233 ;;		_DarknessCheck
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _AnalogValue
  4239  0FAE                     _AnalogValue:	
  4240                           
  4241                           ;incstack = 0
  4242                           ; Regs used in _AnalogValue: [wreg+status,2+status,0+pclath+cstack]
  4243                           ;AnalogValue@channel stored from wreg
  4244  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  4245  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  4246  0FB0  00A7               	movwf	AnalogValue@channel
  4247                           
  4248                           ;functions.c: 854: ADCON0bits.CHS = channel;
  4249  0FB1  0827               	movf	AnalogValue@channel,w
  4250  0FB2  00A6               	movwf	??_AnalogValue
  4251  0FB3  0DA6               	rlf	??_AnalogValue,f
  4252  0FB4  0DA6               	rlf	??_AnalogValue,f
  4253  0FB5  081F               	movf	31,w	;volatile
  4254  0FB6  0626               	xorwf	??_AnalogValue,w
  4255  0FB7  39C3               	andlw	-61
  4256  0FB8  0626               	xorwf	??_AnalogValue,w
  4257  0FB9  009F               	movwf	31	;volatile
  4258                           
  4259                           ;functions.c: 855: ADCON0bits.ADON = 1;
  4260  0FBA  141F               	bsf	31,0	;volatile
  4261                           
  4262                           ;functions.c: 856: DelayDs(1);
  4263  0FBB  3001               	movlw	1
  4264  0FBC  00A0               	movwf	DelayDs@cnt
  4265  0FBD  3000               	movlw	0
  4266  0FBE  00A1               	movwf	DelayDs@cnt+1
  4267  0FBF  120A  158A  2767  120A  158A  	fcall	_DelayDs
  4268                           
  4269                           ;functions.c: 857: ADCON0bits.GO = 1;
  4270  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  4271  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  4272  0FC6  149F               	bsf	31,1	;volatile
  4273                           
  4274                           ;functions.c: 858: DelayDs(1);
  4275  0FC7  3001               	movlw	1
  4276  0FC8  00A0               	movwf	DelayDs@cnt
  4277  0FC9  3000               	movlw	0
  4278  0FCA  00A1               	movwf	DelayDs@cnt+1
  4279  0FCB  120A  158A  2767  120A  158A  	fcall	_DelayDs
  4280  0FD0                     l438:	
  4281                           ;functions.c: 859: while(ADCON0bits.GO);
  4282                           
  4283  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  4284  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  4285  0FD2  189F               	btfsc	31,1	;volatile
  4286  0FD3  2FD0               	goto	l438
  4287                           
  4288                           ;functions.c: 860: ADCON0bits.ADON = 0;
  4289  0FD4  101F               	bcf	31,0	;volatile
  4290                           
  4291                           ;functions.c: 861: return ADRESH;
  4292  0FD5  081E               	movf	30,w	;volatile
  4293  0FD6  0008               	return
  4294  0FD7                     __end_of_AnalogValue:	
  4295                           
  4296                           	psect	text27
  4297  0F67                     __ptext27:	
  4298 ;; *************** function _DelayDs *****************
  4299 ;; Defined at:
  4300 ;;		line 467 in file "functions.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  cnt             2    0[BANK0 ] int 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  i               2    4[BANK0 ] int 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  1    wreg      void 
  4307 ;; Registers used:
  4308 ;;		wreg, status,2
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4314 ;;      Params:         0       2       0       0       0
  4315 ;;      Locals:         0       2       0       0       0
  4316 ;;      Temps:          0       2       0       0       0
  4317 ;;      Totals:         0       6       0       0       0
  4318 ;;Total ram usage:        6 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    2
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_ReceivedPacketHandler
  4325 ;;		_Blink
  4326 ;;		_AnalogValue
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           
  4331                           ;psect for function _DelayDs
  4332  0F67                     _DelayDs:	
  4333                           
  4334                           ;functions.c: 468: int i;
  4335                           ;functions.c: 469: for(i=0;i<cnt;i++){
  4336                           
  4337                           ;incstack = 0
  4338                           ; Regs used in _DelayDs: [wreg+status,2]
  4339  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  4340  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  4341  0F69  01A4               	clrf	DelayDs@i
  4342  0F6A  01A5               	clrf	DelayDs@i+1
  4343  0F6B                     l368:	
  4344  0F6B  0825               	movf	DelayDs@i+1,w
  4345  0F6C  3A80               	xorlw	128
  4346  0F6D  00A2               	movwf	??_DelayDs
  4347  0F6E  0821               	movf	DelayDs@cnt+1,w
  4348  0F6F  3A80               	xorlw	128
  4349  0F70  0222               	subwf	??_DelayDs,w
  4350  0F71  1D03               	skipz
  4351  0F72  2F75               	goto	u795
  4352  0F73  0820               	movf	DelayDs@cnt,w
  4353  0F74  0224               	subwf	DelayDs@i,w
  4354  0F75                     u795:	
  4355  0F75  1803               	btfsc	3,0
  4356  0F76  0008               	return
  4357                           
  4358                           ;functions.c: 470: _delay((unsigned long)((100)*(4000000/4000.0)));
  4359  0F77  3082               	movlw	130
  4360  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  4362  0F7A  00A3               	movwf	??_DelayDs+1
  4363  0F7B  30DD               	movlw	221
  4364  0F7C  00A2               	movwf	??_DelayDs
  4365  0F7D                     u1667:	
  4366  0F7D  0BA2               	decfsz	??_DelayDs,f
  4367  0F7E  2F7D               	goto	u1667
  4368  0F7F  0BA3               	decfsz	??_DelayDs+1,f
  4369  0F80  2F7D               	goto	u1667
  4370  0F81  3001               	movlw	1
  4371  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  4372  0F83  1303               	bcf	3,6	;RP1=0, select bank0
  4373  0F84  07A4               	addwf	DelayDs@i,f
  4374  0F85  1803               	skipnc
  4375  0F86  0AA5               	incf	DelayDs@i+1,f
  4376  0F87  3000               	movlw	0
  4377  0F88  07A5               	addwf	DelayDs@i+1,f
  4378  0F89  2F6B               	goto	l368
  4379  0F8A                     __end_of_DelayDs:	
  4380                           
  4381                           	psect	text28
  4382  0372                     __ptext28:	
  4383 ;; *************** function _tc_int *****************
  4384 ;; Defined at:
  4385 ;;		line 782 in file "functions.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;		None
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4399 ;;      Params:         0       0       0       0       0
  4400 ;;      Locals:         0       0       0       0       0
  4401 ;;      Temps:          7       0       0       0       0
  4402 ;;      Totals:         7       0       0       0       0
  4403 ;;Total ram usage:        7 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    1
  4406 ;; This function calls:
  4407 ;;		_TimerCounter
  4408 ;;		i1_OperationMode
  4409 ;; This function is called by:
  4410 ;;		Interrupt level 1
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           
  4415                           ;psect for function _tc_int
  4416  0372                     _tc_int:	
  4417                           
  4418                           ;functions.c: 785: if((RB5 == 0)&&(intBlinkCycle == 0)&&(OperationMode() < 2)){
  4419  0372  1A86               	btfsc	6,5	;volatile
  4420  0373  2B8A               	goto	i1l2142
  4421  0374  0866               	movf	_intBlinkCycle,w
  4422  0375  0467               	iorwf	_intBlinkCycle+1,w
  4423  0376  1D03               	btfss	3,2
  4424  0377  2B8A               	goto	i1l2142
  4425  0378  120A  158A  26AC  120A  118A  	fcall	i1_OperationMode
  4426  037D  00F5               	movwf	??_tc_int
  4427  037E  3002               	movlw	2
  4428  037F  0275               	subwf	??_tc_int,w
  4429  0380  1803               	skipnc
  4430  0381  2B8A               	goto	i1l2142
  4431                           
  4432                           ;functions.c: 786: intBlinkCycle = 1;
  4433  0382  3001               	movlw	1
  4434  0383  1283               	bcf	3,5	;RP0=0, select bank0
  4435  0384  1303               	bcf	3,6	;RP1=0, select bank0
  4436  0385  00E6               	movwf	_intBlinkCycle
  4437  0386  3000               	movlw	0
  4438  0387  00E7               	movwf	_intBlinkCycle+1
  4439                           
  4440                           ;functions.c: 787: intBlinkCounter = 0;
  4441  0388  01FC               	clrf	_intBlinkCounter
  4442  0389  01FD               	clrf	_intBlinkCounter+1
  4443  038A                     i1l2142:	
  4444                           
  4445                           ;functions.c: 789: }
  4446                           ;functions.c: 790: if(TMR1IF ==1){
  4447  038A  1283               	bcf	3,5	;RP0=0, select bank0
  4448  038B  1303               	bcf	3,6	;RP1=0, select bank0
  4449  038C  1C0C               	btfss	12,0	;volatile
  4450  038D  2C29               	goto	L3
  4451                           
  4452                           ;functions.c: 791: TMR1ON = 0;
  4453  038E  1010               	bcf	16,0	;volatile
  4454                           
  4455                           ;functions.c: 792: TMR1H = 0x0B;
  4456  038F  300B               	movlw	11
  4457  0390  008F               	movwf	15	;volatile
  4458                           
  4459                           ;functions.c: 793: TMR1L = 0xDB;
  4460  0391  30DB               	movlw	219
  4461  0392  008E               	movwf	14	;volatile
  4462                           
  4463                           ;functions.c: 795: if((intBlinkCycle == 1)&&(intBlinkCounter<intNumberOfBlinks*2)){
  4464  0393  0366               	decf	_intBlinkCycle,w
  4465  0394  0467               	iorwf	_intBlinkCycle+1,w
  4466  0395  1D03               	btfss	3,2
  4467  0396  2BB9               	goto	i1l2160
  4468  0397  086E               	movf	_intNumberOfBlinks+1,w
  4469  0398  00F6               	movwf	??_tc_int+1
  4470  0399  086D               	movf	_intNumberOfBlinks,w
  4471  039A  00F5               	movwf	??_tc_int
  4472  039B  1003               	clrc
  4473  039C  0DF5               	rlf	??_tc_int,f
  4474  039D  0DF6               	rlf	??_tc_int+1,f
  4475  039E  087D               	movf	_intBlinkCounter+1,w
  4476  039F  3A80               	xorlw	128
  4477  03A0  00F7               	movwf	??_tc_int+2
  4478  03A1  0876               	movf	??_tc_int+1,w
  4479  03A2  3A80               	xorlw	128
  4480  03A3  0277               	subwf	??_tc_int+2,w
  4481  03A4  1D03               	skipz
  4482  03A5  2BA8               	goto	u147_25
  4483  03A6  0875               	movf	??_tc_int,w
  4484  03A7  027C               	subwf	_intBlinkCounter,w
  4485  03A8                     u147_25:	
  4486  03A8  1803               	skipnc
  4487  03A9  2BB9               	goto	i1l2160
  4488                           
  4489                           ;functions.c: 796: intBlinkCounter++;
  4490  03AA  3001               	movlw	1
  4491  03AB  07FC               	addwf	_intBlinkCounter,f
  4492  03AC  1803               	skipnc
  4493  03AD  0AFD               	incf	_intBlinkCounter+1,f
  4494  03AE  3000               	movlw	0
  4495  03AF  07FD               	addwf	_intBlinkCounter+1,f
  4496                           
  4497                           ;functions.c: 798: if(RC1 == 0)
  4498  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  4499  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  4500  03B2  1887               	btfsc	7,1	;volatile
  4501  03B3  2BB6               	goto	i1l427
  4502                           
  4503                           ;functions.c: 799: RC1 = 1;
  4504  03B4  1487               	bsf	7,1	;volatile
  4505  03B5  2BD7               	goto	i1l2168
  4506  03B6                     i1l427:	
  4507                           
  4508                           ;functions.c: 800: else if(RC1 == 1)
  4509  03B6  1C87               	btfss	7,1	;volatile
  4510  03B7  2BD7               	goto	i1l2168
  4511  03B8  2BD6               	goto	i1l2166
  4512  03B9                     i1l2160:	
  4513                           ;functions.c: 802: }
  4514                           
  4515                           ;functions.c: 801: RC1 = 0;
  4516                           
  4517                           
  4518                           ;functions.c: 804: else if((intBlinkCycle == 1)&&(intBlinkCounter >=intNumberOfBlinks*2)
      +                          ){
  4519  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  4520  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  4521  03BB  0366               	decf	_intBlinkCycle,w
  4522  03BC  0467               	iorwf	_intBlinkCycle+1,w
  4523  03BD  1D03               	btfss	3,2
  4524  03BE  2BD7               	goto	i1l2168
  4525  03BF  086E               	movf	_intNumberOfBlinks+1,w
  4526  03C0  00F6               	movwf	??_tc_int+1
  4527  03C1  086D               	movf	_intNumberOfBlinks,w
  4528  03C2  00F5               	movwf	??_tc_int
  4529  03C3  1003               	clrc
  4530  03C4  0DF5               	rlf	??_tc_int,f
  4531  03C5  0DF6               	rlf	??_tc_int+1,f
  4532  03C6  087D               	movf	_intBlinkCounter+1,w
  4533  03C7  3A80               	xorlw	128
  4534  03C8  00F7               	movwf	??_tc_int+2
  4535  03C9  0876               	movf	??_tc_int+1,w
  4536  03CA  3A80               	xorlw	128
  4537  03CB  0277               	subwf	??_tc_int+2,w
  4538  03CC  1D03               	skipz
  4539  03CD  2BD0               	goto	u151_25
  4540  03CE  0875               	movf	??_tc_int,w
  4541  03CF  027C               	subwf	_intBlinkCounter,w
  4542  03D0                     u151_25:	
  4543  03D0  1C03               	skipc
  4544  03D1  2BD7               	goto	i1l2168
  4545                           
  4546                           ;functions.c: 805: intBlinkCycle = 0;
  4547  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  4548  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  4549  03D4  01E6               	clrf	_intBlinkCycle
  4550  03D5  01E7               	clrf	_intBlinkCycle+1
  4551  03D6                     i1l2166:	
  4552                           
  4553                           ;functions.c: 806: RC1 = 0;
  4554  03D6  1087               	bcf	7,1	;volatile
  4555  03D7                     i1l2168:	
  4556                           
  4557                           ;functions.c: 807: }
  4558                           ;functions.c: 810: intHalfSecondCounter++;
  4559  03D7  3001               	movlw	1
  4560  03D8  1683               	bsf	3,5	;RP0=1, select bank1
  4561  03D9  1303               	bcf	3,6	;RP1=0, select bank1
  4562  03DA  07DB               	addwf	_intHalfSecondCounter^(0+128),f
  4563  03DB  1803               	skipnc
  4564  03DC  0ADC               	incf	(_intHalfSecondCounter+1)^(0+128),f
  4565  03DD  3000               	movlw	0
  4566  03DE  07DC               	addwf	(_intHalfSecondCounter+1)^(0+128),f
  4567                           
  4568                           ;functions.c: 811: if(intHalfSecondCounter>=2)
  4569  03DF  085C               	movf	(_intHalfSecondCounter+1)^(0+128),w
  4570  03E0  3A80               	xorlw	128
  4571  03E1  00FF               	movwf	127
  4572  03E2  3080               	movlw	128
  4573  03E3  027F               	subwf	127,w
  4574  03E4  1D03               	skipz
  4575  03E5  2BE8               	goto	u152_25
  4576  03E6  3002               	movlw	2
  4577  03E7  025B               	subwf	_intHalfSecondCounter^(0+128),w
  4578  03E8                     u152_25:	
  4579  03E8  1C03               	skipc
  4580  03E9  2BFB               	goto	i1l2178
  4581                           
  4582                           ;functions.c: 812: {
  4583                           ;functions.c: 813: intHalfSecondCounter = 0;
  4584  03EA  1683               	bsf	3,5	;RP0=1, select bank1
  4585  03EB  1303               	bcf	3,6	;RP1=0, select bank1
  4586  03EC  01DB               	clrf	_intHalfSecondCounter^(0+128)
  4587  03ED  01DC               	clrf	(_intHalfSecondCounter+1)^(0+128)
  4588                           
  4589                           ;functions.c: 814: intSecondCounter++;
  4590  03EE  3001               	movlw	1
  4591  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  4592  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  4593  03F1  07E8               	addwf	_intSecondCounter,f
  4594  03F2  1803               	skipnc
  4595  03F3  0AE9               	incf	_intSecondCounter+1,f
  4596  03F4  3000               	movlw	0
  4597  03F5  07E9               	addwf	_intSecondCounter+1,f
  4598                           
  4599                           ;functions.c: 815: TimerCounter();
  4600  03F6  120A  118A  270E  120A  118A  	fcall	_TimerCounter
  4601  03FB                     i1l2178:	
  4602                           
  4603                           ;functions.c: 816: }
  4604                           ;functions.c: 817: if(intSecondCounter >=60)
  4605  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  4606  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  4607  03FD  0869               	movf	_intSecondCounter+1,w
  4608  03FE  3A80               	xorlw	128
  4609  03FF  00FF               	movwf	127
  4610  0400  3080               	movlw	128
  4611  0401  027F               	subwf	127,w
  4612  0402  1D03               	skipz
  4613  0403  2C06               	goto	u153_25
  4614  0404  303C               	movlw	60
  4615  0405  0268               	subwf	_intSecondCounter,w
  4616  0406                     u153_25:	
  4617  0406  1C03               	skipc
  4618  0407  2C14               	goto	i1l2184
  4619                           
  4620                           ;functions.c: 818: {
  4621                           ;functions.c: 819: intSecondCounter = 0;
  4622  0408  1283               	bcf	3,5	;RP0=0, select bank0
  4623  0409  1303               	bcf	3,6	;RP1=0, select bank0
  4624  040A  01E8               	clrf	_intSecondCounter
  4625  040B  01E9               	clrf	_intSecondCounter+1
  4626                           
  4627                           ;functions.c: 820: intMinuteCounter++;
  4628  040C  3001               	movlw	1
  4629  040D  1683               	bsf	3,5	;RP0=1, select bank1
  4630  040E  1303               	bcf	3,6	;RP1=0, select bank1
  4631  040F  07DD               	addwf	_intMinuteCounter^(0+128),f
  4632  0410  1803               	skipnc
  4633  0411  0ADE               	incf	(_intMinuteCounter+1)^(0+128),f
  4634  0412  3000               	movlw	0
  4635  0413  07DE               	addwf	(_intMinuteCounter+1)^(0+128),f
  4636  0414                     i1l2184:	
  4637                           
  4638                           ;functions.c: 821: }
  4639                           ;functions.c: 822: if(intMinuteCounter >= 60)
  4640  0414  1683               	bsf	3,5	;RP0=1, select bank1
  4641  0415  1303               	bcf	3,6	;RP1=0, select bank1
  4642  0416  085E               	movf	(_intMinuteCounter+1)^(0+128),w
  4643  0417  3A80               	xorlw	128
  4644  0418  00FF               	movwf	127
  4645  0419  3080               	movlw	128
  4646  041A  027F               	subwf	127,w
  4647  041B  1D03               	skipz
  4648  041C  2C1F               	goto	u154_25
  4649  041D  303C               	movlw	60
  4650  041E  025D               	subwf	_intMinuteCounter^(0+128),w
  4651  041F                     u154_25:	
  4652  041F  1C03               	skipc
  4653  0420  2C25               	goto	i1l2188
  4654                           
  4655                           ;functions.c: 823: {
  4656                           ;functions.c: 824: intMinuteCounter = 0;
  4657  0421  1683               	bsf	3,5	;RP0=1, select bank1
  4658  0422  1303               	bcf	3,6	;RP1=0, select bank1
  4659  0423  01DD               	clrf	_intMinuteCounter^(0+128)
  4660  0424  01DE               	clrf	(_intMinuteCounter+1)^(0+128)
  4661  0425                     i1l2188:	
  4662                           
  4663                           ;functions.c: 825: }
  4664                           ;functions.c: 828: TMR1ON = 1;
  4665  0425  1283               	bcf	3,5	;RP0=0, select bank0
  4666  0426  1303               	bcf	3,6	;RP1=0, select bank0
  4667  0427  1410               	bsf	16,0	;volatile
  4668                           
  4669                           ;functions.c: 829: }
  4670                           ;functions.c: 830: TMR1IF = 0;
  4671  0428  100C               	bcf	12,0	;volatile
  4672  0429                     L3:	
  4673                           
  4674                           ;functions.c: 831: RBIF = 0;
  4675  0429  100B               	bcf	11,0	;volatile
  4676                           
  4677                           ;functions.c: 832: GIE = 1;
  4678  042A  178B               	bsf	11,7	;volatile
  4679                           
  4680                           ;functions.c: 833: return;
  4681  042B  087B               	movf	??_tc_int+6,w
  4682  042C  00FF               	movwf	127
  4683  042D  087A               	movf	??_tc_int+5,w
  4684  042E  008A               	movwf	10
  4685  042F  0879               	movf	??_tc_int+4,w
  4686  0430  0084               	movwf	4
  4687  0431  0E78               	swapf	(??_tc_int+3)^(0+-128),w
  4688  0432  0083               	movwf	3
  4689  0433  0EFE               	swapf	126,f
  4690  0434  0E7E               	swapf	126,w
  4691  0435  0009               	retfie
  4692  0436                     __end_of_tc_int:	
  4693                           
  4694                           	psect	intentry
  4695  0004                     __pintentry:	
  4696                           ;incstack = 0
  4697 ;; hardware stack exceeded
  4698                           ; Regs used in _tc_int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4699                           
  4700  0004                     interrupt_function:	
  4701  007E                     saved_w	set	btemp
  4702  0004  00FE               	movwf	btemp
  4703  0005  0E03               	swapf	3,w
  4704  0006  00F8               	movwf	??_tc_int+3
  4705  0007  0804               	movf	4,w
  4706  0008  00F9               	movwf	??_tc_int+4
  4707  0009  080A               	movf	10,w
  4708  000A  00FA               	movwf	??_tc_int+5
  4709  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4710  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4711  000D  087F               	movf	btemp+1,w
  4712  000E  00FB               	movwf	??_tc_int+6
  4713  000F  120A  118A  2B72   	ljmp	_tc_int
  4714                           
  4715                           	psect	text29
  4716  0EAC                     __ptext29:	
  4717 ;; *************** function i1_OperationMode *****************
  4718 ;; Defined at:
  4719 ;;		line 913 in file "functions.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;		None
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  OperationMod    1    1[COMMON] unsigned char 
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      unsigned char 
  4726 ;; Registers used:
  4727 ;;		wreg, status,2
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4733 ;;      Params:         0       0       0       0       0
  4734 ;;      Locals:         1       0       0       0       0
  4735 ;;      Temps:          1       0       0       0       0
  4736 ;;      Totals:         2       0       0       0       0
  4737 ;;Total ram usage:        2 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; This function calls:
  4740 ;;		Nothing
  4741 ;; This function is called by:
  4742 ;;		_tc_int
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           
  4747                           ;psect for function i1_OperationMode
  4748  0EAC                     i1_OperationMode:	
  4749                           
  4750                           ;functions.c: 915: unsigned char bracketStatus;
  4751                           ;functions.c: 916: bracketStatus = ((~PORTB) & 0b00000111) ;
  4752                           
  4753                           ;incstack = 0
  4754 ;; hardware stack exceeded
  4755                           ; Regs used in i1_OperationMode: [wreg+status,2]
  4756  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  4757  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  4758  0EAE  0906               	comf	6,w	;volatile
  4759  0EAF  3907               	andlw	7
  4760  0EB0  00F0               	movwf	??i1_OperationMode
  4761  0EB1  0870               	movf	??i1_OperationMode,w
  4762  0EB2  00F1               	movwf	i1OperationMode@bracketStatus
  4763                           
  4764                           ;functions.c: 918: return 6;
  4765  0EB3  3006               	movlw	6
  4766  0EB4  0008               	return
  4767  0EB5                     __end_ofi1_OperationMode:	
  4768                           
  4769                           	psect	text30
  4770  070E                     __ptext30:	
  4771 ;; *************** function _TimerCounter *****************
  4772 ;; Defined at:
  4773 ;;		line 372 in file "functions.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;		None
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;  i               2    3[COMMON] int 
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  1    wreg      void 
  4780 ;; Registers used:
  4781 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4787 ;;      Params:         0       0       0       0       0
  4788 ;;      Locals:         2       0       0       0       0
  4789 ;;      Temps:          3       0       0       0       0
  4790 ;;      Totals:         5       0       0       0       0
  4791 ;;Total ram usage:        5 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; This function calls:
  4794 ;;		Nothing
  4795 ;; This function is called by:
  4796 ;;		_tc_int
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           
  4801                           ;psect for function _TimerCounter
  4802  070E                     _TimerCounter:	
  4803                           
  4804                           ;functions.c: 374: for (int i = 0; i < 5; i++)
  4805                           
  4806                           ;incstack = 0
  4807 ;; hardware stack exceeded
  4808                           ; Regs used in _TimerCounter: [wreg-fsr0h+status,2+status,0+btemp+1]
  4809  070E  01F3               	clrf	TimerCounter@i
  4810  070F  01F4               	clrf	TimerCounter@i+1
  4811  0710                     L4:	
  4812  0710  0874               	movf	TimerCounter@i+1,w
  4813  0711  3A80               	xorlw	128
  4814  0712  00FF               	movwf	127
  4815  0713  3080               	movlw	128
  4816  0714  027F               	subwf	127,w
  4817  0715  1D03               	skipz
  4818  0716  2F19               	goto	u130_25
  4819  0717  3005               	movlw	5
  4820  0718  0273               	subwf	TimerCounter@i,w
  4821  0719                     u130_25:	
  4822  0719  1803               	btfsc	3,0
  4823  071A  0008               	return
  4824                           
  4825                           ;functions.c: 375: {
  4826                           ;functions.c: 376: if(intClockTimer[i]>0)
  4827  071B  0873               	movf	TimerCounter@i,w
  4828  071C  00F0               	movwf	??_TimerCounter
  4829  071D  0770               	addwf	??_TimerCounter,w
  4830  071E  3EC8               	addlw	(low (_intClockTimer| 0))& (0+255)
  4831  071F  0084               	movwf	4
  4832  0720  1383               	bcf	3,7	;select IRP bank1
  4833  0721  0800               	movf	0,w
  4834  0722  00F1               	movwf	??_TimerCounter+1
  4835  0723  0A84               	incf	4,f
  4836  0724  0800               	movf	0,w
  4837  0725  00F2               	movwf	??_TimerCounter+2
  4838  0726  0872               	movf	??_TimerCounter+2,w
  4839  0727  3A80               	xorlw	128
  4840  0728  00FF               	movwf	127
  4841  0729  3080               	movlw	128
  4842  072A  027F               	subwf	127,w
  4843  072B  1D03               	skipz
  4844  072C  2F2F               	goto	u131_25
  4845  072D  3001               	movlw	1
  4846  072E  0271               	subwf	??_TimerCounter+1,w
  4847  072F                     u131_25:	
  4848  072F  1C03               	skipc
  4849  0730  2F43               	goto	i1l2074
  4850                           
  4851                           ;functions.c: 377: intClockTimer[i]--;
  4852  0731  0873               	movf	TimerCounter@i,w
  4853  0732  00F0               	movwf	??_TimerCounter
  4854  0733  0770               	addwf	??_TimerCounter,w
  4855  0734  3EC8               	addlw	(low (_intClockTimer| 0))& (0+255)
  4856  0735  0084               	movwf	4
  4857  0736  30FF               	movlw	255
  4858  0737  1383               	bcf	3,7	;select IRP bank1
  4859  0738  0780               	addwf	0,f
  4860  0739  0F84               	incfsz	4,f
  4861  073A  0800               	movf	0,w
  4862  073B  1803               	skipnc
  4863  073C  0A00               	incf	0,w
  4864  073D  00FF               	movwf	127
  4865  073E  30FF               	movlw	255
  4866  073F  077F               	addwf	127,w
  4867  0740  0080               	movwf	0
  4868  0741  0384               	decf	4,f
  4869  0742  2F49               	goto	i1l2076
  4870  0743                     i1l2074:	
  4871                           
  4872                           ;functions.c: 378: else
  4873                           ;functions.c: 379: bTimerComplete[i] = 1;
  4874  0743  0873               	movf	TimerCounter@i,w
  4875  0744  3ED2               	addlw	(low (_bTimerComplete| 0))& (0+255)
  4876  0745  0084               	movwf	4
  4877  0746  1383               	bcf	3,7	;select IRP bank1
  4878  0747  0180               	clrf	0
  4879  0748  0A80               	incf	0,f
  4880  0749                     i1l2076:	
  4881  0749  3001               	movlw	1
  4882  074A  07F3               	addwf	TimerCounter@i,f
  4883  074B  1803               	skipnc
  4884  074C  0AF4               	incf	TimerCounter@i+1,f
  4885  074D  3000               	movlw	0
  4886  074E  07F4               	addwf	TimerCounter@i+1,f
  4887  074F  2F10               	goto	L4
  4888  0750                     __end_of_TimerCounter:	
  4889  007E                     btemp	set	126	;btemp
  4890  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    39
    Data        3
    BSS         74
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     68      80
    BANK1            80      0      63
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ReceivedPacketHandler@Data	PTR unsigned char  size(1) Largest target is 30
		 -> TransiverReadFIFO@ReceivedString(BANK0[30]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _tc_int in COMMON

    _tc_int->_TimerCounter

Critical Paths under _main in BANK0

    _main->_TransiverReadFIFO
    _TransiverToReceive->_FindChannel
    _TransiverReadFIFO->_ReceivedPacketHandler
    _ReceivedPacketHandler->_TransmittPacket
    _TransiverInit->_FindChannel
    _Blink->_DelayDs
    _Mode_5->_TransmittPacket
    _Mode_4->_TransmittPacket
    _TransmittPacket->_FindChannel
    _WriteFIFO->_WriteSPI
    _FindChannel->_SetRFMode
    _SetRFMode->_RegisterSet
    _RegisterSet->_RegisterRead
    _RegisterRead->_WriteSPI
    _ReadSPI->_WriteSPI
    _Mode_1->_DarknessCheck
    _LightWithSensController->_DarknessCheck
    _DarknessCheck->_AnalogValue
    _AnalogValue->_DelayDs

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   76142
                                             65 BANK0      3     3      0
                             _Mode_0
                             _Mode_1
                             _Mode_2
                             _Mode_4
                             _Mode_5
                      _OperationMode
                      _TransiverInit
                  _TransiverReadFIFO
                 _TransiverToReceive
                    _TransmittPacket
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TransiverToReceive                                   2     2      0    9949
                                             21 BANK0      2     2      0
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (1) _TransiverReadFIFO                                   36    36      0   16754
                                             29 BANK0     36    36      0
                           _ReadFIFO
              _ReceivedPacketHandler
                          _SetRFMode
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _ReceivedPacketHandler                                2     2      0   13506
                                             27 BANK0      2     2      0
                        _AnalogValue
                      _DarknessCheck
                            _DelayDs
                      _OperationMode
                    _TransmittPacket
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _OperationMode                                        2     2      0       1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadFIFO                                             2     2      0      46
                                              3 BANK0      2     2      0
                            _ReadSPI
 ---------------------------------------------------------------------------------
 (1) _TransiverInit                                        1     1      0   10167
                                             21 BANK0      1     1      0
                              _Blink
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _Blink                                                5     3      2     924
                                              6 BANK0      5     3      2
                            _DelayDs
 ---------------------------------------------------------------------------------
 (1) _Mode_5                                               1     1      0   12267
                                             27 BANK0      1     1      0
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (1) _Mode_4                                               0     0      0   12267
            _LightWithSensController
                    _TransmittPacket
 ---------------------------------------------------------------------------------
 (1) _TransmittPacket                                      6     5      1   10679
                                             21 BANK0      6     5      1
                        _AnalogValue (ARG)
                        _FindChannel
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
                          _WriteFIFO
                        _eeprom_read (ARG)
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _WriteFIFO                                            1     1      0      45
                                              3 BANK0      1     1      0
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (2) _FindChannel                                          7     7      0    4734
                                             14 BANK0      7     7      0
                       _RegisterRead
                        _RegisterSet
                          _SetRFMode
 ---------------------------------------------------------------------------------
 (2) _SetRFMode                                            3     3      0    2321
                                             11 BANK0      3     3      0
                       _RegisterRead
                        _RegisterSet
 ---------------------------------------------------------------------------------
 (3) _RegisterSet                                          4     3      1    2074
                                              7 BANK0      4     3      1
                       _RegisterRead (ARG)
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _RegisterRead                                         4     4      0     114
                                              3 BANK0      4     4      0
                            _ReadSPI
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _ReadSPI                                              0     0      0      23
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _WriteSPI                                             3     3      0      23
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Mode_2                                               0     0      0    1588
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (1) _Mode_1                                               0     0      0     882
                      _DarknessCheck
 ---------------------------------------------------------------------------------
 (1) _Mode_0                                               0     0      0    1588
            _LightWithSensController
 ---------------------------------------------------------------------------------
 (2) _LightWithSensController                              0     0      0    1588
                      _DarknessCheck
                      _timerFunction
 ---------------------------------------------------------------------------------
 (2) _timerFunction                                        5     1      4     706
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) _DarknessCheck                                        2     2      0     882
                                              8 BANK0      2     2      0
                        _AnalogValue
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _AnalogValue                                          2     2      0     836
                                              6 BANK0      2     2      0
                            _DelayDs
 ---------------------------------------------------------------------------------
 (3) _DelayDs                                              6     4      2     814
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _tc_int                                               7     7      0     113
                                              5 COMMON     7     7      0
                       _TimerCounter
                    i1_OperationMode
 ---------------------------------------------------------------------------------
 (10) i1_OperationMode                                     2     2      0       1
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _TimerCounter                                        5     5      0     112
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Mode_0
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_1
     _DarknessCheck
       _AnalogValue
         _DelayDs
       _eeprom_read
   _Mode_2
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
   _Mode_4
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _Mode_5
     _LightWithSensController
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _timerFunction
     _TransmittPacket
       _AnalogValue (ARG)
         _DelayDs
       _FindChannel (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode (ARG)
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
       _WriteFIFO (ARG)
         _WriteSPI
       _eeprom_read (ARG)
       _timerFunction (ARG)
   _OperationMode
   _TransiverInit
     _Blink
       _DelayDs
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
   _TransiverReadFIFO
     _ReadFIFO
       _ReadSPI
         _WriteSPI
     _ReceivedPacketHandler
       _AnalogValue
         _DelayDs
       _DarknessCheck
         _AnalogValue
           _DelayDs
         _eeprom_read
       _DelayDs
       _OperationMode
       _TransmittPacket
         _AnalogValue (ARG)
           _DelayDs
         _FindChannel (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
           _SetRFMode
             _RegisterRead
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _RegisterSet
               _RegisterRead (ARG)
                 _ReadSPI
                   _WriteSPI
                 _WriteSPI
               _WriteSPI (ARG)
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet (ARG)
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
         _SetRFMode (ARG)
           _RegisterRead
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _RegisterSet
             _RegisterRead (ARG)
               _ReadSPI
                 _WriteSPI
               _WriteSPI
             _WriteSPI (ARG)
         _WriteFIFO (ARG)
           _WriteSPI
         _eeprom_read (ARG)
         _timerFunction (ARG)
       _eeprom_read
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _TransiverToReceive
     _FindChannel
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _timerFunction
   _TransmittPacket
     _AnalogValue (ARG)
       _DelayDs
     _FindChannel (ARG)
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
       _SetRFMode
         _RegisterRead
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _RegisterSet
           _RegisterRead (ARG)
             _ReadSPI
               _WriteSPI
             _WriteSPI
           _WriteSPI (ARG)
     _RegisterRead (ARG)
       _ReadSPI
         _WriteSPI
       _WriteSPI
     _RegisterSet (ARG)
       _RegisterRead (ARG)
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _WriteSPI (ARG)
     _SetRFMode (ARG)
       _RegisterRead
         _ReadSPI
           _WriteSPI
         _WriteSPI
       _RegisterSet
         _RegisterRead (ARG)
           _ReadSPI
             _WriteSPI
           _WriteSPI
         _WriteSPI (ARG)
     _WriteFIFO (ARG)
       _WriteSPI
     _eeprom_read (ARG)
     _timerFunction (ARG)
   _init

 _tc_int (ROOT)
   _TimerCounter
   i1_OperationMode

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      3F       7       78.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     44      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9D      12        0.0%
ABS                  0      0      9D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Jan 07 11:38:40 2017

                      __CFG_CP$ON 0000                                 pc 0002        __size_of_TransiverReadFIFO 0067  
           _bTransiverModeReceive 006C                       _SSPSTATbits 0094                                _RD 0C60  
                     __CFG_CPD$ON 0000                                _WR 0C61                                fsr 0004  
                             l320 0F2F                               l325 0ED5                               l309 04C6  
                             l344 078D                               l281 0063                               l282 0078  
                             l362 067A                               l275 0187                               l438 0FD0  
                             l374 0EE1                               l279 004E                               l359 0674  
                             l368 0F6B                               l464 0F90                               l398 05E2  
                             _GIE 005F                               _RA1 0029                               _RB1 0031  
                             _RC0 0038                               _RB2 0032                               _RA4 002C  
                             _RC1 0039                               _RA5 002D                               _RD0 0040  
                             _RC2 003A                               _RB4 0034                               _RB5 0035  
                             _RD3 0043                               _RD4 0044                               u805 01AC  
                             u825 0247                               u851 0F8E                               u835 0284  
                             u795 0F75             __end_of_DarknessCheck 1000                               fsr0 0004  
                             indf 0000                  TransmittPacket@i 0038               __end_of_FindChannel 0288  
                 ??_timerFunction 0024                      __CFG_LVP$OFF 0000                              l2010 0F13  
                            l2004 07FB                              l2110 0539                              l2102 051F  
                            l2024 06E9                              l2050 061B                              l2026 06FC  
                            l2122 0560                              l2114 0546                              l2106 052C  
                            l2054 062F                              l2126 056A                              l2118 0553  
                            l1610 05C1                              l1602 0587                              l2058 0638  
                            l1604 0594                              l1606 05A3                              l1614 05CF  
                            l1702 0472                              l1608 05B2                              l1704 0485  
                            l1650 0262                              l1634 01AE                              l1810 00F9  
                            l2098 0513                              l1652 023C                              l1804 00E0  
                            l1750 0FFD                              l1654 0273                              l1830 013E  
                            l1822 012B                              l1752 0FFE                              l1728 04CF  
                            l1832 0146                              l1816 0112                              l1746 0FE4  
                            l1658 0286                              l1842 0160                              l1854 075D  
                            l1782 008D                              l1846 016B                              l1864 0772  
                            l1784 009F                              l1882 0795                              l1794 00BE  
                            l1978 036D                              l1988 0F24       __size_of_TransiverToReceive 005C  
                            u1135 079F                              u1265 060B                              u1607 0456  
                            u1617 048F                              u1627 04D3                              u1637 04E0  
                            u1557 04FA                              u1647 0199                              u1567 050C  
                            u1657 026E                              u1577 06CD                              u1667 0F7D  
                            u1587 0706                              u1597 063E                              _RBIF 0058  
                            _main 04E5                              _init 064D                              btemp 007E  
                            start 0012                     __CFG_IESO$OFF 0000                   __end_of_DelayDs 0F8A  
__size_of_LightWithSensController 003F                   __end_of_ReadSPI 0EA4                             ?_main 0070  
                           ?_init 0070                             _EEADR 010D                     __CFG_WDTE$OFF 0000  
                           _ANSEL 0188             __end_of_OperationMode 0EBE                             _T1CON 0010  
                  __CFG_DEBUG$OFF 0000                             i1l427 03B6                             _TMR1H 000F  
                           _TMR1L 000E                             _PORTA 0005                             _PORTB 0006  
                           _PORTC 0007                             _PORTD 0008                             _PORTE 0009  
                           _TRISA 0085                             _TRISB 0086                             _TRISC 0087  
                           _TRISD 0088                             _SSPIE 0463                             _TRISE 0089  
                           _Blink 078F                             _bDark 006B                    __CFG_FCMEN$OFF 0000  
         ??_ReceivedPacketHandler 003B                       _AnalogValue 0FAE                    __CFG_BOREN$OFF 0000  
                           pclath 000A                   ??_TransiverInit 0035                             status 0003  
                   _intBlinkCycle 0066                             wtemp0 007E                    WriteSPI@buffer 0021  
                __end_of_ChannelP 07D5                  __end_of_ChannelR 07E2                  __end_of_ChannelS 07EF  
                  __CFG_MCLRE$OFF 0000                     _intClockTimer 00C8                 _intNumberOfBlinks 006D  
                 __initialization 0015                      __end_of_main 0577                      __end_of_init 06B2  
                __end_of_ReadFIFO 0EF3                     ReadFIFO@value 0024                       _FindChannel 0188  
                   ??_RegisterSet 0028                            ??_main 0061                            ??_init 0020  
                          ?_Blink 0026                            _ADRESH 001E                            _EEDATA 010C  
                          _EECON1 018C                            _ANSELH 0189                  __end_of_WriteSPI 0EE5  
                          i1l2142 038A                            i1l2160 03B9                            i1l2074 0743  
                          i1l2076 0749                            i1l2166 03D6                            i1l2184 0414  
                          i1l2168 03D7                            i1l2178 03FB                            i1l2188 0425  
                          u130_25 0719                            u131_25 072F                            u151_25 03D0  
                          u152_25 03E8                            u153_25 0406                            u154_25 041F  
                          u147_25 03A8                         ??_DelayDs 0022                            Blink@i 0029  
                          Blink@n 0026                            _TMR1IF 0060                            _TMR1ON 0080  
    i1OperationMode@bracketStatus 0071                            _SSPBUF 0013                         ??_ReadSPI 0023  
                  __CFG_PWRTE$OFF 0000                            _Mode_0 0E98                            _Mode_1 0F17  
                          _Mode_2 0ECA                            _Mode_4 07EF                            _Mode_5 0F05  
              __size_of_SetRFMode 006F              __size_of_eeprom_read 0024   TransiverReadFIFO@ReceivedString 003F  
                          _tc_int 0372                            saved_w 007E               __end_of_RegisterSet 0F4B  
                   ?_RegisterRead 0070                RegisterRead@adress 0026                __size_of_WriteFIFO 000C  
         __end_of__initialization 0038                   eeprom_read@addr 0021           _LightWithSensController 0750  
                   _bChannelFound 006A                     __end_of_Blink 07C2                    __pcstackCOMMON 0070  
                    __pidataBANK0 0E95                      _channelFound 00D7                    _OPTION_REGbits 0081  
                         ??_Blink 0028                 __end_of_SetRFMode 05E6                    ??_RegisterRead 0023  
                      __pbssBANK0 0064                        __pbssBANK1 00A0          __size_ofi1_OperationMode 0009  
                       ?_ReadFIFO 0070        timerFunction@intSetSeconds 0022                AnalogValue@channel 0027  
        __size_of_TransmittPacket 00AF                           ?_Mode_0 0070                           ?_Mode_1 0070  
                         ?_Mode_2 0070                           ?_Mode_4 0070                           ?_Mode_5 0070  
                      __pmaintext 04E5                        __pintentry 0004                           ?_tc_int 0070  
                       ?_WriteSPI 0070                 __end_of_WriteFIFO 0ECA                       _RegisterSet 0F31  
                   ?_TimerCounter 0070        __end_of_TransiverToReceive 070E             __end_of_timerFunction 0F05  
                    ?_AnalogValue 0070                        __stringtab 07C2                        ??_ReadFIFO 0023  
  __size_of_ReceivedPacketHandler 014C     __end_of_ReceivedPacketHandler 0188                           _DelayDs 0F67  
       ??_LightWithSensController 002A                           _ReadSPI 0E9C            __size_of_DarknessCheck 0029  
                 __size_of_Mode_0 0004                   __size_of_Mode_1 001A                   __size_of_Mode_2 000D  
                 __size_of_Mode_4 0010                   __size_of_Mode_5 0012        OperationMode@bracketStatus 0021  
                    ?_FindChannel 0070                         _ANSELbits 0188                        ??_WriteSPI 0020  
                 __size_of_tc_int 00C4                           __ptext1 064D                           __ptext2 06B2  
                         __ptext3 05E6                           __ptext4 003C                           __ptext5 0EB5  
                         __ptext6 0EE5                           __ptext7 0288                           __ptext8 078F  
                         __ptext9 0F05                         _T1CONbits 0010                    ??_TimerCounter 0070  
                         clrloop0 0EA5              end_of_initialization 0038             __end_of_TransiverInit 0372  
            TransmittPacket@value 0035              TransmittPacket@topic 003A            __size_of_OperationMode 0009  
               ??i1_OperationMode 0070                  WriteSPI@databyte 0022              __end_of_RegisterRead 0F67  
               ??_TransmittPacket 0036                     WriteFIFO@Data 0023                   _intBlinkCounter 007C  
                   _DarknessCheck 0FD7                     ??_eeprom_read 0020                    __end_of_Mode_0 0E9C  
                  __end_of_Mode_1 0F31                    __end_of_Mode_2 0ED7                    __end_of_Mode_4 07FF  
                  __end_of_Mode_5 0F17                    __end_of_tc_int 0436                    ?_DarknessCheck 0070  
                   _OperationMode 0EB5               start_initialization 0015             _intDarkCheckIntervall 00D9  
      DarknessCheck@darknessValue 0029                         _SetRFMode 0577              __size_of_AnalogValue 0029  
               __size_of_ReadFIFO 000E          __CFG_FOSC$INTRC_NOCLKOUT 0000                          ??_Mode_0 002A  
                        ??_Mode_1 002A                          ??_Mode_2 002A                          ??_Mode_4 003B  
                        ??_Mode_5 003B              __end_of_TimerCounter 0750               __end_of_eeprom_read 0FAE  
                   TimerCounter@i 0073                       __pdataBANK0 006D                          ??_tc_int 0075  
                    ?_RegisterSet 0027                    ?_OperationMode 0070              __size_of_FindChannel 0100  
               RegisterRead@value 0025                 __size_of_WriteSPI 000E                       __pbssCOMMON 007C  
                       ___latbits 0002                         _WriteFIFO 0EBE                     __pcstackBANK0 0020  
                    _ReceivedData 00A0            SetRFMode@mcparam0_read 002D                        ?_SetRFMode 0070  
                        ?_DelayDs 0020                 RegisterSet@adress 002A                          ?_ReadSPI 0070  
           __size_of_RegisterRead 001C                _TransiverToReceive 06B2               ?_TransiverToReceive 0070  
                 ??_DarknessCheck 0028                         __pstrings 07C2       timerFunction@intTimerNumber 0020  
                  __size_of_Blink 0033                        ?_WriteFIFO 0070                   i1_OperationMode 0EAC  
            ??_TransiverToReceive 0035                      _RegisterRead 0F4B                   _TransmittPacket 0436  
               interrupt_function 0004                          _IOCBbits 0096                          DelayDs@i 0024  
                    FindChannel@i 0033             _ReceivedPacketHandler 003C                         clear_ram0 0EA4  
                     _eeprom_read 0F8A                          _PIE1bits 008C                          _PIR1bits 000C  
          __size_of_timerFunction 0012                   ??_OperationMode 0020                     SetRFMode@mode 002C  
                      _ADCON0bits 001F                       __stringbase 07C7                        _ADCON1bits 009F  
                        _WPUBbits 0095                          _ChannelP 07C8                          _ChannelR 07D5  
                        _ChannelS 07E2          ?_LightWithSensController 0070                       ??_SetRFMode 002B  
                        _ReadFIFO 0EE5             __size_of_TimerCounter 0042                  __size_of_DelayDs 0023  
                __size_of_ReadSPI 0008                    _bTimerComplete 00D2                  _intMinuteCounter 00DD  
               _TransiverReadFIFO 05E6                          _WriteSPI 0ED7                __end_of__stringtab 07C8  
                _intSecondCounter 0068                ?_TransiverReadFIFO 0070                        _ANSELHbits 0189  
         __end_ofi1_OperationMode 0EB5            __size_of_TransiverInit 00EA              __size_of_RegisterSet 001A  
                RegisterSet@value 0027                       ??_WriteFIFO 0023           __end_of_TransmittPacket 04E5  
                    _TimerCounter 070E                          __ptext10 07EF                          __ptext11 0436  
                        __ptext20 0F17                          __ptext12 0EBE                          __ptext21 0E98  
                        __ptext13 0188                          __ptext30 070E                          __ptext22 0750  
                        __ptext14 0577                          __ptext23 0EF3                          __ptext15 0F31  
                        __ptext24 0FD7                          __ptext16 0F4B                          __ptext25 0F8A  
                        __ptext17 0E9C                          __ptext26 0FAE                          __ptext18 0ED7  
                        __ptext27 0F67                          __ptext19 0ECA                          __ptext28 0372  
                        __ptext29 0EAC               ??_TransiverReadFIFO 003D                     _timerFunction 0EF3  
          ?_ReceivedPacketHandler 0070                     __size_of_main 0092                     __size_of_init 0065  
                   _bValueFromPot 006F         __end_of_TransiverReadFIFO 064D                        DelayDs@cnt 0020  
                  FindChannel@cnt 0031   __end_of_LightWithSensController 078F              _intHalfSecondCounter 00DB  
                      _INTCONbits 000B                TransiverReadFIFO@i 005D                TransiverReadFIFO@j 005F  
                  ?_timerFunction 0020                     ??_AnalogValue 0026                          intlevel1 0000  
                   _TransiverInit 0288                         stringcode 07C2                        _OSCCONbits 008F  
                   ??_FindChannel 002E                  ?i1_OperationMode 0070                          stringdir 07C2  
                        stringtab 07C2                  ?_TransmittPacket 0035         ReceivedPacketHandler@Data 003C  
                  ?_TransiverInit 0070                      ?_eeprom_read 0070               __end_of_AnalogValue 0FD7  
                      _SSPCONbits 0014              _addressDarknessValue 0064  
